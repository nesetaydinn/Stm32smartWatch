
smartWatchF407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b608  0802d3f0  0802d3f0  0003d3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080489f8  080489f8  00062a30  2**0
                  CONTENTS
  4 .ARM          00000008  080489f8  080489f8  000589f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08048a00  08048a00  00062a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08048a00  08048a00  00058a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08048a04  08048a04  00058a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a30  20000000  08048a08  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000197d0  20002a30  0804b438  00062a30  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001c200  0804b438  0006c200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00062a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a375e  00000000  00000000  00062a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0001086a  00000000  00000000  001061be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003e68  00000000  00000000  00116a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003a20  00000000  00000000  0011a890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002313c  00000000  00000000  0011e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0006813c  00000000  00000000  001413ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb516  00000000  00000000  001a9528  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00294a3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000104a8  00000000  00000000  00294abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a30 	.word	0x20002a30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802d3d4 	.word	0x0802d3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a34 	.word	0x20002a34
 80001cc:	0802d3d4 	.word	0x0802d3d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fdb0 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f814 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fa62 	bl	800142c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f68:	f000 f890 	bl	800108c <MX_I2C1_Init>
  MX_RTC_Init();
 8000f6c:	f000 f8bc 	bl	80010e8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f70:	f000 f914 	bl	800119c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f74:	f000 f948 	bl	8001208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f78:	f000 f992 	bl	80012a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f7c:	f000 f9de 	bl	800133c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000f80:	f000 fa2a 	bl	80013d8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  tos_tasks_init();
 8000f84:	f029 ff6a 	bl	802ae5c <tos_tasks_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x30>
	...

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b098      	sub	sp, #96	; 0x60
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f02a f843 	bl	802b026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <SystemClock_Config+0xf4>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <SystemClock_Config+0xf4>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <SystemClock_Config+0xf4>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <SystemClock_Config+0xf8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <SystemClock_Config+0xf8>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <SystemClock_Config+0xf8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001000:	2302      	movs	r3, #2
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800100e:	23a8      	movs	r3, #168	; 0xa8
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001016:	2304      	movs	r3, #4
 8001018:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101e:	4618      	mov	r0, r3
 8001020:	f002 f814 	bl	800304c <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800102a:	f000 faaf 	bl	800158c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2105      	movs	r1, #5
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fa6d 	bl	800352c <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001058:	f000 fa98 	bl	800158c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800105c:	2302      	movs	r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV20;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <SystemClock_Config+0xfc>)
 8001062:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fc83 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001074:	f000 fa8a 	bl	800158c <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3760      	adds	r7, #96	; 0x60
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000
 8001088:	00140300 	.word	0x00140300

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 f80b 	bl	80020e4 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 fa5a 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2001b618 	.word	0x2001b618
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_RTC_Init+0xac>)
 8001102:	4a25      	ldr	r2, [pc, #148]	; (8001198 <MX_RTC_Init+0xb0>)
 8001104:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_RTC_Init+0xac>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_RTC_Init+0xac>)
 800110e:	227f      	movs	r2, #127	; 0x7f
 8001110:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3124;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_RTC_Init+0xac>)
 8001114:	f640 4234 	movw	r2, #3124	; 0xc34
 8001118:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_RTC_Init+0xac>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_RTC_Init+0xac>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_RTC_Init+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800112c:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_RTC_Init+0xac>)
 800112e:	f002 fd03 	bl	8003b38 <HAL_RTC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001138:	f000 fa28 	bl	800158c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <MX_RTC_Init+0xac>)
 8001158:	f002 fd7f 	bl	8003c5a <HAL_RTC_SetTime>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001162:	f000 fa13 	bl	800158c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001166:	2301      	movs	r3, #1
 8001168:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800116a:	2301      	movs	r3, #1
 800116c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_RTC_Init+0xac>)
 800117e:	f002 fe87 	bl	8003e90 <HAL_RTC_SetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001188:	f000 fa00 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2001b6ac 	.word	0x2001b6ac
 8001198:	40002800 	.word	0x40002800

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f002 ffd5 	bl	800419c <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f9c8 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2001b70c 	.word	0x2001b70c
 8001204:	40013000 	.word	0x40013000

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM2_Init+0x94>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM2_Init+0x94>)
 800122e:	2254      	movs	r2, #84	; 0x54
 8001230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM2_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM2_Init+0x94>)
 800123a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800123e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_TIM2_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM2_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_TIM2_Init+0x94>)
 800124e:	f003 f9e9 	bl	8004624 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001258:	f000 f998 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM2_Init+0x94>)
 800126a:	f003 fb5d 	bl	8004928 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 f98a 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_TIM2_Init+0x94>)
 8001286:	f003 fd69 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001290:	f000 f97c 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2001b764 	.word	0x2001b764

080012a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM3_Init+0x94>)
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <MX_TIM3_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM3_Init+0x94>)
 80012c4:	2254      	movs	r2, #84	; 0x54
 80012c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM3_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM3_Init+0x94>)
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_TIM3_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM3_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM3_Init+0x94>)
 80012e4:	f003 f99e 	bl	8004624 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f94d 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM3_Init+0x94>)
 8001300:	f003 fb12 	bl	8004928 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f93f 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM3_Init+0x94>)
 800131c:	f003 fd1e 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001326:	f000 f931 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2001b66c 	.word	0x2001b66c
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM4_Init+0x94>)
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_TIM4_Init+0x98>)
 800135c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM4_Init+0x94>)
 8001360:	2254      	movs	r2, #84	; 0x54
 8001362:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM4_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM4_Init+0x94>)
 800136c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001370:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_TIM4_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM4_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <MX_TIM4_Init+0x94>)
 8001380:	f003 f950 	bl	8004624 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 f8ff 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4619      	mov	r1, r3
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_TIM4_Init+0x94>)
 800139c:	f003 fac4 	bl	8004928 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f000 f8f1 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_TIM4_Init+0x94>)
 80013b8:	f003 fcd0 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013c2:	f000 f8e3 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2001b5d8 	.word	0x2001b5d8
 80013d4:	40000800 	.word	0x40000800

080013d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART6_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART6_UART_Init+0x4c>)
 8001410:	f003 fd34 	bl	8004e7c <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 f8b7 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2001b6cc 	.word	0x2001b6cc
 8001428:	40011400 	.word	0x40011400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a43      	ldr	r2, [pc, #268]	; (8001558 <MX_GPIO_Init+0x12c>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <MX_GPIO_Init+0x12c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_GPIO_Init+0x12c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_GPIO_Init+0x12c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <MX_GPIO_Init+0x12c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_GPIO_Init+0x12c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_GPIO_Init+0x12c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <MX_GPIO_Init+0x12c>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_GPIO_Init+0x12c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	210e      	movs	r1, #14
 80014d2:	4822      	ldr	r0, [pc, #136]	; (800155c <MX_GPIO_Init+0x130>)
 80014d4:	f000 fdec 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEnable_GPIO_Port, BluetoothEnable_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <MX_GPIO_Init+0x134>)
 80014e0:	f000 fde6 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Left_Btn_Pin Enter_Btn_Pin Right_Btn_Pin */
  GPIO_InitStruct.Pin = Left_Btn_Pin|Enter_Btn_Pin|Right_Btn_Pin;
 80014e4:	2370      	movs	r3, #112	; 0x70
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <MX_GPIO_Init+0x138>)
 80014f8:	f000 fc28 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_RST_Pin ST7789_DC_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin;
 80014fc:	230e      	movs	r3, #14
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4812      	ldr	r0, [pc, #72]	; (800155c <MX_GPIO_Init+0x130>)
 8001514:	f000 fc1a 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEnable_Pin */
  GPIO_InitStruct.Pin = BluetoothEnable_Pin;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BluetoothEnable_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_GPIO_Init+0x134>)
 8001532:	f000 fc0b 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothState_Pin */
  GPIO_InitStruct.Pin = BluetoothState_Pin;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluetoothState_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_GPIO_Init+0x134>)
 800154c:	f000 fbfe 	bl	8001d4c <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020800 	.word	0x40020800
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800157a:	f000 fac3 	bl	8001b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40010000 	.word	0x40010000

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001592:	e7fe      	b.n	8001592 <Error_Handler+0x6>

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x54>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_MspInit+0x54>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x54>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_MspInit+0x54>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_MspInit+0x54>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_MspInit+0x54>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	210f      	movs	r1, #15
 80015d6:	f06f 0001 	mvn.w	r0, #1
 80015da:	f000 fb8d 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_I2C_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12b      	bne.n	8001666 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_I2C_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_I2C_MspInit+0x88>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_I2C_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163a:	2304      	movs	r3, #4
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <HAL_I2C_MspInit+0x8c>)
 8001646:	f000 fb81 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_I2C_MspInit+0x88>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_I2C_MspInit+0x88>)
 8001654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_I2C_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40005400 	.word	0x40005400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_RTC_MspInit+0x24>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d102      	bne.n	8001694 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RTC_MspInit+0x28>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40002800 	.word	0x40002800
 80016a4:	42470e3c 	.word	0x42470e3c

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_SPI_MspInit+0x84>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12b      	bne.n	8001722 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_SPI_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001702:	23a0      	movs	r3, #160	; 0xa0
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001712:	2305      	movs	r3, #5
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_SPI_MspInit+0x8c>)
 800171e:	f000 fb15 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40013000 	.word	0x40013000
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d116      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	201c      	movs	r0, #28
 800176c:	f000 fac4 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001770:	201c      	movs	r0, #28
 8001772:	f000 fadd 	bl	8001d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001776:	e036      	b.n	80017e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_TIM_Base_MspInit+0xbc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d116      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	201d      	movs	r0, #29
 80017a4:	f000 faa8 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a8:	201d      	movs	r0, #29
 80017aa:	f000 fac1 	bl	8001d30 <HAL_NVIC_EnableIRQ>
}
 80017ae:	e01a      	b.n	80017e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_TIM_Base_MspInit+0xc0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d115      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0xb8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2105      	movs	r1, #5
 80017da:	201e      	movs	r0, #30
 80017dc:	f000 fa8c 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017e0:	201e      	movs	r0, #30
 80017e2:	f000 faa5 	bl	8001d30 <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40000800 	.word	0x40000800

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12b      	bne.n	8001876 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001856:	23c0      	movs	r3, #192	; 0xc0
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001866:	2308      	movs	r3, #8
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0x8c>)
 8001872:	f000 fa6b 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40011400 	.word	0x40011400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800

0800188c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	2019      	movs	r0, #25
 80018a2:	f000 fa29 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018a6:	2019      	movs	r0, #25
 80018a8:	f000 fa42 	bl	8001d30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_InitTick+0xa4>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_InitTick+0xa4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6453      	str	r3, [r2, #68]	; 0x44
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_InitTick+0xa4>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c8:	f107 0210 	add.w	r2, r7, #16
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 f81c 	bl	8003910 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018d8:	f002 f806 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 80018dc:	4603      	mov	r3, r0
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_InitTick+0xa8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	3b01      	subs	r3, #1
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_InitTick+0xac>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_InitTick+0xb0>)
 80018f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_InitTick+0xac>)
 80018f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_InitTick+0xac>)
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_InitTick+0xac>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_InitTick+0xac>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <HAL_InitTick+0xac>)
 8001912:	f002 fe87 	bl	8004624 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <HAL_InitTick+0xac>)
 800191e:	f002 feac 	bl	800467a <HAL_TIM_Base_Start_IT>
 8001922:	4603      	mov	r3, r0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	431bde83 	.word	0x431bde83
 8001938:	2001b7a4 	.word	0x2001b7a4
 800193c:	40010000 	.word	0x40010000

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001972:	f002 fed1 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2001b7a4 	.word	0x2001b7a4

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <TIM2_IRQHandler+0x18>)
 8001986:	f002 fec7 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  StopWatch_Update_Time();
 800198a:	f027 fe39 	bl	8029600 <StopWatch_Update_Time>
  RunMode_Update_Time();
 800198e:	f025 f8e7 	bl	8026b60 <RunMode_Update_Time>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2001b764 	.word	0x2001b764

0800199c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <TIM3_IRQHandler+0x18>)
 80019a2:	f002 feb9 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MainScreen_Updater();
 80019a6:	f022 faf5 	bl	8023f94 <MainScreen_Updater>
  tos_SleepScreen_Counter();
 80019aa:	f028 fe9f 	bl	802a6ec <tos_SleepScreen_Counter>
  /* USER CODE END TIM3_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2001b66c 	.word	0x2001b66c

080019b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <TIM4_IRQHandler+0x18>)
 80019be:	f002 feab 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tos_ButtonCounterIncrease();
 80019c2:	f028 fbe7 	bl	802a194 <tos_ButtonCounterIncrease>
  tos_firstScreen_Update();
 80019c6:	f028 fd27 	bl	802a418 <tos_firstScreen_Update>
  /* USER CODE END TIM4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2001b5d8 	.word	0x2001b5d8

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f029 faca 	bl	802af9c <__errno>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20002a4c 	.word	0x20002a4c
 8001a3c:	2001c200 	.word	0x2001c200

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SystemInit+0x28>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <SystemInit+0x28>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SystemInit+0x28>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
  ldr  r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd3 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f029 fa85 	bl	802afa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fa5b 	bl	8000f58 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001aa8:	08048a08 	.word	0x08048a08
  ldr  r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ab0:	20002a30 	.word	0x20002a30
  ldr  r2, =_sbss
 8001ab4:	20002a30 	.word	0x20002a30
  ldr  r3, = _ebss
 8001ab8:	2001c200 	.word	0x2001c200

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f8fa 	bl	8001ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fecc 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fd4e 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	2001b7e4 	.word	0x2001b7e4

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2001b7e4 	.word	0x2001b7e4

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_Delay+0x40>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff4c 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0a:	f7ff ff61 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6978      	ldr	r0, [r7, #20]
 8001d16:	f7ff ffb1 	bl	8001c7c <NVIC_EncodePriority>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff80 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff54 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e16b      	b.n	8002040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 815a 	bne.w	800203a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d00b      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0xfc>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80b4 	beq.w	800203a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_GPIO_Init+0x308>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5e      	ldr	r2, [pc, #376]	; (8002054 <HAL_GPIO_Init+0x308>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_GPIO_Init+0x308>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a50      	ldr	r2, [pc, #320]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4d      	ldr	r2, [pc, #308]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_GPIO_Init+0x32c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4934      	ldr	r1, [pc, #208]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f92:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb6:	4a31      	ldr	r2, [pc, #196]	; (800207c <HAL_GPIO_Init+0x330>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_GPIO_Init+0x330>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <HAL_GPIO_Init+0x330>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_GPIO_Init+0x330>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_GPIO_Init+0x330>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_GPIO_Init+0x330>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_GPIO_Init+0x330>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae90 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40023800 	.word	0x40023800
 8002058:	40013800 	.word	0x40013800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40021400 	.word	0x40021400
 8002074:	40021800 	.word	0x40021800
 8002078:	40021c00 	.word	0x40021c00
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e001      	b.n	80020a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e11f      	b.n	8002336 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fa6e 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002136:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002148:	f001 fbba 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a7b      	ldr	r2, [pc, #492]	; (8002340 <HAL_I2C_Init+0x25c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d807      	bhi.n	8002168 <HAL_I2C_Init+0x84>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_I2C_Init+0x260>)
 800215c:	4293      	cmp	r3, r2
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e006      	b.n	8002176 <HAL_I2C_Init+0x92>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a77      	ldr	r2, [pc, #476]	; (8002348 <HAL_I2C_Init+0x264>)
 800216c:	4293      	cmp	r3, r2
 800216e:	bf94      	ite	ls
 8002170:	2301      	movls	r3, #1
 8002172:	2300      	movhi	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0db      	b.n	8002336 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_I2C_Init+0x268>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0c9b      	lsrs	r3, r3, #18
 8002188:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a64      	ldr	r2, [pc, #400]	; (8002340 <HAL_I2C_Init+0x25c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d802      	bhi.n	80021b8 <HAL_I2C_Init+0xd4>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	e009      	b.n	80021cc <HAL_I2C_Init+0xe8>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	4a63      	ldr	r2, [pc, #396]	; (8002350 <HAL_I2C_Init+0x26c>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	3301      	adds	r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4956      	ldr	r1, [pc, #344]	; (8002340 <HAL_I2C_Init+0x25c>)
 80021e8:	428b      	cmp	r3, r1
 80021ea:	d80d      	bhi.n	8002208 <HAL_I2C_Init+0x124>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e59      	subs	r1, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	bf38      	it	cc
 8002204:	2304      	movcc	r3, #4
 8002206:	e04f      	b.n	80022a8 <HAL_I2C_Init+0x1c4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_I2C_Init+0x150>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_I2C_Init+0x176>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x17e>
 800225e:	2301      	movs	r3, #1
 8002260:	e022      	b.n	80022a8 <HAL_I2C_Init+0x1c4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_I2C_Init+0x1a4>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e58      	subs	r0, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Init+0x1c4>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6911      	ldr	r1, [r2, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	000186a0 	.word	0x000186a0
 8002344:	001e847f 	.word	0x001e847f
 8002348:	003d08ff 	.word	0x003d08ff
 800234c:	431bde83 	.word	0x431bde83
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800236e:	f7ff fbdd 	bl	8001b2c <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	f040 80d9 	bne.w	8002534 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2319      	movs	r3, #25
 8002388:	2201      	movs	r2, #1
 800238a:	496d      	ldr	r1, [pc, #436]	; (8002540 <HAL_I2C_Mem_Write+0x1ec>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fc7f 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
 800239a:	e0cc      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Mem_Write+0x56>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0c5      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d007      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2221      	movs	r2, #33	; 0x21
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a4d      	ldr	r2, [pc, #308]	; (8002544 <HAL_I2C_Mem_Write+0x1f0>)
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002412:	88f8      	ldrh	r0, [r7, #6]
 8002414:	893a      	ldrh	r2, [r7, #8]
 8002416:	8979      	ldrh	r1, [r7, #10]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4603      	mov	r3, r0
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fab6 	bl	8002994 <I2C_RequestMemoryWrite>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d052      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e081      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fd00 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b04      	cmp	r3, #4
 8002448:	d107      	bne.n	800245a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d11b      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x180>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1aa      	bne.n	8002432 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fcec 	bl	8002ebe <I2C_WaitOnBTFFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d107      	bne.n	8002504 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002502:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e016      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	00100002 	.word	0x00100002
 8002544:	ffff0000 	.word	0xffff0000

08002548 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4603      	mov	r3, r0
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	460b      	mov	r3, r1
 800255c:	813b      	strh	r3, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002562:	f7ff fae3 	bl	8001b2c <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	f040 8208 	bne.w	8002986 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2319      	movs	r3, #25
 800257c:	2201      	movs	r2, #1
 800257e:	497b      	ldr	r1, [pc, #492]	; (800276c <HAL_I2C_Mem_Read+0x224>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fb85 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	e1fb      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_I2C_Mem_Read+0x56>
 800259a:	2302      	movs	r3, #2
 800259c:	e1f4      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d007      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2222      	movs	r2, #34	; 0x22
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <HAL_I2C_Mem_Read+0x228>)
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa52 	bl	8002ac0 <I2C_RequestMemoryRead>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1b0      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e184      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11b      	bne.n	8002696 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e164      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	2b02      	cmp	r3, #2
 800269c:	d11b      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	e144      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026ec:	e138      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	f200 80f1 	bhi.w	80028da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d123      	bne.n	8002748 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fc1b 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e139      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002746:	e10b      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	d14e      	bne.n	80027ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2200      	movs	r2, #0
 8002758:	4906      	ldr	r1, [pc, #24]	; (8002774 <HAL_I2C_Mem_Read+0x22c>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fa98 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e10e      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000
 8002774:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ec:	e0b8      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	4966      	ldr	r1, [pc, #408]	; (8002990 <HAL_I2C_Mem_Read+0x448>)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa49 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0bf      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	2200      	movs	r2, #0
 8002852:	494f      	ldr	r1, [pc, #316]	; (8002990 <HAL_I2C_Mem_Read+0x448>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa1b 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e091      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d8:	e042      	b.n	8002960 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fb2e 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e04c      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d118      	bne.n	8002960 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	f47f aec2 	bne.w	80026ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	00010004 	.word	0x00010004

08002994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f960 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e4:	d103      	bne.n	80029ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e05f      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	492d      	ldr	r1, [pc, #180]	; (8002abc <I2C_RequestMemoryWrite+0x128>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f998 	bl	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04c      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa02 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02b      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e021      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f9dc 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e005      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00010002 	.word	0x00010002

08002ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8c2 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d103      	bne.n	8002b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0aa      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	4952      	ldr	r1, [pc, #328]	; (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f8fa 	bl	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e097      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f964 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e076      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	e021      	b.n	8002bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f93e 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e050      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f923 	bl	8002e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e035      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f82b 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d103      	bne.n	8002c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e013      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c5c:	897b      	ldrh	r3, [r7, #10]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f863 	bl	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	00010002 	.word	0x00010002

08002c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca0:	e025      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d021      	beq.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7fe ff3f 	bl	8001b2c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d116      	bne.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e023      	b.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10d      	bne.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	e00c      	b.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d0b6      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d4c:	e051      	b.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d123      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0204 	orr.w	r2, r3, #4
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e046      	b.n	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d021      	beq.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7fe febd 	bl	8001b2c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e020      	b.n	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10c      	bne.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	e00b      	b.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d18d      	bne.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e48:	e02d      	b.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8ce 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e02d      	b.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d021      	beq.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe fe63 	bl	8001b2c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d116      	bne.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d1ca      	bne.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eca:	e02d      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f88d 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e02d      	b.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d021      	beq.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fe fe22 	bl	8001b2c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d1ca      	bne.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f4c:	e042      	b.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d119      	bne.n	8002f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0210 	mvn.w	r2, #16
 8002f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e029      	b.n	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe fdcc 	bl	8001b2c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d1b5      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d11b      	bne.n	800303c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800300c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e25b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d075      	beq.n	8003156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	4ba3      	ldr	r3, [pc, #652]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00c      	beq.n	8003090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	2b08      	cmp	r3, #8
 8003080:	d112      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4b9d      	ldr	r3, [pc, #628]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308e:	d10b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	4b99      	ldr	r3, [pc, #612]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05b      	beq.n	8003154 <HAL_RCC_OscConfig+0x108>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d157      	bne.n	8003154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e236      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d106      	bne.n	80030c0 <HAL_RCC_OscConfig+0x74>
 80030b2:	4b91      	ldr	r3, [pc, #580]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a90      	ldr	r2, [pc, #576]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e01d      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030ca:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8a      	ldr	r2, [pc, #552]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a87      	ldr	r2, [pc, #540]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030e4:	4b84      	ldr	r3, [pc, #528]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fd12 	bl	8001b2c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fd0e 	bl	8001b2c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1fb      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0xc0>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fcfe 	bl	8001b2c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fcfa 	bl	8001b2c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1e7      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0xe8>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d11c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1bb      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4952      	ldr	r1, [pc, #328]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	e03a      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_OscConfig+0x2b0>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe fcb3 	bl	8001b2c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fe fcaf 	bl	8001b2c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e19c      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4940      	ldr	r1, [pc, #256]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_OscConfig+0x2b0>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fc92 	bl	8001b2c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7fe fc8e 	bl	8001b2c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e17b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d030      	beq.n	8003298 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x2b4>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fc72 	bl	8001b2c <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe fc6e 	bl	8001b2c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e15b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x200>
 800326a:	e015      	b.n	8003298 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x2b4>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe fc5b 	bl	8001b2c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327a:	f7fe fc57 	bl	8001b2c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e144      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a0 	beq.w	80033e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fc1d 	bl	8001b2c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e011      	b.n	800331a <HAL_RCC_OscConfig+0x2ce>
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470000 	.word	0x42470000
 8003300:	42470e80 	.word	0x42470e80
 8003304:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003308:	f7fe fc10 	bl	8001b2c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0fd      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d106      	bne.n	800333c <HAL_RCC_OscConfig+0x2f0>
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	e01c      	b.n	8003376 <HAL_RCC_OscConfig+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d10c      	bne.n	800335e <HAL_RCC_OscConfig+0x312>
 8003344:	4b77      	ldr	r3, [pc, #476]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a76      	ldr	r2, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	e00b      	b.n	8003376 <HAL_RCC_OscConfig+0x32a>
 800335e:	4b71      	ldr	r3, [pc, #452]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a70      	ldr	r2, [pc, #448]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b6e      	ldr	r3, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe fbd5 	bl	8001b2c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe fbd1 	bl	8001b2c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0bc      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ee      	beq.n	8003386 <HAL_RCC_OscConfig+0x33a>
 80033a8:	e014      	b.n	80033d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fe fbbf 	bl	8001b2c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe fbbb 	bl	8001b2c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0a6      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ee      	bne.n	80033b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8092 	beq.w	8003514 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d05c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d141      	bne.n	8003488 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003404:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fb8f 	bl	8001b2c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe fb8b 	bl	8001b2c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e078      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	019b      	lsls	r3, r3, #6
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	4933      	ldr	r1, [pc, #204]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fb64 	bl	8001b2c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe fb60 	bl	8001b2c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04d      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x41c>
 8003486:	e045      	b.n	8003514 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe fb4d 	bl	8001b2c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe fb49 	bl	8001b2c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x44a>
 80034b4:	e02e      	b.n	8003514 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e029      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d115      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	40023800 	.word	0x40023800
 8003528:	42470060 	.word	0x42470060

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cc      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d90c      	bls.n	8003568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d044      	beq.n	800364c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d119      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e067      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4934      	ldr	r1, [pc, #208]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fe fa86 	bl	8001b2c <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fe fa82 	bl	8001b2c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d20c      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f821 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f8da 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00
 80036e8:	40023800 	.word	0x40023800
 80036ec:	0802dd84 	.word	0x0802dd84
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b04      	cmp	r3, #4
 8003718:	d007      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x32>
 800371a:	2b08      	cmp	r3, #8
 800371c:	d008      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x38>
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 80b4 	bne.w	800388c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003726:	60bb      	str	r3, [r7, #8]
       break;
 8003728:	e0b3      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800372c:	60bb      	str	r3, [r7, #8]
      break;
 800372e:	e0b0      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373a:	4b58      	ldr	r3, [pc, #352]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04a      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4b55      	ldr	r3, [pc, #340]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	f04f 0400 	mov.w	r4, #0
 8003750:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea03 0501 	and.w	r5, r3, r1
 800375c:	ea04 0602 	and.w	r6, r4, r2
 8003760:	4629      	mov	r1, r5
 8003762:	4632      	mov	r2, r6
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	0154      	lsls	r4, r2, #5
 800376e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003772:	014b      	lsls	r3, r1, #5
 8003774:	4619      	mov	r1, r3
 8003776:	4622      	mov	r2, r4
 8003778:	1b49      	subs	r1, r1, r5
 800377a:	eb62 0206 	sbc.w	r2, r2, r6
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	f04f 0400 	mov.w	r4, #0
 8003786:	0194      	lsls	r4, r2, #6
 8003788:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800378c:	018b      	lsls	r3, r1, #6
 800378e:	1a5b      	subs	r3, r3, r1
 8003790:	eb64 0402 	sbc.w	r4, r4, r2
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	00e2      	lsls	r2, r4, #3
 800379e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037a2:	00d9      	lsls	r1, r3, #3
 80037a4:	460b      	mov	r3, r1
 80037a6:	4614      	mov	r4, r2
 80037a8:	195b      	adds	r3, r3, r5
 80037aa:	eb44 0406 	adc.w	r4, r4, r6
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	0262      	lsls	r2, r4, #9
 80037b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037bc:	0259      	lsls	r1, r3, #9
 80037be:	460b      	mov	r3, r1
 80037c0:	4614      	mov	r4, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	4621      	mov	r1, r4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	461a      	mov	r2, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	f7fd fa42 	bl	8000c58 <__aeabi_uldivmod>
 80037d4:	4603      	mov	r3, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e049      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037dc:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	f04f 0400 	mov.w	r4, #0
 80037e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	ea03 0501 	and.w	r5, r3, r1
 80037f2:	ea04 0602 	and.w	r6, r4, r2
 80037f6:	4629      	mov	r1, r5
 80037f8:	4632      	mov	r2, r6
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	0154      	lsls	r4, r2, #5
 8003804:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003808:	014b      	lsls	r3, r1, #5
 800380a:	4619      	mov	r1, r3
 800380c:	4622      	mov	r2, r4
 800380e:	1b49      	subs	r1, r1, r5
 8003810:	eb62 0206 	sbc.w	r2, r2, r6
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 0400 	mov.w	r4, #0
 800381c:	0194      	lsls	r4, r2, #6
 800381e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003822:	018b      	lsls	r3, r1, #6
 8003824:	1a5b      	subs	r3, r3, r1
 8003826:	eb64 0402 	sbc.w	r4, r4, r2
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003838:	00d9      	lsls	r1, r3, #3
 800383a:	460b      	mov	r3, r1
 800383c:	4614      	mov	r4, r2
 800383e:	195b      	adds	r3, r3, r5
 8003840:	eb44 0406 	adc.w	r4, r4, r6
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	02a2      	lsls	r2, r4, #10
 800384e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003852:	0299      	lsls	r1, r3, #10
 8003854:	460b      	mov	r3, r1
 8003856:	4614      	mov	r4, r2
 8003858:	4618      	mov	r0, r3
 800385a:	4621      	mov	r1, r4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	461a      	mov	r2, r3
 8003864:	4623      	mov	r3, r4
 8003866:	f7fd f9f7 	bl	8000c58 <__aeabi_uldivmod>
 800386a:	4603      	mov	r3, r0
 800386c:	460c      	mov	r4, r1
 800386e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	60bb      	str	r3, [r7, #8]
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800388e:	60bb      	str	r3, [r7, #8]
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	68bb      	ldr	r3, [r7, #8]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000000 	.word	0x20000000

080038c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c4:	f7ff fff0 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038c8:	4601      	mov	r1, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0a9b      	lsrs	r3, r3, #10
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	0802dd94 	.word	0x0802dd94

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ec:	f7ff ffdc 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038f0:	4601      	mov	r1, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0b5b      	lsrs	r3, r3, #13
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4a03      	ldr	r2, [pc, #12]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	0802dd94 	.word	0x0802dd94

08003910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	220f      	movs	r2, #15
 800391e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_GetClockConfig+0x5c>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_RCC_GetClockConfig+0x5c>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_GetClockConfig+0x5c>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_RCC_GetClockConfig+0x60>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40023c00 	.word	0x40023c00

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003998:	2b00      	cmp	r3, #0
 800399a:	d035      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800399c:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a2:	f7fe f8c3 	bl	8001b2c <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039aa:	f7fe f8bf 	bl	8001b2c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0b0      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039bc:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	019a      	lsls	r2, r3, #6
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	4955      	ldr	r1, [pc, #340]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039dc:	4b52      	ldr	r3, [pc, #328]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e2:	f7fe f8a3 	bl	8001b2c <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039ea:	f7fe f89f 	bl	8001b2c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e090      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8083 	beq.w	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a3e:	f7fe f875 	bl	8001b2c <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe f871 	bl	8001b2c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e062      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a58:	4b35      	ldr	r3, [pc, #212]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8c:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a92:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d114      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe f83f 	bl	8001b2c <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe f83b 	bl	8001b2c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e02a      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af6:	490d      	ldr	r1, [pc, #52]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]
 8003afc:	e005      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b08:	6093      	str	r3, [r2, #8]
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b16:	4905      	ldr	r1, [pc, #20]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	42470068 	.word	0x42470068
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42470e40 	.word	0x42470e40

08003b38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e083      	b.n	8003c52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7f5b      	ldrb	r3, [r3, #29]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fd8e 	bl	800167c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	22ca      	movs	r2, #202	; 0xca
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2253      	movs	r2, #83	; 0x53
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 faa8 	bl	80040cc <RTC_EnterInitMode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e05e      	b.n	8003c52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68d2      	ldr	r2, [r2, #12]
 8003bce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10e      	bne.n	8003c20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa3a 	bl	800407c <HAL_RTC_WaitForSynchro>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e018      	b.n	8003c52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	7f1b      	ldrb	r3, [r3, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_RTC_SetTime+0x1c>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0aa      	b.n	8003dcc <HAL_RTC_SetTime+0x172>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d126      	bne.n	8003cd6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fa3f 	bl	8004124 <RTC_ByteToBcd2>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa38 	bl	8004124 <RTC_ByteToBcd2>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cb8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	789b      	ldrb	r3, [r3, #2]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa30 	bl	8004124 <RTC_ByteToBcd2>
 8003cc4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003cc6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	78db      	ldrb	r3, [r3, #3]
 8003cce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e018      	b.n	8003d08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003cf6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003cfc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	78db      	ldrb	r3, [r3, #3]
 8003d02:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	22ca      	movs	r2, #202	; 0xca
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2253      	movs	r2, #83	; 0x53
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9d7 	bl	80040cc <RTC_EnterInitMode>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e047      	b.n	8003dcc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d111      	bne.n	8003db6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f972 	bl	800407c <HAL_RTC_WaitForSynchro>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2204      	movs	r2, #4
 8003daa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00a      	b.n	8003dcc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003dca:	2300      	movs	r3, #0
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}

08003dd4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11a      	bne.n	8003e86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f983 	bl	8004160 <RTC_Bcd2ToByte>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f97a 	bl	8004160 <RTC_Bcd2ToByte>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	789b      	ldrb	r3, [r3, #2]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f971 	bl	8004160 <RTC_Bcd2ToByte>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	7f1b      	ldrb	r3, [r3, #28]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_RTC_SetDate+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e094      	b.n	8003fd6 <HAL_RTC_SetDate+0x146>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <HAL_RTC_SetDate+0x4c>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	330a      	adds	r3, #10
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	78db      	ldrb	r3, [r3, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f91c 	bl	8004124 <RTC_ByteToBcd2>
 8003eec:	4603      	mov	r3, r0
 8003eee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f915 	bl	8004124 <RTC_ByteToBcd2>
 8003efa:	4603      	mov	r3, r0
 8003efc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003efe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	789b      	ldrb	r3, [r3, #2]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f90d 	bl	8004124 <RTC_ByteToBcd2>
 8003f0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003f0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e00e      	b.n	8003f3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	78db      	ldrb	r3, [r3, #3]
 8003f20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	22ca      	movs	r2, #202	; 0xca
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2253      	movs	r2, #83	; 0x53
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8be 	bl	80040cc <RTC_EnterInitMode>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2204      	movs	r2, #4
 8003f62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e033      	b.n	8003fd6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f86d 	bl	800407c <HAL_RTC_WaitForSynchro>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}

08003fde <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	0b5b      	lsrs	r3, r3, #13
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11a      	bne.n	8004072 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	78db      	ldrb	r3, [r3, #3]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f88d 	bl	8004160 <RTC_Bcd2ToByte>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f884 	bl	8004160 <RTC_Bcd2ToByte>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	789b      	ldrb	r3, [r3, #2]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f87b 	bl	8004160 <RTC_Bcd2ToByte>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004098:	f7fd fd48 	bl	8001b2c <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800409e:	e009      	b.n	80040b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80040a0:	f7fd fd44 	bl	8001b2c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ae:	d901      	bls.n	80040b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e007      	b.n	80040c4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ee      	beq.n	80040a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d119      	bne.n	800411a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fd fd1c 	bl	8001b2c <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040f6:	e009      	b.n	800410c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80040f8:	f7fd fd18 	bl	8001b2c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004106:	d901      	bls.n	800410c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e007      	b.n	800411c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ee      	beq.n	80040f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004132:	e005      	b.n	8004140 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	3b0a      	subs	r3, #10
 800413e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b09      	cmp	r3, #9
 8004144:	d8f6      	bhi.n	8004134 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	b2da      	uxtb	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4313      	orrs	r3, r2
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4413      	add	r3, r2
 800418e:	b2db      	uxtb	r3, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e056      	b.n	800425c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fd fa6d 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	ea42 0103 	orr.w	r1, r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	f003 0104 	and.w	r1, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_SPI_Transmit+0x22>
 8004282:	2302      	movs	r3, #2
 8004284:	e11e      	b.n	80044c4 <HAL_SPI_Transmit+0x260>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428e:	f7fd fc4d 	bl	8001b2c <HAL_GetTick>
 8004292:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d002      	beq.n	80042aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
 80042a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042a8:	e103      	b.n	80044b2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_SPI_Transmit+0x52>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ba:	e0fa      	b.n	80044b2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2203      	movs	r2, #3
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	d107      	bne.n	8004314 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004312:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d007      	beq.n	8004332 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d14b      	bne.n	80043d4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_SPI_Transmit+0xe6>
 8004344:	8afb      	ldrh	r3, [r7, #22]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d13e      	bne.n	80043c8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	881a      	ldrh	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800436e:	e02b      	b.n	80043c8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d112      	bne.n	80043a4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80043a2:	e011      	b.n	80043c8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a4:	f7fd fbc2 	bl	8001b2c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d803      	bhi.n	80043bc <HAL_SPI_Transmit+0x158>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d102      	bne.n	80043c2 <HAL_SPI_Transmit+0x15e>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043c6:	e074      	b.n	80044b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ce      	bne.n	8004370 <HAL_SPI_Transmit+0x10c>
 80043d2:	e04c      	b.n	800446e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_Transmit+0x17e>
 80043dc:	8afb      	ldrh	r3, [r7, #22]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d140      	bne.n	8004464 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004408:	e02c      	b.n	8004464 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d113      	bne.n	8004440 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	86da      	strh	r2, [r3, #54]	; 0x36
 800443e:	e011      	b.n	8004464 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004440:	f7fd fb74 	bl	8001b2c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d803      	bhi.n	8004458 <HAL_SPI_Transmit+0x1f4>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d102      	bne.n	800445e <HAL_SPI_Transmit+0x1fa>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004462:	e026      	b.n	80044b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1cd      	bne.n	800440a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f894 	bl	80045a0 <SPI_EndRxTxTransaction>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e000      	b.n	80044b2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80044b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044dc:	e04c      	b.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d048      	beq.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044e6:	f7fd fb21 	bl	8001b2c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d902      	bls.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d13d      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800450a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004514:	d111      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d004      	beq.n	800452a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004528:	d107      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004538:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	d10f      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004562:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e00f      	b.n	8004598 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d1a3      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <SPI_EndRxTxTransaction+0x7c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <SPI_EndRxTxTransaction+0x80>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0d5b      	lsrs	r3, r3, #21
 80045b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d112      	bne.n	80045f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff78 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d0f2      	beq.n	80045f2 <SPI_EndRxTxTransaction+0x52>
 800460c:	e000      	b.n	8004610 <SPI_EndRxTxTransaction+0x70>
        break;
 800460e:	bf00      	nop
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000
 8004620:	165e9f81 	.word	0x165e9f81

08004624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e01d      	b.n	8004672 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd f874 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f000 fa40 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d007      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_TIM_Base_Stop_IT+0x48>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	f240 4344 	movw	r3, #1092	; 0x444
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d107      	bne.n	800470a <HAL_TIM_Base_Stop_IT+0x48>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9a5 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f997 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f9a8 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0204 	mvn.w	r2, #4
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f97b 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f96d 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f97e 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0208 	mvn.w	r2, #8
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f951 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f943 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f954 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0210 	mvn.w	r2, #16
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f927 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f919 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f92a 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0201 	mvn.w	r2, #1
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fe66 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fad0 	bl	8004e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8ef 	bl	8004ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0220 	mvn.w	r2, #32
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa9a 	bl	8004e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e0a6      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x166>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800495e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d067      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x120>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d80b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x6c>
 800497c:	2b10      	cmp	r3, #16
 800497e:	d073      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d802      	bhi.n	800498a <HAL_TIM_ConfigClockSource+0x62>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d06f      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004988:	e078      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800498a:	2b20      	cmp	r3, #32
 800498c:	d06c      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d06a      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004992:	e073      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004994:	2b70      	cmp	r3, #112	; 0x70
 8004996:	d00d      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x8c>
 8004998:	2b70      	cmp	r3, #112	; 0x70
 800499a:	d804      	bhi.n	80049a6 <HAL_TIM_ConfigClockSource+0x7e>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d033      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0xe0>
 80049a0:	2b60      	cmp	r3, #96	; 0x60
 80049a2:	d041      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049a4:	e06a      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049aa:	d066      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x152>
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b0:	d017      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049b2:	e063      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f000 f9aa 	bl	8004d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
      break;
 80049e0:	e04c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f000 f993 	bl	8004d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a04:	609a      	str	r2, [r3, #8]
      break;
 8004a06:	e039      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f000 f907 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2150      	movs	r1, #80	; 0x50
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f960 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004a26:	e029      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	461a      	mov	r2, r3
 8004a36:	f000 f926 	bl	8004c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2160      	movs	r1, #96	; 0x60
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f950 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004a46:	e019      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f000 f8e7 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f940 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004a66:	e009      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 f937 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004a78:	e000      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <TIM_Base_SetConfig+0x120>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d108      	bne.n	8004b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d02b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d027      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d023      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01f      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <TIM_Base_SetConfig+0x120>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d017      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a28      	ldr	r2, [pc, #160]	; (8004c10 <TIM_Base_SetConfig+0x128>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <TIM_Base_SetConfig+0x12c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00f      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <TIM_Base_SetConfig+0x130>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <TIM_Base_SetConfig+0x134>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <TIM_Base_SetConfig+0x138>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a23      	ldr	r2, [pc, #140]	; (8004c24 <TIM_Base_SetConfig+0x13c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_Base_SetConfig+0xf8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d103      	bne.n	8004be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	615a      	str	r2, [r3, #20]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40010400 	.word	0x40010400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	40001800 	.word	0x40001800
 8004c20:	40001c00 	.word	0x40001c00
 8004c24:	40002000 	.word	0x40002000

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0210 	bic.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f043 0307 	orr.w	r3, r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e05a      	b.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d01d      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40001800 	.word	0x40001800

08004e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e03f      	b.n	8004f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc fcaa 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9b1 	bl	8005228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b088      	sub	sp, #32
 8004f1a:	af02      	add	r7, sp, #8
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f040 8083 	bne.w	800503e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_UART_Transmit+0x2e>
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e07b      	b.n	8005040 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Transmit+0x40>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e074      	b.n	8005040 <HAL_UART_Transmit+0x12a>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2221      	movs	r2, #33	; 0x21
 8004f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f6c:	f7fc fdde 	bl	8001b2c <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f86:	e042      	b.n	800500e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d122      	bne.n	8004fe6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8f2 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e042      	b.n	8005040 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fcc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	e017      	b.n	800500e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	e013      	b.n	800500e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f8cf 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01f      	b.n	8005040 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	60ba      	str	r2, [r7, #8]
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1b7      	bne.n	8004f88 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f8b6 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b20      	cmp	r3, #32
 8005066:	f040 8090 	bne.w	800518a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_UART_Receive+0x2e>
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e088      	b.n	800518c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive+0x40>
 8005084:	2302      	movs	r3, #2
 8005086:	e081      	b.n	800518c <HAL_UART_Receive+0x144>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2222      	movs	r2, #34	; 0x22
 800509a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800509e:	f7fc fd45 	bl	8001b2c <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050b8:	e05c      	b.n	8005174 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d12b      	bne.n	800512a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2120      	movs	r1, #32
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f859 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e04f      	b.n	800518c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10c      	bne.n	8005112 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	b29a      	uxth	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3302      	adds	r3, #2
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e030      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b29a      	uxth	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	3301      	adds	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	e024      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2120      	movs	r1, #32
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f82d 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e023      	b.n	800518c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	60ba      	str	r2, [r7, #8]
 8005158:	b2ca      	uxtb	r2, r1
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e00a      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d19d      	bne.n	80050ba <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	e02c      	b.n	8005200 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d028      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051b4:	f7fc fcba 	bl	8001b2c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d21d      	bcs.n	8005200 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e00f      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4013      	ands	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	429a      	cmp	r2, r3
 800521c:	d0c3      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800526a:	f023 030c 	bic.w	r3, r3, #12
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	430b      	orrs	r3, r1
 8005276:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	f040 818b 	bne.w	80055b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4ac1      	ldr	r2, [pc, #772]	; (80055a4 <UART_SetConfig+0x37c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d005      	beq.n	80052b0 <UART_SetConfig+0x88>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4abf      	ldr	r2, [pc, #764]	; (80055a8 <UART_SetConfig+0x380>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 80bd 	bne.w	800542a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fe fb1a 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 80052b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	461d      	mov	r5, r3
 80052ba:	f04f 0600 	mov.w	r6, #0
 80052be:	46a8      	mov	r8, r5
 80052c0:	46b1      	mov	r9, r6
 80052c2:	eb18 0308 	adds.w	r3, r8, r8
 80052c6:	eb49 0409 	adc.w	r4, r9, r9
 80052ca:	4698      	mov	r8, r3
 80052cc:	46a1      	mov	r9, r4
 80052ce:	eb18 0805 	adds.w	r8, r8, r5
 80052d2:	eb49 0906 	adc.w	r9, r9, r6
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052ea:	4688      	mov	r8, r1
 80052ec:	4691      	mov	r9, r2
 80052ee:	eb18 0005 	adds.w	r0, r8, r5
 80052f2:	eb49 0106 	adc.w	r1, r9, r6
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	461d      	mov	r5, r3
 80052fc:	f04f 0600 	mov.w	r6, #0
 8005300:	196b      	adds	r3, r5, r5
 8005302:	eb46 0406 	adc.w	r4, r6, r6
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	f7fb fca5 	bl	8000c58 <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	461a      	mov	r2, r3
 8005314:	4ba5      	ldr	r3, [pc, #660]	; (80055ac <UART_SetConfig+0x384>)
 8005316:	fba3 2302 	umull	r2, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	461d      	mov	r5, r3
 8005324:	f04f 0600 	mov.w	r6, #0
 8005328:	46a9      	mov	r9, r5
 800532a:	46b2      	mov	sl, r6
 800532c:	eb19 0309 	adds.w	r3, r9, r9
 8005330:	eb4a 040a 	adc.w	r4, sl, sl
 8005334:	4699      	mov	r9, r3
 8005336:	46a2      	mov	sl, r4
 8005338:	eb19 0905 	adds.w	r9, r9, r5
 800533c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800534c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005354:	4689      	mov	r9, r1
 8005356:	4692      	mov	sl, r2
 8005358:	eb19 0005 	adds.w	r0, r9, r5
 800535c:	eb4a 0106 	adc.w	r1, sl, r6
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461d      	mov	r5, r3
 8005366:	f04f 0600 	mov.w	r6, #0
 800536a:	196b      	adds	r3, r5, r5
 800536c:	eb46 0406 	adc.w	r4, r6, r6
 8005370:	461a      	mov	r2, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f7fb fc70 	bl	8000c58 <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	461a      	mov	r2, r3
 800537e:	4b8b      	ldr	r3, [pc, #556]	; (80055ac <UART_SetConfig+0x384>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a86      	ldr	r2, [pc, #536]	; (80055ac <UART_SetConfig+0x384>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a0:	4498      	add	r8, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	461d      	mov	r5, r3
 80053a6:	f04f 0600 	mov.w	r6, #0
 80053aa:	46a9      	mov	r9, r5
 80053ac:	46b2      	mov	sl, r6
 80053ae:	eb19 0309 	adds.w	r3, r9, r9
 80053b2:	eb4a 040a 	adc.w	r4, sl, sl
 80053b6:	4699      	mov	r9, r3
 80053b8:	46a2      	mov	sl, r4
 80053ba:	eb19 0905 	adds.w	r9, r9, r5
 80053be:	eb4a 0a06 	adc.w	sl, sl, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d6:	4689      	mov	r9, r1
 80053d8:	4692      	mov	sl, r2
 80053da:	eb19 0005 	adds.w	r0, r9, r5
 80053de:	eb4a 0106 	adc.w	r1, sl, r6
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	461d      	mov	r5, r3
 80053e8:	f04f 0600 	mov.w	r6, #0
 80053ec:	196b      	adds	r3, r5, r5
 80053ee:	eb46 0406 	adc.w	r4, r6, r6
 80053f2:	461a      	mov	r2, r3
 80053f4:	4623      	mov	r3, r4
 80053f6:	f7fb fc2f 	bl	8000c58 <__aeabi_uldivmod>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	461a      	mov	r2, r3
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <UART_SetConfig+0x384>)
 8005402:	fba3 1302 	umull	r1, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2164      	movs	r1, #100	; 0x64
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	3332      	adds	r3, #50	; 0x32
 8005414:	4a65      	ldr	r2, [pc, #404]	; (80055ac <UART_SetConfig+0x384>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f003 0207 	and.w	r2, r3, #7
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4442      	add	r2, r8
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	e26f      	b.n	800590a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542a:	f7fe fa49 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 800542e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	461d      	mov	r5, r3
 8005434:	f04f 0600 	mov.w	r6, #0
 8005438:	46a8      	mov	r8, r5
 800543a:	46b1      	mov	r9, r6
 800543c:	eb18 0308 	adds.w	r3, r8, r8
 8005440:	eb49 0409 	adc.w	r4, r9, r9
 8005444:	4698      	mov	r8, r3
 8005446:	46a1      	mov	r9, r4
 8005448:	eb18 0805 	adds.w	r8, r8, r5
 800544c:	eb49 0906 	adc.w	r9, r9, r6
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800545c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005460:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005464:	4688      	mov	r8, r1
 8005466:	4691      	mov	r9, r2
 8005468:	eb18 0005 	adds.w	r0, r8, r5
 800546c:	eb49 0106 	adc.w	r1, r9, r6
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	461d      	mov	r5, r3
 8005476:	f04f 0600 	mov.w	r6, #0
 800547a:	196b      	adds	r3, r5, r5
 800547c:	eb46 0406 	adc.w	r4, r6, r6
 8005480:	461a      	mov	r2, r3
 8005482:	4623      	mov	r3, r4
 8005484:	f7fb fbe8 	bl	8000c58 <__aeabi_uldivmod>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	461a      	mov	r2, r3
 800548e:	4b47      	ldr	r3, [pc, #284]	; (80055ac <UART_SetConfig+0x384>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	461d      	mov	r5, r3
 800549e:	f04f 0600 	mov.w	r6, #0
 80054a2:	46a9      	mov	r9, r5
 80054a4:	46b2      	mov	sl, r6
 80054a6:	eb19 0309 	adds.w	r3, r9, r9
 80054aa:	eb4a 040a 	adc.w	r4, sl, sl
 80054ae:	4699      	mov	r9, r3
 80054b0:	46a2      	mov	sl, r4
 80054b2:	eb19 0905 	adds.w	r9, r9, r5
 80054b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ce:	4689      	mov	r9, r1
 80054d0:	4692      	mov	sl, r2
 80054d2:	eb19 0005 	adds.w	r0, r9, r5
 80054d6:	eb4a 0106 	adc.w	r1, sl, r6
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	461d      	mov	r5, r3
 80054e0:	f04f 0600 	mov.w	r6, #0
 80054e4:	196b      	adds	r3, r5, r5
 80054e6:	eb46 0406 	adc.w	r4, r6, r6
 80054ea:	461a      	mov	r2, r3
 80054ec:	4623      	mov	r3, r4
 80054ee:	f7fb fbb3 	bl	8000c58 <__aeabi_uldivmod>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <UART_SetConfig+0x384>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2164      	movs	r1, #100	; 0x64
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	3332      	adds	r3, #50	; 0x32
 800550c:	4a27      	ldr	r2, [pc, #156]	; (80055ac <UART_SetConfig+0x384>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800551a:	4498      	add	r8, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	461d      	mov	r5, r3
 8005520:	f04f 0600 	mov.w	r6, #0
 8005524:	46a9      	mov	r9, r5
 8005526:	46b2      	mov	sl, r6
 8005528:	eb19 0309 	adds.w	r3, r9, r9
 800552c:	eb4a 040a 	adc.w	r4, sl, sl
 8005530:	4699      	mov	r9, r3
 8005532:	46a2      	mov	sl, r4
 8005534:	eb19 0905 	adds.w	r9, r9, r5
 8005538:	eb4a 0a06 	adc.w	sl, sl, r6
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800554c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005550:	4689      	mov	r9, r1
 8005552:	4692      	mov	sl, r2
 8005554:	eb19 0005 	adds.w	r0, r9, r5
 8005558:	eb4a 0106 	adc.w	r1, sl, r6
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	461d      	mov	r5, r3
 8005562:	f04f 0600 	mov.w	r6, #0
 8005566:	196b      	adds	r3, r5, r5
 8005568:	eb46 0406 	adc.w	r4, r6, r6
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	f7fb fb72 	bl	8000c58 <__aeabi_uldivmod>
 8005574:	4603      	mov	r3, r0
 8005576:	460c      	mov	r4, r1
 8005578:	461a      	mov	r2, r3
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <UART_SetConfig+0x384>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	; 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3332      	adds	r3, #50	; 0x32
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <UART_SetConfig+0x384>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0207 	and.w	r2, r3, #7
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4442      	add	r2, r8
 80055a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055a2:	e1b2      	b.n	800590a <UART_SetConfig+0x6e2>
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4ad7      	ldr	r2, [pc, #860]	; (8005914 <UART_SetConfig+0x6ec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d005      	beq.n	80055c6 <UART_SetConfig+0x39e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4ad6      	ldr	r2, [pc, #856]	; (8005918 <UART_SetConfig+0x6f0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 80d1 	bne.w	8005768 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c6:	f7fe f98f 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 80055ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	469a      	mov	sl, r3
 80055d0:	f04f 0b00 	mov.w	fp, #0
 80055d4:	46d0      	mov	r8, sl
 80055d6:	46d9      	mov	r9, fp
 80055d8:	eb18 0308 	adds.w	r3, r8, r8
 80055dc:	eb49 0409 	adc.w	r4, r9, r9
 80055e0:	4698      	mov	r8, r3
 80055e2:	46a1      	mov	r9, r4
 80055e4:	eb18 080a 	adds.w	r8, r8, sl
 80055e8:	eb49 090b 	adc.w	r9, r9, fp
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005600:	4688      	mov	r8, r1
 8005602:	4691      	mov	r9, r2
 8005604:	eb1a 0508 	adds.w	r5, sl, r8
 8005608:	eb4b 0609 	adc.w	r6, fp, r9
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	0094      	lsls	r4, r2, #2
 8005620:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	461a      	mov	r2, r3
 8005628:	4623      	mov	r3, r4
 800562a:	4628      	mov	r0, r5
 800562c:	4631      	mov	r1, r6
 800562e:	f7fb fb13 	bl	8000c58 <__aeabi_uldivmod>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	461a      	mov	r2, r3
 8005638:	4bb8      	ldr	r3, [pc, #736]	; (800591c <UART_SetConfig+0x6f4>)
 800563a:	fba3 2302 	umull	r2, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	469b      	mov	fp, r3
 8005648:	f04f 0c00 	mov.w	ip, #0
 800564c:	46d9      	mov	r9, fp
 800564e:	46e2      	mov	sl, ip
 8005650:	eb19 0309 	adds.w	r3, r9, r9
 8005654:	eb4a 040a 	adc.w	r4, sl, sl
 8005658:	4699      	mov	r9, r3
 800565a:	46a2      	mov	sl, r4
 800565c:	eb19 090b 	adds.w	r9, r9, fp
 8005660:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005670:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005674:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005678:	4689      	mov	r9, r1
 800567a:	4692      	mov	sl, r2
 800567c:	eb1b 0509 	adds.w	r5, fp, r9
 8005680:	eb4c 060a 	adc.w	r6, ip, sl
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4619      	mov	r1, r3
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	0094      	lsls	r4, r2, #2
 8005698:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800569c:	008b      	lsls	r3, r1, #2
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	4631      	mov	r1, r6
 80056a6:	f7fb fad7 	bl	8000c58 <__aeabi_uldivmod>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b9a      	ldr	r3, [pc, #616]	; (800591c <UART_SetConfig+0x6f4>)
 80056b2:	fba3 1302 	umull	r1, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2164      	movs	r1, #100	; 0x64
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	3332      	adds	r3, #50	; 0x32
 80056c4:	4a95      	ldr	r2, [pc, #596]	; (800591c <UART_SetConfig+0x6f4>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	4498      	add	r8, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	469b      	mov	fp, r3
 80056d6:	f04f 0c00 	mov.w	ip, #0
 80056da:	46d9      	mov	r9, fp
 80056dc:	46e2      	mov	sl, ip
 80056de:	eb19 0309 	adds.w	r3, r9, r9
 80056e2:	eb4a 040a 	adc.w	r4, sl, sl
 80056e6:	4699      	mov	r9, r3
 80056e8:	46a2      	mov	sl, r4
 80056ea:	eb19 090b 	adds.w	r9, r9, fp
 80056ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056f2:	f04f 0100 	mov.w	r1, #0
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005706:	4689      	mov	r9, r1
 8005708:	4692      	mov	sl, r2
 800570a:	eb1b 0509 	adds.w	r5, fp, r9
 800570e:	eb4c 060a 	adc.w	r6, ip, sl
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	0094      	lsls	r4, r2, #2
 8005726:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	461a      	mov	r2, r3
 800572e:	4623      	mov	r3, r4
 8005730:	4628      	mov	r0, r5
 8005732:	4631      	mov	r1, r6
 8005734:	f7fb fa90 	bl	8000c58 <__aeabi_uldivmod>
 8005738:	4603      	mov	r3, r0
 800573a:	460c      	mov	r4, r1
 800573c:	461a      	mov	r2, r3
 800573e:	4b77      	ldr	r3, [pc, #476]	; (800591c <UART_SetConfig+0x6f4>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	4a72      	ldr	r2, [pc, #456]	; (800591c <UART_SetConfig+0x6f4>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4442      	add	r2, r8
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	e0d0      	b.n	800590a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fe f8aa 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 800576c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	469a      	mov	sl, r3
 8005772:	f04f 0b00 	mov.w	fp, #0
 8005776:	46d0      	mov	r8, sl
 8005778:	46d9      	mov	r9, fp
 800577a:	eb18 0308 	adds.w	r3, r8, r8
 800577e:	eb49 0409 	adc.w	r4, r9, r9
 8005782:	4698      	mov	r8, r3
 8005784:	46a1      	mov	r9, r4
 8005786:	eb18 080a 	adds.w	r8, r8, sl
 800578a:	eb49 090b 	adc.w	r9, r9, fp
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800579a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800579e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057a2:	4688      	mov	r8, r1
 80057a4:	4691      	mov	r9, r2
 80057a6:	eb1a 0508 	adds.w	r5, sl, r8
 80057aa:	eb4b 0609 	adc.w	r6, fp, r9
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	0094      	lsls	r4, r2, #2
 80057c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057c6:	008b      	lsls	r3, r1, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	4631      	mov	r1, r6
 80057d0:	f7fb fa42 	bl	8000c58 <__aeabi_uldivmod>
 80057d4:	4603      	mov	r3, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	461a      	mov	r2, r3
 80057da:	4b50      	ldr	r3, [pc, #320]	; (800591c <UART_SetConfig+0x6f4>)
 80057dc:	fba3 2302 	umull	r2, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	469b      	mov	fp, r3
 80057ea:	f04f 0c00 	mov.w	ip, #0
 80057ee:	46d9      	mov	r9, fp
 80057f0:	46e2      	mov	sl, ip
 80057f2:	eb19 0309 	adds.w	r3, r9, r9
 80057f6:	eb4a 040a 	adc.w	r4, sl, sl
 80057fa:	4699      	mov	r9, r3
 80057fc:	46a2      	mov	sl, r4
 80057fe:	eb19 090b 	adds.w	r9, r9, fp
 8005802:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800581a:	4689      	mov	r9, r1
 800581c:	4692      	mov	sl, r2
 800581e:	eb1b 0509 	adds.w	r5, fp, r9
 8005822:	eb4c 060a 	adc.w	r6, ip, sl
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4619      	mov	r1, r3
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	0094      	lsls	r4, r2, #2
 800583a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800583e:	008b      	lsls	r3, r1, #2
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	4628      	mov	r0, r5
 8005846:	4631      	mov	r1, r6
 8005848:	f7fb fa06 	bl	8000c58 <__aeabi_uldivmod>
 800584c:	4603      	mov	r3, r0
 800584e:	460c      	mov	r4, r1
 8005850:	461a      	mov	r2, r3
 8005852:	4b32      	ldr	r3, [pc, #200]	; (800591c <UART_SetConfig+0x6f4>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	; 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	3332      	adds	r3, #50	; 0x32
 8005866:	4a2d      	ldr	r2, [pc, #180]	; (800591c <UART_SetConfig+0x6f4>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005872:	4498      	add	r8, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	469b      	mov	fp, r3
 8005878:	f04f 0c00 	mov.w	ip, #0
 800587c:	46d9      	mov	r9, fp
 800587e:	46e2      	mov	sl, ip
 8005880:	eb19 0309 	adds.w	r3, r9, r9
 8005884:	eb4a 040a 	adc.w	r4, sl, sl
 8005888:	4699      	mov	r9, r3
 800588a:	46a2      	mov	sl, r4
 800588c:	eb19 090b 	adds.w	r9, r9, fp
 8005890:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058a8:	4689      	mov	r9, r1
 80058aa:	4692      	mov	sl, r2
 80058ac:	eb1b 0509 	adds.w	r5, fp, r9
 80058b0:	eb4c 060a 	adc.w	r6, ip, sl
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	f04f 0400 	mov.w	r4, #0
 80058c6:	0094      	lsls	r4, r2, #2
 80058c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058cc:	008b      	lsls	r3, r1, #2
 80058ce:	461a      	mov	r2, r3
 80058d0:	4623      	mov	r3, r4
 80058d2:	4628      	mov	r0, r5
 80058d4:	4631      	mov	r1, r6
 80058d6:	f7fb f9bf 	bl	8000c58 <__aeabi_uldivmod>
 80058da:	4603      	mov	r3, r0
 80058dc:	460c      	mov	r4, r1
 80058de:	461a      	mov	r2, r3
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <UART_SetConfig+0x6f4>)
 80058e2:	fba3 1302 	umull	r1, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2164      	movs	r1, #100	; 0x64
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	3332      	adds	r3, #50	; 0x32
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <UART_SetConfig+0x6f4>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4442      	add	r2, r8
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	e7ff      	b.n	800590a <UART_SetConfig+0x6e2>
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	40011000 	.word	0x40011000
 8005918:	40011400 	.word	0x40011400
 800591c:	51eb851f 	.word	0x51eb851f

08005920 <MPU6050_Init>:
MPURawData_Def gyroRawVals;
MPUScaledData_Def accScaleVals,gyroScaleVals;
MPURawData_Def accCaliVals;
MPURawData_Def gyroCaliVals;

void MPU6050_Init(void){
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af04      	add	r7, sp, #16
	uint8_t check;
		uint8_t Data;

		// check device ID WHO_AM_I

		HAL_I2C_Mem_Read (&MPU6050I2C, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8005926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	2301      	movs	r3, #1
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2301      	movs	r3, #1
 8005936:	2275      	movs	r2, #117	; 0x75
 8005938:	21d0      	movs	r1, #208	; 0xd0
 800593a:	4823      	ldr	r0, [pc, #140]	; (80059c8 <MPU6050_Init+0xa8>)
 800593c:	f7fc fe04 	bl	8002548 <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b68      	cmp	r3, #104	; 0x68
 8005944:	d13b      	bne.n	80059be <MPU6050_Init+0x9e>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up
			Data = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&MPU6050I2C, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800594a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	2301      	movs	r3, #1
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	1dbb      	adds	r3, r7, #6
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	226b      	movs	r2, #107	; 0x6b
 800595c:	21d0      	movs	r1, #208	; 0xd0
 800595e:	481a      	ldr	r0, [pc, #104]	; (80059c8 <MPU6050_Init+0xa8>)
 8005960:	f7fc fcf8 	bl	8002354 <HAL_I2C_Mem_Write>

			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8005964:	2307      	movs	r3, #7
 8005966:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&MPU6050I2C, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	2301      	movs	r3, #1
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	1dbb      	adds	r3, r7, #6
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	2301      	movs	r3, #1
 8005978:	2219      	movs	r2, #25
 800597a:	21d0      	movs	r1, #208	; 0xd0
 800597c:	4812      	ldr	r0, [pc, #72]	; (80059c8 <MPU6050_Init+0xa8>)
 800597e:	f7fc fce9 	bl	8002354 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8005982:	2300      	movs	r3, #0
 8005984:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&MPU6050I2C, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	2301      	movs	r3, #1
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	1dbb      	adds	r3, r7, #6
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2301      	movs	r3, #1
 8005996:	221c      	movs	r2, #28
 8005998:	21d0      	movs	r1, #208	; 0xd0
 800599a:	480b      	ldr	r0, [pc, #44]	; (80059c8 <MPU6050_Init+0xa8>)
 800599c:	f7fc fcda 	bl	8002354 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 80059a0:	2300      	movs	r3, #0
 80059a2:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&MPU6050I2C, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80059a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059a8:	9302      	str	r3, [sp, #8]
 80059aa:	2301      	movs	r3, #1
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	1dbb      	adds	r3, r7, #6
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	2301      	movs	r3, #1
 80059b4:	221b      	movs	r2, #27
 80059b6:	21d0      	movs	r1, #208	; 0xd0
 80059b8:	4803      	ldr	r0, [pc, #12]	; (80059c8 <MPU6050_Init+0xa8>)
 80059ba:	f7fc fccb 	bl	8002354 <HAL_I2C_Mem_Write>
		}
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2001b618 	.word	0x2001b618

080059cc <MPU6050_Read_RawAcc_Val>:


}

void MPU6050_Read_RawAcc_Val(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&MPU6050I2C, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80059d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	2306      	movs	r3, #6
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	463b      	mov	r3, r7
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2301      	movs	r3, #1
 80059e2:	223b      	movs	r2, #59	; 0x3b
 80059e4:	21d0      	movs	r1, #208	; 0xd0
 80059e6:	4811      	ldr	r0, [pc, #68]	; (8005a2c <MPU6050_Read_RawAcc_Val+0x60>)
 80059e8:	f7fc fdae 	bl	8002548 <HAL_I2C_Mem_Read>

	accRawVals.x = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80059ec:	783b      	ldrb	r3, [r7, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	b21a      	sxth	r2, r3
 80059f2:	787b      	ldrb	r3, [r7, #1]
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b21a      	sxth	r2, r3
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <MPU6050_Read_RawAcc_Val+0x64>)
 80059fc:	801a      	strh	r2, [r3, #0]
	accRawVals.y = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80059fe:	78bb      	ldrb	r3, [r7, #2]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	b21a      	sxth	r2, r3
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b21a      	sxth	r2, r3
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <MPU6050_Read_RawAcc_Val+0x64>)
 8005a0e:	805a      	strh	r2, [r3, #2]
	accRawVals.z = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005a10:	793b      	ldrb	r3, [r7, #4]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	797b      	ldrb	r3, [r7, #5]
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b21a      	sxth	r2, r3
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <MPU6050_Read_RawAcc_Val+0x64>)
 8005a20:	809a      	strh	r2, [r3, #4]
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2001b618 	.word	0x2001b618
 8005a30:	2001b80c 	.word	0x2001b80c

08005a34 <MPU6050_Read_ScaledAcc_Val>:
void MPU6050_Read_ScaledAcc_Val(void)
{	MPU6050_Read_RawAcc_Val();
 8005a34:	b598      	push	{r3, r4, r7, lr}
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	f7ff ffc8 	bl	80059cc <MPU6050_Read_RawAcc_Val>
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	accScaleVals.x = (accRawVals.x-accCaliVals.x)/16384.0;
 8005a3c:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <MPU6050_Read_ScaledAcc_Val+0xa4>)
 8005a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <MPU6050_Read_ScaledAcc_Val+0xa8>)
 8005a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fa fd79 	bl	8000544 <__aeabi_i2d>
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	4b22      	ldr	r3, [pc, #136]	; (8005ae0 <MPU6050_Read_ScaledAcc_Val+0xac>)
 8005a58:	f7fa ff08 	bl	800086c <__aeabi_ddiv>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4618      	mov	r0, r3
 8005a62:	4621      	mov	r1, r4
 8005a64:	f7fb f8a8 	bl	8000bb8 <__aeabi_d2f>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <MPU6050_Read_ScaledAcc_Val+0xb0>)
 8005a6c:	601a      	str	r2, [r3, #0]
	accScaleVals.y = (accRawVals.y-accCaliVals.y)/16384.0;
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <MPU6050_Read_ScaledAcc_Val+0xa4>)
 8005a70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b19      	ldr	r3, [pc, #100]	; (8005adc <MPU6050_Read_ScaledAcc_Val+0xa8>)
 8005a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fd60 	bl	8000544 <__aeabi_i2d>
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <MPU6050_Read_ScaledAcc_Val+0xac>)
 8005a8a:	f7fa feef 	bl	800086c <__aeabi_ddiv>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	4618      	mov	r0, r3
 8005a94:	4621      	mov	r1, r4
 8005a96:	f7fb f88f 	bl	8000bb8 <__aeabi_d2f>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <MPU6050_Read_ScaledAcc_Val+0xb0>)
 8005a9e:	605a      	str	r2, [r3, #4]
	accScaleVals.z = (accRawVals.z-accCaliVals.z)/16384.0;
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <MPU6050_Read_ScaledAcc_Val+0xa4>)
 8005aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <MPU6050_Read_ScaledAcc_Val+0xa8>)
 8005aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fd47 	bl	8000544 <__aeabi_i2d>
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <MPU6050_Read_ScaledAcc_Val+0xac>)
 8005abc:	f7fa fed6 	bl	800086c <__aeabi_ddiv>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f7fb f876 	bl	8000bb8 <__aeabi_d2f>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <MPU6050_Read_ScaledAcc_Val+0xb0>)
 8005ad0:	609a      	str	r2, [r3, #8]
}
 8005ad2:	bf00      	nop
 8005ad4:	bd98      	pop	{r3, r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	2001b80c 	.word	0x2001b80c
 8005adc:	2001b7f0 	.word	0x2001b7f0
 8005ae0:	40d00000 	.word	0x40d00000
 8005ae4:	2001b814 	.word	0x2001b814

08005ae8 <MPU6050_Read_RawGyro_Val>:

void MPU6050_Read_RawGyro_Val(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&MPU6050I2C, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005af2:	9302      	str	r3, [sp, #8]
 8005af4:	2306      	movs	r3, #6
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	463b      	mov	r3, r7
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2301      	movs	r3, #1
 8005afe:	2243      	movs	r2, #67	; 0x43
 8005b00:	21d0      	movs	r1, #208	; 0xd0
 8005b02:	4811      	ldr	r0, [pc, #68]	; (8005b48 <MPU6050_Read_RawGyro_Val+0x60>)
 8005b04:	f7fc fd20 	bl	8002548 <HAL_I2C_Mem_Read>

	gyroRawVals.x = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005b08:	783b      	ldrb	r3, [r7, #0]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	b21a      	sxth	r2, r3
 8005b0e:	787b      	ldrb	r3, [r7, #1]
 8005b10:	b21b      	sxth	r3, r3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b21a      	sxth	r2, r3
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <MPU6050_Read_RawGyro_Val+0x64>)
 8005b18:	801a      	strh	r2, [r3, #0]
	gyroRawVals.y = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005b1a:	78bb      	ldrb	r3, [r7, #2]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	b21a      	sxth	r2, r3
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	b21b      	sxth	r3, r3
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b21a      	sxth	r2, r3
 8005b28:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <MPU6050_Read_RawGyro_Val+0x64>)
 8005b2a:	805a      	strh	r2, [r3, #2]
	gyroRawVals.z = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005b2c:	793b      	ldrb	r3, [r7, #4]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	b21a      	sxth	r2, r3
 8005b32:	797b      	ldrb	r3, [r7, #5]
 8005b34:	b21b      	sxth	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b21a      	sxth	r2, r3
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <MPU6050_Read_RawGyro_Val+0x64>)
 8005b3c:	809a      	strh	r2, [r3, #4]

}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	2001b618 	.word	0x2001b618
 8005b4c:	2001b7e8 	.word	0x2001b7e8

08005b50 <MPU6050_Read_ScaledGyro_Val>:
void MPU6050_Read_ScaledGyro_Val(void)
{	MPU6050_Read_RawGyro_Val();
 8005b50:	b598      	push	{r3, r4, r7, lr}
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	f7ff ffc8 	bl	8005ae8 <MPU6050_Read_RawGyro_Val>
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	gyroScaleVals.x = (gyroRawVals.x-gyroCaliVals.x)/131.0;
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <MPU6050_Read_ScaledGyro_Val+0xb0>)
 8005b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <MPU6050_Read_ScaledGyro_Val+0xb4>)
 8005b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fa fceb 	bl	8000544 <__aeabi_i2d>
 8005b6e:	a322      	add	r3, pc, #136	; (adr r3, 8005bf8 <MPU6050_Read_ScaledGyro_Val+0xa8>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fe7a 	bl	800086c <__aeabi_ddiv>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	4621      	mov	r1, r4
 8005b80:	f7fb f81a 	bl	8000bb8 <__aeabi_d2f>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <MPU6050_Read_ScaledGyro_Val+0xb8>)
 8005b88:	601a      	str	r2, [r3, #0]
	gyroScaleVals.y = (gyroRawVals.y-gyroCaliVals.y)/131.0;
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <MPU6050_Read_ScaledGyro_Val+0xb0>)
 8005b8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b90:	461a      	mov	r2, r3
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <MPU6050_Read_ScaledGyro_Val+0xb4>)
 8005b94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fa fcd2 	bl	8000544 <__aeabi_i2d>
 8005ba0:	a315      	add	r3, pc, #84	; (adr r3, 8005bf8 <MPU6050_Read_ScaledGyro_Val+0xa8>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fe61 	bl	800086c <__aeabi_ddiv>
 8005baa:	4603      	mov	r3, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7fb f801 	bl	8000bb8 <__aeabi_d2f>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <MPU6050_Read_ScaledGyro_Val+0xb8>)
 8005bba:	605a      	str	r2, [r3, #4]
	gyroScaleVals.z = (gyroRawVals.z-gyroCaliVals.z)/131.0;
 8005bbc:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <MPU6050_Read_ScaledGyro_Val+0xb0>)
 8005bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <MPU6050_Read_ScaledGyro_Val+0xb4>)
 8005bc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fa fcb9 	bl	8000544 <__aeabi_i2d>
 8005bd2:	a309      	add	r3, pc, #36	; (adr r3, 8005bf8 <MPU6050_Read_ScaledGyro_Val+0xa8>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fe48 	bl	800086c <__aeabi_ddiv>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4618      	mov	r0, r3
 8005be2:	4621      	mov	r1, r4
 8005be4:	f7fa ffe8 	bl	8000bb8 <__aeabi_d2f>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <MPU6050_Read_ScaledGyro_Val+0xb8>)
 8005bec:	609a      	str	r2, [r3, #8]
}
 8005bee:	bf00      	nop
 8005bf0:	bd98      	pop	{r3, r4, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	40606000 	.word	0x40606000
 8005c00:	2001b7e8 	.word	0x2001b7e8
 8005c04:	2001b804 	.word	0x2001b804
 8005c08:	2001b7f8 	.word	0x2001b7f8

08005c0c <MPU6050_Set_Gyro_Calibration>:
		//2* Y-Axis calibrate
		accCaliVals.y =y;
		//3* Z-Axis calibrate
		accCaliVals.z =z;
}
void MPU6050_Set_Gyro_Calibration(int16_t x, int16_t y, int16_t z){
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
 8005c16:	460b      	mov	r3, r1
 8005c18:	80bb      	strh	r3, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	807b      	strh	r3, [r7, #2]
		//1* X-Axis calibrate
		gyroCaliVals.x =x;
 8005c1e:	4a07      	ldr	r2, [pc, #28]	; (8005c3c <MPU6050_Set_Gyro_Calibration+0x30>)
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	8013      	strh	r3, [r2, #0]
		//2* Y-Axis calibrate
		gyroCaliVals.y =y;
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <MPU6050_Set_Gyro_Calibration+0x30>)
 8005c26:	88bb      	ldrh	r3, [r7, #4]
 8005c28:	8053      	strh	r3, [r2, #2]
		//3* Z-Axis calibrate
		gyroCaliVals.z =z;
 8005c2a:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <MPU6050_Set_Gyro_Calibration+0x30>)
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	8093      	strh	r3, [r2, #4]
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	2001b804 	.word	0x2001b804

08005c40 <MPU6050_getAccScaleVals>:

MPURawData_Def MPU6050_getAccRawVals(void){return accRawVals;}
MPURawData_Def MPU6050_getGyroRawVals(void){return gyroRawVals;}
MPUScaledData_Def MPU6050_getAccScaleVals(void){return accScaleVals;}
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <MPU6050_getAccScaleVals+0x3c>)
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	ee06 1a90 	vmov	s13, r1
 8005c5c:	ee07 2a10 	vmov	s14, r2
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eeb0 0a66 	vmov.f32	s0, s13
 8005c68:	eef0 0a47 	vmov.f32	s1, s14
 8005c6c:	eeb0 1a67 	vmov.f32	s2, s15
 8005c70:	3724      	adds	r7, #36	; 0x24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2001b814 	.word	0x2001b814

08005c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a07      	ldr	r2, [pc, #28]	; (8005cac <vApplicationGetIdleTaskMemory+0x2c>)
 8005c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20002a50 	.word	0x20002a50
 8005cb0:	20002aac 	.word	0x20002aac

08005cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8005cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20002cac 	.word	0x20002cac
 8005ce4:	20002d08 	.word	0x20002d08

08005ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f103 0208 	add.w	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d103      	bne.n	8005daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e00c      	b.n	8005dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3308      	adds	r3, #8
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <vListInsert+0x2e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d2f6      	bcs.n	8005db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d103      	bne.n	8005e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	e7fe      	b.n	8005e76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005e78:	f002 f810 	bl	8007e9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	441a      	add	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d114      	bne.n	8005ef8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01a      	beq.n	8005f0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3310      	adds	r3, #16
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f8de 	bl	800709c <xTaskRemoveFromEventList>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <xQueueGenericReset+0xcc>)
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	e009      	b.n	8005f0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3310      	adds	r3, #16
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fef3 	bl	8005ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3324      	adds	r3, #36	; 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff feee 	bl	8005ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f0c:	f001 fff4 	bl	8007ef8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f10:	2301      	movs	r3, #1
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <xQueueGenericCreateStatic+0x28>
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	e7fe      	b.n	8005f46 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <xQueueGenericCreateStatic+0x42>
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <xQueueGenericCreateStatic+0x4e>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <xQueueGenericCreateStatic+0x52>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericCreateStatic+0x54>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <xQueueGenericCreateStatic+0x6c>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	e7fe      	b.n	8005f8a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <xQueueGenericCreateStatic+0x78>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <xQueueGenericCreateStatic+0x7c>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <xQueueGenericCreateStatic+0x7e>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x96>
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fb6:	2350      	movs	r3, #80	; 0x50
 8005fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b50      	cmp	r3, #80	; 0x50
 8005fbe:	d009      	beq.n	8005fd4 <xQueueGenericCreateStatic+0xb4>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e7fe      	b.n	8005fd2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f805 	bl	8006006 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3730      	adds	r7, #48	; 0x30
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e002      	b.n	8006028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006034:	2101      	movs	r1, #1
 8006036:	69b8      	ldr	r0, [r7, #24]
 8006038:	f7ff ff0a 	bl	8005e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <xQueueGenericSend+0x30>
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	e7fe      	b.n	800607a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <xQueueGenericSend+0x3e>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <xQueueGenericSend+0x42>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericSend+0x44>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <xQueueGenericSend+0x5c>
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	e7fe      	b.n	80060a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSend+0x6a>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <xQueueGenericSend+0x6e>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericSend+0x70>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <xQueueGenericSend+0x88>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	e7fe      	b.n	80060d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d4:	f001 f998 	bl	8007408 <xTaskGetSchedulerState>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xQueueGenericSend+0x98>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <xQueueGenericSend+0x9c>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <xQueueGenericSend+0x9e>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <xQueueGenericSend+0xb6>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e7fe      	b.n	8006100 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006102:	f001 fecb 	bl	8007e9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	429a      	cmp	r2, r3
 8006110:	d302      	bcc.n	8006118 <xQueueGenericSend+0xcc>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d129      	bne.n	800616c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800611e:	f000 f9ff 	bl	8006520 <prvCopyDataToQueue>
 8006122:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f000 ffb3 	bl	800709c <xTaskRemoveFromEventList>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d013      	beq.n	8006164 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800613c:	4b3f      	ldr	r3, [pc, #252]	; (800623c <xQueueGenericSend+0x1f0>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	e00a      	b.n	8006164 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006154:	4b39      	ldr	r3, [pc, #228]	; (800623c <xQueueGenericSend+0x1f0>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006164:	f001 fec8 	bl	8007ef8 <vPortExitCritical>
				return pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	e063      	b.n	8006234 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006172:	f001 fec1 	bl	8007ef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006176:	2300      	movs	r3, #0
 8006178:	e05c      	b.n	8006234 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	4618      	mov	r0, r3
 8006186:	f000 ffeb 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800618e:	f001 feb3 	bl	8007ef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006192:	f000 fd67 	bl	8006c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006196:	f001 fe81 	bl	8007e9c <vPortEnterCritical>
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a0:	b25b      	sxtb	r3, r3
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d103      	bne.n	80061b0 <xQueueGenericSend+0x164>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d103      	bne.n	80061c6 <xQueueGenericSend+0x17a>
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c6:	f001 fe97 	bl	8007ef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ca:	1d3a      	adds	r2, r7, #4
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ffda 	bl	800718c <xTaskCheckForTimeOut>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d124      	bne.n	8006228 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e0:	f000 fa96 	bl	8006710 <prvIsQueueFull>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d018      	beq.n	800621c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	3310      	adds	r3, #16
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 ff04 	bl	8007000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fa:	f000 fa21 	bl	8006640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061fe:	f000 fd3f 	bl	8006c80 <xTaskResumeAll>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f af7c 	bne.w	8006102 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800620a:	4b0c      	ldr	r3, [pc, #48]	; (800623c <xQueueGenericSend+0x1f0>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	e772      	b.n	8006102 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800621c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621e:	f000 fa0f 	bl	8006640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006222:	f000 fd2d 	bl	8006c80 <xTaskResumeAll>
 8006226:	e76c      	b.n	8006102 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622a:	f000 fa09 	bl	8006640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800622e:	f000 fd27 	bl	8006c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006232:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006234:	4618      	mov	r0, r3
 8006236:	3738      	adds	r7, #56	; 0x38
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	; 0x38
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <xQueueGenericSendFromISR+0x2c>
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	e7fe      	b.n	800626a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <xQueueGenericSendFromISR+0x3a>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <xQueueGenericSendFromISR+0x3e>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <xQueueGenericSendFromISR+0x40>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <xQueueGenericSendFromISR+0x58>
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	e7fe      	b.n	8006296 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSendFromISR+0x66>
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSendFromISR+0x6a>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSendFromISR+0x6c>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <xQueueGenericSendFromISR+0x84>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c4:	f001 fec6 	bl	8008054 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062c8:	f3ef 8211 	mrs	r2, BASEPRI
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	61ba      	str	r2, [r7, #24]
 80062de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <xQueueGenericSendFromISR+0xb6>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d12c      	bne.n	8006350 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006306:	f000 f90b 	bl	8006520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800630a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d112      	bne.n	800633a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	d016      	beq.n	800634a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 febb 	bl	800709c <xTaskRemoveFromEventList>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e007      	b.n	800634a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800633a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800633e:	3301      	adds	r3, #1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	b25a      	sxtb	r2, r3
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800634a:	2301      	movs	r3, #1
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800634e:	e001      	b.n	8006354 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006350:	2300      	movs	r3, #0
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006360:	4618      	mov	r0, r3
 8006362:	3738      	adds	r7, #56	; 0x38
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <xQueueReceive+0x2e>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	e7fe      	b.n	8006394 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <xQueueReceive+0x3c>
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <xQueueReceive+0x40>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <xQueueReceive+0x42>
 80063a8:	2300      	movs	r3, #0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <xQueueReceive+0x5a>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e7fe      	b.n	80063c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063c2:	f001 f821 	bl	8007408 <xTaskGetSchedulerState>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <xQueueReceive+0x6a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <xQueueReceive+0x6e>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueReceive+0x70>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <xQueueReceive+0x88>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e7fe      	b.n	80063ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063f0:	f001 fd54 	bl	8007e9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01f      	beq.n	8006440 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	f000 f8f6 	bl	80065f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	1e5a      	subs	r2, r3, #1
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00f      	beq.n	8006438 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fe3d 	bl	800709c <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b3c      	ldr	r3, [pc, #240]	; (800651c <xQueueReceive+0x1b4>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006438:	f001 fd5e 	bl	8007ef8 <vPortExitCritical>
				return pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	e069      	b.n	8006514 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006446:	f001 fd57 	bl	8007ef8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800644a:	2300      	movs	r3, #0
 800644c:	e062      	b.n	8006514 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006454:	f107 0310 	add.w	r3, r7, #16
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fe81 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006462:	f001 fd49 	bl	8007ef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006466:	f000 fbfd 	bl	8006c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646a:	f001 fd17 	bl	8007e9c <vPortEnterCritical>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006474:	b25b      	sxtb	r3, r3
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <xQueueReceive+0x11c>
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	b25b      	sxtb	r3, r3
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <xQueueReceive+0x132>
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649a:	f001 fd2d 	bl	8007ef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fe70 	bl	800718c <xTaskCheckForTimeOut>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d123      	bne.n	80064fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b4:	f000 f916 	bl	80066e4 <prvIsQueueEmpty>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	3324      	adds	r3, #36	; 0x24
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fd9a 	bl	8007000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ce:	f000 f8b7 	bl	8006640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064d2:	f000 fbd5 	bl	8006c80 <xTaskResumeAll>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d189      	bne.n	80063f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <xQueueReceive+0x1b4>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	e780      	b.n	80063f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f0:	f000 f8a6 	bl	8006640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f4:	f000 fbc4 	bl	8006c80 <xTaskResumeAll>
 80064f8:	e77a      	b.n	80063f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f000 f8a0 	bl	8006640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006500:	f000 fbbe 	bl	8006c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f000 f8ed 	bl	80066e4 <prvIsQueueEmpty>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	f43f af6f 	beq.w	80063f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006514:	4618      	mov	r0, r3
 8006516:	3730      	adds	r7, #48	; 0x30
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d14d      	bne.n	80065e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 ff7a 	bl	8007444 <xTaskPriorityDisinherit>
 8006550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	e043      	b.n	80065e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d119      	bne.n	8006594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6858      	ldr	r0, [r3, #4]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	461a      	mov	r2, r3
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	f024 fd50 	bl	802b010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	441a      	add	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	d32b      	bcc.n	80065e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	e026      	b.n	80065e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68d8      	ldr	r0, [r3, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	461a      	mov	r2, r3
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	f024 fd36 	bl	802b010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	425b      	negs	r3, r3
 80065ae:	441a      	add	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d207      	bcs.n	80065d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	425b      	negs	r3, r3
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d105      	bne.n	80065e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065ea:	697b      	ldr	r3, [r7, #20]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	441a      	add	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d303      	bcc.n	8006628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68d9      	ldr	r1, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	461a      	mov	r2, r3
 8006632:	6838      	ldr	r0, [r7, #0]
 8006634:	f024 fcec 	bl	802b010 <memcpy>
	}
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006648:	f001 fc28 	bl	8007e9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006654:	e011      	b.n	800667a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d012      	beq.n	8006684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3324      	adds	r3, #36	; 0x24
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd1a 	bl	800709c <xTaskRemoveFromEventList>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800666e:	f000 fded 	bl	800724c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	3b01      	subs	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	dce9      	bgt.n	8006656 <prvUnlockQueue+0x16>
 8006682:	e000      	b.n	8006686 <prvUnlockQueue+0x46>
					break;
 8006684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	22ff      	movs	r2, #255	; 0xff
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800668e:	f001 fc33 	bl	8007ef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006692:	f001 fc03 	bl	8007e9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800669e:	e011      	b.n	80066c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3310      	adds	r3, #16
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fcf5 	bl	800709c <xTaskRemoveFromEventList>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066b8:	f000 fdc8 	bl	800724c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	3b01      	subs	r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dce9      	bgt.n	80066a0 <prvUnlockQueue+0x60>
 80066cc:	e000      	b.n	80066d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066d8:	f001 fc0e 	bl	8007ef8 <vPortExitCritical>
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066ec:	f001 fbd6 	bl	8007e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e001      	b.n	8006702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006702:	f001 fbf9 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006718:	f001 fbc0 	bl	8007e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	429a      	cmp	r2, r3
 8006726:	d102      	bne.n	800672e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e001      	b.n	8006732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006732:	f001 fbe1 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e014      	b.n	800677a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006750:	4a0e      	ldr	r2, [pc, #56]	; (800678c <vQueueAddToRegistry+0x4c>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800675c:	490b      	ldr	r1, [pc, #44]	; (800678c <vQueueAddToRegistry+0x4c>)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <vQueueAddToRegistry+0x4c>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006772:	e005      	b.n	8006780 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b07      	cmp	r3, #7
 800677e:	d9e7      	bls.n	8006750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	2001b820 	.word	0x2001b820

08006790 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067a0:	f001 fb7c 	bl	8007e9c <vPortEnterCritical>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d103      	bne.n	80067ba <vQueueWaitForMessageRestricted+0x2a>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d103      	bne.n	80067d0 <vQueueWaitForMessageRestricted+0x40>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d0:	f001 fb92 	bl	8007ef8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d106      	bne.n	80067ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3324      	adds	r3, #36	; 0x24
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fc2f 	bl	8007048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f7ff ff28 	bl	8006640 <prvUnlockQueue>
	}
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08e      	sub	sp, #56	; 0x38
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <xTaskCreateStatic+0x28>
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
 800681e:	e7fe      	b.n	800681e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <xTaskCreateStatic+0x42>
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e7fe      	b.n	8006838 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800683a:	235c      	movs	r3, #92	; 0x5c
 800683c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b5c      	cmp	r3, #92	; 0x5c
 8006842:	d009      	beq.n	8006858 <xTaskCreateStatic+0x60>
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e7fe      	b.n	8006856 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01e      	beq.n	800689e <xTaskCreateStatic+0xa6>
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01b      	beq.n	800689e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006878:	2300      	movs	r3, #0
 800687a:	9303      	str	r3, [sp, #12]
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	9302      	str	r3, [sp, #8]
 8006880:	f107 0314 	add.w	r3, r7, #20
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f850 	bl	8006936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006898:	f000 f8dc 	bl	8006a54 <prvAddNewTaskToReadyList>
 800689c:	e001      	b.n	80068a2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068a2:	697b      	ldr	r3, [r7, #20]
	}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3728      	adds	r7, #40	; 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08c      	sub	sp, #48	; 0x30
 80068b0:	af04      	add	r7, sp, #16
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 fc05 	bl	80080d0 <pvPortMalloc>
 80068c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ce:	205c      	movs	r0, #92	; 0x5c
 80068d0:	f001 fbfe 	bl	80080d0 <pvPortMalloc>
 80068d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
 80068e2:	e005      	b.n	80068f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068e4:	6978      	ldr	r0, [r7, #20]
 80068e6:	f001 fcb5 	bl	8008254 <vPortFree>
 80068ea:	e001      	b.n	80068f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	2300      	movs	r3, #0
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	9302      	str	r3, [sp, #8]
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f80e 	bl	8006936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691a:	69f8      	ldr	r0, [r7, #28]
 800691c:	f000 f89a 	bl	8006a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006920:	2301      	movs	r3, #1
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e002      	b.n	800692c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800692c:	69bb      	ldr	r3, [r7, #24]
	}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	461a      	mov	r2, r3
 800694e:	21a5      	movs	r1, #165	; 0xa5
 8006950:	f024 fb69 	bl	802b026 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800695e:	3b01      	subs	r3, #1
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f023 0307 	bic.w	r3, r3, #7
 800696c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <prvInitialiseNewTask+0x56>
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e7fe      	b.n	800698a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01f      	beq.n	80069d2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	e012      	b.n	80069be <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	7819      	ldrb	r1, [r3, #0]
 80069a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	3334      	adds	r3, #52	; 0x34
 80069a8:	460a      	mov	r2, r1
 80069aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2b0f      	cmp	r3, #15
 80069c2:	d9e9      	bls.n	8006998 <prvInitialiseNewTask+0x62>
 80069c4:	e000      	b.n	80069c8 <prvInitialiseNewTask+0x92>
			{
				break;
 80069c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069d0:	e003      	b.n	80069da <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2b37      	cmp	r3, #55	; 0x37
 80069de:	d901      	bls.n	80069e4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069e0:	2337      	movs	r3, #55	; 0x37
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	2200      	movs	r2, #0
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	3304      	adds	r3, #4
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f994 	bl	8005d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	3318      	adds	r3, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f98f 	bl	8005d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	2200      	movs	r2, #0
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	68f9      	ldr	r1, [r7, #12]
 8006a32:	69b8      	ldr	r0, [r7, #24]
 8006a34:	f001 f90c 	bl	8007c50 <pxPortInitialiseStack>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a5c:	f001 fa1e 	bl	8007e9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a60:	4b2d      	ldr	r3, [pc, #180]	; (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a2c      	ldr	r2, [pc, #176]	; (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a6a:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a72:	4a2a      	ldr	r2, [pc, #168]	; (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a78:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <prvAddNewTaskToReadyList+0xc4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d110      	bne.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a80:	f000 fc08 	bl	8007294 <prvInitialiseTaskLists>
 8006a84:	e00d      	b.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <prvAddNewTaskToReadyList+0xcc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a8e:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d802      	bhi.n	8006aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a1e      	ldr	r2, [pc, #120]	; (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <prvAddNewTaskToReadyList+0xd0>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <prvAddNewTaskToReadyList+0xd4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <prvAddNewTaskToReadyList+0x74>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <prvAddNewTaskToReadyList+0xd4>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <prvAddNewTaskToReadyList+0xd8>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7ff f92f 	bl	8005d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ae4:	f001 fa08 	bl	8007ef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <prvAddNewTaskToReadyList+0xcc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00e      	beq.n	8006b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <prvAddNewTaskToReadyList+0xc8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d207      	bcs.n	8006b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <prvAddNewTaskToReadyList+0xdc>)
 8006b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200035dc 	.word	0x200035dc
 8006b1c:	20003108 	.word	0x20003108
 8006b20:	200035e8 	.word	0x200035e8
 8006b24:	200035f8 	.word	0x200035f8
 8006b28:	200035e4 	.word	0x200035e4
 8006b2c:	2000310c 	.word	0x2000310c
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <vTaskDelay+0x60>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <vTaskDelay+0x2e>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	e7fe      	b.n	8006b60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006b62:	f000 f87f 	bl	8006c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b66:	2100      	movs	r1, #0
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fcd7 	bl	800751c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b6e:	f000 f887 	bl	8006c80 <xTaskResumeAll>
 8006b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d107      	bne.n	8006b8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <vTaskDelay+0x64>)
 8006b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20003604 	.word	0x20003604
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	; 0x28
 8006ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006baa:	463a      	mov	r2, r7
 8006bac:	1d39      	adds	r1, r7, #4
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff f864 	bl	8005c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	460a      	mov	r2, r1
 8006bca:	4920      	ldr	r1, [pc, #128]	; (8006c4c <vTaskStartScheduler+0xb0>)
 8006bcc:	4820      	ldr	r0, [pc, #128]	; (8006c50 <vTaskStartScheduler+0xb4>)
 8006bce:	f7ff fe13 	bl	80067f8 <xTaskCreateStatic>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b1f      	ldr	r3, [pc, #124]	; (8006c54 <vTaskStartScheduler+0xb8>)
 8006bd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <vTaskStartScheduler+0xb8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e001      	b.n	8006bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d102      	bne.n	8006bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bf0:	f000 fce8 	bl	80075c4 <xTimerCreateTimerTask>
 8006bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d115      	bne.n	8006c28 <vTaskStartScheduler+0x8c>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <vTaskStartScheduler+0xbc>)
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <vTaskStartScheduler+0xc0>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <vTaskStartScheduler+0xc4>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c22:	f001 f89d 	bl	8007d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c26:	e00d      	b.n	8006c44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d109      	bne.n	8006c44 <vTaskStartScheduler+0xa8>
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e7fe      	b.n	8006c42 <vTaskStartScheduler+0xa6>
}
 8006c44:	bf00      	nop
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	0802d3f0 	.word	0x0802d3f0
 8006c50:	08007265 	.word	0x08007265
 8006c54:	20003600 	.word	0x20003600
 8006c58:	200035fc 	.word	0x200035fc
 8006c5c:	200035e8 	.word	0x200035e8
 8006c60:	200035e0 	.word	0x200035e0

08006c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <vTaskSuspendAll+0x18>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a03      	ldr	r2, [pc, #12]	; (8006c7c <vTaskSuspendAll+0x18>)
 8006c70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20003604 	.word	0x20003604

08006c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c8e:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <xTaskResumeAll+0x114>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <xTaskResumeAll+0x2a>
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	e7fe      	b.n	8006ca8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006caa:	f001 f8f7 	bl	8007e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <xTaskResumeAll+0x114>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4a37      	ldr	r2, [pc, #220]	; (8006d94 <xTaskResumeAll+0x114>)
 8006cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cb8:	4b36      	ldr	r3, [pc, #216]	; (8006d94 <xTaskResumeAll+0x114>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d162      	bne.n	8006d86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cc0:	4b35      	ldr	r3, [pc, #212]	; (8006d98 <xTaskResumeAll+0x118>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d05e      	beq.n	8006d86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cc8:	e02f      	b.n	8006d2a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <xTaskResumeAll+0x11c>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff f890 	bl	8005dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff f88b 	bl	8005dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <xTaskResumeAll+0x120>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <xTaskResumeAll+0x7a>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <xTaskResumeAll+0x120>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <xTaskResumeAll+0x124>)
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7ff f816 	bl	8005d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <xTaskResumeAll+0x128>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d24:	4b21      	ldr	r3, [pc, #132]	; (8006dac <xTaskResumeAll+0x12c>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d2a:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <xTaskResumeAll+0x11c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1cb      	bne.n	8006cca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d38:	f000 fb46 	bl	80073c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <xTaskResumeAll+0x130>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d010      	beq.n	8006d6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d48:	f000 f846 	bl	8006dd8 <xTaskIncrementTick>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <xTaskResumeAll+0x12c>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f1      	bne.n	8006d48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <xTaskResumeAll+0x130>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d6a:	4b10      	ldr	r3, [pc, #64]	; (8006dac <xTaskResumeAll+0x12c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d76:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <xTaskResumeAll+0x134>)
 8006d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d86:	f001 f8b7 	bl	8007ef8 <vPortExitCritical>

	return xAlreadyYielded;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20003604 	.word	0x20003604
 8006d98:	200035dc 	.word	0x200035dc
 8006d9c:	2000359c 	.word	0x2000359c
 8006da0:	200035e4 	.word	0x200035e4
 8006da4:	2000310c 	.word	0x2000310c
 8006da8:	20003108 	.word	0x20003108
 8006dac:	200035f0 	.word	0x200035f0
 8006db0:	200035ec 	.word	0x200035ec
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <xTaskGetTickCount+0x1c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dc4:	687b      	ldr	r3, [r7, #4]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	200035e0 	.word	0x200035e0

08006dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de2:	4b4e      	ldr	r3, [pc, #312]	; (8006f1c <xTaskIncrementTick+0x144>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 8088 	bne.w	8006efc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dec:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <xTaskIncrementTick+0x148>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <xTaskIncrementTick+0x148>)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11f      	bne.n	8006e40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e00:	4b48      	ldr	r3, [pc, #288]	; (8006f24 <xTaskIncrementTick+0x14c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <xTaskIncrementTick+0x46>
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	e7fe      	b.n	8006e1c <xTaskIncrementTick+0x44>
 8006e1e:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <xTaskIncrementTick+0x14c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	4b40      	ldr	r3, [pc, #256]	; (8006f28 <xTaskIncrementTick+0x150>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3e      	ldr	r2, [pc, #248]	; (8006f24 <xTaskIncrementTick+0x14c>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4a3e      	ldr	r2, [pc, #248]	; (8006f28 <xTaskIncrementTick+0x150>)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <xTaskIncrementTick+0x154>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3301      	adds	r3, #1
 8006e38:	4a3c      	ldr	r2, [pc, #240]	; (8006f2c <xTaskIncrementTick+0x154>)
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	f000 fac4 	bl	80073c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e40:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <xTaskIncrementTick+0x158>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d349      	bcc.n	8006ede <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4a:	4b36      	ldr	r3, [pc, #216]	; (8006f24 <xTaskIncrementTick+0x14c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e54:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <xTaskIncrementTick+0x158>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	601a      	str	r2, [r3, #0]
					break;
 8006e5c:	e03f      	b.n	8006ede <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <xTaskIncrementTick+0x14c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d203      	bcs.n	8006e7e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e76:	4a2e      	ldr	r2, [pc, #184]	; (8006f30 <xTaskIncrementTick+0x158>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e7c:	e02f      	b.n	8006ede <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe ffba 	bl	8005dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3318      	adds	r3, #24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe ffb1 	bl	8005dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <xTaskIncrementTick+0x15c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d903      	bls.n	8006eae <xTaskIncrementTick+0xd6>
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <xTaskIncrementTick+0x15c>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a1f      	ldr	r2, [pc, #124]	; (8006f38 <xTaskIncrementTick+0x160>)
 8006ebc:	441a      	add	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fe ff3c 	bl	8005d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <xTaskIncrementTick+0x164>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3b8      	bcc.n	8006e4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006edc:	e7b5      	b.n	8006e4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <xTaskIncrementTick+0x164>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4914      	ldr	r1, [pc, #80]	; (8006f38 <xTaskIncrementTick+0x160>)
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d907      	bls.n	8006f06 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e004      	b.n	8006f06 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <xTaskIncrementTick+0x168>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3301      	adds	r3, #1
 8006f02:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <xTaskIncrementTick+0x168>)
 8006f04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <xTaskIncrementTick+0x16c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f12:	697b      	ldr	r3, [r7, #20]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20003604 	.word	0x20003604
 8006f20:	200035e0 	.word	0x200035e0
 8006f24:	20003594 	.word	0x20003594
 8006f28:	20003598 	.word	0x20003598
 8006f2c:	200035f4 	.word	0x200035f4
 8006f30:	200035fc 	.word	0x200035fc
 8006f34:	200035e4 	.word	0x200035e4
 8006f38:	2000310c 	.word	0x2000310c
 8006f3c:	20003108 	.word	0x20003108
 8006f40:	200035ec 	.word	0x200035ec
 8006f44:	200035f0 	.word	0x200035f0

08006f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f4e:	4b27      	ldr	r3, [pc, #156]	; (8006fec <vTaskSwitchContext+0xa4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <vTaskSwitchContext+0xa8>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f5c:	e040      	b.n	8006fe0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <vTaskSwitchContext+0xa8>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <vTaskSwitchContext+0xac>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	e00f      	b.n	8006f8c <vTaskSwitchContext+0x44>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <vTaskSwitchContext+0x3e>
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	607b      	str	r3, [r7, #4]
 8006f84:	e7fe      	b.n	8006f84 <vTaskSwitchContext+0x3c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	491a      	ldr	r1, [pc, #104]	; (8006ff8 <vTaskSwitchContext+0xb0>)
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0e5      	beq.n	8006f6c <vTaskSwitchContext+0x24>
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <vTaskSwitchContext+0xb0>)
 8006fac:	4413      	add	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d104      	bne.n	8006fd0 <vTaskSwitchContext+0x88>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <vTaskSwitchContext+0xb4>)
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	4a06      	ldr	r2, [pc, #24]	; (8006ff4 <vTaskSwitchContext+0xac>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6013      	str	r3, [r2, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20003604 	.word	0x20003604
 8006ff0:	200035f0 	.word	0x200035f0
 8006ff4:	200035e4 	.word	0x200035e4
 8006ff8:	2000310c 	.word	0x2000310c
 8006ffc:	20003108 	.word	0x20003108

08007000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <vTaskPlaceOnEventList+0x24>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e7fe      	b.n	8007022 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <vTaskPlaceOnEventList+0x44>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3318      	adds	r3, #24
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe feac 	bl	8005d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007032:	2101      	movs	r1, #1
 8007034:	6838      	ldr	r0, [r7, #0]
 8007036:	f000 fa71 	bl	800751c <prvAddCurrentTaskToDelayedList>
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20003108 	.word	0x20003108

08007048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <vTaskPlaceOnEventListRestricted+0x26>
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e7fe      	b.n	800706c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <vTaskPlaceOnEventListRestricted+0x50>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3318      	adds	r3, #24
 8007074:	4619      	mov	r1, r3
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7fe fe63 	bl	8005d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68b8      	ldr	r0, [r7, #8]
 800708c:	f000 fa46 	bl	800751c <prvAddCurrentTaskToDelayedList>
	}
 8007090:	bf00      	nop
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20003108 	.word	0x20003108

0800709c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <xTaskRemoveFromEventList+0x2a>
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e7fe      	b.n	80070c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3318      	adds	r3, #24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fe96 	bl	8005dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <xTaskRemoveFromEventList+0xac>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11d      	bne.n	8007114 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fe8d 	bl	8005dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <xTaskRemoveFromEventList+0xb0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d903      	bls.n	80070f6 <xTaskRemoveFromEventList+0x5a>
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <xTaskRemoveFromEventList+0xb0>)
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <xTaskRemoveFromEventList+0xb4>)
 8007104:	441a      	add	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3304      	adds	r3, #4
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f7fe fe18 	bl	8005d42 <vListInsertEnd>
 8007112:	e005      	b.n	8007120 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3318      	adds	r3, #24
 8007118:	4619      	mov	r1, r3
 800711a:	480e      	ldr	r0, [pc, #56]	; (8007154 <xTaskRemoveFromEventList+0xb8>)
 800711c:	f7fe fe11 	bl	8005d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <xTaskRemoveFromEventList+0xbc>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	429a      	cmp	r2, r3
 800712c:	d905      	bls.n	800713a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800712e:	2301      	movs	r3, #1
 8007130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <xTaskRemoveFromEventList+0xc0>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e001      	b.n	800713e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20003604 	.word	0x20003604
 800714c:	200035e4 	.word	0x200035e4
 8007150:	2000310c 	.word	0x2000310c
 8007154:	2000359c 	.word	0x2000359c
 8007158:	20003108 	.word	0x20003108
 800715c:	200035f0 	.word	0x200035f0

08007160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <vTaskInternalSetTimeOutState+0x24>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <vTaskInternalSetTimeOutState+0x28>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200035f4 	.word	0x200035f4
 8007188:	200035e0 	.word	0x200035e0

0800718c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <xTaskCheckForTimeOut+0x24>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	e7fe      	b.n	80071ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <xTaskCheckForTimeOut+0x3e>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e7fe      	b.n	80071c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071ca:	f000 fe67 	bl	8007e9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ce:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <xTaskCheckForTimeOut+0xb8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d102      	bne.n	80071ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	e023      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <xTaskCheckForTimeOut+0xbc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d007      	beq.n	800720a <xTaskCheckForTimeOut+0x7e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e015      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d20b      	bcs.n	800722c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff9d 	bl	8007160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e004      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f000 fe5f 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 800723a:	69fb      	ldr	r3, [r7, #28]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200035e0 	.word	0x200035e0
 8007248:	200035f4 	.word	0x200035f4

0800724c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <vTaskMissedYield+0x14>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200035f0 	.word	0x200035f0

08007264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800726c:	f000 f852 	bl	8007314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <prvIdleTask+0x28>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d9f9      	bls.n	800726c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <prvIdleTask+0x2c>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007288:	e7f0      	b.n	800726c <prvIdleTask+0x8>
 800728a:	bf00      	nop
 800728c:	2000310c 	.word	0x2000310c
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e00c      	b.n	80072ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <prvInitialiseTaskLists+0x60>)
 80072ac:	4413      	add	r3, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fd1a 	bl	8005ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b37      	cmp	r3, #55	; 0x37
 80072be:	d9ef      	bls.n	80072a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072c2:	f7fe fd11 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072c8:	f7fe fd0e 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072cc:	480c      	ldr	r0, [pc, #48]	; (8007300 <prvInitialiseTaskLists+0x6c>)
 80072ce:	f7fe fd0b 	bl	8005ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072d2:	480c      	ldr	r0, [pc, #48]	; (8007304 <prvInitialiseTaskLists+0x70>)
 80072d4:	f7fe fd08 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <prvInitialiseTaskLists+0x74>)
 80072da:	f7fe fd05 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <prvInitialiseTaskLists+0x78>)
 80072e0:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <prvInitialiseTaskLists+0x7c>)
 80072e6:	4a05      	ldr	r2, [pc, #20]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000310c 	.word	0x2000310c
 80072f8:	2000356c 	.word	0x2000356c
 80072fc:	20003580 	.word	0x20003580
 8007300:	2000359c 	.word	0x2000359c
 8007304:	200035b0 	.word	0x200035b0
 8007308:	200035c8 	.word	0x200035c8
 800730c:	20003594 	.word	0x20003594
 8007310:	20003598 	.word	0x20003598

08007314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731a:	e019      	b.n	8007350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800731c:	f000 fdbe 	bl	8007e9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <prvCheckTasksWaitingTermination+0x4c>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fd65 	bl	8005dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <prvCheckTasksWaitingTermination+0x50>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3b01      	subs	r3, #1
 8007338:	4a0a      	ldr	r2, [pc, #40]	; (8007364 <prvCheckTasksWaitingTermination+0x50>)
 800733a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007346:	f000 fdd7 	bl	8007ef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f80e 	bl	800736c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e1      	bne.n	800731c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	200035b0 	.word	0x200035b0
 8007364:	200035dc 	.word	0x200035dc
 8007368:	200035c4 	.word	0x200035c4

0800736c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	4618      	mov	r0, r3
 8007384:	f000 ff66 	bl	8008254 <vPortFree>
				vPortFree( pxTCB );
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 ff63 	bl	8008254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800738e:	e017      	b.n	80073c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007396:	2b01      	cmp	r3, #1
 8007398:	d103      	bne.n	80073a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 ff5a 	bl	8008254 <vPortFree>
	}
 80073a0:	e00e      	b.n	80073c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d009      	beq.n	80073c0 <prvDeleteTCB+0x54>
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e7fe      	b.n	80073be <prvDeleteTCB+0x52>
	}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <prvResetNextTaskUnblockTime+0x38>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <prvResetNextTaskUnblockTime+0x3c>)
 80073da:	f04f 32ff 	mov.w	r2, #4294967295
 80073de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073e0:	e008      	b.n	80073f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvResetNextTaskUnblockTime+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvResetNextTaskUnblockTime+0x3c>)
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20003594 	.word	0x20003594
 8007404:	200035fc 	.word	0x200035fc

08007408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <xTaskGetSchedulerState+0x34>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007416:	2301      	movs	r3, #1
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	e008      	b.n	800742e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741c:	4b08      	ldr	r3, [pc, #32]	; (8007440 <xTaskGetSchedulerState+0x38>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007424:	2302      	movs	r3, #2
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e001      	b.n	800742e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800742a:	2300      	movs	r3, #0
 800742c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800742e:	687b      	ldr	r3, [r7, #4]
	}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	200035e8 	.word	0x200035e8
 8007440:	20003604 	.word	0x20003604

08007444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d054      	beq.n	8007504 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800745a:	4b2d      	ldr	r3, [pc, #180]	; (8007510 <xTaskPriorityDisinherit+0xcc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	429a      	cmp	r2, r3
 8007462:	d009      	beq.n	8007478 <xTaskPriorityDisinherit+0x34>
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e7fe      	b.n	8007476 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	2b00      	cmp	r3, #0
 800747e:	d109      	bne.n	8007494 <xTaskPriorityDisinherit+0x50>
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	e7fe      	b.n	8007492 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	1e5a      	subs	r2, r3, #1
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d02c      	beq.n	8007504 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d128      	bne.n	8007504 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fca0 	bl	8005dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <xTaskPriorityDisinherit+0xd0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <xTaskPriorityDisinherit+0xa0>
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a0c      	ldr	r2, [pc, #48]	; (8007514 <xTaskPriorityDisinherit+0xd0>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a09      	ldr	r2, [pc, #36]	; (8007518 <xTaskPriorityDisinherit+0xd4>)
 80074f2:	441a      	add	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fe fc21 	bl	8005d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007504:	697b      	ldr	r3, [r7, #20]
	}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20003108 	.word	0x20003108
 8007514:	200035e4 	.word	0x200035e4
 8007518:	2000310c 	.word	0x2000310c

0800751c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800752c:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fc62 	bl	8005dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d10a      	bne.n	8007556 <prvAddCurrentTaskToDelayedList+0x3a>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007546:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4819      	ldr	r0, [pc, #100]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007550:	f7fe fbf7 	bl	8005d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007554:	e026      	b.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d209      	bcs.n	8007582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe fc05 	bl	8005d8a <vListInsert>
}
 8007580:	e010      	b.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007582:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7fe fbfb 	bl	8005d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007594:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	d202      	bcs.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800759e:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6013      	str	r3, [r2, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200035e0 	.word	0x200035e0
 80075b0:	20003108 	.word	0x20003108
 80075b4:	200035c8 	.word	0x200035c8
 80075b8:	20003598 	.word	0x20003598
 80075bc:	20003594 	.word	0x20003594
 80075c0:	200035fc 	.word	0x200035fc

080075c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075ce:	f000 faff 	bl	8007bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <xTimerCreateTimerTask+0x80>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d021      	beq.n	800761e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075e2:	1d3a      	adds	r2, r7, #4
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fb61 	bl	8005cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	2302      	movs	r3, #2
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	460a      	mov	r2, r1
 8007604:	4910      	ldr	r1, [pc, #64]	; (8007648 <xTimerCreateTimerTask+0x84>)
 8007606:	4811      	ldr	r0, [pc, #68]	; (800764c <xTimerCreateTimerTask+0x88>)
 8007608:	f7ff f8f6 	bl	80067f8 <xTaskCreateStatic>
 800760c:	4602      	mov	r2, r0
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <xTimerCreateTimerTask+0x8c>)
 8007610:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007612:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <xTimerCreateTimerTask+0x8c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800761a:	2301      	movs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <xTimerCreateTimerTask+0x74>
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	e7fe      	b.n	8007636 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007638:	697b      	ldr	r3, [r7, #20]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20003638 	.word	0x20003638
 8007648:	0802d3f8 	.word	0x0802d3f8
 800764c:	08007785 	.word	0x08007785
 8007650:	2000363c 	.word	0x2000363c

08007654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d109      	bne.n	8007680 <xTimerGenericCommand+0x2c>
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	623b      	str	r3, [r7, #32]
 800767e:	e7fe      	b.n	800767e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007680:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <xTimerGenericCommand+0x94>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02a      	beq.n	80076de <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b05      	cmp	r3, #5
 8007698:	dc18      	bgt.n	80076cc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800769a:	f7ff feb5 	bl	8007408 <xTaskGetSchedulerState>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d109      	bne.n	80076b8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076a4:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <xTimerGenericCommand+0x94>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	f107 0110 	add.w	r1, r7, #16
 80076ac:	2300      	movs	r3, #0
 80076ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b0:	f7fe fccc 	bl	800604c <xQueueGenericSend>
 80076b4:	6278      	str	r0, [r7, #36]	; 0x24
 80076b6:	e012      	b.n	80076de <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076b8:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <xTimerGenericCommand+0x94>)
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	f107 0110 	add.w	r1, r7, #16
 80076c0:	2300      	movs	r3, #0
 80076c2:	2200      	movs	r2, #0
 80076c4:	f7fe fcc2 	bl	800604c <xQueueGenericSend>
 80076c8:	6278      	str	r0, [r7, #36]	; 0x24
 80076ca:	e008      	b.n	80076de <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <xTimerGenericCommand+0x94>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	f107 0110 	add.w	r1, r7, #16
 80076d4:	2300      	movs	r3, #0
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	f7fe fdb2 	bl	8006240 <xQueueGenericSendFromISR>
 80076dc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3728      	adds	r7, #40	; 0x28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20003638 	.word	0x20003638

080076ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f6:	4b22      	ldr	r3, [pc, #136]	; (8007780 <prvProcessExpiredTimer+0x94>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fb79 	bl	8005dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d021      	beq.n	800775c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	18d1      	adds	r1, r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	6978      	ldr	r0, [r7, #20]
 8007726:	f000 f8d1 	bl	80078cc <prvInsertTimerInActiveList>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01e      	beq.n	800776e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007730:	2300      	movs	r3, #0
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	2100      	movs	r1, #0
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f7ff ff8a 	bl	8007654 <xTimerGenericCommand>
 8007740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d112      	bne.n	800776e <prvProcessExpiredTimer+0x82>
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e7fe      	b.n	800775a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	6978      	ldr	r0, [r7, #20]
 8007774:	4798      	blx	r3
}
 8007776:	bf00      	nop
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20003630 	.word	0x20003630

08007784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800778c:	f107 0308 	add.w	r3, r7, #8
 8007790:	4618      	mov	r0, r3
 8007792:	f000 f857 	bl	8007844 <prvGetNextExpireTime>
 8007796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f803 	bl	80077a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077a2:	f000 f8d5 	bl	8007950 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077a6:	e7f1      	b.n	800778c <prvTimerTask+0x8>

080077a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077b2:	f7ff fa57 	bl	8006c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f866 	bl	800788c <prvSampleTimeNow>
 80077c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d130      	bne.n	800782a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <prvProcessTimerOrBlockTask+0x3c>
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d806      	bhi.n	80077e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077d6:	f7ff fa53 	bl	8006c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff85 	bl	80076ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077e2:	e024      	b.n	800782e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <prvProcessTimerOrBlockTask+0x90>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <prvProcessTimerOrBlockTask+0x50>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <prvProcessTimerOrBlockTask+0x52>
 80077f8:	2300      	movs	r3, #0
 80077fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077fc:	4b0f      	ldr	r3, [pc, #60]	; (800783c <prvProcessTimerOrBlockTask+0x94>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	f7fe ffc1 	bl	8006790 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800780e:	f7ff fa37 	bl	8006c80 <xTaskResumeAll>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <prvProcessTimerOrBlockTask+0x98>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
}
 8007828:	e001      	b.n	800782e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800782a:	f7ff fa29 	bl	8006c80 <xTaskResumeAll>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20003634 	.word	0x20003634
 800783c:	20003638 	.word	0x20003638
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <prvGetNextExpireTime+0x44>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <prvGetNextExpireTime+0x16>
 8007856:	2201      	movs	r2, #1
 8007858:	e000      	b.n	800785c <prvGetNextExpireTime+0x18>
 800785a:	2200      	movs	r2, #0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <prvGetNextExpireTime+0x44>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e001      	b.n	8007878 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007878:	68fb      	ldr	r3, [r7, #12]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20003630 	.word	0x20003630

0800788c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007894:	f7ff fa90 	bl	8006db8 <xTaskGetTickCount>
 8007898:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <prvSampleTimeNow+0x3c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d205      	bcs.n	80078b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078a4:	f000 f930 	bl	8007b08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078b6:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <prvSampleTimeNow+0x3c>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20003640 	.word	0x20003640

080078cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d812      	bhi.n	8007918 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	1ad2      	subs	r2, r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d302      	bcc.n	8007906 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e01b      	b.n	800793e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007906:	4b10      	ldr	r3, [pc, #64]	; (8007948 <prvInsertTimerInActiveList+0x7c>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3304      	adds	r3, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f7fe fa3a 	bl	8005d8a <vListInsert>
 8007916:	e012      	b.n	800793e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d206      	bcs.n	800792e <prvInsertTimerInActiveList+0x62>
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d302      	bcc.n	800792e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007928:	2301      	movs	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	e007      	b.n	800793e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <prvInsertTimerInActiveList+0x80>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3304      	adds	r3, #4
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f7fe fa26 	bl	8005d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800793e:	697b      	ldr	r3, [r7, #20]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20003634 	.word	0x20003634
 800794c:	20003630 	.word	0x20003630

08007950 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	; 0x38
 8007954:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007956:	e0c6      	b.n	8007ae6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da17      	bge.n	800798e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	3304      	adds	r3, #4
 8007962:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <prvProcessReceivedCommands+0x2e>
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e7fe      	b.n	800797c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007984:	6850      	ldr	r0, [r2, #4]
 8007986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007988:	6892      	ldr	r2, [r2, #8]
 800798a:	4611      	mov	r1, r2
 800798c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f2c0 80a7 	blt.w	8007ae4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fa28 	bl	8005dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ac:	463b      	mov	r3, r7
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff ff6c 	bl	800788c <prvSampleTimeNow>
 80079b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b09      	cmp	r3, #9
 80079ba:	f200 8094 	bhi.w	8007ae6 <prvProcessReceivedCommands+0x196>
 80079be:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <prvProcessReceivedCommands+0x74>)
 80079c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	080079ed 	.word	0x080079ed
 80079d0:	08007a5f 	.word	0x08007a5f
 80079d4:	08007a73 	.word	0x08007a73
 80079d8:	08007abb 	.word	0x08007abb
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079ed 	.word	0x080079ed
 80079e4:	08007a5f 	.word	0x08007a5f
 80079e8:	08007a73 	.word	0x08007a73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	18d1      	adds	r1, r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0c:	f7ff ff5e 	bl	80078cc <prvInsertTimerInActiveList>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d067      	beq.n	8007ae6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d05c      	beq.n	8007ae6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	441a      	add	r2, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3e:	f7ff fe09 	bl	8007654 <xTimerGenericCommand>
 8007a42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14d      	bne.n	8007ae6 <prvProcessReceivedCommands+0x196>
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e7fe      	b.n	8007a5c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a64:	f023 0301 	bic.w	r3, r3, #1
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007a70:	e039      	b.n	8007ae6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <prvProcessReceivedCommands+0x156>
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	e7fe      	b.n	8007aa4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	18d1      	adds	r1, r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab4:	f7ff ff0a 	bl	80078cc <prvInsertTimerInActiveList>
					break;
 8007ab8:	e015      	b.n	8007ae6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aca:	f000 fbc3 	bl	8008254 <vPortFree>
 8007ace:	e00a      	b.n	8007ae6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ae2:	e000      	b.n	8007ae6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ae4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <prvProcessReceivedCommands+0x1b4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1d39      	adds	r1, r7, #4
 8007aec:	2200      	movs	r2, #0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fc3a 	bl	8006368 <xQueueReceive>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f47f af2e 	bne.w	8007958 <prvProcessReceivedCommands+0x8>
	}
}
 8007afc:	bf00      	nop
 8007afe:	3730      	adds	r7, #48	; 0x30
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20003638 	.word	0x20003638

08007b08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b0e:	e047      	b.n	8007ba0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b10:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe f967 	bl	8005dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d02d      	beq.n	8007ba0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90e      	bls.n	8007b74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe f90c 	bl	8005d8a <vListInsert>
 8007b72:	e015      	b.n	8007ba0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b74:	2300      	movs	r3, #0
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fd68 	bl	8007654 <xTimerGenericCommand>
 8007b84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <prvSwitchTimerLists+0x98>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	603b      	str	r3, [r7, #0]
 8007b9e:	e7fe      	b.n	8007b9e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1b2      	bne.n	8007b10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <prvSwitchTimerLists+0xc4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a04      	ldr	r2, [pc, #16]	; (8007bc8 <prvSwitchTimerLists+0xc0>)
 8007bb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bb8:	4a04      	ldr	r2, [pc, #16]	; (8007bcc <prvSwitchTimerLists+0xc4>)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6013      	str	r3, [r2, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20003630 	.word	0x20003630
 8007bcc:	20003634 	.word	0x20003634

08007bd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007bd6:	f000 f961 	bl	8007e9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007bda:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <prvCheckForValidListAndQueue+0x60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d120      	bne.n	8007c24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007be2:	4814      	ldr	r0, [pc, #80]	; (8007c34 <prvCheckForValidListAndQueue+0x64>)
 8007be4:	f7fe f880 	bl	8005ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007be8:	4813      	ldr	r0, [pc, #76]	; (8007c38 <prvCheckForValidListAndQueue+0x68>)
 8007bea:	f7fe f87d 	bl	8005ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <prvCheckForValidListAndQueue+0x6c>)
 8007bf0:	4a10      	ldr	r2, [pc, #64]	; (8007c34 <prvCheckForValidListAndQueue+0x64>)
 8007bf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <prvCheckForValidListAndQueue+0x70>)
 8007bf6:	4a10      	ldr	r2, [pc, #64]	; (8007c38 <prvCheckForValidListAndQueue+0x68>)
 8007bf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <prvCheckForValidListAndQueue+0x74>)
 8007c00:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <prvCheckForValidListAndQueue+0x78>)
 8007c02:	2110      	movs	r1, #16
 8007c04:	200a      	movs	r0, #10
 8007c06:	f7fe f98b 	bl	8005f20 <xQueueGenericCreateStatic>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <prvCheckForValidListAndQueue+0x60>)
 8007c0e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <prvCheckForValidListAndQueue+0x60>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <prvCheckForValidListAndQueue+0x60>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	490b      	ldr	r1, [pc, #44]	; (8007c4c <prvCheckForValidListAndQueue+0x7c>)
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fd8e 	bl	8006740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c24:	f000 f968 	bl	8007ef8 <vPortExitCritical>
}
 8007c28:	bf00      	nop
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20003638 	.word	0x20003638
 8007c34:	20003608 	.word	0x20003608
 8007c38:	2000361c 	.word	0x2000361c
 8007c3c:	20003630 	.word	0x20003630
 8007c40:	20003634 	.word	0x20003634
 8007c44:	200036e4 	.word	0x200036e4
 8007c48:	20003644 	.word	0x20003644
 8007c4c:	0802d400 	.word	0x0802d400

08007c50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3b04      	subs	r3, #4
 8007c60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f023 0201 	bic.w	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c80:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <pxPortInitialiseStack+0x64>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3b14      	subs	r3, #20
 8007c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f06f 0202 	mvn.w	r2, #2
 8007c9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3b20      	subs	r3, #32
 8007ca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	08007cb9 	.word	0x08007cb9

08007cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <prvTaskExitError+0x50>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d009      	beq.n	8007ce0 <prvTaskExitError+0x28>
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e7fe      	b.n	8007cde <prvTaskExitError+0x26>
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cf2:	bf00      	nop
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0fc      	beq.n	8007cf4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	2000000c 	.word	0x2000000c
 8007d0c:	00000000 	.word	0x00000000

08007d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <pxCurrentTCBConst2>)
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	f380 8809 	msr	PSP, r0
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	4770      	bx	lr
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst2>:
 8007d30:	20003108 	.word	0x20003108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <prvPortStartFirstTask+0x24>)
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f380 8808 	msr	MSP, r0
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8814 	msr	CONTROL, r0
 8007d4a:	b662      	cpsie	i
 8007d4c:	b661      	cpsie	f
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	df00      	svc	0
 8007d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d5a:	bf00      	nop
 8007d5c:	e000ed08 	.word	0xe000ed08

08007d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d66:	4b44      	ldr	r3, [pc, #272]	; (8007e78 <xPortStartScheduler+0x118>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a44      	ldr	r2, [pc, #272]	; (8007e7c <xPortStartScheduler+0x11c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <xPortStartScheduler+0x24>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	e7fe      	b.n	8007d82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d84:	4b3c      	ldr	r3, [pc, #240]	; (8007e78 <xPortStartScheduler+0x118>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a3d      	ldr	r2, [pc, #244]	; (8007e80 <xPortStartScheduler+0x120>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d109      	bne.n	8007da2 <xPortStartScheduler+0x42>
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e7fe      	b.n	8007da0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007da2:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <xPortStartScheduler+0x124>)
 8007da4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b30      	ldr	r3, [pc, #192]	; (8007e88 <xPortStartScheduler+0x128>)
 8007dc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dca:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dcc:	2207      	movs	r2, #7
 8007dce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dd0:	e009      	b.n	8007de6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007dd2:	4b2e      	ldr	r3, [pc, #184]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	4a2c      	ldr	r2, [pc, #176]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d0ef      	beq.n	8007dd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007df2:	4b26      	ldr	r3, [pc, #152]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1c3 0307 	rsb	r3, r3, #7
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d009      	beq.n	8007e12 <xPortStartScheduler+0xb2>
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60bb      	str	r3, [r7, #8]
 8007e10:	e7fe      	b.n	8007e10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e24:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e48:	f000 f8d6 	bl	8007ff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e4c:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <xPortStartScheduler+0x134>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e52:	f000 f8f5 	bl	8008040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <xPortStartScheduler+0x138>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <xPortStartScheduler+0x138>)
 8007e5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e62:	f7ff ff69 	bl	8007d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e66:	f7ff f86f 	bl	8006f48 <vTaskSwitchContext>
	prvTaskExitError();
 8007e6a:	f7ff ff25 	bl	8007cb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed00 	.word	0xe000ed00
 8007e7c:	410fc271 	.word	0x410fc271
 8007e80:	410fc270 	.word	0x410fc270
 8007e84:	e000e400 	.word	0xe000e400
 8007e88:	20003734 	.word	0x20003734
 8007e8c:	20003738 	.word	0x20003738
 8007e90:	e000ed20 	.word	0xe000ed20
 8007e94:	2000000c 	.word	0x2000000c
 8007e98:	e000ef34 	.word	0xe000ef34

08007e9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007ebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10e      	bne.n	8007ee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <vPortEnterCritical+0x58>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <vPortEnterCritical+0x48>
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	e7fe      	b.n	8007ee2 <vPortEnterCritical+0x46>
	}
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	2000000c 	.word	0x2000000c
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <vPortExitCritical+0x22>
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	e7fe      	b.n	8007f18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <vPortExitCritical+0x3e>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	2000000c 	.word	0x2000000c
	...

08007f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f50:	f3ef 8009 	mrs	r0, PSP
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <pxCurrentTCBConst>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	f01e 0f10 	tst.w	lr, #16
 8007f60:	bf08      	it	eq
 8007f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	6010      	str	r0, [r2, #0]
 8007f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f74:	f380 8811 	msr	BASEPRI, r0
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f7fe ffe2 	bl	8006f48 <vTaskSwitchContext>
 8007f84:	f04f 0000 	mov.w	r0, #0
 8007f88:	f380 8811 	msr	BASEPRI, r0
 8007f8c:	bc09      	pop	{r0, r3}
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f96:	f01e 0f10 	tst.w	lr, #16
 8007f9a:	bf08      	it	eq
 8007f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fa0:	f380 8809 	msr	PSP, r0
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst>:
 8007fb0:	20003108 	.word	0x20003108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fd0:	f7fe ff02 	bl	8006dd8 <xTaskIncrementTick>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <SysTick_Handler+0x3c>)
 8007fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <vPortSetupTimerInterrupt+0x34>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <vPortSetupTimerInterrupt+0x38>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <vPortSetupTimerInterrupt+0x3c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a0a      	ldr	r2, [pc, #40]	; (8008038 <vPortSetupTimerInterrupt+0x40>)
 800800e:	fba2 2303 	umull	r2, r3, r2, r3
 8008012:	099b      	lsrs	r3, r3, #6
 8008014:	4a09      	ldr	r2, [pc, #36]	; (800803c <vPortSetupTimerInterrupt+0x44>)
 8008016:	3b01      	subs	r3, #1
 8008018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800801a:	4b04      	ldr	r3, [pc, #16]	; (800802c <vPortSetupTimerInterrupt+0x34>)
 800801c:	2207      	movs	r2, #7
 800801e:	601a      	str	r2, [r3, #0]
}
 8008020:	bf00      	nop
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	e000e010 	.word	0xe000e010
 8008030:	e000e018 	.word	0xe000e018
 8008034:	20000000 	.word	0x20000000
 8008038:	10624dd3 	.word	0x10624dd3
 800803c:	e000e014 	.word	0xe000e014

08008040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008050 <vPortEnableVFP+0x10>
 8008044:	6801      	ldr	r1, [r0, #0]
 8008046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800804a:	6001      	str	r1, [r0, #0]
 800804c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800804e:	bf00      	nop
 8008050:	e000ed88 	.word	0xe000ed88

08008054 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800805a:	f3ef 8305 	mrs	r3, IPSR
 800805e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b0f      	cmp	r3, #15
 8008064:	d913      	bls.n	800808e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <vPortValidateInterruptPriority+0x6c>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008070:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <vPortValidateInterruptPriority+0x70>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	7afa      	ldrb	r2, [r7, #11]
 8008076:	429a      	cmp	r2, r3
 8008078:	d209      	bcs.n	800808e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e7fe      	b.n	800808c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800808e:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <vPortValidateInterruptPriority+0x74>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008096:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <vPortValidateInterruptPriority+0x78>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d909      	bls.n	80080b2 <vPortValidateInterruptPriority+0x5e>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	e7fe      	b.n	80080b0 <vPortValidateInterruptPriority+0x5c>
	}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e3f0 	.word	0xe000e3f0
 80080c4:	20003734 	.word	0x20003734
 80080c8:	e000ed0c 	.word	0xe000ed0c
 80080cc:	20003738 	.word	0x20003738

080080d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080dc:	f7fe fdc2 	bl	8006c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080e0:	4b57      	ldr	r3, [pc, #348]	; (8008240 <pvPortMalloc+0x170>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e8:	f000 f90c 	bl	8008304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ec:	4b55      	ldr	r3, [pc, #340]	; (8008244 <pvPortMalloc+0x174>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 808c 	bne.w	8008212 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01c      	beq.n	800813a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d013      	beq.n	800813a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	3308      	adds	r3, #8
 800811a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <pvPortMalloc+0x6a>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e7fe      	b.n	8008138 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d068      	beq.n	8008212 <pvPortMalloc+0x142>
 8008140:	4b41      	ldr	r3, [pc, #260]	; (8008248 <pvPortMalloc+0x178>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d863      	bhi.n	8008212 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800814a:	4b40      	ldr	r3, [pc, #256]	; (800824c <pvPortMalloc+0x17c>)
 800814c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800814e:	4b3f      	ldr	r3, [pc, #252]	; (800824c <pvPortMalloc+0x17c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008154:	e004      	b.n	8008160 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d903      	bls.n	8008172 <pvPortMalloc+0xa2>
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f1      	bne.n	8008156 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008172:	4b33      	ldr	r3, [pc, #204]	; (8008240 <pvPortMalloc+0x170>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	d04a      	beq.n	8008212 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	4413      	add	r3, r2
 8008184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1ad2      	subs	r2, r2, r3
 8008196:	2308      	movs	r3, #8
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	429a      	cmp	r2, r3
 800819c:	d91e      	bls.n	80081dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4413      	add	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <pvPortMalloc+0xf4>
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	e7fe      	b.n	80081c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081d6:	69b8      	ldr	r0, [r7, #24]
 80081d8:	f000 f8f6 	bl	80083c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <pvPortMalloc+0x178>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <pvPortMalloc+0x178>)
 80081e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ea:	4b17      	ldr	r3, [pc, #92]	; (8008248 <pvPortMalloc+0x178>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b18      	ldr	r3, [pc, #96]	; (8008250 <pvPortMalloc+0x180>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d203      	bcs.n	80081fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <pvPortMalloc+0x178>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <pvPortMalloc+0x180>)
 80081fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <pvPortMalloc+0x174>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	431a      	orrs	r2, r3
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008212:	f7fe fd35 	bl	8006c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <pvPortMalloc+0x164>
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0x162>
	return pvReturn;
 8008234:	69fb      	ldr	r3, [r7, #28]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20017744 	.word	0x20017744
 8008244:	20017750 	.word	0x20017750
 8008248:	20017748 	.word	0x20017748
 800824c:	2001773c 	.word	0x2001773c
 8008250:	2001774c 	.word	0x2001774c

08008254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d046      	beq.n	80082f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008266:	2308      	movs	r3, #8
 8008268:	425b      	negs	r3, r3
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b20      	ldr	r3, [pc, #128]	; (80082fc <vPortFree+0xa8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <vPortFree+0x42>
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e7fe      	b.n	8008294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <vPortFree+0x5e>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	e7fe      	b.n	80082b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <vPortFree+0xa8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d019      	beq.n	80082f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d115      	bne.n	80082f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <vPortFree+0xa8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d8:	f7fe fcc4 	bl	8006c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <vPortFree+0xac>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	4a06      	ldr	r2, [pc, #24]	; (8008300 <vPortFree+0xac>)
 80082e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f000 f86c 	bl	80083c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082f0:	f7fe fcc6 	bl	8006c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f4:	bf00      	nop
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20017750 	.word	0x20017750
 8008300:	20017748 	.word	0x20017748

08008304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800830a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 800830e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <prvHeapInit+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3307      	adds	r3, #7
 8008322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <prvHeapInit+0xac>)
 8008334:	4413      	add	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800833c:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <prvHeapInit+0xb0>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <prvHeapInit+0xb0>)
 8008344:	2200      	movs	r2, #0
 8008346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008350:	2208      	movs	r2, #8
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <prvHeapInit+0xb4>)
 8008364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <prvHeapInit+0xb4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <prvHeapInit+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvHeapInit+0xb4>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <prvHeapInit+0xb8>)
 8008392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <prvHeapInit+0xbc>)
 800839a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <prvHeapInit+0xc0>)
 800839e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	2000373c 	.word	0x2000373c
 80083b4:	2001773c 	.word	0x2001773c
 80083b8:	20017744 	.word	0x20017744
 80083bc:	2001774c 	.word	0x2001774c
 80083c0:	20017748 	.word	0x20017748
 80083c4:	20017750 	.word	0x20017750

080083c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <prvInsertBlockIntoFreeList+0xac>)
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <prvInsertBlockIntoFreeList+0x14>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d8f7      	bhi.n	80083d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d108      	bne.n	800840a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	441a      	add	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d118      	bne.n	8008450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d00d      	beq.n	8008446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	441a      	add	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e008      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e003      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d002      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	2001773c 	.word	0x2001773c
 8008478:	20017744 	.word	0x20017744

0800847c <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <lv_disp_get_scr_act+0x14>
 800848a:	f00d fb2b 	bl	8015ae4 <lv_disp_get_default>
 800848e:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	e001      	b.n	800849e <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <lv_disp_get_layer_top+0x14>
 80084b4:	f00d fb16 	bl	8015ae4 <lv_disp_get_default>
 80084b8:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e001      	b.n	80084c8 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <lv_disp_get_layer_sys+0x14>
 80084de:	f00d fb01 	bl	8015ae4 <lv_disp_get_default>
 80084e2:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e001      	b.n	80084f2 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8008500:	2160      	movs	r1, #96	; 0x60
 8008502:	4802      	ldr	r0, [pc, #8]	; (800850c <lv_group_init+0x10>)
 8008504:	f00e fa00 	bl	8016908 <lv_ll_init>
}
 8008508:	bf00      	nop
 800850a:	bd80      	pop	{r7, pc}
 800850c:	2001bbc0 	.word	0x2001bbc0

08008510 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d040      	beq.n	80085a2 <lv_group_add_obj+0x92>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    LV_LL_READ(group->obj_ll, obj_i)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4618      	mov	r0, r3
 8008524:	f00e fb72 	bl	8016c0c <lv_ll_get_head>
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	e00a      	b.n	8008542 <lv_group_add_obj+0x32>
    {
        if((*obj_i) == obj) {
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d037      	beq.n	80085a6 <lv_group_add_obj+0x96>
    LV_LL_READ(group->obj_ll, obj_i)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68f9      	ldr	r1, [r7, #12]
 800853a:	4618      	mov	r0, r3
 800853c:	f00e fb8c 	bl	8016c58 <lv_ll_get_next>
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f1      	bne.n	800852c <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8008550:	6838      	ldr	r0, [r7, #0]
 8008552:	f002 f952 	bl	800a7fa <lv_obj_is_focused>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f953 	bl	800880c <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4618      	mov	r0, r3
 8008570:	f00e fa65 	bl	8016a3e <lv_ll_ins_tail>
 8008574:	60b8      	str	r0, [r7, #8]
    lv_mem_assert(next);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d100      	bne.n	800857e <lv_group_add_obj+0x6e>
 800857c:	e7fe      	b.n	800857c <lv_group_add_obj+0x6c>
    if(next == NULL) return;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d012      	beq.n	80085aa <lv_group_add_obj+0x9a>
    *next = obj;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	f00e fb3d 	bl	8016c0c <lv_ll_get_head>
 8008592:	4602      	mov	r2, r0
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <lv_group_add_obj+0x9c>
        lv_group_refocus(group);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f936 	bl	800880c <lv_group_refocus>
 80085a0:	e004      	b.n	80085ac <lv_group_add_obj+0x9c>
    if(group == NULL) return;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <lv_group_add_obj+0x9c>
            return;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <lv_group_add_obj+0x9c>
    if(next == NULL) return;
 80085aa:	bf00      	nop
    }
}
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <lv_group_remove_obj>:
/**
 * Remove an object from its group
 * @param obj pointer to an object to remove
 */
void lv_group_remove_obj(lv_obj_t * obj)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
    lv_group_t * g = obj->group_p;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	60bb      	str	r3, [r7, #8]
    if(g == NULL) return;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d053      	beq.n	800866e <lv_group_remove_obj+0xbc>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d051      	beq.n	8008672 <lv_group_remove_obj+0xc0>

    /*Focus on the next object*/
    if(*g->obj_focus == obj) {
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d11f      	bne.n	800861a <lv_group_remove_obj+0x68>
        /*If this is the only object in the group then focus to nothing.*/
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f00e fb15 	bl	8016c0c <lv_ll_get_head>
 80085e2:	4602      	mov	r2, r0
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d113      	bne.n	8008614 <lv_group_remove_obj+0x62>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f00e fb1f 	bl	8016c32 <lv_ll_get_tail>
 80085f4:	4602      	mov	r2, r0
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d10a      	bne.n	8008614 <lv_group_remove_obj+0x62>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	68d2      	ldr	r2, [r2, #12]
 800860a:	6810      	ldr	r0, [r2, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	2110      	movs	r1, #16
 8008610:	4798      	blx	r3
 8008612:	e002      	b.n	800861a <lv_group_remove_obj+0x68>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 8008614:	68b8      	ldr	r0, [r7, #8]
 8008616:	f000 f8f9 	bl	800880c <lv_group_refocus>
    }

    /* If the focuses object is still the same then it was the only object in the group but it will
     * be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     * zero objects*/
    if(*g->obj_focus == obj) {
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d102      	bne.n	800862c <lv_group_remove_obj+0x7a>
        g->obj_focus = NULL;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group */
    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f00e faec 	bl	8016c0c <lv_ll_get_head>
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	e016      	b.n	8008666 <lv_group_remove_obj+0xb4>
    {
        if(*i == obj) {
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d10b      	bne.n	800865a <lv_group_remove_obj+0xa8>
            lv_ll_rem(&g->obj_ll, i);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	68f9      	ldr	r1, [r7, #12]
 8008646:	4618      	mov	r0, r3
 8008648:	f00e fa32 	bl	8016ab0 <lv_ll_rem>
            lv_mem_free(i);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f00e fc9d 	bl	8016f8c <lv_mem_free>
            obj->group_p = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8008658:	e00c      	b.n	8008674 <lv_group_remove_obj+0xc2>
    LV_LL_READ(g->obj_ll, i)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	68f9      	ldr	r1, [r7, #12]
 800865e:	4618      	mov	r0, r3
 8008660:	f00e fafa 	bl	8016c58 <lv_ll_get_next>
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e5      	bne.n	8008638 <lv_group_remove_obj+0x86>
 800866c:	e002      	b.n	8008674 <lv_group_remove_obj+0xc2>
    if(g == NULL) return;
 800866e:	bf00      	nop
 8008670:	e000      	b.n	8008674 <lv_group_remove_obj+0xc2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 8008672:	bf00      	nop
        }
    }
}
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_head, lv_ll_get_next);
 8008684:	4a04      	ldr	r2, [pc, #16]	; (8008698 <lv_group_focus_next+0x1c>)
 8008686:	4905      	ldr	r1, [pc, #20]	; (800869c <lv_group_focus_next+0x20>)
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8f7 	bl	800887c <focus_next_core>
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	08016c59 	.word	0x08016c59
 800869c:	08016c0d 	.word	0x08016c0d

080086a0 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_tail, lv_ll_get_prev);
 80086a8:	4a04      	ldr	r2, [pc, #16]	; (80086bc <lv_group_focus_prev+0x1c>)
 80086aa:	4905      	ldr	r1, [pc, #20]	; (80086c0 <lv_group_focus_prev+0x20>)
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f8e5 	bl	800887c <focus_next_core>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	08016c8d 	.word	0x08016c8d
 80086c0:	08016c33 	.word	0x08016c33

080086c4 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
    uint8_t en_val = edit ? 1 : 0;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d028      	beq.n	800873a <lv_group_set_editing+0x76>

    group->editing     = en_val;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	b2d9      	uxtb	r1, r3
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80086f6:	f361 0341 	bfi	r3, r1, #1, #1
 80086fa:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f851 	bl	80087a6 <lv_group_get_focused>
 8008704:	6138      	str	r0, [r7, #16]

    if(focused) {
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d012      	beq.n	8008732 <lv_group_set_editing+0x6e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	2200      	movs	r2, #0
 8008712:	210f      	movs	r1, #15
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	210c      	movs	r1, #12
 8008722:	4618      	mov	r0, r3
 8008724:	f001 fdd7 	bl	800a2d6 <lv_event_send>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d105      	bne.n	800873e <lv_group_set_editing+0x7a>
    }

    lv_obj_invalidate(focused);
 8008732:	6938      	ldr	r0, [r7, #16]
 8008734:	f000 fe1d 	bl	8009372 <lv_obj_invalidate>
 8008738:	e002      	b.n	8008740 <lv_group_set_editing+0x7c>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <lv_group_set_editing+0x7c>
        if(res != LV_RES_OK) return;
 800873e:	bf00      	nop
}
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <lv_group_mod_style>:
 * @param group pointer to group
 * @param style pointer to a style to modify
 * @return a copy of the input style but modified with the 'style_mod' function
 */
lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
    /*Load the current style. It will be modified by the callback*/
    lv_style_copy(&group->style_tmp, style);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	331c      	adds	r3, #28
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f003 faa6 	bl	800bca8 <lv_style_copy>

    if(group->editing) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <lv_group_mod_style+0x3e>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d012      	beq.n	800879a <lv_group_mod_style+0x54>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	321c      	adds	r2, #28
 800877c:	4611      	mov	r1, r2
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	e00a      	b.n	800879a <lv_group_mod_style+0x54>
    } else {
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <lv_group_mod_style+0x54>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	321c      	adds	r2, #28
 8008794:	4611      	mov	r1, r2
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
    }
    return &group->style_tmp;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	331c      	adds	r3, #28
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <lv_group_get_focused+0x12>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e008      	b.n	80087ca <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <lv_group_get_focused+0x1e>
 80087c0:	2300      	movs	r3, #0
 80087c2:	e002      	b.n	80087ca <lv_group_get_focused+0x24>

    return *group->obj_focus;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <lv_group_get_editing+0x12>
 80087e4:	2300      	movs	r3, #0
 80087e6:	e00b      	b.n	8008800 <lv_group_get_editing+0x2a>
    return group->editing ? true : false;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800881a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8008828:	f043 0310 	orr.w	r3, r3, #16
 800882c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <lv_group_refocus+0x3c>
        lv_group_focus_next(g);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff1b 	bl	800867c <lv_group_focus_next>
 8008846:	e00a      	b.n	800885e <lv_group_refocus+0x52>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <lv_group_refocus+0x52>
        lv_group_focus_prev(g);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff21 	bl	80086a0 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	b2d9      	uxtb	r1, r3
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 800886c:	f361 1304 	bfi	r3, r1, #4, #1
 8008870:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <focus_next_core>:
    }
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	f040 80a6 	bne.w	80089e6 <focus_next_core+0x16a>

    lv_obj_t ** obj_next     = group->obj_focus;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 80088a4:	2301      	movs	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d11b      	bne.n	80088ea <focus_next_core+0x6e>
            if(group->wrap || obj_sentinel == NULL) {
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <focus_next_core+0x4e>
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f040 8090 	bne.w	80089ea <focus_next_core+0x16e>
                if(!can_begin) return;
 80088ca:	7dbb      	ldrb	r3, [r7, #22]
 80088cc:	f083 0301 	eor.w	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 808b 	bne.w	80089ee <focus_next_core+0x172>
                obj_next  = begin(&group->obj_ll);
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <focus_next_core+0x7e>
            obj_sentinel = obj_next;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d07b      	beq.n	80089f2 <focus_next_core+0x176>
        }

        if(can_move) {
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d009      	beq.n	8008914 <focus_next_core+0x98>
            obj_next = move(&group->obj_ll, obj_next);
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69f9      	ldr	r1, [r7, #28]
 8008906:	4610      	mov	r0, r2
 8008908:	4798      	blx	r3
 800890a:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	429a      	cmp	r2, r3
 8008912:	d070      	beq.n	80089f6 <focus_next_core+0x17a>
        }

        can_move = true;
 8008914:	2301      	movs	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <focus_next_core+0xba>

        /*Hidden objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f001 feee 	bl	800a704 <lv_obj_get_hidden>
 8008928:	4603      	mov	r3, r0
 800892a:	f083 0301 	eor.w	r3, r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <focus_next_core+0xbe>
 8008934:	e7ba      	b.n	80088ac <focus_next_core+0x30>
        if(obj_next == NULL) continue;
 8008936:	bf00      	nop
        if(obj_next == NULL) {
 8008938:	e7b8      	b.n	80088ac <focus_next_core+0x30>
        if(!lv_obj_get_hidden(*obj_next)) break;
 800893a:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	429a      	cmp	r2, r3
 8008944:	d059      	beq.n	80089fa <focus_next_core+0x17e>

    if(group->obj_focus) {
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01c      	beq.n	8008988 <focus_next_core+0x10c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	68d2      	ldr	r2, [r2, #12]
 800895a:	6810      	ldr	r0, [r2, #0]
 800895c:	2200      	movs	r2, #0
 800895e:	2110      	movs	r1, #16
 8008960:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	210d      	movs	r1, #13
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fcb2 	bl	800a2d6 <lv_event_send>
 8008972:	4603      	mov	r3, r0
 8008974:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8008976:	7d7b      	ldrb	r3, [r7, #21]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d140      	bne.n	80089fe <focus_next_core+0x182>
        lv_obj_invalidate(*group->obj_focus);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fcf5 	bl	8009372 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	68d2      	ldr	r2, [r2, #12]
 800899a:	6810      	ldr	r0, [r2, #0]
 800899c:	2200      	movs	r2, #0
 800899e:	210f      	movs	r1, #15
 80089a0:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2200      	movs	r2, #0
 80089aa:	210c      	movs	r1, #12
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fc92 	bl	800a2d6 <lv_event_send>
 80089b2:	4603      	mov	r3, r0
 80089b4:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 80089b6:	7d3b      	ldrb	r3, [r7, #20]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d122      	bne.n	8008a02 <focus_next_core+0x186>

    /*If the object or its parent has `top == true` bring it to the foregorund*/
    obj_to_foreground(*group->obj_focus);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f821 	bl	8008a0a <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fccf 	bl	8009372 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d013      	beq.n	8008a04 <focus_next_core+0x188>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	4798      	blx	r3
 80089e4:	e00e      	b.n	8008a04 <focus_next_core+0x188>
    if(group->frozen) return;
 80089e6:	bf00      	nop
 80089e8:	e00c      	b.n	8008a04 <focus_next_core+0x188>
                return;
 80089ea:	bf00      	nop
 80089ec:	e00a      	b.n	8008a04 <focus_next_core+0x188>
                if(!can_begin) return;
 80089ee:	bf00      	nop
 80089f0:	e008      	b.n	8008a04 <focus_next_core+0x188>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80089f2:	bf00      	nop
 80089f4:	e006      	b.n	8008a04 <focus_next_core+0x188>
            if(obj_next == obj_sentinel) return;
 80089f6:	bf00      	nop
 80089f8:	e004      	b.n	8008a04 <focus_next_core+0x188>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <focus_next_core+0x188>
        if(res != LV_RES_OK) return;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <focus_next_core+0x188>
    if(res != LV_RES_OK) return;
 8008a02:	bf00      	nop
}
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 8008a1a:	e00d      	b.n	8008a38 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <obj_to_foreground+0x26>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f001 fd75 	bl	800a520 <lv_obj_get_parent>
 8008a36:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1ee      	bne.n	8008a1c <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8008a44:	68b8      	ldr	r0, [r7, #8]
 8008a46:	f000 fd69 	bl	800951c <lv_obj_move_foreground>
    }
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 8008a56:	2000      	movs	r0, #0
 8008a58:	f000 f81f 	bl	8008a9a <lv_indev_reset>
}
 8008a5c:	bf00      	nop
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
    return indev_act;
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <lv_indev_get_act+0x14>)
 8008a66:	681b      	ldr	r3, [r3, #0]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20017754 	.word	0x20017754

08008a78 <lv_indev_get_type>:
 * Get the type of an input device
 * @param indev pointer to an input device
 * @return the type of the input device from `lv_hal_indev_type_t` (`LV_INDEV_TYPE_...`)
 */
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <lv_indev_get_type+0x12>
 8008a86:	2300      	movs	r3, #0
 8008a88:	e001      	b.n	8008a8e <lv_indev_get_type+0x16>

    return indev->driver.type;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
    if(indev)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d007      	beq.n	8008ab8 <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8008aae:	f043 0302 	orr.w	r3, r3, #2
 8008ab2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 8008ab6:	e012      	b.n	8008ade <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8008ab8:	2000      	movs	r0, #0
 8008aba:	f00d f8d1 	bl	8015c60 <lv_indev_get_next>
 8008abe:	60f8      	str	r0, [r7, #12]
        while(i) {
 8008ac0:	e00a      	b.n	8008ad8 <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i = lv_indev_get_next(i);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f00d f8c5 	bl	8015c60 <lv_indev_get_next>
 8008ad6:	60f8      	str	r0, [r7, #12]
        while(i) {
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f1      	bne.n	8008ac2 <lv_indev_reset+0x28>
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <lv_indev_reset_long_press>:
/**
 * Reset the long press state of an input device
 * @param indev pointer to an input device
 */
void lv_indev_reset_long_press(lv_indev_t * indev)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
    indev->proc.long_pr_sent         = 0;
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8008af4:	f36f 0300 	bfc	r3, #0, #1
 8008af8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8008afc:	f00d f8e0 	bl	8015cc0 <lv_tick_get>
 8008b00:	4602      	mov	r2, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	64da      	str	r2, [r3, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8008b06:	f00d f8db 	bl	8015cc0 <lv_tick_get>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <lv_indev_get_point>:
 * Get the last point of an input device (for LV_INDEV_TYPE_POINTER and LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d00c      	beq.n	8008b44 <lv_indev_get_point+0x2c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d008      	beq.n	8008b44 <lv_indev_get_point+0x2c>
        point->x = -1;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b38:	801a      	strh	r2, [r3, #0]
        point->y = -1;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b40:	805a      	strh	r2, [r3, #2]
 8008b42:	e009      	b.n	8008b58 <lv_indev_get_point+0x40>
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	805a      	strh	r2, [r3, #2]
    }
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <lv_indev_is_dragging>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <lv_indev_is_dragging+0x12>
 8008b72:	2300      	movs	r3, #0
 8008b74:	e014      	b.n	8008ba0 <lv_indev_is_dragging+0x3c>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d005      	beq.n	8008b8a <lv_indev_is_dragging+0x26>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d001      	beq.n	8008b8a <lv_indev_is_dragging+0x26>
 8008b86:	2300      	movs	r3, #0
 8008b88:	e00a      	b.n	8008ba0 <lv_indev_is_dragging+0x3c>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bf14      	ite	ne
 8008b9a:	2301      	movne	r3, #1
 8008b9c:	2300      	moveq	r3, #0
 8008b9e:	b2db      	uxtb	r3, r3
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <lv_indev_get_vect>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
    if(indev == NULL) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <lv_indev_get_vect+0x1e>
        point->x = 0;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	805a      	strh	r2, [r3, #2]
        return;
 8008bc8:	e018      	b.n	8008bfc <lv_indev_get_vect+0x50>
    }

    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d00a      	beq.n	8008be8 <lv_indev_get_vect+0x3c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d006      	beq.n	8008be8 <lv_indev_get_vect+0x3c>
        point->x = 0;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	805a      	strh	r2, [r3, #2]
 8008be6:	e009      	b.n	8008bfc <lv_indev_get_vect+0x50>
    } else {
        point->x = indev->proc.types.pointer.vect.x;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	805a      	strh	r2, [r3, #2]
    }
}
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <lv_indev_get_obj_act>:
/**
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
    return indev_obj_act;
 8008c0c:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <lv_indev_get_obj_act+0x14>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20017758 	.word	0x20017758

08008c20 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f022 f9ee 	bl	802b010 <memcpy>
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3301      	adds	r3, #1
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	b21b      	sxth	r3, r3
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3301      	adds	r3, #1
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	b21b      	sxth	r3, r3
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8008c9c:	4b13      	ldr	r3, [pc, #76]	; (8008cec <lv_init+0x54>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d121      	bne.n	8008ce8 <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8008ca4:	f00e f92a 	bl	8016efc <lv_mem_init>
    lv_task_core_init();
 8008ca8:	f00e f9f4 	bl	8017094 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8008cac:	f00d fca8 	bl	8016600 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8008cb0:	f00d f83c 	bl	8015d2c <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8008cb4:	f7ff fc22 	bl	80084fc <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8008cb8:	f002 fdaa 	bl	800b810 <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8008cbc:	f001 ffd6 	bl	800ac6c <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8008cc0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8008cc4:	480a      	ldr	r0, [pc, #40]	; (8008cf0 <lv_init+0x58>)
 8008cc6:	f00d fe1f 	bl	8016908 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8008cca:	2160      	movs	r1, #96	; 0x60
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <lv_init+0x5c>)
 8008cce:	f00d fe1b 	bl	8016908 <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8008cd2:	f7ff febe 	bl	8008a52 <lv_indev_init>

    lv_img_decoder_init();
 8008cd6:	f00b fb0b 	bl	80142f0 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8008cda:	2001      	movs	r0, #1
 8008cdc:	f00b fa1e 	bl	801411c <lv_img_cache_set_size>

    lv_initialized = true;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <lv_init+0x54>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e000      	b.n	8008cea <lv_init+0x52>
        return;
 8008ce8:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	2001775c 	.word	0x2001775c
 8008cf0:	2001bb88 	.word	0x2001bb88
 8008cf4:	2001bb78 	.word	0x2001bb78

08008cf8 <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]

    lv_obj_t * new_obj = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]
    /*Create a screen if the parent is NULL*/
    if(parent == NULL) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 80bf 	bne.w	8008e8c <lv_obj_create+0x194>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 8008d0e:	f00c fee9 	bl	8015ae4 <lv_disp_get_default>
 8008d12:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <lv_obj_create+0x26>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e26a      	b.n	80091f4 <lv_obj_create+0x4fc>
        }

        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3328      	adds	r3, #40	; 0x28
 8008d22:	4618      	mov	r0, r3
 8008d24:	f00d fe10 	bl	8016948 <lv_ll_ins_head>
 8008d28:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d100      	bne.n	8008d32 <lv_obj_create+0x3a>
 8008d30:	e7fe      	b.n	8008d30 <lv_obj_create+0x38>
        if(new_obj == NULL) return NULL;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <lv_obj_create+0x44>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e25b      	b.n	80091f4 <lv_obj_create+0x4fc>

        new_obj->par = NULL; /*Screens has no a parent*/
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3304      	adds	r3, #4
 8008d46:	2148      	movs	r1, #72	; 0x48
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f00d fddd 	bl	8016908 <lv_ll_init>

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2200      	movs	r2, #0
 8008d58:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f00c fece 	bl	8015afc <lv_disp_get_hor_res>
 8008d60:	4603      	mov	r3, r0
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	b21a      	sxth	r2, r3
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f00c fee5 	bl	8015b3e <lv_disp_get_ver_res>
 8008d74:	4603      	mov	r3, r0
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	b21a      	sxth	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2200      	movs	r2, #0
 8008d86:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2200      	movs	r2, #0
 8008d94:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8008da8:	f36f 0300 	bfc	r3, #0, #1
 8008dac:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8008db0:	f019 fb8e 	bl	80224d0 <lv_theme_get_current>
 8008db4:	60b8      	str	r0, [r7, #8]
        if(th) {
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <lv_obj_create+0xce>
            new_obj->style_p = th->style.scr;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8008dc4:	e002      	b.n	8008dcc <lv_obj_create+0xd4>
        } else {
            new_obj->style_p = &lv_style_scr;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4a5b      	ldr	r2, [pc, #364]	; (8008f38 <lv_obj_create+0x240>)
 8008dca:	629a      	str	r2, [r3, #40]	; 0x28
        }
        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8008dcc:	495b      	ldr	r1, [pc, #364]	; (8008f3c <lv_obj_create+0x244>)
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	f001 fb12 	bl	800a3f8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8008dd4:	495a      	ldr	r1, [pc, #360]	; (8008f40 <lv_obj_create+0x248>)
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f001 fb1c 	bl	800a414 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2200      	movs	r2, #0
 8008de0:	619a      	str	r2, [r3, #24]

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	3344      	adds	r3, #68	; 0x44
 8008de6:	2204      	movs	r2, #4
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f022 f91b 	bl	802b026 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2200      	movs	r2, #0
 8008df4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
        /*Set attributes*/
        new_obj->click        = 0;
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008dfc:	f36f 0300 	bfc	r3, #0, #1
 8008e00:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e0a:	f36f 0341 	bfc	r3, #1, #1
 8008e0e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_throw   = 0;
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e18:	f36f 0382 	bfc	r3, #2, #1
 8008e1c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e26:	f36f 03c3 	bfc	r3, #3, #1
 8008e2a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e34:	f36f 1304 	bfc	r3, #4, #1
 8008e38:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e42:	f36f 1345 	bfc	r3, #5, #1
 8008e46:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale_en = 0;
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e58:	f36f 1386 	bfc	r3, #6, #1
 8008e5c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->opa_scale    = LV_OPA_COVER;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	22ff      	movs	r2, #255	; 0xff
 8008e64:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->parent_event = 0;
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008e6e:	f36f 13c7 	bfc	r3, #7, #1
 8008e72:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->reserved     = 0;
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8008e7c:	f36f 0387 	bfc	r3, #2, #6
 8008e80:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        new_obj->ext_attr = NULL;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24
 8008e8a:	e0bd      	b.n	8009008 <lv_obj_create+0x310>
    }
    /*parent != NULL create normal obj. on a parent*/
    else {
        LV_LOG_TRACE("Object create started");

        new_obj = lv_ll_ins_head(&parent->child_ll);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f00d fd59 	bl	8016948 <lv_ll_ins_head>
 8008e96:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d100      	bne.n	8008ea0 <lv_obj_create+0x1a8>
 8008e9e:	e7fe      	b.n	8008e9e <lv_obj_create+0x1a6>
        if(new_obj == NULL) return NULL;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <lv_obj_create+0x1b2>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e1a4      	b.n	80091f4 <lv_obj_create+0x4fc>

        new_obj->par = parent; /*Set the parent*/
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	2148      	movs	r1, #72	; 0x48
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f00d fd26 	bl	8016908 <lv_ll_init>

        /*Set coordinates left top corner of parent*/
        new_obj->coords.x1    = parent->coords.x1;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3364      	adds	r3, #100	; 0x64
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b21a      	sxth	r2, r3
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3342      	adds	r3, #66	; 0x42
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	b21a      	sxth	r2, r3
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2200      	movs	r2, #0
 8008f06:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8008f1a:	f36f 0300 	bfc	r3, #0, #1
 8008f1e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
        /*Set appearance*/
        lv_theme_t * th = lv_theme_get_current();
 8008f22:	f019 fad5 	bl	80224d0 <lv_theme_get_current>
 8008f26:	6138      	str	r0, [r7, #16]
        if(th) {
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <lv_obj_create+0x24c>
            new_obj->style_p = th->style.panel;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	629a      	str	r2, [r3, #40]	; 0x28
 8008f36:	e008      	b.n	8008f4a <lv_obj_create+0x252>
 8008f38:	2001bab8 	.word	0x2001bab8
 8008f3c:	0800a945 	.word	0x0800a945
 8008f40:	0800a82b 	.word	0x0800a82b
        } else {
            new_obj->style_p = &lv_style_plain_color;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	4aad      	ldr	r2, [pc, #692]	; (80091fc <lv_obj_create+0x504>)
 8008f48:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8008f4a:	49ad      	ldr	r1, [pc, #692]	; (8009200 <lv_obj_create+0x508>)
 8008f4c:	6978      	ldr	r0, [r7, #20]
 8008f4e:	f001 fa53 	bl	800a3f8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8008f52:	49ac      	ldr	r1, [pc, #688]	; (8009204 <lv_obj_create+0x50c>)
 8008f54:	6978      	ldr	r0, [r7, #20]
 8008f56:	f001 fa5d 	bl	800a414 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	619a      	str	r2, [r3, #24]
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3344      	adds	r3, #68	; 0x44
 8008f64:	2204      	movs	r2, #4
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f022 f85c 	bl	802b026 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

        /*Set attributes*/
        new_obj->click        = 1;
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008f88:	f36f 0341 	bfc	r3, #1, #1
 8008f8c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8008f96:	f043 0303 	orr.w	r3, r3, #3
 8008f9a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = 0;
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008fa4:	f36f 0382 	bfc	r3, #2, #1
 8008fa8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008fb2:	f36f 03c3 	bfc	r3, #3, #1
 8008fb6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008fc0:	f36f 1304 	bfc	r3, #4, #1
 8008fc4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008fce:	f36f 1345 	bfc	r3, #5, #1
 8008fd2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	22ff      	movs	r2, #255	; 0xff
 8008fe2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->opa_scale_en = 0;
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008fec:	f36f 1386 	bfc	r3, #6, #1
 8008ff0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = 0;
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008ffa:	f36f 13c7 	bfc	r3, #7, #1
 8008ffe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->ext_attr = NULL;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2200      	movs	r2, #0
 8009006:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Copy the attributes if required*/
    if(copy != NULL) {
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80e5 	beq.w	80091da <lv_obj_create+0x4e2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f103 0210 	add.w	r2, r3, #16
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	3310      	adds	r3, #16
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f7ff fdff 	bl	8008c20 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
#endif

        /*Set free data*/
#if LV_USE_USER_DATA
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	3344      	adds	r3, #68	; 0x44
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	3244      	adds	r2, #68	; 0x44
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	601a      	str	r2, [r3, #0]
#endif
        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009066:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800906a:	b2d9      	uxtb	r1, r3
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009072:	f361 0300 	bfi	r3, r1, #0, #1
 8009076:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied the the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->click        = copy->click;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800908c:	b2d9      	uxtb	r1, r3
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009094:	f361 0300 	bfi	r3, r1, #0, #1
 8009098:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = copy->drag;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80090a6:	b2d9      	uxtb	r1, r3
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80090ae:	f361 0341 	bfi	r3, r1, #1, #1
 80090b2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80090c0:	b2d9      	uxtb	r1, r3
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80090c8:	f361 0301 	bfi	r3, r1, #0, #2
 80090cc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80090da:	b2d9      	uxtb	r1, r3
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80090e2:	f361 0382 	bfi	r3, r1, #2, #1
 80090e6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090f4:	b2d9      	uxtb	r1, r3
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80090fc:	f361 03c3 	bfi	r3, r1, #3, #1
 8009100:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800910a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800910e:	b2d9      	uxtb	r1, r3
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009116:	f361 1304 	bfi	r3, r1, #4, #1
 800911a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = copy->top;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009124:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009128:	b2d9      	uxtb	r1, r3
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009130:	f361 1345 	bfi	r3, r1, #5, #1
 8009134:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800913e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009142:	b2d9      	uxtb	r1, r3
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800914a:	f361 13c7 	bfi	r3, r1, #7, #1
 800914e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->opa_scale_en = copy->opa_scale_en;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009158:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800915c:	b2d9      	uxtb	r1, r3
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009164:	f361 1386 	bfi	r3, r1, #6, #1
 8009168:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = copy->protect;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        new_obj->style_p = copy->style_p;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	629a      	str	r2, [r3, #40]	; 0x28

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <lv_obj_create+0x4a8>
            lv_group_add_obj(copy->group_p, new_obj);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	6979      	ldr	r1, [r7, #20]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff f9b8 	bl	8008510 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80091a0:	6838      	ldr	r0, [r7, #0]
 80091a2:	f001 f9bd 	bl	800a520 <lv_obj_get_parent>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d011      	beq.n	80091d0 <lv_obj_create+0x4d8>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00e      	beq.n	80091d0 <lv_obj_create+0x4d8>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f001 f9ec 	bl	800a590 <lv_obj_get_x>
 80091b8:	4603      	mov	r3, r0
 80091ba:	461c      	mov	r4, r3
 80091bc:	6838      	ldr	r0, [r7, #0]
 80091be:	f001 fa00 	bl	800a5c2 <lv_obj_get_y>
 80091c2:	4603      	mov	r3, r0
 80091c4:	461a      	mov	r2, r3
 80091c6:	4621      	mov	r1, r4
 80091c8:	6978      	ldr	r0, [r7, #20]
 80091ca:	f000 f9d1 	bl	8009570 <lv_obj_set_pos>
 80091ce:	e004      	b.n	80091da <lv_obj_create+0x4e2>
        } else {
            lv_obj_set_pos(new_obj, 0, 0);
 80091d0:	2200      	movs	r2, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	6978      	ldr	r0, [r7, #20]
 80091d6:	f000 f9cb 	bl	8009570 <lv_obj_set_pos>

        LV_LOG_INFO("Object create ready");
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d008      	beq.n	80091f2 <lv_obj_create+0x4fa>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	2101      	movs	r1, #1
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 80091ec:	6978      	ldr	r0, [r7, #20]
 80091ee:	f000 f8c0 	bl	8009372 <lv_obj_invalidate>
    }

    return new_obj;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd90      	pop	{r4, r7, pc}
 80091fc:	2001bb30 	.word	0x2001bb30
 8009200:	0800a945 	.word	0x0800a945
 8009204:	0800a82b 	.word	0x0800a82b

08009208 <lv_obj_del>:
 * Delete 'obj' and all of its children
 * @param obj pointer to an object to delete
 * @return LV_RES_INV because the object is deleted
 */
lv_res_t lv_obj_del(lv_obj_t * obj)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f8ae 	bl	8009372 <lv_obj_invalidate>

    /*Delete from the group*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fae3 	bl	800a7e2 <lv_obj_get_group>
 800921c:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <lv_obj_del+0x22>
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff f9c4 	bl	80085b2 <lv_group_remove_obj>
#endif

        /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 800922a:	2100      	movs	r1, #0
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f00c fdd7 	bl	8015de0 <lv_anim_del>
#endif

    /*Recursively delete the children*/
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3304      	adds	r3, #4
 8009236:	4618      	mov	r0, r3
 8009238:	f00d fce8 	bl	8016c0c <lv_ll_get_head>
 800923c:	61f8      	str	r0, [r7, #28]
    while(i != NULL) {
 800923e:	e00b      	b.n	8009258 <lv_obj_del+0x50>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	69f9      	ldr	r1, [r7, #28]
 8009246:	4618      	mov	r0, r3
 8009248:	f00d fd06 	bl	8016c58 <lv_ll_get_next>
 800924c:	60b8      	str	r0, [r7, #8]

        /*Call the recursive del to the child too*/
        delete_children(i);
 800924e:	69f8      	ldr	r0, [r7, #28]
 8009250:	f001 fc33 	bl	800aaba <delete_children>

        /*Set i to the next node*/
        i = i_next;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1f0      	bne.n	8009240 <lv_obj_del+0x38>
    }

    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800925e:	2200      	movs	r2, #0
 8009260:	2113      	movs	r1, #19
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 f837 	bl	800a2d6 <lv_event_send>

    lv_event_mark_deleted(obj);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 fca5 	bl	800abb8 <lv_event_mark_deleted>

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f956 	bl	800a520 <lv_obj_get_parent>
 8009274:	6138      	str	r0, [r7, #16]
    if(par == NULL) { /*It is a screen*/
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <lv_obj_del+0x8a>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 f915 	bl	800a4ac <lv_obj_get_disp>
 8009282:	60f8      	str	r0, [r7, #12]
        lv_ll_rem(&d->scr_ll, obj);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3328      	adds	r3, #40	; 0x28
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4618      	mov	r0, r3
 800928c:	f00d fc10 	bl	8016ab0 <lv_ll_rem>
 8009290:	e005      	b.n	800929e <lv_obj_del+0x96>
    } else {
        lv_ll_rem(&(par->child_ll), obj);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	3304      	adds	r3, #4
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4618      	mov	r0, r3
 800929a:	f00d fc09 	bl	8016ab0 <lv_ll_rem>
    }

    /* Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800929e:	2000      	movs	r0, #0
 80092a0:	f00c fcde 	bl	8015c60 <lv_indev_get_next>
 80092a4:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80092a6:	e026      	b.n	80092f6 <lv_obj_del+0xee>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d004      	beq.n	80092bc <lv_obj_del+0xb4>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d102      	bne.n	80092c2 <lv_obj_del+0xba>
            lv_indev_reset(indev);
 80092bc:	69b8      	ldr	r0, [r7, #24]
 80092be:	f7ff fbec 	bl	8008a9a <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d102      	bne.n	80092d2 <lv_obj_del+0xca>
            indev->proc.types.pointer.last_pressed = NULL;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2200      	movs	r2, #0
 80092d0:	641a      	str	r2, [r3, #64]	; 0x40
        }

#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d108      	bne.n	80092ee <lv_obj_del+0xe6>
 80092dc:	f7ff fc94 	bl	8008c08 <lv_indev_get_obj_act>
 80092e0:	4602      	mov	r2, r0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d102      	bne.n	80092ee <lv_obj_del+0xe6>
            lv_indev_reset(indev);
 80092e8:	69b8      	ldr	r0, [r7, #24]
 80092ea:	f7ff fbd6 	bl	8008a9a <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 80092ee:	69b8      	ldr	r0, [r7, #24]
 80092f0:	f00c fcb6 	bl	8015c60 <lv_indev_get_next>
 80092f4:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1d5      	bne.n	80092a8 <lv_obj_del+0xa0>
    }

    /* All children deleted.
     * Now clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	2200      	movs	r2, #0
 8009302:	2100      	movs	r1, #0
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <lv_obj_del+0x112>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	4618      	mov	r0, r3
 8009316:	f00d fe39 	bl	8016f8c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f00d fe36 	bl	8016f8c <lv_mem_free>

    /*Send a signal to the parent to notify it about the child delete*/
    if(par != NULL) {
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <lv_obj_del+0x12a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2200      	movs	r2, #0
 800932c:	2101      	movs	r1, #1
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	4798      	blx	r3
    }

    return LV_RES_INV;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <lv_obj_clean>:
/**
 * Delete all children of an object
 * @param obj pointer to an object
 */
void lv_obj_clean(lv_obj_t * obj)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009344:	2100      	movs	r1, #0
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f8f6 	bl	800a538 <lv_obj_get_child>
 800934c:	60f8      	str	r0, [r7, #12]
    lv_obj_t * child_next;
    while(child) {
 800934e:	e009      	b.n	8009364 <lv_obj_clean+0x28>
        /* Read the next child before deleting the current
         * because the next couldn't be read from a deleted (invalid) node*/
        child_next = lv_obj_get_child(obj, child);
 8009350:	68f9      	ldr	r1, [r7, #12]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f8f0 	bl	800a538 <lv_obj_get_child>
 8009358:	60b8      	str	r0, [r7, #8]
        lv_obj_del(child);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff ff54 	bl	8009208 <lv_obj_del>
        child = child_next;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	60fb      	str	r3, [r7, #12]
    while(child) {
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f2      	bne.n	8009350 <lv_obj_clean+0x14>
    }
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b08a      	sub	sp, #40	; 0x28
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_hidden(obj)) return;
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f9c2 	bl	800a704 <lv_obj_get_hidden>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d17e      	bne.n	8009484 <lv_obj_invalidate+0x112>

    /*Invalidate the object only if it belongs to the 'LV_GC_ROOT(_lv_act_scr)'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f87c 	bl	800a484 <lv_obj_get_screen>
 800938c:	61f8      	str	r0, [r7, #28]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800938e:	69f8      	ldr	r0, [r7, #28]
 8009390:	f001 f88c 	bl	800a4ac <lv_obj_get_disp>
 8009394:	61b8      	str	r0, [r7, #24]
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8009396:	69b8      	ldr	r0, [r7, #24]
 8009398:	f7ff f870 	bl	800847c <lv_disp_get_scr_act>
 800939c:	4602      	mov	r2, r0
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00d      	beq.n	80093c0 <lv_obj_invalidate+0x4e>
 80093a4:	69b8      	ldr	r0, [r7, #24]
 80093a6:	f7ff f87e 	bl	80084a6 <lv_disp_get_layer_top>
 80093aa:	4602      	mov	r2, r0
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d006      	beq.n	80093c0 <lv_obj_invalidate+0x4e>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 80093b2:	69b8      	ldr	r0, [r7, #24]
 80093b4:	f7ff f88c 	bl	80084d0 <lv_disp_get_layer_sys>
 80093b8:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	4293      	cmp	r3, r2
 80093be:	d164      	bne.n	800948a <lv_obj_invalidate+0x118>
        /*Truncate recursively to the parents*/
        lv_area_t area_trunc;
        lv_obj_t * par = lv_obj_get_parent(obj);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f8ad 	bl	800a520 <lv_obj_get_parent>
 80093c6:	6278      	str	r0, [r7, #36]	; 0x24
        bool union_ok  = true;
 80093c8:	2301      	movs	r3, #1
 80093ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /*Start with the original coordinates*/
        lv_coord_t ext_size = obj->ext_draw_pad;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80093d2:	82fb      	strh	r3, [r7, #22]
        lv_area_copy(&area_trunc, &obj->coords);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f103 0210 	add.w	r2, r3, #16
 80093da:	f107 030c 	add.w	r3, r7, #12
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fc1d 	bl	8008c20 <lv_area_copy>
        area_trunc.x1 -= ext_size;
 80093e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	8afb      	ldrh	r3, [r7, #22]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	b21b      	sxth	r3, r3
 80093f4:	81bb      	strh	r3, [r7, #12]
        area_trunc.y1 -= ext_size;
 80093f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	8afb      	ldrh	r3, [r7, #22]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	b29b      	uxth	r3, r3
 8009402:	b21b      	sxth	r3, r3
 8009404:	81fb      	strh	r3, [r7, #14]
        area_trunc.x2 += ext_size;
 8009406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800940a:	b29a      	uxth	r2, r3
 800940c:	8afb      	ldrh	r3, [r7, #22]
 800940e:	4413      	add	r3, r2
 8009410:	b29b      	uxth	r3, r3
 8009412:	b21b      	sxth	r3, r3
 8009414:	823b      	strh	r3, [r7, #16]
        area_trunc.y2 += ext_size;
 8009416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800941a:	b29a      	uxth	r2, r3
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	4413      	add	r3, r2
 8009420:	b29b      	uxth	r3, r3
 8009422:	b21b      	sxth	r3, r3
 8009424:	827b      	strh	r3, [r7, #18]

        /*Check through all parents*/
        while(par != NULL) {
 8009426:	e01d      	b.n	8009464 <lv_obj_invalidate+0xf2>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	f103 0210 	add.w	r2, r3, #16
 800942e:	f107 010c 	add.w	r1, r7, #12
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4618      	mov	r0, r3
 8009438:	f00c ff4e 	bl	80162d8 <lv_area_intersect>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8009442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009446:	f083 0301 	eor.w	r3, r3, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10d      	bne.n	800946c <lv_obj_invalidate+0xfa>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009452:	f001 f957 	bl	800a704 <lv_obj_get_hidden>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d115      	bne.n	8009488 <lv_obj_invalidate+0x116>

            par = lv_obj_get_parent(par);
 800945c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800945e:	f001 f85f 	bl	800a520 <lv_obj_get_parent>
 8009462:	6278      	str	r0, [r7, #36]	; 0x24
        while(par != NULL) {
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1de      	bne.n	8009428 <lv_obj_invalidate+0xb6>
 800946a:	e000      	b.n	800946e <lv_obj_invalidate+0xfc>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800946c:	bf00      	nop
        }

        if(union_ok) lv_inv_area(disp, &area_trunc);
 800946e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <lv_obj_invalidate+0x118>
 8009476:	f107 030c 	add.w	r3, r7, #12
 800947a:	4619      	mov	r1, r3
 800947c:	69b8      	ldr	r0, [r7, #24]
 800947e:	f001 fbfd 	bl	800ac7c <lv_inv_area>
 8009482:	e002      	b.n	800948a <lv_obj_invalidate+0x118>
    if(lv_obj_get_hidden(obj)) return;
 8009484:	bf00      	nop
 8009486:	e000      	b.n	800948a <lv_obj_invalidate+0x118>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009488:	bf00      	nop
    }
}
 800948a:	3728      	adds	r7, #40	; 0x28
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <lv_obj_set_parent>:
 * Set a new parent for an object. Its relative position will be the same.
 * @param obj pointer to an object. Can't be a screen.
 * @param parent pointer to the new parent object. (Can't be NULL)
 */
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
    if(obj->par == NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d036      	beq.n	8009510 <lv_obj_set_parent+0x80>
        LV_LOG_WARN("Can't set the parent of a screen");
        return;
    }

    if(parent == NULL) {
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d035      	beq.n	8009514 <lv_obj_set_parent+0x84>
        LV_LOG_WARN("Can't set parent == NULL to an object");
        return;
    }

    lv_obj_invalidate(obj);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff ff62 	bl	8009372 <lv_obj_invalidate>

    lv_point_t old_pos;
    old_pos.x = lv_obj_get_x(obj);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 f86e 	bl	800a590 <lv_obj_get_x>
 80094b4:	4603      	mov	r3, r0
 80094b6:	813b      	strh	r3, [r7, #8]
    old_pos.y = lv_obj_get_y(obj);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 f882 	bl	800a5c2 <lv_obj_get_y>
 80094be:	4603      	mov	r3, r0
 80094c0:	817b      	strh	r3, [r7, #10]

    lv_obj_t * old_par = obj->par;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	1d18      	adds	r0, r3, #4
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	1d19      	adds	r1, r3, #4
 80094d2:	2301      	movs	r3, #1
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	f00d fb44 	bl	8016b62 <lv_ll_chg_list>
    obj->par = parent;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	601a      	str	r2, [r3, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 80094e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80094e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f840 	bl	8009570 <lv_obj_set_pos>

    /*Notify the original parent because one of its children is lost*/
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	2200      	movs	r2, #0
 80094f6:	2101      	movs	r1, #1
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	4798      	blx	r3

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	2101      	movs	r1, #1
 8009504:	6838      	ldr	r0, [r7, #0]
 8009506:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff ff32 	bl	8009372 <lv_obj_invalidate>
 800950e:	e002      	b.n	8009516 <lv_obj_set_parent+0x86>
        return;
 8009510:	bf00      	nop
 8009512:	e000      	b.n	8009516 <lv_obj_set_parent+0x86>
        return;
 8009514:	bf00      	nop
}
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fffb 	bl	800a520 <lv_obj_get_parent>
 800952a:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3304      	adds	r3, #4
 8009530:	4618      	mov	r0, r3
 8009532:	f00d fb6b 	bl	8016c0c <lv_ll_get_head>
 8009536:	4602      	mov	r2, r0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4293      	cmp	r3, r2
 800953c:	d014      	beq.n	8009568 <lv_obj_move_foreground+0x4c>

    lv_obj_invalidate(parent);
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff ff17 	bl	8009372 <lv_obj_invalidate>

    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	1d18      	adds	r0, r3, #4
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	1d19      	adds	r1, r3, #4
 800954c:	2301      	movs	r3, #1
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	f00d fb07 	bl	8016b62 <lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	2101      	movs	r1, #1
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7ff ff06 	bl	8009372 <lv_obj_invalidate>
 8009566:	e000      	b.n	800956a <lv_obj_move_foreground+0x4e>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8009568:	bf00      	nop
}
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	807b      	strh	r3, [r7, #2]
 800957c:	4613      	mov	r3, r2
 800957e:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->par;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	617b      	str	r3, [r7, #20]

    x = x + par->coords.x1;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800958c:	b29a      	uxth	r2, r3
 800958e:	887b      	ldrh	r3, [r7, #2]
 8009590:	4413      	add	r3, r2
 8009592:	b29b      	uxth	r3, r3
 8009594:	807b      	strh	r3, [r7, #2]
    y = y + par->coords.y1;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800959c:	b29a      	uxth	r2, r3
 800959e:	883b      	ldrh	r3, [r7, #0]
 80095a0:	4413      	add	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	803b      	strh	r3, [r7, #0]

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 80095a6:	887a      	ldrh	r2, [r7, #2]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 80095b8:	883a      	ldrh	r2, [r7, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 80095ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <lv_obj_set_pos+0x6a>
 80095d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d051      	beq.n	800967e <lv_obj_set_pos+0x10e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fec9 	bl	8009372 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80095e0:	f107 0308 	add.w	r3, r7, #8
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 ffc3 	bl	800a572 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b21a      	sxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800960a:	b29a      	uxth	r2, r3
 800960c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009610:	b29b      	uxth	r3, r3
 8009612:	4413      	add	r3, r2
 8009614:	b29b      	uxth	r3, r3
 8009616:	b21a      	sxth	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009622:	b29a      	uxth	r2, r3
 8009624:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009628:	b29b      	uxth	r3, r3
 800962a:	4413      	add	r3, r2
 800962c:	b29b      	uxth	r3, r3
 800962e:	b21a      	sxth	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800963a:	b29a      	uxth	r2, r3
 800963c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009640:	b29b      	uxth	r3, r3
 8009642:	4413      	add	r3, r2
 8009644:	b29b      	uxth	r3, r3
 8009646:	b21a      	sxth	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 800964c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009650:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 f9b6 	bl	800a9c8 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	2102      	movs	r1, #2
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3

    /*Send a signal to the parent too*/
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	2101      	movs	r1, #1
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fe7b 	bl	8009372 <lv_obj_invalidate>
 800967c:	e000      	b.n	8009680 <lv_obj_set_pos+0x110>
    if(diff.x == 0 && diff.y == 0) return;
 800967e:	bf00      	nop
}
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 ff95 	bl	800a5c2 <lv_obj_get_y>
 8009698:	4603      	mov	r3, r0
 800969a:	461a      	mov	r2, r3
 800969c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff64 	bl	8009570 <lv_obj_set_pos>
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 ff67 	bl	800a590 <lv_obj_get_x>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4619      	mov	r1, r3
 80096c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff ff4f 	bl	8009570 <lv_obj_set_pos>
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <lv_obj_set_size>:
 * @param obj pointer to an object
 * @param w new width
 * @param h new height
 */
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	807b      	strh	r3, [r7, #2]
 80096e6:	4613      	mov	r3, r2
 80096e8:	803b      	strh	r3, [r7, #0]

    /* Do nothing if the size is not changed */
    /* It is very important else recursive resizing can
     * occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 ff82 	bl	800a5f4 <lv_obj_get_width>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d108      	bne.n	800970e <lv_obj_set_size+0x34>
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 ff87 	bl	800a610 <lv_obj_get_height>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	f9b7 3000 	ldrsh.w	r3, [r7]
 800970a:	4293      	cmp	r3, r2
 800970c:	d05a      	beq.n	80097c4 <lv_obj_set_size+0xea>
        return;
    }

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff fe2f 	bl	8009372 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 ff29 	bl	800a572 <lv_obj_get_coords>

    /*Set the length and height*/
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009726:	b29a      	uxth	r2, r3
 8009728:	887b      	ldrh	r3, [r7, #2]
 800972a:	4413      	add	r3, r2
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29b      	uxth	r3, r3
 8009732:	b21a      	sxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800973e:	b29a      	uxth	r2, r3
 8009740:	883b      	ldrh	r3, [r7, #0]
 8009742:	4413      	add	r3, r2
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	b21a      	sxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	82da      	strh	r2, [r3, #22]

    /*Send a signal to the object with its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f107 0208 	add.w	r2, r7, #8
 8009758:	2102      	movs	r1, #2
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3

    /*Send a signal to the parent too*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fede 	bl	800a520 <lv_obj_get_parent>
 8009764:	6138      	str	r0, [r7, #16]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <lv_obj_set_size+0x9e>
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	2101      	movs	r1, #1
 8009774:	6938      	ldr	r0, [r7, #16]
 8009776:	4798      	blx	r3

    /*Tell the children the parent's size has changed*/
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f00d fa45 	bl	8016c0c <lv_ll_get_head>
 8009782:	6178      	str	r0, [r7, #20]
 8009784:	e00c      	b.n	80097a0 <lv_obj_set_size+0xc6>
    {
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	2200      	movs	r2, #0
 800978c:	2103      	movs	r1, #3
 800978e:	6978      	ldr	r0, [r7, #20]
 8009790:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3304      	adds	r3, #4
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	4618      	mov	r0, r3
 800979a:	f00d fa5d 	bl	8016c58 <lv_ll_get_next>
 800979e:	6178      	str	r0, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1ef      	bne.n	8009786 <lv_obj_set_size+0xac>
    }

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fde3 	bl	8009372 <lv_obj_invalidate>

    /*Automatically realign the object if required*/
#if LV_USE_OBJ_REALIGN
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <lv_obj_set_size+0xec>
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fca3 	bl	800a108 <lv_obj_realign>
 80097c2:	e000      	b.n	80097c6 <lv_obj_set_size+0xec>
        return;
 80097c4:	bf00      	nop
#endif
}
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <lv_obj_set_width>:
 * Set the width of an object
 * @param obj pointer to an object
 * @param w new width
 */
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 ff19 	bl	800a610 <lv_obj_get_height>
 80097de:	4603      	mov	r3, r0
 80097e0:	461a      	mov	r2, r3
 80097e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff ff76 	bl	80096da <lv_obj_set_size>
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <lv_obj_set_height>:
 * Set the height of an object
 * @param obj pointer to an object
 * @param h new height
 */
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fef6 	bl	800a5f4 <lv_obj_get_width>
 8009808:	4603      	mov	r3, r0
 800980a:	4619      	mov	r1, r3
 800980c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009810:	461a      	mov	r2, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff ff61 	bl	80096da <lv_obj_set_size>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b089      	sub	sp, #36	; 0x24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4611      	mov	r1, r2
 800982c:	461a      	mov	r2, r3
 800982e:	460b      	mov	r3, r1
 8009830:	71fb      	strb	r3, [r7, #7]
 8009832:	4613      	mov	r3, r2
 8009834:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 feaa 	bl	800a590 <lv_obj_get_x>
 800983c:	4603      	mov	r3, r0
 800983e:	83fb      	strh	r3, [r7, #30]
    lv_coord_t new_y = lv_obj_get_y(obj);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 febe 	bl	800a5c2 <lv_obj_get_y>
 8009846:	4603      	mov	r3, r0
 8009848:	83bb      	strh	r3, [r7, #28]

    if(base == NULL) {
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d103      	bne.n	8009858 <lv_obj_align+0x38>
        base = lv_obj_get_parent(obj);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fe65 	bl	800a520 <lv_obj_get_parent>
 8009856:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b14      	cmp	r3, #20
 800985c:	f200 81f9 	bhi.w	8009c52 <lv_obj_align+0x432>
 8009860:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <lv_obj_align+0x48>)
 8009862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009866:	bf00      	nop
 8009868:	080098bd 	.word	0x080098bd
 800986c:	08009913 	.word	0x08009913
 8009870:	0800991d 	.word	0x0800991d
 8009874:	0800994d 	.word	0x0800994d
 8009878:	0800996d 	.word	0x0800996d
 800987c:	0800998d 	.word	0x0800998d
 8009880:	080099d3 	.word	0x080099d3
 8009884:	08009a09 	.word	0x08009a09
 8009888:	08009a39 	.word	0x08009a39
 800988c:	08009a7f 	.word	0x08009a7f
 8009890:	08009a95 	.word	0x08009a95
 8009894:	08009ad1 	.word	0x08009ad1
 8009898:	08009afd 	.word	0x08009afd
 800989c:	08009b0d 	.word	0x08009b0d
 80098a0:	08009b43 	.word	0x08009b43
 80098a4:	08009b69 	.word	0x08009b69
 80098a8:	08009b7f 	.word	0x08009b7f
 80098ac:	08009bbb 	.word	0x08009bbb
 80098b0:	08009be7 	.word	0x08009be7
 80098b4:	08009bf7 	.word	0x08009bf7
 80098b8:	08009c2d 	.word	0x08009c2d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80098bc:	68b8      	ldr	r0, [r7, #8]
 80098be:	f000 fe99 	bl	800a5f4 <lv_obj_get_width>
 80098c2:	4603      	mov	r3, r0
 80098c4:	0fda      	lsrs	r2, r3, #31
 80098c6:	4413      	add	r3, r2
 80098c8:	105b      	asrs	r3, r3, #1
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	b29c      	uxth	r4, r3
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fe90 	bl	800a5f4 <lv_obj_get_width>
 80098d4:	4603      	mov	r3, r0
 80098d6:	0fda      	lsrs	r2, r3, #31
 80098d8:	4413      	add	r3, r2
 80098da:	105b      	asrs	r3, r3, #1
 80098dc:	b21b      	sxth	r3, r3
 80098de:	b29b      	uxth	r3, r3
 80098e0:	1ae3      	subs	r3, r4, r3
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80098e6:	68b8      	ldr	r0, [r7, #8]
 80098e8:	f000 fe92 	bl	800a610 <lv_obj_get_height>
 80098ec:	4603      	mov	r3, r0
 80098ee:	0fda      	lsrs	r2, r3, #31
 80098f0:	4413      	add	r3, r2
 80098f2:	105b      	asrs	r3, r3, #1
 80098f4:	b21b      	sxth	r3, r3
 80098f6:	b29c      	uxth	r4, r3
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fe89 	bl	800a610 <lv_obj_get_height>
 80098fe:	4603      	mov	r3, r0
 8009900:	0fda      	lsrs	r2, r3, #31
 8009902:	4413      	add	r3, r2
 8009904:	105b      	asrs	r3, r3, #1
 8009906:	b21b      	sxth	r3, r3
 8009908:	b29b      	uxth	r3, r3
 800990a:	1ae3      	subs	r3, r4, r3
 800990c:	b29b      	uxth	r3, r3
 800990e:	83bb      	strh	r3, [r7, #28]
            break;
 8009910:	e19f      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	83bb      	strh	r3, [r7, #28]
            break;
 800991a:	e19a      	b.n	8009c52 <lv_obj_align+0x432>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800991c:	68b8      	ldr	r0, [r7, #8]
 800991e:	f000 fe69 	bl	800a5f4 <lv_obj_get_width>
 8009922:	4603      	mov	r3, r0
 8009924:	0fda      	lsrs	r2, r3, #31
 8009926:	4413      	add	r3, r2
 8009928:	105b      	asrs	r3, r3, #1
 800992a:	b21b      	sxth	r3, r3
 800992c:	b29c      	uxth	r4, r3
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fe60 	bl	800a5f4 <lv_obj_get_width>
 8009934:	4603      	mov	r3, r0
 8009936:	0fda      	lsrs	r2, r3, #31
 8009938:	4413      	add	r3, r2
 800993a:	105b      	asrs	r3, r3, #1
 800993c:	b21b      	sxth	r3, r3
 800993e:	b29b      	uxth	r3, r3
 8009940:	1ae3      	subs	r3, r4, r3
 8009942:	b29b      	uxth	r3, r3
 8009944:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	83bb      	strh	r3, [r7, #28]
            break;
 800994a:	e182      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800994c:	68b8      	ldr	r0, [r7, #8]
 800994e:	f000 fe51 	bl	800a5f4 <lv_obj_get_width>
 8009952:	4603      	mov	r3, r0
 8009954:	b29c      	uxth	r4, r3
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fe4c 	bl	800a5f4 <lv_obj_get_width>
 800995c:	4603      	mov	r3, r0
 800995e:	b29b      	uxth	r3, r3
 8009960:	1ae3      	subs	r3, r4, r3
 8009962:	b29b      	uxth	r3, r3
 8009964:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	83bb      	strh	r3, [r7, #28]
            break;
 800996a:	e172      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 fe4d 	bl	800a610 <lv_obj_get_height>
 8009976:	4603      	mov	r3, r0
 8009978:	b29c      	uxth	r4, r3
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fe48 	bl	800a610 <lv_obj_get_height>
 8009980:	4603      	mov	r3, r0
 8009982:	b29b      	uxth	r3, r3
 8009984:	1ae3      	subs	r3, r4, r3
 8009986:	b29b      	uxth	r3, r3
 8009988:	83bb      	strh	r3, [r7, #28]
            break;
 800998a:	e162      	b.n	8009c52 <lv_obj_align+0x432>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f000 fe31 	bl	800a5f4 <lv_obj_get_width>
 8009992:	4603      	mov	r3, r0
 8009994:	0fda      	lsrs	r2, r3, #31
 8009996:	4413      	add	r3, r2
 8009998:	105b      	asrs	r3, r3, #1
 800999a:	b21b      	sxth	r3, r3
 800999c:	b29c      	uxth	r4, r3
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fe28 	bl	800a5f4 <lv_obj_get_width>
 80099a4:	4603      	mov	r3, r0
 80099a6:	0fda      	lsrs	r2, r3, #31
 80099a8:	4413      	add	r3, r2
 80099aa:	105b      	asrs	r3, r3, #1
 80099ac:	b21b      	sxth	r3, r3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	1ae3      	subs	r3, r4, r3
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80099b6:	68b8      	ldr	r0, [r7, #8]
 80099b8:	f000 fe2a 	bl	800a610 <lv_obj_get_height>
 80099bc:	4603      	mov	r3, r0
 80099be:	b29c      	uxth	r4, r3
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fe25 	bl	800a610 <lv_obj_get_height>
 80099c6:	4603      	mov	r3, r0
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	1ae3      	subs	r3, r4, r3
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	83bb      	strh	r3, [r7, #28]
            break;
 80099d0:	e13f      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80099d2:	68b8      	ldr	r0, [r7, #8]
 80099d4:	f000 fe0e 	bl	800a5f4 <lv_obj_get_width>
 80099d8:	4603      	mov	r3, r0
 80099da:	b29c      	uxth	r4, r3
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fe09 	bl	800a5f4 <lv_obj_get_width>
 80099e2:	4603      	mov	r3, r0
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	1ae3      	subs	r3, r4, r3
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f000 fe0f 	bl	800a610 <lv_obj_get_height>
 80099f2:	4603      	mov	r3, r0
 80099f4:	b29c      	uxth	r4, r3
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fe0a 	bl	800a610 <lv_obj_get_height>
 80099fc:	4603      	mov	r3, r0
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	1ae3      	subs	r3, r4, r3
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	83bb      	strh	r3, [r7, #28]
            break;
 8009a06:	e124      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009a0c:	68b8      	ldr	r0, [r7, #8]
 8009a0e:	f000 fdff 	bl	800a610 <lv_obj_get_height>
 8009a12:	4603      	mov	r3, r0
 8009a14:	0fda      	lsrs	r2, r3, #31
 8009a16:	4413      	add	r3, r2
 8009a18:	105b      	asrs	r3, r3, #1
 8009a1a:	b21b      	sxth	r3, r3
 8009a1c:	b29c      	uxth	r4, r3
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fdf6 	bl	800a610 <lv_obj_get_height>
 8009a24:	4603      	mov	r3, r0
 8009a26:	0fda      	lsrs	r2, r3, #31
 8009a28:	4413      	add	r3, r2
 8009a2a:	105b      	asrs	r3, r3, #1
 8009a2c:	b21b      	sxth	r3, r3
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	1ae3      	subs	r3, r4, r3
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	83bb      	strh	r3, [r7, #28]
            break;
 8009a36:	e10c      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009a38:	68b8      	ldr	r0, [r7, #8]
 8009a3a:	f000 fddb 	bl	800a5f4 <lv_obj_get_width>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	b29c      	uxth	r4, r3
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fdd6 	bl	800a5f4 <lv_obj_get_width>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	1ae3      	subs	r3, r4, r3
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009a52:	68b8      	ldr	r0, [r7, #8]
 8009a54:	f000 fddc 	bl	800a610 <lv_obj_get_height>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	0fda      	lsrs	r2, r3, #31
 8009a5c:	4413      	add	r3, r2
 8009a5e:	105b      	asrs	r3, r3, #1
 8009a60:	b21b      	sxth	r3, r3
 8009a62:	b29c      	uxth	r4, r3
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 fdd3 	bl	800a610 <lv_obj_get_height>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	0fda      	lsrs	r2, r3, #31
 8009a6e:	4413      	add	r3, r2
 8009a70:	105b      	asrs	r3, r3, #1
 8009a72:	b21b      	sxth	r3, r3
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	1ae3      	subs	r3, r4, r3
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	83bb      	strh	r3, [r7, #28]
            break;
 8009a7c:	e0e9      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fdc4 	bl	800a610 <lv_obj_get_height>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	425b      	negs	r3, r3
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	83bb      	strh	r3, [r7, #28]
            break;
 8009a92:	e0de      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009a94:	68b8      	ldr	r0, [r7, #8]
 8009a96:	f000 fdad 	bl	800a5f4 <lv_obj_get_width>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	0fda      	lsrs	r2, r3, #31
 8009a9e:	4413      	add	r3, r2
 8009aa0:	105b      	asrs	r3, r3, #1
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	b29c      	uxth	r4, r3
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fda4 	bl	800a5f4 <lv_obj_get_width>
 8009aac:	4603      	mov	r3, r0
 8009aae:	0fda      	lsrs	r2, r3, #31
 8009ab0:	4413      	add	r3, r2
 8009ab2:	105b      	asrs	r3, r3, #1
 8009ab4:	b21b      	sxth	r3, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	1ae3      	subs	r3, r4, r3
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fda6 	bl	800a610 <lv_obj_get_height>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	425b      	negs	r3, r3
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	83bb      	strh	r3, [r7, #28]
            break;
 8009ace:	e0c0      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009ad0:	68b8      	ldr	r0, [r7, #8]
 8009ad2:	f000 fd8f 	bl	800a5f4 <lv_obj_get_width>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	b29c      	uxth	r4, r3
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 fd8a 	bl	800a5f4 <lv_obj_get_width>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	1ae3      	subs	r3, r4, r3
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fd90 	bl	800a610 <lv_obj_get_height>
 8009af0:	4603      	mov	r3, r0
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	425b      	negs	r3, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	83bb      	strh	r3, [r7, #28]
            break;
 8009afa:	e0aa      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8009b00:	68b8      	ldr	r0, [r7, #8]
 8009b02:	f000 fd85 	bl	800a610 <lv_obj_get_height>
 8009b06:	4603      	mov	r3, r0
 8009b08:	83bb      	strh	r3, [r7, #28]
            break;
 8009b0a:	e0a2      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009b0c:	68b8      	ldr	r0, [r7, #8]
 8009b0e:	f000 fd71 	bl	800a5f4 <lv_obj_get_width>
 8009b12:	4603      	mov	r3, r0
 8009b14:	0fda      	lsrs	r2, r3, #31
 8009b16:	4413      	add	r3, r2
 8009b18:	105b      	asrs	r3, r3, #1
 8009b1a:	b21b      	sxth	r3, r3
 8009b1c:	b29c      	uxth	r4, r3
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fd68 	bl	800a5f4 <lv_obj_get_width>
 8009b24:	4603      	mov	r3, r0
 8009b26:	0fda      	lsrs	r2, r3, #31
 8009b28:	4413      	add	r3, r2
 8009b2a:	105b      	asrs	r3, r3, #1
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	1ae3      	subs	r3, r4, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8009b36:	68b8      	ldr	r0, [r7, #8]
 8009b38:	f000 fd6a 	bl	800a610 <lv_obj_get_height>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	83bb      	strh	r3, [r7, #28]
            break;
 8009b40:	e087      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009b42:	68b8      	ldr	r0, [r7, #8]
 8009b44:	f000 fd56 	bl	800a5f4 <lv_obj_get_width>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	b29c      	uxth	r4, r3
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fd51 	bl	800a5f4 <lv_obj_get_width>
 8009b52:	4603      	mov	r3, r0
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	1ae3      	subs	r3, r4, r3
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8009b5c:	68b8      	ldr	r0, [r7, #8]
 8009b5e:	f000 fd57 	bl	800a610 <lv_obj_get_height>
 8009b62:	4603      	mov	r3, r0
 8009b64:	83bb      	strh	r3, [r7, #28]
            break;
 8009b66:	e074      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -lv_obj_get_width(obj);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fd43 	bl	800a5f4 <lv_obj_get_width>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	425b      	negs	r3, r3
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	83bb      	strh	r3, [r7, #28]
            break;
 8009b7c:	e069      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -lv_obj_get_width(obj);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 fd38 	bl	800a5f4 <lv_obj_get_width>
 8009b84:	4603      	mov	r3, r0
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	425b      	negs	r3, r3
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009b8e:	68b8      	ldr	r0, [r7, #8]
 8009b90:	f000 fd3e 	bl	800a610 <lv_obj_get_height>
 8009b94:	4603      	mov	r3, r0
 8009b96:	0fda      	lsrs	r2, r3, #31
 8009b98:	4413      	add	r3, r2
 8009b9a:	105b      	asrs	r3, r3, #1
 8009b9c:	b21b      	sxth	r3, r3
 8009b9e:	b29c      	uxth	r4, r3
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 fd35 	bl	800a610 <lv_obj_get_height>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	0fda      	lsrs	r2, r3, #31
 8009baa:	4413      	add	r3, r2
 8009bac:	105b      	asrs	r3, r3, #1
 8009bae:	b21b      	sxth	r3, r3
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	1ae3      	subs	r3, r4, r3
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	83bb      	strh	r3, [r7, #28]
            break;
 8009bb8:	e04b      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -lv_obj_get_width(obj);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fd1a 	bl	800a5f4 <lv_obj_get_width>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	425b      	negs	r3, r3
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009bca:	68b8      	ldr	r0, [r7, #8]
 8009bcc:	f000 fd20 	bl	800a610 <lv_obj_get_height>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	b29c      	uxth	r4, r3
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 fd1b 	bl	800a610 <lv_obj_get_height>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	1ae3      	subs	r3, r4, r3
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	83bb      	strh	r3, [r7, #28]
            break;
 8009be4:	e035      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base);
 8009be6:	68b8      	ldr	r0, [r7, #8]
 8009be8:	f000 fd04 	bl	800a5f4 <lv_obj_get_width>
 8009bec:	4603      	mov	r3, r0
 8009bee:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	83bb      	strh	r3, [r7, #28]
            break;
 8009bf4:	e02d      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base);
 8009bf6:	68b8      	ldr	r0, [r7, #8]
 8009bf8:	f000 fcfc 	bl	800a5f4 <lv_obj_get_width>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009c00:	68b8      	ldr	r0, [r7, #8]
 8009c02:	f000 fd05 	bl	800a610 <lv_obj_get_height>
 8009c06:	4603      	mov	r3, r0
 8009c08:	0fda      	lsrs	r2, r3, #31
 8009c0a:	4413      	add	r3, r2
 8009c0c:	105b      	asrs	r3, r3, #1
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	b29c      	uxth	r4, r3
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fcfc 	bl	800a610 <lv_obj_get_height>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	0fda      	lsrs	r2, r3, #31
 8009c1c:	4413      	add	r3, r2
 8009c1e:	105b      	asrs	r3, r3, #1
 8009c20:	b21b      	sxth	r3, r3
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	1ae3      	subs	r3, r4, r3
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	83bb      	strh	r3, [r7, #28]
            break;
 8009c2a:	e012      	b.n	8009c52 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base);
 8009c2c:	68b8      	ldr	r0, [r7, #8]
 8009c2e:	f000 fce1 	bl	800a5f4 <lv_obj_get_width>
 8009c32:	4603      	mov	r3, r0
 8009c34:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009c36:	68b8      	ldr	r0, [r7, #8]
 8009c38:	f000 fcea 	bl	800a610 <lv_obj_get_height>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	b29c      	uxth	r4, r3
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fce5 	bl	800a610 <lv_obj_get_height>
 8009c46:	4603      	mov	r3, r0
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	1ae3      	subs	r3, r4, r3
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	83bb      	strh	r3, [r7, #28]
            break;
 8009c50:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 fc64 	bl	800a520 <lv_obj_get_parent>
 8009c58:	61b8      	str	r0, [r7, #24]
    lv_coord_t base_abs_x = base->coords.x1;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	8a1b      	ldrh	r3, [r3, #16]
 8009c5e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t base_abs_y = base->coords.y1;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	8a5b      	ldrh	r3, [r3, #18]
 8009c64:	82bb      	strh	r3, [r7, #20]
    lv_coord_t par_abs_x  = par->coords.x1;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	8a1b      	ldrh	r3, [r3, #16]
 8009c6a:	827b      	strh	r3, [r7, #18]
    lv_coord_t par_abs_y  = par->coords.y1;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	8a5b      	ldrh	r3, [r3, #18]
 8009c70:	823b      	strh	r3, [r7, #16]
    new_x += x_mod + base_abs_x;
 8009c72:	88ba      	ldrh	r2, [r7, #4]
 8009c74:	8afb      	ldrh	r3, [r7, #22]
 8009c76:	4413      	add	r3, r2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	8bfb      	ldrh	r3, [r7, #30]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	83fb      	strh	r3, [r7, #30]
    new_y += y_mod + base_abs_y;
 8009c82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009c84:	8abb      	ldrh	r3, [r7, #20]
 8009c86:	4413      	add	r3, r2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	8bbb      	ldrh	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	83bb      	strh	r3, [r7, #28]
    new_x -= par_abs_x;
 8009c92:	8bfa      	ldrh	r2, [r7, #30]
 8009c94:	8a7b      	ldrh	r3, [r7, #18]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	83fb      	strh	r3, [r7, #30]
    new_y -= par_abs_y;
 8009c9c:	8bba      	ldrh	r2, [r7, #28]
 8009c9e:	8a3b      	ldrh	r3, [r7, #16]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	83bb      	strh	r3, [r7, #28]

    lv_obj_set_pos(obj, new_x, new_y);
 8009ca6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009caa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff fc5d 	bl	8009570 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	79fa      	ldrb	r2, [r7, #7]
 8009cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88ba      	ldrh	r2, [r7, #4]
 8009cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 0;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009cd6:	f36f 0341 	bfc	r3, #1, #1
 8009cda:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 8009cde:	bf00      	nop
 8009ce0:	3724      	adds	r7, #36	; 0x24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd90      	pop	{r4, r7, pc}
 8009ce6:	bf00      	nop

08009ce8 <lv_obj_align_origo>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	71fb      	strb	r3, [r7, #7]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fc46 	bl	800a590 <lv_obj_get_x>
 8009d04:	4603      	mov	r3, r0
 8009d06:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 fc5a 	bl	800a5c2 <lv_obj_get_y>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fc6e 	bl	800a5f4 <lv_obj_get_width>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	0fda      	lsrs	r2, r3, #31
 8009d1c:	4413      	add	r3, r2
 8009d1e:	105b      	asrs	r3, r3, #1
 8009d20:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fc74 	bl	800a610 <lv_obj_get_height>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	0fda      	lsrs	r2, r3, #31
 8009d2c:	4413      	add	r3, r2
 8009d2e:	105b      	asrs	r3, r3, #1
 8009d30:	843b      	strh	r3, [r7, #32]

    if(base == NULL) {
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <lv_obj_align_origo+0x58>
        base = lv_obj_get_parent(obj);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fbf1 	bl	800a520 <lv_obj_get_parent>
 8009d3e:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	2b14      	cmp	r3, #20
 8009d44:	f200 8195 	bhi.w	800a072 <lv_obj_align_origo+0x38a>
 8009d48:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <lv_obj_align_origo+0x68>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009da5 	.word	0x08009da5
 8009d54:	08009ddb 	.word	0x08009ddb
 8009d58:	08009ded 	.word	0x08009ded
 8009d5c:	08009e11 	.word	0x08009e11
 8009d60:	08009e2d 	.word	0x08009e2d
 8009d64:	08009e49 	.word	0x08009e49
 8009d68:	08009e77 	.word	0x08009e77
 8009d6c:	08009e9d 	.word	0x08009e9d
 8009d70:	08009ec1 	.word	0x08009ec1
 8009d74:	08009eef 	.word	0x08009eef
 8009d78:	08009f01 	.word	0x08009f01
 8009d7c:	08009f25 	.word	0x08009f25
 8009d80:	08009f41 	.word	0x08009f41
 8009d84:	08009f5d 	.word	0x08009f5d
 8009d88:	08009f8b 	.word	0x08009f8b
 8009d8c:	08009fb1 	.word	0x08009fb1
 8009d90:	08009fc3 	.word	0x08009fc3
 8009d94:	08009fe7 	.word	0x08009fe7
 8009d98:	0800a003 	.word	0x0800a003
 8009d9c:	0800a01f 	.word	0x0800a01f
 8009da0:	0800a04d 	.word	0x0800a04d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009da4:	68b8      	ldr	r0, [r7, #8]
 8009da6:	f000 fc25 	bl	800a5f4 <lv_obj_get_width>
 8009daa:	4603      	mov	r3, r0
 8009dac:	0fda      	lsrs	r2, r3, #31
 8009dae:	4413      	add	r3, r2
 8009db0:	105b      	asrs	r3, r3, #1
 8009db2:	b21b      	sxth	r3, r3
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009dbe:	68b8      	ldr	r0, [r7, #8]
 8009dc0:	f000 fc26 	bl	800a610 <lv_obj_get_height>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	0fda      	lsrs	r2, r3, #31
 8009dc8:	4413      	add	r3, r2
 8009dca:	105b      	asrs	r3, r3, #1
 8009dcc:	b21b      	sxth	r3, r3
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	8c3b      	ldrh	r3, [r7, #32]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009dd8:	e14b      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 8009dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ddc:	425b      	negs	r3, r3
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009de2:	8c3b      	ldrh	r3, [r7, #32]
 8009de4:	425b      	negs	r3, r3
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009dea:	e142      	b.n	800a072 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	f000 fc01 	bl	800a5f4 <lv_obj_get_width>
 8009df2:	4603      	mov	r3, r0
 8009df4:	0fda      	lsrs	r2, r3, #31
 8009df6:	4413      	add	r3, r2
 8009df8:	105b      	asrs	r3, r3, #1
 8009dfa:	b21b      	sxth	r3, r3
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009e06:	8c3b      	ldrh	r3, [r7, #32]
 8009e08:	425b      	negs	r3, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009e0e:	e130      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009e10:	68b8      	ldr	r0, [r7, #8]
 8009e12:	f000 fbef 	bl	800a5f4 <lv_obj_get_width>
 8009e16:	4603      	mov	r3, r0
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009e22:	8c3b      	ldrh	r3, [r7, #32]
 8009e24:	425b      	negs	r3, r3
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009e2a:	e122      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8009e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e2e:	425b      	negs	r3, r3
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009e34:	68b8      	ldr	r0, [r7, #8]
 8009e36:	f000 fbeb 	bl	800a610 <lv_obj_get_height>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	8c3b      	ldrh	r3, [r7, #32]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009e46:	e114      	b.n	800a072 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f000 fbd3 	bl	800a5f4 <lv_obj_get_width>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	0fda      	lsrs	r2, r3, #31
 8009e52:	4413      	add	r3, r2
 8009e54:	105b      	asrs	r3, r3, #1
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009e62:	68b8      	ldr	r0, [r7, #8]
 8009e64:	f000 fbd4 	bl	800a610 <lv_obj_get_height>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	8c3b      	ldrh	r3, [r7, #32]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009e74:	e0fd      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	f000 fbbc 	bl	800a5f4 <lv_obj_get_width>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009e88:	68b8      	ldr	r0, [r7, #8]
 8009e8a:	f000 fbc1 	bl	800a610 <lv_obj_get_height>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	8c3b      	ldrh	r3, [r7, #32]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009e9a:	e0ea      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8009e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e9e:	425b      	negs	r3, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009ea4:	68b8      	ldr	r0, [r7, #8]
 8009ea6:	f000 fbb3 	bl	800a610 <lv_obj_get_height>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	0fda      	lsrs	r2, r3, #31
 8009eae:	4413      	add	r3, r2
 8009eb0:	105b      	asrs	r3, r3, #1
 8009eb2:	b21b      	sxth	r3, r3
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	8c3b      	ldrh	r3, [r7, #32]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009ebe:	e0d8      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009ec0:	68b8      	ldr	r0, [r7, #8]
 8009ec2:	f000 fb97 	bl	800a5f4 <lv_obj_get_width>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009ed2:	68b8      	ldr	r0, [r7, #8]
 8009ed4:	f000 fb9c 	bl	800a610 <lv_obj_get_height>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	0fda      	lsrs	r2, r3, #31
 8009edc:	4413      	add	r3, r2
 8009ede:	105b      	asrs	r3, r3, #1
 8009ee0:	b21b      	sxth	r3, r3
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	8c3b      	ldrh	r3, [r7, #32]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009eec:	e0c1      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 8009eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009ef6:	8c3b      	ldrh	r3, [r7, #32]
 8009ef8:	425b      	negs	r3, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009efe:	e0b8      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009f00:	68b8      	ldr	r0, [r7, #8]
 8009f02:	f000 fb77 	bl	800a5f4 <lv_obj_get_width>
 8009f06:	4603      	mov	r3, r0
 8009f08:	0fda      	lsrs	r2, r3, #31
 8009f0a:	4413      	add	r3, r2
 8009f0c:	105b      	asrs	r3, r3, #1
 8009f0e:	b21b      	sxth	r3, r3
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009f1a:	8c3b      	ldrh	r3, [r7, #32]
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009f22:	e0a6      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009f24:	68b8      	ldr	r0, [r7, #8]
 8009f26:	f000 fb65 	bl	800a5f4 <lv_obj_get_width>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009f36:	8c3b      	ldrh	r3, [r7, #32]
 8009f38:	425b      	negs	r3, r3
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009f3e:	e098      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8009f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f42:	425b      	negs	r3, r3
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f000 fb61 	bl	800a610 <lv_obj_get_height>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	8c3b      	ldrh	r3, [r7, #32]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009f5a:	e08a      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f000 fb49 	bl	800a5f4 <lv_obj_get_width>
 8009f62:	4603      	mov	r3, r0
 8009f64:	0fda      	lsrs	r2, r3, #31
 8009f66:	4413      	add	r3, r2
 8009f68:	105b      	asrs	r3, r3, #1
 8009f6a:	b21b      	sxth	r3, r3
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009f76:	68b8      	ldr	r0, [r7, #8]
 8009f78:	f000 fb4a 	bl	800a610 <lv_obj_get_height>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	8c3b      	ldrh	r3, [r7, #32]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009f88:	e073      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f000 fb32 	bl	800a5f4 <lv_obj_get_width>
 8009f90:	4603      	mov	r3, r0
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009f9c:	68b8      	ldr	r0, [r7, #8]
 8009f9e:	f000 fb37 	bl	800a610 <lv_obj_get_height>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	8c3b      	ldrh	r3, [r7, #32]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009fae:	e060      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8009fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fb2:	425b      	negs	r3, r3
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009fb8:	8c3b      	ldrh	r3, [r7, #32]
 8009fba:	425b      	negs	r3, r3
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009fc0:	e057      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8009fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009fca:	68b8      	ldr	r0, [r7, #8]
 8009fcc:	f000 fb20 	bl	800a610 <lv_obj_get_height>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	0fda      	lsrs	r2, r3, #31
 8009fd4:	4413      	add	r3, r2
 8009fd6:	105b      	asrs	r3, r3, #1
 8009fd8:	b21b      	sxth	r3, r3
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	8c3b      	ldrh	r3, [r7, #32]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009fe4:	e045      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8009fe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fe8:	425b      	negs	r3, r3
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009fee:	68b8      	ldr	r0, [r7, #8]
 8009ff0:	f000 fb0e 	bl	800a610 <lv_obj_get_height>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	8c3b      	ldrh	r3, [r7, #32]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800a000:	e037      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800a002:	68b8      	ldr	r0, [r7, #8]
 800a004:	f000 faf6 	bl	800a5f4 <lv_obj_get_width>
 800a008:	4603      	mov	r3, r0
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	b29b      	uxth	r3, r3
 800a012:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 800a014:	8c3b      	ldrh	r3, [r7, #32]
 800a016:	425b      	negs	r3, r3
 800a018:	b29b      	uxth	r3, r3
 800a01a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800a01c:	e029      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800a01e:	68b8      	ldr	r0, [r7, #8]
 800a020:	f000 fae8 	bl	800a5f4 <lv_obj_get_width>
 800a024:	4603      	mov	r3, r0
 800a026:	b29a      	uxth	r2, r3
 800a028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800a030:	68b8      	ldr	r0, [r7, #8]
 800a032:	f000 faed 	bl	800a610 <lv_obj_get_height>
 800a036:	4603      	mov	r3, r0
 800a038:	0fda      	lsrs	r2, r3, #31
 800a03a:	4413      	add	r3, r2
 800a03c:	105b      	asrs	r3, r3, #1
 800a03e:	b21b      	sxth	r3, r3
 800a040:	b29a      	uxth	r2, r3
 800a042:	8c3b      	ldrh	r3, [r7, #32]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800a04a:	e012      	b.n	800a072 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f000 fad1 	bl	800a5f4 <lv_obj_get_width>
 800a052:	4603      	mov	r3, r0
 800a054:	b29a      	uxth	r2, r3
 800a056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800a05e:	68b8      	ldr	r0, [r7, #8]
 800a060:	f000 fad6 	bl	800a610 <lv_obj_get_height>
 800a064:	4603      	mov	r3, r0
 800a066:	b29a      	uxth	r2, r3
 800a068:	8c3b      	ldrh	r3, [r7, #32]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800a070:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f000 fa54 	bl	800a520 <lv_obj_get_parent>
 800a078:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	8a1b      	ldrh	r3, [r3, #16]
 800a07e:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	8a5b      	ldrh	r3, [r3, #18]
 800a084:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	8a1b      	ldrh	r3, [r3, #16]
 800a08a:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	8a5b      	ldrh	r3, [r3, #18]
 800a090:	82bb      	strh	r3, [r7, #20]
    new_x += x_mod + base_abs_x;
 800a092:	88ba      	ldrh	r2, [r7, #4]
 800a094:	8b7b      	ldrh	r3, [r7, #26]
 800a096:	4413      	add	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a09c:	4413      	add	r3, r2
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_mod + base_abs_y;
 800a0a2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a0a4:	8b3b      	ldrh	r3, [r7, #24]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 800a0b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0b4:	8afb      	ldrh	r3, [r7, #22]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 800a0bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0be:	8abb      	ldrh	r3, [r7, #20]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_obj_set_pos(obj, new_x, new_y);
 800a0c6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a0ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff fa4d 	bl	8009570 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	79fa      	ldrb	r2, [r7, #7]
 800a0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	88ba      	ldrh	r2, [r7, #4]
 800a0e2:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a0e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 1;
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800a0f6:	f043 0302 	orr.w	r3, r3, #2
 800a0fa:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 800a0fe:	bf00      	nop
 800a100:	3728      	adds	r7, #40	; 0x28
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop

0800a108 <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    if(obj->realign.origo_align)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d010      	beq.n	800a142 <lv_obj_realign+0x3a>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	4603      	mov	r3, r0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fdd4 	bl	8009ce8 <lv_obj_align_origo>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 800a140:	e00f      	b.n	800a162 <lv_obj_realign+0x5a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4603      	mov	r3, r0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fb5f 	bl	8009820 <lv_obj_align>
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <lv_obj_set_style>:
 * Set a new style for an object
 * @param obj pointer to an object
 * @param style_p pointer to the new style
 */
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
    obj->style_p = style;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	629a      	str	r2, [r3, #40]	; 0x28

    /*Send a signal about style change to every children with NULL style*/
    refresh_children_style(obj);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fc71 	bl	800aa62 <refresh_children_style>

    /*Notify the object about the style change too*/
    lv_obj_refresh_style(obj);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f804 	bl	800a18e <lv_obj_refresh_style>
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <lv_obj_refresh_style>:
/**
 * Notify an object about its style is modified
 * @param obj pointer to an object
 */
void lv_obj_refresh_style(lv_obj_t * obj)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff f8eb 	bl	8009372 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2104      	movs	r1, #4
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff f8e2 	bl	8009372 <lv_obj_invalidate>
}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
    obj->click = (en == true ? 1 : 0);
 800a1c2:	78f9      	ldrb	r1, [r7, #3]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800a1ca:	f361 0300 	bfi	r3, r1, #0, #1
 800a1ce:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <lv_obj_set_drag>:
 * Enable the dragging of an object
 * @param obj pointer to an object
 * @param en true: make the object dragable
 */
void lv_obj_set_drag(lv_obj_t * obj, bool en)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <lv_obj_set_drag+0x1a>
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff ffdf 	bl	800a1b6 <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 800a1f8:	78f9      	ldrb	r1, [r7, #3]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800a200:	f361 0341 	bfi	r3, r1, #1, #1
 800a204:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <lv_obj_set_drag_throw>:
 * Enable the throwing of an object after is is dragged
 * @param obj pointer to an object
 * @param en true: enable the drag throw
 */
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
    obj->drag_throw = (en == true ? 1 : 0);
 800a21c:	78f9      	ldrb	r1, [r7, #3]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800a224:	f361 0382 	bfi	r3, r1, #2, #1
 800a228:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <lv_obj_set_parent_event>:
 * Propagate the events to the parent too
 * @param obj pointer to an object
 * @param en true: enable the event propagation
 */
void lv_obj_set_parent_event(lv_obj_t * obj, bool en)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
    obj->parent_event = (en == true ? 1 : 0);
 800a244:	78f9      	ldrb	r1, [r7, #3]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800a24c:	f361 13c7 	bfi	r3, r1, #7, #1
 800a250:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <lv_obj_set_protect>:
 * Set a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	70fb      	strb	r3, [r7, #3]
    obj->protect |= prot;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	4313      	orrs	r3, r2
 800a276:	b2da      	uxtb	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <lv_obj_clear_protect>:
 * Clear a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
    prot = (~prot) & 0xFF;
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	43db      	mvns	r3, r3
 800a29a:	70fb      	strb	r3, [r7, #3]
    obj->protect &= prot;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <lv_obj_set_event_cb>:
 * Used by the user to react on event which happens with the object.
 * @param obj pointer to an object
 * @param event_cb the new event function
 */
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
    obj->event_cb = event_cb;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	619a      	str	r2, [r3, #24]
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <lv_event_send+0x18>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e009      	b.n	800a302 <lv_event_send+0x2c>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6998      	ldr	r0, [r3, #24]
 800a2f2:	7afa      	ldrb	r2, [r7, #11]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68f9      	ldr	r1, [r7, #12]
 800a2f8:	f000 f808 	bl	800a30c <lv_event_send_func>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
    return res;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	; 0x28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	4613      	mov	r3, r2
 800a31a:	71fb      	strb	r3, [r7, #7]
    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 800a320:	2300      	movs	r3, #0
 800a322:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 800a324:	2300      	movs	r3, #0
 800a326:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 800a328:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <lv_event_send_func+0xcc>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <lv_event_send_func+0x2a>
        event_temp_data.prev = event_temp_data_head;
 800a330:	4b29      	ldr	r3, [pc, #164]	; (800a3d8 <lv_event_send_func+0xcc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 800a336:	4a28      	ldr	r2, [pc, #160]	; (800a3d8 <lv_event_send_func+0xcc>)
 800a338:	f107 0310 	add.w	r3, r7, #16
 800a33c:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 800a33e:	4b27      	ldr	r3, [pc, #156]	; (800a3dc <lv_event_send_func+0xd0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 800a344:	4a25      	ldr	r2, [pc, #148]	; (800a3dc <lv_event_send_func+0xd0>)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 800a34a:	f7fe fb89 	bl	8008a60 <lv_indev_get_act>
 800a34e:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <lv_event_send_func+0x5e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <lv_event_send_func+0x5e>
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	79f9      	ldrb	r1, [r7, #7]
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <lv_event_send_func+0x6e>
 800a370:	79fa      	ldrb	r2, [r7, #7]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4611      	mov	r1, r2
 800a376:	68b8      	ldr	r0, [r7, #8]
 800a378:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 800a37a:	4a18      	ldr	r2, [pc, #96]	; (800a3dc <lv_event_send_func+0xd0>)
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 800a380:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <lv_event_send_func+0xcc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	4a14      	ldr	r2, [pc, #80]	; (800a3d8 <lv_event_send_func+0xcc>)
 800a388:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 800a38a:	7d3b      	ldrb	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <lv_event_send_func+0x88>
        return LV_RES_INV;
 800a390:	2300      	movs	r3, #0
 800a392:	e01d      	b.n	800a3d0 <lv_event_send_func+0xc4>
    }

    if(obj) {
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d019      	beq.n	800a3ce <lv_event_send_func+0xc2>
        if(obj->parent_event && obj->par) {
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d011      	beq.n	800a3ce <lv_event_send_func+0xc2>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00d      	beq.n	800a3ce <lv_event_send_func+0xc2>
            lv_res_t res = lv_event_send(obj->par, event, data);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	79f9      	ldrb	r1, [r7, #7]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff ff8b 	bl	800a2d6 <lv_event_send>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 800a3c4:	7ffb      	ldrb	r3, [r7, #31]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d001      	beq.n	800a3ce <lv_event_send_func+0xc2>
                return LV_RES_INV;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e000      	b.n	800a3d0 <lv_event_send_func+0xc4>
            }
        }
    }

    return LV_RES_OK;
 800a3ce:	2301      	movs	r3, #1
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3728      	adds	r7, #40	; 0x28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20017760 	.word	0x20017760
 800a3dc:	20017764 	.word	0x20017764

0800a3e0 <lv_event_get_data>:
/**
 * Get the `data` parameter of the current event
 * @return the `data` parameter
 */
const void * lv_event_get_data(void)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
    return event_act_data;
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <lv_event_get_data+0x14>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20017764 	.word	0x20017764

0800a3f8 <lv_obj_set_signal_cb>:
 * Always call the previous signal function in the new.
 * @param obj pointer to an object
 * @param cb the new signal function
 */
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
    obj->signal_cb = signal_cb;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	61da      	str	r2, [r3, #28]
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <lv_obj_set_design_cb>:
 * Set a new design function for an object
 * @param obj pointer to an object
 * @param design_cb the new design function
 */
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
    obj->design_cb = design_cb;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	621a      	str	r2, [r3, #32]
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <lv_obj_allocate_ext_attr>:
 * @param obj pointer to an object
 * @param ext_size the size of the new ext. data
 * @return Normal pointer to the allocated ext
 */
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	807b      	strh	r3, [r7, #2]
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	887a      	ldrh	r2, [r7, #2]
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f00c fdc9 	bl	8016fdc <lv_mem_realloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	625a      	str	r2, [r3, #36]	; 0x24

    return (void *)obj->ext_attr;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <lv_obj_refresh_ext_draw_pad>:
/**
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    obj->ext_draw_pad = 0;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	869a      	strh	r2, [r3, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	2200      	movs	r2, #0
 800a470:	2105      	movs	r1, #5
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	4798      	blx	r3

    lv_obj_invalidate(obj);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe ff7b 	bl	8009372 <lv_obj_invalidate>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
    const lv_obj_t * par = obj;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f000 f843 	bl	800a520 <lv_obj_get_parent>
 800a49a:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f6      	bne.n	800a490 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_p;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    const lv_obj_t * scr;

    if(obj->par == NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <lv_obj_get_disp+0x16>
        scr = obj; /*`obj` is a screen*/
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e003      	b.n	800a4ca <lv_obj_get_disp+0x1e>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff ffde 	bl	800a484 <lv_obj_get_screen>
 800a4c8:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800a4ca:	4814      	ldr	r0, [pc, #80]	; (800a51c <lv_obj_get_disp+0x70>)
 800a4cc:	f00c fb9e 	bl	8016c0c <lv_ll_get_head>
 800a4d0:	6138      	str	r0, [r7, #16]
 800a4d2:	e01b      	b.n	800a50c <lv_obj_get_disp+0x60>
    {
        lv_obj_t * s;
        LV_LL_READ(d->scr_ll, s)
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	3328      	adds	r3, #40	; 0x28
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f00c fb97 	bl	8016c0c <lv_ll_get_head>
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	e00c      	b.n	800a4fc <lv_obj_get_disp+0x50>
        {
            if(s == scr) return d;
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d101      	bne.n	800a4ee <lv_obj_get_disp+0x42>
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	e012      	b.n	800a514 <lv_obj_get_disp+0x68>
        LV_LL_READ(d->scr_ll, s)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3328      	adds	r3, #40	; 0x28
 800a4f2:	68f9      	ldr	r1, [r7, #12]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f00c fbaf 	bl	8016c58 <lv_ll_get_next>
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1ef      	bne.n	800a4e2 <lv_obj_get_disp+0x36>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800a502:	6939      	ldr	r1, [r7, #16]
 800a504:	4805      	ldr	r0, [pc, #20]	; (800a51c <lv_obj_get_disp+0x70>)
 800a506:	f00c fba7 	bl	8016c58 <lv_ll_get_next>
 800a50a:	6138      	str	r0, [r7, #16]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e0      	bne.n	800a4d4 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	2001bb88 	.word	0x2001bb88

0800a520 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    return obj->par;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
    lv_obj_t * result = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <lv_obj_get_child+0x22>
        result = lv_ll_get_head(&obj->child_ll);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3304      	adds	r3, #4
 800a550:	4618      	mov	r0, r3
 800a552:	f00c fb5b 	bl	8016c0c <lv_ll_get_head>
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	e006      	b.n	800a568 <lv_obj_get_child+0x30>
    } else {
        result = lv_ll_get_next(&obj->child_ll, child);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3304      	adds	r3, #4
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f00c fb79 	bl	8016c58 <lv_ll_get_next>
 800a566:	60f8      	str	r0, [r7, #12]
    }

    return result;
 800a568:	68fb      	ldr	r3, [r7, #12]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
    lv_area_copy(cords_p, &obj->coords);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3310      	adds	r3, #16
 800a580:	4619      	mov	r1, r3
 800a582:	6838      	ldr	r0, [r7, #0]
 800a584:	f7fe fb4c 	bl	8008c20 <lv_area_copy>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff ffc1 	bl	800a520 <lv_obj_get_parent>
 800a59e:	60f8      	str	r0, [r7, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	817b      	strh	r3, [r7, #10]

    return rel_x;
 800a5b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff ffa8 	bl	800a520 <lv_obj_get_parent>
 800a5d0:	60f8      	str	r0, [r7, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	817b      	strh	r3, [r7, #10]

    return rel_y;
 800a5e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
    return lv_area_get_width(&obj->coords);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3310      	adds	r3, #16
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fb1b 	bl	8008c3c <lv_area_get_width>
 800a606:	4603      	mov	r3, r0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
    return lv_area_get_height(&obj->coords);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3310      	adds	r3, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fb24 	bl	8008c6a <lv_area_get_height>
 800a622:	4603      	mov	r3, r0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <lv_obj_get_auto_realign>:
 * Get the automatic realign property of the object.
 * @param obj pointer to an object
 * @return  true: auto realign is enabled; false: auto realign is disabled
 */
bool lv_obj_get_auto_realign(lv_obj_t * obj)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    return obj->realign.auto_realign ? true : false;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bf14      	ite	ne
 800a642:	2301      	movne	r3, #1
 800a644:	2300      	moveq	r3, #0
 800a646:	b2db      	uxtb	r3, r3
#else
    (void)obj;
    return false;
#endif
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <lv_obj_get_style>:
 * Get the style pointer of an object (if NULL get style of the parent)
 * @param obj pointer to an object
 * @return pointer to a style
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    const lv_style_t * style_act = obj->style_p;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a660:	617b      	str	r3, [r7, #20]
    if(style_act == NULL) {
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d12c      	bne.n	800a6c2 <lv_obj_get_style+0x6e>
        lv_obj_t * par = obj->par;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	613b      	str	r3, [r7, #16]

        while(par) {
 800a66e:	e025      	b.n	800a6bc <lv_obj_get_style+0x68>
            if(par->style_p) {
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01e      	beq.n	800a6b6 <lv_obj_get_style+0x62>
                if(par->style_p->glass == 0) {
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d116      	bne.n	800a6b6 <lv_obj_get_style+0x62>
#if LV_USE_GROUP == 0
                    style_act = par->style_p;
#else
                    /*If a parent is focused then use then focused style*/
                    lv_group_t * g = lv_obj_get_group(par);
 800a688:	6938      	ldr	r0, [r7, #16]
 800a68a:	f000 f8aa 	bl	800a7e2 <lv_obj_get_group>
 800a68e:	60f8      	str	r0, [r7, #12]
                    if(lv_group_get_focused(g) == par) {
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f7fe f888 	bl	80087a6 <lv_group_get_focused>
 800a696:	4602      	mov	r2, r0
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d107      	bne.n	800a6ae <lv_obj_get_style+0x5a>
                        style_act = lv_group_mod_style(g, par->style_p);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7fe f84e 	bl	8008746 <lv_group_mod_style>
 800a6aa:	6178      	str	r0, [r7, #20]
                    } else {
                        style_act = par->style_p;
                    }
#endif
                    break;
 800a6ac:	e009      	b.n	800a6c2 <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	617b      	str	r3, [r7, #20]
                    break;
 800a6b4:	e005      	b.n	800a6c2 <lv_obj_get_style+0x6e>
                }
            }
            par = par->par;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	613b      	str	r3, [r7, #16]
        while(par) {
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1d6      	bne.n	800a670 <lv_obj_get_style+0x1c>
        }
    }
#if LV_USE_GROUP
    if(obj->group_p) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <lv_obj_get_style+0x96>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe f869 	bl	80087a6 <lv_group_get_focused>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d106      	bne.n	800a6ea <lv_obj_get_style+0x96>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	6979      	ldr	r1, [r7, #20]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe f82f 	bl	8008746 <lv_group_mod_style>
 800a6e8:	6178      	str	r0, [r7, #20]
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <lv_obj_get_style+0xa0>
 800a6f0:	4b03      	ldr	r3, [pc, #12]	; (800a700 <lv_obj_get_style+0xac>)
 800a6f2:	617b      	str	r3, [r7, #20]

    return style_act;
 800a6f4:	697b      	ldr	r3, [r7, #20]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	2001ba40 	.word	0x2001ba40

0800a704 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    return obj->hidden == 0 ? false : true;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a712:	f003 0310 	and.w	r3, r3, #16
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bf14      	ite	ne
 800a71c:	2301      	movne	r3, #1
 800a71e:	2300      	moveq	r3, #0
 800a720:	b2db      	uxtb	r3, r3
}
 800a722:	4618      	mov	r0, r3
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <lv_obj_get_opa_scale>:
 * Get the opa scale parameter of an object
 * @param obj pointer to an object
 * @return opa scale [0..255]
 */
lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
    const lv_obj_t * parent = obj;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60fb      	str	r3, [r7, #12]

    while(parent) {
 800a73a:	e00f      	b.n	800a75c <lv_obj_get_opa_scale+0x2e>
        if(parent->opa_scale_en) return parent->opa_scale;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <lv_obj_get_opa_scale+0x26>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a752:	e007      	b.n	800a764 <lv_obj_get_opa_scale+0x36>
        parent = lv_obj_get_parent(parent);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff fee3 	bl	800a520 <lv_obj_get_parent>
 800a75a:	60f8      	str	r0, [r7, #12]
    while(parent) {
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1ec      	bne.n	800a73c <lv_obj_get_opa_scale+0xe>
    }

    return LV_OPA_COVER;
 800a762:	23ff      	movs	r3, #255	; 0xff
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
    return (obj->protect & prot) == 0 ? false : true;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	4013      	ands	r3, r2
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	bf14      	ite	ne
 800a788:	2301      	movne	r3, #1
 800a78a:	2300      	moveq	r3, #0
 800a78c:	b2db      	uxtb	r3, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <lv_obj_get_signal_cb>:
 * Get the signal function of an object
 * @param obj pointer to an object
 * @return the signal function
 */
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
    return obj->signal_cb;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <lv_obj_get_design_cb>:
 * Get the design function of an object
 * @param obj pointer to an object
 * @return the design function
 */
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
    return obj->design_cb;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <lv_obj_get_ext_attr>:
 * @param obj pointer to an object
 * @return the ext pointer but not the dynamic version
 *         Use it as ext->data1, and NOT da(ext)->data1
 */
void * lv_obj_get_ext_attr(const lv_obj_t * obj)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
    return obj->ext_attr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
    return obj->group_p;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
    if(obj->group_p) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <lv_obj_is_focused+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd ffc9 	bl	80087a6 <lv_group_get_focused>
 800a814:	4602      	mov	r2, r0
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d101      	bne.n	800a820 <lv_obj_is_focused+0x26>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e000      	b.n	800a822 <lv_obj_is_focused+0x28>
    }

    return false;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return true/false, depends on 'mode'
 */
static bool lv_obj_design(lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode)
{
 800a82a:	b590      	push	{r4, r7, lr}
 800a82c:	b08b      	sub	sp, #44	; 0x2c
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	4613      	mov	r3, r2
 800a836:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d16a      	bne.n	800a914 <lv_obj_design+0xea>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3310      	adds	r3, #16
 800a842:	4619      	mov	r1, r3
 800a844:	68b8      	ldr	r0, [r7, #8]
 800a846:	f00b fe32 	bl	80164ae <lv_area_is_in>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f083 0301 	eor.w	r3, r3, #1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <lv_obj_design+0x30>
 800a856:	2300      	movs	r3, #0
 800a858:	e070      	b.n	800a93c <lv_obj_design+0x112>

        /*Can cover the area only if fully solid (no opacity)*/
        const lv_style_t * style = lv_obj_get_style(obj);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7ff fefa 	bl	800a654 <lv_obj_get_style>
 800a860:	6238      	str	r0, [r7, #32]
        if(style->body.opa < LV_OPA_MAX) return false;
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	7a1b      	ldrb	r3, [r3, #8]
 800a866:	2bfa      	cmp	r3, #250	; 0xfa
 800a868:	d801      	bhi.n	800a86e <lv_obj_design+0x44>
 800a86a:	2300      	movs	r3, #0
 800a86c:	e066      	b.n	800a93c <lv_obj_design+0x112>

        /* Because of the radius it is not sure the area is covered
         * Check the areas where there is no radius*/
        lv_coord_t r = style->body.radius;
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	83fb      	strh	r3, [r7, #30]

        if(r == LV_RADIUS_CIRCLE) return false;
 800a874:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a878:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d101      	bne.n	800a884 <lv_obj_design+0x5a>
 800a880:	2300      	movs	r3, #0
 800a882:	e05b      	b.n	800a93c <lv_obj_design+0x112>

        lv_area_t area_tmp;

        /*Check horizontally without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 800a884:	f107 0314 	add.w	r3, r7, #20
 800a888:	4619      	mov	r1, r3
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fe71 	bl	800a572 <lv_obj_get_coords>
        area_tmp.x1 += r;
 800a890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a894:	b29a      	uxth	r2, r3
 800a896:	8bfb      	ldrh	r3, [r7, #30]
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	b21b      	sxth	r3, r3
 800a89e:	82bb      	strh	r3, [r7, #20]
        area_tmp.x2 -= r;
 800a8a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	8bfb      	ldrh	r3, [r7, #30]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	b21b      	sxth	r3, r3
 800a8ae:	833b      	strh	r3, [r7, #24]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68b8      	ldr	r0, [r7, #8]
 800a8b8:	f00b fdf9 	bl	80164ae <lv_area_is_in>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f083 0301 	eor.w	r3, r3, #1
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <lv_obj_design+0xa2>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e037      	b.n	800a93c <lv_obj_design+0x112>

        /*Check vertically without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 800a8cc:	f107 0314 	add.w	r3, r7, #20
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff fe4d 	bl	800a572 <lv_obj_get_coords>
        area_tmp.y1 += r;
 800a8d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	8bfb      	ldrh	r3, [r7, #30]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	b21b      	sxth	r3, r3
 800a8e6:	82fb      	strh	r3, [r7, #22]
        area_tmp.y2 -= r;
 800a8e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	8bfb      	ldrh	r3, [r7, #30]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	b21b      	sxth	r3, r3
 800a8f6:	837b      	strh	r3, [r7, #26]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	68b8      	ldr	r0, [r7, #8]
 800a900:	f00b fdd5 	bl	80164ae <lv_area_is_in>
 800a904:	4603      	mov	r3, r0
 800a906:	f083 0301 	eor.w	r3, r3, #1
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d014      	beq.n	800a93a <lv_obj_design+0x110>
 800a910:	2300      	movs	r3, #0
 800a912:	e013      	b.n	800a93c <lv_obj_design+0x112>

    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10f      	bne.n	800a93a <lv_obj_design+0x110>
        const lv_style_t * style = lv_obj_get_style(obj);
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7ff fe9a 	bl	800a654 <lv_obj_get_style>
 800a920:	6278      	str	r0, [r7, #36]	; 0x24
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f103 0410 	add.w	r4, r3, #16
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff ff00 	bl	800a72e <lv_obj_get_opa_scale>
 800a92e:	4603      	mov	r3, r0
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	4620      	mov	r0, r4
 800a936:	f005 fbfc 	bl	8010132 <lv_draw_rect>
    }

    return true;
 800a93a:	2301      	movs	r3, #1
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	372c      	adds	r7, #44	; 0x2c
 800a940:	46bd      	mov	sp, r7
 800a942:	bd90      	pop	{r4, r7, pc}

0800a944 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	460b      	mov	r3, r1
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	72fb      	strb	r3, [r7, #11]
    (void)param;

    lv_res_t res = LV_RES_OK;
 800a952:	2301      	movs	r3, #1
 800a954:	77fb      	strb	r3, [r7, #31]

    const lv_style_t * style = lv_obj_get_style(obj);
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7ff fe7c 	bl	800a654 <lv_obj_get_style>
 800a95c:	61b8      	str	r0, [r7, #24]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d109      	bne.n	800a978 <lv_obj_signal+0x34>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800a964:	2101      	movs	r1, #1
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff ff00 	bl	800a76c <lv_obj_is_protected>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d022      	beq.n	800a9b8 <lv_obj_signal+0x74>
 800a972:	2300      	movs	r3, #0
 800a974:	77fb      	strb	r3, [r7, #31]
 800a976:	e01f      	b.n	800a9b8 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	2b05      	cmp	r3, #5
 800a97c:	d10d      	bne.n	800a99a <lv_obj_signal+0x56>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800a98a:	429a      	cmp	r2, r3
 800a98c:	dd14      	ble.n	800a9b8 <lv_obj_signal+0x74>
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	869a      	strh	r2, [r3, #52]	; 0x34
 800a998:	e00e      	b.n	800a9b8 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d103      	bne.n	800a9a8 <lv_obj_signal+0x64>
        lv_obj_refresh_ext_draw_pad(obj);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7ff fd5b 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
 800a9a6:	e007      	b.n	800a9b8 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b06      	cmp	r3, #6
 800a9ac:	d104      	bne.n	800a9b8 <lv_obj_signal+0x74>
        lv_obj_type_t * buf = param;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	617b      	str	r3, [r7, #20]
        buf->type[0]        = "lv_obj";
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	4a03      	ldr	r2, [pc, #12]	; (800a9c4 <lv_obj_signal+0x80>)
 800a9b6:	601a      	str	r2, [r3, #0]
    }

    return res;
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	0802d408 	.word	0x0802d408

0800a9c8 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	807b      	strh	r3, [r7, #2]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f00c f915 	bl	8016c0c <lv_ll_get_head>
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	e036      	b.n	800aa54 <refresh_children_position+0x8c>
    {
        i->coords.x1 += x_diff;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	887b      	ldrh	r3, [r7, #2]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	b21a      	sxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	883b      	ldrh	r3, [r7, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	b21a      	sxth	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	887b      	ldrh	r3, [r7, #2]
 800aa18:	4413      	add	r3, r2
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	b21a      	sxth	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	883b      	ldrh	r3, [r7, #0]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	b21a      	sxth	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 800aa36:	f9b7 2000 	ldrsh.w	r2, [r7]
 800aa3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff ffc1 	bl	800a9c8 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f00c f903 	bl	8016c58 <lv_ll_get_next>
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1c5      	bne.n	800a9e6 <refresh_children_position+0x1e>
    }
}
 800aa5a:	bf00      	nop
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff fd63 	bl	800a538 <lv_obj_get_child>
 800aa72:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 800aa74:	e01a      	b.n	800aaac <refresh_children_style+0x4a>
        if(child->style_p == NULL) {
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f7ff ffef 	bl	800aa62 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f7ff fb82 	bl	800a18e <lv_obj_refresh_style>
 800aa8a:	e00a      	b.n	800aaa2 <refresh_children_style+0x40>
        } else if(child->style_p->glass) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <refresh_children_style+0x40>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff ffe0 	bl	800aa62 <refresh_children_style>
        }
        child = lv_obj_get_child(obj, child);
 800aaa2:	68f9      	ldr	r1, [r7, #12]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fd47 	bl	800a538 <lv_obj_get_child>
 800aaaa:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e1      	bne.n	800aa76 <refresh_children_style+0x14>
    }
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b088      	sub	sp, #32
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4618      	mov	r0, r3
 800aac8:	f00c f8a0 	bl	8016c0c <lv_ll_get_head>
 800aacc:	61f8      	str	r0, [r7, #28]

    /*Remove from the group; remove before transversing children so that
     * the object still has access to all children during the
     * LV_SIGNAL_DEFOCUS call*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff fe87 	bl	800a7e2 <lv_obj_get_group>
 800aad4:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00f      	beq.n	800aafc <delete_children+0x42>
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fd fd68 	bl	80085b2 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 800aae2:	e00b      	b.n	800aafc <delete_children+0x42>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3304      	adds	r3, #4
 800aae8:	69f9      	ldr	r1, [r7, #28]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f00c f8b4 	bl	8016c58 <lv_ll_get_next>
 800aaf0:	60f8      	str	r0, [r7, #12]

        /*Call the recursive del to the child too*/
        delete_children(i);
 800aaf2:	69f8      	ldr	r0, [r7, #28]
 800aaf4:	f7ff ffe1 	bl	800aaba <delete_children>

        /*Set i to the next node*/
        i = i_next;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f0      	bne.n	800aae4 <delete_children+0x2a>
    }

    /*Let the suer free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800ab02:	2200      	movs	r2, #0
 800ab04:	2113      	movs	r1, #19
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff fbe5 	bl	800a2d6 <lv_event_send>

    lv_event_mark_deleted(obj);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f853 	bl	800abb8 <lv_event_mark_deleted>

    /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 800ab12:	2100      	movs	r1, #0
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f00b f963 	bl	8015de0 <lv_anim_del>
#endif

    /* Reset the input devices if
     * the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f00b f8a0 	bl	8015c60 <lv_indev_get_next>
 800ab20:	61b8      	str	r0, [r7, #24]
    while(indev) {
 800ab22:	e026      	b.n	800ab72 <delete_children+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d004      	beq.n	800ab38 <delete_children+0x7e>
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d102      	bne.n	800ab3e <delete_children+0x84>
            lv_indev_reset(indev);
 800ab38:	69b8      	ldr	r0, [r7, #24]
 800ab3a:	f7fd ffae 	bl	8008a9a <lv_indev_reset>
        }

        if(indev->proc.types.pointer.last_pressed == obj) {
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d102      	bne.n	800ab4e <delete_children+0x94>
            indev->proc.types.pointer.last_pressed = NULL;
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d108      	bne.n	800ab6a <delete_children+0xb0>
 800ab58:	f7fe f856 	bl	8008c08 <lv_indev_get_obj_act>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d102      	bne.n	800ab6a <delete_children+0xb0>
            lv_indev_reset(indev);
 800ab64:	69b8      	ldr	r0, [r7, #24]
 800ab66:	f7fd ff98 	bl	8008a9a <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 800ab6a:	69b8      	ldr	r0, [r7, #24]
 800ab6c:	f00b f878 	bl	8015c60 <lv_indev_get_next>
 800ab70:	61b8      	str	r0, [r7, #24]
    while(indev) {
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1d5      	bne.n	800ab24 <delete_children+0x6a>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff fcd1 	bl	800a520 <lv_obj_get_parent>
 800ab7e:	6138      	str	r0, [r7, #16]
    lv_ll_rem(&(par->child_ll), obj);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	3304      	adds	r3, #4
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f00b ff92 	bl	8016ab0 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	2200      	movs	r2, #0
 800ab92:	2100      	movs	r1, #0
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <delete_children+0xf0>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00c f9f1 	bl	8016f8c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f00c f9ee 	bl	8016f8c <lv_mem_free>
}
 800abb0:	bf00      	nop
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <lv_event_mark_deleted>:

static void lv_event_mark_deleted(lv_obj_t * obj)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
    lv_event_temp_data_t * t = event_temp_data_head;
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <lv_event_mark_deleted+0x38>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]

    while(t) {
 800abc6:	e00a      	b.n	800abde <lv_event_mark_deleted+0x26>
        if(t->obj == obj) t->deleted = true;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d102      	bne.n	800abd8 <lv_event_mark_deleted+0x20>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	711a      	strb	r2, [r3, #4]
        t = t->prev;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	60fb      	str	r3, [r7, #12]
    while(t) {
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f1      	bne.n	800abc8 <lv_event_mark_deleted+0x10>
    }
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	20017760 	.word	0x20017760

0800abf4 <lv_area_copy>:
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800abfe:	2208      	movs	r2, #8
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f020 fa04 	bl	802b010 <memcpy>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <lv_area_get_width>:
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	b21b      	sxth	r3, r3
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <lv_area_get_height>:
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	b21b      	sxth	r3, r3
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 800ac70:	bf00      	nop
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
	...

0800ac7c <lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d102      	bne.n	800ac92 <lv_inv_area+0x16>
 800ac8c:	f00a ff2a 	bl	8015ae4 <lv_disp_get_default>
 800ac90:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 809b 	beq.w	800add0 <lv_inv_area+0x154>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d107      	bne.n	800acb0 <lv_inv_area+0x34>
        disp->inv_p = 0;
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800aca6:	f36f 0309 	bfc	r3, #0, #10
 800acaa:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
        return;
 800acae:	e092      	b.n	800add6 <lv_inv_area+0x15a>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f00a ff1f 	bl	8015afc <lv_disp_get_hor_res>
 800acbe:	4603      	mov	r3, r0
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	b21b      	sxth	r3, r3
 800acc8:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f00a ff37 	bl	8015b3e <lv_disp_get_ver_res>
 800acd0:	4603      	mov	r3, r0
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	b21b      	sxth	r3, r3
 800acda:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800acdc:	f107 0214 	add.w	r2, r7, #20
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f00b faf6 	bl	80162d8 <lv_area_intersect>
 800acec:	4603      	mov	r3, r0
 800acee:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 800acf0:	7f7b      	ldrb	r3, [r7, #29]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d06f      	beq.n	800add6 <lv_inv_area+0x15a>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d008      	beq.n	800ad10 <lv_inv_area+0x94>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	4a36      	ldr	r2, [pc, #216]	; (800addc <lv_inv_area+0x160>)
 800ad04:	6812      	ldr	r2, [r2, #0]
 800ad06:	4610      	mov	r0, r2
 800ad08:	f107 020c 	add.w	r2, r7, #12
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 800ad10:	2300      	movs	r3, #0
 800ad12:	83fb      	strh	r3, [r7, #30]
 800ad14:	e010      	b.n	800ad38 <lv_inv_area+0xbc>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800ad16:	8bfb      	ldrh	r3, [r7, #30]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	441a      	add	r2, r3
 800ad20:	f107 030c 	add.w	r3, r7, #12
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f00b fbc1 	bl	80164ae <lv_area_is_in>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d150      	bne.n	800add4 <lv_inv_area+0x158>
        for(i = 0; i < disp->inv_p; i++) {
 800ad32:	8bfb      	ldrh	r3, [r7, #30]
 800ad34:	3301      	adds	r3, #1
 800ad36:	83fb      	strh	r3, [r7, #30]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800ad3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	8bfb      	ldrh	r3, [r7, #30]
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d3e4      	bcc.n	800ad16 <lv_inv_area+0x9a>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800ad52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b1f      	cmp	r3, #31
 800ad5a:	d810      	bhi.n	800ad7e <lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800ad62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	3308      	adds	r3, #8
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f107 020c 	add.w	r2, r7, #12
 800ad74:	4611      	mov	r1, r2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff ff3c 	bl	800abf4 <lv_area_copy>
 800ad7c:	e016      	b.n	800adac <lv_inv_area+0x130>
        } else { /*If no place for the area add the screen*/
            disp->inv_p = 0;
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800ad84:	f36f 0309 	bfc	r3, #0, #10
 800ad88:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800ad92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	3308      	adds	r3, #8
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f107 0214 	add.w	r2, r7, #20
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff ff24 	bl	800abf4 <lv_area_copy>
        }
        disp->inv_p++;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800adb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	3301      	adds	r3, #1
 800adba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adbe:	b299      	uxth	r1, r3
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800adc6:	f361 0309 	bfi	r3, r1, #0, #10
 800adca:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
 800adce:	e002      	b.n	800add6 <lv_inv_area+0x15a>
    if(!disp) return;
 800add0:	bf00      	nop
 800add2:	e000      	b.n	800add6 <lv_inv_area+0x15a>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800add4:	bf00      	nop
    }
}
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	2001776c 	.word	0x2001776c

0800ade0 <lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * lv_refr_get_disp_refreshing(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
    return disp_refr;
 800ade4:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <lv_refr_get_disp_refreshing+0x14>)
 800ade6:	681b      	ldr	r3, [r3, #0]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	2001776c 	.word	0x2001776c

0800adf8 <lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void lv_disp_refr_task(lv_task_t * task)
{
 800adf8:	b5b0      	push	{r4, r5, r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 800ae00:	f00a ff5e 	bl	8015cc0 <lv_tick_get>
 800ae04:	61f8      	str	r0, [r7, #28]

    disp_refr = task->user_data;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	4a6c      	ldr	r2, [pc, #432]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae0c:	6013      	str	r3, [r2, #0]

    lv_refr_join_area();
 800ae0e:	f000 f8d9 	bl	800afc4 <lv_refr_join_area>

    lv_refr_areas();
 800ae12:	f000 f973 	bl	800b0fc <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800ae16:	4b69      	ldr	r3, [pc, #420]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800ae1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 80c2 	beq.w	800afae <lv_disp_refr_task+0x1b6>
        /*In true double buffered mode copy the refreshed areas to the new VDB to keep it up to
         * date*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800ae2a:	4b64      	ldr	r3, [pc, #400]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f00a fef5 	bl	8015c1e <lv_disp_is_true_double_buf>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 808b 	beq.w	800af52 <lv_disp_refr_task+0x15a>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800ae3c:	4b5f      	ldr	r3, [pc, #380]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f00a fec9 	bl	8015bd8 <lv_disp_get_buf>
 800ae46:	61b8      	str	r0, [r7, #24]

            /*Flush the content of the VDB*/
            lv_refr_vdb_flush();
 800ae48:	f000 fc5e 	bl	800b708 <lv_refr_vdb_flush>

            /* With true double buffering the flushing should be only the address change of the
             * current frame buffer. Wait until the address change is ready and copy the changed
             * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
            while(vdb->flushing)
 800ae4c:	bf00      	nop
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f8      	bne.n	800ae4e <lv_disp_refr_task+0x56>
                ;

            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	617b      	str	r3, [r7, #20]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d102      	bne.n	800ae74 <lv_disp_refr_task+0x7c>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	e001      	b.n	800ae78 <lv_disp_refr_task+0x80>
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	613b      	str	r3, [r7, #16]

            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800ae7a:	4b50      	ldr	r3, [pc, #320]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f00a fe3c 	bl	8015afc <lv_disp_get_hor_res>
 800ae84:	4603      	mov	r3, r0
 800ae86:	81fb      	strh	r3, [r7, #14]
            uint16_t a;
            for(a = 0; a < disp_refr->inv_p; a++) {
 800ae88:	2300      	movs	r3, #0
 800ae8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae8c:	e056      	b.n	800af3c <lv_disp_refr_task+0x144>
                if(disp_refr->inv_area_joined[a] == 0) {
 800ae8e:	4b4b      	ldr	r3, [pc, #300]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae94:	4413      	add	r3, r2
 800ae96:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d14b      	bne.n	800af36 <lv_disp_refr_task+0x13e>
                    lv_coord_t y;
                    uint32_t start_offs =
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800ae9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800aea2:	4b46      	ldr	r3, [pc, #280]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800aea4:	6819      	ldr	r1, [r3, #0]
 800aea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aea8:	3308      	adds	r3, #8
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	440b      	add	r3, r1
 800aeae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aeb2:	fb03 f302 	mul.w	r3, r3, r2
 800aeb6:	4a41      	ldr	r2, [pc, #260]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800aebc:	3108      	adds	r1, #8
 800aebe:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 800aec2:	4413      	add	r3, r2
                    uint32_t start_offs =
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	623b      	str	r3, [r7, #32]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800aec8:	4b3c      	ldr	r3, [pc, #240]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aece:	3308      	adds	r3, #8
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	4413      	add	r3, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff fe9b 	bl	800ac10 <lv_area_get_width>
 800aeda:	4603      	mov	r3, r0
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	60bb      	str	r3, [r7, #8]

                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800aee0:	4b36      	ldr	r3, [pc, #216]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aee6:	3308      	adds	r3, #8
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	4413      	add	r3, r2
 800aeec:	885b      	ldrh	r3, [r3, #2]
 800aeee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aef0:	e015      	b.n	800af1e <lv_disp_refr_task+0x126>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	18d0      	adds	r0, r2, r3
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	4413      	add	r3, r2
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	4619      	mov	r1, r3
 800af02:	f020 f885 	bl	802b010 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 800af06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	6a3a      	ldr	r2, [r7, #32]
 800af0e:	4413      	add	r3, r2
 800af10:	623b      	str	r3, [r7, #32]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800af12:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800af16:	b29b      	uxth	r3, r3
 800af18:	3301      	adds	r3, #1
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800af1e:	4b27      	ldr	r3, [pc, #156]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af24:	3308      	adds	r3, #8
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	4413      	add	r3, r2
 800af2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800af2e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800af32:	429a      	cmp	r2, r3
 800af34:	dddd      	ble.n	800aef2 <lv_disp_refr_task+0xfa>
            for(a = 0; a < disp_refr->inv_p; a++) {
 800af36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af38:	3301      	adds	r3, #1
 800af3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800af3c:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800af44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af48:	b29b      	uxth	r3, r3
 800af4a:	461a      	mov	r2, r3
 800af4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af4e:	4293      	cmp	r3, r2
 800af50:	d39d      	bcc.n	800ae8e <lv_disp_refr_task+0x96>
                }
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3340      	adds	r3, #64	; 0x40
 800af58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af5c:	2100      	movs	r1, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f020 f861 	bl	802b026 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800af6c:	2220      	movs	r2, #32
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f020 f858 	bl	802b026 <memset>
        disp_refr->inv_p = 0;
 800af76:	4b11      	ldr	r3, [pc, #68]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800af7e:	f36f 0309 	bfc	r3, #0, #10
 800af82:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 800af86:	4b0d      	ldr	r3, [pc, #52]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00e      	beq.n	800afae <lv_disp_refr_task+0x1b6>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699c      	ldr	r4, [r3, #24]
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <lv_disp_refr_task+0x1c4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	461d      	mov	r5, r3
 800af9c:	69f8      	ldr	r0, [r7, #28]
 800af9e:	f00a fea9 	bl	8015cf4 <lv_tick_elaps>
 800afa2:	4601      	mov	r1, r0
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <lv_disp_refr_task+0x1c8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	4628      	mov	r0, r5
 800afac:	47a0      	blx	r4
        }
    }

    lv_draw_free_buf();
 800afae:	f000 fec3 	bl	800bd38 <lv_draw_free_buf>

    LV_LOG_TRACE("lv_refr_task: ready");
}
 800afb2:	bf00      	nop
 800afb4:	3728      	adds	r7, #40	; 0x28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bdb0      	pop	{r4, r5, r7, pc}
 800afba:	bf00      	nop
 800afbc:	2001776c 	.word	0x2001776c
 800afc0:	20017768 	.word	0x20017768

0800afc4 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800afc4:	b5b0      	push	{r4, r5, r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800afca:	2300      	movs	r3, #0
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	e083      	b.n	800b0d8 <lv_refr_join_area+0x114>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800afd0:	4b49      	ldr	r3, [pc, #292]	; (800b0f8 <lv_refr_join_area+0x134>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d176      	bne.n	800b0d0 <lv_refr_join_area+0x10c>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e067      	b.n	800b0b8 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800afe8:	4b43      	ldr	r3, [pc, #268]	; (800b0f8 <lv_refr_join_area+0x134>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d158      	bne.n	800b0ac <lv_refr_join_area+0xe8>
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	429a      	cmp	r2, r3
 800b000:	d054      	beq.n	800b0ac <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800b002:	4b3d      	ldr	r3, [pc, #244]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	3308      	adds	r3, #8
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	18d0      	adds	r0, r2, r3
 800b00e:	4b3a      	ldr	r3, [pc, #232]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3308      	adds	r3, #8
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	4413      	add	r3, r2
 800b01a:	4619      	mov	r1, r3
 800b01c:	f00b fa19 	bl	8016452 <lv_area_is_on>
 800b020:	4603      	mov	r3, r0
 800b022:	f083 0301 	eor.w	r3, r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d141      	bne.n	800b0b0 <lv_refr_join_area+0xec>
                continue;
            }

            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800b02c:	4b32      	ldr	r3, [pc, #200]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3308      	adds	r3, #8
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	18d1      	adds	r1, r2, r3
 800b038:	4b2f      	ldr	r3, [pc, #188]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3308      	adds	r3, #8
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	441a      	add	r2, r3
 800b044:	463b      	mov	r3, r7
 800b046:	4618      	mov	r0, r3
 800b048:	f00b f997 	bl	801637a <lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800b04c:	463b      	mov	r3, r7
 800b04e:	4618      	mov	r0, r3
 800b050:	f00b f921 	bl	8016296 <lv_area_get_size>
 800b054:	4604      	mov	r4, r0
 800b056:	4b28      	ldr	r3, [pc, #160]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	3308      	adds	r3, #8
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	4618      	mov	r0, r3
 800b064:	f00b f917 	bl	8016296 <lv_area_get_size>
 800b068:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800b06a:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3308      	adds	r3, #8
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	4413      	add	r3, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f00b f90d 	bl	8016296 <lv_area_get_size>
 800b07c:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800b07e:	442b      	add	r3, r5
 800b080:	429c      	cmp	r4, r3
 800b082:	d216      	bcs.n	800b0b2 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800b084:	4b1c      	ldr	r3, [pc, #112]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3308      	adds	r3, #8
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4413      	add	r3, r2
 800b090:	463a      	mov	r2, r7
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff fdad 	bl	800abf4 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800b09a:	4b17      	ldr	r3, [pc, #92]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	e002      	b.n	800b0b2 <lv_refr_join_area+0xee>
                continue;
 800b0ac:	bf00      	nop
 800b0ae:	e000      	b.n	800b0b2 <lv_refr_join_area+0xee>
                continue;
 800b0b0:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800b0c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d38c      	bcc.n	800afe8 <lv_refr_join_area+0x24>
 800b0ce:	e000      	b.n	800b0d2 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800b0d0:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	60bb      	str	r3, [r7, #8]
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <lv_refr_join_area+0x134>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800b0e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f4ff af70 	bcc.w	800afd0 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bdb0      	pop	{r4, r5, r7, pc}
 800b0f8:	2001776c 	.word	0x2001776c

0800b0fc <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
    px_num = 0;
 800b102:	4b1f      	ldr	r3, [pc, #124]	; (800b180 <lv_refr_areas+0x84>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < disp_refr->inv_p; i++) {
 800b108:	2300      	movs	r3, #0
 800b10a:	607b      	str	r3, [r7, #4]
 800b10c:	e028      	b.n	800b160 <lv_refr_areas+0x64>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800b10e:	4b1d      	ldr	r3, [pc, #116]	; (800b184 <lv_refr_areas+0x88>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4413      	add	r3, r2
 800b116:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d11c      	bne.n	800b15a <lv_refr_areas+0x5e>

            lv_refr_area(&disp_refr->inv_areas[i]);
 800b120:	4b18      	ldr	r3, [pc, #96]	; (800b184 <lv_refr_areas+0x88>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3308      	adds	r3, #8
 800b128:	00db      	lsls	r3, r3, #3
 800b12a:	4413      	add	r3, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f82b 	bl	800b188 <lv_refr_area>

            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800b132:	4b14      	ldr	r3, [pc, #80]	; (800b184 <lv_refr_areas+0x88>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00e      	beq.n	800b15a <lv_refr_areas+0x5e>
 800b13c:	4b11      	ldr	r3, [pc, #68]	; (800b184 <lv_refr_areas+0x88>)
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3308      	adds	r3, #8
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4413      	add	r3, r2
 800b148:	4618      	mov	r0, r3
 800b14a:	f00b f8a4 	bl	8016296 <lv_area_get_size>
 800b14e:	4602      	mov	r2, r0
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <lv_refr_areas+0x84>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a0a      	ldr	r2, [pc, #40]	; (800b180 <lv_refr_areas+0x84>)
 800b158:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3301      	adds	r3, #1
 800b15e:	607b      	str	r3, [r7, #4]
 800b160:	4b08      	ldr	r3, [pc, #32]	; (800b184 <lv_refr_areas+0x88>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800b168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	461a      	mov	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4293      	cmp	r3, r2
 800b174:	d3cb      	bcc.n	800b10e <lv_refr_areas+0x12>
        }
    }
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20017768 	.word	0x20017768
 800b184:	2001776c 	.word	0x2001776c

0800b188 <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b08d      	sub	sp, #52	; 0x34
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800b190:	4b7f      	ldr	r3, [pc, #508]	; (800b390 <lv_refr_area+0x208>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f00a fd42 	bl	8015c1e <lv_disp_is_true_double_buf>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d027      	beq.n	800b1f0 <lv_refr_area+0x68>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b1a0:	4b7b      	ldr	r3, [pc, #492]	; (800b390 <lv_refr_area+0x208>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f00a fd17 	bl	8015bd8 <lv_disp_get_buf>
 800b1aa:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800b1b2:	4b77      	ldr	r3, [pc, #476]	; (800b390 <lv_refr_area+0x208>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f00a fca0 	bl	8015afc <lv_disp_get_hor_res>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	b21a      	sxth	r2, r3
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800b1d0:	4b6f      	ldr	r3, [pc, #444]	; (800b390 <lv_refr_area+0x208>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f00a fcb2 	bl	8015b3e <lv_disp_get_ver_res>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	b21a      	sxth	r2, r3
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	82da      	strh	r2, [r3, #22]
        lv_refr_area_part(area_p);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f8d3 	bl	800b394 <lv_refr_area_part>
 800b1ee:	e0cb      	b.n	800b388 <lv_refr_area+0x200>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b1f0:	4b67      	ldr	r3, [pc, #412]	; (800b390 <lv_refr_area+0x208>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f00a fcef 	bl	8015bd8 <lv_disp_get_buf>
 800b1fa:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff fd07 	bl	800ac10 <lv_area_get_width>
 800b202:	4603      	mov	r3, r0
 800b204:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fd19 	bl	800ac3e <lv_area_get_height>
 800b20c:	4603      	mov	r3, r0
 800b20e:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b216:	4b5e      	ldr	r3, [pc, #376]	; (800b390 <lv_refr_area+0x208>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f00a fc8f 	bl	8015b3e <lv_disp_get_ver_res>
 800b220:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800b222:	429c      	cmp	r4, r3
 800b224:	db0c      	blt.n	800b240 <lv_refr_area+0xb8>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800b226:	4b5a      	ldr	r3, [pc, #360]	; (800b390 <lv_refr_area+0x208>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f00a fc87 	bl	8015b3e <lv_disp_get_ver_res>
 800b230:	4603      	mov	r3, r0
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b01      	subs	r3, #1
 800b236:	b29b      	uxth	r3, r3
 800b238:	837b      	strh	r3, [r7, #26]
        lv_coord_t y2 =
 800b23a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b23e:	e002      	b.n	800b246 <lv_refr_area+0xbe>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b246:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b250:	fbb2 f3f3 	udiv	r3, r2, r3
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 800b256:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b25c:	429a      	cmp	r2, r3
 800b25e:	dd02      	ble.n	800b266 <lv_refr_area+0xde>
 800b260:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 800b266:	4b4a      	ldr	r3, [pc, #296]	; (800b390 <lv_refr_area+0x208>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d034      	beq.n	800b2da <lv_refr_area+0x152>
            lv_area_t tmp;
            tmp.x1 = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	81fb      	strh	r3, [r7, #14]

            lv_coord_t y_tmp = max_row - 1;
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	b29b      	uxth	r3, r3
 800b280:	3b01      	subs	r3, #1
 800b282:	b29b      	uxth	r3, r3
 800b284:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = y_tmp;
 800b286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b288:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800b28a:	4b41      	ldr	r3, [pc, #260]	; (800b390 <lv_refr_area+0x208>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	4a3f      	ldr	r2, [pc, #252]	; (800b390 <lv_refr_area+0x208>)
 800b292:	6812      	ldr	r2, [r2, #0]
 800b294:	4610      	mov	r0, r2
 800b296:	f107 020c 	add.w	r2, r7, #12
 800b29a:	4611      	mov	r1, r2
 800b29c:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fccb 	bl	800ac3e <lv_area_get_height>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	da0a      	bge.n	800b2c8 <lv_refr_area+0x140>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                y_tmp--;
 800b2b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(y_tmp != 0);
 800b2be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1df      	bne.n	800b286 <lv_refr_area+0xfe>
 800b2c6:	e000      	b.n	800b2ca <lv_refr_area+0x142>
                if(lv_area_get_height(&tmp) <= max_row) break;
 800b2c8:	bf00      	nop

            if(y_tmp == 0) {
 800b2ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d059      	beq.n	800b386 <lv_refr_area+0x1fe>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            } else {
                max_row = tmp.y2 + 1;
 800b2d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	885b      	ldrh	r3, [r3, #2]
 800b2e2:	853b      	strh	r3, [r7, #40]	; 0x28
 800b2e4:	e02c      	b.n	800b340 <lv_refr_area+0x1b8>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b2fe:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	b29a      	uxth	r2, r3
 800b304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b306:	4413      	add	r3, r2
 800b308:	b29b      	uxth	r3, r3
 800b30a:	3b01      	subs	r3, #1
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	b21a      	sxth	r2, r3
 800b310:	6a3b      	ldr	r3, [r7, #32]
 800b312:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b31a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b31e:	429a      	cmp	r2, r3
 800b320:	da02      	bge.n	800b328 <lv_refr_area+0x1a0>
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	8b7a      	ldrh	r2, [r7, #26]
 800b326:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	8adb      	ldrh	r3, [r3, #22]
 800b32c:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_refr_area_part(area_p);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f830 	bl	800b394 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	b29a      	uxth	r2, r3
 800b338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b33a:	4413      	add	r3, r2
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b340:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	4413      	add	r3, r2
 800b348:	1e5a      	subs	r2, r3, #1
 800b34a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b34e:	429a      	cmp	r2, r3
 800b350:	ddc9      	ble.n	800b2e6 <lv_refr_area+0x15e>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800b352:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b356:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d014      	beq.n	800b388 <lv_refr_area+0x200>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b376:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	8b7a      	ldrh	r2, [r7, #26]
 800b37c:	82da      	strh	r2, [r3, #22]

            /*Refresh this part too*/
            lv_refr_area_part(area_p);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f808 	bl	800b394 <lv_refr_area_part>
 800b384:	e000      	b.n	800b388 <lv_refr_area+0x200>
                return;
 800b386:	bf00      	nop
        }
    }
}
 800b388:	3734      	adds	r7, #52	; 0x34
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	2001776c 	.word	0x2001776c

0800b394 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b39c:	4b2e      	ldr	r3, [pc, #184]	; (800b458 <lv_refr_area_part+0xc4>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f00a fc19 	bl	8015bd8 <lv_disp_get_buf>
 800b3a6:	6178      	str	r0, [r7, #20]

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800b3a8:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <lv_refr_area_part+0xc4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f00a fc1f 	bl	8015bf0 <lv_disp_is_double_buf>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	f083 0301 	eor.w	r3, r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d007      	beq.n	800b3ce <lv_refr_area_part+0x3a>
        while(vdb->flushing)
 800b3be:	bf00      	nop
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1f8      	bne.n	800b3c0 <lv_refr_area_part+0x2c>
    lv_obj_t * top_p;

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f103 0210 	add.w	r2, r3, #16
 800b3d4:	f107 0308 	add.w	r3, r7, #8
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f00a ff7c 	bl	80162d8 <lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800b3e0:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <lv_refr_area_part+0xc4>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fd f849 	bl	800847c <lv_disp_get_scr_act>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	f107 0308 	add.w	r3, r7, #8
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 f832 	bl	800b45c <lv_refr_get_top_obj>
 800b3f8:	6138      	str	r0, [r7, #16]

    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_p, &start_mask);
 800b3fa:	f107 0308 	add.w	r3, r7, #8
 800b3fe:	4619      	mov	r1, r3
 800b400:	6938      	ldr	r0, [r7, #16]
 800b402:	f000 f87f 	bl	800b504 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800b406:	4b14      	ldr	r3, [pc, #80]	; (800b458 <lv_refr_area_part+0xc4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fd f84b 	bl	80084a6 <lv_disp_get_layer_top>
 800b410:	4602      	mov	r2, r0
 800b412:	f107 0308 	add.w	r3, r7, #8
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f000 f873 	bl	800b504 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800b41e:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <lv_refr_area_part+0xc4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f7fd f854 	bl	80084d0 <lv_disp_get_layer_sys>
 800b428:	4602      	mov	r2, r0
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	4619      	mov	r1, r3
 800b430:	4610      	mov	r0, r2
 800b432:	f000 f867 	bl	800b504 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800b436:	4b08      	ldr	r3, [pc, #32]	; (800b458 <lv_refr_area_part+0xc4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f00a fbef 	bl	8015c1e <lv_disp_is_true_double_buf>
 800b440:	4603      	mov	r3, r0
 800b442:	f083 0301 	eor.w	r3, r3, #1
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <lv_refr_area_part+0xbc>
        lv_refr_vdb_flush();
 800b44c:	f000 f95c 	bl	800b708 <lv_refr_vdb_flush>
    }
}
 800b450:	bf00      	nop
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	2001776c 	.word	0x2001776c

0800b45c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	3310      	adds	r3, #16
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f00b f81c 	bl	80164ae <lv_area_is_in>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d03e      	beq.n	800b4fa <lv_refr_get_top_obj+0x9e>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b482:	f003 0310 	and.w	r3, r3, #16
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d136      	bne.n	800b4fa <lv_refr_get_top_obj+0x9e>
        lv_obj_t * i;
        LV_LL_READ(obj->child_ll, i)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	3304      	adds	r3, #4
 800b490:	4618      	mov	r0, r3
 800b492:	f00b fbbb 	bl	8016c0c <lv_ll_get_head>
 800b496:	6138      	str	r0, [r7, #16]
 800b498:	e00e      	b.n	800b4b8 <lv_refr_get_top_obj+0x5c>
        {
            found_p = lv_refr_get_top_obj(area_p, i);
 800b49a:	6939      	ldr	r1, [r7, #16]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff ffdd 	bl	800b45c <lv_refr_get_top_obj>
 800b4a2:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <lv_refr_get_top_obj+0x64>
        LV_LL_READ(obj->child_ll, i)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	6939      	ldr	r1, [r7, #16]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f00b fbd1 	bl	8016c58 <lv_ll_get_next>
 800b4b6:	6138      	str	r0, [r7, #16]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1ed      	bne.n	800b49a <lv_refr_get_top_obj+0x3e>
 800b4be:	e000      	b.n	800b4c2 <lv_refr_get_top_obj+0x66>
                break;
 800b4c0:	bf00      	nop
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d118      	bne.n	800b4fa <lv_refr_get_top_obj+0x9e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800b4c8:	6838      	ldr	r0, [r7, #0]
 800b4ca:	f7ff f8c3 	bl	800a654 <lv_obj_get_style>
 800b4ce:	60f8      	str	r0, [r7, #12]
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	7a1b      	ldrb	r3, [r3, #8]
 800b4d4:	2bff      	cmp	r3, #255	; 0xff
 800b4d6:	d110      	bne.n	800b4fa <lv_refr_get_top_obj+0x9e>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	2202      	movs	r2, #2
 800b4de:	6879      	ldr	r1, [r7, #4]
 800b4e0:	6838      	ldr	r0, [r7, #0]
 800b4e2:	4798      	blx	r3
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <lv_refr_get_top_obj+0x9e>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800b4ea:	6838      	ldr	r0, [r7, #0]
 800b4ec:	f7ff f91f 	bl	800a72e <lv_obj_get_opa_scale>
 800b4f0:	4603      	mov	r3, r0
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800b4f2:	2bff      	cmp	r3, #255	; 0xff
 800b4f4:	d101      	bne.n	800b4fa <lv_refr_get_top_obj+0x9e>
                found_p = obj;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 800b4fa:	697b      	ldr	r3, [r7, #20]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <lv_refr_obj_and_children+0x1c>
 800b514:	4b1c      	ldr	r3, [pc, #112]	; (800b588 <lv_refr_obj_and_children+0x84>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fc ffaf 	bl	800847c <lv_disp_get_scr_act>
 800b51e:	6078      	str	r0, [r7, #4]

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f832 	bl	800b58c <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fe fff7 	bl	800a520 <lv_obj_get_parent>
 800b532:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800b534:	e021      	b.n	800b57a <lv_refr_obj_and_children+0x76>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	3304      	adds	r3, #4
 800b53a:	6939      	ldr	r1, [r7, #16]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f00b fba5 	bl	8016c8c <lv_ll_get_prev>
 800b542:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800b544:	e00a      	b.n	800b55c <lv_refr_obj_and_children+0x58>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f81f 	bl	800b58c <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	3304      	adds	r3, #4
 800b552:	68f9      	ldr	r1, [r7, #12]
 800b554:	4618      	mov	r0, r3
 800b556:	f00b fb99 	bl	8016c8c <lv_ll_get_prev>
 800b55a:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f1      	bne.n	800b546 <lv_refr_obj_and_children+0x42>
        }

        /*Call the post draw design function of the parents of the to object*/
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	2201      	movs	r2, #1
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6978      	ldr	r0, [r7, #20]
 800b56c:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800b572:	6978      	ldr	r0, [r7, #20]
 800b574:	f7fe ffd4 	bl	800a520 <lv_obj_get_parent>
 800b578:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1da      	bne.n	800b536 <lv_refr_obj_and_children+0x32>
    }
}
 800b580:	bf00      	nop
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	2001776c 	.word	0x2001776c

0800b58c <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08e      	sub	sp, #56	; 0x38
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b59c:	f003 0310 	and.w	r3, r3, #16
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f040 80ac 	bne.w	800b700 <lv_refr_obj+0x174>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b5ac:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800b5ae:	f107 0318 	add.w	r3, r7, #24
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7fe ffdc 	bl	800a572 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800b5ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	b21b      	sxth	r3, r3
 800b5c8:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800b5ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	b21b      	sxth	r3, r3
 800b5d8:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800b5da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5e2:	4413      	add	r3, r2
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	b21b      	sxth	r3, r3
 800b5e8:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 800b5ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5f2:	4413      	add	r3, r2
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	b21b      	sxth	r3, r3
 800b5f8:	83fb      	strh	r3, [r7, #30]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800b5fa:	f107 0218 	add.w	r2, r7, #24
 800b5fe:	f107 0320 	add.w	r3, r7, #32
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f00a fe67 	bl	80162d8 <lv_area_intersect>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800b610:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b614:	2b00      	cmp	r3, #0
 800b616:	d074      	beq.n	800b702 <lv_refr_obj+0x176>

        /* Redraw the object */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	f107 0120 	add.w	r1, r7, #32
 800b620:	2200      	movs	r2, #0
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	4798      	blx	r3
        lv_draw_fill(&obj_ext_mask, &obj_ext_mask, debug_color, LV_OPA_50);
        debug_color.full *= 17;
        debug_color.full += 0xA1;
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 800b626:	f107 0318 	add.w	r3, r7, #24
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fe ffa0 	bl	800a572 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800b632:	f107 0218 	add.w	r2, r7, #24
 800b636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f00a fe4b 	bl	80162d8 <lv_area_intersect>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800b648:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d04f      	beq.n	800b6f0 <lv_refr_obj+0x164>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f00b faec 	bl	8016c32 <lv_ll_get_tail>
 800b65a:	6378      	str	r0, [r7, #52]	; 0x34
 800b65c:	e045      	b.n	800b6ea <lv_refr_obj+0x15e>
            {
                lv_obj_get_coords(child_p, &child_area);
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	4619      	mov	r1, r3
 800b664:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b666:	f7fe ff84 	bl	800a572 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b66e:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800b670:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b674:	b29a      	uxth	r2, r3
 800b676:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	b21b      	sxth	r3, r3
 800b67e:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800b680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b684:	b29a      	uxth	r2, r3
 800b686:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	b21b      	sxth	r3, r3
 800b68e:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800b690:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b694:	b29a      	uxth	r2, r3
 800b696:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b698:	4413      	add	r3, r2
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	b21b      	sxth	r3, r3
 800b69e:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800b6a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b6a8:	4413      	add	r3, r2
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	b21b      	sxth	r3, r3
 800b6ae:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800b6b0:	f107 0208 	add.w	r2, r7, #8
 800b6b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b6b8:	f107 0310 	add.w	r3, r7, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f00a fe0b 	bl	80162d8 <lv_area_intersect>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800b6c8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <lv_refr_obj+0x150>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800b6d0:	f107 0310 	add.w	r3, r7, #16
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6d8:	f7ff ff58 	bl	800b58c <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f00b fad2 	bl	8016c8c <lv_ll_get_prev>
 800b6e8:	6378      	str	r0, [r7, #52]	; 0x34
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1b6      	bne.n	800b65e <lv_refr_obj+0xd2>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	f107 0120 	add.w	r1, r7, #32
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
 800b6fe:	e000      	b.n	800b702 <lv_refr_obj+0x176>
    if(obj->hidden != 0) return;
 800b700:	bf00      	nop
    }
}
 800b702:	3738      	adds	r7, #56	; 0x38
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b70e:	4b23      	ldr	r3, [pc, #140]	; (800b79c <lv_refr_vdb_flush+0x94>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f00a fa60 	bl	8015bd8 <lv_disp_get_buf>
 800b718:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800b71a:	4b20      	ldr	r3, [pc, #128]	; (800b79c <lv_refr_vdb_flush+0x94>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4618      	mov	r0, r3
 800b720:	f00a fa66 	bl	8015bf0 <lv_disp_is_double_buf>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <lv_refr_vdb_flush+0x32>
        while(vdb->flushing)
 800b72a:	bf00      	nop
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f8      	bne.n	800b72c <lv_refr_vdb_flush+0x24>
            ;
    }

    vdb->flushing = 1;
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	7e13      	ldrb	r3, [r2, #24]
 800b73e:	f043 0301 	orr.w	r3, r3, #1
 800b742:	7613      	strb	r3, [r2, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800b744:	f7ff fb4c 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800b748:	6038      	str	r0, [r7, #0]
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <lv_refr_vdb_flush+0x5c>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	6838      	ldr	r0, [r7, #0]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	f102 0110 	add.w	r1, r2, #16
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	6892      	ldr	r2, [r2, #8]
 800b762:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d012      	beq.n	800b792 <lv_refr_vdb_flush+0x8a>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00e      	beq.n	800b792 <lv_refr_vdb_flush+0x8a>
        if(vdb->buf_act == vdb->buf1)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689a      	ldr	r2, [r3, #8]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d104      	bne.n	800b78a <lv_refr_vdb_flush+0x82>
            vdb->buf_act = vdb->buf2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800b788:	e003      	b.n	800b792 <lv_refr_vdb_flush+0x8a>
            vdb->buf_act = vdb->buf1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	609a      	str	r2, [r3, #8]
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	2001776c 	.word	0x2001776c

0800b7a0 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	71bb      	strb	r3, [r7, #6]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800b7b2:	79bb      	ldrb	r3, [r7, #6]
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	f003 0307 	and.w	r3, r3, #7
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	7b3b      	ldrb	r3, [r7, #12]
 800b7c0:	f362 0302 	bfi	r3, r2, #0, #3
 800b7c4:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	08db      	lsrs	r3, r3, #3
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	7b3b      	ldrb	r3, [r7, #12]
 800b7d4:	f362 03c7 	bfi	r3, r2, #3, #5
 800b7d8:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800b7da:	797b      	ldrb	r3, [r7, #5]
 800b7dc:	08db      	lsrs	r3, r3, #3
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	7b7b      	ldrb	r3, [r7, #13]
 800b7e8:	f362 0304 	bfi	r3, r2, #0, #5
 800b7ec:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800b7ee:	79bb      	ldrb	r3, [r7, #6]
 800b7f0:	089b      	lsrs	r3, r3, #2
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	f003 0307 	and.w	r3, r3, #7
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	7b7b      	ldrb	r3, [r7, #13]
 800b7fc:	f362 1347 	bfi	r3, r2, #5, #3
 800b800:	737b      	strb	r3, [r7, #13]
    return color;
 800b802:	89bb      	ldrh	r3, [r7, #12]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 800b810:	b598      	push	{r3, r4, r7, lr}
 800b812:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 800b814:	4aad      	ldr	r2, [pc, #692]	; (800bacc <lv_style_init+0x2bc>)
 800b816:	7813      	ldrb	r3, [r2, #0]
 800b818:	f36f 0300 	bfc	r3, #0, #1
 800b81c:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800b81e:	4bab      	ldr	r3, [pc, #684]	; (800bacc <lv_style_init+0x2bc>)
 800b820:	22ff      	movs	r2, #255	; 0xff
 800b822:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800b824:	4aa9      	ldr	r2, [pc, #676]	; (800bacc <lv_style_init+0x2bc>)
 800b826:	4baa      	ldr	r3, [pc, #680]	; (800bad0 <lv_style_init+0x2c0>)
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 800b82c:	4aa7      	ldr	r2, [pc, #668]	; (800bacc <lv_style_init+0x2bc>)
 800b82e:	4ba8      	ldr	r3, [pc, #672]	; (800bad0 <lv_style_init+0x2c0>)
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 800b834:	4ba5      	ldr	r3, [pc, #660]	; (800bacc <lv_style_init+0x2bc>)
 800b836:	2200      	movs	r2, #0
 800b838:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 800b83a:	4ba4      	ldr	r3, [pc, #656]	; (800bacc <lv_style_init+0x2bc>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 800b840:	4ba2      	ldr	r3, [pc, #648]	; (800bacc <lv_style_init+0x2bc>)
 800b842:	2200      	movs	r2, #0
 800b844:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 800b846:	4ba1      	ldr	r3, [pc, #644]	; (800bacc <lv_style_init+0x2bc>)
 800b848:	2200      	movs	r2, #0
 800b84a:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 800b84c:	4b9f      	ldr	r3, [pc, #636]	; (800bacc <lv_style_init+0x2bc>)
 800b84e:	2200      	movs	r2, #0
 800b850:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800b852:	4b9e      	ldr	r3, [pc, #632]	; (800bacc <lv_style_init+0x2bc>)
 800b854:	2205      	movs	r2, #5
 800b856:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800b858:	4b9c      	ldr	r3, [pc, #624]	; (800bacc <lv_style_init+0x2bc>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	815a      	strh	r2, [r3, #10]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800b85e:	4b9b      	ldr	r3, [pc, #620]	; (800bacc <lv_style_init+0x2bc>)
 800b860:	22ff      	movs	r2, #255	; 0xff
 800b862:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 800b864:	4b99      	ldr	r3, [pc, #612]	; (800bacc <lv_style_init+0x2bc>)
 800b866:	2200      	movs	r2, #0
 800b868:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800b86a:	4b98      	ldr	r3, [pc, #608]	; (800bacc <lv_style_init+0x2bc>)
 800b86c:	220f      	movs	r2, #15
 800b86e:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800b870:	4a96      	ldr	r2, [pc, #600]	; (800bacc <lv_style_init+0x2bc>)
 800b872:	4b98      	ldr	r3, [pc, #608]	; (800bad4 <lv_style_init+0x2c4>)
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800b878:	4b94      	ldr	r3, [pc, #592]	; (800bacc <lv_style_init+0x2bc>)
 800b87a:	2201      	movs	r2, #1
 800b87c:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 800b87e:	4b93      	ldr	r3, [pc, #588]	; (800bacc <lv_style_init+0x2bc>)
 800b880:	2200      	movs	r2, #0
 800b882:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 800b884:	4b91      	ldr	r3, [pc, #580]	; (800bacc <lv_style_init+0x2bc>)
 800b886:	22ff      	movs	r2, #255	; 0xff
 800b888:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800b88c:	4c8f      	ldr	r4, [pc, #572]	; (800bacc <lv_style_init+0x2bc>)
 800b88e:	2230      	movs	r2, #48	; 0x30
 800b890:	2130      	movs	r1, #48	; 0x30
 800b892:	2030      	movs	r0, #48	; 0x30
 800b894:	f7ff ff84 	bl	800b7a0 <lv_color_make>
 800b898:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800b89a:	4c8c      	ldr	r4, [pc, #560]	; (800bacc <lv_style_init+0x2bc>)
 800b89c:	22d8      	movs	r2, #216	; 0xd8
 800b89e:	2196      	movs	r1, #150	; 0x96
 800b8a0:	2055      	movs	r0, #85	; 0x55
 800b8a2:	f7ff ff7d 	bl	800b7a0 <lv_color_make>
 800b8a6:	8460      	strh	r0, [r4, #34]	; 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800b8a8:	4b88      	ldr	r3, [pc, #544]	; (800bacc <lv_style_init+0x2bc>)
 800b8aa:	4a8b      	ldr	r2, [pc, #556]	; (800bad8 <lv_style_init+0x2c8>)
 800b8ac:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 800b8ae:	4b87      	ldr	r3, [pc, #540]	; (800bacc <lv_style_init+0x2bc>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	851a      	strh	r2, [r3, #40]	; 0x28
    lv_style_scr.text.line_space   = 2;
 800b8b4:	4b85      	ldr	r3, [pc, #532]	; (800bacc <lv_style_init+0x2bc>)
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 800b8ba:	4b84      	ldr	r3, [pc, #528]	; (800bacc <lv_style_init+0x2bc>)
 800b8bc:	22ff      	movs	r2, #255	; 0xff
 800b8be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800b8c2:	4c82      	ldr	r4, [pc, #520]	; (800bacc <lv_style_init+0x2bc>)
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	2120      	movs	r1, #32
 800b8c8:	2020      	movs	r0, #32
 800b8ca:	f7ff ff69 	bl	800b7a0 <lv_color_make>
 800b8ce:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800b8d0:	4b7e      	ldr	r3, [pc, #504]	; (800bacc <lv_style_init+0x2bc>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 800b8d8:	4b7c      	ldr	r3, [pc, #496]	; (800bacc <lv_style_init+0x2bc>)
 800b8da:	22ff      	movs	r2, #255	; 0xff
 800b8dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800b8e0:	4c7a      	ldr	r4, [pc, #488]	; (800bacc <lv_style_init+0x2bc>)
 800b8e2:	2220      	movs	r2, #32
 800b8e4:	2120      	movs	r1, #32
 800b8e6:	2020      	movs	r0, #32
 800b8e8:	f7ff ff5a 	bl	800b7a0 <lv_color_make>
 800b8ec:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_scr.line.width   = 2;
 800b8ee:	4b77      	ldr	r3, [pc, #476]	; (800bacc <lv_style_init+0x2bc>)
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	86da      	strh	r2, [r3, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 800b8f4:	4a75      	ldr	r2, [pc, #468]	; (800bacc <lv_style_init+0x2bc>)
 800b8f6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800b8fa:	f36f 0300 	bfc	r3, #0, #1
 800b8fe:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800b902:	4972      	ldr	r1, [pc, #456]	; (800bacc <lv_style_init+0x2bc>)
 800b904:	4875      	ldr	r0, [pc, #468]	; (800badc <lv_style_init+0x2cc>)
 800b906:	f000 f9cf 	bl	800bca8 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800b90a:	4b74      	ldr	r3, [pc, #464]	; (800badc <lv_style_init+0x2cc>)
 800b90c:	2205      	movs	r2, #5
 800b90e:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 800b910:	4b72      	ldr	r3, [pc, #456]	; (800badc <lv_style_init+0x2cc>)
 800b912:	2205      	movs	r2, #5
 800b914:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 800b916:	4b71      	ldr	r3, [pc, #452]	; (800badc <lv_style_init+0x2cc>)
 800b918:	2205      	movs	r2, #5
 800b91a:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800b91c:	4b6f      	ldr	r3, [pc, #444]	; (800badc <lv_style_init+0x2cc>)
 800b91e:	2205      	movs	r2, #5
 800b920:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800b922:	496e      	ldr	r1, [pc, #440]	; (800badc <lv_style_init+0x2cc>)
 800b924:	486e      	ldr	r0, [pc, #440]	; (800bae0 <lv_style_init+0x2d0>)
 800b926:	f000 f9bf 	bl	800bca8 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800b92a:	4c6d      	ldr	r4, [pc, #436]	; (800bae0 <lv_style_init+0x2d0>)
 800b92c:	22f0      	movs	r2, #240	; 0xf0
 800b92e:	21f0      	movs	r1, #240	; 0xf0
 800b930:	20f0      	movs	r0, #240	; 0xf0
 800b932:	f7ff ff35 	bl	800b7a0 <lv_color_make>
 800b936:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800b938:	4c69      	ldr	r4, [pc, #420]	; (800bae0 <lv_style_init+0x2d0>)
 800b93a:	22f0      	movs	r2, #240	; 0xf0
 800b93c:	21f0      	movs	r1, #240	; 0xf0
 800b93e:	20f0      	movs	r0, #240	; 0xf0
 800b940:	f7ff ff2e 	bl	800b7a0 <lv_color_make>
 800b944:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800b946:	4c66      	ldr	r4, [pc, #408]	; (800bae0 <lv_style_init+0x2d0>)
 800b948:	22f0      	movs	r2, #240	; 0xf0
 800b94a:	21f0      	movs	r1, #240	; 0xf0
 800b94c:	20f0      	movs	r0, #240	; 0xf0
 800b94e:	f7ff ff27 	bl	800b7a0 <lv_color_make>
 800b952:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800b954:	4c62      	ldr	r4, [pc, #392]	; (800bae0 <lv_style_init+0x2d0>)
 800b956:	22d8      	movs	r2, #216	; 0xd8
 800b958:	2196      	movs	r1, #150	; 0x96
 800b95a:	2055      	movs	r0, #85	; 0x55
 800b95c:	f7ff ff20 	bl	800b7a0 <lv_color_make>
 800b960:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800b962:	4a5f      	ldr	r2, [pc, #380]	; (800bae0 <lv_style_init+0x2d0>)
 800b964:	4b5e      	ldr	r3, [pc, #376]	; (800bae0 <lv_style_init+0x2d0>)
 800b966:	885b      	ldrh	r3, [r3, #2]
 800b968:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800b96a:	495c      	ldr	r1, [pc, #368]	; (800badc <lv_style_init+0x2cc>)
 800b96c:	485d      	ldr	r0, [pc, #372]	; (800bae4 <lv_style_init+0x2d4>)
 800b96e:	f000 f99b 	bl	800bca8 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800b972:	4c5c      	ldr	r4, [pc, #368]	; (800bae4 <lv_style_init+0x2d4>)
 800b974:	2220      	movs	r2, #32
 800b976:	2120      	movs	r1, #32
 800b978:	2020      	movs	r0, #32
 800b97a:	f7ff ff11 	bl	800b7a0 <lv_color_make>
 800b97e:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800b980:	4c58      	ldr	r4, [pc, #352]	; (800bae4 <lv_style_init+0x2d4>)
 800b982:	2220      	movs	r2, #32
 800b984:	2120      	movs	r1, #32
 800b986:	2020      	movs	r0, #32
 800b988:	f7ff ff0a 	bl	800b7a0 <lv_color_make>
 800b98c:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800b98e:	4c55      	ldr	r4, [pc, #340]	; (800bae4 <lv_style_init+0x2d4>)
 800b990:	2220      	movs	r2, #32
 800b992:	2120      	movs	r1, #32
 800b994:	2020      	movs	r0, #32
 800b996:	f7ff ff03 	bl	800b7a0 <lv_color_make>
 800b99a:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800b99c:	4a51      	ldr	r2, [pc, #324]	; (800bae4 <lv_style_init+0x2d4>)
 800b99e:	4b4c      	ldr	r3, [pc, #304]	; (800bad0 <lv_style_init+0x2c0>)
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800b9a4:	4a4f      	ldr	r2, [pc, #316]	; (800bae4 <lv_style_init+0x2d4>)
 800b9a6:	4b50      	ldr	r3, [pc, #320]	; (800bae8 <lv_style_init+0x2d8>)
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800b9ac:	4b4d      	ldr	r3, [pc, #308]	; (800bae4 <lv_style_init+0x2d4>)
 800b9ae:	2206      	movs	r2, #6
 800b9b0:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800b9b2:	4c4c      	ldr	r4, [pc, #304]	; (800bae4 <lv_style_init+0x2d4>)
 800b9b4:	2240      	movs	r2, #64	; 0x40
 800b9b6:	2140      	movs	r1, #64	; 0x40
 800b9b8:	2040      	movs	r0, #64	; 0x40
 800b9ba:	f7ff fef1 	bl	800b7a0 <lv_color_make>
 800b9be:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800b9c0:	4b48      	ldr	r3, [pc, #288]	; (800bae4 <lv_style_init+0x2d4>)
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800b9c6:	4b47      	ldr	r3, [pc, #284]	; (800bae4 <lv_style_init+0x2d4>)
 800b9c8:	224c      	movs	r2, #76	; 0x4c
 800b9ca:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800b9cc:	4945      	ldr	r1, [pc, #276]	; (800bae4 <lv_style_init+0x2d4>)
 800b9ce:	4847      	ldr	r0, [pc, #284]	; (800baec <lv_style_init+0x2dc>)
 800b9d0:	f000 f96a 	bl	800bca8 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 800b9d4:	4c45      	ldr	r4, [pc, #276]	; (800baec <lv_style_init+0x2dc>)
 800b9d6:	22e0      	movs	r2, #224	; 0xe0
 800b9d8:	21e0      	movs	r1, #224	; 0xe0
 800b9da:	20e0      	movs	r0, #224	; 0xe0
 800b9dc:	f7ff fee0 	bl	800b7a0 <lv_color_make>
 800b9e0:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800b9e2:	4c42      	ldr	r4, [pc, #264]	; (800baec <lv_style_init+0x2dc>)
 800b9e4:	22e0      	movs	r2, #224	; 0xe0
 800b9e6:	21e0      	movs	r1, #224	; 0xe0
 800b9e8:	20e0      	movs	r0, #224	; 0xe0
 800b9ea:	f7ff fed9 	bl	800b7a0 <lv_color_make>
 800b9ee:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800b9f0:	4c3e      	ldr	r4, [pc, #248]	; (800baec <lv_style_init+0x2dc>)
 800b9f2:	22c0      	movs	r2, #192	; 0xc0
 800b9f4:	21c0      	movs	r1, #192	; 0xc0
 800b9f6:	20c0      	movs	r0, #192	; 0xc0
 800b9f8:	f7ff fed2 	bl	800b7a0 <lv_color_make>
 800b9fc:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 800b9fe:	4c3b      	ldr	r4, [pc, #236]	; (800baec <lv_style_init+0x2dc>)
 800ba00:	22c7      	movs	r2, #199	; 0xc7
 800ba02:	219a      	movs	r1, #154	; 0x9a
 800ba04:	206b      	movs	r0, #107	; 0x6b
 800ba06:	f7ff fecb 	bl	800b7a0 <lv_color_make>
 800ba0a:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800ba0c:	4c37      	ldr	r4, [pc, #220]	; (800baec <lv_style_init+0x2dc>)
 800ba0e:	228b      	movs	r2, #139	; 0x8b
 800ba10:	2159      	movs	r1, #89	; 0x59
 800ba12:	202b      	movs	r0, #43	; 0x2b
 800ba14:	f7ff fec4 	bl	800b7a0 <lv_color_make>
 800ba18:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800ba1a:	4c34      	ldr	r4, [pc, #208]	; (800baec <lv_style_init+0x2dc>)
 800ba1c:	2242      	movs	r2, #66	; 0x42
 800ba1e:	212c      	movs	r1, #44	; 0x2c
 800ba20:	2015      	movs	r0, #21
 800ba22:	f7ff febd 	bl	800b7a0 <lv_color_make>
 800ba26:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800ba28:	492c      	ldr	r1, [pc, #176]	; (800badc <lv_style_init+0x2cc>)
 800ba2a:	4831      	ldr	r0, [pc, #196]	; (800baf0 <lv_style_init+0x2e0>)
 800ba2c:	f000 f93c 	bl	800bca8 <lv_style_copy>
    lv_style_transp.glass             = 1;
 800ba30:	4a2f      	ldr	r2, [pc, #188]	; (800baf0 <lv_style_init+0x2e0>)
 800ba32:	7813      	ldrb	r3, [r2, #0]
 800ba34:	f043 0301 	orr.w	r3, r3, #1
 800ba38:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 800ba3a:	4b2d      	ldr	r3, [pc, #180]	; (800baf0 <lv_style_init+0x2e0>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 800ba40:	4b2b      	ldr	r3, [pc, #172]	; (800baf0 <lv_style_init+0x2e0>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800ba46:	492a      	ldr	r1, [pc, #168]	; (800baf0 <lv_style_init+0x2e0>)
 800ba48:	482a      	ldr	r0, [pc, #168]	; (800baf4 <lv_style_init+0x2e4>)
 800ba4a:	f000 f92d 	bl	800bca8 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 800ba4e:	4b29      	ldr	r3, [pc, #164]	; (800baf4 <lv_style_init+0x2e4>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 800ba54:	4b27      	ldr	r3, [pc, #156]	; (800baf4 <lv_style_init+0x2e4>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 800ba5a:	4b26      	ldr	r3, [pc, #152]	; (800baf4 <lv_style_init+0x2e4>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800ba60:	4b24      	ldr	r3, [pc, #144]	; (800baf4 <lv_style_init+0x2e4>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800ba66:	4923      	ldr	r1, [pc, #140]	; (800baf4 <lv_style_init+0x2e4>)
 800ba68:	4823      	ldr	r0, [pc, #140]	; (800baf8 <lv_style_init+0x2e8>)
 800ba6a:	f000 f91d 	bl	800bca8 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 800ba6e:	4b22      	ldr	r3, [pc, #136]	; (800baf8 <lv_style_init+0x2e8>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800ba74:	4919      	ldr	r1, [pc, #100]	; (800badc <lv_style_init+0x2cc>)
 800ba76:	4821      	ldr	r0, [pc, #132]	; (800bafc <lv_style_init+0x2ec>)
 800ba78:	f000 f916 	bl	800bca8 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800ba7c:	4c1f      	ldr	r4, [pc, #124]	; (800bafc <lv_style_init+0x2ec>)
 800ba7e:	22d0      	movs	r2, #208	; 0xd0
 800ba80:	21a2      	movs	r1, #162	; 0xa2
 800ba82:	2076      	movs	r0, #118	; 0x76
 800ba84:	f7ff fe8c 	bl	800b7a0 <lv_color_make>
 800ba88:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800ba8a:	4c1c      	ldr	r4, [pc, #112]	; (800bafc <lv_style_init+0x2ec>)
 800ba8c:	225d      	movs	r2, #93	; 0x5d
 800ba8e:	213a      	movs	r1, #58	; 0x3a
 800ba90:	2019      	movs	r0, #25
 800ba92:	f7ff fe85 	bl	800b7a0 <lv_color_make>
 800ba96:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800ba98:	4b18      	ldr	r3, [pc, #96]	; (800bafc <lv_style_init+0x2ec>)
 800ba9a:	2206      	movs	r2, #6
 800ba9c:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 800ba9e:	4b17      	ldr	r3, [pc, #92]	; (800bafc <lv_style_init+0x2ec>)
 800baa0:	2219      	movs	r2, #25
 800baa2:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800baa4:	4b15      	ldr	r3, [pc, #84]	; (800bafc <lv_style_init+0x2ec>)
 800baa6:	2219      	movs	r2, #25
 800baa8:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800baaa:	4b14      	ldr	r3, [pc, #80]	; (800bafc <lv_style_init+0x2ec>)
 800baac:	2210      	movs	r2, #16
 800baae:	82da      	strh	r2, [r3, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 800bab0:	4b12      	ldr	r3, [pc, #72]	; (800bafc <lv_style_init+0x2ec>)
 800bab2:	2210      	movs	r2, #16
 800bab4:	831a      	strh	r2, [r3, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800bab6:	4b11      	ldr	r3, [pc, #68]	; (800bafc <lv_style_init+0x2ec>)
 800bab8:	220a      	movs	r2, #10
 800baba:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800babc:	4c0f      	ldr	r4, [pc, #60]	; (800bafc <lv_style_init+0x2ec>)
 800babe:	2228      	movs	r2, #40	; 0x28
 800bac0:	2119      	movs	r1, #25
 800bac2:	200b      	movs	r0, #11
 800bac4:	f7ff fe6c 	bl	800b7a0 <lv_color_make>
 800bac8:	8160      	strh	r0, [r4, #10]
 800baca:	e019      	b.n	800bb00 <lv_style_init+0x2f0>
 800bacc:	2001bab8 	.word	0x2001bab8
 800bad0:	0802d410 	.word	0x0802d410
 800bad4:	0802d414 	.word	0x0802d414
 800bad8:	20000bf0 	.word	0x20000bf0
 800badc:	2001ba40 	.word	0x2001ba40
 800bae0:	2001bb30 	.word	0x2001bb30
 800bae4:	2001b950 	.word	0x2001b950
 800bae8:	0802d418 	.word	0x0802d418
 800baec:	2001b860 	.word	0x2001b860
 800baf0:	2001b89c 	.word	0x2001b89c
 800baf4:	2001ba04 	.word	0x2001ba04
 800baf8:	2001b98c 	.word	0x2001b98c
 800bafc:	2001b8d8 	.word	0x2001b8d8
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800bb00:	4b63      	ldr	r3, [pc, #396]	; (800bc90 <lv_style_init+0x480>)
 800bb02:	2202      	movs	r2, #2
 800bb04:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 800bb06:	4b62      	ldr	r3, [pc, #392]	; (800bc90 <lv_style_init+0x480>)
 800bb08:	22b2      	movs	r2, #178	; 0xb2
 800bb0a:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800bb0c:	4a60      	ldr	r2, [pc, #384]	; (800bc90 <lv_style_init+0x480>)
 800bb0e:	4b61      	ldr	r3, [pc, #388]	; (800bc94 <lv_style_init+0x484>)
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 800bb14:	4b5e      	ldr	r3, [pc, #376]	; (800bc90 <lv_style_init+0x480>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800bb1a:	4c5d      	ldr	r4, [pc, #372]	; (800bc90 <lv_style_init+0x480>)
 800bb1c:	22ff      	movs	r2, #255	; 0xff
 800bb1e:	21ff      	movs	r1, #255	; 0xff
 800bb20:	20ff      	movs	r0, #255	; 0xff
 800bb22:	f7ff fe3d 	bl	800b7a0 <lv_color_make>
 800bb26:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800bb28:	4c59      	ldr	r4, [pc, #356]	; (800bc90 <lv_style_init+0x480>)
 800bb2a:	22ff      	movs	r2, #255	; 0xff
 800bb2c:	21ff      	movs	r1, #255	; 0xff
 800bb2e:	20ff      	movs	r0, #255	; 0xff
 800bb30:	f7ff fe36 	bl	800b7a0 <lv_color_make>
 800bb34:	8620      	strh	r0, [r4, #48]	; 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800bb36:	4956      	ldr	r1, [pc, #344]	; (800bc90 <lv_style_init+0x480>)
 800bb38:	4857      	ldr	r0, [pc, #348]	; (800bc98 <lv_style_init+0x488>)
 800bb3a:	f000 f8b5 	bl	800bca8 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800bb3e:	4c56      	ldr	r4, [pc, #344]	; (800bc98 <lv_style_init+0x488>)
 800bb40:	2294      	movs	r2, #148	; 0x94
 800bb42:	2162      	movs	r1, #98	; 0x62
 800bb44:	2033      	movs	r0, #51	; 0x33
 800bb46:	f7ff fe2b 	bl	800b7a0 <lv_color_make>
 800bb4a:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800bb4c:	4c52      	ldr	r4, [pc, #328]	; (800bc98 <lv_style_init+0x488>)
 800bb4e:	223c      	movs	r2, #60	; 0x3c
 800bb50:	2126      	movs	r1, #38	; 0x26
 800bb52:	2010      	movs	r0, #16
 800bb54:	f7ff fe24 	bl	800b7a0 <lv_color_make>
 800bb58:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800bb5a:	4c4f      	ldr	r4, [pc, #316]	; (800bc98 <lv_style_init+0x488>)
 800bb5c:	22c6      	movs	r2, #198	; 0xc6
 800bb5e:	21b5      	movs	r1, #181	; 0xb5
 800bb60:	20a4      	movs	r0, #164	; 0xa4
 800bb62:	f7ff fe1d 	bl	800b7a0 <lv_color_make>
 800bb66:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800bb68:	4c4b      	ldr	r4, [pc, #300]	; (800bc98 <lv_style_init+0x488>)
 800bb6a:	22c6      	movs	r2, #198	; 0xc6
 800bb6c:	21b5      	movs	r1, #181	; 0xb5
 800bb6e:	20a4      	movs	r0, #164	; 0xa4
 800bb70:	f7ff fe16 	bl	800b7a0 <lv_color_make>
 800bb74:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800bb76:	4c48      	ldr	r4, [pc, #288]	; (800bc98 <lv_style_init+0x488>)
 800bb78:	22c6      	movs	r2, #198	; 0xc6
 800bb7a:	21b5      	movs	r1, #181	; 0xb5
 800bb7c:	20a4      	movs	r0, #164	; 0xa4
 800bb7e:	f7ff fe0f 	bl	800b7a0 <lv_color_make>
 800bb82:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800bb84:	4942      	ldr	r1, [pc, #264]	; (800bc90 <lv_style_init+0x480>)
 800bb86:	4845      	ldr	r0, [pc, #276]	; (800bc9c <lv_style_init+0x48c>)
 800bb88:	f000 f88e 	bl	800bca8 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800bb8c:	4c43      	ldr	r4, [pc, #268]	; (800bc9c <lv_style_init+0x48c>)
 800bb8e:	2222      	movs	r2, #34	; 0x22
 800bb90:	2111      	movs	r1, #17
 800bb92:	200a      	movs	r0, #10
 800bb94:	f7ff fe04 	bl	800b7a0 <lv_color_make>
 800bb98:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800bb9a:	4c40      	ldr	r4, [pc, #256]	; (800bc9c <lv_style_init+0x48c>)
 800bb9c:	2290      	movs	r2, #144	; 0x90
 800bb9e:	2162      	movs	r1, #98	; 0x62
 800bba0:	2037      	movs	r0, #55	; 0x37
 800bba2:	f7ff fdfd 	bl	800b7a0 <lv_color_make>
 800bba6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800bba8:	4c3c      	ldr	r4, [pc, #240]	; (800bc9c <lv_style_init+0x48c>)
 800bbaa:	220d      	movs	r2, #13
 800bbac:	2107      	movs	r1, #7
 800bbae:	2001      	movs	r0, #1
 800bbb0:	f7ff fdf6 	bl	800b7a0 <lv_color_make>
 800bbb4:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800bbb6:	4c39      	ldr	r4, [pc, #228]	; (800bc9c <lv_style_init+0x48c>)
 800bbb8:	22f4      	movs	r2, #244	; 0xf4
 800bbba:	21dd      	movs	r1, #221	; 0xdd
 800bbbc:	20c8      	movs	r0, #200	; 0xc8
 800bbbe:	f7ff fdef 	bl	800b7a0 <lv_color_make>
 800bbc2:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800bbc4:	4c35      	ldr	r4, [pc, #212]	; (800bc9c <lv_style_init+0x48c>)
 800bbc6:	22f4      	movs	r2, #244	; 0xf4
 800bbc8:	21dd      	movs	r1, #221	; 0xdd
 800bbca:	20c8      	movs	r0, #200	; 0xc8
 800bbcc:	f7ff fde8 	bl	800b7a0 <lv_color_make>
 800bbd0:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800bbd2:	4c32      	ldr	r4, [pc, #200]	; (800bc9c <lv_style_init+0x48c>)
 800bbd4:	22f4      	movs	r2, #244	; 0xf4
 800bbd6:	21dd      	movs	r1, #221	; 0xdd
 800bbd8:	20c8      	movs	r0, #200	; 0xc8
 800bbda:	f7ff fde1 	bl	800b7a0 <lv_color_make>
 800bbde:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800bbe0:	492e      	ldr	r1, [pc, #184]	; (800bc9c <lv_style_init+0x48c>)
 800bbe2:	482f      	ldr	r0, [pc, #188]	; (800bca0 <lv_style_init+0x490>)
 800bbe4:	f000 f860 	bl	800bca8 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800bbe8:	4c2d      	ldr	r4, [pc, #180]	; (800bca0 <lv_style_init+0x490>)
 800bbea:	2227      	movs	r2, #39	; 0x27
 800bbec:	2114      	movs	r1, #20
 800bbee:	2002      	movs	r0, #2
 800bbf0:	f7ff fdd6 	bl	800b7a0 <lv_color_make>
 800bbf4:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 800bbf6:	4c2a      	ldr	r4, [pc, #168]	; (800bca0 <lv_style_init+0x490>)
 800bbf8:	2270      	movs	r2, #112	; 0x70
 800bbfa:	214c      	movs	r1, #76	; 0x4c
 800bbfc:	202b      	movs	r0, #43	; 0x2b
 800bbfe:	f7ff fdcf 	bl	800b7a0 <lv_color_make>
 800bc02:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800bc04:	4c26      	ldr	r4, [pc, #152]	; (800bca0 <lv_style_init+0x490>)
 800bc06:	22c6      	movs	r2, #198	; 0xc6
 800bc08:	21b5      	movs	r1, #181	; 0xb5
 800bc0a:	20a4      	movs	r0, #164	; 0xa4
 800bc0c:	f7ff fdc8 	bl	800b7a0 <lv_color_make>
 800bc10:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800bc12:	4c23      	ldr	r4, [pc, #140]	; (800bca0 <lv_style_init+0x490>)
 800bc14:	22c6      	movs	r2, #198	; 0xc6
 800bc16:	21b5      	movs	r1, #181	; 0xb5
 800bc18:	20a4      	movs	r0, #164	; 0xa4
 800bc1a:	f7ff fdc1 	bl	800b7a0 <lv_color_make>
 800bc1e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800bc20:	4c1f      	ldr	r4, [pc, #124]	; (800bca0 <lv_style_init+0x490>)
 800bc22:	22c6      	movs	r2, #198	; 0xc6
 800bc24:	21b5      	movs	r1, #181	; 0xb5
 800bc26:	20a4      	movs	r0, #164	; 0xa4
 800bc28:	f7ff fdba 	bl	800b7a0 <lv_color_make>
 800bc2c:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 800bc2e:	4918      	ldr	r1, [pc, #96]	; (800bc90 <lv_style_init+0x480>)
 800bc30:	481c      	ldr	r0, [pc, #112]	; (800bca4 <lv_style_init+0x494>)
 800bc32:	f000 f839 	bl	800bca8 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800bc36:	4c1b      	ldr	r4, [pc, #108]	; (800bca4 <lv_style_init+0x494>)
 800bc38:	22d8      	movs	r2, #216	; 0xd8
 800bc3a:	21d8      	movs	r1, #216	; 0xd8
 800bc3c:	20d8      	movs	r0, #216	; 0xd8
 800bc3e:	f7ff fdaf 	bl	800b7a0 <lv_color_make>
 800bc42:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800bc44:	4c17      	ldr	r4, [pc, #92]	; (800bca4 <lv_style_init+0x494>)
 800bc46:	22d8      	movs	r2, #216	; 0xd8
 800bc48:	21d8      	movs	r1, #216	; 0xd8
 800bc4a:	20d8      	movs	r0, #216	; 0xd8
 800bc4c:	f7ff fda8 	bl	800b7a0 <lv_color_make>
 800bc50:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800bc52:	4c14      	ldr	r4, [pc, #80]	; (800bca4 <lv_style_init+0x494>)
 800bc54:	2290      	movs	r2, #144	; 0x90
 800bc56:	2190      	movs	r1, #144	; 0x90
 800bc58:	2090      	movs	r0, #144	; 0x90
 800bc5a:	f7ff fda1 	bl	800b7a0 <lv_color_make>
 800bc5e:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 800bc60:	4c10      	ldr	r4, [pc, #64]	; (800bca4 <lv_style_init+0x494>)
 800bc62:	2270      	movs	r2, #112	; 0x70
 800bc64:	2170      	movs	r1, #112	; 0x70
 800bc66:	2070      	movs	r0, #112	; 0x70
 800bc68:	f7ff fd9a 	bl	800b7a0 <lv_color_make>
 800bc6c:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 800bc6e:	4c0d      	ldr	r4, [pc, #52]	; (800bca4 <lv_style_init+0x494>)
 800bc70:	2270      	movs	r2, #112	; 0x70
 800bc72:	2170      	movs	r1, #112	; 0x70
 800bc74:	2070      	movs	r0, #112	; 0x70
 800bc76:	f7ff fd93 	bl	800b7a0 <lv_color_make>
 800bc7a:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800bc7c:	4c09      	ldr	r4, [pc, #36]	; (800bca4 <lv_style_init+0x494>)
 800bc7e:	2270      	movs	r2, #112	; 0x70
 800bc80:	2170      	movs	r1, #112	; 0x70
 800bc82:	2070      	movs	r0, #112	; 0x70
 800bc84:	f7ff fd8c 	bl	800b7a0 <lv_color_make>
 800bc88:	86a0      	strh	r0, [r4, #52]	; 0x34
}
 800bc8a:	bf00      	nop
 800bc8c:	bd98      	pop	{r3, r4, r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	2001b8d8 	.word	0x2001b8d8
 800bc94:	0802d414 	.word	0x0802d414
 800bc98:	2001b914 	.word	0x2001b914
 800bc9c:	2001ba7c 	.word	0x2001ba7c
 800bca0:	2001baf4 	.word	0x2001baf4
 800bca4:	2001b9c8 	.word	0x2001b9c8

0800bca8 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 800bcb2:	223c      	movs	r2, #60	; 0x3c
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f01f f9aa 	bl	802b010 <memcpy>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800bccc:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <lv_draw_get_buf+0x6c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d802      	bhi.n	800bcdc <lv_draw_get_buf+0x18>
 800bcd6:	4b17      	ldr	r3, [pc, #92]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	e024      	b.n	800bd26 <lv_draw_get_buf+0x62>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 800bcdc:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <lv_draw_get_buf+0x6c>)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6013      	str	r3, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800bce2:	4b14      	ldr	r3, [pc, #80]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <lv_draw_get_buf+0x42>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f00b f90e 	bl	8016f0c <lv_mem_alloc>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	4b10      	ldr	r3, [pc, #64]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bcf4:	601a      	str	r2, [r3, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800bcf6:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d100      	bne.n	800bd00 <lv_draw_get_buf+0x3c>
 800bcfe:	e7fe      	b.n	800bcfe <lv_draw_get_buf+0x3a>
        return LV_GC_ROOT(_lv_draw_buf);
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	e00f      	b.n	800bd26 <lv_draw_get_buf+0x62>
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800bd06:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f00b f965 	bl	8016fdc <lv_mem_realloc>
 800bd12:	4602      	mov	r2, r0
 800bd14:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bd16:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d100      	bne.n	800bd22 <lv_draw_get_buf+0x5e>
 800bd20:	e7fe      	b.n	800bd20 <lv_draw_get_buf+0x5c>
    return LV_GC_ROOT(_lv_draw_buf);
 800bd22:	4b04      	ldr	r3, [pc, #16]	; (800bd34 <lv_draw_get_buf+0x70>)
 800bd24:	681b      	ldr	r3, [r3, #0]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20017770 	.word	0x20017770
 800bd34:	2001bb84 	.word	0x2001bb84

0800bd38 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800bd3c:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <lv_draw_free_buf+0x28>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00a      	beq.n	800bd5a <lv_draw_free_buf+0x22>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 800bd44:	4b06      	ldr	r3, [pc, #24]	; (800bd60 <lv_draw_free_buf+0x28>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f00b f91f 	bl	8016f8c <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800bd4e:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <lv_draw_free_buf+0x28>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]
        draw_buf_size = 0;
 800bd54:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <lv_draw_free_buf+0x2c>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
    }
}
 800bd5a:	bf00      	nop
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	2001bb84 	.word	0x2001bb84
 800bd64:	20017770 	.word	0x20017770

0800bd68 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	80fb      	strh	r3, [r7, #6]
 800bd72:	460b      	mov	r3, r1
 800bd74:	80bb      	strh	r3, [r7, #4]
 800bd76:	4613      	mov	r3, r2
 800bd78:	70fb      	strb	r3, [r7, #3]
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 800bd7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <lv_draw_aa_get_opa+0x1e>
        return LV_OPA_TRANSP;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e021      	b.n	800bdca <lv_draw_aa_get_opa+0x62>
    else if(seg < 8)
 800bd86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd8a:	2b07      	cmp	r3, #7
 800bd8c:	dc10      	bgt.n	800bdb0 <lv_draw_aa_get_opa+0x48>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800bd8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	4a10      	ldr	r2, [pc, #64]	; (800bdd8 <lv_draw_aa_get_opa+0x70>)
 800bd96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	fb03 f302 	mul.w	r3, r3, r2
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	e00c      	b.n	800bdca <lv_draw_aa_get_opa+0x62>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800bdb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	fb02 f203 	mul.w	r2, r2, r3
 800bdbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	fb92 f3f3 	sdiv	r3, r2, r3
 800bdc8:	b2db      	uxtb	r3, r3
    }
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	20000010 	.word	0x20000010

0800bddc <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	607b      	str	r3, [r7, #4]
 800bde4:	4603      	mov	r3, r0
 800bde6:	81fb      	strh	r3, [r7, #14]
 800bde8:	460b      	mov	r3, r1
 800bdea:	81bb      	strh	r3, [r7, #12]
 800bdec:	4613      	mov	r3, r2
 800bdee:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 800bdf4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da05      	bge.n	800be08 <lv_draw_aa_ver_seg+0x2c>
        aa_inv = true;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]
        length = -length;
 800be00:	897b      	ldrh	r3, [r7, #10]
 800be02:	425b      	negs	r3, r3
 800be04:	b29b      	uxth	r3, r3
 800be06:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800be08:	2300      	movs	r3, #0
 800be0a:	82bb      	strh	r3, [r7, #20]
 800be0c:	e025      	b.n	800be5a <lv_draw_aa_ver_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800be0e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800be12:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800be16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff ffa4 	bl	800bd68 <lv_draw_aa_get_opa>
 800be20:	4603      	mov	r3, r0
 800be22:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <lv_draw_aa_ver_seg+0x58>
 800be2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800be2e:	7cfb      	ldrb	r3, [r7, #19]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x, y + i, mask, color, px_opa);
 800be34:	89ba      	ldrh	r2, [r7, #12]
 800be36:	8abb      	ldrh	r3, [r7, #20]
 800be38:	4413      	add	r3, r2
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	b219      	sxth	r1, r3
 800be3e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800be42:	7cfb      	ldrb	r3, [r7, #19]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	8c3b      	ldrh	r3, [r7, #32]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	f000 fcb4 	bl	800c7b6 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800be4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800be52:	b29b      	uxth	r3, r3
 800be54:	3301      	adds	r3, #1
 800be56:	b29b      	uxth	r3, r3
 800be58:	82bb      	strh	r3, [r7, #20]
 800be5a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800be5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800be62:	429a      	cmp	r2, r3
 800be64:	dbd3      	blt.n	800be0e <lv_draw_aa_ver_seg+0x32>
    }
}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b088      	sub	sp, #32
 800be72:	af02      	add	r7, sp, #8
 800be74:	607b      	str	r3, [r7, #4]
 800be76:	4603      	mov	r3, r0
 800be78:	81fb      	strh	r3, [r7, #14]
 800be7a:	460b      	mov	r3, r1
 800be7c:	81bb      	strh	r3, [r7, #12]
 800be7e:	4613      	mov	r3, r2
 800be80:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 800be86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	da05      	bge.n	800be9a <lv_draw_aa_hor_seg+0x2c>
        aa_inv = true;
 800be8e:	2301      	movs	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
        length = -length;
 800be92:	897b      	ldrh	r3, [r7, #10]
 800be94:	425b      	negs	r3, r3
 800be96:	b29b      	uxth	r3, r3
 800be98:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800be9a:	2300      	movs	r3, #0
 800be9c:	82bb      	strh	r3, [r7, #20]
 800be9e:	e025      	b.n	800beec <lv_draw_aa_hor_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800bea0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800bea4:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800bea8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff ff5b 	bl	800bd68 <lv_draw_aa_get_opa>
 800beb2:	4603      	mov	r3, r0
 800beb4:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <lv_draw_aa_hor_seg+0x58>
 800bebc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800bec0:	7cfb      	ldrb	r3, [r7, #19]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x + i, y, mask, color, px_opa);
 800bec6:	89fa      	ldrh	r2, [r7, #14]
 800bec8:	8abb      	ldrh	r3, [r7, #20]
 800beca:	4413      	add	r3, r2
 800becc:	b29b      	uxth	r3, r3
 800bece:	b218      	sxth	r0, r3
 800bed0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800bed4:	7cfb      	ldrb	r3, [r7, #19]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	8c3b      	ldrh	r3, [r7, #32]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	f000 fc6b 	bl	800c7b6 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800bee0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	3301      	adds	r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	82bb      	strh	r3, [r7, #20]
 800beec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800bef0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	dbd3      	blt.n	800bea0 <lv_draw_aa_hor_seg+0x32>
    }
}
 800bef8:	bf00      	nop
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <lv_draw_arc>:
 * @param style style of the arc (`body.thickness`, `body.main_color`, `body.opa` is used)
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius, const lv_area_t * mask,
                 uint16_t start_angle, uint16_t end_angle, const lv_style_t * style, lv_opa_t opa_scale)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b094      	sub	sp, #80	; 0x50
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	607b      	str	r3, [r7, #4]
 800bf08:	4603      	mov	r3, r0
 800bf0a:	81fb      	strh	r3, [r7, #14]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	81bb      	strh	r3, [r7, #12]
 800bf10:	4613      	mov	r3, r2
 800bf12:	817b      	strh	r3, [r7, #10]
    lv_coord_t thickness = style->line.width;
 800bf14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    if(thickness > radius) thickness = radius;
 800bf1c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800bf20:	897b      	ldrh	r3, [r7, #10]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	dd02      	ble.n	800bf2c <lv_draw_arc+0x2c>
 800bf26:	897b      	ldrh	r3, [r7, #10]
 800bf28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t r_out = radius;
 800bf2c:	897b      	ldrh	r3, [r7, #10]
 800bf2e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t r_in  = r_out - thickness;
 800bf30:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bf32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	873b      	strh	r3, [r7, #56]	; 0x38
    int16_t deg_base;
    int16_t deg;
    lv_coord_t x_start[4];
    lv_coord_t x_end[4];

    lv_color_t color = style->line.color;
 800bf3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf3e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bf40:	823b      	strh	r3, [r7, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800bf42:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bf46:	2bff      	cmp	r3, #255	; 0xff
 800bf48:	d102      	bne.n	800bf50 <lv_draw_arc+0x50>
 800bf4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf4c:	7a1b      	ldrb	r3, [r3, #8]
 800bf4e:	e00b      	b.n	800bf68 <lv_draw_arc+0x68>
 800bf50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf52:	7a1b      	ldrb	r3, [r3, #8]
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	fb12 f303 	smulbb	r3, r2, r3
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	0a1b      	lsrs	r3, r3, #8
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool (*deg_test)(uint16_t, uint16_t, uint16_t);
    if(start_angle <= end_angle)
 800bf6c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bf70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d802      	bhi.n	800bf7e <lv_draw_arc+0x7e>
        deg_test = deg_test_norm;
 800bf78:	4bae      	ldr	r3, [pc, #696]	; (800c234 <lv_draw_arc+0x334>)
 800bf7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf7c:	e001      	b.n	800bf82 <lv_draw_arc+0x82>
    else
        deg_test = deg_test_inv;
 800bf7e:	4bae      	ldr	r3, [pc, #696]	; (800c238 <lv_draw_arc+0x338>)
 800bf80:	643b      	str	r3, [r7, #64]	; 0x40

    if(deg_test(270, start_angle, end_angle))
 800bf82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bf86:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800bf8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf8c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800bf90:	4798      	blx	r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d017      	beq.n	800bfc8 <lv_draw_arc+0xc8>
        hor_line(center_x - r_out + 1, center_y, mask, thickness - 1, color, opa); // Left Middle
 800bf98:	89fa      	ldrh	r2, [r7, #14]
 800bf9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	b218      	sxth	r0, r3
 800bfa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b21a      	sxth	r2, r3
 800bfb0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800bfb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	8a3b      	ldrh	r3, [r7, #16]
 800bfbc:	f8ad 3000 	strh.w	r3, [sp]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	f000 faf4 	bl	800c5b0 <hor_line>
    if(deg_test(90, start_angle, end_angle))
 800bfc8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bfcc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800bfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd2:	205a      	movs	r0, #90	; 0x5a
 800bfd4:	4798      	blx	r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d015      	beq.n	800c008 <lv_draw_arc+0x108>
        hor_line(center_x + r_in, center_y, mask, thickness - 1, color, opa); // Right Middle
 800bfdc:	89fa      	ldrh	r2, [r7, #14]
 800bfde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	b218      	sxth	r0, r3
 800bfe6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bfea:	3b01      	subs	r3, #1
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	b21a      	sxth	r2, r3
 800bff0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800bff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	8a3b      	ldrh	r3, [r7, #16]
 800bffc:	f8ad 3000 	strh.w	r3, [sp]
 800c000:	4613      	mov	r3, r2
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	f000 fad4 	bl	800c5b0 <hor_line>
    if(deg_test(180, start_angle, end_angle))
 800c008:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c00c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c012:	20b4      	movs	r0, #180	; 0xb4
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d017      	beq.n	800c04c <lv_draw_arc+0x14c>
        ver_line(center_x, center_y - r_out + 1, mask, thickness - 1, color, opa); // Top Middle
 800c01c:	89ba      	ldrh	r2, [r7, #12]
 800c01e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	3301      	adds	r3, #1
 800c026:	b29b      	uxth	r3, r3
 800c028:	b219      	sxth	r1, r3
 800c02a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c02e:	3b01      	subs	r3, #1
 800c030:	b29b      	uxth	r3, r3
 800c032:	b21a      	sxth	r2, r3
 800c034:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	8a3b      	ldrh	r3, [r7, #16]
 800c040:	f8ad 3000 	strh.w	r3, [sp]
 800c044:	4613      	mov	r3, r2
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	f000 fa8a 	bl	800c560 <ver_line>
    if(deg_test(0, start_angle, end_angle))
 800c04c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c050:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c056:	2000      	movs	r0, #0
 800c058:	4798      	blx	r3
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d015      	beq.n	800c08c <lv_draw_arc+0x18c>
        ver_line(center_x, center_y + r_in, mask, thickness - 1, color, opa); // Bottom middle
 800c060:	89ba      	ldrh	r2, [r7, #12]
 800c062:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c064:	4413      	add	r3, r2
 800c066:	b29b      	uxth	r3, r3
 800c068:	b219      	sxth	r1, r3
 800c06a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c06e:	3b01      	subs	r3, #1
 800c070:	b29b      	uxth	r3, r3
 800c072:	b21a      	sxth	r2, r3
 800c074:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	8a3b      	ldrh	r3, [r7, #16]
 800c080:	f8ad 3000 	strh.w	r3, [sp]
 800c084:	4613      	mov	r3, r2
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	f000 fa6a 	bl	800c560 <ver_line>

    uint32_t r_out_sqr = r_out * r_out;
 800c08c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800c090:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800c094:	fb02 f303 	mul.w	r3, r2, r3
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t r_in_sqr  = r_in * r_in;
 800c09a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800c09e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800c0a2:	fb02 f303 	mul.w	r3, r2, r3
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t xi;
    int16_t yi;
    for(yi = -r_out; yi < 0; yi++) {
 800c0a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0aa:	425b      	negs	r3, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c0b0:	e1a8      	b.n	800c404 <lv_draw_arc+0x504>
        x_start[0] = LV_COORD_MIN;
 800c0b2:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0b6:	83bb      	strh	r3, [r7, #28]
        x_start[1] = LV_COORD_MIN;
 800c0b8:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0bc:	83fb      	strh	r3, [r7, #30]
        x_start[2] = LV_COORD_MIN;
 800c0be:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0c2:	843b      	strh	r3, [r7, #32]
        x_start[3] = LV_COORD_MIN;
 800c0c4:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0c8:	847b      	strh	r3, [r7, #34]	; 0x22
        x_end[0]   = LV_COORD_MIN;
 800c0ca:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0ce:	82bb      	strh	r3, [r7, #20]
        x_end[1]   = LV_COORD_MIN;
 800c0d0:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0d4:	82fb      	strh	r3, [r7, #22]
        x_end[2]   = LV_COORD_MIN;
 800c0d6:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0da:	833b      	strh	r3, [r7, #24]
        x_end[3]   = LV_COORD_MIN;
 800c0dc:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800c0e0:	837b      	strh	r3, [r7, #26]
        for(xi = -r_out; xi < 0; xi++) {
 800c0e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0e4:	425b      	negs	r3, r3
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c0ea:	e0c4      	b.n	800c276 <lv_draw_arc+0x376>

            uint32_t r_act_sqr = xi * xi + yi * yi;
 800c0ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c0f0:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800c0f4:	fb02 f203 	mul.w	r2, r2, r3
 800c0f8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800c0fc:	f9b7 103c 	ldrsh.w	r1, [r7, #60]	; 0x3c
 800c100:	fb01 f303 	mul.w	r3, r1, r3
 800c104:	4413      	add	r3, r2
 800c106:	62bb      	str	r3, [r7, #40]	; 0x28
            if(r_act_sqr > r_out_sqr) continue;
 800c108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	429a      	cmp	r2, r3
 800c10e:	f200 80ab 	bhi.w	800c268 <lv_draw_arc+0x368>

            deg_base = fast_atan2(xi, yi) - 180;
 800c112:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c116:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800c11a:	4611      	mov	r1, r2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 f97d 	bl	800c41c <fast_atan2>
 800c122:	4603      	mov	r3, r0
 800c124:	3bb4      	subs	r3, #180	; 0xb4
 800c126:	b29b      	uxth	r3, r3
 800c128:	84fb      	strh	r3, [r7, #38]	; 0x26

            deg = 180 + deg_base;
 800c12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c12c:	33b4      	adds	r3, #180	; 0xb4
 800c12e:	b29b      	uxth	r3, r3
 800c130:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800c132:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800c134:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c138:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c13e:	4798      	blx	r3
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <lv_draw_arc+0x256>
                if(x_start[0] == LV_COORD_MIN) x_start[0] = xi;
 800c146:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c14a:	4a3c      	ldr	r2, [pc, #240]	; (800c23c <lv_draw_arc+0x33c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d111      	bne.n	800c174 <lv_draw_arc+0x274>
 800c150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c152:	83bb      	strh	r3, [r7, #28]
 800c154:	e00e      	b.n	800c174 <lv_draw_arc+0x274>
            } else if(x_start[0] != LV_COORD_MIN && x_end[0] == LV_COORD_MIN) {
 800c156:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c15a:	4a38      	ldr	r2, [pc, #224]	; (800c23c <lv_draw_arc+0x33c>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d009      	beq.n	800c174 <lv_draw_arc+0x274>
 800c160:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c164:	4a35      	ldr	r2, [pc, #212]	; (800c23c <lv_draw_arc+0x33c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d104      	bne.n	800c174 <lv_draw_arc+0x274>
                x_end[0] = xi - 1;
 800c16a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29b      	uxth	r3, r3
 800c170:	b21b      	sxth	r3, r3
 800c172:	82bb      	strh	r3, [r7, #20]
            }

            deg = 360 - deg_base;
 800c174:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c176:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800c17e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800c180:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c184:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18a:	4798      	blx	r3
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d007      	beq.n	800c1a2 <lv_draw_arc+0x2a2>
                if(x_start[1] == LV_COORD_MIN) x_start[1] = xi;
 800c192:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <lv_draw_arc+0x33c>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d111      	bne.n	800c1c0 <lv_draw_arc+0x2c0>
 800c19c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c19e:	83fb      	strh	r3, [r7, #30]
 800c1a0:	e00e      	b.n	800c1c0 <lv_draw_arc+0x2c0>
            } else if(x_start[1] != LV_COORD_MIN && x_end[1] == LV_COORD_MIN) {
 800c1a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c1a6:	4a25      	ldr	r2, [pc, #148]	; (800c23c <lv_draw_arc+0x33c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d009      	beq.n	800c1c0 <lv_draw_arc+0x2c0>
 800c1ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <lv_draw_arc+0x33c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d104      	bne.n	800c1c0 <lv_draw_arc+0x2c0>
                x_end[1] = xi - 1;
 800c1b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	b21b      	sxth	r3, r3
 800c1be:	82fb      	strh	r3, [r7, #22]
            }

            deg = 180 - deg_base;
 800c1c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c1c2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800c1ca:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800c1cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c1d0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d007      	beq.n	800c1ee <lv_draw_arc+0x2ee>
                if(x_start[2] == LV_COORD_MIN) x_start[2] = xi;
 800c1de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1e2:	4a16      	ldr	r2, [pc, #88]	; (800c23c <lv_draw_arc+0x33c>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d111      	bne.n	800c20c <lv_draw_arc+0x30c>
 800c1e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1ea:	843b      	strh	r3, [r7, #32]
 800c1ec:	e00e      	b.n	800c20c <lv_draw_arc+0x30c>
            } else if(x_start[2] != LV_COORD_MIN && x_end[2] == LV_COORD_MIN) {
 800c1ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1f2:	4a12      	ldr	r2, [pc, #72]	; (800c23c <lv_draw_arc+0x33c>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d009      	beq.n	800c20c <lv_draw_arc+0x30c>
 800c1f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c1fc:	4a0f      	ldr	r2, [pc, #60]	; (800c23c <lv_draw_arc+0x33c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d104      	bne.n	800c20c <lv_draw_arc+0x30c>
                x_end[2] = xi - 1;
 800c202:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c204:	3b01      	subs	r3, #1
 800c206:	b29b      	uxth	r3, r3
 800c208:	b21b      	sxth	r3, r3
 800c20a:	833b      	strh	r3, [r7, #24]
            }

            deg = deg_base;
 800c20c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c20e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800c210:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800c212:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c216:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800c21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21c:	4798      	blx	r3
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00d      	beq.n	800c240 <lv_draw_arc+0x340>
                if(x_start[3] == LV_COORD_MIN) x_start[3] = xi;
 800c224:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c228:	4a04      	ldr	r2, [pc, #16]	; (800c23c <lv_draw_arc+0x33c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d117      	bne.n	800c25e <lv_draw_arc+0x35e>
 800c22e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c230:	847b      	strh	r3, [r7, #34]	; 0x22
 800c232:	e014      	b.n	800c25e <lv_draw_arc+0x35e>
 800c234:	0800c601 	.word	0x0800c601
 800c238:	0800c635 	.word	0x0800c635
 800c23c:	ffff83e8 	.word	0xffff83e8
            } else if(x_start[3] != LV_COORD_MIN && x_end[3] == LV_COORD_MIN) {
 800c240:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c244:	4a74      	ldr	r2, [pc, #464]	; (800c418 <lv_draw_arc+0x518>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d009      	beq.n	800c25e <lv_draw_arc+0x35e>
 800c24a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c24e:	4a72      	ldr	r2, [pc, #456]	; (800c418 <lv_draw_arc+0x518>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d104      	bne.n	800c25e <lv_draw_arc+0x35e>
                x_end[3] = xi - 1;
 800c254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c256:	3b01      	subs	r3, #1
 800c258:	b29b      	uxth	r3, r3
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	837b      	strh	r3, [r7, #26]
            }

            if(r_act_sqr < r_in_sqr)
 800c25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	429a      	cmp	r2, r3
 800c264:	d30d      	bcc.n	800c282 <lv_draw_arc+0x382>
 800c266:	e000      	b.n	800c26a <lv_draw_arc+0x36a>
            if(r_act_sqr > r_out_sqr) continue;
 800c268:	bf00      	nop
        for(xi = -r_out; xi < 0; xi++) {
 800c26a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c26e:	b29b      	uxth	r3, r3
 800c270:	3301      	adds	r3, #1
 800c272:	b29b      	uxth	r3, r3
 800c274:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c276:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f6ff af36 	blt.w	800c0ec <lv_draw_arc+0x1ec>
 800c280:	e000      	b.n	800c284 <lv_draw_arc+0x384>
                break; /*No need to continue the iteration in x once we found the inner edge of the
 800c282:	bf00      	nop
                          arc*/
        }

        if(x_start[0] != LV_COORD_MIN) {
 800c284:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c288:	4a63      	ldr	r2, [pc, #396]	; (800c418 <lv_draw_arc+0x518>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d028      	beq.n	800c2e0 <lv_draw_arc+0x3e0>
            if(x_end[0] == LV_COORD_MIN) x_end[0] = xi - 1;
 800c28e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c292:	4a61      	ldr	r2, [pc, #388]	; (800c418 <lv_draw_arc+0x518>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d104      	bne.n	800c2a2 <lv_draw_arc+0x3a2>
 800c298:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	b21b      	sxth	r3, r3
 800c2a0:	82bb      	strh	r3, [r7, #20]
            hor_line(center_x + x_start[0], center_y + yi, mask, x_end[0] - x_start[0], color, opa);
 800c2a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	89fb      	ldrh	r3, [r7, #14]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	b218      	sxth	r0, r3
 800c2b0:	89ba      	ldrh	r2, [r7, #12]
 800c2b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2b4:	4413      	add	r3, r2
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	b219      	sxth	r1, r3
 800c2ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	b21a      	sxth	r2, r3
 800c2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	8a3b      	ldrh	r3, [r7, #16]
 800c2d4:	f8ad 3000 	strh.w	r3, [sp]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	f000 f968 	bl	800c5b0 <hor_line>
        }

        if(x_start[1] != LV_COORD_MIN) {
 800c2e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c2e4:	4a4c      	ldr	r2, [pc, #304]	; (800c418 <lv_draw_arc+0x518>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d028      	beq.n	800c33c <lv_draw_arc+0x43c>
            if(x_end[1] == LV_COORD_MIN) x_end[1] = xi - 1;
 800c2ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c2ee:	4a4a      	ldr	r2, [pc, #296]	; (800c418 <lv_draw_arc+0x518>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d104      	bne.n	800c2fe <lv_draw_arc+0x3fe>
 800c2f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	b21b      	sxth	r3, r3
 800c2fc:	82fb      	strh	r3, [r7, #22]
            hor_line(center_x + x_start[1], center_y - yi, mask, x_end[1] - x_start[1], color, opa);
 800c2fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c302:	b29a      	uxth	r2, r3
 800c304:	89fb      	ldrh	r3, [r7, #14]
 800c306:	4413      	add	r3, r2
 800c308:	b29b      	uxth	r3, r3
 800c30a:	b218      	sxth	r0, r3
 800c30c:	89ba      	ldrh	r2, [r7, #12]
 800c30e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	b29b      	uxth	r3, r3
 800c314:	b219      	sxth	r1, r3
 800c316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c320:	b29b      	uxth	r3, r3
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	b29b      	uxth	r3, r3
 800c326:	b21a      	sxth	r2, r3
 800c328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	8a3b      	ldrh	r3, [r7, #16]
 800c330:	f8ad 3000 	strh.w	r3, [sp]
 800c334:	4613      	mov	r3, r2
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	f000 f93a 	bl	800c5b0 <hor_line>
        }

        if(x_start[2] != LV_COORD_MIN) {
 800c33c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c340:	4a35      	ldr	r2, [pc, #212]	; (800c418 <lv_draw_arc+0x518>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d029      	beq.n	800c39a <lv_draw_arc+0x49a>
            if(x_end[2] == LV_COORD_MIN) x_end[2] = xi - 1;
 800c346:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c34a:	4a33      	ldr	r2, [pc, #204]	; (800c418 <lv_draw_arc+0x518>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d104      	bne.n	800c35a <lv_draw_arc+0x45a>
 800c350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c352:	3b01      	subs	r3, #1
 800c354:	b29b      	uxth	r3, r3
 800c356:	b21b      	sxth	r3, r3
 800c358:	833b      	strh	r3, [r7, #24]
            hor_line(center_x - x_end[2], center_y + yi, mask, LV_MATH_ABS(x_end[2] - x_start[2]), color, opa);
 800c35a:	89fa      	ldrh	r2, [r7, #14]
 800c35c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c360:	b29b      	uxth	r3, r3
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	b29b      	uxth	r3, r3
 800c366:	b218      	sxth	r0, r3
 800c368:	89ba      	ldrh	r2, [r7, #12]
 800c36a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c36c:	4413      	add	r3, r2
 800c36e:	b29b      	uxth	r3, r3
 800c370:	b219      	sxth	r1, r3
 800c372:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c376:	461a      	mov	r2, r3
 800c378:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	bfb8      	it	lt
 800c382:	425b      	neglt	r3, r3
 800c384:	b21a      	sxth	r2, r3
 800c386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	8a3b      	ldrh	r3, [r7, #16]
 800c38e:	f8ad 3000 	strh.w	r3, [sp]
 800c392:	4613      	mov	r3, r2
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	f000 f90b 	bl	800c5b0 <hor_line>
        }

        if(x_start[3] != LV_COORD_MIN) {
 800c39a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c39e:	4a1e      	ldr	r2, [pc, #120]	; (800c418 <lv_draw_arc+0x518>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d029      	beq.n	800c3f8 <lv_draw_arc+0x4f8>
            if(x_end[3] == LV_COORD_MIN) x_end[3] = xi - 1;
 800c3a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c3a8:	4a1b      	ldr	r2, [pc, #108]	; (800c418 <lv_draw_arc+0x518>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d104      	bne.n	800c3b8 <lv_draw_arc+0x4b8>
 800c3ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	b21b      	sxth	r3, r3
 800c3b6:	837b      	strh	r3, [r7, #26]
            hor_line(center_x - x_end[3], center_y - yi, mask, LV_MATH_ABS(x_end[3] - x_start[3]), color, opa);
 800c3b8:	89fa      	ldrh	r2, [r7, #14]
 800c3ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	b218      	sxth	r0, r3
 800c3c6:	89ba      	ldrh	r2, [r7, #12]
 800c3c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	b219      	sxth	r1, r3
 800c3d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfb8      	it	lt
 800c3e0:	425b      	neglt	r3, r3
 800c3e2:	b21a      	sxth	r2, r3
 800c3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	8a3b      	ldrh	r3, [r7, #16]
 800c3ec:	f8ad 3000 	strh.w	r3, [sp]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	f000 f8dc 	bl	800c5b0 <hor_line>
    for(yi = -r_out; yi < 0; yi++) {
 800c3f8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	3301      	adds	r3, #1
 800c400:	b29b      	uxth	r3, r3
 800c402:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c404:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f6ff ae52 	blt.w	800c0b2 <lv_draw_arc+0x1b2>
#if LV_ANTIALIAS
        /*TODO*/

#endif
    }
}
 800c40e:	bf00      	nop
 800c410:	3748      	adds	r7, #72	; 0x48
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	ffff83e8 	.word	0xffff83e8

0800c41c <fast_atan2>:

static uint16_t fast_atan2(int x, int y)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b089      	sub	sp, #36	; 0x24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
    // signed int y;            // (and they will be destroyed)
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	77fb      	strb	r3, [r7, #31]
    if(x < 0) {
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	da05      	bge.n	800c43c <fast_atan2+0x20>
        negflag += 0x01; // x flag bit
 800c430:	7ffb      	ldrb	r3, [r7, #31]
 800c432:	3301      	adds	r3, #1
 800c434:	77fb      	strb	r3, [r7, #31]
        x = (0 - x);     // is now +
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	425b      	negs	r3, r3
 800c43a:	607b      	str	r3, [r7, #4]
    }
    ux = x; // copy to unsigned var before multiply
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	617b      	str	r3, [r7, #20]
    if(y < 0) {
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	da05      	bge.n	800c452 <fast_atan2+0x36>
        negflag += 0x02; // y flag bit
 800c446:	7ffb      	ldrb	r3, [r7, #31]
 800c448:	3302      	adds	r3, #2
 800c44a:	77fb      	strb	r3, [r7, #31]
        y = (0 - y);     // is now +
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	425b      	negs	r3, r3
 800c450:	603b      	str	r3, [r7, #0]
    }
    uy = y; // copy to unsigned var before multiply
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	613b      	str	r3, [r7, #16]

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d90d      	bls.n	800c47a <fast_atan2+0x5e>
        degree = (uy * 45) / ux; // degree result will be 0-45 range
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	4613      	mov	r3, r2
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	4413      	add	r3, r2
 800c466:	011a      	lsls	r2, r3, #4
 800c468:	1ad2      	subs	r2, r2, r3
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c470:	61bb      	str	r3, [r7, #24]
        negflag += 0x10;         // octant flag bit
 800c472:	7ffb      	ldrb	r3, [r7, #31]
 800c474:	3310      	adds	r3, #16
 800c476:	77fb      	strb	r3, [r7, #31]
 800c478:	e009      	b.n	800c48e <fast_atan2+0x72>
    } else {
        degree = (ux * 45) / uy; // degree result will be 0-45 range
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	011a      	lsls	r2, r3, #4
 800c484:	1ad2      	subs	r2, r2, r3
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48c:	61bb      	str	r3, [r7, #24]
    }

    // 2. Compensate for the 4 degree error curve
    comp       = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	77bb      	strb	r3, [r7, #30]
    tempdegree = degree;  // use an unsigned char for speed!
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	73fb      	strb	r3, [r7, #15]
    if(tempdegree > 22) { // if top half of range
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	2b16      	cmp	r3, #22
 800c49a:	d918      	bls.n	800c4ce <fast_atan2+0xb2>
        if(tempdegree <= 44) comp++;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	2b2c      	cmp	r3, #44	; 0x2c
 800c4a0:	d802      	bhi.n	800c4a8 <fast_atan2+0x8c>
 800c4a2:	7fbb      	ldrb	r3, [r7, #30]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 41) comp++;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
 800c4aa:	2b29      	cmp	r3, #41	; 0x29
 800c4ac:	d802      	bhi.n	800c4b4 <fast_atan2+0x98>
 800c4ae:	7fbb      	ldrb	r3, [r7, #30]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 37) comp++;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	2b25      	cmp	r3, #37	; 0x25
 800c4b8:	d802      	bhi.n	800c4c0 <fast_atan2+0xa4>
 800c4ba:	7fbb      	ldrb	r3, [r7, #30]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 32) comp++; // max is 4 degrees compensated
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
 800c4c2:	2b20      	cmp	r3, #32
 800c4c4:	d81b      	bhi.n	800c4fe <fast_atan2+0xe2>
 800c4c6:	7fbb      	ldrb	r3, [r7, #30]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	77bb      	strb	r3, [r7, #30]
 800c4cc:	e017      	b.n	800c4fe <fast_atan2+0xe2>
    } else {                         // else is lower half of range
        if(tempdegree >= 2) comp++;
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d902      	bls.n	800c4da <fast_atan2+0xbe>
 800c4d4:	7fbb      	ldrb	r3, [r7, #30]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 6) comp++;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	d902      	bls.n	800c4e6 <fast_atan2+0xca>
 800c4e0:	7fbb      	ldrb	r3, [r7, #30]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 10) comp++;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	2b09      	cmp	r3, #9
 800c4ea:	d902      	bls.n	800c4f2 <fast_atan2+0xd6>
 800c4ec:	7fbb      	ldrb	r3, [r7, #30]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 15) comp++; // max is 4 degrees compensated
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	2b0e      	cmp	r3, #14
 800c4f6:	d902      	bls.n	800c4fe <fast_atan2+0xe2>
 800c4f8:	7fbb      	ldrb	r3, [r7, #30]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	77bb      	strb	r3, [r7, #30]
    }
    degree += comp; // degree is now accurate to +/- 1 degree!
 800c4fe:	7fbb      	ldrb	r3, [r7, #30]
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	4413      	add	r3, r2
 800c504:	61bb      	str	r3, [r7, #24]

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 800c506:	7ffb      	ldrb	r3, [r7, #31]
 800c508:	f003 0310 	and.w	r3, r3, #16
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <fast_atan2+0xfc>
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c516:	61bb      	str	r3, [r7, #24]

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) {   // if -Y
 800c518:	7ffb      	ldrb	r3, [r7, #31]
 800c51a:	f003 0302 	and.w	r3, r3, #2
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00d      	beq.n	800c53e <fast_atan2+0x122>
        if(negflag & 0x01) // if -Y -X
 800c522:	7ffb      	ldrb	r3, [r7, #31]
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <fast_atan2+0x118>
            degree = (180 + degree);
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	33b4      	adds	r3, #180	; 0xb4
 800c530:	61bb      	str	r3, [r7, #24]
 800c532:	e00d      	b.n	800c550 <fast_atan2+0x134>
        else // else is -Y +X
            degree = (180 - degree);
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c53a:	61bb      	str	r3, [r7, #24]
 800c53c:	e008      	b.n	800c550 <fast_atan2+0x134>
    } else {               // else is +Y
        if(negflag & 0x01) // if +Y -X
 800c53e:	7ffb      	ldrb	r3, [r7, #31]
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <fast_atan2+0x134>
            degree = (360 - degree);
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800c54e:	61bb      	str	r3, [r7, #24]
    }
    return degree;
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	b29b      	uxth	r3, r3
}
 800c554:	4618      	mov	r0, r3
 800c556:	3724      	adds	r7, #36	; 0x24
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <ver_line>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void ver_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af02      	add	r7, sp, #8
 800c566:	60ba      	str	r2, [r7, #8]
 800c568:	461a      	mov	r2, r3
 800c56a:	4603      	mov	r3, r0
 800c56c:	81fb      	strh	r3, [r7, #14]
 800c56e:	460b      	mov	r3, r1
 800c570:	81bb      	strh	r3, [r7, #12]
 800c572:	4613      	mov	r3, r2
 800c574:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x, y + len);
 800c576:	89ba      	ldrh	r2, [r7, #12]
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	4413      	add	r3, r2
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	b21b      	sxth	r3, r3
 800c580:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800c584:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c588:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c58c:	f107 0010 	add.w	r0, r7, #16
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	4623      	mov	r3, r4
 800c594:	f009 fe08 	bl	80161a8 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 800c598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c59c:	f107 0010 	add.w	r0, r7, #16
 800c5a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	f000 f99f 	bl	800c8e6 <lv_draw_fill>
}
 800c5a8:	bf00      	nop
 800c5aa:	371c      	adds	r7, #28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd90      	pop	{r4, r7, pc}

0800c5b0 <hor_line>:

static void hor_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800c5b0:	b590      	push	{r4, r7, lr}
 800c5b2:	b089      	sub	sp, #36	; 0x24
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60ba      	str	r2, [r7, #8]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	81fb      	strh	r3, [r7, #14]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	81bb      	strh	r3, [r7, #12]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x + len, y);
 800c5c6:	89fa      	ldrh	r2, [r7, #14]
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	b21c      	sxth	r4, r3
 800c5d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c5d4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c5d8:	f107 0010 	add.w	r0, r7, #16
 800c5dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	4623      	mov	r3, r4
 800c5e4:	f009 fde0 	bl	80161a8 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 800c5e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5ec:	f107 0010 	add.w	r0, r7, #16
 800c5f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c5f2:	68b9      	ldr	r1, [r7, #8]
 800c5f4:	f000 f977 	bl	800c8e6 <lv_draw_fill>
}
 800c5f8:	bf00      	nop
 800c5fa:	371c      	adds	r7, #28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd90      	pop	{r4, r7, pc}

0800c600 <deg_test_norm>:

static bool deg_test_norm(uint16_t deg, uint16_t start, uint16_t end)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	80fb      	strh	r3, [r7, #6]
 800c60a:	460b      	mov	r3, r1
 800c60c:	80bb      	strh	r3, [r7, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	807b      	strh	r3, [r7, #2]
    if(deg >= start && deg <= end)
 800c612:	88fa      	ldrh	r2, [r7, #6]
 800c614:	88bb      	ldrh	r3, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d305      	bcc.n	800c626 <deg_test_norm+0x26>
 800c61a:	88fa      	ldrh	r2, [r7, #6]
 800c61c:	887b      	ldrh	r3, [r7, #2]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d801      	bhi.n	800c626 <deg_test_norm+0x26>
        return true;
 800c622:	2301      	movs	r3, #1
 800c624:	e000      	b.n	800c628 <deg_test_norm+0x28>
    else
        return false;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <deg_test_inv>:

static bool deg_test_inv(uint16_t deg, uint16_t start, uint16_t end)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	80fb      	strh	r3, [r7, #6]
 800c63e:	460b      	mov	r3, r1
 800c640:	80bb      	strh	r3, [r7, #4]
 800c642:	4613      	mov	r3, r2
 800c644:	807b      	strh	r3, [r7, #2]
    if(deg >= start || deg <= end) {
 800c646:	88fa      	ldrh	r2, [r7, #6]
 800c648:	88bb      	ldrh	r3, [r7, #4]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d203      	bcs.n	800c656 <deg_test_inv+0x22>
 800c64e:	88fa      	ldrh	r2, [r7, #6]
 800c650:	887b      	ldrh	r3, [r7, #2]
 800c652:	429a      	cmp	r2, r3
 800c654:	d801      	bhi.n	800c65a <deg_test_inv+0x26>
        return true;
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <deg_test_inv+0x28>
    } else
        return false;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	80b8      	strh	r0, [r7, #4]
 800c670:	8039      	strh	r1, [r7, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800c676:	793b      	ldrb	r3, [r7, #4]
 800c678:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	b29a      	uxth	r2, r3
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	b29b      	uxth	r3, r3
 800c684:	fb12 f303 	smulbb	r3, r2, r3
 800c688:	b29a      	uxth	r2, r3
 800c68a:	783b      	ldrb	r3, [r7, #0]
 800c68c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800c690:	b2db      	uxtb	r3, r3
 800c692:	b299      	uxth	r1, r3
 800c694:	78fb      	ldrb	r3, [r7, #3]
 800c696:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	fb11 f303 	smulbb	r3, r1, r3
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	4413      	add	r3, r2
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	0a1b      	lsrs	r3, r3, #8
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	f003 031f 	and.w	r3, r3, #31
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	7a3b      	ldrb	r3, [r7, #8]
 800c6b2:	f362 03c7 	bfi	r3, r2, #3, #5
 800c6b6:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800c6b8:	793b      	ldrb	r3, [r7, #4]
 800c6ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	797b      	ldrb	r3, [r7, #5]
 800c6c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	4413      	add	r3, r2
 800c6d2:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 800c6d4:	783b      	ldrb	r3, [r7, #0]
 800c6d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	787b      	ldrb	r3, [r7, #1]
 800c6e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4413      	add	r3, r2
 800c6ee:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	89fa      	ldrh	r2, [r7, #14]
 800c6f6:	fb12 f303 	smulbb	r3, r2, r3
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	78fb      	ldrb	r3, [r7, #3]
 800c6fe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c702:	b29b      	uxth	r3, r3
 800c704:	89b9      	ldrh	r1, [r7, #12]
 800c706:	fb11 f303 	smulbb	r3, r1, r3
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	4413      	add	r3, r2
 800c70e:	b29b      	uxth	r3, r3
 800c710:	0a1b      	lsrs	r3, r3, #8
 800c712:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 800c714:	897b      	ldrh	r3, [r7, #10]
 800c716:	08db      	lsrs	r3, r3, #3
 800c718:	b29b      	uxth	r3, r3
 800c71a:	f003 0307 	and.w	r3, r3, #7
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	7a3b      	ldrb	r3, [r7, #8]
 800c722:	f362 0302 	bfi	r3, r2, #0, #3
 800c726:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 800c728:	897b      	ldrh	r3, [r7, #10]
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	7a7b      	ldrb	r3, [r7, #9]
 800c732:	f362 1347 	bfi	r3, r2, #5, #3
 800c736:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800c738:	797b      	ldrb	r3, [r7, #5]
 800c73a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	b29a      	uxth	r2, r3
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	b29b      	uxth	r3, r3
 800c746:	fb12 f303 	smulbb	r3, r2, r3
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	787b      	ldrb	r3, [r7, #1]
 800c74e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800c752:	b2db      	uxtb	r3, r3
 800c754:	b299      	uxth	r1, r3
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	fb11 f303 	smulbb	r3, r1, r3
 800c762:	b29b      	uxth	r3, r3
 800c764:	4413      	add	r3, r2
 800c766:	b29b      	uxth	r3, r3
 800c768:	0a1b      	lsrs	r3, r3, #8
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	f003 031f 	and.w	r3, r3, #31
 800c770:	b2da      	uxtb	r2, r3
 800c772:	7a7b      	ldrb	r3, [r7, #9]
 800c774:	f362 0304 	bfi	r3, r2, #0, #5
 800c778:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800c77a:	893b      	ldrh	r3, [r7, #8]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	b21b      	sxth	r3, r3
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800c7b6:	b5b0      	push	{r4, r5, r7, lr}
 800c7b8:	b08e      	sub	sp, #56	; 0x38
 800c7ba:	af04      	add	r7, sp, #16
 800c7bc:	60ba      	str	r2, [r7, #8]
 800c7be:	80bb      	strh	r3, [r7, #4]
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	81fb      	strh	r3, [r7, #14]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	81bb      	strh	r3, [r7, #12]

    if(opa < LV_OPA_MIN) return;
 800c7c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c7cc:	2b0f      	cmp	r3, #15
 800c7ce:	f240 8084 	bls.w	800c8da <lv_draw_px+0x124>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c7d2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c7d6:	2bfb      	cmp	r3, #251	; 0xfb
 800c7d8:	d902      	bls.n	800c7e0 <lv_draw_px+0x2a>
 800c7da:	23ff      	movs	r3, #255	; 0xff
 800c7dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	db77      	blt.n	800c8de <lv_draw_px+0x128>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	dc70      	bgt.n	800c8de <lv_draw_px+0x128>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c802:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c806:	429a      	cmp	r2, r3
 800c808:	db69      	blt.n	800c8de <lv_draw_px+0x128>
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c810:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c814:	429a      	cmp	r2, r3
 800c816:	dc62      	bgt.n	800c8de <lv_draw_px+0x128>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800c818:	f7fe fae2 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800c81c:	6278      	str	r0, [r7, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c81e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c820:	f009 f9da 	bl	8015bd8 <lv_disp_get_buf>
 800c824:	6238      	str	r0, [r7, #32]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	3310      	adds	r3, #16
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff ffac 	bl	800c788 <lv_area_get_width>
 800c830:	4603      	mov	r3, r0
 800c832:	61fb      	str	r3, [r7, #28]

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 800c834:	89fa      	ldrh	r2, [r7, #14]
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	b29b      	uxth	r3, r3
 800c842:	81fb      	strh	r3, [r7, #14]
    y -= vdb->area.y1;
 800c844:	89ba      	ldrh	r2, [r7, #12]
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	b29b      	uxth	r3, r3
 800c852:	81bb      	strh	r3, [r7, #12]

    if(disp->driver.set_px_cb) {
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d014      	beq.n	800c886 <lv_draw_px+0xd0>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	695c      	ldr	r4, [r3, #20]
 800c860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	6899      	ldr	r1, [r3, #8]
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	b21a      	sxth	r2, r3
 800c86a:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 800c86e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	88bb      	ldrh	r3, [r7, #4]
 800c876:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c87a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462b      	mov	r3, r5
 800c882:	47a0      	blx	r4
 800c884:	e02c      	b.n	800c8e0 <lv_draw_px+0x12a>
    } else {
        bool scr_transp = false;
 800c886:	2300      	movs	r3, #0
 800c888:	76fb      	strb	r3, [r7, #27]
#if LV_COLOR_SCREEN_TRANSP
        scr_transp = disp->driver.screen_transp;
#endif

        lv_color_t * vdb_px_p = vdb->buf_act;
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	617b      	str	r3, [r7, #20]
        vdb_px_p += y * vdb_width + x;
 800c890:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c894:	69fa      	ldr	r2, [r7, #28]
 800c896:	fb02 f203 	mul.w	r2, r2, r3
 800c89a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c89e:	4413      	add	r3, r2
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]

        if(scr_transp == false) {
 800c8a8:	7efb      	ldrb	r3, [r7, #27]
 800c8aa:	f083 0301 	eor.w	r3, r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d015      	beq.n	800c8e0 <lv_draw_px+0x12a>
            if(opa == LV_OPA_COVER) {
 800c8b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c8b8:	2bff      	cmp	r3, #255	; 0xff
 800c8ba:	d103      	bne.n	800c8c4 <lv_draw_px+0x10e>
                *vdb_px_p = color;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	88ba      	ldrh	r2, [r7, #4]
 800c8c0:	801a      	strh	r2, [r3, #0]
 800c8c2:	e00d      	b.n	800c8e0 <lv_draw_px+0x12a>
            } else {
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800c8c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	8819      	ldrh	r1, [r3, #0]
 800c8cc:	88b8      	ldrh	r0, [r7, #4]
 800c8ce:	f7ff fecb 	bl	800c668 <lv_color_mix>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	801a      	strh	r2, [r3, #0]
 800c8d8:	e002      	b.n	800c8e0 <lv_draw_px+0x12a>
    if(opa < LV_OPA_MIN) return;
 800c8da:	bf00      	nop
 800c8dc:	e000      	b.n	800c8e0 <lv_draw_px+0x12a>
        return;
 800c8de:	bf00      	nop
#if LV_COLOR_DEPTH == 32
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 800c8e0:	3728      	adds	r7, #40	; 0x28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bdb0      	pop	{r4, r5, r7, pc}

0800c8e6 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b090      	sub	sp, #64	; 0x40
 800c8ea:	af02      	add	r7, sp, #8
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	80ba      	strh	r2, [r7, #4]
 800c8f2:	71fb      	strb	r3, [r7, #7]
    if(opa < LV_OPA_MIN) return;
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	2b0f      	cmp	r3, #15
 800c8f8:	d968      	bls.n	800c9cc <lv_draw_fill+0xe6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c8fa:	79fb      	ldrb	r3, [r7, #7]
 800c8fc:	2bfb      	cmp	r3, #251	; 0xfb
 800c8fe:	d901      	bls.n	800c904 <lv_draw_fill+0x1e>
 800c900:	23ff      	movs	r3, #255	; 0xff
 800c902:	71fb      	strb	r3, [r7, #7]
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800c904:	f107 031c 	add.w	r3, r7, #28
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	68f9      	ldr	r1, [r7, #12]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f009 fce3 	bl	80162d8 <lv_area_intersect>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 800c918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c91c:	f083 0301 	eor.w	r3, r3, #1
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d154      	bne.n	800c9d0 <lv_draw_fill+0xea>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800c926:	f7fe fa5b 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800c92a:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c92c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c92e:	f009 f953 	bl	8015bd8 <lv_disp_get_buf>
 800c932:	62f8      	str	r0, [r7, #44]	; 0x2c

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800c934:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c938:	b29a      	uxth	r2, r3
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c940:	b29b      	uxth	r3, r3
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	b29b      	uxth	r3, r3
 800c946:	b21b      	sxth	r3, r3
 800c948:	82bb      	strh	r3, [r7, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800c94a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c956:	b29b      	uxth	r3, r3
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	b21b      	sxth	r3, r3
 800c95e:	82fb      	strh	r3, [r7, #22]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800c960:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c964:	b29a      	uxth	r2, r3
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	b29b      	uxth	r3, r3
 800c972:	b21b      	sxth	r3, r3
 800c974:	833b      	strh	r3, [r7, #24]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800c976:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c982:	b29b      	uxth	r3, r3
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	b29b      	uxth	r3, r3
 800c988:	b21b      	sxth	r3, r3
 800c98a:	837b      	strh	r3, [r7, #26]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t vdb_width       = lv_area_get_width(&vdb->area);
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	3310      	adds	r3, #16
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff fef6 	bl	800c788 <lv_area_get_width>
 800c99c:	4603      	mov	r3, r0
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
    /*Move the vdb_tmp to the first row*/
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800c9a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	fb03 f302 	mul.w	r3, r3, r2
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b0:	4413      	add	r3, r2
 800c9b2:	62bb      	str	r3, [r7, #40]	; 0x28
        else {
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
        }
    }
#else
    sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	6898      	ldr	r0, [r3, #8]
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	b219      	sxth	r1, r3
 800c9bc:	f107 0214 	add.w	r2, r7, #20
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	88bb      	ldrh	r3, [r7, #4]
 800c9c6:	f000 fd4f 	bl	800d468 <sw_color_fill>
 800c9ca:	e002      	b.n	800c9d2 <lv_draw_fill+0xec>
    if(opa < LV_OPA_MIN) return;
 800c9cc:	bf00      	nop
 800c9ce:	e000      	b.n	800c9d2 <lv_draw_fill+0xec>
        return;
 800c9d0:	bf00      	nop
#endif
}
 800c9d2:	3738      	adds	r7, #56	; 0x38
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 800c9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9da:	b0a1      	sub	sp, #132	; 0x84
 800c9dc:	af04      	add	r7, sp, #16
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800c9ec:	23ff      	movs	r3, #255	; 0xff
 800c9ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800c9f2:	4bbe      	ldr	r3, [pc, #760]	; (800ccec <lv_draw_letter+0x314>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800c9f8:	4bbd      	ldr	r3, [pc, #756]	; (800ccf0 <lv_draw_letter+0x318>)
 800c9fa:	f107 041c 	add.w	r4, r7, #28
 800c9fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 800ca04:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800ca08:	2b0f      	cmp	r3, #15
 800ca0a:	f240 827e 	bls.w	800cf0a <lv_draw_letter+0x532>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ca0e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800ca12:	2bfb      	cmp	r3, #251	; 0xfb
 800ca14:	d902      	bls.n	800ca1c <lv_draw_letter+0x44>
 800ca16:	23ff      	movs	r3, #255	; 0xff
 800ca18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    if(font_p == NULL) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8275 	beq.w	800cf0e <lv_draw_letter+0x536>
        LV_LOG_WARN("Font: character's bitmap not found");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800ca24:	f107 0114 	add.w	r1, r7, #20
 800ca28:	2300      	movs	r3, #0
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f008 fc72 	bl	8015316 <lv_font_get_glyph_dsc>
 800ca32:	4603      	mov	r3, r0
 800ca34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(g_ret == false) return;
 800ca38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca3c:	f083 0301 	eor.w	r3, r3, #1
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 8265 	bne.w	800cf12 <lv_draw_letter+0x53a>

    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4413      	add	r3, r2
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7a1b      	ldrb	r3, [r3, #8]
 800ca6a:	b299      	uxth	r1, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7a5b      	ldrb	r3, [r3, #9]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	1acb      	subs	r3, r1, r3
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	4413      	add	r3, r2
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    const uint8_t * bpp_opa_table;
    uint8_t bitmask_init;
    uint8_t bitmask;

    switch(g.bpp) {
 800ca90:	7ebb      	ldrb	r3, [r7, #26]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	2b07      	cmp	r3, #7
 800ca96:	f200 823e 	bhi.w	800cf16 <lv_draw_letter+0x53e>
 800ca9a:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <lv_draw_letter+0xc8>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800cac1 	.word	0x0800cac1
 800caa4:	0800cacf 	.word	0x0800cacf
 800caa8:	0800cf17 	.word	0x0800cf17
 800caac:	0800cadd 	.word	0x0800cadd
 800cab0:	0800cf17 	.word	0x0800cf17
 800cab4:	0800cf17 	.word	0x0800cf17
 800cab8:	0800cf17 	.word	0x0800cf17
 800cabc:	0800caeb 	.word	0x0800caeb
        case 1:
            bpp_opa_table = bpp1_opa_table;
 800cac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cac4:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0x80;
 800cac6:	2380      	movs	r3, #128	; 0x80
 800cac8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800cacc:	e013      	b.n	800caf6 <lv_draw_letter+0x11e>
        case 2:
            bpp_opa_table = bpp2_opa_table;
 800cace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cad2:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xC0;
 800cad4:	23c0      	movs	r3, #192	; 0xc0
 800cad6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800cada:	e00c      	b.n	800caf6 <lv_draw_letter+0x11e>
        case 4:
            bpp_opa_table = bpp4_opa_table;
 800cadc:	f107 031c 	add.w	r3, r7, #28
 800cae0:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xF0;
 800cae2:	23f0      	movs	r3, #240	; 0xf0
 800cae4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800cae8:	e005      	b.n	800caf6 <lv_draw_letter+0x11e>
        case 8:
            bpp_opa_table = NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xFF;
 800caee:	23ff      	movs	r3, #255	; 0xff
 800caf0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;       /*No opa table, pixel value will be used directly*/
 800caf4:	bf00      	nop
        default: return; /*Invalid bpp. Can't render the letter*/
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f008 fbfd 	bl	80152f8 <lv_font_get_glyph_bitmap>
 800cafe:	6678      	str	r0, [r7, #100]	; 0x64

    if(map_p == NULL) return;
 800cb00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8209 	beq.w	800cf1a <lv_draw_letter+0x542>

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800cb08:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800cb0c:	7dba      	ldrb	r2, [r7, #22]
 800cb0e:	4413      	add	r3, r2
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	f9b2 2000 	ldrsh.w	r2, [r2]
 800cb16:	4293      	cmp	r3, r2
 800cb18:	f2c0 8201 	blt.w	800cf1e <lv_draw_letter+0x546>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb22:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800cb26:	429a      	cmp	r2, r3
 800cb28:	f300 81f9 	bgt.w	800cf1e <lv_draw_letter+0x546>
 800cb2c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800cb30:	7dfa      	ldrb	r2, [r7, #23]
 800cb32:	4413      	add	r3, r2
 800cb34:	68ba      	ldr	r2, [r7, #8]
 800cb36:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	f2c0 81ef 	blt.w	800cf1e <lv_draw_letter+0x546>
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cb46:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	f300 81e7 	bgt.w	800cf1e <lv_draw_letter+0x546>

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800cb50:	f7fe f946 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800cb54:	64f8      	str	r0, [r7, #76]	; 0x4c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800cb56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cb58:	f009 f83e 	bl	8015bd8 <lv_disp_get_buf>
 800cb5c:	64b8      	str	r0, [r7, #72]	; 0x48

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 800cb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb60:	3310      	adds	r3, #16
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff fe10 	bl	800c788 <lv_area_get_width>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800cb6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t col, row;

    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 800cb74:	7dbb      	ldrb	r3, [r7, #22]
 800cb76:	08db      	lsrs	r3, r3, #3
 800cb78:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(g.box_w & 0x7) width_byte_scr++;
 800cb7c:	7dbb      	ldrb	r3, [r7, #22]
 800cb7e:	f003 0307 	and.w	r3, r3, #7
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <lv_draw_letter+0x1b8>
 800cb86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800cb90:	7dbb      	ldrb	r3, [r7, #22]
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	7ebb      	ldrb	r3, [r7, #26]
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	fb12 f303 	smulbb	r3, r2, r3
 800cb9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Calculate the col/row start/end on the map*/
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cba6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	da09      	bge.n	800cbc2 <lv_draw_letter+0x1ea>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	b21b      	sxth	r3, r3
 800cbc0:	e000      	b.n	800cbc4 <lv_draw_letter+0x1ec>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800cbc8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800cbcc:	7dba      	ldrb	r2, [r7, #22]
 800cbce:	4413      	add	r3, r2
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	dc02      	bgt.n	800cbe0 <lv_draw_letter+0x208>
 800cbda:	7dbb      	ldrb	r3, [r7, #22]
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	e00a      	b.n	800cbf6 <lv_draw_letter+0x21e>
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	b21b      	sxth	r3, r3
 800cbf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cbfe:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800cc02:	429a      	cmp	r2, r3
 800cc04:	da09      	bge.n	800cc1a <lv_draw_letter+0x242>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	b21b      	sxth	r3, r3
 800cc18:	e000      	b.n	800cc1c <lv_draw_letter+0x244>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800cc1e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800cc22:	7dfa      	ldrb	r2, [r7, #23]
 800cc24:	4413      	add	r3, r2
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	dc02      	bgt.n	800cc36 <lv_draw_letter+0x25e>
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	e00a      	b.n	800cc4c <lv_draw_letter+0x274>
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	3301      	adds	r3, #1
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	b21b      	sxth	r3, r3
 800cc4c:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800cc4e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800cc52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc54:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800cc5e:	fb02 f203 	mul.w	r2, r2, r3
 800cc62:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800cc66:	4413      	add	r3, r2
 800cc68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc6a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800cc6e:	1a9b      	subs	r3, r3, r2
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc74:	4413      	add	r3, r2
 800cc76:	663b      	str	r3, [r7, #96]	; 0x60

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800cc78:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800cc7c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800cc80:	fb02 f203 	mul.w	r2, r2, r3
 800cc84:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800cc88:	4413      	add	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc8e:	4413      	add	r3, r2
 800cc90:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800cc92:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800cc96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc9a:	fb02 f203 	mul.w	r2, r2, r3
 800cc9e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800cca2:	7eb9      	ldrb	r1, [r7, #26]
 800cca4:	fb01 f303 	mul.w	r3, r1, r3
 800cca8:	4413      	add	r3, r2
 800ccaa:	637b      	str	r3, [r7, #52]	; 0x34
    map_p += bit_ofs >> 3;
 800ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccae:	08db      	lsrs	r3, r3, #3
 800ccb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccb2:	4413      	add	r3, r2
 800ccb4:	667b      	str	r3, [r7, #100]	; 0x64

    uint8_t letter_px;
    lv_opa_t px_opa;
    uint16_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	f003 0307 	and.w	r3, r3, #7
 800ccbe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    bool scr_transp = false;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    for(row = row_start; row < row_end; row++) {
 800ccc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ccce:	e114      	b.n	800cefa <lv_draw_letter+0x522>
        bitmask = bitmask_init >> col_bit;
 800ccd0:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800ccd4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ccd8:	fa42 f303 	asr.w	r3, r2, r3
 800ccdc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        for(col = col_start; col < col_end; col++) {
 800cce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cce4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800cce8:	e0cc      	b.n	800ce84 <lv_draw_letter+0x4ac>
 800ccea:	bf00      	nop
 800ccec:	0802d41c 	.word	0x0802d41c
 800ccf0:	0802d420 	.word	0x0802d420
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 800ccf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	461a      	mov	r2, r3
 800cd02:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cd06:	f1c3 0308 	rsb	r3, r3, #8
 800cd0a:	7eb9      	ldrb	r1, [r7, #26]
 800cd0c:	1a5b      	subs	r3, r3, r1
 800cd0e:	fa42 f303 	asr.w	r3, r2, r3
 800cd12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            if(letter_px != 0) {
 800cd16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8089 	beq.w	800ce32 <lv_draw_letter+0x45a>
                if(opa == LV_OPA_COVER) {
 800cd20:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800cd24:	2bff      	cmp	r3, #255	; 0xff
 800cd26:	d10d      	bne.n	800cd44 <lv_draw_letter+0x36c>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800cd28:	7ebb      	ldrb	r3, [r7, #26]
 800cd2a:	2b08      	cmp	r3, #8
 800cd2c:	d005      	beq.n	800cd3a <lv_draw_letter+0x362>
 800cd2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd34:	4413      	add	r3, r2
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	e001      	b.n	800cd3e <lv_draw_letter+0x366>
 800cd3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd3e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800cd42:	e020      	b.n	800cd86 <lv_draw_letter+0x3ae>
                } else {
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800cd44:	7ebb      	ldrb	r3, [r7, #26]
 800cd46:	2b08      	cmp	r3, #8
 800cd48:	d10c      	bne.n	800cd64 <lv_draw_letter+0x38c>
 800cd4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	fb12 f303 	smulbb	r3, r2, r3
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	0a1b      	lsrs	r3, r3, #8
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	e00e      	b.n	800cd82 <lv_draw_letter+0x3aa>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800cd64:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd6a:	4413      	add	r3, r2
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	fb12 f303 	smulbb	r3, r2, r3
 800cd7a:	b29b      	uxth	r3, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800cd7c:	0a1b      	lsrs	r3, r3, #8
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                }

                if(disp->driver.set_px_cb) {
 800cd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d02c      	beq.n	800cde8 <lv_draw_letter+0x410>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800cd8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd90:	695c      	ldr	r4, [r3, #20]
 800cd92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd96:	6899      	ldr	r1, [r3, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800cd98:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800cd9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cda0:	4413      	add	r3, r2
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800cdb0:	b21e      	sxth	r6, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800cdb2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800cdb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdc0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800cdca:	b21b      	sxth	r3, r3
 800cdcc:	f9b7 5046 	ldrsh.w	r5, [r7, #70]	; 0x46
 800cdd0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800cdd4:	9202      	str	r2, [sp, #8]
 800cdd6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800cdda:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	4633      	mov	r3, r6
 800cde2:	462a      	mov	r2, r5
 800cde4:	47a0      	blx	r4
 800cde6:	e024      	b.n	800ce32 <lv_draw_letter+0x45a>
                } else if(vdb_buf_tmp->full != color.full) {
 800cde8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdea:	881a      	ldrh	r2, [r3, #0]
 800cdec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d01e      	beq.n	800ce32 <lv_draw_letter+0x45a>
                    if(px_opa > LV_OPA_MAX)
 800cdf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cdf8:	2bfb      	cmp	r3, #251	; 0xfb
 800cdfa:	d904      	bls.n	800ce06 <lv_draw_letter+0x42e>
                        *vdb_buf_tmp = color;
 800cdfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdfe:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800ce02:	801a      	strh	r2, [r3, #0]
 800ce04:	e015      	b.n	800ce32 <lv_draw_letter+0x45a>
                    else if(px_opa > LV_OPA_MIN) {
 800ce06:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d911      	bls.n	800ce32 <lv_draw_letter+0x45a>
                        if(scr_transp == false) {
 800ce0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce12:	f083 0301 	eor.w	r3, r3, #1
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00a      	beq.n	800ce32 <lv_draw_letter+0x45a>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800ce1c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800ce20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce22:	8819      	ldrh	r1, [r3, #0]
 800ce24:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 800ce28:	f7ff fc1e 	bl	800c668 <lv_color_mix>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce30:	801a      	strh	r2, [r3, #0]
                        }
                    }
                }
            }

            vdb_buf_tmp++;
 800ce32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce34:	3302      	adds	r3, #2
 800ce36:	663b      	str	r3, [r7, #96]	; 0x60

            if(col_bit < 8 - g.bpp) {
 800ce38:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800ce3c:	7ebb      	ldrb	r3, [r7, #26]
 800ce3e:	f1c3 0308 	rsb	r3, r3, #8
 800ce42:	429a      	cmp	r2, r3
 800ce44:	da0d      	bge.n	800ce62 <lv_draw_letter+0x48a>
                col_bit += g.bpp;
 800ce46:	7ebb      	ldrb	r3, [r7, #26]
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ce4e:	4413      	add	r3, r2
 800ce50:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask >> g.bpp;
 800ce54:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800ce58:	7eba      	ldrb	r2, [r7, #26]
 800ce5a:	4113      	asrs	r3, r2
 800ce5c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800ce60:	e009      	b.n	800ce76 <lv_draw_letter+0x49e>
            } else {
                col_bit = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask_init;
 800ce68:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ce6c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                map_p++;
 800ce70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce72:	3301      	adds	r3, #1
 800ce74:	667b      	str	r3, [r7, #100]	; 0x64
        for(col = col_start; col < col_end; col++) {
 800ce76:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800ce84:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800ce88:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	f6ff af31 	blt.w	800ccf4 <lv_draw_letter+0x31c>
            }
        }
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800ce92:	7dbb      	ldrb	r3, [r7, #22]
 800ce94:	461a      	mov	r2, r3
 800ce96:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ce9a:	1ad2      	subs	r2, r2, r3
 800ce9c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800cea0:	4413      	add	r3, r2
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	7ebb      	ldrb	r3, [r7, #26]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	fb12 f303 	smulbb	r3, r2, r3
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        map_p += (col_bit >> 3);
 800ceb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cebc:	08db      	lsrs	r3, r3, #3
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	461a      	mov	r2, r3
 800cec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cec4:	4413      	add	r3, r2
 800cec6:	667b      	str	r3, [r7, #100]	; 0x64
        col_bit = col_bit & 0x7;
 800cec8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cecc:	f003 0307 	and.w	r3, r3, #7
 800ced0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800ced4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800ced8:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800cedc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800cee0:	1acb      	subs	r3, r1, r3
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cee8:	4413      	add	r3, r2
 800ceea:	663b      	str	r3, [r7, #96]	; 0x60
    for(row = row_start; row < row_end; row++) {
 800ceec:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3301      	adds	r3, #1
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800cefa:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800cefe:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800cf02:	429a      	cmp	r2, r3
 800cf04:	f6ff aee4 	blt.w	800ccd0 <lv_draw_letter+0x2f8>
 800cf08:	e00a      	b.n	800cf20 <lv_draw_letter+0x548>
    if(opa < LV_OPA_MIN) return;
 800cf0a:	bf00      	nop
 800cf0c:	e008      	b.n	800cf20 <lv_draw_letter+0x548>
        return;
 800cf0e:	bf00      	nop
 800cf10:	e006      	b.n	800cf20 <lv_draw_letter+0x548>
    if(g_ret == false) return;
 800cf12:	bf00      	nop
 800cf14:	e004      	b.n	800cf20 <lv_draw_letter+0x548>
        default: return; /*Invalid bpp. Can't render the letter*/
 800cf16:	bf00      	nop
 800cf18:	e002      	b.n	800cf20 <lv_draw_letter+0x548>
    if(map_p == NULL) return;
 800cf1a:	bf00      	nop
 800cf1c:	e000      	b.n	800cf20 <lv_draw_letter+0x548>
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800cf1e:	bf00      	nop
    }
}
 800cf20:	3774      	adds	r7, #116	; 0x74
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf26:	bf00      	nop

0800cf28 <lv_draw_map>:
 * @param recolor mix the pixels with this color
 * @param recolor_opa the intense of recoloring
 */
void lv_draw_map(const lv_area_t * cords_p, const lv_area_t * mask_p, const uint8_t * map_p, lv_opa_t opa,
                 bool chroma_key, bool alpha_byte, lv_color_t recolor, lv_opa_t recolor_opa)
{
 800cf28:	b5b0      	push	{r4, r5, r7, lr}
 800cf2a:	b098      	sub	sp, #96	; 0x60
 800cf2c:	af04      	add	r7, sp, #16
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	70fb      	strb	r3, [r7, #3]

    if(opa < LV_OPA_MIN) return;
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	2b0f      	cmp	r3, #15
 800cf3a:	f240 825c 	bls.w	800d3f6 <lv_draw_map+0x4ce>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cf3e:	78fb      	ldrb	r3, [r7, #3]
 800cf40:	2bfb      	cmp	r3, #251	; 0xfb
 800cf42:	d901      	bls.n	800cf48 <lv_draw_map+0x20>
 800cf44:	23ff      	movs	r3, #255	; 0xff
 800cf46:	70fb      	strb	r3, [r7, #3]
    bool union_ok;

    /*Get the union of map size and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 800cf48:	f107 0320 	add.w	r3, r7, #32
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f009 f9c1 	bl	80162d8 <lv_area_intersect>
 800cf56:	4603      	mov	r3, r0
 800cf58:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) return;
 800cf5c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cf60:	f083 0301 	eor.w	r3, r3, #1
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f040 8247 	bne.w	800d3fa <lv_draw_map+0x4d2>

    /*The pixel size in byte is different if an alpha byte is added too*/
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800cf6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <lv_draw_map+0x50>
 800cf74:	2303      	movs	r3, #3
 800cf76:	e000      	b.n	800cf7a <lv_draw_map+0x52>
 800cf78:	2302      	movs	r3, #2
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    /*If the map starts OUT of the masked area then calc. the first pixel*/
    lv_coord_t map_width = lv_area_get_width(cords_p);
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7ff fc02 	bl	800c788 <lv_area_get_width>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if(cords_p->y1 < masked_a.y1) {
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800cf90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf94:	429a      	cmp	r2, r3
 800cf96:	da11      	bge.n	800cfbc <lv_draw_map+0x94>
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800cf98:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800cf9c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cfa8:	1a8a      	subs	r2, r1, r2
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	4413      	add	r3, r2
 800cfba:	607b      	str	r3, [r7, #4]
    }
    if(cords_p->x1 < masked_a.x1) {
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cfc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	da0e      	bge.n	800cfe8 <lv_draw_map+0xc0>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 800cfca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800cfdc:	fb02 f303 	mul.w	r3, r2, r3
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	607b      	str	r3, [r7, #4]
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800cfe8:	f7fd fefa 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800cfec:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800cfee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cff0:	f008 fdf2 	bl	8015bd8 <lv_disp_get_buf>
 800cff4:	63b8      	str	r0, [r7, #56]	; 0x38

    /*Stores coordinates relative to the current VDB*/
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 800cff6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d002:	b29b      	uxth	r3, r3
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	b29b      	uxth	r3, r3
 800d008:	b21b      	sxth	r3, r3
 800d00a:	843b      	strh	r3, [r7, #32]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 800d00c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d010:	b29a      	uxth	r2, r3
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	b21b      	sxth	r3, r3
 800d020:	847b      	strh	r3, [r7, #34]	; 0x22
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 800d022:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d026:	b29a      	uxth	r2, r3
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	b29b      	uxth	r3, r3
 800d034:	b21b      	sxth	r3, r3
 800d036:	84bb      	strh	r3, [r7, #36]	; 0x24
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 800d038:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d044:	b29b      	uxth	r3, r3
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	b29b      	uxth	r3, r3
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 800d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d050:	3310      	adds	r3, #16
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fb98 	bl	800c788 <lv_area_get_width>
 800d058:	4603      	mov	r3, r0
 800d05a:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 800d062:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d066:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800d06a:	fb02 f303 	mul.w	r3, r2, r3
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d072:	4413      	add	r3, r2
 800d074:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 800d076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d07e:	4413      	add	r3, r2
 800d080:	64fb      	str	r3, [r7, #76]	; 0x4c

    lv_coord_t row;
    lv_coord_t map_useful_w = lv_area_get_width(&masked_a);
 800d082:	f107 0320 	add.w	r3, r7, #32
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fb7e 	bl	800c788 <lv_area_get_width>
 800d08c:	4603      	mov	r3, r0
 800d08e:	86bb      	strh	r3, [r7, #52]	; 0x34

    bool scr_transp = false;
 800d090:	2300      	movs	r3, #0
 800d092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    /*The simplest case just copy the pixels into the VDB*/
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800d096:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d09a:	f083 0301 	eor.w	r3, r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 808d 	beq.w	800d1c0 <lv_draw_map+0x298>
 800d0a6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d0aa:	f083 0301 	eor.w	r3, r3, #1
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f000 8085 	beq.w	800d1c0 <lv_draw_map+0x298>
 800d0b6:	78fb      	ldrb	r3, [r7, #3]
 800d0b8:	2bff      	cmp	r3, #255	; 0xff
 800d0ba:	f040 8081 	bne.w	800d1c0 <lv_draw_map+0x298>
 800d0be:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d17c      	bne.n	800d1c0 <lv_draw_map+0x298>

        /*Use the custom VDB write function is exists*/
        if(disp->driver.set_px_cb) {
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d04f      	beq.n	800d16e <lv_draw_map+0x246>
            lv_coord_t col;
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d0ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d0d4:	e044      	b.n	800d160 <lv_draw_map+0x238>
                for(col = 0; col < map_useful_w; col++) {
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d0dc:	e029      	b.n	800d132 <lv_draw_map+0x20a>
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 800d0de:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800d0e2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800d0e6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	83bb      	strh	r3, [r7, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 800d0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f4:	695c      	ldr	r4, [r3, #20]
 800d0f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	6899      	ldr	r1, [r3, #8]
 800d0fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d100:	b29a      	uxth	r2, r3
 800d102:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d106:	4413      	add	r3, r2
 800d108:	b29b      	uxth	r3, r3
 800d10a:	b21d      	sxth	r5, r3
 800d10c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	9302      	str	r3, [sp, #8]
 800d114:	8bbb      	ldrh	r3, [r7, #28]
 800d116:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d11a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	462b      	mov	r3, r5
 800d122:	47a0      	blx	r4
                for(col = 0; col < map_useful_w; col++) {
 800d124:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800d128:	b29b      	uxth	r3, r3
 800d12a:	3301      	adds	r3, #1
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d132:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800d136:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800d13a:	429a      	cmp	r2, r3
 800d13c:	dbcf      	blt.n	800d0de <lv_draw_map+0x1b6>
                                           px_color, opa);
                }
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800d13e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800d142:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800d146:	fb02 f303 	mul.w	r3, r2, r3
 800d14a:	461a      	mov	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4413      	add	r3, r2
 800d150:	607b      	str	r3, [r7, #4]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d152:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d156:	b29b      	uxth	r3, r3
 800d158:	3301      	adds	r3, #1
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d160:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d164:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800d168:	429a      	cmp	r2, r3
 800d16a:	ddb4      	ble.n	800d0d6 <lv_draw_map+0x1ae>
        if(disp->driver.set_px_cb) {
 800d16c:	e146      	b.n	800d3fc <lv_draw_map+0x4d4>
            }
        }
        /*Normal native VDB*/
        else {
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d16e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d170:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d174:	e01d      	b.n	800d1b2 <lv_draw_map+0x28a>
                    sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                } else {
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                }
#else
                sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800d176:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	6879      	ldr	r1, [r7, #4]
 800d17e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d180:	f000 f93f 	bl	800d402 <sw_mem_blend>
#endif
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800d184:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800d188:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800d18c:	fb02 f303 	mul.w	r3, r2, r3
 800d190:	461a      	mov	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4413      	add	r3, r2
 800d196:	607b      	str	r3, [r7, #4]
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 800d198:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1a0:	4413      	add	r3, r2
 800d1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d1a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d1b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d1b6:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	dddb      	ble.n	800d176 <lv_draw_map+0x24e>
        if(disp->driver.set_px_cb) {
 800d1be:	e11d      	b.n	800d3fc <lv_draw_map+0x4d4>

    /*In the other cases every pixel need to be checked one-by-one*/
    else {

        lv_coord_t col;
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	833b      	strh	r3, [r7, #24]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d1c4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	8b39      	ldrh	r1, [r7, #24]
 800d1cc:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 800d1d0:	f7ff fa4a 	bl	800c668 <lv_color_mix>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	82bb      	strh	r3, [r7, #20]
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d1d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d1de:	e102      	b.n	800d3e6 <lv_draw_map+0x4be>
            for(col = 0; col < map_useful_w; col++) {
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d1e6:	e0e0      	b.n	800d3aa <lv_draw_map+0x482>
                lv_opa_t opa_result  = opa;
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                uint8_t * px_color_p = (uint8_t *)&map_p[(uint32_t)col * px_size_byte];
 800d1ee:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d1f2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800d1f6:	fb02 f303 	mul.w	r3, r2, r3
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                lv_color_t px_color;

                /*Calculate with the pixel level alpha*/
                if(alpha_byte) {
 800d200:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d204:	2b00      	cmp	r3, #0
 800d206:	d022      	beq.n	800d24e <lv_draw_map+0x326>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                    px_color.full = px_color_p[0];
#elif LV_COLOR_DEPTH == 16
                    /*Because of Alpha byte 16 bit color can start on odd address which can cause
                     * crash*/
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	3301      	adds	r3, #1
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	b29b      	uxth	r3, r3
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4413      	add	r3, r2
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	823b      	strh	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 32
                    px_color = *((lv_color_t *)px_color_p);
#endif
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	789b      	ldrb	r3, [r3, #2]
 800d224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(px_opa == LV_OPA_TRANSP)
 800d228:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 80b2 	beq.w	800d396 <lv_draw_map+0x46e>
                        continue;
                    else if(px_opa != LV_OPA_COVER)
 800d232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d236:	2bff      	cmp	r3, #255	; 0xff
 800d238:	d00c      	beq.n	800d254 <lv_draw_map+0x32c>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 800d23a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d23e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d242:	fb02 f303 	mul.w	r3, r2, r3
 800d246:	0a1b      	lsrs	r3, r3, #8
 800d248:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800d24c:	e002      	b.n	800d254 <lv_draw_map+0x32c>
                } else {
                    px_color = *((lv_color_t *)px_color_p);
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	823b      	strh	r3, [r7, #16]
                }

                /*Handle chroma key*/
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 800d254:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d005      	beq.n	800d268 <lv_draw_map+0x340>
 800d25c:	8a3a      	ldrh	r2, [r7, #16]
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	8b9b      	ldrh	r3, [r3, #28]
 800d262:	429a      	cmp	r2, r3
 800d264:	f000 8099 	beq.w	800d39a <lv_draw_map+0x472>

                /*Re-color the pixel if required*/
                if(recolor_opa != LV_OPA_TRANSP) {
 800d268:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d04d      	beq.n	800d30c <lv_draw_map+0x3e4>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 800d270:	8b3a      	ldrh	r2, [r7, #24]
 800d272:	8a3b      	ldrh	r3, [r7, #16]
 800d274:	429a      	cmp	r2, r3
 800d276:	d00b      	beq.n	800d290 <lv_draw_map+0x368>
                                                               new colors (save the last)*/
                        last_img_px  = px_color;
 800d278:	8a3b      	ldrh	r3, [r7, #16]
 800d27a:	833b      	strh	r3, [r7, #24]
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d27c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d280:	461a      	mov	r2, r3
 800d282:	8b39      	ldrh	r1, [r7, #24]
 800d284:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 800d288:	f7ff f9ee 	bl	800c668 <lv_color_mix>
 800d28c:	4603      	mov	r3, r0
 800d28e:	82bb      	strh	r3, [r7, #20]
                    }
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 800d290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d01a      	beq.n	800d2ce <lv_draw_map+0x3a6>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29a:	695c      	ldr	r4, [r3, #20]
 800d29c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	6899      	ldr	r1, [r3, #8]
 800d2a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	b21d      	sxth	r5, r3
 800d2b2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800d2b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d2ba:	9302      	str	r3, [sp, #8]
 800d2bc:	8abb      	ldrh	r3, [r7, #20]
 800d2be:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d2c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	47a0      	blx	r4
 800d2cc:	e066      	b.n	800d39c <lv_draw_map+0x474>
                                               row, recolored_px, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {
                        if(opa_result == LV_OPA_COVER)
 800d2ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d2d2:	2bff      	cmp	r3, #255	; 0xff
 800d2d4:	d107      	bne.n	800d2e6 <lv_draw_map+0x3be>
                            vdb_buf_tmp[col].full = recolored_px.full;
 800d2d6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2de:	4413      	add	r3, r2
 800d2e0:	8aba      	ldrh	r2, [r7, #20]
 800d2e2:	801a      	strh	r2, [r3, #0]
 800d2e4:	e05a      	b.n	800d39c <lv_draw_map+0x474>
                        else
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 800d2e6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800d2f4:	0052      	lsls	r2, r2, #1
 800d2f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d2f8:	188c      	adds	r4, r1, r2
 800d2fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d2fe:	8819      	ldrh	r1, [r3, #0]
 800d300:	8ab8      	ldrh	r0, [r7, #20]
 800d302:	f7ff f9b1 	bl	800c668 <lv_color_mix>
 800d306:	4603      	mov	r3, r0
 800d308:	8023      	strh	r3, [r4, #0]
 800d30a:	e047      	b.n	800d39c <lv_draw_map+0x474>
                    }
                } else {
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 800d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01a      	beq.n	800d34a <lv_draw_map+0x422>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800d314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d316:	695c      	ldr	r4, [r3, #20]
 800d318:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	6899      	ldr	r1, [r3, #8]
 800d31e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d322:	b29a      	uxth	r2, r3
 800d324:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d328:	4413      	add	r3, r2
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	b21d      	sxth	r5, r3
 800d32e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800d332:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d336:	9302      	str	r3, [sp, #8]
 800d338:	8a3b      	ldrh	r3, [r7, #16]
 800d33a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d33e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	462b      	mov	r3, r5
 800d346:	47a0      	blx	r4
 800d348:	e028      	b.n	800d39c <lv_draw_map+0x474>
                                               row, px_color, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {

                        if(opa_result == LV_OPA_COVER)
 800d34a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d34e:	2bff      	cmp	r3, #255	; 0xff
 800d350:	d107      	bne.n	800d362 <lv_draw_map+0x43a>
                            vdb_buf_tmp[col] = px_color;
 800d352:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d35a:	4413      	add	r3, r2
 800d35c:	8a3a      	ldrh	r2, [r7, #16]
 800d35e:	801a      	strh	r2, [r3, #0]
 800d360:	e01c      	b.n	800d39c <lv_draw_map+0x474>
                        else {
                            if(scr_transp == false) {
 800d362:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d366:	f083 0301 	eor.w	r3, r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d015      	beq.n	800d39c <lv_draw_map+0x474>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800d370:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d374:	005b      	lsls	r3, r3, #1
 800d376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d378:	4413      	add	r3, r2
 800d37a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800d37e:	0052      	lsls	r2, r2, #1
 800d380:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d382:	188c      	adds	r4, r1, r2
 800d384:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d388:	8819      	ldrh	r1, [r3, #0]
 800d38a:	8a38      	ldrh	r0, [r7, #16]
 800d38c:	f7ff f96c 	bl	800c668 <lv_color_mix>
 800d390:	4603      	mov	r3, r0
 800d392:	8023      	strh	r3, [r4, #0]
 800d394:	e002      	b.n	800d39c <lv_draw_map+0x474>
                        continue;
 800d396:	bf00      	nop
 800d398:	e000      	b.n	800d39c <lv_draw_map+0x474>
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 800d39a:	bf00      	nop
            for(col = 0; col < map_useful_w; col++) {
 800d39c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d3aa:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800d3ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	f6ff af18 	blt.w	800d1e8 <lv_draw_map+0x2c0>
                        }
                    }
                }
            }

            map_p += map_width * px_size_byte; /*Next row on the map*/
 800d3b8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800d3bc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800d3c0:	fb02 f303 	mul.w	r3, r2, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	607b      	str	r3, [r7, #4]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 800d3cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3d4:	4413      	add	r3, r2
 800d3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d3d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d3e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d3ea:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	f77f aef6 	ble.w	800d1e0 <lv_draw_map+0x2b8>
 800d3f4:	e002      	b.n	800d3fc <lv_draw_map+0x4d4>
    if(opa < LV_OPA_MIN) return;
 800d3f6:	bf00      	nop
 800d3f8:	e000      	b.n	800d3fc <lv_draw_map+0x4d4>
    if(union_ok == false) return;
 800d3fa:	bf00      	nop
        }
    }
}
 800d3fc:	3750      	adds	r7, #80	; 0x50
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bdb0      	pop	{r4, r5, r7, pc}

0800d402 <sw_mem_blend>:
 * @param src pointer to pixel map. Copy it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 800d402:	b590      	push	{r4, r7, lr}
 800d404:	b087      	sub	sp, #28
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	607a      	str	r2, [r7, #4]
 800d40e:	70fb      	strb	r3, [r7, #3]
    if(opa == LV_OPA_COVER) {
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	2bff      	cmp	r3, #255	; 0xff
 800d414:	d107      	bne.n	800d426 <sw_mem_blend+0x24>
        memcpy(dest, src, length * sizeof(lv_color_t));
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	461a      	mov	r2, r3
 800d41c:	68b9      	ldr	r1, [r7, #8]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f01d fdf6 	bl	802b010 <memcpy>
        uint32_t col;
        for(col = 0; col < length; col++) {
            dest[col] = lv_color_mix(src[col], dest[col], opa);
        }
    }
}
 800d424:	e01c      	b.n	800d460 <sw_mem_blend+0x5e>
        for(col = 0; col < length; col++) {
 800d426:	2300      	movs	r3, #0
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	e015      	b.n	800d458 <sw_mem_blend+0x56>
            dest[col] = lv_color_mix(src[col], dest[col], opa);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	4413      	add	r3, r2
 800d434:	697a      	ldr	r2, [r7, #20]
 800d436:	0052      	lsls	r2, r2, #1
 800d438:	68f9      	ldr	r1, [r7, #12]
 800d43a:	4411      	add	r1, r2
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	0052      	lsls	r2, r2, #1
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	1884      	adds	r4, r0, r2
 800d444:	78fa      	ldrb	r2, [r7, #3]
 800d446:	8809      	ldrh	r1, [r1, #0]
 800d448:	8818      	ldrh	r0, [r3, #0]
 800d44a:	f7ff f90d 	bl	800c668 <lv_color_mix>
 800d44e:	4603      	mov	r3, r0
 800d450:	8023      	strh	r3, [r4, #0]
        for(col = 0; col < length; col++) {
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	3301      	adds	r3, #1
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	697a      	ldr	r2, [r7, #20]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d3e5      	bcc.n	800d42c <sw_mem_blend+0x2a>
}
 800d460:	bf00      	nop
 800d462:	371c      	adds	r7, #28
 800d464:	46bd      	mov	sp, r7
 800d466:	bd90      	pop	{r4, r7, pc}

0800d468 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 800d468:	b590      	push	{r4, r7, lr}
 800d46a:	b08f      	sub	sp, #60	; 0x3c
 800d46c:	af04      	add	r7, sp, #16
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	607a      	str	r2, [r7, #4]
 800d472:	813b      	strh	r3, [r7, #8]
 800d474:	460b      	mov	r3, r1
 800d476:	817b      	strh	r3, [r7, #10]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800d478:	f7fd fcb2 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800d47c:	6238      	str	r0, [r7, #32]
    if(disp->driver.set_px_cb) {
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d035      	beq.n	800d4f2 <sw_color_fill+0x8a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d48c:	e029      	b.n	800d4e2 <sw_color_fill+0x7a>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	885b      	ldrh	r3, [r3, #2]
 800d492:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d494:	e018      	b.n	800d4c8 <sw_color_fill+0x60>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	695c      	ldr	r4, [r3, #20]
 800d49a:	6a38      	ldr	r0, [r7, #32]
 800d49c:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800d4a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800d4a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d4a8:	9302      	str	r3, [sp, #8]
 800d4aa:	893b      	ldrh	r3, [r7, #8]
 800d4ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d4b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	68f9      	ldr	r1, [r7, #12]
 800d4ba:	47a0      	blx	r4
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800d4bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d4ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	dddf      	ble.n	800d496 <sw_color_fill+0x2e>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d4d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d4e8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	ddce      	ble.n	800d48e <sw_color_fill+0x26>
                }
                mem += mem_width;
            }
        }
    }
}
 800d4f0:	e0c4      	b.n	800d67c <sw_color_fill+0x214>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d4fe:	fb03 f302 	mul.w	r3, r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4413      	add	r3, r2
 800d508:	60fb      	str	r3, [r7, #12]
        if(opa == LV_OPA_COVER) {
 800d50a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d50e:	2bff      	cmp	r3, #255	; 0xff
 800d510:	d159      	bne.n	800d5c6 <sw_color_fill+0x15e>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d518:	e00c      	b.n	800d534 <sw_color_fill+0xcc>
                mem[col] = color;
 800d51a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d51e:	005b      	lsls	r3, r3, #1
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	4413      	add	r3, r2
 800d524:	893a      	ldrh	r2, [r7, #8]
 800d526:	801a      	strh	r2, [r3, #0]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d528:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3301      	adds	r3, #1
 800d530:	b29b      	uxth	r3, r3
 800d532:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d53a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800d53e:	429a      	cmp	r2, r3
 800d540:	ddeb      	ble.n	800d51a <sw_color_fill+0xb2>
            lv_color_t * mem_first = &mem[fill_area->x1];
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	4413      	add	r3, r2
 800d54e:	61bb      	str	r3, [r7, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d556:	461a      	mov	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	3301      	adds	r3, #1
 800d562:	b29b      	uxth	r3, r3
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	b29b      	uxth	r3, r3
 800d568:	82fb      	strh	r3, [r7, #22]
            mem += mem_width;
 800d56a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	3301      	adds	r3, #1
 800d580:	b29b      	uxth	r3, r3
 800d582:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d584:	e017      	b.n	800d5b6 <sw_color_fill+0x14e>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	4413      	add	r3, r2
 800d592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d596:	69b9      	ldr	r1, [r7, #24]
 800d598:	4618      	mov	r0, r3
 800d59a:	f01d fd39 	bl	802b010 <memcpy>
                mem += mem_width;
 800d59e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800d5aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5bc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	dde0      	ble.n	800d586 <sw_color_fill+0x11e>
}
 800d5c4:	e05a      	b.n	800d67c <sw_color_fill+0x214>
            bool scr_transp = false;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	77fb      	strb	r3, [r7, #31]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	82bb      	strh	r3, [r7, #20]
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800d5ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	8ab9      	ldrh	r1, [r7, #20]
 800d5d6:	8938      	ldrh	r0, [r7, #8]
 800d5d8:	f7ff f846 	bl	800c668 <lv_color_mix>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	823b      	strh	r3, [r7, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	885b      	ldrh	r3, [r3, #2]
 800d5e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5e6:	e042      	b.n	800d66e <sw_color_fill+0x206>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d5ee:	e02b      	b.n	800d648 <sw_color_fill+0x1e0>
                    if(scr_transp == false) {
 800d5f0:	7ffb      	ldrb	r3, [r7, #31]
 800d5f2:	f083 0301 	eor.w	r3, r3, #1
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d01f      	beq.n	800d63c <sw_color_fill+0x1d4>
                        if(mem[col].full != bg_tmp.full) {
 800d5fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	4413      	add	r3, r2
 800d606:	881a      	ldrh	r2, [r3, #0]
 800d608:	8abb      	ldrh	r3, [r7, #20]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d00f      	beq.n	800d62e <sw_color_fill+0x1c6>
                            bg_tmp  = mem[col];
 800d60e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	82bb      	strh	r3, [r7, #20]
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800d61c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d620:	461a      	mov	r2, r3
 800d622:	8ab9      	ldrh	r1, [r7, #20]
 800d624:	8938      	ldrh	r0, [r7, #8]
 800d626:	f7ff f81f 	bl	800c668 <lv_color_mix>
 800d62a:	4603      	mov	r3, r0
 800d62c:	823b      	strh	r3, [r7, #16]
                        mem[col] = opa_tmp;
 800d62e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	4413      	add	r3, r2
 800d638:	8a3a      	ldrh	r2, [r7, #16]
 800d63a:	801a      	strh	r2, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800d63c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d640:	b29b      	uxth	r3, r3
 800d642:	3301      	adds	r3, #1
 800d644:	b29b      	uxth	r3, r3
 800d646:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d64e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800d652:	429a      	cmp	r2, r3
 800d654:	ddcc      	ble.n	800d5f0 <sw_color_fill+0x188>
                mem += mem_width;
 800d656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	4413      	add	r3, r2
 800d660:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800d662:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d666:	b29b      	uxth	r3, r3
 800d668:	3301      	adds	r3, #1
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d674:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d678:	429a      	cmp	r2, r3
 800d67a:	ddb5      	ble.n	800d5e8 <sw_color_fill+0x180>
}
 800d67c:	bf00      	nop
 800d67e:	372c      	adds	r7, #44	; 0x2c
 800d680:	46bd      	mov	sp, r7
 800d682:	bd90      	pop	{r4, r7, pc}

0800d684 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800d68e:	2208      	movs	r2, #8
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f01d fcbc 	bl	802b010 <memcpy>
}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	3301      	adds	r3, #1
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	b21b      	sxth	r3, r3
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	370c      	adds	r7, #12
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <lv_draw_img>:
 * @param style style of the image
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_style_t * style,
                 lv_opa_t opa_scale)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08c      	sub	sp, #48	; 0x30
 800d6d4:	af06      	add	r7, sp, #24
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d11a      	bne.n	800d71a <lv_draw_img+0x4a>
        LV_LOG_WARN("Image draw: src is NULL");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d6e4:	23ff      	movs	r3, #255	; 0xff
 800d6e6:	4a23      	ldr	r2, [pc, #140]	; (800d774 <lv_draw_img+0xa4>)
 800d6e8:	68b9      	ldr	r1, [r7, #8]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f002 fd21 	bl	8010132 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	9305      	str	r3, [sp, #20]
 800d6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6f8:	9304      	str	r3, [sp, #16]
 800d6fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	2300      	movs	r3, #0
 800d702:	9302      	str	r3, [sp, #8]
 800d704:	2300      	movs	r3, #0
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	4b1b      	ldr	r3, [pc, #108]	; (800d778 <lv_draw_img+0xa8>)
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	23ff      	movs	r3, #255	; 0xff
 800d70e:	4a19      	ldr	r2, [pc, #100]	; (800d774 <lv_draw_img+0xa4>)
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f000 fa74 	bl	800dc00 <lv_draw_label>
        return;
 800d718:	e028      	b.n	800d76c <lv_draw_img+0x9c>
    }

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, style, opa_scale);
 800d71a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	68b9      	ldr	r1, [r7, #8]
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f000 f8f0 	bl	800d90c <lv_img_draw_core>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d11a      	bne.n	800d76c <lv_draw_img+0x9c>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d736:	23ff      	movs	r3, #255	; 0xff
 800d738:	4a0e      	ldr	r2, [pc, #56]	; (800d774 <lv_draw_img+0xa4>)
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f002 fcf8 	bl	8010132 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d742:	2300      	movs	r3, #0
 800d744:	9305      	str	r3, [sp, #20]
 800d746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d74a:	9304      	str	r3, [sp, #16]
 800d74c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	2300      	movs	r3, #0
 800d754:	9302      	str	r3, [sp, #8]
 800d756:	2300      	movs	r3, #0
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	4b07      	ldr	r3, [pc, #28]	; (800d778 <lv_draw_img+0xa8>)
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	23ff      	movs	r3, #255	; 0xff
 800d760:	4a04      	ldr	r2, [pc, #16]	; (800d774 <lv_draw_img+0xa4>)
 800d762:	68b9      	ldr	r1, [r7, #8]
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 fa4b 	bl	800dc00 <lv_draw_label>
        return;
 800d76a:	bf00      	nop
    }
}
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	2001ba40 	.word	0x2001ba40
 800d778:	0802d430 	.word	0x0802d430

0800d77c <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800d78a:	79fb      	ldrb	r3, [r7, #7]
 800d78c:	2b0e      	cmp	r3, #14
 800d78e:	d836      	bhi.n	800d7fe <lv_img_color_format_get_px_size+0x82>
 800d790:	a201      	add	r2, pc, #4	; (adr r2, 800d798 <lv_img_color_format_get_px_size+0x1c>)
 800d792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d796:	bf00      	nop
 800d798:	0800d7d5 	.word	0x0800d7d5
 800d79c:	0800d7d5 	.word	0x0800d7d5
 800d7a0:	0800d7ff 	.word	0x0800d7ff
 800d7a4:	0800d7ff 	.word	0x0800d7ff
 800d7a8:	0800d7db 	.word	0x0800d7db
 800d7ac:	0800d7e1 	.word	0x0800d7e1
 800d7b0:	0800d7db 	.word	0x0800d7db
 800d7b4:	0800d7e7 	.word	0x0800d7e7
 800d7b8:	0800d7ed 	.word	0x0800d7ed
 800d7bc:	0800d7f3 	.word	0x0800d7f3
 800d7c0:	0800d7f9 	.word	0x0800d7f9
 800d7c4:	0800d7e7 	.word	0x0800d7e7
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7f3 	.word	0x0800d7f3
 800d7d0:	0800d7f9 	.word	0x0800d7f9
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]
 800d7d8:	e014      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 800d7da:	2310      	movs	r3, #16
 800d7dc:	73fb      	strb	r3, [r7, #15]
 800d7de:	e011      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 800d7e0:	2318      	movs	r3, #24
 800d7e2:	73fb      	strb	r3, [r7, #15]
 800d7e4:	e00e      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	73fb      	strb	r3, [r7, #15]
 800d7ea:	e00b      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	73fb      	strb	r3, [r7, #15]
 800d7f0:	e008      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 800d7f2:	2304      	movs	r3, #4
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	e005      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 800d7f8:	2308      	movs	r3, #8
 800d7fa:	73fb      	strb	r3, [r7, #15]
 800d7fc:	e002      	b.n	800d804 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]
 800d802:	bf00      	nop
    }

    return px_size;
 800d804:	7bfb      	ldrb	r3, [r7, #15]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop

0800d814 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800d81e:	2300      	movs	r3, #0
 800d820:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	2b03      	cmp	r3, #3
 800d826:	d004      	beq.n	800d832 <lv_img_color_format_is_chroma_keyed+0x1e>
 800d828:	2b03      	cmp	r3, #3
 800d82a:	db05      	blt.n	800d838 <lv_img_color_format_is_chroma_keyed+0x24>
 800d82c:	3b06      	subs	r3, #6
 800d82e:	2b04      	cmp	r3, #4
 800d830:	d802      	bhi.n	800d838 <lv_img_color_format_is_chroma_keyed+0x24>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
 800d832:	2301      	movs	r3, #1
 800d834:	73fb      	strb	r3, [r7, #15]
 800d836:	e002      	b.n	800d83e <lv_img_color_format_is_chroma_keyed+0x2a>
        default: is_chroma_keyed = false; break;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
 800d83c:	bf00      	nop
    }

    return is_chroma_keyed;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800d85a:	79fb      	ldrb	r3, [r7, #7]
 800d85c:	3b02      	subs	r3, #2
 800d85e:	2b0c      	cmp	r3, #12
 800d860:	d81f      	bhi.n	800d8a2 <lv_img_color_format_has_alpha+0x56>
 800d862:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <lv_img_color_format_has_alpha+0x1c>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d89d 	.word	0x0800d89d
 800d86c:	0800d8a3 	.word	0x0800d8a3
 800d870:	0800d8a3 	.word	0x0800d8a3
 800d874:	0800d89d 	.word	0x0800d89d
 800d878:	0800d8a3 	.word	0x0800d8a3
 800d87c:	0800d8a3 	.word	0x0800d8a3
 800d880:	0800d8a3 	.word	0x0800d8a3
 800d884:	0800d8a3 	.word	0x0800d8a3
 800d888:	0800d8a3 	.word	0x0800d8a3
 800d88c:	0800d89d 	.word	0x0800d89d
 800d890:	0800d89d 	.word	0x0800d89d
 800d894:	0800d89d 	.word	0x0800d89d
 800d898:	0800d89d 	.word	0x0800d89d
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]
 800d8a0:	e002      	b.n	800d8a8 <lv_img_color_format_has_alpha+0x5c>
        default: has_alpha = false; break;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	73fb      	strb	r3, [r7, #15]
 800d8a6:	bf00      	nop
    }

    return has_alpha;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop

0800d8b8 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <lv_img_src_get_type+0x16>
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	e018      	b.n	800d900 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b1f      	cmp	r3, #31
 800d8d8:	d907      	bls.n	800d8ea <lv_img_src_get_type+0x32>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b25b      	sxtb	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	db02      	blt.n	800d8ea <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	73fb      	strb	r3, [r7, #15]
 800d8e8:	e009      	b.n	800d8fe <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	b25b      	sxtb	r3, r3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	da02      	bge.n	800d8fa <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	73fb      	strb	r3, [r7, #15]
 800d8f8:	e001      	b.n	800d8fe <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <lv_img_draw_core>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * mask, const void * src,
                                 const lv_style_t * style, lv_opa_t opa_scale)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b095      	sub	sp, #84	; 0x54
 800d910:	af06      	add	r7, sp, #24
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	4618      	mov	r0, r3
 800d924:	f008 fcd8 	bl	80162d8 <lv_area_intersect>
 800d928:	4603      	mov	r3, r0
 800d92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(union_ok == false) {
 800d92e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d932:	f083 0301 	eor.w	r3, r3, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <lv_img_draw_core+0x34>
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
 800d93c:	2301      	movs	r3, #1
 800d93e:	e0fd      	b.n	800db3c <lv_img_draw_core+0x230>
                             successfully.*/
    }

    lv_opa_t opa =
 800d940:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d944:	2bff      	cmp	r3, #255	; 0xff
 800d946:	d103      	bne.n	800d950 <lv_img_draw_core+0x44>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d94e:	e00c      	b.n	800d96a <lv_img_draw_core+0x5e>
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d956:	b29a      	uxth	r2, r3
 800d958:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	fb12 f303 	smulbb	r3, r2, r3
 800d962:	b29b      	uxth	r3, r3
    lv_opa_t opa =
 800d964:	0a1b      	lsrs	r3, r3, #8
 800d966:	b29b      	uxth	r3, r3
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f006 faf1 	bl	8013f58 <lv_img_cache_open>
 800d976:	62f8      	str	r0, [r7, #44]	; 0x2c

    if(cdsc == NULL) return LV_RES_INV;
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <lv_img_draw_core+0x76>
 800d97e:	2300      	movs	r3, #0
 800d980:	e0dc      	b.n	800db3c <lv_img_draw_core+0x230>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	7c1b      	ldrb	r3, [r3, #16]
 800d986:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff ff41 	bl	800d814 <lv_img_color_format_is_chroma_keyed>
 800d992:	4603      	mov	r3, r0
 800d994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	7c1b      	ldrb	r3, [r3, #16]
 800d99c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff ff52 	bl	800d84c <lv_img_color_format_has_alpha>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d01b      	beq.n	800d9ee <lv_img_draw_core+0xe2>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d9b6:	23ff      	movs	r3, #255	; 0xff
 800d9b8:	4a62      	ldr	r2, [pc, #392]	; (800db44 <lv_img_draw_core+0x238>)
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f002 fbb8 	bl	8010132 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	9205      	str	r2, [sp, #20]
 800d9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ce:	9204      	str	r2, [sp, #16]
 800d9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9d4:	9203      	str	r2, [sp, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	9202      	str	r2, [sp, #8]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	9201      	str	r2, [sp, #4]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	23ff      	movs	r3, #255	; 0xff
 800d9e2:	4a58      	ldr	r2, [pc, #352]	; (800db44 <lv_img_draw_core+0x238>)
 800d9e4:	68b9      	ldr	r1, [r7, #8]
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 f90a 	bl	800dc00 <lv_draw_label>
 800d9ec:	e0a5      	b.n	800db3a <lv_img_draw_core+0x22e>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d017      	beq.n	800da26 <lv_img_draw_core+0x11a>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	695a      	ldr	r2, [r3, #20]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800da00:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800da0a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800da0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	460b      	mov	r3, r1
 800da1c:	68b9      	ldr	r1, [r7, #8]
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff fa82 	bl	800cf28 <lv_draw_map>
 800da24:	e089      	b.n	800db3a <lv_img_draw_core+0x22e>
                    style->image.intense);
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);
 800da26:	f107 0318 	add.w	r3, r7, #24
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fe38 	bl	800d6a0 <lv_area_get_width>
 800da30:	4603      	mov	r3, r0
 800da32:	853b      	strh	r3, [r7, #40]	; 0x28

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 800da34:	f107 0318 	add.w	r3, r7, #24
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff fe31 	bl	800d6a0 <lv_area_get_width>
 800da3e:	4603      	mov	r3, r0
 800da40:	461a      	mov	r2, r3
 800da42:	4613      	mov	r3, r2
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	4413      	add	r3, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fe f93b 	bl	800bcc4 <lv_draw_get_buf>
 800da4e:	6278      	str	r0, [r7, #36]	; 0x24

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800da50:	f107 0218 	add.w	r2, r7, #24
 800da54:	f107 0310 	add.w	r3, r7, #16
 800da58:	4611      	mov	r1, r2
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fe12 	bl	800d684 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800da60:	f107 0310 	add.w	r3, r7, #16
 800da64:	2101      	movs	r1, #1
 800da66:	4618      	mov	r0, r3
 800da68:	f008 fbd5 	bl	8016216 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 800da6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800da70:	b29a      	uxth	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_coord_t y = mask_com.y1 - coords->y1;
 800da80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800da84:	b29a      	uxth	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	b29b      	uxth	r3, r3
 800da92:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800da94:	8b7b      	ldrh	r3, [r7, #26]
 800da96:	86bb      	strh	r3, [r7, #52]	; 0x34
 800da98:	e049      	b.n	800db2e <lv_img_draw_core+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800da9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da9c:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800daa0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800daa4:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	4623      	mov	r3, r4
 800daae:	f006 fce5 	bl	801447c <lv_img_decoder_read_line>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(read_res != LV_RES_OK) {
 800dab8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d005      	beq.n	800dacc <lv_img_draw_core+0x1c0>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac2:	4618      	mov	r0, r3
 800dac4:	f006 fd06 	bl	80144d4 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
 800dac8:	2300      	movs	r3, #0
 800daca:	e037      	b.n	800db3c <lv_img_draw_core+0x230>
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dad2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800dad6:	f107 0010 	add.w	r0, r7, #16
 800dada:	9303      	str	r3, [sp, #12]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800dae0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800dae4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf4:	68b9      	ldr	r1, [r7, #8]
 800daf6:	f7ff fa17 	bl	800cf28 <lv_draw_map>
            line.y1++;
 800dafa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3301      	adds	r3, #1
 800db02:	b29b      	uxth	r3, r3
 800db04:	b21b      	sxth	r3, r3
 800db06:	827b      	strh	r3, [r7, #18]
            line.y2++;
 800db08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3301      	adds	r3, #1
 800db10:	b29b      	uxth	r3, r3
 800db12:	b21b      	sxth	r3, r3
 800db14:	82fb      	strh	r3, [r7, #22]
            y++;
 800db16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	3301      	adds	r3, #1
 800db1e:	b29b      	uxth	r3, r3
 800db20:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800db22:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800db26:	b29b      	uxth	r3, r3
 800db28:	3301      	adds	r3, #1
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800db2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db32:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800db36:	429a      	cmp	r2, r3
 800db38:	ddaf      	ble.n	800da9a <lv_img_draw_core+0x18e>
        }
    }

    return LV_RES_OK;
 800db3a:	2301      	movs	r3, #1
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	373c      	adds	r7, #60	; 0x3c
 800db40:	46bd      	mov	sp, r7
 800db42:	bd90      	pop	{r4, r7, pc}
 800db44:	2001ba40 	.word	0x2001ba40

0800db48 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7a1b      	ldrb	r3, [r3, #8]
}
 800db54:	4618      	mov	r0, r3
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	71fb      	strb	r3, [r7, #7]
 800db6a:	460b      	mov	r3, r1
 800db6c:	71bb      	strb	r3, [r7, #6]
 800db6e:	4613      	mov	r3, r2
 800db70:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800db72:	79bb      	ldrb	r3, [r7, #6]
 800db74:	095b      	lsrs	r3, r3, #5
 800db76:	b2db      	uxtb	r3, r3
 800db78:	f003 0307 	and.w	r3, r3, #7
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	7b3b      	ldrb	r3, [r7, #12]
 800db80:	f362 0302 	bfi	r3, r2, #0, #3
 800db84:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	08db      	lsrs	r3, r3, #3
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f003 031f 	and.w	r3, r3, #31
 800db90:	b2da      	uxtb	r2, r3
 800db92:	7b3b      	ldrb	r3, [r7, #12]
 800db94:	f362 03c7 	bfi	r3, r2, #3, #5
 800db98:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800db9a:	797b      	ldrb	r3, [r7, #5]
 800db9c:	08db      	lsrs	r3, r3, #3
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f003 031f 	and.w	r3, r3, #31
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	7b7b      	ldrb	r3, [r7, #13]
 800dba8:	f362 0304 	bfi	r3, r2, #0, #5
 800dbac:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800dbae:	79bb      	ldrb	r3, [r7, #6]
 800dbb0:	089b      	lsrs	r3, r3, #2
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	f003 0307 	and.w	r3, r3, #7
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	7b7b      	ldrb	r3, [r7, #13]
 800dbbc:	f362 1347 	bfi	r3, r2, #5, #3
 800dbc0:	737b      	strb	r3, [r7, #13]
    return color;
 800dbc2:	89bb      	ldrh	r3, [r7, #12]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <lv_area_get_width>:
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	3301      	adds	r3, #1
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	b21b      	sxth	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
	...

0800dc00 <lv_draw_label>:
 * @param sel_end end index of selected area (`LV_LABEL_TXT_SEL_OFF` if none)
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, uint16_t sel_start, uint16_t sel_end,
                   lv_draw_label_hint_t * hint)
{
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b0b1      	sub	sp, #196	; 0xc4
 800dc04:	af04      	add	r7, sp, #16
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	70fb      	strb	r3, [r7, #3]
    const lv_font_t * font = style->text.font;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800dc16:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800dc1a:	f003 0302 	and.w	r3, r3, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <lv_draw_label+0x30>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff ffd4 	bl	800dbd0 <lv_area_get_width>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800dc2e:	e019      	b.n	800dc64 <lv_draw_label+0x64>
    } else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800dc40:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc44:	f897 20c4 	ldrb.w	r2, [r7, #196]	; 0xc4
 800dc48:	9202      	str	r2, [sp, #8]
 800dc4a:	f647 4218 	movw	r2, #31768	; 0x7c18
 800dc4e:	9201      	str	r2, [sp, #4]
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	4623      	mov	r3, r4
 800dc54:	460a      	mov	r2, r1
 800dc56:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800dc5a:	f009 fca3 	bl	80175a4 <lv_txt_get_size>
                        flag);
        w = p.x;
 800dc5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc60:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    }

    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800dc64:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800dc68:	f7ff ff6e 	bl	800db48 <lv_font_get_line_height>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4413      	add	r3, r2
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Init variables for the first line*/
    lv_coord_t line_width = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    lv_point_t pos;
    pos.x = coords->x1;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    pos.y = coords->y1;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_coord_t x_ofs = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    lv_coord_t y_ofs = 0;
 800dca0:	2300      	movs	r3, #0
 800dca2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    if(offset != NULL) {
 800dca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d013      	beq.n	800dcd6 <lv_draw_label+0xd6>
        x_ofs = offset->x;
 800dcae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        y_ofs = offset->y;
 800dcb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcbc:	885b      	ldrh	r3, [r3, #2]
 800dcbe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        pos.y += y_ofs;
 800dcc2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800dccc:	4413      	add	r3, r2
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	b21b      	sxth	r3, r3
 800dcd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_start     = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int32_t last_line_start = -1;
 800dcdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0) {
 800dce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d01f      	beq.n	800dd2c <lv_draw_label+0x12c>
 800dcec:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d11b      	bne.n	800dd2c <lv_draw_label+0x12c>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800dcf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800dd00:	1a9b      	subs	r3, r3, r2
 800dd02:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800dd06:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800dd0a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800dd0e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dd12:	005b      	lsls	r3, r3, #1
 800dd14:	429a      	cmp	r2, r3
 800dd16:	dd04      	ble.n	800dd22 <lv_draw_label+0x122>
            hint->line_start = -1;
 800dd18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd20:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800dd22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800dd2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d013      	beq.n	800dd5c <lv_draw_label+0x15c>
 800dd34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	db0f      	blt.n	800dd5c <lv_draw_label+0x15c>
        line_start = last_line_start;
 800dd3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        pos.y += hint->y;
 800dd44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	4413      	add	r3, r2
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	b21b      	sxth	r3, r3
 800dd58:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800dd5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800dd60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd64:	18d0      	adds	r0, r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800dd6c:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800dd70:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	460b      	mov	r3, r1
 800dd78:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dd7c:	f009 fcc4 	bl	8017708 <lv_txt_get_next_line>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd88:	4413      	add	r3, r2
 800dd8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 800dd8e:	e053      	b.n	800de38 <lv_draw_label+0x238>
        /*Go to next line*/
        line_start = line_end;
 800dd90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800dd98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800dd9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dda0:	18d0      	adds	r0, r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800dda8:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800ddac:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800ddb8:	f009 fca6 	bl	8017708 <lv_txt_get_next_line>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        pos.y += line_height;
 800ddca:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ddd4:	4413      	add	r3, r2
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	b21b      	sxth	r3, r3
 800ddda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800ddde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01f      	beq.n	800de26 <lv_draw_label+0x226>
 800dde6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ddea:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800ddee:	db1a      	blt.n	800de26 <lv_draw_label+0x226>
 800ddf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	da15      	bge.n	800de26 <lv_draw_label+0x226>
            hint->line_start = line_start;
 800ddfa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ddfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de02:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800de04:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800de08:	461a      	mov	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de10:	1ad2      	subs	r2, r2, r3
 800de12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de16:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de1e:	461a      	mov	r2, r3
 800de20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de24:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800de26:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800de2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800de2e:	4413      	add	r3, r2
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 827d 	beq.w	800e332 <lv_draw_label+0x732>
    while(pos.y + line_height < mask->y1) {
 800de38:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800de3c:	461a      	mov	r2, r3
 800de3e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800de42:	4413      	add	r3, r2
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800de4a:	4293      	cmp	r3, r2
 800de4c:	dba0      	blt.n	800dd90 <lv_draw_label+0x190>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 800de4e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800de52:	f003 0304 	and.w	r3, r3, #4
 800de56:	2b00      	cmp	r3, #0
 800de58:	d030      	beq.n	800debc <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800de5a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800de5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800de62:	18d0      	adds	r0, r2, r3
 800de64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de68:	b29a      	uxth	r2, r3
 800de6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800de6e:	b29b      	uxth	r3, r3
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	b299      	uxth	r1, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800de7a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4613      	mov	r3, r2
 800de82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de86:	f009 fcf1 	bl	801786c <lv_txt_get_width>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7ff fe9d 	bl	800dbd0 <lv_area_get_width>
 800de96:	4603      	mov	r3, r0
 800de98:	461a      	mov	r2, r3
 800de9a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	0fda      	lsrs	r2, r3, #31
 800dea2:	4413      	add	r3, r2
 800dea4:	105b      	asrs	r3, r3, #1
 800dea6:	4619      	mov	r1, r3
 800dea8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800deac:	b29a      	uxth	r2, r3
 800deae:	b28b      	uxth	r3, r1
 800deb0:	4413      	add	r3, r2
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	b21b      	sxth	r3, r3
 800deb6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800deba:	e031      	b.n	800df20 <lv_draw_label+0x320>

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800debc:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d02b      	beq.n	800df20 <lv_draw_label+0x320>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800dec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800decc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ded0:	18d0      	adds	r0, r2, r3
 800ded2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dedc:	b29b      	uxth	r3, r3
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	b299      	uxth	r1, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800dee8:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	4613      	mov	r3, r2
 800def0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800def4:	f009 fcba 	bl	801786c <lv_txt_get_width>
 800def8:	4603      	mov	r3, r0
 800defa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        pos.x += lv_area_get_width(coords) - line_width;
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f7ff fe66 	bl	800dbd0 <lv_area_get_width>
 800df04:	4603      	mov	r3, r0
 800df06:	461a      	mov	r2, r3
 800df08:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800df12:	b292      	uxth	r2, r2
 800df14:	b29b      	uxth	r3, r3
 800df16:	4413      	add	r3, r2
 800df18:	b29b      	uxth	r3, r3
 800df1a:	b21b      	sxth	r3, r3
 800df1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    }

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800df20:	78fb      	ldrb	r3, [r7, #3]
 800df22:	2bff      	cmp	r3, #255	; 0xff
 800df24:	d103      	bne.n	800df2e <lv_draw_label+0x32e>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df2c:	e00b      	b.n	800df46 <lv_draw_label+0x346>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df34:	b29a      	uxth	r2, r3
 800df36:	78fb      	ldrb	r3, [r7, #3]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	fb12 f303 	smulbb	r3, r2, r3
 800df3e:	b29b      	uxth	r3, r3
 800df40:	0a1b      	lsrs	r3, r3, #8
 800df42:	b29b      	uxth	r3, r3
 800df44:	b2db      	uxtb	r3, r3
 800df46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800df4a:	2300      	movs	r3, #0
 800df4c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    uint32_t i;
    uint16_t par_start = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    lv_color_t recolor;
    lv_coord_t letter_w;
    lv_style_t sel_style;
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800df56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df5a:	499c      	ldr	r1, [pc, #624]	; (800e1cc <lv_draw_label+0x5cc>)
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fd fea3 	bl	800bca8 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800df66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800df68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df6a:	857b      	strh	r3, [r7, #42]	; 0x2a

    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800df6c:	e1d7      	b.n	800e31e <lv_draw_label+0x71e>
        if(offset != NULL) {
 800df6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df72:	2b00      	cmp	r3, #0
 800df74:	d009      	beq.n	800df8a <lv_draw_label+0x38a>
            pos.x += x_ofs;
 800df76:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800df80:	4413      	add	r3, r2
 800df82:	b29b      	uxth	r3, r3
 800df84:	b21b      	sxth	r3, r3
 800df86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }
        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800df8a:	2300      	movs	r3, #0
 800df8c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        i         = line_start;
 800df90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df94:	66bb      	str	r3, [r7, #104]	; 0x68
        uint32_t letter;
        uint32_t letter_next;
        while(i < line_end) {
 800df96:	e120      	b.n	800e1da <lv_draw_label+0x5da>
            letter      = lv_txt_encoded_next(txt, &i);
 800df98:	4b8d      	ldr	r3, [pc, #564]	; (800e1d0 <lv_draw_label+0x5d0>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800dfa6:	4798      	blx	r3
 800dfa8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800dfac:	4b88      	ldr	r3, [pc, #544]	; (800e1d0 <lv_draw_label+0x5d0>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dfb2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800dfb6:	440a      	add	r2, r1
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4610      	mov	r0, r2
 800dfbc:	4798      	blx	r3
 800dfbe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

            /*Handle the re-color command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800dfc2:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d07a      	beq.n	800e0c4 <lv_draw_label+0x4c4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800dfce:	2323      	movs	r3, #35	; 0x23
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d11a      	bne.n	800e010 <lv_draw_label+0x410>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800dfda:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <lv_draw_label+0x3f0>
                        par_start = i;
 800dfe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfe4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                        cmd_state = CMD_STATE_PAR;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800dfee:	e0f4      	b.n	800e1da <lv_draw_label+0x5da>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800dff0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d103      	bne.n	800e000 <lv_draw_label+0x400>
                        cmd_state = CMD_STATE_WAIT;
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800dffe:	e007      	b.n	800e010 <lv_draw_label+0x410>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800e000:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e004:	2b02      	cmp	r3, #2
 800e006:	d103      	bne.n	800e010 <lv_draw_label+0x410>
                        cmd_state = CMD_STATE_WAIT;
 800e008:	2300      	movs	r3, #0
 800e00a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800e00e:	e0e4      	b.n	800e1da <lv_draw_label+0x5da>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800e010:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e014:	2b01      	cmp	r3, #1
 800e016:	d155      	bne.n	800e0c4 <lv_draw_label+0x4c4>
                    if(letter == ' ') {
 800e018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e01c:	2b20      	cmp	r3, #32
 800e01e:	f040 80db 	bne.w	800e1d8 <lv_draw_label+0x5d8>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800e022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e024:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	2b07      	cmp	r3, #7
 800e02c:	d142      	bne.n	800e0b4 <lv_draw_label+0x4b4>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800e02e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e032:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e036:	18d1      	adds	r1, r2, r3
 800e038:	f107 0318 	add.w	r3, r7, #24
 800e03c:	2206      	movs	r2, #6
 800e03e:	4618      	mov	r0, r3
 800e040:	f01c ffe6 	bl	802b010 <memcpy>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800e044:	2300      	movs	r3, #0
 800e046:	77bb      	strb	r3, [r7, #30]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800e048:	7e3b      	ldrb	r3, [r7, #24]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 f978 	bl	800e340 <hex_char_to_num>
 800e050:	4603      	mov	r3, r0
 800e052:	011c      	lsls	r4, r3, #4
 800e054:	7e7b      	ldrb	r3, [r7, #25]
 800e056:	4618      	mov	r0, r3
 800e058:	f000 f972 	bl	800e340 <hex_char_to_num>
 800e05c:	4603      	mov	r3, r0
 800e05e:	4423      	add	r3, r4
 800e060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800e064:	7ebb      	ldrb	r3, [r7, #26]
 800e066:	4618      	mov	r0, r3
 800e068:	f000 f96a 	bl	800e340 <hex_char_to_num>
 800e06c:	4603      	mov	r3, r0
 800e06e:	011c      	lsls	r4, r3, #4
 800e070:	7efb      	ldrb	r3, [r7, #27]
 800e072:	4618      	mov	r0, r3
 800e074:	f000 f964 	bl	800e340 <hex_char_to_num>
 800e078:	4603      	mov	r3, r0
 800e07a:	4423      	add	r3, r4
 800e07c:	67fb      	str	r3, [r7, #124]	; 0x7c
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800e07e:	7f3b      	ldrb	r3, [r7, #28]
 800e080:	4618      	mov	r0, r3
 800e082:	f000 f95d 	bl	800e340 <hex_char_to_num>
 800e086:	4603      	mov	r3, r0
 800e088:	011c      	lsls	r4, r3, #4
 800e08a:	7f7b      	ldrb	r3, [r7, #29]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 f957 	bl	800e340 <hex_char_to_num>
 800e092:	4603      	mov	r3, r0
 800e094:	4423      	add	r3, r4
 800e096:	67bb      	str	r3, [r7, #120]	; 0x78
                            recolor = lv_color_make(r, g, b);
 800e098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0a0:	b2d1      	uxtb	r1, r2
 800e0a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0a4:	b2d2      	uxtb	r2, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fd5a 	bl	800db60 <lv_color_make>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e0b2:	e003      	b.n	800e0bc <lv_draw_label+0x4bc>
                        } else {
                            recolor.full = style->text.color.full;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	8c1b      	ldrh	r3, [r3, #32]
 800e0b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800e0bc:	2302      	movs	r3, #2
 800e0be:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    }
                    continue;
 800e0c2:	e089      	b.n	800e1d8 <lv_draw_label+0x5d8>
                }
            }

            lv_color_t color = style->text.color;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8c1b      	ldrh	r3, [r3, #32]
 800e0c8:	843b      	strh	r3, [r7, #32]

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800e0ca:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d102      	bne.n	800e0d8 <lv_draw_label+0x4d8>
 800e0d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e0d6:	843b      	strh	r3, [r7, #32]

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800e0d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e0dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e0e0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e0e4:	f007 f92a 	bl	801533c <lv_font_get_glyph_width>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800e0ee:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800e0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d043      	beq.n	800e182 <lv_draw_label+0x582>
 800e0fa:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800e0fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e102:	4293      	cmp	r3, r2
 800e104:	d03d      	beq.n	800e182 <lv_draw_label+0x582>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800e106:	4b33      	ldr	r3, [pc, #204]	; (800e1d4 <lv_draw_label+0x5d4>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e10c:	4611      	mov	r1, r2
 800e10e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e112:	4798      	blx	r3
 800e114:	4603      	mov	r3, r0
 800e116:	673b      	str	r3, [r7, #112]	; 0x70
                /*Do not draw the rectangle on the character at `sel_start`.*/
                if(char_ind > sel_start && char_ind <= sel_end) {
 800e118:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800e11c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e11e:	429a      	cmp	r2, r3
 800e120:	dd2f      	ble.n	800e182 <lv_draw_label+0x582>
 800e122:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800e126:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e128:	429a      	cmp	r2, r3
 800e12a:	dc2a      	bgt.n	800e182 <lv_draw_label+0x582>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800e12c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e130:	823b      	strh	r3, [r7, #16]
                    sel_coords.y1 = pos.y;
 800e132:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e136:	827b      	strh	r3, [r7, #18]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800e138:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e142:	4413      	add	r3, r2
 800e144:	b29a      	uxth	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4413      	add	r3, r2
 800e150:	b29b      	uxth	r3, r3
 800e152:	3b01      	subs	r3, #1
 800e154:	b29b      	uxth	r3, r3
 800e156:	b21b      	sxth	r3, r3
 800e158:	82bb      	strh	r3, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800e15a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e15e:	b29a      	uxth	r2, r3
 800e160:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e164:	4413      	add	r3, r2
 800e166:	b29b      	uxth	r3, r3
 800e168:	3b01      	subs	r3, #1
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	b21b      	sxth	r3, r3
 800e16e:	82fb      	strh	r3, [r7, #22]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800e170:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e174:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e178:	f107 0010 	add.w	r0, r7, #16
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	f001 ffd8 	bl	8010132 <lv_draw_rect>
                }
            }
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800e182:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e186:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e18a:	9301      	str	r3, [sp, #4]
 800e18c:	8c3b      	ldrh	r3, [r7, #32]
 800e18e:	f8ad 3000 	strh.w	r3, [sp]
 800e192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e196:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e19a:	68b9      	ldr	r1, [r7, #8]
 800e19c:	f7fe fc1c 	bl	800c9d8 <lv_draw_letter>

            if(letter_w > 0) {
 800e1a0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dd18      	ble.n	800e1da <lv_draw_label+0x5da>
                pos.x += letter_w + style->text.letter_space;
 800e1a8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800e1b4:	b299      	uxth	r1, r3
 800e1b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e1ba:	440b      	add	r3, r1
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	4413      	add	r3, r2
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	b21b      	sxth	r3, r3
 800e1c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e1c8:	e007      	b.n	800e1da <lv_draw_label+0x5da>
 800e1ca:	bf00      	nop
 800e1cc:	2001bb30 	.word	0x2001bb30
 800e1d0:	200027a0 	.word	0x200027a0
 800e1d4:	200027ac 	.word	0x200027ac
                    continue;
 800e1d8:	bf00      	nop
        while(i < line_end) {
 800e1da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	f63f aed9 	bhi.w	800df98 <lv_draw_label+0x398>
            }
        }
        /*Go to next line*/
        line_start = line_end;
 800e1e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800e1ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e1f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e1f6:	18d0      	adds	r0, r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800e1fe:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800e202:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	460b      	mov	r3, r1
 800e20a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e20e:	f009 fa7b 	bl	8017708 <lv_txt_get_next_line>
 800e212:	4603      	mov	r3, r0
 800e214:	461a      	mov	r2, r3
 800e216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e21a:	4413      	add	r3, r2
 800e21c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        pos.x = coords->x1;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e226:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 800e22a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d030      	beq.n	800e298 <lv_draw_label+0x698>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800e236:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e23a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e23e:	18d0      	adds	r0, r2, r3
 800e240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e244:	b29a      	uxth	r2, r3
 800e246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	b299      	uxth	r1, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800e256:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	4613      	mov	r3, r2
 800e25e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e262:	f009 fb03 	bl	801786c <lv_txt_get_width>
 800e266:	4603      	mov	r3, r0
 800e268:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff fcaf 	bl	800dbd0 <lv_area_get_width>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	0fda      	lsrs	r2, r3, #31
 800e27e:	4413      	add	r3, r2
 800e280:	105b      	asrs	r3, r3, #1
 800e282:	4619      	mov	r1, r3
 800e284:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e288:	b29a      	uxth	r2, r3
 800e28a:	b28b      	uxth	r3, r1
 800e28c:	4413      	add	r3, r2
 800e28e:	b29b      	uxth	r3, r3
 800e290:	b21b      	sxth	r3, r3
 800e292:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e296:	e031      	b.n	800e2fc <lv_draw_label+0x6fc>

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800e298:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800e29c:	f003 0308 	and.w	r3, r3, #8
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d02b      	beq.n	800e2fc <lv_draw_label+0x6fc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800e2a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e2a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e2ac:	18d0      	adds	r0, r2, r3
 800e2ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	b299      	uxth	r1, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800e2c4:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2d0:	f009 facc 	bl	801786c <lv_txt_get_width>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            pos.x += lv_area_get_width(coords) - line_width;
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fc78 	bl	800dbd0 <lv_area_get_width>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e2ee:	b292      	uxth	r2, r2
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        /*Go the next line position*/
        pos.y += line_height;
 800e2fc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e300:	b29a      	uxth	r2, r3
 800e302:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e306:	4413      	add	r3, r2
 800e308:	b29b      	uxth	r3, r3
 800e30a:	b21b      	sxth	r3, r3
 800e30c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if(pos.y > mask->y2) return;
 800e310:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	dc0b      	bgt.n	800e336 <lv_draw_label+0x736>
    while(txt[line_start] != '\0') {
 800e31e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e326:	4413      	add	r3, r2
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f47f ae1f 	bne.w	800df6e <lv_draw_label+0x36e>
 800e330:	e002      	b.n	800e338 <lv_draw_label+0x738>
        if(txt[line_start] == '\0') return;
 800e332:	bf00      	nop
 800e334:	e000      	b.n	800e338 <lv_draw_label+0x738>
        if(pos.y > mask->y2) return;
 800e336:	bf00      	nop
    }
}
 800e338:	37b4      	adds	r7, #180	; 0xb4
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd90      	pop	{r4, r7, pc}
 800e33e:	bf00      	nop

0800e340 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	2b2f      	cmp	r3, #47	; 0x2f
 800e352:	d906      	bls.n	800e362 <hex_char_to_num+0x22>
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	2b39      	cmp	r3, #57	; 0x39
 800e358:	d803      	bhi.n	800e362 <hex_char_to_num+0x22>
        result = hex - '0';
 800e35a:	79fb      	ldrb	r3, [r7, #7]
 800e35c:	3b30      	subs	r3, #48	; 0x30
 800e35e:	73fb      	strb	r3, [r7, #15]
 800e360:	e02d      	b.n	800e3be <hex_char_to_num+0x7e>
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	2b60      	cmp	r3, #96	; 0x60
 800e366:	d902      	bls.n	800e36e <hex_char_to_num+0x2e>
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	3b20      	subs	r3, #32
 800e36c:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	3b41      	subs	r3, #65	; 0x41
 800e372:	2b05      	cmp	r3, #5
 800e374:	d820      	bhi.n	800e3b8 <hex_char_to_num+0x78>
 800e376:	a201      	add	r2, pc, #4	; (adr r2, 800e37c <hex_char_to_num+0x3c>)
 800e378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37c:	0800e395 	.word	0x0800e395
 800e380:	0800e39b 	.word	0x0800e39b
 800e384:	0800e3a1 	.word	0x0800e3a1
 800e388:	0800e3a7 	.word	0x0800e3a7
 800e38c:	0800e3ad 	.word	0x0800e3ad
 800e390:	0800e3b3 	.word	0x0800e3b3
            case 'A': result = 10; break;
 800e394:	230a      	movs	r3, #10
 800e396:	73fb      	strb	r3, [r7, #15]
 800e398:	e011      	b.n	800e3be <hex_char_to_num+0x7e>
            case 'B': result = 11; break;
 800e39a:	230b      	movs	r3, #11
 800e39c:	73fb      	strb	r3, [r7, #15]
 800e39e:	e00e      	b.n	800e3be <hex_char_to_num+0x7e>
            case 'C': result = 12; break;
 800e3a0:	230c      	movs	r3, #12
 800e3a2:	73fb      	strb	r3, [r7, #15]
 800e3a4:	e00b      	b.n	800e3be <hex_char_to_num+0x7e>
            case 'D': result = 13; break;
 800e3a6:	230d      	movs	r3, #13
 800e3a8:	73fb      	strb	r3, [r7, #15]
 800e3aa:	e008      	b.n	800e3be <hex_char_to_num+0x7e>
            case 'E': result = 14; break;
 800e3ac:	230e      	movs	r3, #14
 800e3ae:	73fb      	strb	r3, [r7, #15]
 800e3b0:	e005      	b.n	800e3be <hex_char_to_num+0x7e>
            case 'F': result = 15; break;
 800e3b2:	230f      	movs	r3, #15
 800e3b4:	73fb      	strb	r3, [r7, #15]
 800e3b6:	e002      	b.n	800e3be <hex_char_to_num+0x7e>
            default: result = 0; break;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
 800e3bc:	bf00      	nop
        }
    }

    return result;
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
                  const lv_style_t * style, lv_opa_t opa_scale)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b090      	sub	sp, #64	; 0x40
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]

    if(style->line.width == 0) return;
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 81ce 	beq.w	800e782 <lv_draw_line+0x3b6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d108      	bne.n	800e408 <lv_draw_line+0x3c>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e402:	429a      	cmp	r2, r3
 800e404:	f000 81bf 	beq.w	800e786 <lv_draw_line+0x3ba>

    /*Return if the points are out of the mask*/
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e40e:	461a      	mov	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e416:	4619      	mov	r1, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e41e:	1acb      	subs	r3, r1, r3
 800e420:	429a      	cmp	r2, r3
 800e422:	da0e      	bge.n	800e442 <lv_draw_line+0x76>
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42a:	461a      	mov	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e432:	4619      	mov	r1, r3
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e43a:	1acb      	subs	r3, r1, r3
 800e43c:	429a      	cmp	r2, r3
 800e43e:	f2c0 81a4 	blt.w	800e78a <lv_draw_line+0x3be>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e448:	461a      	mov	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e450:	4619      	mov	r1, r3
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e458:	440b      	add	r3, r1
 800e45a:	429a      	cmp	r2, r3
 800e45c:	dd0e      	ble.n	800e47c <lv_draw_line+0xb0>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e464:	461a      	mov	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e46c:	4619      	mov	r1, r3
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e474:	440b      	add	r3, r1
 800e476:	429a      	cmp	r2, r3
 800e478:	f300 8189 	bgt.w	800e78e <lv_draw_line+0x3c2>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e48a:	4619      	mov	r1, r3
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e492:	1acb      	subs	r3, r1, r3
 800e494:	429a      	cmp	r2, r3
 800e496:	da0e      	bge.n	800e4b6 <lv_draw_line+0xea>
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e4ae:	1acb      	subs	r3, r1, r3
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	f2c0 816e 	blt.w	800e792 <lv_draw_line+0x3c6>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e4cc:	440b      	add	r3, r1
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	dd0e      	ble.n	800e4f0 <lv_draw_line+0x124>
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e4e8:	440b      	add	r3, r1
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	f300 8153 	bgt.w	800e796 <lv_draw_line+0x3ca>
    lv_point_t p1;
    lv_point_t p2;

    /*If the line if rather vertical then be sure y1 < y2 else x1 < x2*/

    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e504:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e50e:	4619      	mov	r1, r3
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e516:	1acb      	subs	r3, r1, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	bfb8      	it	lt
 800e51c:	425b      	neglt	r3, r3
 800e51e:	429a      	cmp	r2, r3
 800e520:	dd29      	ble.n	800e576 <lv_draw_line+0x1aa>

        /*Steps less in y then x -> rather horizontal*/
        if(point1->x < point2->x) {
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e52e:	429a      	cmp	r2, r3
 800e530:	da10      	bge.n	800e554 <lv_draw_line+0x188>
            p1.x = point1->x;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e538:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e540:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e548:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e550:	82fb      	strh	r3, [r7, #22]
 800e552:	e039      	b.n	800e5c8 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e55a:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e562:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e56a:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e572:	82fb      	strh	r3, [r7, #22]
 800e574:	e028      	b.n	800e5c8 <lv_draw_line+0x1fc>
        }
    } else {
        /*Steps less in x then y -> rather vertical*/
        if(point1->y < point2->y) {
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e582:	429a      	cmp	r2, r3
 800e584:	da10      	bge.n	800e5a8 <lv_draw_line+0x1dc>
            p1.x = point1->x;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e58c:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e594:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e59c:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5a4:	82fb      	strh	r3, [r7, #22]
 800e5a6:	e00f      	b.n	800e5c8 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ae:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5b6:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5be:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5c6:	82fb      	strh	r3, [r7, #22]
        }
    }

    line_init(&main_line, &p1, &p2);
 800e5c8:	f107 0214 	add.w	r2, r7, #20
 800e5cc:	f107 0118 	add.w	r1, r7, #24
 800e5d0:	f107 031c 	add.w	r3, r7, #28
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f001 fbb0 	bl	800fd3a <line_init>

    /*Special case draw a horizontal line*/
    if(main_line.p1.y == main_line.p2.y) {
 800e5da:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e5de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d108      	bne.n	800e5f8 <lv_draw_line+0x22c>
        line_draw_hor(&main_line, mask, style, opa_scale);
 800e5e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e5ea:	f107 001c 	add.w	r0, r7, #28
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	6879      	ldr	r1, [r7, #4]
 800e5f2:	f000 f8d4 	bl	800e79e <line_draw_hor>
 800e5f6:	e0cf      	b.n	800e798 <lv_draw_line+0x3cc>
    }
    /*Special case draw a vertical line*/
    else if(main_line.p1.x == main_line.p2.x) {
 800e5f8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e5fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e600:	429a      	cmp	r2, r3
 800e602:	d108      	bne.n	800e616 <lv_draw_line+0x24a>
        line_draw_ver(&main_line, mask, style, opa_scale);
 800e604:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e608:	f107 001c 	add.w	r0, r7, #28
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	6879      	ldr	r1, [r7, #4]
 800e610:	f000 f93e 	bl	800e890 <line_draw_ver>
 800e614:	e0c0      	b.n	800e798 <lv_draw_line+0x3cc>
    }
    /*Arbitrary skew line*/
    else {
        bool dir_ori = false;
 800e616:	2300      	movs	r3, #0
 800e618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if LV_ANTIALIAS
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800e61c:	f7fc fbe0 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800e620:	4603      	mov	r3, r0
 800e622:	4618      	mov	r0, r3
 800e624:	f007 faac 	bl	8015b80 <lv_disp_get_antialiasing>
 800e628:	4603      	mov	r3, r0
 800e62a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(aa) {
 800e62e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 8099 	beq.w	800e76a <lv_draw_line+0x39e>
            lv_point_t p_tmp;

            if(main_line.hor) {
 800e638:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d04a      	beq.n	800e6d6 <lv_draw_line+0x30a>
                if(main_line.p1.y < main_line.p2.y) {
 800e640:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e644:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e648:	429a      	cmp	r2, r3
 800e64a:	da1d      	bge.n	800e688 <lv_draw_line+0x2bc>
                    dir_ori = true;
 800e64c:	2301      	movs	r3, #1
 800e64e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800e652:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e656:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y - 1;
 800e658:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	3b01      	subs	r3, #1
 800e660:	b29b      	uxth	r3, r3
 800e662:	b21b      	sxth	r3, r3
 800e664:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800e666:	f107 0210 	add.w	r2, r7, #16
 800e66a:	f107 0118 	add.w	r1, r7, #24
 800e66e:	f107 031c 	add.w	r3, r7, #28
 800e672:	4618      	mov	r0, r3
 800e674:	f001 fb61 	bl	800fd3a <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800e678:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	bfb8      	it	lt
 800e680:	425b      	neglt	r3, r3
 800e682:	b21b      	sxth	r3, r3
 800e684:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e686:	e070      	b.n	800e76a <lv_draw_line+0x39e>
                } else if(main_line.p1.y > main_line.p2.y) {
 800e688:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e68c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e690:	429a      	cmp	r2, r3
 800e692:	dd6a      	ble.n	800e76a <lv_draw_line+0x39e>
                    dir_ori = false;
 800e694:	2300      	movs	r3, #0
 800e696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800e69a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e69e:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y + 1;
 800e6a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	b21b      	sxth	r3, r3
 800e6ac:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800e6ae:	f107 0210 	add.w	r2, r7, #16
 800e6b2:	f107 0118 	add.w	r1, r7, #24
 800e6b6:	f107 031c 	add.w	r3, r7, #28
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f001 fb3d 	bl	800fd3a <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800e6c0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bfb8      	it	lt
 800e6c8:	425b      	neglt	r3, r3
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	425b      	negs	r3, r3
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	b21b      	sxth	r3, r3
 800e6d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e6d4:	e049      	b.n	800e76a <lv_draw_line+0x39e>
                }
            } else {
                if(main_line.p1.x < main_line.p2.x) {
 800e6d6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e6da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	da1d      	bge.n	800e71e <lv_draw_line+0x352>
                    dir_ori = true;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x - 1;
 800e6e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	b21b      	sxth	r3, r3
 800e6f4:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800e6f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e6fa:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800e6fc:	f107 0210 	add.w	r2, r7, #16
 800e700:	f107 0118 	add.w	r1, r7, #24
 800e704:	f107 031c 	add.w	r3, r7, #28
 800e708:	4618      	mov	r0, r3
 800e70a:	f001 fb16 	bl	800fd3a <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800e70e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e712:	2b00      	cmp	r3, #0
 800e714:	bfb8      	it	lt
 800e716:	425b      	neglt	r3, r3
 800e718:	b21b      	sxth	r3, r3
 800e71a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e71c:	e025      	b.n	800e76a <lv_draw_line+0x39e>
                } else if(main_line.p1.x > main_line.p2.x) {
 800e71e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e722:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e726:	429a      	cmp	r2, r3
 800e728:	dd1f      	ble.n	800e76a <lv_draw_line+0x39e>
                    dir_ori = false;
 800e72a:	2300      	movs	r3, #0
 800e72c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x + 1;
 800e730:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e734:	b29b      	uxth	r3, r3
 800e736:	3301      	adds	r3, #1
 800e738:	b29b      	uxth	r3, r3
 800e73a:	b21b      	sxth	r3, r3
 800e73c:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800e73e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e742:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800e744:	f107 0210 	add.w	r2, r7, #16
 800e748:	f107 0118 	add.w	r1, r7, #24
 800e74c:	f107 031c 	add.w	r3, r7, #28
 800e750:	4618      	mov	r0, r3
 800e752:	f001 faf2 	bl	800fd3a <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800e756:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	bfb8      	it	lt
 800e75e:	425b      	neglt	r3, r3
 800e760:	b29b      	uxth	r3, r3
 800e762:	425b      	negs	r3, r3
 800e764:	b29b      	uxth	r3, r3
 800e766:	b21b      	sxth	r3, r3
 800e768:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
            }
        }
#endif
        line_draw_skew(&main_line, dir_ori, mask, style, opa_scale);
 800e76a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800e76e:	f107 001c 	add.w	r0, r7, #28
 800e772:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	f000 f901 	bl	800e982 <line_draw_skew>
 800e780:	e00a      	b.n	800e798 <lv_draw_line+0x3cc>
    if(style->line.width == 0) return;
 800e782:	bf00      	nop
 800e784:	e008      	b.n	800e798 <lv_draw_line+0x3cc>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800e786:	bf00      	nop
 800e788:	e006      	b.n	800e798 <lv_draw_line+0x3cc>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800e78a:	bf00      	nop
 800e78c:	e004      	b.n	800e798 <lv_draw_line+0x3cc>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800e78e:	bf00      	nop
 800e790:	e002      	b.n	800e798 <lv_draw_line+0x3cc>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800e792:	bf00      	nop
 800e794:	e000      	b.n	800e798 <lv_draw_line+0x3cc>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800e796:	bf00      	nop
    }
}
 800e798:	3738      	adds	r7, #56	; 0x38
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <line_draw_hor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void line_draw_hor(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b08a      	sub	sp, #40	; 0x28
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800e7ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e7be:	105b      	asrs	r3, r3, #1
 800e7c0:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800e7c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7c4:	f003 0301 	and.w	r3, r3, #1
 800e7c8:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800e7ca:	78fb      	ldrb	r3, [r7, #3]
 800e7cc:	2bff      	cmp	r3, #255	; 0xff
 800e7ce:	d103      	bne.n	800e7d8 <line_draw_hor+0x3a>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e7d6:	e00b      	b.n	800e7f0 <line_draw_hor+0x52>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	fb12 f303 	smulbb	r3, r2, r3
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	0a1b      	lsrs	r3, r3, #8
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7fa:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e802:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e80e:	1ad3      	subs	r3, r2, r3
 800e810:	b29a      	uxth	r2, r3
 800e812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	b29b      	uxth	r3, r3
 800e818:	b21b      	sxth	r3, r3
 800e81a:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y + width_half;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e822:	b29a      	uxth	r2, r3
 800e824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e826:	4413      	add	r3, r2
 800e828:	b29b      	uxth	r3, r3
 800e82a:	b21b      	sxth	r3, r3
 800e82c:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e82e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e832:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e836:	4293      	cmp	r3, r2
 800e838:	bfa8      	it	ge
 800e83a:	4613      	movge	r3, r2
 800e83c:	b21b      	sxth	r3, r3
 800e83e:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e840:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e844:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e848:	4293      	cmp	r3, r2
 800e84a:	bfb8      	it	lt
 800e84c:	4613      	movlt	r3, r2
 800e84e:	b21b      	sxth	r3, r3
 800e850:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e852:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e856:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e85a:	4293      	cmp	r3, r2
 800e85c:	bfa8      	it	ge
 800e85e:	4613      	movge	r3, r2
 800e860:	b21b      	sxth	r3, r3
 800e862:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e864:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e868:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	bfb8      	it	lt
 800e870:	4613      	movlt	r3, r2
 800e872:	b21b      	sxth	r3, r3
 800e874:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800e876:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	f107 0010 	add.w	r0, r7, #16
 800e880:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800e882:	68b9      	ldr	r1, [r7, #8]
 800e884:	f7fe f82f 	bl	800c8e6 <lv_draw_fill>
}
 800e888:	bf00      	nop
 800e88a:	3728      	adds	r7, #40	; 0x28
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <line_draw_ver>:

static void line_draw_ver(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08a      	sub	sp, #40	; 0x28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800e8ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e8b0:	105b      	asrs	r3, r3, #1
 800e8b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800e8b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	2bff      	cmp	r3, #255	; 0xff
 800e8c0:	d103      	bne.n	800e8ca <line_draw_ver+0x3a>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e8c8:	e00b      	b.n	800e8e2 <line_draw_ver+0x52>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	78fb      	ldrb	r3, [r7, #3]
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	fb12 f303 	smulbb	r3, r2, r3
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	0a1b      	lsrs	r3, r3, #8
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x - width_half;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	b21b      	sxth	r3, r3
 800e8f6:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e902:	4413      	add	r3, r2
 800e904:	b29a      	uxth	r2, r3
 800e906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e908:	4413      	add	r3, r2
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	b21b      	sxth	r3, r3
 800e90e:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e916:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e91e:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e920:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e924:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e928:	4293      	cmp	r3, r2
 800e92a:	bfa8      	it	ge
 800e92c:	4613      	movge	r3, r2
 800e92e:	b21b      	sxth	r3, r3
 800e930:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e932:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e936:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e93a:	4293      	cmp	r3, r2
 800e93c:	bfb8      	it	lt
 800e93e:	4613      	movlt	r3, r2
 800e940:	b21b      	sxth	r3, r3
 800e942:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e944:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e948:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e94c:	4293      	cmp	r3, r2
 800e94e:	bfa8      	it	ge
 800e950:	4613      	movge	r3, r2
 800e952:	b21b      	sxth	r3, r3
 800e954:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e956:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e95a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e95e:	4293      	cmp	r3, r2
 800e960:	bfb8      	it	lt
 800e962:	4613      	movlt	r3, r2
 800e964:	b21b      	sxth	r3, r3
 800e966:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800e968:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	f107 0010 	add.w	r0, r7, #16
 800e972:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800e974:	68b9      	ldr	r1, [r7, #8]
 800e976:	f7fd ffb6 	bl	800c8e6 <lv_draw_fill>
}
 800e97a:	bf00      	nop
 800e97c:	3728      	adds	r7, #40	; 0x28
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <line_draw_skew>:

static void line_draw_skew(line_draw_t * main_line, bool dir_ori, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b09e      	sub	sp, #120	; 0x78
 800e986:	af02      	add	r7, sp, #8
 800e988:	60f8      	str	r0, [r7, #12]
 800e98a:	607a      	str	r2, [r7, #4]
 800e98c:	603b      	str	r3, [r7, #0]
 800e98e:	460b      	mov	r3, r1
 800e990:	72fb      	strb	r3, [r7, #11]

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800e992:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800e996:	2bff      	cmp	r3, #255	; 0xff
 800e998:	d103      	bne.n	800e9a2 <line_draw_skew+0x20>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e9a0:	e00c      	b.n	800e9bc <line_draw_skew+0x3a>
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	fb12 f303 	smulbb	r3, r2, r3
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	0a1b      	lsrs	r3, r3, #8
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
#if LV_ANTIALIAS
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800e9c0:	f7fc fa0e 	bl	800ade0 <lv_refr_get_disp_refreshing>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f007 f8da 	bl	8015b80 <lv_disp_get_antialiasing>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
#endif
    lv_point_t vect_main, vect_norm;
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	b21b      	sxth	r3, r3
 800e9e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(main_line->hor) {
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	7e1b      	ldrb	r3, [r3, #24]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d025      	beq.n	800ea5a <line_draw_skew+0xd8>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ea14:	461a      	mov	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	7afb      	ldrb	r3, [r7, #11]
 800ea20:	440b      	add	r3, r1
 800ea22:	429a      	cmp	r2, r3
 800ea24:	da0c      	bge.n	800ea40 <line_draw_skew+0xbe>
            vect_norm.x = -vect_main.y;
 800ea26:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	425b      	negs	r3, r3
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	b21b      	sxth	r3, r3
 800ea32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800ea36:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ea3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ea3e:	e031      	b.n	800eaa4 <line_draw_skew+0x122>
        } else {
            vect_norm.x = vect_main.y;
 800ea40:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ea44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800ea48:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	425b      	negs	r3, r3
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	b21b      	sxth	r3, r3
 800ea54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ea58:	e024      	b.n	800eaa4 <line_draw_skew+0x122>
        }
    } else {
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea60:	461a      	mov	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	7afb      	ldrb	r3, [r7, #11]
 800ea6c:	440b      	add	r3, r1
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	da0c      	bge.n	800ea8c <line_draw_skew+0x10a>
            vect_norm.x = vect_main.y;
 800ea72:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ea76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800ea7a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	425b      	negs	r3, r3
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	b21b      	sxth	r3, r3
 800ea86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ea8a:	e00b      	b.n	800eaa4 <line_draw_skew+0x122>
        } else {
            vect_norm.x = -vect_main.y;
 800ea8c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	425b      	negs	r3, r3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	b21b      	sxth	r3, r3
 800ea98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800ea9c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800eaa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }
    }

    /* In case of a short but tick line the perpendicular ending is longer then the real line.
     * it would break the calculations so make the normal vector larger*/
    vect_norm.x = vect_norm.x << 4;
 800eaa4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eaa8:	011b      	lsls	r3, r3, #4
 800eaaa:	b21b      	sxth	r3, r3
 800eaac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    vect_norm.y = vect_norm.y << 4;
 800eab0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eab4:	011b      	lsls	r3, r3, #4
 800eab6:	b21b      	sxth	r3, r3
 800eab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lv_coord_t width;
    width = style->line.width;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eac0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    /* The pattern stores the points of the line ending. It has the good direction and length.
     * The worth case is the 45° line where pattern can have 1.41 x `width` points*/

    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 800eac4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd f8fa 	bl	800bcc4 <lv_draw_get_buf>
 800ead0:	65b8      	str	r0, [r7, #88]	; 0x58
    lv_coord_t i = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    /*Create a perpendicular pattern (a small line)*/
    if(width != 0) {
 800ead8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d05b      	beq.n	800eb98 <line_draw_skew+0x216>
        line_draw_t pattern_line;
        lv_point_t p0 = {0, 0};
 800eae0:	2300      	movs	r3, #0
 800eae2:	82bb      	strh	r3, [r7, #20]
 800eae4:	2300      	movs	r3, #0
 800eae6:	82fb      	strh	r3, [r7, #22]
        line_init(&pattern_line, &p0, &vect_norm);
 800eae8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eaec:	f107 0114 	add.w	r1, r7, #20
 800eaf0:	f107 0318 	add.w	r3, r7, #24
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f001 f920 	bl	800fd3a <line_init>

        uint32_t width_sqr = width * width;
 800eafa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eafe:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800eb02:	fb02 f303 	mul.w	r3, r2, r3
 800eb06:	657b      	str	r3, [r7, #84]	; 0x54
        /* Run for a lot of times. Meanwhile the real width will be determined as well */
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800eb08:	2300      	movs	r3, #0
 800eb0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800eb0e:	e03d      	b.n	800eb8c <line_draw_skew+0x20a>
            pattern[i].x = pattern_line.p_act.x;
 800eb10:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb18:	4413      	add	r3, r2
 800eb1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb1e:	801a      	strh	r2, [r3, #0]
            pattern[i].y = pattern_line.p_act.y;
 800eb20:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb28:	4413      	add	r3, r2
 800eb2a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800eb2e:	805a      	strh	r2, [r3, #2]

            /*Finish the pattern line if it's length equal to the desired width (Use Pythagoras
             * theorem)*/
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800eb30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb38:	fb02 f203 	mul.w	r2, r2, r3
 800eb3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb40:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800eb44:	fb01 f303 	mul.w	r3, r1, r3
 800eb48:	4413      	add	r3, r2
 800eb4a:	653b      	str	r3, [r7, #80]	; 0x50
            if(sqr >= width_sqr) {
 800eb4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d30f      	bcc.n	800eb74 <line_draw_skew+0x1f2>
                width = i;
 800eb54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb58:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#if LV_ANTIALIAS
                if(aa) width--;
 800eb5c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d018      	beq.n	800eb96 <line_draw_skew+0x214>
 800eb64:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#endif
                break;
 800eb72:	e010      	b.n	800eb96 <line_draw_skew+0x214>
            }

            line_next(&pattern_line);
 800eb74:	f107 0318 	add.w	r3, r7, #24
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f001 f96a 	bl	800fe52 <line_next>
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800eb7e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	3301      	adds	r3, #1
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800eb8c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	ddbd      	ble.n	800eb10 <line_draw_skew+0x18e>
 800eb94:	e000      	b.n	800eb98 <line_draw_skew+0x216>
                break;
 800eb96:	bf00      	nop
        }
    }

#if LV_ANTIALIAS
    lv_coord_t aa_last_corner;
    lv_coord_t width_safe = width;
 800eb98:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800eb9c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    if(aa) {
 800eba0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <line_draw_skew+0x23a>
        if(width == 0) width_safe = 1;
 800eba8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <line_draw_skew+0x234>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        aa_last_corner = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    }
#endif

    lv_coord_t x_center_ofs = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    lv_coord_t y_center_ofs = 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    if(width != 0) {
 800ebc8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d01e      	beq.n	800ec0e <line_draw_skew+0x28c>
        x_center_ofs = pattern[width - 1].x / 2;
 800ebd0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ebd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebde:	4413      	add	r3, r2
 800ebe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebe4:	0fda      	lsrs	r2, r3, #31
 800ebe6:	4413      	add	r3, r2
 800ebe8:	105b      	asrs	r3, r3, #1
 800ebea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        y_center_ofs = pattern[width - 1].y / 2;
 800ebee:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ebf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec02:	0fda      	lsrs	r2, r3, #31
 800ec04:	4413      	add	r3, r2
 800ec06:	105b      	asrs	r3, r3, #1
 800ec08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ec0c:	e034      	b.n	800ec78 <line_draw_skew+0x2f6>
    } else {
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	7e1b      	ldrb	r3, [r3, #24]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d014      	beq.n	800ec40 <line_draw_skew+0x2be>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ec24:	4619      	mov	r1, r3
 800ec26:	7afb      	ldrb	r3, [r7, #11]
 800ec28:	440b      	add	r3, r1
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	db08      	blt.n	800ec40 <line_draw_skew+0x2be>
 800ec2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	3b01      	subs	r3, #1
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	b21a      	sxth	r2, r3
 800ec3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec3e:	805a      	strh	r2, [r3, #2]
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	7e1b      	ldrb	r3, [r3, #24]
 800ec44:	f083 0301 	eor.w	r3, r3, #1
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d014      	beq.n	800ec78 <line_draw_skew+0x2f6>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec54:	461a      	mov	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	7afb      	ldrb	r3, [r7, #11]
 800ec60:	440b      	add	r3, r1
 800ec62:	429a      	cmp	r2, r3
 800ec64:	db08      	blt.n	800ec78 <line_draw_skew+0x2f6>
 800ec66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	b21a      	sxth	r2, r3
 800ec74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec76:	801a      	strh	r2, [r3, #0]
    }

    /* Make the coordinates relative to the center */
    for(i = 0; i < width; i++) {
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ec7e:	e224      	b.n	800f0ca <line_draw_skew+0x748>
        pattern[i].x -= x_center_ofs;
 800ec80:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec88:	4413      	add	r3, r2
 800ec8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	b299      	uxth	r1, r3
 800ec98:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eca0:	4413      	add	r3, r2
 800eca2:	b20a      	sxth	r2, r1
 800eca4:	801a      	strh	r2, [r3, #0]
        pattern[i].y -= y_center_ofs;
 800eca6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecae:	4413      	add	r3, r2
 800ecb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	b299      	uxth	r1, r3
 800ecbe:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecc6:	4413      	add	r3, r2
 800ecc8:	b20a      	sxth	r2, r1
 800ecca:	805a      	strh	r2, [r3, #2]
#if LV_ANTIALIAS
        if(aa) {
 800eccc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 81f3 	beq.w	800f0bc <line_draw_skew+0x73a>
            if(i != 0) {
 800ecd6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 81ee 	beq.w	800f0bc <line_draw_skew+0x73a>
                if(main_line->hor) {
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	7e1b      	ldrb	r3, [r3, #24]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 80f5 	beq.w	800eed4 <line_draw_skew+0x552>
                    if(pattern[i - 1].x != pattern[i].x) {
 800ecea:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ecee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ecfe:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed06:	440b      	add	r3, r1
 800ed08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f000 81d5 	beq.w	800f0bc <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800ed12:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed2a:	440b      	add	r3, r1
 800ed2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        if(main_line->sy < 0) {
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	da67      	bge.n	800ee14 <line_draw_skew+0x492>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed54:	440b      	add	r3, r1
 800ed56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	4413      	add	r3, r2
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	3b01      	subs	r3, #1
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed6c:	b29a      	uxth	r2, r3
 800ed6e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed76:	440b      	add	r3, r1
 800ed78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	4413      	add	r3, r2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ed86:	4413      	add	r3, r2
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800ed8e:	b219      	sxth	r1, r3
 800ed90:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800ed94:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ed98:	9301      	str	r3, [sp, #4]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ed9e:	f8ad 3000 	strh.w	r3, [sp]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f7fd f81a 	bl	800bddc <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edae:	b29a      	uxth	r2, r3
 800edb0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edb8:	440b      	add	r3, r1
 800edba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	4413      	add	r3, r2
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	3301      	adds	r3, #1
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1, -seg_w, mask,
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edda:	440b      	add	r3, r1
 800eddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	4413      	add	r3, r2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800edea:	4413      	add	r3, r2
 800edec:	b29b      	uxth	r3, r3
 800edee:	3301      	adds	r3, #1
 800edf0:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800edf2:	b219      	sxth	r1, r3
 800edf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800edf8:	425b      	negs	r3, r3
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	b21a      	sxth	r2, r3
 800edfe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ee08:	f8ad 3000 	strh.w	r3, [sp]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f7fc ffe5 	bl	800bddc <lv_draw_aa_ver_seg>
 800ee12:	e05a      	b.n	800eeca <line_draw_skew+0x548>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee24:	440b      	add	r3, r1
 800ee26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	3b01      	subs	r3, #1
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y, seg_w, mask,
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee46:	440b      	add	r3, r1
 800ee48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4413      	add	r3, r2
 800ee50:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800ee52:	b219      	sxth	r1, r3
 800ee54:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800ee58:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ee5c:	9301      	str	r3, [sp, #4]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ee62:	f8ad 3000 	strh.w	r3, [sp]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f7fc ffb8 	bl	800bddc <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee7c:	440b      	add	r3, r1
 800ee7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	4413      	add	r3, r2
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	3301      	adds	r3, #1
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y, -seg_w, mask,
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee9e:	440b      	add	r3, r1
 800eea0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4413      	add	r3, r2
 800eea8:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800eeaa:	b219      	sxth	r1, r3
 800eeac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800eeb0:	425b      	negs	r3, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	b21a      	sxth	r2, r3
 800eeb6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800eeba:	9301      	str	r3, [sp, #4]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eec0:	f8ad 3000 	strh.w	r3, [sp]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f7fc ff89 	bl	800bddc <lv_draw_aa_ver_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800eeca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eece:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800eed2:	e0f3      	b.n	800f0bc <line_draw_skew+0x73a>
                    }
                } else {
                    if(pattern[i - 1].y != pattern[i].y) {
 800eed4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eedc:	3b01      	subs	r3, #1
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eee2:	4413      	add	r3, r2
 800eee4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800eee8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eef0:	440b      	add	r3, r1
 800eef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	f000 80e0 	beq.w	800f0bc <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800eefc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef04:	4413      	add	r3, r2
 800ef06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef14:	440b      	add	r3, r1
 800ef16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                        if(main_line->sx < 0) {
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	da67      	bge.n	800effe <line_draw_skew+0x67c>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef3e:	440b      	add	r3, r1
 800ef40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	4413      	add	r3, r2
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	3301      	adds	r3, #1
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef68:	440b      	add	r3, r1
 800ef6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	4413      	add	r3, r2
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	3b01      	subs	r3, #1
 800ef76:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800ef78:	b219      	sxth	r1, r3
 800ef7a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800ef7e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ef88:	f8ad 3000 	strh.w	r3, [sp]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f7fc ff6e 	bl	800be6e <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efa2:	440b      	add	r3, r1
 800efa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	4413      	add	r3, r2
 800efac:	b29a      	uxth	r2, r3
 800efae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800efb2:	4413      	add	r3, r2
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3301      	adds	r3, #1
 800efb8:	b29b      	uxth	r3, r3
 800efba:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efcc:	440b      	add	r3, r1
 800efce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	4413      	add	r3, r2
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	3301      	adds	r3, #1
 800efda:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800efdc:	b219      	sxth	r1, r3
 800efde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800efe2:	425b      	negs	r3, r3
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	b21a      	sxth	r2, r3
 800efe8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eff2:	f8ad 3000 	strh.w	r3, [sp]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f7fc ff39 	bl	800be6e <lv_draw_aa_hor_seg>
 800effc:	e05a      	b.n	800f0b4 <line_draw_skew+0x732>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f004:	b29a      	uxth	r2, r3
 800f006:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f00e:	440b      	add	r3, r1
 800f010:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f014:	b29b      	uxth	r3, r3
 800f016:	4413      	add	r3, r2
 800f018:	b29b      	uxth	r3, r3
 800f01a:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f022:	b29a      	uxth	r2, r3
 800f024:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f02c:	440b      	add	r3, r1
 800f02e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f032:	b29b      	uxth	r3, r3
 800f034:	4413      	add	r3, r2
 800f036:	b29b      	uxth	r3, r3
 800f038:	3b01      	subs	r3, #1
 800f03a:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800f03c:	b219      	sxth	r1, r3
 800f03e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800f042:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f04c:	f8ad 3000 	strh.w	r3, [sp]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f7fc ff0c 	bl	800be6e <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f066:	440b      	add	r3, r1
 800f068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	4413      	add	r3, r2
 800f070:	b29b      	uxth	r3, r3
 800f072:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f084:	440b      	add	r3, r1
 800f086:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	4413      	add	r3, r2
 800f08e:	b29b      	uxth	r3, r3
 800f090:	3301      	adds	r3, #1
 800f092:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800f094:	b219      	sxth	r1, r3
 800f096:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f09a:	425b      	negs	r3, r3
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	b21a      	sxth	r2, r3
 800f0a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f0aa:	f8ad 3000 	strh.w	r3, [sp]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f7fc fedd 	bl	800be6e <lv_draw_aa_hor_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800f0b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f0b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    for(i = 0; i < width; i++) {
 800f0bc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f0ca:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800f0ce:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	f6ff add4 	blt.w	800ec80 <line_draw_skew+0x2fe>
#endif
    }

#if LV_ANTIALIAS
    /*Add the last part of anti-aliasing for the perpendicular ending*/
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
 800f0d8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 81f5 	beq.w	800f4cc <line_draw_skew+0xb4a>
 800f0e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f000 81f0 	beq.w	800f4cc <line_draw_skew+0xb4a>
        if(main_line->hor) {
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	7e1b      	ldrb	r3, [r3, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 80f6 	beq.w	800f2e2 <line_draw_skew+0x960>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800f0f6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f0fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0fe:	3b01      	subs	r3, #1
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f104:	4413      	add	r3, r2
 800f106:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f114:	440b      	add	r3, r1
 800f116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	b29b      	uxth	r3, r3
 800f120:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if(main_line->sy < 0) {
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da70      	bge.n	800f210 <line_draw_skew+0x88e>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f134:	b29a      	uxth	r2, r3
 800f136:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f13e:	440b      	add	r3, r1
 800f140:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f144:	b29b      	uxth	r3, r3
 800f146:	4413      	add	r3, r2
 800f148:	b29b      	uxth	r3, r3
 800f14a:	3b01      	subs	r3, #1
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f156:	b29a      	uxth	r2, r3
 800f158:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f160:	440b      	add	r3, r1
 800f162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f166:	b29b      	uxth	r3, r3
 800f168:	4413      	add	r3, r2
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f170:	4413      	add	r3, r2
 800f172:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f174:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f182:	4413      	add	r3, r2
 800f184:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f186:	b21a      	sxth	r2, r3
 800f188:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f18c:	9301      	str	r3, [sp, #4]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f192:	f8ad 3000 	strh.w	r3, [sp]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f7fc fe20 	bl	800bddc <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1ac:	440b      	add	r3, r1
 800f1ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1ce:	440b      	add	r3, r1
 800f1d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4413      	add	r3, r2
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f1de:	4413      	add	r3, r2
 800f1e0:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f1e2:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f1f0:	4413      	add	r3, r2
 800f1f2:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f1f4:	425b      	negs	r3, r3
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	b21a      	sxth	r2, r3
 800f1fa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f204:	f8ad 3000 	strh.w	r3, [sp]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f7fc fde7 	bl	800bddc <lv_draw_aa_ver_seg>
 800f20e:	e15d      	b.n	800f4cc <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f216:	b29a      	uxth	r2, r3
 800f218:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f220:	440b      	add	r3, r1
 800f222:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f226:	b29b      	uxth	r3, r3
 800f228:	4413      	add	r3, r2
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	3b01      	subs	r3, #1
 800f22e:	b29b      	uxth	r3, r3
 800f230:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f238:	b29a      	uxth	r2, r3
 800f23a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f242:	440b      	add	r3, r1
 800f244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f248:	b29b      	uxth	r3, r3
 800f24a:	4413      	add	r3, r2
 800f24c:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f24e:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f256:	b29a      	uxth	r2, r3
 800f258:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f25c:	4413      	add	r3, r2
 800f25e:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800f260:	b21a      	sxth	r2, r3
 800f262:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f26c:	f8ad 3000 	strh.w	r3, [sp]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f7fc fdb3 	bl	800bddc <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f286:	440b      	add	r3, r1
 800f288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	4413      	add	r3, r2
 800f290:	b29b      	uxth	r3, r3
 800f292:	3301      	adds	r3, #1
 800f294:	b29b      	uxth	r3, r3
 800f296:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2a8:	440b      	add	r3, r1
 800f2aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	4413      	add	r3, r2
 800f2b2:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f2b4:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f2c2:	4413      	add	r3, r2
 800f2c4:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800f2c6:	425b      	negs	r3, r3
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	b21a      	sxth	r2, r3
 800f2cc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f2d6:	f8ad 3000 	strh.w	r3, [sp]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f7fc fd7e 	bl	800bddc <lv_draw_aa_ver_seg>
 800f2e0:	e0f4      	b.n	800f4cc <line_draw_skew+0xb4a>
                                   style->line.color, opa);
            }
        } else {
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800f2e2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f2e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2f0:	4413      	add	r3, r2
 800f2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f300:	440b      	add	r3, r1
 800f302:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f306:	b29b      	uxth	r3, r3
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(main_line->sx < 0) {
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f316:	2b00      	cmp	r3, #0
 800f318:	da70      	bge.n	800f3fc <line_draw_skew+0xa7a>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f320:	b29a      	uxth	r2, r3
 800f322:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f32a:	440b      	add	r3, r1
 800f32c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f330:	b29b      	uxth	r3, r3
 800f332:	4413      	add	r3, r2
 800f334:	b29a      	uxth	r2, r3
 800f336:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f33a:	4413      	add	r3, r2
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f346:	b29a      	uxth	r2, r3
 800f348:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f350:	440b      	add	r3, r1
 800f352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f356:	b29b      	uxth	r3, r3
 800f358:	4413      	add	r3, r2
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	3b01      	subs	r3, #1
 800f35e:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800f360:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f368:	b29a      	uxth	r2, r3
 800f36a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f36e:	4413      	add	r3, r2
 800f370:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800f372:	b21a      	sxth	r2, r3
 800f374:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f378:	9301      	str	r3, [sp, #4]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f37e:	f8ad 3000 	strh.w	r3, [sp]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f7fc fd73 	bl	800be6e <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f38e:	b29a      	uxth	r2, r3
 800f390:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f398:	440b      	add	r3, r1
 800f39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	4413      	add	r3, r2
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3a8:	4413      	add	r3, r2
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3be:	440b      	add	r3, r1
 800f3c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	4413      	add	r3, r2
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800f3ce:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3dc:	4413      	add	r3, r2
 800f3de:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800f3e0:	425b      	negs	r3, r3
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	b21a      	sxth	r2, r3
 800f3e6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f3f0:	f8ad 3000 	strh.w	r3, [sp]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f7fc fd3a 	bl	800be6e <lv_draw_aa_hor_seg>
 800f3fa:	e067      	b.n	800f4cc <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f402:	b29a      	uxth	r2, r3
 800f404:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f40c:	440b      	add	r3, r1
 800f40e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f412:	b29b      	uxth	r3, r3
 800f414:	4413      	add	r3, r2
 800f416:	b29b      	uxth	r3, r3
 800f418:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f420:	b29a      	uxth	r2, r3
 800f422:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f42a:	440b      	add	r3, r1
 800f42c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f430:	b29b      	uxth	r3, r3
 800f432:	4413      	add	r3, r2
 800f434:	b29b      	uxth	r3, r3
 800f436:	3b01      	subs	r3, #1
 800f438:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800f43a:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f442:	b29a      	uxth	r2, r3
 800f444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f448:	4413      	add	r3, r2
 800f44a:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800f44c:	b21a      	sxth	r2, r3
 800f44e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f458:	f8ad 3000 	strh.w	r3, [sp]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f7fc fd06 	bl	800be6e <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f468:	b29a      	uxth	r2, r3
 800f46a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f472:	440b      	add	r3, r1
 800f474:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	4413      	add	r3, r2
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f486:	b29a      	uxth	r2, r3
 800f488:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f490:	440b      	add	r3, r1
 800f492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f496:	b29b      	uxth	r3, r3
 800f498:	4413      	add	r3, r2
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	3301      	adds	r3, #1
 800f49e:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800f4a0:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4ae:	4413      	add	r3, r2
 800f4b0:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800f4b2:	425b      	negs	r3, r3
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	b21a      	sxth	r2, r3
 800f4b8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f4bc:	9301      	str	r3, [sp, #4]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f4c2:	f8ad 3000 	strh.w	r3, [sp]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f7fc fcd1 	bl	800be6e <lv_draw_aa_hor_seg>
#endif

#if LV_ANTIALIAS

    /*Shift the anti aliasing on the edges (-1, 1 or 0 (zero only in case width == 0))*/
    lv_coord_t aa_shift1 = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    lv_coord_t aa_shift2 = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    if(aa) {
 800f4d8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d049      	beq.n	800f574 <line_draw_skew+0xbf2>
        if(main_line->hor == false) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	7e1b      	ldrb	r3, [r3, #24]
 800f4e4:	f083 0301 	eor.w	r3, r3, #1
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d021      	beq.n	800f532 <line_draw_skew+0xbb0>
            if(main_line->sx < 0) {
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	da0e      	bge.n	800f516 <line_draw_skew+0xb94>
                aa_shift1 = -1;
 800f4f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800f500:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <line_draw_skew+0xb8c>
 800f508:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f50c:	e000      	b.n	800f510 <line_draw_skew+0xb8e>
 800f50e:	2300      	movs	r3, #0
 800f510:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f514:	e02e      	b.n	800f574 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800f516:	2301      	movs	r3, #1
 800f518:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800f51c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <line_draw_skew+0xba8>
 800f524:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800f528:	e000      	b.n	800f52c <line_draw_skew+0xbaa>
 800f52a:	2300      	movs	r3, #0
 800f52c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f530:	e020      	b.n	800f574 <line_draw_skew+0xbf2>
            }
        } else {
            if(main_line->sy < 0) {
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	da0e      	bge.n	800f55a <line_draw_skew+0xbd8>
                aa_shift1 = -1;
 800f53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f540:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800f544:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <line_draw_skew+0xbd0>
 800f54c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f550:	e000      	b.n	800f554 <line_draw_skew+0xbd2>
 800f552:	2300      	movs	r3, #0
 800f554:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f558:	e00c      	b.n	800f574 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800f55a:	2301      	movs	r3, #1
 800f55c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800f560:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <line_draw_skew+0xbec>
 800f568:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800f56c:	e000      	b.n	800f570 <line_draw_skew+0xbee>
 800f56e:	2300      	movs	r3, #0
 800f570:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }
    }
#endif

    volatile lv_point_t prev_p;
    prev_p.x = main_line->p1.x;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f57a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f582:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t draw_area;
    bool first_run = true;
 800f584:	2301      	movs	r3, #1
 800f586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if(main_line->hor) {
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	7e1b      	ldrb	r3, [r3, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	f000 82dd 	beq.w	800fb4e <line_draw_skew+0x11cc>
        while(line_next_y(main_line)) {
 800f594:	e0f3      	b.n	800f77e <line_draw_skew+0xdfc>
            for(i = 0; i < width; i++) {
 800f596:	2300      	movs	r3, #0
 800f598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f59c:	e074      	b.n	800f688 <line_draw_skew+0xd06>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800f59e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f5a0:	b21b      	sxth	r3, r3
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5ac:	440b      	add	r3, r1
 800f5ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	4413      	add	r3, r2
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	b21b      	sxth	r3, r3
 800f5ba:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800f5bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f5be:	b21b      	sxth	r3, r3
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5ca:	440b      	add	r3, r1
 800f5cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	4413      	add	r3, r2
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	b21b      	sxth	r3, r3
 800f5d8:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800f5da:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	4413      	add	r3, r2
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f5ee:	b21b      	sxth	r3, r3
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	b21b      	sxth	r3, r3
 800f5fc:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1;
 800f5fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f602:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800f604:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f60e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800f610:	6879      	ldr	r1, [r7, #4]
 800f612:	f7fd f968 	bl	800c8e6 <lv_draw_fill>

                /* Fill the gaps
                 * When stepping in y one pixel remains empty on every corner (don't do this on the
                 * first segment ) */
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800f616:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d02d      	beq.n	800f67a <line_draw_skew+0xcf8>
 800f61e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f626:	4413      	add	r3, r2
 800f628:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f62c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f634:	3b01      	subs	r3, #1
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f63a:	440b      	add	r3, r1
 800f63c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f640:	429a      	cmp	r2, r3
 800f642:	d01a      	beq.n	800f67a <line_draw_skew+0xcf8>
 800f644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f648:	f083 0301 	eor.w	r3, r3, #1
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d013      	beq.n	800f67a <line_draw_skew+0xcf8>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800f652:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800f656:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f662:	b29b      	uxth	r3, r3
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	b29b      	uxth	r3, r3
 800f668:	b219      	sxth	r1, r3
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800f670:	9200      	str	r2, [sp, #0]
 800f672:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	f7fd f89e 	bl	800c7b6 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800f67a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f67e:	b29b      	uxth	r3, r3
 800f680:	3301      	adds	r3, #1
 800f682:	b29b      	uxth	r3, r3
 800f684:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f688:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800f68c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f690:	429a      	cmp	r2, r3
 800f692:	db84      	blt.n	800f59e <line_draw_skew+0xc1c>
                }
            }

#if LV_ANTIALIAS
            if(aa) {
 800f694:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d065      	beq.n	800f768 <line_draw_skew+0xde6>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800f69c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f69e:	b21b      	sxth	r3, r3
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	4413      	add	r3, r2
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	b218      	sxth	r0, r3
 800f6b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6b2:	b21b      	sxth	r3, r3
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4413      	add	r3, r2
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	b219      	sxth	r1, r3
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800f6cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6ce:	b21b      	sxth	r3, r3
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800f6de:	b21a      	sxth	r2, r3
 800f6e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f6e4:	9301      	str	r3, [sp, #4]
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f6ea:	f8ad 3000 	strh.w	r3, [sp]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f7fc fbbd 	bl	800be6e <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800f6f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6f6:	b21b      	sxth	r3, r3
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f6fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f702:	3b01      	subs	r3, #1
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f708:	440b      	add	r3, r1
 800f70a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4413      	add	r3, r2
 800f712:	b29b      	uxth	r3, r3
 800f714:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800f716:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f718:	b21b      	sxth	r3, r3
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f724:	3b01      	subs	r3, #1
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f72a:	440b      	add	r3, r1
 800f72c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f730:	b29b      	uxth	r3, r3
 800f732:	4413      	add	r3, r2
 800f734:	b29a      	uxth	r2, r3
 800f736:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800f73a:	4413      	add	r3, r2
 800f73c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800f73e:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f746:	b29a      	uxth	r2, r3
 800f748:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f74a:	b21b      	sxth	r3, r3
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800f752:	b21a      	sxth	r2, r3
 800f754:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f758:	9301      	str	r3, [sp, #4]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f75e:	f8ad 3000 	strh.w	r3, [sp]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f7fc fb83 	bl	800be6e <lv_draw_aa_hor_seg>
                                   mask, style->line.color, opa);
            }
#endif

            first_run = false;
 800f768:	2300      	movs	r3, #0
 800f76a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            prev_p.x = main_line->p_act.x;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f774:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f77c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_y(main_line)) {
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f000 fbcf 	bl	800ff22 <line_next_y>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	f47f af05 	bne.w	800f596 <line_draw_skew+0xc14>
        }

        for(i = 0; i < width; i++) {
 800f78c:	2300      	movs	r3, #0
 800f78e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f792:	e072      	b.n	800f87a <line_draw_skew+0xef8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800f794:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f796:	b21b      	sxth	r3, r3
 800f798:	b29a      	uxth	r2, r3
 800f79a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7a2:	440b      	add	r3, r1
 800f7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	4413      	add	r3, r2
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	b21b      	sxth	r3, r3
 800f7b0:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800f7b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f7b4:	b21b      	sxth	r3, r3
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7c0:	440b      	add	r3, r1
 800f7c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800f7d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4413      	add	r3, r2
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f7e4:	b21b      	sxth	r3, r3
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	b21b      	sxth	r3, r3
 800f7ee:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1;
 800f7f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f7f4:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800f7f6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f800:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	f7fd f86f 	bl	800c8e6 <lv_draw_fill>

            /* Fill the gaps
             * When stepping in y one pixel remains empty on every corner */
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800f808:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d02d      	beq.n	800f86c <line_draw_skew+0xeea>
 800f810:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f818:	4413      	add	r3, r2
 800f81a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f81e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f826:	3b01      	subs	r3, #1
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f82c:	440b      	add	r3, r1
 800f82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f832:	429a      	cmp	r2, r3
 800f834:	d01a      	beq.n	800f86c <line_draw_skew+0xeea>
 800f836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f83a:	f083 0301 	eor.w	r3, r3, #1
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d013      	beq.n	800f86c <line_draw_skew+0xeea>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800f844:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800f848:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f854:	b29b      	uxth	r3, r3
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	b29b      	uxth	r3, r3
 800f85a:	b219      	sxth	r1, r3
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800f862:	9200      	str	r2, [sp, #0]
 800f864:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	f7fc ffa5 	bl	800c7b6 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800f86c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f870:	b29b      	uxth	r3, r3
 800f872:	3301      	adds	r3, #1
 800f874:	b29b      	uxth	r3, r3
 800f876:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f87a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800f87e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f882:	429a      	cmp	r2, r3
 800f884:	db86      	blt.n	800f794 <line_draw_skew+0xe12>
            }
        }

#if LV_ANTIALIAS
        if(aa) {
 800f886:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 8251 	beq.w	800fd32 <line_draw_skew+0x13b0>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800f890:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f892:	b21b      	sxth	r3, r3
 800f894:	b29a      	uxth	r2, r3
 800f896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	4413      	add	r3, r2
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	b218      	sxth	r0, r3
 800f8a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f8a6:	b21b      	sxth	r3, r3
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	4413      	add	r3, r2
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	b219      	sxth	r1, r3
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8ca:	b21b      	sxth	r3, r3
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800f8d2:	43db      	mvns	r3, r3
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	b21a      	sxth	r2, r3
 800f8d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f8dc:	9301      	str	r3, [sp, #4]
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f8e2:	f8ad 3000 	strh.w	r3, [sp]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f7fc fac1 	bl	800be6e <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800f8ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8ee:	b21b      	sxth	r3, r3
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f8f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f900:	440b      	add	r3, r1
 800f902:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f906:	b29b      	uxth	r3, r3
 800f908:	4413      	add	r3, r2
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	b218      	sxth	r0, r3
 800f90e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f910:	b21b      	sxth	r3, r3
 800f912:	b29a      	uxth	r2, r3
 800f914:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f91c:	3b01      	subs	r3, #1
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f922:	440b      	add	r3, r1
 800f924:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4413      	add	r3, r2
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800f932:	4413      	add	r3, r2
 800f934:	b29b      	uxth	r3, r3
 800f936:	b219      	sxth	r1, r3
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f93e:	b29a      	uxth	r2, r3
 800f940:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f942:	b21b      	sxth	r3, r3
 800f944:	b29b      	uxth	r3, r3
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	b29b      	uxth	r3, r3
 800f94a:	3301      	adds	r3, #1
 800f94c:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800f94e:	b21a      	sxth	r2, r3
 800f950:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f95a:	f8ad 3000 	strh.w	r3, [sp]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f7fc fa85 	bl	800be6e <lv_draw_aa_hor_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
        }
#endif
    }
}
 800f964:	e1e5      	b.n	800fd32 <line_draw_skew+0x13b0>
            for(i = 0; i < width; i++) {
 800f966:	2300      	movs	r3, #0
 800f968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f96c:	e074      	b.n	800fa58 <line_draw_skew+0x10d6>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800f96e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f970:	b21b      	sxth	r3, r3
 800f972:	b29a      	uxth	r2, r3
 800f974:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f97c:	440b      	add	r3, r1
 800f97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f982:	b29b      	uxth	r3, r3
 800f984:	4413      	add	r3, r2
 800f986:	b29b      	uxth	r3, r3
 800f988:	b21b      	sxth	r3, r3
 800f98a:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800f98c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f98e:	b21b      	sxth	r3, r3
 800f990:	b29a      	uxth	r2, r3
 800f992:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f99a:	440b      	add	r3, r1
 800f99c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4413      	add	r3, r2
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	b21b      	sxth	r3, r3
 800f9a8:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1;
 800f9aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f9ae:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800f9b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	4413      	add	r3, r2
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9c4:	b21b      	sxth	r3, r3
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	b21b      	sxth	r3, r3
 800f9d2:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800f9d4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f9d8:	683a      	ldr	r2, [r7, #0]
 800f9da:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f9de:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	f7fc ff80 	bl	800c8e6 <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800f9e6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d02d      	beq.n	800fa4a <line_draw_skew+0x10c8>
 800f9ee:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9f6:	4413      	add	r3, r2
 800f9f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f9fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fa00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa04:	3b01      	subs	r3, #1
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa0a:	440b      	add	r3, r1
 800fa0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d01a      	beq.n	800fa4a <line_draw_skew+0x10c8>
 800fa14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa18:	f083 0301 	eor.w	r3, r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d013      	beq.n	800fa4a <line_draw_skew+0x10c8>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800fa22:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	b218      	sxth	r0, r3
 800fa36:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800fa40:	9200      	str	r2, [sp, #0]
 800fa42:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	f7fc feb6 	bl	800c7b6 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800fa4a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	3301      	adds	r3, #1
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800fa58:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800fa5c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fa60:	429a      	cmp	r2, r3
 800fa62:	db84      	blt.n	800f96e <line_draw_skew+0xfec>
            if(aa) {
 800fa64:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d065      	beq.n	800fb38 <line_draw_skew+0x11b6>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800fa6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa6e:	b21b      	sxth	r3, r3
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	4413      	add	r3, r2
 800fa7c:	b29a      	uxth	r2, r3
 800fa7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	b218      	sxth	r0, r3
 800fa88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa8a:	b21b      	sxth	r3, r3
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	4413      	add	r3, r2
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	b219      	sxth	r1, r3
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800fa9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa9e:	b21b      	sxth	r3, r3
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800faae:	b21a      	sxth	r2, r3
 800fab0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800faba:	f8ad 3000 	strh.w	r3, [sp]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f7fc f98c 	bl	800bddc <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800fac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fac6:	b21b      	sxth	r3, r3
 800fac8:	b29a      	uxth	r2, r3
 800faca:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800face:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fad2:	3b01      	subs	r3, #1
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fad8:	440b      	add	r3, r1
 800fada:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	4413      	add	r3, r2
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800fae8:	4413      	add	r3, r2
 800faea:	b29b      	uxth	r3, r3
 800faec:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800faee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800faf0:	b21b      	sxth	r3, r3
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800faf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fafc:	3b01      	subs	r3, #1
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb02:	440b      	add	r3, r1
 800fb04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	4413      	add	r3, r2
 800fb0c:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800fb0e:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb1a:	b21b      	sxth	r3, r3
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800fb22:	b21a      	sxth	r2, r3
 800fb24:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800fb28:	9301      	str	r3, [sp, #4]
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fb2e:	f8ad 3000 	strh.w	r3, [sp]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f7fc f952 	bl	800bddc <lv_draw_aa_ver_seg>
            first_run = false;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            prev_p.x = main_line->p_act.x;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fb44:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fb4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_x(main_line)) {
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f000 fa05 	bl	800ff5e <line_next_x>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f47f af05 	bne.w	800f966 <line_draw_skew+0xfe4>
        for(i = 0; i < width; i++) {
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800fb62:	e072      	b.n	800fc4a <line_draw_skew+0x12c8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800fb64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb66:	b21b      	sxth	r3, r3
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb72:	440b      	add	r3, r1
 800fb74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	4413      	add	r3, r2
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	b21b      	sxth	r3, r3
 800fb80:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800fb82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb84:	b21b      	sxth	r3, r3
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb90:	440b      	add	r3, r1
 800fb92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4413      	add	r3, r2
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	b21b      	sxth	r3, r3
 800fb9e:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1;
 800fba0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800fba4:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800fba6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4413      	add	r3, r2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbba:	b21b      	sxth	r3, r3
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	b21b      	sxth	r3, r3
 800fbc4:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800fbc6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fbd0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800fbd2:	6879      	ldr	r1, [r7, #4]
 800fbd4:	f7fc fe87 	bl	800c8e6 <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800fbd8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d02d      	beq.n	800fc3c <line_draw_skew+0x12ba>
 800fbe0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbe8:	4413      	add	r3, r2
 800fbea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fbee:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fbf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fbfc:	440b      	add	r3, r1
 800fbfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d01a      	beq.n	800fc3c <line_draw_skew+0x12ba>
 800fc06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc0a:	f083 0301 	eor.w	r3, r3, #1
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d013      	beq.n	800fc3c <line_draw_skew+0x12ba>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800fc14:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	b218      	sxth	r0, r3
 800fc28:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800fc32:	9200      	str	r2, [sp, #0]
 800fc34:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	f7fc fdbd 	bl	800c7b6 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800fc3c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	3301      	adds	r3, #1
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800fc4a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800fc4e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fc52:	429a      	cmp	r2, r3
 800fc54:	db86      	blt.n	800fb64 <line_draw_skew+0x11e2>
        if(aa) {
 800fc56:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d069      	beq.n	800fd32 <line_draw_skew+0x13b0>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800fc5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc60:	b21b      	sxth	r3, r3
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4413      	add	r3, r2
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	b218      	sxth	r0, r3
 800fc7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc7c:	b21b      	sxth	r3, r3
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	4413      	add	r3, r2
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	b219      	sxth	r1, r3
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc98:	b21b      	sxth	r3, r3
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800fca0:	43db      	mvns	r3, r3
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	b21a      	sxth	r2, r3
 800fca6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800fcaa:	9301      	str	r3, [sp, #4]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fcb0:	f8ad 3000 	strh.w	r3, [sp]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f7fc f891 	bl	800bddc <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800fcba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcbc:	b21b      	sxth	r3, r3
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800fcc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcce:	440b      	add	r3, r1
 800fcd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	4413      	add	r3, r2
 800fcd8:	b29a      	uxth	r2, r3
 800fcda:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800fcde:	4413      	add	r3, r2
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	b218      	sxth	r0, r3
 800fce4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fce6:	b21b      	sxth	r3, r3
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800fcee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcf8:	440b      	add	r3, r1
 800fcfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4413      	add	r3, r2
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	b219      	sxth	r1, r3
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd10:	b21b      	sxth	r3, r3
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	3301      	adds	r3, #1
 800fd1a:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800fd1c:	b21a      	sxth	r2, r3
 800fd1e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800fd22:	9301      	str	r3, [sp, #4]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fd28:	f8ad 3000 	strh.w	r3, [sp]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f7fc f855 	bl	800bddc <lv_draw_aa_ver_seg>
}
 800fd32:	bf00      	nop
 800fd34:	3770      	adds	r7, #112	; 0x70
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <line_init>:

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b085      	sub	sp, #20
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	60f8      	str	r0, [r7, #12]
 800fd42:	60b9      	str	r1, [r7, #8]
 800fd44:	607a      	str	r2, [r7, #4]
    line->p1.x = p1->x;
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	801a      	strh	r2, [r3, #0]
    line->p1.y = p1->y;
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	805a      	strh	r2, [r3, #2]
    line->p2.x = p2->x;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	809a      	strh	r2, [r3, #4]
    line->p2.y = p2->y;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	80da      	strh	r2, [r3, #6]

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fd74:	461a      	mov	r2, r3
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	bfb8      	it	lt
 800fd82:	425b      	neglt	r3, r3
 800fd84:	b21a      	sxth	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	819a      	strh	r2, [r3, #12]
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	da01      	bge.n	800fd9e <line_init+0x64>
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	e001      	b.n	800fda2 <line_init+0x68>
 800fd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	81da      	strh	r2, [r3, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fdac:	461a      	mov	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	bfb8      	it	lt
 800fdba:	425b      	neglt	r3, r3
 800fdbc:	b21a      	sxth	r2, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	821a      	strh	r2, [r3, #16]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	da01      	bge.n	800fdd6 <line_init+0x9c>
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	e001      	b.n	800fdda <line_init+0xa0>
 800fdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	825a      	strh	r2, [r3, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	dd07      	ble.n	800fdfe <line_init+0xc4>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800fdf4:	0fda      	lsrs	r2, r3, #31
 800fdf6:	4413      	add	r3, r2
 800fdf8:	105b      	asrs	r3, r3, #1
 800fdfa:	b21b      	sxth	r3, r3
 800fdfc:	e007      	b.n	800fe0e <line_init+0xd4>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fe04:	425b      	negs	r3, r3
 800fe06:	0fda      	lsrs	r2, r3, #31
 800fe08:	4413      	add	r3, r2
 800fe0a:	105b      	asrs	r3, r3, #1
 800fe0c:	b21b      	sxth	r3, r3
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	8293      	strh	r3, [r2, #20]
    line->e2  = 0;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	82da      	strh	r2, [r3, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	bfcc      	ite	gt
 800fe28:	2301      	movgt	r3, #1
 800fe2a:	2300      	movle	r3, #0
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	761a      	strb	r2, [r3, #24]

    line->p_act.x = line->p1.x;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	811a      	strh	r2, [r3, #8]
    line->p_act.y = line->p1.y;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	815a      	strh	r2, [r3, #10]
}
 800fe46:	bf00      	nop
 800fe48:	3714      	adds	r7, #20
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <line_next>:

static bool line_next(line_draw_t * line)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b083      	sub	sp, #12
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d109      	bne.n	800fe7e <line_next+0x2c>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d101      	bne.n	800fe7e <line_next+0x2c>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e04b      	b.n	800ff16 <line_next+0xc4>
    line->e2 = line->err;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	82da      	strh	r2, [r3, #22]
    if(line->e2 > -line->dx) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800fe96:	425b      	negs	r3, r3
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	dd19      	ble.n	800fed0 <line_next+0x7e>
        line->err -= line->dy;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	b29b      	uxth	r3, r3
 800feb0:	b21a      	sxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	829a      	strh	r2, [r3, #20]
        line->p_act.x += line->sx;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800febc:	b29a      	uxth	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	4413      	add	r3, r2
 800fec8:	b29b      	uxth	r3, r3
 800feca:	b21a      	sxth	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	811a      	strh	r2, [r3, #8]
    }
    if(line->e2 < line->dy) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fedc:	429a      	cmp	r2, r3
 800fede:	da19      	bge.n	800ff14 <line_next+0xc2>
        line->err += line->dx;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4413      	add	r3, r2
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	b21a      	sxth	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	829a      	strh	r2, [r3, #20]
        line->p_act.y += line->sy;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	4413      	add	r3, r2
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	b21a      	sxth	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	815a      	strh	r2, [r3, #10]
    }
    return true;
 800ff14:	2301      	movs	r3, #1
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <line_next_y>:
 * Iterate until step one in y direction.
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b084      	sub	sp, #16
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
    lv_coord_t last_y = line->p_act.y;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	895b      	ldrh	r3, [r3, #10]
 800ff2e:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff ff8e 	bl	800fe52 <line_next>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f083 0301 	eor.w	r3, r3, #1
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <line_next_y+0x24>
 800ff42:	2300      	movs	r3, #0
 800ff44:	e007      	b.n	800ff56 <line_next_y+0x34>
    } while(last_y == line->p_act.y);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d0ed      	beq.n	800ff30 <line_next_y+0xe>

    return true;
 800ff54:	2301      	movs	r3, #1
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <line_next_x>:
 * Iterate until step one in x direction.
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
    lv_coord_t last_x = line->p_act.x;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	891b      	ldrh	r3, [r3, #8]
 800ff6a:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff ff70 	bl	800fe52 <line_next>
 800ff72:	4603      	mov	r3, r0
 800ff74:	f083 0301 	eor.w	r3, r3, #1
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <line_next_x+0x24>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e007      	b.n	800ff92 <line_next_x+0x34>
    } while(last_x == line->p_act.x);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d0ed      	beq.n	800ff6c <line_next_x+0xe>

    return true;
 800ff90:	2301      	movs	r3, #1
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <lv_color_mix>:
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b085      	sub	sp, #20
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	80b8      	strh	r0, [r7, #4]
 800ffa2:	8039      	strh	r1, [r7, #0]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	70fb      	strb	r3, [r7, #3]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ffa8:	793b      	ldrb	r3, [r7, #4]
 800ffaa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	78fb      	ldrb	r3, [r7, #3]
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	fb12 f303 	smulbb	r3, r2, r3
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	783b      	ldrb	r3, [r7, #0]
 800ffbe:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	b299      	uxth	r1, r3
 800ffc6:	78fb      	ldrb	r3, [r7, #3]
 800ffc8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	fb11 f303 	smulbb	r3, r1, r3
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	0a1b      	lsrs	r3, r3, #8
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	f003 031f 	and.w	r3, r3, #31
 800ffe0:	b2da      	uxtb	r2, r3
 800ffe2:	7a3b      	ldrb	r3, [r7, #8]
 800ffe4:	f362 03c7 	bfi	r3, r2, #3, #5
 800ffe8:	723b      	strb	r3, [r7, #8]
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800ffea:	793b      	ldrb	r3, [r7, #4]
 800ffec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	00db      	lsls	r3, r3, #3
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	797b      	ldrb	r3, [r7, #5]
 800fffa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	b29b      	uxth	r3, r3
 8010002:	4413      	add	r3, r2
 8010004:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 8010006:	783b      	ldrb	r3, [r7, #0]
 8010008:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801000c:	b2db      	uxtb	r3, r3
 801000e:	b29b      	uxth	r3, r3
 8010010:	00db      	lsls	r3, r3, #3
 8010012:	b29a      	uxth	r2, r3
 8010014:	787b      	ldrb	r3, [r7, #1]
 8010016:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801001a:	b2db      	uxtb	r3, r3
 801001c:	b29b      	uxth	r3, r3
 801001e:	4413      	add	r3, r2
 8010020:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 8010022:	78fb      	ldrb	r3, [r7, #3]
 8010024:	b29b      	uxth	r3, r3
 8010026:	89fa      	ldrh	r2, [r7, #14]
 8010028:	fb12 f303 	smulbb	r3, r2, r3
 801002c:	b29a      	uxth	r2, r3
 801002e:	78fb      	ldrb	r3, [r7, #3]
 8010030:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010034:	b29b      	uxth	r3, r3
 8010036:	89b9      	ldrh	r1, [r7, #12]
 8010038:	fb11 f303 	smulbb	r3, r1, r3
 801003c:	b29b      	uxth	r3, r3
 801003e:	4413      	add	r3, r2
 8010040:	b29b      	uxth	r3, r3
 8010042:	0a1b      	lsrs	r3, r3, #8
 8010044:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 8010046:	897b      	ldrh	r3, [r7, #10]
 8010048:	08db      	lsrs	r3, r3, #3
 801004a:	b29b      	uxth	r3, r3
 801004c:	f003 0307 	and.w	r3, r3, #7
 8010050:	b2da      	uxtb	r2, r3
 8010052:	7a3b      	ldrb	r3, [r7, #8]
 8010054:	f362 0302 	bfi	r3, r2, #0, #3
 8010058:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 801005a:	897b      	ldrh	r3, [r7, #10]
 801005c:	f003 0307 	and.w	r3, r3, #7
 8010060:	b2da      	uxtb	r2, r3
 8010062:	7a7b      	ldrb	r3, [r7, #9]
 8010064:	f362 1347 	bfi	r3, r2, #5, #3
 8010068:	727b      	strb	r3, [r7, #9]
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801006a:	797b      	ldrb	r3, [r7, #5]
 801006c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8010070:	b2db      	uxtb	r3, r3
 8010072:	b29a      	uxth	r2, r3
 8010074:	78fb      	ldrb	r3, [r7, #3]
 8010076:	b29b      	uxth	r3, r3
 8010078:	fb12 f303 	smulbb	r3, r2, r3
 801007c:	b29a      	uxth	r2, r3
 801007e:	787b      	ldrb	r3, [r7, #1]
 8010080:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8010084:	b2db      	uxtb	r3, r3
 8010086:	b299      	uxth	r1, r3
 8010088:	78fb      	ldrb	r3, [r7, #3]
 801008a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801008e:	b29b      	uxth	r3, r3
 8010090:	fb11 f303 	smulbb	r3, r1, r3
 8010094:	b29b      	uxth	r3, r3
 8010096:	4413      	add	r3, r2
 8010098:	b29b      	uxth	r3, r3
 801009a:	0a1b      	lsrs	r3, r3, #8
 801009c:	b29b      	uxth	r3, r3
 801009e:	f003 031f 	and.w	r3, r3, #31
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	7a7b      	ldrb	r3, [r7, #9]
 80100a6:	f362 0304 	bfi	r3, r2, #0, #5
 80100aa:	727b      	strb	r3, [r7, #9]
    return ret;
 80100ac:	893b      	ldrh	r3, [r7, #8]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <lv_area_copy>:
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b082      	sub	sp, #8
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
 80100c2:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80100c4:	2208      	movs	r2, #8
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f01a ffa1 	bl	802b010 <memcpy>
}
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <lv_area_get_width>:
{
 80100d6:	b480      	push	{r7}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	3301      	adds	r3, #1
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	b21b      	sxth	r3, r3
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010112:	b29a      	uxth	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801011a:	b29b      	uxth	r3, r3
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	b29b      	uxth	r3, r3
 8010120:	3301      	adds	r3, #1
 8010122:	b29b      	uxth	r3, r3
 8010124:	b21b      	sxth	r3, r3
}
 8010126:	4618      	mov	r0, r3
 8010128:	370c      	adds	r7, #12
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr

08010132 <lv_draw_rect>:
 * @param mask the rectangle will be drawn only in this mask
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b084      	sub	sp, #16
 8010136:	af00      	add	r7, sp, #0
 8010138:	60f8      	str	r0, [r7, #12]
 801013a:	60b9      	str	r1, [r7, #8]
 801013c:	607a      	str	r2, [r7, #4]
 801013e:	70fb      	strb	r3, [r7, #3]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff ffdf 	bl	8010104 <lv_area_get_height>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	dd4e      	ble.n	80101ea <lv_draw_rect+0xb8>
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f7ff ffc2 	bl	80100d6 <lv_area_get_width>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	dd48      	ble.n	80101ea <lv_draw_rect+0xb8>

#if LV_USE_SHADOW
    if(style->body.shadow.width != 0) {
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d005      	beq.n	801016e <lv_draw_rect+0x3c>
        lv_draw_shadow(coords, mask, style, opa_scale);
 8010162:	78fb      	ldrb	r3, [r7, #3]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	68b9      	ldr	r1, [r7, #8]
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f002 ff63 	bl	8013034 <lv_draw_shadow>
    }
#endif

    /* If the object is out of the mask there is nothing to draw.
     * Draw shadow before it because the shadow is out of `coords`*/
    if(lv_area_is_on(coords, mask) == false) return;
 801016e:	68b9      	ldr	r1, [r7, #8]
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f006 f96e 	bl	8016452 <lv_area_is_on>
 8010176:	4603      	mov	r3, r0
 8010178:	f083 0301 	eor.w	r3, r3, #1
 801017c:	b2db      	uxtb	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d135      	bne.n	80101ee <lv_draw_rect+0xbc>

    if(style->body.opa > LV_OPA_MIN) {
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	7a1b      	ldrb	r3, [r3, #8]
 8010186:	2b10      	cmp	r3, #16
 8010188:	d910      	bls.n	80101ac <lv_draw_rect+0x7a>
        lv_draw_rect_main_mid(coords, mask, style, opa_scale);
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	68b9      	ldr	r1, [r7, #8]
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f000 f830 	bl	80101f6 <lv_draw_rect_main_mid>

        if(style->body.radius != 0) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d005      	beq.n	80101ac <lv_draw_rect+0x7a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 80101a0:	78fb      	ldrb	r3, [r7, #3]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	68b9      	ldr	r1, [r7, #8]
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f000 f927 	bl	80103fa <lv_draw_rect_main_corner>
        }
    }

    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d01c      	beq.n	80101f0 <lv_draw_rect+0xbe>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	7b9b      	ldrb	r3, [r3, #14]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d018      	beq.n	80101f0 <lv_draw_rect+0xbe>
       style->body.border.opa >= LV_OPA_MIN) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	7bdb      	ldrb	r3, [r3, #15]
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 80101c2:	2b0f      	cmp	r3, #15
 80101c4:	d914      	bls.n	80101f0 <lv_draw_rect+0xbe>
        lv_draw_rect_border_straight(coords, mask, style, opa_scale);
 80101c6:	78fb      	ldrb	r3, [r7, #3]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	68b9      	ldr	r1, [r7, #8]
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f001 f93d 	bl	801144c <lv_draw_rect_border_straight>

        if(style->body.radius != 0) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d009      	beq.n	80101f0 <lv_draw_rect+0xbe>
            lv_draw_rect_border_corner(coords, mask, style, opa_scale);
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	68b9      	ldr	r1, [r7, #8]
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f001 fcdf 	bl	8011ba6 <lv_draw_rect_border_corner>
 80101e8:	e002      	b.n	80101f0 <lv_draw_rect+0xbe>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80101ea:	bf00      	nop
 80101ec:	e000      	b.n	80101f0 <lv_draw_rect+0xbe>
    if(lv_area_is_on(coords, mask) == false) return;
 80101ee:	bf00      	nop
        }
    }
}
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <lv_draw_rect_main_mid>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_mid(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b08e      	sub	sp, #56	; 0x38
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	60f8      	str	r0, [r7, #12]
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801020a:	863b      	strh	r3, [r7, #48]	; 0x30
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801020c:	f7fa fde8 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8010210:	4603      	mov	r3, r0
 8010212:	4618      	mov	r0, r3
 8010214:	f005 fcb4 	bl	8015b80 <lv_disp_get_antialiasing>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    lv_color_t mcolor = style->body.main_color;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_color_t gcolor = style->body.grad_color;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	889b      	ldrh	r3, [r3, #4]
 8010228:	843b      	strh	r3, [r7, #32]
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f7ff ff6a 	bl	8010104 <lv_area_get_height>
 8010230:	4603      	mov	r3, r0
 8010232:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t width  = lv_area_get_width(coords);
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f7ff ff4e 	bl	80100d6 <lv_area_get_width>
 801023a:	4603      	mov	r3, r0
 801023c:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	2bff      	cmp	r3, #255	; 0xff
 8010242:	d102      	bne.n	801024a <lv_draw_rect_main_mid+0x54>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7a1b      	ldrb	r3, [r3, #8]
 8010248:	e00a      	b.n	8010260 <lv_draw_rect_main_mid+0x6a>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	7a1b      	ldrb	r3, [r3, #8]
 801024e:	b29a      	uxth	r2, r3
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	b29b      	uxth	r3, r3
 8010254:	fb12 f303 	smulbb	r3, r2, r3
 8010258:	b29b      	uxth	r3, r3
 801025a:	0a1b      	lsrs	r3, r3, #8
 801025c:	b29b      	uxth	r3, r3
 801025e:	b2db      	uxtb	r3, r3
 8010260:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010264:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8010268:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801026c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801026e:	4618      	mov	r0, r3
 8010270:	f003 fdd8 	bl	8013e24 <lv_draw_cont_radius_corr>
 8010274:	4603      	mov	r3, r0
 8010276:	863b      	strh	r3, [r7, #48]	; 0x30

    /*If the radius is too big then there is no body*/
    if(radius > height / 2) return;
 8010278:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801027a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801027e:	0fd9      	lsrs	r1, r3, #31
 8010280:	440b      	add	r3, r1
 8010282:	105b      	asrs	r3, r3, #1
 8010284:	b21b      	sxth	r3, r3
 8010286:	429a      	cmp	r2, r3
 8010288:	f300 80b3 	bgt.w	80103f2 <lv_draw_rect_main_mid+0x1fc>

    lv_area_t work_area;
    work_area.x1 = coords->x1;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010292:	833b      	strh	r3, [r7, #24]
    work_area.x2 = coords->x2;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801029a:	83bb      	strh	r3, [r7, #28]

    if(mcolor.full == gcolor.full) {
 801029c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801029e:	8c3b      	ldrh	r3, [r7, #32]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d140      	bne.n	8010326 <lv_draw_rect_main_mid+0x130>
        work_area.y1 = coords->y1 + radius;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80102ae:	4413      	add	r3, r2
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	b21b      	sxth	r3, r3
 80102b4:	837b      	strh	r3, [r7, #26]
        work_area.y2 = coords->y2 - radius;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80102bc:	b29a      	uxth	r2, r3
 80102be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	b21b      	sxth	r3, r3
 80102c6:	83fb      	strh	r3, [r7, #30]

        if(style->body.radius != 0) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d020      	beq.n	8010314 <lv_draw_rect_main_mid+0x11e>

            if(aa) {
 80102d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00e      	beq.n	80102f8 <lv_draw_rect_main_mid+0x102>
                work_area.y1 += 2;
 80102da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80102de:	b29b      	uxth	r3, r3
 80102e0:	3302      	adds	r3, #2
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	b21b      	sxth	r3, r3
 80102e6:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 2;
 80102e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	3b02      	subs	r3, #2
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	b21b      	sxth	r3, r3
 80102f4:	83fb      	strh	r3, [r7, #30]
 80102f6:	e00d      	b.n	8010314 <lv_draw_rect_main_mid+0x11e>
            } else {
                work_area.y1 += 1;
 80102f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	3301      	adds	r3, #1
 8010300:	b29b      	uxth	r3, r3
 8010302:	b21b      	sxth	r3, r3
 8010304:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 1;
 8010306:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801030a:	b29b      	uxth	r3, r3
 801030c:	3b01      	subs	r3, #1
 801030e:	b29b      	uxth	r3, r3
 8010310:	b21b      	sxth	r3, r3
 8010312:	83fb      	strh	r3, [r7, #30]
            }
        }

        lv_draw_fill(&work_area, mask, mcolor, opa);
 8010314:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010318:	f107 0018 	add.w	r0, r7, #24
 801031c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801031e:	68b9      	ldr	r1, [r7, #8]
 8010320:	f7fc fae1 	bl	800c8e6 <lv_draw_fill>
 8010324:	e066      	b.n	80103f4 <lv_draw_rect_main_mid+0x1fe>
    } else {
        lv_coord_t row;
        lv_coord_t row_start = coords->y1 + radius;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801032c:	b29a      	uxth	r2, r3
 801032e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010330:	4413      	add	r3, r2
 8010332:	b29b      	uxth	r3, r3
 8010334:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t row_end   = coords->y2 - radius;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801033c:	b29a      	uxth	r2, r3
 801033e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	b29b      	uxth	r3, r3
 8010344:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_color_t act_color;

        if(style->body.radius != 0) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d014      	beq.n	801037a <lv_draw_rect_main_mid+0x184>
            if(aa) {
 8010350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010354:	2b00      	cmp	r3, #0
 8010356:	d008      	beq.n	801036a <lv_draw_rect_main_mid+0x174>
                row_start += 2;
 8010358:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801035a:	3302      	adds	r3, #2
 801035c:	b29b      	uxth	r3, r3
 801035e:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 2;
 8010360:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010362:	3b02      	subs	r3, #2
 8010364:	b29b      	uxth	r3, r3
 8010366:	867b      	strh	r3, [r7, #50]	; 0x32
 8010368:	e007      	b.n	801037a <lv_draw_rect_main_mid+0x184>
            } else {
                row_start += 1;
 801036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801036c:	3301      	adds	r3, #1
 801036e:	b29b      	uxth	r3, r3
 8010370:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 1;
 8010372:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010374:	3b01      	subs	r3, #1
 8010376:	b29b      	uxth	r3, r3
 8010378:	867b      	strh	r3, [r7, #50]	; 0x32
            }
        }
        if(row_start < 0) row_start = 0;
 801037a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801037e:	2b00      	cmp	r3, #0
 8010380:	da01      	bge.n	8010386 <lv_draw_rect_main_mid+0x190>
 8010382:	2300      	movs	r3, #0
 8010384:	86bb      	strh	r3, [r7, #52]	; 0x34

        for(row = row_start; row <= row_end; row++) {
 8010386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010388:	86fb      	strh	r3, [r7, #54]	; 0x36
 801038a:	e02b      	b.n	80103e4 <lv_draw_rect_main_mid+0x1ee>
            work_area.y1 = row;
 801038c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801038e:	837b      	strh	r3, [r7, #26]
            work_area.y2 = row;
 8010390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010392:	83fb      	strh	r3, [r7, #30]
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801039a:	461a      	mov	r2, r3
 801039c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	461a      	mov	r2, r3
 80103a4:	4613      	mov	r3, r2
 80103a6:	021b      	lsls	r3, r3, #8
 80103a8:	1a9a      	subs	r2, r3, r2
 80103aa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80103ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80103b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80103b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103ba:	461a      	mov	r2, r3
 80103bc:	8c39      	ldrh	r1, [r7, #32]
 80103be:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80103c0:	f7ff fdeb 	bl	800ff9a <lv_color_mix>
 80103c4:	4603      	mov	r3, r0
 80103c6:	82bb      	strh	r3, [r7, #20]

            lv_draw_fill(&work_area, mask, act_color, opa);
 80103c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80103cc:	f107 0018 	add.w	r0, r7, #24
 80103d0:	8aba      	ldrh	r2, [r7, #20]
 80103d2:	68b9      	ldr	r1, [r7, #8]
 80103d4:	f7fc fa87 	bl	800c8e6 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
 80103d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80103dc:	b29b      	uxth	r3, r3
 80103de:	3301      	adds	r3, #1
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80103e4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80103e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80103ec:	429a      	cmp	r2, r3
 80103ee:	ddcd      	ble.n	801038c <lv_draw_rect_main_mid+0x196>
 80103f0:	e000      	b.n	80103f4 <lv_draw_rect_main_mid+0x1fe>
    if(radius > height / 2) return;
 80103f2:	bf00      	nop
        }
    }
}
 80103f4:	3738      	adds	r7, #56	; 0x38
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <lv_draw_rect_main_corner>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                     lv_opa_t opa_scale)
{
 80103fa:	b5b0      	push	{r4, r5, r7, lr}
 80103fc:	b0a4      	sub	sp, #144	; 0x90
 80103fe:	af02      	add	r7, sp, #8
 8010400:	60f8      	str	r0, [r7, #12]
 8010402:	60b9      	str	r1, [r7, #8]
 8010404:	607a      	str	r2, [r7, #4]
 8010406:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801040e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010412:	f7fa fce5 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8010416:	4603      	mov	r3, r0
 8010418:	4618      	mov	r0, r3
 801041a:	f005 fbb1 	bl	8015b80 <lv_disp_get_antialiasing>
 801041e:	4603      	mov	r3, r0
 8010420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    lv_color_t mcolor = style->body.main_color;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	885b      	ldrh	r3, [r3, #2]
 8010428:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	889b      	ldrh	r3, [r3, #4]
 8010430:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	2bff      	cmp	r3, #255	; 0xff
 8010438:	d102      	bne.n	8010440 <lv_draw_rect_main_corner+0x46>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7a1b      	ldrb	r3, [r3, #8]
 801043e:	e00a      	b.n	8010456 <lv_draw_rect_main_corner+0x5c>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	7a1b      	ldrb	r3, [r3, #8]
 8010444:	b29a      	uxth	r2, r3
 8010446:	78fb      	ldrb	r3, [r7, #3]
 8010448:	b29b      	uxth	r3, r3
 801044a:	fb12 f303 	smulbb	r3, r2, r3
 801044e:	b29b      	uxth	r3, r3
 8010450:	0a1b      	lsrs	r3, r3, #8
 8010452:	b29b      	uxth	r3, r3
 8010454:	b2db      	uxtb	r3, r3
 8010456:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f7ff fe52 	bl	8010104 <lv_area_get_height>
 8010460:	4603      	mov	r3, r0
 8010462:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    lv_coord_t width  = lv_area_get_width(coords);
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f7ff fe35 	bl	80100d6 <lv_area_get_width>
 801046c:	4603      	mov	r3, r0
 801046e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010472:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8010476:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 801047a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801047e:	4618      	mov	r0, r3
 8010480:	f003 fcd0 	bl	8013e24 <lv_draw_cont_radius_corr>
 8010484:	4603      	mov	r3, r0
 8010486:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010490:	b29a      	uxth	r2, r3
 8010492:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010496:	4413      	add	r3, r2
 8010498:	b29a      	uxth	r2, r3
 801049a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801049e:	b29b      	uxth	r3, r3
 80104a0:	4413      	add	r3, r2
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	b21b      	sxth	r3, r3
 80104a6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + aa;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80104b6:	4413      	add	r3, r2
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80104be:	b29b      	uxth	r3, r3
 80104c0:	4413      	add	r3, r2
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	b21b      	sxth	r3, r3
 80104c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    lb_origo.x = coords->x1 + radius + aa;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80104d6:	4413      	add	r3, r2
 80104d8:	b29a      	uxth	r2, r3
 80104da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80104de:	b29b      	uxth	r3, r3
 80104e0:	4413      	add	r3, r2
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	b21b      	sxth	r3, r3
 80104e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80104fe:	b29b      	uxth	r3, r3
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	b29b      	uxth	r3, r3
 8010504:	b21b      	sxth	r3, r3
 8010506:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    rt_origo.x = coords->x2 - radius - aa;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010510:	b29a      	uxth	r2, r3
 8010512:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	b29a      	uxth	r2, r3
 801051a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801051e:	b29b      	uxth	r3, r3
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	b29b      	uxth	r3, r3
 8010524:	b21b      	sxth	r3, r3
 8010526:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    rt_origo.y = coords->y1 + radius + aa;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010530:	b29a      	uxth	r2, r3
 8010532:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010536:	4413      	add	r3, r2
 8010538:	b29a      	uxth	r2, r3
 801053a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801053e:	b29b      	uxth	r3, r3
 8010540:	4413      	add	r3, r2
 8010542:	b29b      	uxth	r3, r3
 8010544:	b21b      	sxth	r3, r3
 8010546:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    rb_origo.x = coords->x2 - radius - aa;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010550:	b29a      	uxth	r2, r3
 8010552:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	b29a      	uxth	r2, r3
 801055a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801055e:	b29b      	uxth	r3, r3
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	b29b      	uxth	r3, r3
 8010564:	b21b      	sxth	r3, r3
 8010566:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    rb_origo.y = coords->y2 - radius - aa;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010570:	b29a      	uxth	r2, r3
 8010572:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	b29a      	uxth	r2, r3
 801057a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801057e:	b29b      	uxth	r3, r3
 8010580:	1ad3      	subs	r3, r2, r3
 8010582:	b29b      	uxth	r3, r3
 8010584:	b21b      	sxth	r3, r3
 8010586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mid_bot_area;
    lv_area_t edge_bot_area;

    lv_point_t cir;
    lv_coord_t cir_tmp;
    lv_circ_init(&cir, &cir_tmp, radius);
 801058a:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801058e:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8010592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010596:	4618      	mov	r0, r3
 8010598:	f005 ffb9 	bl	801650e <lv_circ_init>

    /*Init the areas*/
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 801059c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	b219      	sxth	r1, r3
 80105ae:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	4413      	add	r3, r2
 80105bc:	b29b      	uxth	r3, r3
 80105be:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80105c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	4413      	add	r3, r2
 80105ce:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80105d0:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80105d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80105dc:	b29b      	uxth	r3, r3
 80105de:	4413      	add	r3, r2
 80105e0:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80105e2:	b21b      	sxth	r3, r3
 80105e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	462b      	mov	r3, r5
 80105ec:	4622      	mov	r2, r4
 80105ee:	f005 fddb 	bl	80161a8 <lv_area_set>

    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80105f2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	b29b      	uxth	r3, r3
 8010602:	b219      	sxth	r1, r3
 8010604:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010608:	b29a      	uxth	r2, r3
 801060a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801060e:	b29b      	uxth	r3, r3
 8010610:	4413      	add	r3, r2
 8010612:	b29b      	uxth	r3, r3
 8010614:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8010616:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801061a:	b29a      	uxth	r2, r3
 801061c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010620:	b29b      	uxth	r3, r3
 8010622:	4413      	add	r3, r2
 8010624:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010626:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8010628:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801062c:	b29a      	uxth	r2, r3
 801062e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010632:	b29b      	uxth	r3, r3
 8010634:	4413      	add	r3, r2
 8010636:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010638:	b21b      	sxth	r3, r3
 801063a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	462b      	mov	r3, r5
 8010642:	4622      	mov	r2, r4
 8010644:	f005 fdb0 	bl	80161a8 <lv_area_set>

    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8010648:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801064c:	b29a      	uxth	r2, r3
 801064e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010652:	b29b      	uxth	r3, r3
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	b29b      	uxth	r3, r3
 8010658:	b219      	sxth	r1, r3
 801065a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801065e:	b29a      	uxth	r2, r3
 8010660:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010664:	b29b      	uxth	r3, r3
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	b29b      	uxth	r3, r3
 801066a:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 801066c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010670:	b29a      	uxth	r2, r3
 8010672:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010676:	b29b      	uxth	r3, r3
 8010678:	4413      	add	r3, r2
 801067a:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801067c:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 801067e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010682:	b29a      	uxth	r2, r3
 8010684:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010688:	b29b      	uxth	r3, r3
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801068e:	b21b      	sxth	r3, r3
 8010690:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	462b      	mov	r3, r5
 8010698:	4622      	mov	r2, r4
 801069a:	f005 fd85 	bl	80161a8 <lv_area_set>

    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 801069e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	b219      	sxth	r1, r3
 80106b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	b29b      	uxth	r3, r3
 80106c0:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 80106c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	4413      	add	r3, r2
 80106d0:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 80106d2:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 80106d4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80106d8:	b29a      	uxth	r2, r3
 80106da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80106de:	b29b      	uxth	r3, r3
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 80106e4:	b21b      	sxth	r3, r3
 80106e6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	462b      	mov	r3, r5
 80106ee:	4622      	mov	r2, r4
 80106f0:	f005 fd5a 	bl	80161a8 <lv_area_set>
#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 80106f4:	2300      	movs	r3, #0
 80106f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    lv_coord_t out_y_seg_end   = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    lv_coord_t out_x_last      = radius;
 8010700:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010704:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    lv_color_t aa_color_hor_top;
    lv_color_t aa_color_hor_bottom;
    lv_color_t aa_color_ver;
#endif

    while(lv_circ_cont(&cir)) {
 8010708:	e367      	b.n	8010dda <lv_draw_rect_main_corner+0x9e0>
#if LV_ANTIALIAS
        if(aa) {
 801070a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801070e:	2b00      	cmp	r3, #0
 8010710:	f000 8197 	beq.w	8010a42 <lv_draw_rect_main_corner+0x648>
            /*New step in y on the outter circle*/
            if(out_x_last != cir.x) {
 8010714:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010718:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801071c:	429a      	cmp	r2, r3
 801071e:	f000 8190 	beq.w	8010a42 <lv_draw_rect_main_corner+0x648>
                out_y_seg_end       = cir.y;
 8010722:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010724:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8010728:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 801072c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	b29b      	uxth	r3, r3
 8010734:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 8010738:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801073c:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 801073e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010742:	837b      	strh	r3, [r7, #26]

                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8010744:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8010748:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	461a      	mov	r2, r3
 8010750:	4613      	mov	r3, r2
 8010752:	021b      	lsls	r3, r3, #8
 8010754:	1a9a      	subs	r2, r3, r2
 8010756:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801075a:	fbb2 f3f3 	udiv	r3, r2, r3
 801075e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8010762:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010766:	461a      	mov	r2, r3
 8010768:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 801076c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 8010770:	f7ff fc13 	bl	800ff9a <lv_color_mix>
 8010774:	4603      	mov	r3, r0
 8010776:	84bb      	strh	r3, [r7, #36]	; 0x24
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8010778:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801077c:	461a      	mov	r2, r3
 801077e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010782:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010786:	f7ff fc08 	bl	800ff9a <lv_color_mix>
 801078a:	4603      	mov	r3, r0
 801078c:	843b      	strh	r3, [r7, #32]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 801078e:	2300      	movs	r3, #0
 8010790:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8010794:	e147      	b.n	8010a26 <lv_draw_rect_main_corner+0x62c>
                    lv_opa_t aa_opa;
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8010796:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801079a:	2b01      	cmp	r3, #1
 801079c:	dd0c      	ble.n	80107b8 <lv_draw_rect_main_corner+0x3be>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 801079e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80107a2:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80107a6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 80107aa:	4618      	mov	r0, r3
 80107ac:	f003 fb7c 	bl	8013ea8 <antialias_get_opa_circ>
 80107b0:	4603      	mov	r3, r0
 80107b2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80107b6:	e00f      	b.n	80107d8 <lv_draw_rect_main_corner+0x3de>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80107b8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80107bc:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80107c0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fb facf 	bl	800bd68 <lv_draw_aa_get_opa>
 80107ca:	4603      	mov	r3, r0
 80107cc:	461a      	mov	r2, r3
 80107ce:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                    }

                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80107d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80107dc:	b29a      	uxth	r2, r3
 80107de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	4413      	add	r3, r2
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80107ec:	4413      	add	r3, r2
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	b218      	sxth	r0, r3
 80107f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	4413      	add	r3, r2
 8010800:	b29b      	uxth	r3, r3
 8010802:	3301      	adds	r3, #1
 8010804:	b29b      	uxth	r3, r3
 8010806:	b219      	sxth	r1, r3
 8010808:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801080c:	9300      	str	r3, [sp, #0]
 801080e:	8c3b      	ldrh	r3, [r7, #32]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	f7fb ffd0 	bl	800c7b6 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8010816:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801081a:	b29a      	uxth	r2, r3
 801081c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010820:	b29b      	uxth	r3, r3
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	b29a      	uxth	r2, r3
 8010826:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	b29b      	uxth	r3, r3
 801082e:	b218      	sxth	r0, r3
 8010830:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010834:	b29a      	uxth	r2, r3
 8010836:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801083a:	b29b      	uxth	r3, r3
 801083c:	4413      	add	r3, r2
 801083e:	b29b      	uxth	r3, r3
 8010840:	3301      	adds	r3, #1
 8010842:	b29b      	uxth	r3, r3
 8010844:	b219      	sxth	r1, r3
 8010846:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	8c3b      	ldrh	r3, [r7, #32]
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	f7fb ffb1 	bl	800c7b6 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8010854:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8010858:	b29a      	uxth	r2, r3
 801085a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801085e:	b29b      	uxth	r3, r3
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	b29a      	uxth	r2, r3
 8010864:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	b29b      	uxth	r3, r3
 801086c:	b218      	sxth	r0, r3
 801086e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010872:	b29a      	uxth	r2, r3
 8010874:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010878:	b29b      	uxth	r3, r3
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	b29b      	uxth	r3, r3
 801087e:	3b01      	subs	r3, #1
 8010880:	b29b      	uxth	r3, r3
 8010882:	b219      	sxth	r1, r3
 8010884:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	f7fb ff92 	bl	800c7b6 <lv_draw_px>
                               aa_color_hor_top, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8010892:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010896:	b29a      	uxth	r2, r3
 8010898:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801089c:	b29b      	uxth	r3, r3
 801089e:	4413      	add	r3, r2
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80108a6:	4413      	add	r3, r2
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	b218      	sxth	r0, r3
 80108ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	3b01      	subs	r3, #1
 80108be:	b29b      	uxth	r3, r3
 80108c0:	b219      	sxth	r1, r3
 80108c2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	f7fb ff73 	bl	800c7b6 <lv_draw_px>
                               aa_color_hor_top, aa_opa);

                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80108d0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80108d4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80108d8:	1ad2      	subs	r2, r2, r3
 80108da:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80108de:	4413      	add	r3, r2
 80108e0:	461a      	mov	r2, r3
 80108e2:	4613      	mov	r3, r2
 80108e4:	021b      	lsls	r3, r3, #8
 80108e6:	1a9a      	subs	r2, r3, r2
 80108e8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80108ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80108f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80108f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108f8:	461a      	mov	r2, r3
 80108fa:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80108fe:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010902:	f7ff fb4a 	bl	800ff9a <lv_color_mix>
 8010906:	4603      	mov	r3, r0
 8010908:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801090a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801090e:	b29a      	uxth	r2, r3
 8010910:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010914:	b29b      	uxth	r3, r3
 8010916:	4413      	add	r3, r2
 8010918:	b29b      	uxth	r3, r3
 801091a:	3301      	adds	r3, #1
 801091c:	b29b      	uxth	r3, r3
 801091e:	b218      	sxth	r0, r3
 8010920:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010924:	b29a      	uxth	r2, r3
 8010926:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801092a:	b29b      	uxth	r3, r3
 801092c:	4413      	add	r3, r2
 801092e:	b29a      	uxth	r2, r3
 8010930:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010934:	4413      	add	r3, r2
 8010936:	b29b      	uxth	r3, r3
 8010938:	b219      	sxth	r1, r3
 801093a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	8bbb      	ldrh	r3, [r7, #28]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	f7fb ff37 	bl	800c7b6 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8010948:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801094c:	b29a      	uxth	r2, r3
 801094e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010952:	b29b      	uxth	r3, r3
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	b29b      	uxth	r3, r3
 8010958:	3b01      	subs	r3, #1
 801095a:	b29b      	uxth	r3, r3
 801095c:	b218      	sxth	r0, r3
 801095e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010962:	b29a      	uxth	r2, r3
 8010964:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010968:	b29b      	uxth	r3, r3
 801096a:	4413      	add	r3, r2
 801096c:	b29a      	uxth	r2, r3
 801096e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010972:	4413      	add	r3, r2
 8010974:	b29b      	uxth	r3, r3
 8010976:	b219      	sxth	r1, r3
 8010978:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801097c:	9300      	str	r3, [sp, #0]
 801097e:	8bbb      	ldrh	r3, [r7, #28]
 8010980:	68ba      	ldr	r2, [r7, #8]
 8010982:	f7fb ff18 	bl	800c7b6 <lv_draw_px>
                               aa_color_ver, aa_opa);

                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8010986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801098a:	461a      	mov	r2, r3
 801098c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8010990:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 8010994:	f7ff fb01 	bl	800ff9a <lv_color_mix>
 8010998:	4603      	mov	r3, r0
 801099a:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801099c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	3b01      	subs	r3, #1
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	b218      	sxth	r0, r3
 80109b2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	1ad3      	subs	r3, r2, r3
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	b219      	sxth	r1, r3
 80109cc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	8bbb      	ldrh	r3, [r7, #28]
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	f7fb feee 	bl	800c7b6 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80109da:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80109de:	b29a      	uxth	r2, r3
 80109e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	4413      	add	r3, r2
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	3301      	adds	r3, #1
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	b218      	sxth	r0, r3
 80109f0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	b219      	sxth	r1, r3
 8010a0a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	8bbb      	ldrh	r3, [r7, #28]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	f7fb fecf 	bl	800c7b6 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 8010a18:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	3301      	adds	r3, #1
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8010a26:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 8010a2a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	f6ff aeb1 	blt.w	8010796 <lv_draw_rect_main_corner+0x39c>
                               aa_color_ver, aa_opa);
                }

                out_x_last      = cir.x;
 8010a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a36:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                out_y_seg_start = out_y_seg_end;
 8010a3a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8010a3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            }
        }
#endif
        uint8_t edge_top_refr = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        uint8_t mid_top_refr  = 0;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        uint8_t mid_bot_refr  = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        uint8_t edge_bot_refr = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        /* If a new row coming draw the previous
         * The y coordinate can remain the same so wait for a new*/
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8010a5a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010a64:	4619      	mov	r1, r3
 8010a66:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010a6a:	440b      	add	r3, r1
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d002      	beq.n	8010a76 <lv_draw_rect_main_corner+0x67c>
 8010a70:	2301      	movs	r3, #1
 8010a72:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8010a76:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010a80:	4619      	mov	r1, r3
 8010a82:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010a86:	440b      	add	r3, r1
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d002      	beq.n	8010a92 <lv_draw_rect_main_corner+0x698>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8010a92:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8010a96:	461a      	mov	r2, r3
 8010a98:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010aa2:	1acb      	subs	r3, r1, r3
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d002      	beq.n	8010aae <lv_draw_rect_main_corner+0x6b4>
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8010aae:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010ab8:	4619      	mov	r1, r3
 8010aba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010abe:	1acb      	subs	r3, r1, r3
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d002      	beq.n	8010aca <lv_draw_rect_main_corner+0x6d0>
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

        /*Draw the areas which are not disabled*/
        if(edge_top_refr != 0) {
 8010aca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d030      	beq.n	8010b34 <lv_draw_rect_main_corner+0x73a>
            if(mcolor.full == gcolor.full)
 8010ad2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010ad6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d104      	bne.n	8010ae8 <lv_draw_rect_main_corner+0x6ee>
                act_color = mcolor;
 8010ade:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010ae2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010ae6:	e01c      	b.n	8010b22 <lv_draw_rect_main_corner+0x728>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010aee:	461a      	mov	r2, r3
 8010af0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	461a      	mov	r2, r3
 8010af8:	4613      	mov	r3, r2
 8010afa:	021b      	lsls	r3, r3, #8
 8010afc:	1a9a      	subs	r2, r3, r2
 8010afe:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8010b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010b0e:	461a      	mov	r2, r3
 8010b10:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010b14:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010b18:	f7ff fa3f 	bl	800ff9a <lv_color_mix>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8010b22:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010b26:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010b2a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010b2e:	68b9      	ldr	r1, [r7, #8]
 8010b30:	f7fb fed9 	bl	800c8e6 <lv_draw_fill>
        }

        if(mid_top_refr != 0) {
 8010b34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d030      	beq.n	8010b9e <lv_draw_rect_main_corner+0x7a4>
            if(mcolor.full == gcolor.full)
 8010b3c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010b40:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d104      	bne.n	8010b52 <lv_draw_rect_main_corner+0x758>
                act_color = mcolor;
 8010b48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010b4c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010b50:	e01c      	b.n	8010b8c <lv_draw_rect_main_corner+0x792>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	461a      	mov	r2, r3
 8010b62:	4613      	mov	r3, r2
 8010b64:	021b      	lsls	r3, r3, #8
 8010b66:	1a9a      	subs	r2, r3, r2
 8010b68:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8010b74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010b78:	461a      	mov	r2, r3
 8010b7a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010b7e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010b82:	f7ff fa0a 	bl	800ff9a <lv_color_mix>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8010b8c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010b90:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8010b94:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010b98:	68b9      	ldr	r1, [r7, #8]
 8010b9a:	f7fb fea4 	bl	800c8e6 <lv_draw_fill>
        }

        if(mid_bot_refr != 0) {
 8010b9e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d030      	beq.n	8010c08 <lv_draw_rect_main_corner+0x80e>
            if(mcolor.full == gcolor.full)
 8010ba6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010baa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d104      	bne.n	8010bbc <lv_draw_rect_main_corner+0x7c2>
                act_color = mcolor;
 8010bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010bb6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010bba:	e01c      	b.n	8010bf6 <lv_draw_rect_main_corner+0x7fc>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	461a      	mov	r2, r3
 8010bcc:	4613      	mov	r3, r2
 8010bce:	021b      	lsls	r3, r3, #8
 8010bd0:	1a9a      	subs	r2, r3, r2
 8010bd2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8010bde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010be2:	461a      	mov	r2, r3
 8010be4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010be8:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010bec:	f7ff f9d5 	bl	800ff9a <lv_color_mix>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8010bf6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010bfa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010bfe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010c02:	68b9      	ldr	r1, [r7, #8]
 8010c04:	f7fb fe6f 	bl	800c8e6 <lv_draw_fill>
        }

        if(edge_bot_refr != 0) {
 8010c08:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d030      	beq.n	8010c72 <lv_draw_rect_main_corner+0x878>

            if(mcolor.full == gcolor.full)
 8010c10:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010c14:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d104      	bne.n	8010c26 <lv_draw_rect_main_corner+0x82c>
                act_color = mcolor;
 8010c1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010c20:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010c24:	e01c      	b.n	8010c60 <lv_draw_rect_main_corner+0x866>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010c32:	1ad3      	subs	r3, r2, r3
 8010c34:	461a      	mov	r2, r3
 8010c36:	4613      	mov	r3, r2
 8010c38:	021b      	lsls	r3, r3, #8
 8010c3a:	1a9a      	subs	r2, r3, r2
 8010c3c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8010c48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010c52:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010c56:	f7ff f9a0 	bl	800ff9a <lv_color_mix>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8010c60:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010c64:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010c68:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010c6c:	68b9      	ldr	r1, [r7, #8]
 8010c6e:	f7fb fe3a 	bl	800c8e6 <lv_draw_fill>
        }

        /*Save the current coordinates*/
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8010c72:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	b219      	sxth	r1, r3
 8010c84:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8010c96:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	4413      	add	r3, r2
 8010ca4:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8010ca6:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8010ca8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4413      	add	r3, r2
 8010cb6:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8010cb8:	b21b      	sxth	r3, r3
 8010cba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	462b      	mov	r3, r5
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	f005 fa70 	bl	80161a8 <lv_area_set>

        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010cc8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	b219      	sxth	r1, r3
 8010cda:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8010cec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	4413      	add	r3, r2
 8010cfa:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010cfc:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8010cfe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	4413      	add	r3, r2
 8010d0c:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010d0e:	b21b      	sxth	r3, r3
 8010d10:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	462b      	mov	r3, r5
 8010d18:	4622      	mov	r2, r4
 8010d1a:	f005 fa45 	bl	80161a8 <lv_area_set>

        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8010d1e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	b219      	sxth	r1, r3
 8010d30:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	1ad3      	subs	r3, r2, r3
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8010d42:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	4413      	add	r3, r2
 8010d50:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8010d52:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8010d54:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010d58:	b29a      	uxth	r2, r3
 8010d5a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8010d64:	b21b      	sxth	r3, r3
 8010d66:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	462b      	mov	r3, r5
 8010d6e:	4622      	mov	r2, r4
 8010d70:	f005 fa1a 	bl	80161a8 <lv_area_set>

        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8010d74:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	b219      	sxth	r1, r3
 8010d86:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8010d98:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	4413      	add	r3, r2
 8010da6:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8010da8:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8010daa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8010dba:	b21b      	sxth	r3, r3
 8010dbc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	f005 f9ef 	bl	80161a8 <lv_area_set>

        lv_circ_next(&cir, &cir_tmp);
 8010dca:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8010dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f005 fbc9 	bl	801656c <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 8010dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010dde:	4618      	mov	r0, r3
 8010de0:	f005 fbaf 	bl	8016542 <lv_circ_cont>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f47f ac8f 	bne.w	801070a <lv_draw_rect_main_corner+0x310>
    }

    if(mcolor.full == gcolor.full)
 8010dec:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010df0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d104      	bne.n	8010e02 <lv_draw_rect_main_corner+0xa08>
        act_color = mcolor;
 8010df8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010dfc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010e00:	e01c      	b.n	8010e3c <lv_draw_rect_main_corner+0xa42>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	461a      	mov	r2, r3
 8010e12:	4613      	mov	r3, r2
 8010e14:	021b      	lsls	r3, r3, #8
 8010e16:	1a9a      	subs	r2, r3, r2
 8010e18:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8010e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010e2e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010e32:	f7ff f8b2 	bl	800ff9a <lv_color_mix>
 8010e36:	4603      	mov	r3, r0
 8010e38:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8010e3c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010e40:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010e44:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010e48:	68b9      	ldr	r1, [r7, #8]
 8010e4a:	f7fb fd4c 	bl	800c8e6 <lv_draw_fill>

    if(edge_top_area.y1 != mid_top_area.y1) {
 8010e4e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010e52:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d030      	beq.n	8010ebc <lv_draw_rect_main_corner+0xac2>

        if(mcolor.full == gcolor.full)
 8010e5a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010e5e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d104      	bne.n	8010e70 <lv_draw_rect_main_corner+0xa76>
            act_color = mcolor;
 8010e66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010e6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010e6e:	e01c      	b.n	8010eaa <lv_draw_rect_main_corner+0xab0>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e76:	461a      	mov	r2, r3
 8010e78:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	461a      	mov	r2, r3
 8010e80:	4613      	mov	r3, r2
 8010e82:	021b      	lsls	r3, r3, #8
 8010e84:	1a9a      	subs	r2, r3, r2
 8010e86:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8010e92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010e96:	461a      	mov	r2, r3
 8010e98:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010e9c:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010ea0:	f7ff f87b 	bl	800ff9a <lv_color_mix>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8010eaa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010eae:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8010eb2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010eb6:	68b9      	ldr	r1, [r7, #8]
 8010eb8:	f7fb fd15 	bl	800c8e6 <lv_draw_fill>
    }

    if(mcolor.full == gcolor.full)
 8010ebc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010ec0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d104      	bne.n	8010ed2 <lv_draw_rect_main_corner+0xad8>
        act_color = mcolor;
 8010ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010ecc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010ed0:	e01c      	b.n	8010f0c <lv_draw_rect_main_corner+0xb12>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	021b      	lsls	r3, r3, #8
 8010ee6:	1a9a      	subs	r2, r3, r2
 8010ee8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ef0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8010ef4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010ef8:	461a      	mov	r2, r3
 8010efa:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010efe:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010f02:	f7ff f84a 	bl	800ff9a <lv_color_mix>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8010f0c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010f10:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010f14:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010f18:	68b9      	ldr	r1, [r7, #8]
 8010f1a:	f7fb fce4 	bl	800c8e6 <lv_draw_fill>

    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8010f1e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8010f22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d030      	beq.n	8010f8c <lv_draw_rect_main_corner+0xb92>

        if(mcolor.full == gcolor.full)
 8010f2a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010f2e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d104      	bne.n	8010f40 <lv_draw_rect_main_corner+0xb46>
            act_color = mcolor;
 8010f36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010f3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010f3e:	e01c      	b.n	8010f7a <lv_draw_rect_main_corner+0xb80>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010f46:	461a      	mov	r2, r3
 8010f48:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	461a      	mov	r2, r3
 8010f50:	4613      	mov	r3, r2
 8010f52:	021b      	lsls	r3, r3, #8
 8010f54:	1a9a      	subs	r2, r3, r2
 8010f56:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8010f62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010f66:	461a      	mov	r2, r3
 8010f68:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010f6c:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010f70:	f7ff f813 	bl	800ff9a <lv_color_mix>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8010f7a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010f7e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010f82:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010f86:	68b9      	ldr	r1, [r7, #8]
 8010f88:	f7fb fcad 	bl	800c8e6 <lv_draw_fill>
    }

#if LV_ANTIALIAS
    if(aa) {
 8010f8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 8257 	beq.w	8011444 <lv_draw_rect_main_corner+0x104a>
        /*The first and the last line is not drawn*/
        edge_top_area.x1 = coords->x1 + radius + 2;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f9c:	b29a      	uxth	r2, r3
 8010f9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010fa2:	4413      	add	r3, r2
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	3302      	adds	r3, #2
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	b21b      	sxth	r3, r3
 8010fac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        edge_top_area.x2 = coords->x2 - radius - 2;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010fbc:	1ad3      	subs	r3, r2, r3
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	3b02      	subs	r3, #2
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	b21b      	sxth	r3, r3
 8010fc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        edge_top_area.y1 = coords->y1;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010fd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y1;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010fda:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8010fde:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010fe8:	8852      	ldrh	r2, [r2, #2]
 8010fea:	68b9      	ldr	r1, [r7, #8]
 8010fec:	f7fb fc7b 	bl	800c8e6 <lv_draw_fill>

        edge_top_area.y1 = coords->y2;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ff6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y2;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011000:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011004:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801100e:	8892      	ldrh	r2, [r2, #4]
 8011010:	68b9      	ldr	r1, [r7, #8]
 8011012:	f7fb fc68 	bl	800c8e6 <lv_draw_fill>

        /*Last parts of the anti-alias*/
        out_y_seg_end       = cir.y;
 8011016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011018:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801101c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8011020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29b      	uxth	r3, r3
 8011028:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 801102c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011030:	82bb      	strh	r3, [r7, #20]
        aa_p.y = out_y_seg_start;
 8011032:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011036:	82fb      	strh	r3, [r7, #22]

        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011038:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 801103c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	461a      	mov	r2, r3
 8011044:	4613      	mov	r3, r2
 8011046:	021b      	lsls	r3, r3, #8
 8011048:	1a9a      	subs	r2, r3, r2
 801104a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011052:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011056:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801105a:	461a      	mov	r2, r3
 801105c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8011060:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 8011064:	f7fe ff99 	bl	800ff9a <lv_color_mix>
 8011068:	4603      	mov	r3, r0
 801106a:	843b      	strh	r3, [r7, #32]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 801106c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011070:	461a      	mov	r2, r3
 8011072:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011076:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 801107a:	f7fe ff8e 	bl	800ff9a <lv_color_mix>
 801107e:	4603      	mov	r3, r0
 8011080:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 8011082:	2300      	movs	r3, #0
 8011084:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011088:	e136      	b.n	80112f8 <lv_draw_rect_main_corner+0xefe>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801108a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 801108e:	f9b7 107a 	ldrsh.w	r1, [r7, #122]	; 0x7a
 8011092:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8011096:	4618      	mov	r0, r3
 8011098:	f7fa fe66 	bl	800bd68 <lv_draw_aa_get_opa>
 801109c:	4603      	mov	r3, r0
 801109e:	461a      	mov	r2, r3
 80110a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80110a4:	1a9b      	subs	r3, r3, r2
 80110a6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80110aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	4413      	add	r3, r2
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80110be:	4413      	add	r3, r2
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	b218      	sxth	r0, r3
 80110c4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	4413      	add	r3, r2
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	3301      	adds	r3, #1
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	b219      	sxth	r1, r3
 80110da:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110e2:	68ba      	ldr	r2, [r7, #8]
 80110e4:	f7fb fb67 	bl	800c7b6 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80110e8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	b29b      	uxth	r3, r3
 8011100:	b218      	sxth	r0, r3
 8011102:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8011106:	b29a      	uxth	r2, r3
 8011108:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801110c:	b29b      	uxth	r3, r3
 801110e:	4413      	add	r3, r2
 8011110:	b29b      	uxth	r3, r3
 8011112:	3301      	adds	r3, #1
 8011114:	b29b      	uxth	r3, r3
 8011116:	b219      	sxth	r1, r3
 8011118:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011120:	68ba      	ldr	r2, [r7, #8]
 8011122:	f7fb fb48 	bl	800c7b6 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8011126:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801112a:	b29a      	uxth	r2, r3
 801112c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011130:	b29b      	uxth	r3, r3
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	b29a      	uxth	r2, r3
 8011136:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	b29b      	uxth	r3, r3
 801113e:	b218      	sxth	r0, r3
 8011140:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8011144:	b29a      	uxth	r2, r3
 8011146:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801114a:	b29b      	uxth	r3, r3
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	b29b      	uxth	r3, r3
 8011150:	3b01      	subs	r3, #1
 8011152:	b29b      	uxth	r3, r3
 8011154:	b219      	sxth	r1, r3
 8011156:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	8c3b      	ldrh	r3, [r7, #32]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	f7fb fb29 	bl	800c7b6 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8011164:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8011168:	b29a      	uxth	r2, r3
 801116a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801116e:	b29b      	uxth	r3, r3
 8011170:	4413      	add	r3, r2
 8011172:	b29a      	uxth	r2, r3
 8011174:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011178:	4413      	add	r3, r2
 801117a:	b29b      	uxth	r3, r3
 801117c:	b218      	sxth	r0, r3
 801117e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8011182:	b29a      	uxth	r2, r3
 8011184:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011188:	b29b      	uxth	r3, r3
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	b29b      	uxth	r3, r3
 801118e:	3b01      	subs	r3, #1
 8011190:	b29b      	uxth	r3, r3
 8011192:	b219      	sxth	r1, r3
 8011194:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	8c3b      	ldrh	r3, [r7, #32]
 801119c:	68ba      	ldr	r2, [r7, #8]
 801119e:	f7fb fb0a 	bl	800c7b6 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);

            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80111a2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80111a6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80111aa:	1ad2      	subs	r2, r2, r3
 80111ac:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80111b0:	4413      	add	r3, r2
 80111b2:	461a      	mov	r2, r3
 80111b4:	4613      	mov	r3, r2
 80111b6:	021b      	lsls	r3, r3, #8
 80111b8:	1a9a      	subs	r2, r3, r2
 80111ba:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80111be:	fbb2 f3f3 	udiv	r3, r2, r3
 80111c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80111c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80111ca:	461a      	mov	r2, r3
 80111cc:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80111d0:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80111d4:	f7fe fee1 	bl	800ff9a <lv_color_mix>
 80111d8:	4603      	mov	r3, r0
 80111da:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 80111dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	4413      	add	r3, r2
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	3301      	adds	r3, #1
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	b218      	sxth	r0, r3
 80111f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	4413      	add	r3, r2
 8011200:	b29a      	uxth	r2, r3
 8011202:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011206:	4413      	add	r3, r2
 8011208:	b29b      	uxth	r3, r3
 801120a:	b219      	sxth	r1, r3
 801120c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	8bbb      	ldrh	r3, [r7, #28]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	f7fb face 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 801121a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801121e:	b29a      	uxth	r2, r3
 8011220:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011224:	b29b      	uxth	r3, r3
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	b29b      	uxth	r3, r3
 801122a:	3b01      	subs	r3, #1
 801122c:	b29b      	uxth	r3, r3
 801122e:	b218      	sxth	r0, r3
 8011230:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8011234:	b29a      	uxth	r2, r3
 8011236:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801123a:	b29b      	uxth	r3, r3
 801123c:	4413      	add	r3, r2
 801123e:	b29a      	uxth	r2, r3
 8011240:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011244:	4413      	add	r3, r2
 8011246:	b29b      	uxth	r3, r3
 8011248:	b219      	sxth	r1, r3
 801124a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	8bbb      	ldrh	r3, [r7, #28]
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	f7fb faaf 	bl	800c7b6 <lv_draw_px>
                       aa_opa);

            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8011258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801125c:	461a      	mov	r2, r3
 801125e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8011262:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 8011266:	f7fe fe98 	bl	800ff9a <lv_color_mix>
 801126a:	4603      	mov	r3, r0
 801126c:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 801126e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8011272:	b29a      	uxth	r2, r3
 8011274:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011278:	b29b      	uxth	r3, r3
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	b29b      	uxth	r3, r3
 801127e:	3b01      	subs	r3, #1
 8011280:	b29b      	uxth	r3, r3
 8011282:	b218      	sxth	r0, r3
 8011284:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8011288:	b29a      	uxth	r2, r3
 801128a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801128e:	b29b      	uxth	r3, r3
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	b29a      	uxth	r2, r3
 8011294:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	b29b      	uxth	r3, r3
 801129c:	b219      	sxth	r1, r3
 801129e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	8bbb      	ldrh	r3, [r7, #28]
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	f7fb fa85 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 80112ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	4413      	add	r3, r2
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	3301      	adds	r3, #1
 80112be:	b29b      	uxth	r3, r3
 80112c0:	b218      	sxth	r0, r3
 80112c2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	b29b      	uxth	r3, r3
 80112da:	b219      	sxth	r1, r3
 80112dc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	8bbb      	ldrh	r3, [r7, #28]
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	f7fb fa66 	bl	800c7b6 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 80112ea:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80112ee:	b29b      	uxth	r3, r3
 80112f0:	3301      	adds	r3, #1
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80112f8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 80112fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8011300:	429a      	cmp	r2, r3
 8011302:	f6ff aec2 	blt.w	801108a <lv_draw_rect_main_corner+0xc90>
                       aa_opa);
        }

        /*In some cases the last pixel is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8011306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801130a:	461a      	mov	r2, r3
 801130c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011316:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801131a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801131e:	429a      	cmp	r2, r3
 8011320:	f040 8090 	bne.w	8011444 <lv_draw_rect_main_corner+0x104a>
            aa_p.x = out_x_last;
 8011324:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011328:	82bb      	strh	r3, [r7, #20]
            aa_p.y = out_x_last;
 801132a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801132e:	82fb      	strh	r3, [r7, #22]

            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8011330:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8011334:	4613      	mov	r3, r2
 8011336:	021b      	lsls	r3, r3, #8
 8011338:	1a9a      	subs	r2, r3, r2
 801133a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011346:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801134a:	461a      	mov	r2, r3
 801134c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8011350:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 8011354:	f7fe fe21 	bl	800ff9a <lv_color_mix>
 8011358:	4603      	mov	r3, r0
 801135a:	84bb      	strh	r3, [r7, #36]	; 0x24
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 801135c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011360:	461a      	mov	r2, r3
 8011362:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011366:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 801136a:	f7fe fe16 	bl	800ff9a <lv_color_mix>
 801136e:	4603      	mov	r3, r0
 8011370:	843b      	strh	r3, [r7, #32]

            lv_opa_t aa_opa = opa >> 1;
 8011372:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011376:	085b      	lsrs	r3, r3, #1
 8011378:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 801137c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011380:	b29a      	uxth	r2, r3
 8011382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011386:	b29b      	uxth	r3, r3
 8011388:	4413      	add	r3, r2
 801138a:	b29b      	uxth	r3, r3
 801138c:	b218      	sxth	r0, r3
 801138e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011392:	b29a      	uxth	r2, r3
 8011394:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011398:	b29b      	uxth	r3, r3
 801139a:	4413      	add	r3, r2
 801139c:	b29b      	uxth	r3, r3
 801139e:	b219      	sxth	r1, r3
 80113a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	8c3b      	ldrh	r3, [r7, #32]
 80113a8:	68ba      	ldr	r2, [r7, #8]
 80113aa:	f7fb fa04 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 80113ae:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	b29b      	uxth	r3, r3
 80113be:	b218      	sxth	r0, r3
 80113c0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4413      	add	r3, r2
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	b219      	sxth	r1, r3
 80113d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	8c3b      	ldrh	r3, [r7, #32]
 80113da:	68ba      	ldr	r2, [r7, #8]
 80113dc:	f7fb f9eb 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 80113e0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	1ad3      	subs	r3, r2, r3
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	b218      	sxth	r0, r3
 80113f2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	b29b      	uxth	r3, r3
 8011402:	b219      	sxth	r1, r3
 8011404:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	f7fb f9d2 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8011412:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8011416:	b29a      	uxth	r2, r3
 8011418:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801141c:	b29b      	uxth	r3, r3
 801141e:	4413      	add	r3, r2
 8011420:	b29b      	uxth	r3, r3
 8011422:	b218      	sxth	r0, r3
 8011424:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8011428:	b29a      	uxth	r2, r3
 801142a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801142e:	b29b      	uxth	r3, r3
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	b29b      	uxth	r3, r3
 8011434:	b219      	sxth	r1, r3
 8011436:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	f7fb f9b9 	bl	800c7b6 <lv_draw_px>
                       aa_opa);
        }
    }
#endif
}
 8011444:	bf00      	nop
 8011446:	3788      	adds	r7, #136	; 0x88
 8011448:	46bd      	mov	sp, r7
 801144a:	bdb0      	pop	{r4, r5, r7, pc}

0801144c <lv_draw_rect_border_straight>:
 * @param rstyle pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         lv_opa_t opa_scale)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b08c      	sub	sp, #48	; 0x30
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
 8011458:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011460:	857b      	strh	r3, [r7, #42]	; 0x2a
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011462:	f7f9 fcbd 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8011466:	4603      	mov	r3, r0
 8011468:	4618      	mov	r0, r3
 801146a:	f004 fb89 	bl	8015b80 <lv_disp_get_antialiasing>
 801146e:	4603      	mov	r3, r0
 8011470:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    lv_coord_t width  = lv_area_get_width(coords);
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f7fe fe2e 	bl	80100d6 <lv_area_get_width>
 801147a:	4603      	mov	r3, r0
 801147c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t height = lv_area_get_height(coords);
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f7fe fe40 	bl	8010104 <lv_area_get_height>
 8011484:	4603      	mov	r3, r0
 8011486:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t bwidth = style->body.border.width;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	899b      	ldrh	r3, [r3, #12]
 801148c:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 801148e:	78fb      	ldrb	r3, [r7, #3]
 8011490:	2bff      	cmp	r3, #255	; 0xff
 8011492:	d102      	bne.n	801149a <lv_draw_rect_border_straight+0x4e>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7bdb      	ldrb	r3, [r3, #15]
 8011498:	e00a      	b.n	80114b0 <lv_draw_rect_border_straight+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	7bdb      	ldrb	r3, [r3, #15]
 801149e:	b29a      	uxth	r2, r3
 80114a0:	78fb      	ldrb	r3, [r7, #3]
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	fb12 f303 	smulbb	r3, r2, r3
 80114a8:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80114aa:	0a1b      	lsrs	r3, r3, #8
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    lv_border_part_t part = style->body.border.part;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	7b9b      	ldrb	r3, [r3, #14]
 80114b8:	f887 3020 	strb.w	r3, [r7, #32]
    lv_color_t color      = style->body.border.color;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	895b      	ldrh	r3, [r3, #10]
 80114c0:	83bb      	strh	r3, [r7, #28]
    lv_area_t work_area;
    lv_coord_t length_corr = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t corner_size = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*the 0 px border width drawn as 1 px, so decrement the b_width*/
    bwidth--;
 80114ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	3b01      	subs	r3, #1
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	847b      	strh	r3, [r7, #34]	; 0x22

    radius = lv_draw_cont_radius_corr(radius, width, height);
 80114d6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80114da:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 80114de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114e0:	4618      	mov	r0, r3
 80114e2:	f002 fc9f 	bl	8013e24 <lv_draw_cont_radius_corr>
 80114e6:	4603      	mov	r3, r0
 80114e8:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(radius < bwidth) {
 80114ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80114ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114f0:	429a      	cmp	r2, r3
 80114f2:	da0c      	bge.n	801150e <lv_draw_rect_border_straight+0xc2>
        length_corr = bwidth - radius - aa;
 80114f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011500:	b29b      	uxth	r3, r3
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	b29b      	uxth	r3, r3
 8011506:	85fb      	strh	r3, [r7, #46]	; 0x2e
        corner_size = bwidth;
 8011508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801150a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801150c:	e006      	b.n	801151c <lv_draw_rect_border_straight+0xd0>
    } else {
        corner_size = radius + aa;
 801150e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011512:	b29a      	uxth	r2, r3
 8011514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011516:	4413      	add	r3, r2
 8011518:	b29b      	uxth	r3, r3
 801151a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    /*If radius == 0 is a special case*/
    if(style->body.radius == 0) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011522:	2b00      	cmp	r3, #0
 8011524:	f040 80ca 	bne.w	80116bc <lv_draw_rect_border_straight+0x270>
        /*Left top corner*/
        if(part & LV_BORDER_TOP) {
 8011528:	f897 3020 	ldrb.w	r3, [r7, #32]
 801152c:	f003 0302 	and.w	r3, r3, #2
 8011530:	2b00      	cmp	r3, #0
 8011532:	d01c      	beq.n	801156e <lv_draw_rect_border_straight+0x122>
            work_area.x1 = coords->x1;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801153a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011542:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801154a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011552:	b29a      	uxth	r2, r3
 8011554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011556:	4413      	add	r3, r2
 8011558:	b29b      	uxth	r3, r3
 801155a:	b21b      	sxth	r3, r3
 801155c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 801155e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011562:	f107 0014 	add.w	r0, r7, #20
 8011566:	8bba      	ldrh	r2, [r7, #28]
 8011568:	68b9      	ldr	r1, [r7, #8]
 801156a:	f7fb f9bc 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & LV_BORDER_RIGHT) {
 801156e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011572:	f003 0308 	and.w	r3, r3, #8
 8011576:	2b00      	cmp	r3, #0
 8011578:	d03a      	beq.n	80115f0 <lv_draw_rect_border_straight+0x1a4>
            work_area.x1 = coords->x2 - bwidth;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011580:	b29a      	uxth	r2, r3
 8011582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	b29b      	uxth	r3, r3
 8011588:	b21b      	sxth	r3, r3
 801158a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011592:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801159a:	b29a      	uxth	r2, r3
 801159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115a0:	f003 0302 	and.w	r3, r3, #2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d003      	beq.n	80115b0 <lv_draw_rect_border_straight+0x164>
 80115a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115aa:	3301      	adds	r3, #1
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	e000      	b.n	80115b2 <lv_draw_rect_border_straight+0x166>
 80115b0:	2300      	movs	r3, #0
 80115b2:	4413      	add	r3, r2
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	b21b      	sxth	r3, r3
 80115b8:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d003      	beq.n	80115d6 <lv_draw_rect_border_straight+0x18a>
 80115ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115d0:	3301      	adds	r3, #1
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	e000      	b.n	80115d8 <lv_draw_rect_border_straight+0x18c>
 80115d6:	2300      	movs	r3, #0
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	b29b      	uxth	r3, r3
 80115dc:	b21b      	sxth	r3, r3
 80115de:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80115e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80115e4:	f107 0014 	add.w	r0, r7, #20
 80115e8:	8bba      	ldrh	r2, [r7, #28]
 80115ea:	68b9      	ldr	r1, [r7, #8]
 80115ec:	f7fb f97b 	bl	800c8e6 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & LV_BORDER_LEFT) {
 80115f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115f4:	f003 0304 	and.w	r3, r3, #4
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d03a      	beq.n	8011672 <lv_draw_rect_border_straight+0x226>
            work_area.x1 = coords->x1;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011602:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + bwidth;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f9b3 3000 	ldrsh.w	r3, [r3]
 801160a:	b29a      	uxth	r2, r3
 801160c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801160e:	4413      	add	r3, r2
 8011610:	b29b      	uxth	r3, r3
 8011612:	b21b      	sxth	r3, r3
 8011614:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801161c:	b29a      	uxth	r2, r3
 801161e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011622:	f003 0302 	and.w	r3, r3, #2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <lv_draw_rect_border_straight+0x1e6>
 801162a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801162c:	3301      	adds	r3, #1
 801162e:	b29b      	uxth	r3, r3
 8011630:	e000      	b.n	8011634 <lv_draw_rect_border_straight+0x1e8>
 8011632:	2300      	movs	r3, #0
 8011634:	4413      	add	r3, r2
 8011636:	b29b      	uxth	r3, r3
 8011638:	b21b      	sxth	r3, r3
 801163a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011642:	b29a      	uxth	r2, r3
 8011644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011648:	f003 0301 	and.w	r3, r3, #1
 801164c:	2b00      	cmp	r3, #0
 801164e:	d003      	beq.n	8011658 <lv_draw_rect_border_straight+0x20c>
 8011650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011652:	3301      	adds	r3, #1
 8011654:	b29b      	uxth	r3, r3
 8011656:	e000      	b.n	801165a <lv_draw_rect_border_straight+0x20e>
 8011658:	2300      	movs	r3, #0
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	b29b      	uxth	r3, r3
 801165e:	b21b      	sxth	r3, r3
 8011660:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011662:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011666:	f107 0014 	add.w	r0, r7, #20
 801166a:	8bba      	ldrh	r2, [r7, #28]
 801166c:	68b9      	ldr	r1, [r7, #8]
 801166e:	f7fb f93a 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & LV_BORDER_BOTTOM) {
 8011672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	f000 828f 	beq.w	8011b9e <lv_draw_rect_border_straight+0x752>
            work_area.x1 = coords->x1;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011686:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801168e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011696:	b29a      	uxth	r2, r3
 8011698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	b29b      	uxth	r3, r3
 801169e:	b21b      	sxth	r3, r3
 80116a0:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80116a8:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80116aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80116ae:	f107 0014 	add.w	r0, r7, #20
 80116b2:	8bba      	ldrh	r2, [r7, #28]
 80116b4:	68b9      	ldr	r1, [r7, #8]
 80116b6:	f7fb f916 	bl	800c8e6 <lv_draw_fill>
 80116ba:	e271      	b.n	8011ba0 <lv_draw_rect_border_straight+0x754>
        }
        return;
    }

    /* Modify the corner_size if corner is drawn */
    corner_size++;
 80116bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	3301      	adds	r3, #1
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*Depending one which part's are drawn modify the area lengths */
    if(part & LV_BORDER_TOP)
 80116c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80116cc:	f003 0302 	and.w	r3, r3, #2
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <lv_draw_rect_border_straight+0x29c>
        work_area.y1 = coords->y1 + corner_size;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80116da:	b29a      	uxth	r2, r3
 80116dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116de:	4413      	add	r3, r2
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	b21b      	sxth	r3, r3
 80116e4:	82fb      	strh	r3, [r7, #22]
 80116e6:	e008      	b.n	80116fa <lv_draw_rect_border_straight+0x2ae>
    else
        work_area.y1 = coords->y1 + radius;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116f2:	4413      	add	r3, r2
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	b21b      	sxth	r3, r3
 80116f8:	82fb      	strh	r3, [r7, #22]

    if(part & LV_BORDER_BOTTOM)
 80116fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80116fe:	f003 0301 	and.w	r3, r3, #1
 8011702:	2b00      	cmp	r3, #0
 8011704:	d009      	beq.n	801171a <lv_draw_rect_border_straight+0x2ce>
        work_area.y2 = coords->y2 - corner_size;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801170c:	b29a      	uxth	r2, r3
 801170e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	b29b      	uxth	r3, r3
 8011714:	b21b      	sxth	r3, r3
 8011716:	837b      	strh	r3, [r7, #26]
 8011718:	e008      	b.n	801172c <lv_draw_rect_border_straight+0x2e0>
    else
        work_area.y2 = coords->y2 - radius;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011720:	b29a      	uxth	r2, r3
 8011722:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011724:	1ad3      	subs	r3, r2, r3
 8011726:	b29b      	uxth	r3, r3
 8011728:	b21b      	sxth	r3, r3
 801172a:	837b      	strh	r3, [r7, #26]

    /*Left border*/
    if(part & LV_BORDER_LEFT) {
 801172c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011730:	f003 0304 	and.w	r3, r3, #4
 8011734:	2b00      	cmp	r3, #0
 8011736:	d013      	beq.n	8011760 <lv_draw_rect_border_straight+0x314>
        work_area.x1 = coords->x1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801173e:	82bb      	strh	r3, [r7, #20]
        work_area.x2 = work_area.x1 + bwidth;
 8011740:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011744:	b29a      	uxth	r2, r3
 8011746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011748:	4413      	add	r3, r2
 801174a:	b29b      	uxth	r3, r3
 801174c:	b21b      	sxth	r3, r3
 801174e:	833b      	strh	r3, [r7, #24]
        lv_draw_fill(&work_area, mask, color, opa);
 8011750:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011754:	f107 0014 	add.w	r0, r7, #20
 8011758:	8bba      	ldrh	r2, [r7, #28]
 801175a:	68b9      	ldr	r1, [r7, #8]
 801175c:	f7fb f8c3 	bl	800c8e6 <lv_draw_fill>
    }

    /*Right border*/
    if(part & LV_BORDER_RIGHT) {
 8011760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011764:	f003 0308 	and.w	r3, r3, #8
 8011768:	2b00      	cmp	r3, #0
 801176a:	d013      	beq.n	8011794 <lv_draw_rect_border_straight+0x348>
        work_area.x2 = coords->x2;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011772:	833b      	strh	r3, [r7, #24]
        work_area.x1 = work_area.x2 - bwidth;
 8011774:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011778:	b29a      	uxth	r2, r3
 801177a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	b29b      	uxth	r3, r3
 8011780:	b21b      	sxth	r3, r3
 8011782:	82bb      	strh	r3, [r7, #20]
        lv_draw_fill(&work_area, mask, color, opa);
 8011784:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011788:	f107 0014 	add.w	r0, r7, #20
 801178c:	8bba      	ldrh	r2, [r7, #28]
 801178e:	68b9      	ldr	r1, [r7, #8]
 8011790:	f7fb f8a9 	bl	800c8e6 <lv_draw_fill>
    }

    work_area.x1 = coords->x1 + corner_size - length_corr;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f9b3 3000 	ldrsh.w	r3, [r3]
 801179a:	b29a      	uxth	r2, r3
 801179c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801179e:	4413      	add	r3, r2
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	b21b      	sxth	r3, r3
 80117aa:	82bb      	strh	r3, [r7, #20]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117bc:	4413      	add	r3, r2
 80117be:	b29b      	uxth	r3, r3
 80117c0:	b21b      	sxth	r3, r3
 80117c2:	833b      	strh	r3, [r7, #24]

    /*Upper border*/
    if(part & LV_BORDER_TOP) {
 80117c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117c8:	f003 0302 	and.w	r3, r3, #2
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d014      	beq.n	80117fa <lv_draw_rect_border_straight+0x3ae>
        work_area.y1 = coords->y1;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117d6:	82fb      	strh	r3, [r7, #22]
        work_area.y2 = coords->y1 + bwidth;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117de:	b29a      	uxth	r2, r3
 80117e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117e2:	4413      	add	r3, r2
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	b21b      	sxth	r3, r3
 80117e8:	837b      	strh	r3, [r7, #26]
        lv_draw_fill(&work_area, mask, color, opa);
 80117ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80117ee:	f107 0014 	add.w	r0, r7, #20
 80117f2:	8bba      	ldrh	r2, [r7, #28]
 80117f4:	68b9      	ldr	r1, [r7, #8]
 80117f6:	f7fb f876 	bl	800c8e6 <lv_draw_fill>
    }

    /*Lower border*/
    if(part & LV_BORDER_BOTTOM) {
 80117fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117fe:	f003 0301 	and.w	r3, r3, #1
 8011802:	2b00      	cmp	r3, #0
 8011804:	d013      	beq.n	801182e <lv_draw_rect_border_straight+0x3e2>
        work_area.y2 = coords->y2;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801180c:	837b      	strh	r3, [r7, #26]
        work_area.y1 = work_area.y2 - bwidth;
 801180e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011812:	b29a      	uxth	r2, r3
 8011814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011816:	1ad3      	subs	r3, r2, r3
 8011818:	b29b      	uxth	r3, r3
 801181a:	b21b      	sxth	r3, r3
 801181c:	82fb      	strh	r3, [r7, #22]
        lv_draw_fill(&work_area, mask, color, opa);
 801181e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011822:	f107 0014 	add.w	r0, r7, #20
 8011826:	8bba      	ldrh	r2, [r7, #28]
 8011828:	68b9      	ldr	r1, [r7, #8]
 801182a:	f7fb f85c 	bl	800c8e6 <lv_draw_fill>
    }

    /*Draw the a remaining rectangles if the radius is smaller then bwidth */
    if(length_corr != 0) {
 801182e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8011832:	2b00      	cmp	r3, #0
 8011834:	f000 80fc 	beq.w	8011a30 <lv_draw_rect_border_straight+0x5e4>
        /*Left top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8011838:	f897 3020 	ldrb.w	r3, [r7, #32]
 801183c:	f003 0302 	and.w	r3, r3, #2
 8011840:	2b00      	cmp	r3, #0
 8011842:	d038      	beq.n	80118b6 <lv_draw_rect_border_straight+0x46a>
 8011844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d032      	beq.n	80118b6 <lv_draw_rect_border_straight+0x46a>
            work_area.x1 = coords->x1;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011856:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801185e:	b29a      	uxth	r2, r3
 8011860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011862:	4413      	add	r3, r2
 8011864:	b29a      	uxth	r2, r3
 8011866:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801186a:	b29b      	uxth	r3, r3
 801186c:	4413      	add	r3, r2
 801186e:	b29b      	uxth	r3, r3
 8011870:	b21b      	sxth	r3, r3
 8011872:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801187a:	b29a      	uxth	r2, r3
 801187c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801187e:	4413      	add	r3, r2
 8011880:	b29a      	uxth	r2, r3
 8011882:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011886:	b29b      	uxth	r3, r3
 8011888:	4413      	add	r3, r2
 801188a:	b29b      	uxth	r3, r3
 801188c:	3301      	adds	r3, #1
 801188e:	b29b      	uxth	r3, r3
 8011890:	b21b      	sxth	r3, r3
 8011892:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801189a:	b29a      	uxth	r2, r3
 801189c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801189e:	4413      	add	r3, r2
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	b21b      	sxth	r3, r3
 80118a4:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80118a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80118aa:	f107 0014 	add.w	r0, r7, #20
 80118ae:	8bba      	ldrh	r2, [r7, #28]
 80118b0:	68b9      	ldr	r1, [r7, #8]
 80118b2:	f7fb f818 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80118b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118ba:	f003 0302 	and.w	r3, r3, #2
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d038      	beq.n	8011934 <lv_draw_rect_border_straight+0x4e8>
 80118c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118c6:	f003 0308 	and.w	r3, r3, #8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d032      	beq.n	8011934 <lv_draw_rect_border_straight+0x4e8>
            work_area.x1 = coords->x2 - radius - aa;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b29a      	uxth	r2, r3
 80118dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	b21b      	sxth	r3, r3
 80118e8:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80118f0:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118fc:	4413      	add	r3, r2
 80118fe:	b29a      	uxth	r2, r3
 8011900:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011904:	b29b      	uxth	r3, r3
 8011906:	4413      	add	r3, r2
 8011908:	b29b      	uxth	r3, r3
 801190a:	3301      	adds	r3, #1
 801190c:	b29b      	uxth	r3, r3
 801190e:	b21b      	sxth	r3, r3
 8011910:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011918:	b29a      	uxth	r2, r3
 801191a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801191c:	4413      	add	r3, r2
 801191e:	b29b      	uxth	r3, r3
 8011920:	b21b      	sxth	r3, r3
 8011922:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011924:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011928:	f107 0014 	add.w	r0, r7, #20
 801192c:	8bba      	ldrh	r2, [r7, #28]
 801192e:	68b9      	ldr	r1, [r7, #8]
 8011930:	f7fa ffd9 	bl	800c8e6 <lv_draw_fill>
        }

        /*Left bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	2b00      	cmp	r3, #0
 801193e:	d038      	beq.n	80119b2 <lv_draw_rect_border_straight+0x566>
 8011940:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011944:	f003 0304 	and.w	r3, r3, #4
 8011948:	2b00      	cmp	r3, #0
 801194a:	d032      	beq.n	80119b2 <lv_draw_rect_border_straight+0x566>
            work_area.x1 = coords->x1;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011952:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f9b3 3000 	ldrsh.w	r3, [r3]
 801195a:	b29a      	uxth	r2, r3
 801195c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801195e:	4413      	add	r3, r2
 8011960:	b29a      	uxth	r2, r3
 8011962:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011966:	b29b      	uxth	r3, r3
 8011968:	4413      	add	r3, r2
 801196a:	b29b      	uxth	r3, r3
 801196c:	b21b      	sxth	r3, r3
 801196e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011976:	b29a      	uxth	r2, r3
 8011978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801197a:	1ad3      	subs	r3, r2, r3
 801197c:	b29b      	uxth	r3, r3
 801197e:	b21b      	sxth	r3, r3
 8011980:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011988:	b29a      	uxth	r2, r3
 801198a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801198c:	1ad3      	subs	r3, r2, r3
 801198e:	b29a      	uxth	r2, r3
 8011990:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011994:	b29b      	uxth	r3, r3
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	b29b      	uxth	r3, r3
 801199a:	3b01      	subs	r3, #1
 801199c:	b29b      	uxth	r3, r3
 801199e:	b21b      	sxth	r3, r3
 80119a0:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80119a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80119a6:	f107 0014 	add.w	r0, r7, #20
 80119aa:	8bba      	ldrh	r2, [r7, #28]
 80119ac:	68b9      	ldr	r1, [r7, #8]
 80119ae:	f7fa ff9a 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80119b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80119b6:	f003 0301 	and.w	r3, r3, #1
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d038      	beq.n	8011a30 <lv_draw_rect_border_straight+0x5e4>
 80119be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80119c2:	f003 0308 	and.w	r3, r3, #8
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d032      	beq.n	8011a30 <lv_draw_rect_border_straight+0x5e4>
            work_area.x1 = coords->x2 - radius - aa;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80119dc:	b29b      	uxth	r3, r3
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	b21b      	sxth	r3, r3
 80119e4:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80119ec:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	b21b      	sxth	r3, r3
 80119fe:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011a06:	b29a      	uxth	r2, r3
 8011a08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	1ad3      	subs	r3, r2, r3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	b21b      	sxth	r3, r3
 8011a1e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011a20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a24:	f107 0014 	add.w	r0, r7, #20
 8011a28:	8bba      	ldrh	r2, [r7, #28]
 8011a2a:	68b9      	ldr	r1, [r7, #8]
 8011a2c:	f7fa ff5b 	bl	800c8e6 <lv_draw_fill>
        }
    }

    /*If radius == 0 one px on the corners are not drawn by main drawer*/
    if(style->body.radius == 0) {
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f040 80b2 	bne.w	8011ba0 <lv_draw_rect_border_straight+0x754>
        /*Left top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 8011a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a40:	f003 0306 	and.w	r3, r3, #6
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d025      	beq.n	8011a94 <lv_draw_rect_border_straight+0x648>
            work_area.x1 = coords->x1;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a4e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	4413      	add	r3, r2
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	b21b      	sxth	r3, r3
 8011a64:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a6c:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	4413      	add	r3, r2
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	b21b      	sxth	r3, r3
 8011a82:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011a84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a88:	f107 0014 	add.w	r0, r7, #20
 8011a8c:	8bba      	ldrh	r2, [r7, #28]
 8011a8e:	68b9      	ldr	r1, [r7, #8]
 8011a90:	f7fa ff29 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 8011a94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a98:	f003 030a 	and.w	r3, r3, #10
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d025      	beq.n	8011aec <lv_draw_rect_border_straight+0x6a0>
            work_area.x1 = coords->x2 - aa;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	b21b      	sxth	r3, r3
 8011ab4:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011abc:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ac4:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	4413      	add	r3, r2
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	b21b      	sxth	r3, r3
 8011ada:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011adc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011ae0:	f107 0014 	add.w	r0, r7, #20
 8011ae4:	8bba      	ldrh	r2, [r7, #28]
 8011ae6:	68b9      	ldr	r1, [r7, #8]
 8011ae8:	f7fa fefd 	bl	800c8e6 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 8011aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011af0:	f003 0305 	and.w	r3, r3, #5
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d025      	beq.n	8011b44 <lv_draw_rect_border_straight+0x6f8>
            work_area.x1 = coords->x1;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011afe:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	4413      	add	r3, r2
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	b21b      	sxth	r3, r3
 8011b14:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	b21b      	sxth	r3, r3
 8011b2a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011b32:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011b34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b38:	f107 0014 	add.w	r0, r7, #20
 8011b3c:	8bba      	ldrh	r2, [r7, #28]
 8011b3e:	68b9      	ldr	r1, [r7, #8]
 8011b40:	f7fa fed1 	bl	800c8e6 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8011b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b48:	f003 0309 	and.w	r3, r3, #9
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d027      	beq.n	8011ba0 <lv_draw_rect_border_straight+0x754>
            work_area.x1 = coords->x2 - aa;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	1ad3      	subs	r3, r2, r3
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	b21b      	sxth	r3, r3
 8011b64:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011b6c:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	b21b      	sxth	r3, r3
 8011b82:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011b8a:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011b8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b90:	f107 0014 	add.w	r0, r7, #20
 8011b94:	8bba      	ldrh	r2, [r7, #28]
 8011b96:	68b9      	ldr	r1, [r7, #8]
 8011b98:	f7fa fea5 	bl	800c8e6 <lv_draw_fill>
 8011b9c:	e000      	b.n	8011ba0 <lv_draw_rect_border_straight+0x754>
        return;
 8011b9e:	bf00      	nop
        }
    }
}
 8011ba0:	3730      	adds	r7, #48	; 0x30
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <lv_draw_rect_border_corner>:
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                       lv_opa_t opa_scale)
{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b0a0      	sub	sp, #128	; 0x80
 8011baa:	af02      	add	r7, sp, #8
 8011bac:	60f8      	str	r0, [r7, #12]
 8011bae:	60b9      	str	r1, [r7, #8]
 8011bb0:	607a      	str	r2, [r7, #4]
 8011bb2:	70fb      	strb	r3, [r7, #3]
    uint16_t radius       = style->body.radius;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011bba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011bbe:	f7f9 f90f 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f003 ffdb 	bl	8015b80 <lv_disp_get_antialiasing>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    lv_coord_t bwidth     = style->body.border.width;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	899b      	ldrh	r3, [r3, #12]
 8011bd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    lv_color_t color      = style->body.border.color;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	895b      	ldrh	r3, [r3, #10]
 8011bdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    lv_border_part_t part = style->body.border.part;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	7b9b      	ldrb	r3, [r3, #14]
 8011be4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011be8:	78fb      	ldrb	r3, [r7, #3]
 8011bea:	2bff      	cmp	r3, #255	; 0xff
 8011bec:	d102      	bne.n	8011bf4 <lv_draw_rect_border_corner+0x4e>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	7bdb      	ldrb	r3, [r3, #15]
 8011bf2:	e00a      	b.n	8011c0a <lv_draw_rect_border_corner+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	7bdb      	ldrb	r3, [r3, #15]
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	78fb      	ldrb	r3, [r7, #3]
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	fb12 f303 	smulbb	r3, r2, r3
 8011c02:	b29b      	uxth	r3, r3
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011c04:	0a1b      	lsrs	r3, r3, #8
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    /*0 px border width drawn as 1 px, so decrement the bwidth*/
    bwidth--;
 8011c0e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	3b01      	subs	r3, #1
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if LV_ANTIALIAS
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011c1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d006      	beq.n	8011c32 <lv_draw_rect_border_corner+0x8c>
 8011c24:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
#endif

    lv_coord_t width  = lv_area_get_width(coords);
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f7fe fa4f 	bl	80100d6 <lv_area_get_width>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    lv_coord_t height = lv_area_get_height(coords);
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f7fe fa60 	bl	8010104 <lv_area_get_height>
 8011c44:	4603      	mov	r3, r0
 8011c46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011c4a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8011c4e:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 8011c52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011c56:	4618      	mov	r0, r3
 8011c58:	f002 f8e4 	bl	8013e24 <lv_draw_cont_radius_corr>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011c6e:	4413      	add	r3, r2
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4413      	add	r3, r2
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	b21b      	sxth	r3, r3
 8011c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lt_origo.y = coords->y1 + radius + aa;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011c8e:	4413      	add	r3, r2
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	4413      	add	r3, r2
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	b21b      	sxth	r3, r3
 8011c9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lb_origo.x = coords->x1 + radius + aa;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011cae:	4413      	add	r3, r2
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	4413      	add	r3, r2
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	b21b      	sxth	r3, r3
 8011cbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lb_origo.y = coords->y2 - radius - aa;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	b21b      	sxth	r3, r3
 8011cdc:	87fb      	strh	r3, [r7, #62]	; 0x3e

    rt_origo.x = coords->x2 - radius - aa;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	b21b      	sxth	r3, r3
 8011cfa:	873b      	strh	r3, [r7, #56]	; 0x38
    rt_origo.y = coords->y1 + radius + aa;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011d08:	4413      	add	r3, r2
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	4413      	add	r3, r2
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	b21b      	sxth	r3, r3
 8011d18:	877b      	strh	r3, [r7, #58]	; 0x3a

    rb_origo.x = coords->x2 - radius - aa;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	b21b      	sxth	r3, r3
 8011d36:	86bb      	strh	r3, [r7, #52]	; 0x34
    rb_origo.y = coords->y2 - radius - aa;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	b21b      	sxth	r3, r3
 8011d54:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_point_t cir_out;
    lv_coord_t tmp_out;
    lv_circ_init(&cir_out, &tmp_out, radius);
 8011d56:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8011d5a:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8011d5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d62:	4618      	mov	r0, r3
 8011d64:	f004 fbd3 	bl	801650e <lv_circ_init>

    lv_point_t cir_in;
    lv_coord_t tmp_in;
    lv_coord_t radius_in = radius - bwidth;
 8011d68:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011d6c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

    if(radius_in < 0) {
 8011d78:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	da02      	bge.n	8011d86 <lv_draw_rect_border_corner+0x1e0>
        radius_in = 0;
 8011d80:	2300      	movs	r3, #0
 8011d82:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    }

    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8011d86:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8011d8a:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8011d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d92:	4618      	mov	r0, r3
 8011d94:	f004 fbbb 	bl	801650e <lv_circ_init>
    lv_coord_t act_w1;
    lv_coord_t act_w2;

#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    lv_coord_t out_y_seg_end   = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t out_x_last      = radius;
 8011da4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011da8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    lv_coord_t in_y_seg_start = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    lv_coord_t in_y_seg_end   = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t in_x_last      = radius - bwidth;
 8011db8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011dbc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#endif

    while(cir_out.y <= cir_out.x) {
 8011dc8:	f000 bd74 	b.w	80128b4 <lv_draw_rect_border_corner+0xd0e>

        /*Calculate the actual width to avoid overwriting pixels*/
        if(cir_in.y < cir_in.x) {
 8011dcc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8011dd0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	da0e      	bge.n	8011df6 <lv_draw_rect_border_corner+0x250>
            act_w1 = cir_out.x - cir_in.x;
 8011dd8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	1ad3      	subs	r3, r2, r3
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1;
 8011dec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011df0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8011df4:	e00f      	b.n	8011e16 <lv_draw_rect_border_corner+0x270>
        } else {
            act_w1 = cir_out.x - cir_out.y;
 8011df6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	1ad3      	subs	r3, r2, r3
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1 - 1;
 8011e0a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011e0e:	3b01      	subs	r3, #1
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

#if LV_ANTIALIAS
        if(aa) {
 8011e16:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 8340 	beq.w	80124a0 <lv_draw_rect_border_corner+0x8fa>
            /*New step in y on the outter circle*/
            if(out_x_last != cir_out.x) {
 8011e20:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e24:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	f000 817b 	beq.w	8012124 <lv_draw_rect_border_corner+0x57e>
                out_y_seg_end       = cir_out.y;
 8011e2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011e30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011e34:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8011e38:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e3c:	1ad3      	subs	r3, r2, r3
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 8011e44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011e48:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 8011e4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e4e:	837b      	strh	r3, [r7, #26]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 8011e50:	2300      	movs	r3, #0
 8011e52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8011e56:	e157      	b.n	8012108 <lv_draw_rect_border_corner+0x562>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8011e58:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	dd0c      	ble.n	8011e7a <lv_draw_rect_border_corner+0x2d4>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8011e60:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8011e64:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 8011e68:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f002 f81b 	bl	8013ea8 <antialias_get_opa_circ>
 8011e72:	4603      	mov	r3, r0
 8011e74:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8011e78:	e00f      	b.n	8011e9a <lv_draw_rect_border_corner+0x2f4>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8011e7a:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8011e7e:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 8011e82:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f9 ff6e 	bl	800bd68 <lv_draw_aa_get_opa>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	461a      	mov	r2, r3
 8011e90:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011e94:	1a9b      	subs	r3, r3, r2
 8011e96:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011e9a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011e9e:	f003 0301 	and.w	r3, r3, #1
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d045      	beq.n	8011f32 <lv_draw_rect_border_corner+0x38c>
 8011ea6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011eaa:	f003 0308 	and.w	r3, r3, #8
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d03f      	beq.n	8011f32 <lv_draw_rect_border_corner+0x38c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011eb2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	4413      	add	r3, r2
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	b218      	sxth	r0, r3
 8011ec8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	4413      	add	r3, r2
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011edc:	4413      	add	r3, r2
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	b219      	sxth	r1, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011ee8:	9200      	str	r2, [sp, #0]
 8011eea:	895b      	ldrh	r3, [r3, #10]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	f7fa fc62 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011ef2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	4413      	add	r3, r2
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011f06:	4413      	add	r3, r2
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	b218      	sxth	r0, r3
 8011f0c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	4413      	add	r3, r2
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	b219      	sxth	r1, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011f28:	9200      	str	r2, [sp, #0]
 8011f2a:	895b      	ldrh	r3, [r3, #10]
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	f7fa fc42 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011f32:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d045      	beq.n	8011fca <lv_draw_rect_border_corner+0x424>
 8011f3e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011f42:	f003 0304 	and.w	r3, r3, #4
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d03f      	beq.n	8011fca <lv_draw_rect_border_corner+0x424>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8011f4a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	b218      	sxth	r0, r3
 8011f64:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	4413      	add	r3, r2
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	3301      	adds	r3, #1
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	b219      	sxth	r1, r3
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011f80:	9200      	str	r2, [sp, #0]
 8011f82:	895b      	ldrh	r3, [r3, #10]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	f7fa fc16 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8011f8a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	1ad3      	subs	r3, r2, r3
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	b218      	sxth	r0, r3
 8011fa0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	4413      	add	r3, r2
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011fb4:	4413      	add	r3, r2
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	b219      	sxth	r1, r3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011fc0:	9200      	str	r2, [sp, #0]
 8011fc2:	895b      	ldrh	r3, [r3, #10]
 8011fc4:	68ba      	ldr	r2, [r7, #8]
 8011fc6:	f7fa fbf6 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8011fca:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011fce:	f003 0302 	and.w	r3, r3, #2
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d045      	beq.n	8012062 <lv_draw_rect_border_corner+0x4bc>
 8011fd6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011fda:	f003 0304 	and.w	r3, r3, #4
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d03f      	beq.n	8012062 <lv_draw_rect_border_corner+0x4bc>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8011fe2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	1ad3      	subs	r3, r2, r3
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	b218      	sxth	r0, r3
 8011ff8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012002:	b29b      	uxth	r3, r3
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	b29a      	uxth	r2, r3
 8012008:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	b29b      	uxth	r3, r3
 8012010:	b219      	sxth	r1, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8012018:	9200      	str	r2, [sp, #0]
 801201a:	895b      	ldrh	r3, [r3, #10]
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	f7fa fbca 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012022:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012026:	b29a      	uxth	r2, r3
 8012028:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801202c:	b29b      	uxth	r3, r3
 801202e:	1ad3      	subs	r3, r2, r3
 8012030:	b29a      	uxth	r2, r3
 8012032:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012036:	1ad3      	subs	r3, r2, r3
 8012038:	b29b      	uxth	r3, r3
 801203a:	b218      	sxth	r0, r3
 801203c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012040:	b29a      	uxth	r2, r3
 8012042:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012046:	b29b      	uxth	r3, r3
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	b29b      	uxth	r3, r3
 801204c:	3b01      	subs	r3, #1
 801204e:	b29b      	uxth	r3, r3
 8012050:	b219      	sxth	r1, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8012058:	9200      	str	r2, [sp, #0]
 801205a:	895b      	ldrh	r3, [r3, #10]
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	f7fa fbaa 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012062:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012066:	f003 0302 	and.w	r3, r3, #2
 801206a:	2b00      	cmp	r3, #0
 801206c:	d045      	beq.n	80120fa <lv_draw_rect_border_corner+0x554>
 801206e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012072:	f003 0308 	and.w	r3, r3, #8
 8012076:	2b00      	cmp	r3, #0
 8012078:	d03f      	beq.n	80120fa <lv_draw_rect_border_corner+0x554>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 801207a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801207e:	b29a      	uxth	r2, r3
 8012080:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012084:	b29b      	uxth	r3, r3
 8012086:	4413      	add	r3, r2
 8012088:	b29a      	uxth	r2, r3
 801208a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801208e:	4413      	add	r3, r2
 8012090:	b29b      	uxth	r3, r3
 8012092:	b218      	sxth	r0, r3
 8012094:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012098:	b29a      	uxth	r2, r3
 801209a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	3b01      	subs	r3, #1
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	b219      	sxth	r1, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80120b0:	9200      	str	r2, [sp, #0]
 80120b2:	895b      	ldrh	r3, [r3, #10]
 80120b4:	68ba      	ldr	r2, [r7, #8]
 80120b6:	f7fa fb7e 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80120ba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80120be:	b29a      	uxth	r2, r3
 80120c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	4413      	add	r3, r2
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	3301      	adds	r3, #1
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	b218      	sxth	r0, r3
 80120d0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	b29a      	uxth	r2, r3
 80120e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	b219      	sxth	r1, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80120f0:	9200      	str	r2, [sp, #0]
 80120f2:	895b      	ldrh	r3, [r3, #10]
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	f7fa fb5e 	bl	800c7b6 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 80120fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80120fe:	b29b      	uxth	r3, r3
 8012100:	3301      	adds	r3, #1
 8012102:	b29b      	uxth	r3, r3
 8012104:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012108:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801210c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8012110:	429a      	cmp	r2, r3
 8012112:	f6ff aea1 	blt.w	8011e58 <lv_draw_rect_border_corner+0x2b2>
                                   style->body.border.color, aa_opa);
                    }
                }

                out_x_last      = cir_out.x;
 8012116:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                out_y_seg_start = out_y_seg_end;
 801211c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012120:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            }

            /*New step in y on the inner circle*/
            if(in_x_last != cir_in.x) {
 8012124:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012128:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801212c:	429a      	cmp	r2, r3
 801212e:	f000 81b7 	beq.w	80124a0 <lv_draw_rect_border_corner+0x8fa>
                in_y_seg_end        = cir_out.y;
 8012132:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012134:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012138:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801213c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	b29b      	uxth	r3, r3
 8012144:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                lv_point_t aa_p;

                aa_p.x = in_x_last;
 8012148:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801214c:	82bb      	strh	r3, [r7, #20]
                aa_p.y = in_y_seg_start;
 801214e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012152:	82fb      	strh	r3, [r7, #22]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 8012154:	2300      	movs	r3, #0
 8012156:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801215a:	e193      	b.n	8012484 <lv_draw_rect_border_corner+0x8de>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 801215c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012160:	2b01      	cmp	r3, #1
 8012162:	dd10      	ble.n	8012186 <lv_draw_rect_border_corner+0x5e0>
                                                                           on the first segment*/
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8012164:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8012168:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801216c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012170:	4618      	mov	r0, r3
 8012172:	f001 fe99 	bl	8013ea8 <antialias_get_opa_circ>
 8012176:	4603      	mov	r3, r0
 8012178:	461a      	mov	r2, r3
 801217a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 801217e:	1a9b      	subs	r3, r3, r2
 8012180:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8012184:	e00b      	b.n	801219e <lv_draw_rect_border_corner+0x5f8>
                    } else {
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012186:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 801218a:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801218e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012192:	4618      	mov	r0, r3
 8012194:	f7f9 fde8 	bl	800bd68 <lv_draw_aa_get_opa>
 8012198:	4603      	mov	r3, r0
 801219a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801219e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80121a2:	f003 0301 	and.w	r3, r3, #1
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d025      	beq.n	80121f6 <lv_draw_rect_border_corner+0x650>
 80121aa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80121ae:	f003 0308 	and.w	r3, r3, #8
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d01f      	beq.n	80121f6 <lv_draw_rect_border_corner+0x650>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80121b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	4413      	add	r3, r2
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	3b01      	subs	r3, #1
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	b218      	sxth	r0, r3
 80121cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	4413      	add	r3, r2
 80121da:	b29a      	uxth	r2, r3
 80121dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80121e0:	4413      	add	r3, r2
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	b219      	sxth	r1, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80121ec:	9200      	str	r2, [sp, #0]
 80121ee:	895b      	ldrh	r3, [r3, #10]
 80121f0:	68ba      	ldr	r2, [r7, #8]
 80121f2:	f7fa fae0 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80121f6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80121fa:	f003 0301 	and.w	r3, r3, #1
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d025      	beq.n	801224e <lv_draw_rect_border_corner+0x6a8>
 8012202:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012206:	f003 0304 	and.w	r3, r3, #4
 801220a:	2b00      	cmp	r3, #0
 801220c:	d01f      	beq.n	801224e <lv_draw_rect_border_corner+0x6a8>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 801220e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012212:	b29a      	uxth	r2, r3
 8012214:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012218:	b29b      	uxth	r3, r3
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	b29a      	uxth	r2, r3
 801221e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	b29b      	uxth	r3, r3
 8012226:	b218      	sxth	r0, r3
 8012228:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801222c:	b29a      	uxth	r2, r3
 801222e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012232:	b29b      	uxth	r3, r3
 8012234:	4413      	add	r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	3b01      	subs	r3, #1
 801223a:	b29b      	uxth	r3, r3
 801223c:	b219      	sxth	r1, r3
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8012244:	9200      	str	r2, [sp, #0]
 8012246:	895b      	ldrh	r3, [r3, #10]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	f7fa fab4 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801224e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012252:	f003 0302 	and.w	r3, r3, #2
 8012256:	2b00      	cmp	r3, #0
 8012258:	d025      	beq.n	80122a6 <lv_draw_rect_border_corner+0x700>
 801225a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801225e:	f003 0304 	and.w	r3, r3, #4
 8012262:	2b00      	cmp	r3, #0
 8012264:	d01f      	beq.n	80122a6 <lv_draw_rect_border_corner+0x700>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012266:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801226a:	b29a      	uxth	r2, r3
 801226c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012270:	b29b      	uxth	r3, r3
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	b29b      	uxth	r3, r3
 8012276:	3301      	adds	r3, #1
 8012278:	b29b      	uxth	r3, r3
 801227a:	b218      	sxth	r0, r3
 801227c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012280:	b29a      	uxth	r2, r3
 8012282:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012286:	b29b      	uxth	r3, r3
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	b29a      	uxth	r2, r3
 801228c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	b29b      	uxth	r3, r3
 8012294:	b219      	sxth	r1, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801229c:	9200      	str	r2, [sp, #0]
 801229e:	895b      	ldrh	r3, [r3, #10]
 80122a0:	68ba      	ldr	r2, [r7, #8]
 80122a2:	f7fa fa88 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80122a6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80122aa:	f003 0302 	and.w	r3, r3, #2
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d025      	beq.n	80122fe <lv_draw_rect_border_corner+0x758>
 80122b2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80122b6:	f003 0308 	and.w	r3, r3, #8
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d01f      	beq.n	80122fe <lv_draw_rect_border_corner+0x758>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 80122be:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	4413      	add	r3, r2
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80122d2:	4413      	add	r3, r2
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	b218      	sxth	r0, r3
 80122d8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80122dc:	b29a      	uxth	r2, r3
 80122de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	3301      	adds	r3, #1
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	b219      	sxth	r1, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80122f4:	9200      	str	r2, [sp, #0]
 80122f6:	895b      	ldrh	r3, [r3, #10]
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	f7fa fa5c 	bl	800c7b6 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    /*Be sure the pixels on the middle are not drawn twice*/
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 80122fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012302:	1e5a      	subs	r2, r3, #1
 8012304:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012308:	4619      	mov	r1, r3
 801230a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801230e:	440b      	add	r3, r1
 8012310:	429a      	cmp	r2, r3
 8012312:	f000 80b0 	beq.w	8012476 <lv_draw_rect_border_corner+0x8d0>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012316:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801231a:	f003 0301 	and.w	r3, r3, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	d025      	beq.n	801236e <lv_draw_rect_border_corner+0x7c8>
 8012322:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012326:	f003 0308 	and.w	r3, r3, #8
 801232a:	2b00      	cmp	r3, #0
 801232c:	d01f      	beq.n	801236e <lv_draw_rect_border_corner+0x7c8>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 801232e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012332:	b29a      	uxth	r2, r3
 8012334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012338:	b29b      	uxth	r3, r3
 801233a:	4413      	add	r3, r2
 801233c:	b29a      	uxth	r2, r3
 801233e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012342:	4413      	add	r3, r2
 8012344:	b29b      	uxth	r3, r3
 8012346:	b218      	sxth	r0, r3
 8012348:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801234c:	b29a      	uxth	r2, r3
 801234e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012352:	b29b      	uxth	r3, r3
 8012354:	4413      	add	r3, r2
 8012356:	b29b      	uxth	r3, r3
 8012358:	3b01      	subs	r3, #1
 801235a:	b29b      	uxth	r3, r3
 801235c:	b219      	sxth	r1, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8012364:	9200      	str	r2, [sp, #0]
 8012366:	895b      	ldrh	r3, [r3, #10]
 8012368:	68ba      	ldr	r2, [r7, #8]
 801236a:	f7fa fa24 	bl	800c7b6 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801236e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	2b00      	cmp	r3, #0
 8012378:	d025      	beq.n	80123c6 <lv_draw_rect_border_corner+0x820>
 801237a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801237e:	f003 0304 	and.w	r3, r3, #4
 8012382:	2b00      	cmp	r3, #0
 8012384:	d01f      	beq.n	80123c6 <lv_draw_rect_border_corner+0x820>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 8012386:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801238a:	b29a      	uxth	r2, r3
 801238c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012390:	b29b      	uxth	r3, r3
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	b29b      	uxth	r3, r3
 8012396:	3301      	adds	r3, #1
 8012398:	b29b      	uxth	r3, r3
 801239a:	b218      	sxth	r0, r3
 801239c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	4413      	add	r3, r2
 80123aa:	b29a      	uxth	r2, r3
 80123ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80123b0:	4413      	add	r3, r2
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	b219      	sxth	r1, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80123bc:	9200      	str	r2, [sp, #0]
 80123be:	895b      	ldrh	r3, [r3, #10]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	f7fa f9f8 	bl	800c7b6 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80123c6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80123ca:	f003 0302 	and.w	r3, r3, #2
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d025      	beq.n	801241e <lv_draw_rect_border_corner+0x878>
 80123d2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80123d6:	f003 0304 	and.w	r3, r3, #4
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d01f      	beq.n	801241e <lv_draw_rect_border_corner+0x878>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 80123de:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80123f2:	1ad3      	subs	r3, r2, r3
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	b218      	sxth	r0, r3
 80123f8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012402:	b29b      	uxth	r3, r3
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	b29b      	uxth	r3, r3
 8012408:	3301      	adds	r3, #1
 801240a:	b29b      	uxth	r3, r3
 801240c:	b219      	sxth	r1, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8012414:	9200      	str	r2, [sp, #0]
 8012416:	895b      	ldrh	r3, [r3, #10]
 8012418:	68ba      	ldr	r2, [r7, #8]
 801241a:	f7fa f9cc 	bl	800c7b6 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801241e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012422:	f003 0302 	and.w	r3, r3, #2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d025      	beq.n	8012476 <lv_draw_rect_border_corner+0x8d0>
 801242a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801242e:	f003 0308 	and.w	r3, r3, #8
 8012432:	2b00      	cmp	r3, #0
 8012434:	d01f      	beq.n	8012476 <lv_draw_rect_border_corner+0x8d0>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 8012436:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801243a:	b29a      	uxth	r2, r3
 801243c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012440:	b29b      	uxth	r3, r3
 8012442:	4413      	add	r3, r2
 8012444:	b29b      	uxth	r3, r3
 8012446:	3b01      	subs	r3, #1
 8012448:	b29b      	uxth	r3, r3
 801244a:	b218      	sxth	r0, r3
 801244c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012450:	b29a      	uxth	r2, r3
 8012452:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012456:	b29b      	uxth	r3, r3
 8012458:	1ad3      	subs	r3, r2, r3
 801245a:	b29a      	uxth	r2, r3
 801245c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	b29b      	uxth	r3, r3
 8012464:	b219      	sxth	r1, r3
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801246c:	9200      	str	r2, [sp, #0]
 801246e:	895b      	ldrh	r3, [r3, #10]
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	f7fa f9a0 	bl	800c7b6 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 8012476:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801247a:	b29b      	uxth	r3, r3
 801247c:	3301      	adds	r3, #1
 801247e:	b29b      	uxth	r3, r3
 8012480:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012484:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8012488:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801248c:	429a      	cmp	r2, r3
 801248e:	f6ff ae65 	blt.w	801215c <lv_draw_rect_border_corner+0x5b6>
                                       mask, style->body.border.color, aa_opa);
                        }
                    }
                }

                in_x_last      = cir_in.x;
 8012492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012494:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                in_y_seg_start = in_y_seg_end;
 8012498:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801249c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
            }
        }
#endif

        /*Draw the octets to the right bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80124a0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80124a4:	f003 0301 	and.w	r3, r3, #1
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d06f      	beq.n	801258c <lv_draw_rect_border_corner+0x9e6>
 80124ac:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80124b0:	f003 0308 	and.w	r3, r3, #8
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d069      	beq.n	801258c <lv_draw_rect_border_corner+0x9e6>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 80124b8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80124bc:	b29a      	uxth	r2, r3
 80124be:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4413      	add	r3, r2
 80124c6:	b29a      	uxth	r2, r3
 80124c8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	b21b      	sxth	r3, r3
 80124d2:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 80124d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80124d8:	b29a      	uxth	r2, r3
 80124da:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80124de:	b29b      	uxth	r3, r3
 80124e0:	4413      	add	r3, r2
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	b21b      	sxth	r3, r3
 80124e6:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 80124e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	4413      	add	r3, r2
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	b21b      	sxth	r3, r3
 80124fa:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 80124fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012500:	b29a      	uxth	r2, r3
 8012502:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012506:	b29b      	uxth	r3, r3
 8012508:	4413      	add	r3, r2
 801250a:	b29b      	uxth	r3, r3
 801250c:	b21b      	sxth	r3, r3
 801250e:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8012510:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012514:	f107 001c 	add.w	r0, r7, #28
 8012518:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801251c:	68b9      	ldr	r1, [r7, #8]
 801251e:	f7fa f9e2 	bl	800c8e6 <lv_draw_fill>

            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012522:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012526:	b29a      	uxth	r2, r3
 8012528:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801252c:	b29b      	uxth	r3, r3
 801252e:	4413      	add	r3, r2
 8012530:	b29b      	uxth	r3, r3
 8012532:	b21b      	sxth	r3, r3
 8012534:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012536:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801253a:	b29a      	uxth	r2, r3
 801253c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012540:	b29b      	uxth	r3, r3
 8012542:	4413      	add	r3, r2
 8012544:	b29b      	uxth	r3, r3
 8012546:	b21b      	sxth	r3, r3
 8012548:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 801254a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801254e:	b29a      	uxth	r2, r3
 8012550:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012554:	b29b      	uxth	r3, r3
 8012556:	4413      	add	r3, r2
 8012558:	b29a      	uxth	r2, r3
 801255a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	b29b      	uxth	r3, r3
 8012562:	b21b      	sxth	r3, r3
 8012564:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8012566:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801256a:	b29a      	uxth	r2, r3
 801256c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012570:	b29b      	uxth	r3, r3
 8012572:	4413      	add	r3, r2
 8012574:	b29b      	uxth	r3, r3
 8012576:	b21b      	sxth	r3, r3
 8012578:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 801257a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 801257e:	f107 001c 	add.w	r0, r7, #28
 8012582:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012586:	68b9      	ldr	r1, [r7, #8]
 8012588:	f7fa f9ad 	bl	800c8e6 <lv_draw_fill>
        }

        /*Draw the octets to the left bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801258c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	2b00      	cmp	r3, #0
 8012596:	d06f      	beq.n	8012678 <lv_draw_rect_border_corner+0xad2>
 8012598:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801259c:	f003 0304 	and.w	r3, r3, #4
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d069      	beq.n	8012678 <lv_draw_rect_border_corner+0xad2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80125a4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80125a8:	b29a      	uxth	r2, r3
 80125aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	b21b      	sxth	r3, r3
 80125b6:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80125b8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80125bc:	b29a      	uxth	r2, r3
 80125be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	b21b      	sxth	r3, r3
 80125ca:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 80125cc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4413      	add	r3, r2
 80125da:	b29a      	uxth	r2, r3
 80125dc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80125e0:	1ad3      	subs	r3, r2, r3
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	b21b      	sxth	r3, r3
 80125e6:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 80125e8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	4413      	add	r3, r2
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	b21b      	sxth	r3, r3
 80125fa:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 80125fc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012600:	f107 001c 	add.w	r0, r7, #28
 8012604:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012608:	68b9      	ldr	r1, [r7, #8]
 801260a:	f7fa f96c 	bl	800c8e6 <lv_draw_fill>

            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 801260e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012612:	b29a      	uxth	r2, r3
 8012614:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012618:	b29b      	uxth	r3, r3
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	b29b      	uxth	r3, r3
 801261e:	b21b      	sxth	r3, r3
 8012620:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012622:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012626:	b29a      	uxth	r2, r3
 8012628:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801262c:	b29b      	uxth	r3, r3
 801262e:	1ad3      	subs	r3, r2, r3
 8012630:	b29a      	uxth	r2, r3
 8012632:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8012636:	4413      	add	r3, r2
 8012638:	b29b      	uxth	r3, r3
 801263a:	b21b      	sxth	r3, r3
 801263c:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 801263e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012642:	b29a      	uxth	r2, r3
 8012644:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012648:	b29b      	uxth	r3, r3
 801264a:	4413      	add	r3, r2
 801264c:	b29b      	uxth	r3, r3
 801264e:	b21b      	sxth	r3, r3
 8012650:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012652:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012656:	b29a      	uxth	r2, r3
 8012658:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801265c:	b29b      	uxth	r3, r3
 801265e:	4413      	add	r3, r2
 8012660:	b29b      	uxth	r3, r3
 8012662:	b21b      	sxth	r3, r3
 8012664:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8012666:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 801266a:	f107 001c 	add.w	r0, r7, #28
 801266e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012672:	68b9      	ldr	r1, [r7, #8]
 8012674:	f7fa f937 	bl	800c8e6 <lv_draw_fill>
        }

        /*Draw the octets to the left top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012678:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801267c:	f003 0302 	and.w	r3, r3, #2
 8012680:	2b00      	cmp	r3, #0
 8012682:	d07d      	beq.n	8012780 <lv_draw_rect_border_corner+0xbda>
 8012684:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012688:	f003 0304 	and.w	r3, r3, #4
 801268c:	2b00      	cmp	r3, #0
 801268e:	d077      	beq.n	8012780 <lv_draw_rect_border_corner+0xbda>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8012690:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012694:	461a      	mov	r2, r3
 8012696:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801269a:	441a      	add	r2, r3
 801269c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80126a0:	4619      	mov	r1, r3
 80126a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80126a6:	1acb      	subs	r3, r1, r3
 80126a8:	429a      	cmp	r2, r3
 80126aa:	dd34      	ble.n	8012716 <lv_draw_rect_border_corner+0xb70>
                /*Don't draw if the lines are common in the middle*/
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 80126ac:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	b21b      	sxth	r3, r3
 80126be:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 80126c0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80126d4:	4413      	add	r3, r2
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	b21b      	sxth	r3, r3
 80126da:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 80126dc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	1ad3      	subs	r3, r2, r3
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	b21b      	sxth	r3, r3
 80126ee:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 80126f0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	b29b      	uxth	r3, r3
 8012700:	b21b      	sxth	r3, r3
 8012702:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 8012704:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012708:	f107 001c 	add.w	r0, r7, #28
 801270c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012710:	68b9      	ldr	r1, [r7, #8]
 8012712:	f7fa f8e8 	bl	800c8e6 <lv_draw_fill>
            }

            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012716:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801271a:	b29a      	uxth	r2, r3
 801271c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012720:	b29b      	uxth	r3, r3
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	b29b      	uxth	r3, r3
 8012726:	b21b      	sxth	r3, r3
 8012728:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 801272a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801272e:	b29a      	uxth	r2, r3
 8012730:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012734:	b29b      	uxth	r3, r3
 8012736:	1ad3      	subs	r3, r2, r3
 8012738:	b29b      	uxth	r3, r3
 801273a:	b21b      	sxth	r3, r3
 801273c:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 801273e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012742:	b29a      	uxth	r2, r3
 8012744:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012748:	b29b      	uxth	r3, r3
 801274a:	1ad3      	subs	r3, r2, r3
 801274c:	b29b      	uxth	r3, r3
 801274e:	b21b      	sxth	r3, r3
 8012750:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012752:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012756:	b29a      	uxth	r2, r3
 8012758:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801275c:	b29b      	uxth	r3, r3
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	b29a      	uxth	r2, r3
 8012762:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8012766:	4413      	add	r3, r2
 8012768:	b29b      	uxth	r3, r3
 801276a:	b21b      	sxth	r3, r3
 801276c:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 801276e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012772:	f107 001c 	add.w	r0, r7, #28
 8012776:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801277a:	68b9      	ldr	r1, [r7, #8]
 801277c:	f7fa f8b3 	bl	800c8e6 <lv_draw_fill>
        }

        /*Draw the octets to the right top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012780:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012784:	f003 0302 	and.w	r3, r3, #2
 8012788:	2b00      	cmp	r3, #0
 801278a:	d07d      	beq.n	8012888 <lv_draw_rect_border_corner+0xce2>
 801278c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012790:	f003 0308 	and.w	r3, r3, #8
 8012794:	2b00      	cmp	r3, #0
 8012796:	d077      	beq.n	8012888 <lv_draw_rect_border_corner+0xce2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012798:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801279c:	b29a      	uxth	r2, r3
 801279e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	4413      	add	r3, r2
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	b21b      	sxth	r3, r3
 80127aa:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 80127ac:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	4413      	add	r3, r2
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	b21b      	sxth	r3, r3
 80127be:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80127c0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	1ad3      	subs	r3, r2, r3
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	b21b      	sxth	r3, r3
 80127d2:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 80127d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80127d8:	b29a      	uxth	r2, r3
 80127da:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80127de:	b29b      	uxth	r3, r3
 80127e0:	1ad3      	subs	r3, r2, r3
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80127e8:	4413      	add	r3, r2
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	b21b      	sxth	r3, r3
 80127ee:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 80127f0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80127f4:	f107 001c 	add.w	r0, r7, #28
 80127f8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80127fc:	68b9      	ldr	r1, [r7, #8]
 80127fe:	f7fa f872 	bl	800c8e6 <lv_draw_fill>

            /*Don't draw if the lines are common in the middle*/
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8012802:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012806:	461a      	mov	r2, r3
 8012808:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801280c:	441a      	add	r2, r3
 801280e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012812:	4619      	mov	r1, r3
 8012814:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012818:	1acb      	subs	r3, r1, r3
 801281a:	429a      	cmp	r2, r3
 801281c:	dd34      	ble.n	8012888 <lv_draw_rect_border_corner+0xce2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 801281e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012822:	b29a      	uxth	r2, r3
 8012824:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012828:	b29b      	uxth	r3, r3
 801282a:	4413      	add	r3, r2
 801282c:	b29a      	uxth	r2, r3
 801282e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	b29b      	uxth	r3, r3
 8012836:	b21b      	sxth	r3, r3
 8012838:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 801283a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801283e:	b29a      	uxth	r2, r3
 8012840:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012844:	b29b      	uxth	r3, r3
 8012846:	4413      	add	r3, r2
 8012848:	b29b      	uxth	r3, r3
 801284a:	b21b      	sxth	r3, r3
 801284c:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 801284e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012852:	b29a      	uxth	r2, r3
 8012854:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012858:	b29b      	uxth	r3, r3
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	b29b      	uxth	r3, r3
 801285e:	b21b      	sxth	r3, r3
 8012860:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012862:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012866:	b29a      	uxth	r2, r3
 8012868:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801286c:	b29b      	uxth	r3, r3
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	b29b      	uxth	r3, r3
 8012872:	b21b      	sxth	r3, r3
 8012874:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 8012876:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 801287a:	f107 001c 	add.w	r0, r7, #28
 801287e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012882:	68b9      	ldr	r1, [r7, #8]
 8012884:	f7fa f82f 	bl	800c8e6 <lv_draw_fill>
            }
        }
        lv_circ_next(&cir_out, &tmp_out);
 8012888:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801288c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f003 fe6a 	bl	801656c <lv_circ_next>

        /*The internal circle will be ready faster
         * so check it! */
        if(cir_in.y < cir_in.x) {
 8012898:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801289c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80128a0:	429a      	cmp	r2, r3
 80128a2:	da07      	bge.n	80128b4 <lv_draw_rect_border_corner+0xd0e>
            lv_circ_next(&cir_in, &tmp_in);
 80128a4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80128a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80128ac:	4611      	mov	r1, r2
 80128ae:	4618      	mov	r0, r3
 80128b0:	f003 fe5c 	bl	801656c <lv_circ_next>
    while(cir_out.y <= cir_out.x) {
 80128b4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80128b8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80128bc:	429a      	cmp	r2, r3
 80128be:	f77f aa85 	ble.w	8011dcc <lv_draw_rect_border_corner+0x226>
        }
    }

#if LV_ANTIALIAS
    if(aa) {
 80128c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 83b0 	beq.w	801302c <lv_draw_rect_border_corner+0x1486>
        /*Last parts of the outer anti-alias*/
        out_y_seg_end       = cir_out.y;
 80128cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80128ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80128d2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80128d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80128da:	1ad3      	subs	r3, r2, r3
 80128dc:	b29b      	uxth	r3, r3
 80128de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 80128e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80128e6:	823b      	strh	r3, [r7, #16]
        aa_p.y = out_y_seg_start;
 80128e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80128ec:	827b      	strh	r3, [r7, #18]

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 80128ee:	2300      	movs	r3, #0
 80128f0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80128f4:	e146      	b.n	8012b84 <lv_draw_rect_border_corner+0xfde>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80128f6:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80128fa:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 80128fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012902:	4618      	mov	r0, r3
 8012904:	f7f9 fa30 	bl	800bd68 <lv_draw_aa_get_opa>
 8012908:	4603      	mov	r3, r0
 801290a:	461a      	mov	r2, r3
 801290c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012910:	1a9b      	subs	r3, r3, r2
 8012912:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012916:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	d045      	beq.n	80129ae <lv_draw_rect_border_corner+0xe08>
 8012922:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012926:	f003 0308 	and.w	r3, r3, #8
 801292a:	2b00      	cmp	r3, #0
 801292c:	d03f      	beq.n	80129ae <lv_draw_rect_border_corner+0xe08>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801292e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012932:	b29a      	uxth	r2, r3
 8012934:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012938:	b29b      	uxth	r3, r3
 801293a:	4413      	add	r3, r2
 801293c:	b29b      	uxth	r3, r3
 801293e:	3301      	adds	r3, #1
 8012940:	b29b      	uxth	r3, r3
 8012942:	b218      	sxth	r0, r3
 8012944:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012948:	b29a      	uxth	r2, r3
 801294a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801294e:	b29b      	uxth	r3, r3
 8012950:	4413      	add	r3, r2
 8012952:	b29a      	uxth	r2, r3
 8012954:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012958:	4413      	add	r3, r2
 801295a:	b29b      	uxth	r3, r3
 801295c:	b219      	sxth	r1, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012964:	9200      	str	r2, [sp, #0]
 8012966:	895b      	ldrh	r3, [r3, #10]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	f7f9 ff24 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801296e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012972:	b29a      	uxth	r2, r3
 8012974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012978:	b29b      	uxth	r3, r3
 801297a:	4413      	add	r3, r2
 801297c:	b29a      	uxth	r2, r3
 801297e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012982:	4413      	add	r3, r2
 8012984:	b29b      	uxth	r3, r3
 8012986:	b218      	sxth	r0, r3
 8012988:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801298c:	b29a      	uxth	r2, r3
 801298e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012992:	b29b      	uxth	r3, r3
 8012994:	4413      	add	r3, r2
 8012996:	b29b      	uxth	r3, r3
 8012998:	3301      	adds	r3, #1
 801299a:	b29b      	uxth	r3, r3
 801299c:	b219      	sxth	r1, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80129a4:	9200      	str	r2, [sp, #0]
 80129a6:	895b      	ldrh	r3, [r3, #10]
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	f7f9 ff04 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80129ae:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d045      	beq.n	8012a46 <lv_draw_rect_border_corner+0xea0>
 80129ba:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80129be:	f003 0304 	and.w	r3, r3, #4
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d03f      	beq.n	8012a46 <lv_draw_rect_border_corner+0xea0>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80129c6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	1ad3      	subs	r3, r2, r3
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	b29b      	uxth	r3, r3
 80129de:	b218      	sxth	r0, r3
 80129e0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4413      	add	r3, r2
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	3301      	adds	r3, #1
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	b219      	sxth	r1, r3
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80129fc:	9200      	str	r2, [sp, #0]
 80129fe:	895b      	ldrh	r3, [r3, #10]
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	f7f9 fed8 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012a06:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	3b01      	subs	r3, #1
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	b218      	sxth	r0, r3
 8012a1c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4413      	add	r3, r2
 8012a2a:	b29a      	uxth	r2, r3
 8012a2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012a30:	4413      	add	r3, r2
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	b219      	sxth	r1, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012a3c:	9200      	str	r2, [sp, #0]
 8012a3e:	895b      	ldrh	r3, [r3, #10]
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	f7f9 feb8 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012a46:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d045      	beq.n	8012ade <lv_draw_rect_border_corner+0xf38>
 8012a52:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012a56:	f003 0304 	and.w	r3, r3, #4
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d03f      	beq.n	8012ade <lv_draw_rect_border_corner+0xf38>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012a5e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	3b01      	subs	r3, #1
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	b218      	sxth	r0, r3
 8012a74:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	b219      	sxth	r1, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012a94:	9200      	str	r2, [sp, #0]
 8012a96:	895b      	ldrh	r3, [r3, #10]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	f7f9 fe8c 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012a9e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	b218      	sxth	r0, r3
 8012ab8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	3b01      	subs	r3, #1
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	b219      	sxth	r1, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012ad4:	9200      	str	r2, [sp, #0]
 8012ad6:	895b      	ldrh	r3, [r3, #10]
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	f7f9 fe6c 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012ade:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012ae2:	f003 0302 	and.w	r3, r3, #2
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d045      	beq.n	8012b76 <lv_draw_rect_border_corner+0xfd0>
 8012aea:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012aee:	f003 0308 	and.w	r3, r3, #8
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d03f      	beq.n	8012b76 <lv_draw_rect_border_corner+0xfd0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012af6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	4413      	add	r3, r2
 8012b04:	b29a      	uxth	r2, r3
 8012b06:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012b0a:	4413      	add	r3, r2
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	b218      	sxth	r0, r3
 8012b10:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	3b01      	subs	r3, #1
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	b219      	sxth	r1, r3
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012b2c:	9200      	str	r2, [sp, #0]
 8012b2e:	895b      	ldrh	r3, [r3, #10]
 8012b30:	68ba      	ldr	r2, [r7, #8]
 8012b32:	f7f9 fe40 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012b36:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	4413      	add	r3, r2
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	3301      	adds	r3, #1
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	b218      	sxth	r0, r3
 8012b4c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	1ad3      	subs	r3, r2, r3
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	b219      	sxth	r1, r3
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012b6c:	9200      	str	r2, [sp, #0]
 8012b6e:	895b      	ldrh	r3, [r3, #10]
 8012b70:	68ba      	ldr	r2, [r7, #8]
 8012b72:	f7f9 fe20 	bl	800c7b6 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 8012b76:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012b84:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8012b88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	f6ff aeb2 	blt.w	80128f6 <lv_draw_rect_border_corner+0xd50>
                           style->body.border.color, aa_opa);
            }
        }

        /*In some cases the last pixel in the outer middle is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8012b92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012b96:	461a      	mov	r2, r3
 8012b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8012ba2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8012ba6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012baa:	429a      	cmp	r2, r3
 8012bac:	f040 80a3 	bne.w	8012cf6 <lv_draw_rect_border_corner+0x1150>
            aa_p.x = out_x_last;
 8012bb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012bb4:	823b      	strh	r3, [r7, #16]
            aa_p.y = out_x_last;
 8012bb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012bba:	827b      	strh	r3, [r7, #18]

            lv_opa_t aa_opa = opa >> 1;
 8012bbc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012bc0:	085b      	lsrs	r3, r3, #1
 8012bc2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012bc6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012bca:	f003 0301 	and.w	r3, r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01f      	beq.n	8012c12 <lv_draw_rect_border_corner+0x106c>
 8012bd2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012bd6:	f003 0308 	and.w	r3, r3, #8
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d019      	beq.n	8012c12 <lv_draw_rect_border_corner+0x106c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 8012bde:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	4413      	add	r3, r2
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	b218      	sxth	r0, r3
 8012bf0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	4413      	add	r3, r2
 8012bfe:	b29b      	uxth	r3, r3
 8012c00:	b219      	sxth	r1, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8012c08:	9200      	str	r2, [sp, #0]
 8012c0a:	895b      	ldrh	r3, [r3, #10]
 8012c0c:	68ba      	ldr	r2, [r7, #8]
 8012c0e:	f7f9 fdd2 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012c12:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012c16:	f003 0301 	and.w	r3, r3, #1
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d01f      	beq.n	8012c5e <lv_draw_rect_border_corner+0x10b8>
 8012c1e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012c22:	f003 0304 	and.w	r3, r3, #4
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d019      	beq.n	8012c5e <lv_draw_rect_border_corner+0x10b8>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 8012c2a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	b218      	sxth	r0, r3
 8012c3c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	4413      	add	r3, r2
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	b219      	sxth	r1, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8012c54:	9200      	str	r2, [sp, #0]
 8012c56:	895b      	ldrh	r3, [r3, #10]
 8012c58:	68ba      	ldr	r2, [r7, #8]
 8012c5a:	f7f9 fdac 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012c5e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d01f      	beq.n	8012caa <lv_draw_rect_border_corner+0x1104>
 8012c6a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012c6e:	f003 0304 	and.w	r3, r3, #4
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d019      	beq.n	8012caa <lv_draw_rect_border_corner+0x1104>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 8012c76:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	b218      	sxth	r0, r3
 8012c88:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	1ad3      	subs	r3, r2, r3
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	b219      	sxth	r1, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8012ca0:	9200      	str	r2, [sp, #0]
 8012ca2:	895b      	ldrh	r3, [r3, #10]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	f7f9 fd86 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012caa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012cae:	f003 0302 	and.w	r3, r3, #2
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d01f      	beq.n	8012cf6 <lv_draw_rect_border_corner+0x1150>
 8012cb6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012cba:	f003 0308 	and.w	r3, r3, #8
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d019      	beq.n	8012cf6 <lv_draw_rect_border_corner+0x1150>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 8012cc2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	4413      	add	r3, r2
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	b218      	sxth	r0, r3
 8012cd4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	b219      	sxth	r1, r3
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8012cec:	9200      	str	r2, [sp, #0]
 8012cee:	895b      	ldrh	r3, [r3, #10]
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	f7f9 fd60 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }
        }

        /*Last parts of the inner anti-alias*/
        in_y_seg_end = cir_in.y;
 8012cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012cf8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        aa_p.x       = in_x_last;
 8012cfc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012d00:	823b      	strh	r3, [r7, #16]
        aa_p.y       = in_y_seg_start;
 8012d02:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012d06:	827b      	strh	r3, [r7, #18]
        seg_size     = in_y_seg_end - in_y_seg_start;
 8012d08:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8012d0c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        for(i = 0; i < seg_size; i++) {
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012d1e:	e17e      	b.n	801301e <lv_draw_rect_border_corner+0x1478>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012d20:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8012d24:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8012d28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7f9 f81b 	bl	800bd68 <lv_draw_aa_get_opa>
 8012d32:	4603      	mov	r3, r0
 8012d34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012d38:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d025      	beq.n	8012d90 <lv_draw_rect_border_corner+0x11ea>
 8012d44:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012d48:	f003 0308 	and.w	r3, r3, #8
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d01f      	beq.n	8012d90 <lv_draw_rect_border_corner+0x11ea>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012d50:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	4413      	add	r3, r2
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	3b01      	subs	r3, #1
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	b218      	sxth	r0, r3
 8012d66:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	4413      	add	r3, r2
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012d7a:	4413      	add	r3, r2
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	b219      	sxth	r1, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012d86:	9200      	str	r2, [sp, #0]
 8012d88:	895b      	ldrh	r3, [r3, #10]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	f7f9 fd13 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012d90:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d025      	beq.n	8012de8 <lv_draw_rect_border_corner+0x1242>
 8012d9c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012da0:	f003 0304 	and.w	r3, r3, #4
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d01f      	beq.n	8012de8 <lv_draw_rect_border_corner+0x1242>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 8012da8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012dbc:	1ad3      	subs	r3, r2, r3
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	b218      	sxth	r0, r3
 8012dc2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012dc6:	b29a      	uxth	r2, r3
 8012dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	4413      	add	r3, r2
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	3b01      	subs	r3, #1
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	b219      	sxth	r1, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012dde:	9200      	str	r2, [sp, #0]
 8012de0:	895b      	ldrh	r3, [r3, #10]
 8012de2:	68ba      	ldr	r2, [r7, #8]
 8012de4:	f7f9 fce7 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012de8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012dec:	f003 0302 	and.w	r3, r3, #2
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d025      	beq.n	8012e40 <lv_draw_rect_border_corner+0x129a>
 8012df4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012df8:	f003 0304 	and.w	r3, r3, #4
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d01f      	beq.n	8012e40 <lv_draw_rect_border_corner+0x129a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012e00:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	1ad3      	subs	r3, r2, r3
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	3301      	adds	r3, #1
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	b218      	sxth	r0, r3
 8012e16:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	1ad3      	subs	r3, r2, r3
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	b219      	sxth	r1, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012e36:	9200      	str	r2, [sp, #0]
 8012e38:	895b      	ldrh	r3, [r3, #10]
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	f7f9 fcbb 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012e40:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012e44:	f003 0302 	and.w	r3, r3, #2
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d025      	beq.n	8012e98 <lv_draw_rect_border_corner+0x12f2>
 8012e4c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012e50:	f003 0308 	and.w	r3, r3, #8
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d01f      	beq.n	8012e98 <lv_draw_rect_border_corner+0x12f2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8012e58:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	4413      	add	r3, r2
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012e6c:	4413      	add	r3, r2
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	b218      	sxth	r0, r3
 8012e72:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	3301      	adds	r3, #1
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	b219      	sxth	r1, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012e8e:	9200      	str	r2, [sp, #0]
 8012e90:	895b      	ldrh	r3, [r3, #10]
 8012e92:	68ba      	ldr	r2, [r7, #8]
 8012e94:	f7f9 fc8f 	bl	800c7b6 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8012e98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012e9c:	1e5a      	subs	r2, r3, #1
 8012e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012ea8:	440b      	add	r3, r1
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	f000 80b0 	beq.w	8013010 <lv_draw_rect_border_corner+0x146a>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012eb0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012eb4:	f003 0301 	and.w	r3, r3, #1
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d025      	beq.n	8012f08 <lv_draw_rect_border_corner+0x1362>
 8012ebc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012ec0:	f003 0308 	and.w	r3, r3, #8
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d01f      	beq.n	8012f08 <lv_draw_rect_border_corner+0x1362>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 8012ec8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	4413      	add	r3, r2
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012edc:	4413      	add	r3, r2
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	b218      	sxth	r0, r3
 8012ee2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	4413      	add	r3, r2
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	b219      	sxth	r1, r3
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012efe:	9200      	str	r2, [sp, #0]
 8012f00:	895b      	ldrh	r3, [r3, #10]
 8012f02:	68ba      	ldr	r2, [r7, #8]
 8012f04:	f7f9 fc57 	bl	800c7b6 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012f08:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012f0c:	f003 0301 	and.w	r3, r3, #1
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d025      	beq.n	8012f60 <lv_draw_rect_border_corner+0x13ba>
 8012f14:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012f18:	f003 0304 	and.w	r3, r3, #4
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d01f      	beq.n	8012f60 <lv_draw_rect_border_corner+0x13ba>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012f20:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	3301      	adds	r3, #1
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	b218      	sxth	r0, r3
 8012f36:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	4413      	add	r3, r2
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012f4a:	4413      	add	r3, r2
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	b219      	sxth	r1, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012f56:	9200      	str	r2, [sp, #0]
 8012f58:	895b      	ldrh	r3, [r3, #10]
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	f7f9 fc2b 	bl	800c7b6 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012f60:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012f64:	f003 0302 	and.w	r3, r3, #2
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d025      	beq.n	8012fb8 <lv_draw_rect_border_corner+0x1412>
 8012f6c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012f70:	f003 0304 	and.w	r3, r3, #4
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d01f      	beq.n	8012fb8 <lv_draw_rect_border_corner+0x1412>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 8012f78:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012f8c:	1ad3      	subs	r3, r2, r3
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	b218      	sxth	r0, r3
 8012f92:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	b219      	sxth	r1, r3
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012fae:	9200      	str	r2, [sp, #0]
 8012fb0:	895b      	ldrh	r3, [r3, #10]
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	f7f9 fbff 	bl	800c7b6 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012fb8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012fbc:	f003 0302 	and.w	r3, r3, #2
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d025      	beq.n	8013010 <lv_draw_rect_border_corner+0x146a>
 8012fc4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012fc8:	f003 0308 	and.w	r3, r3, #8
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d01f      	beq.n	8013010 <lv_draw_rect_border_corner+0x146a>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012fd0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	4413      	add	r3, r2
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	b218      	sxth	r0, r3
 8012fe6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012ffa:	1ad3      	subs	r3, r2, r3
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	b219      	sxth	r1, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8013006:	9200      	str	r2, [sp, #0]
 8013008:	895b      	ldrh	r3, [r3, #10]
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	f7f9 fbd3 	bl	800c7b6 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 8013010:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013014:	b29b      	uxth	r3, r3
 8013016:	3301      	adds	r3, #1
 8013018:	b29b      	uxth	r3, r3
 801301a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801301e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8013022:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013026:	429a      	cmp	r2, r3
 8013028:	f6ff ae7a 	blt.w	8012d20 <lv_draw_rect_border_corner+0x117a>
                }
            }
        }
    }
#endif
}
 801302c:	bf00      	nop
 801302e:	3778      	adds	r7, #120	; 0x78
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <lv_draw_shadow>:
 * @param mask pointer to a mask area (from the design functions)
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_shadow(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b088      	sub	sp, #32
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	607a      	str	r2, [r7, #4]
 8013040:	70fb      	strb	r3, [r7, #3]
    /* If mask is in the middle of cords do not draw shadow*/
    lv_coord_t radius = style->body.radius;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	88db      	ldrh	r3, [r3, #6]
 8013046:	83fb      	strh	r3, [r7, #30]
    lv_coord_t width  = lv_area_get_width(coords);
 8013048:	68f8      	ldr	r0, [r7, #12]
 801304a:	f7fd f844 	bl	80100d6 <lv_area_get_width>
 801304e:	4603      	mov	r3, r0
 8013050:	83bb      	strh	r3, [r7, #28]
    lv_coord_t height = lv_area_get_height(coords);
 8013052:	68f8      	ldr	r0, [r7, #12]
 8013054:	f7fd f856 	bl	8010104 <lv_area_get_height>
 8013058:	4603      	mov	r3, r0
 801305a:	837b      	strh	r3, [r7, #26]
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 801305c:	8bfb      	ldrh	r3, [r7, #30]
 801305e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013062:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8013066:	4618      	mov	r0, r3
 8013068:	f000 fedc 	bl	8013e24 <lv_draw_cont_radius_corr>
 801306c:	4603      	mov	r3, r0
 801306e:	83fb      	strh	r3, [r7, #30]
    lv_area_t area_tmp;

    /*Check horizontally without radius*/
    lv_area_copy(&area_tmp, coords);
 8013070:	f107 0310 	add.w	r3, r7, #16
 8013074:	68f9      	ldr	r1, [r7, #12]
 8013076:	4618      	mov	r0, r3
 8013078:	f7fd f81f 	bl	80100ba <lv_area_copy>
    area_tmp.x1 += radius;
 801307c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013080:	b29a      	uxth	r2, r3
 8013082:	8bfb      	ldrh	r3, [r7, #30]
 8013084:	4413      	add	r3, r2
 8013086:	b29b      	uxth	r3, r3
 8013088:	b21b      	sxth	r3, r3
 801308a:	823b      	strh	r3, [r7, #16]
    area_tmp.x2 -= radius;
 801308c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013090:	b29a      	uxth	r2, r3
 8013092:	8bfb      	ldrh	r3, [r7, #30]
 8013094:	1ad3      	subs	r3, r2, r3
 8013096:	b29b      	uxth	r3, r3
 8013098:	b21b      	sxth	r3, r3
 801309a:	82bb      	strh	r3, [r7, #20]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801309c:	f107 0310 	add.w	r3, r7, #16
 80130a0:	4619      	mov	r1, r3
 80130a2:	68b8      	ldr	r0, [r7, #8]
 80130a4:	f003 fa03 	bl	80164ae <lv_area_is_in>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d134      	bne.n	8013118 <lv_draw_shadow+0xe4>

    /*Check vertically without radius*/
    lv_area_copy(&area_tmp, coords);
 80130ae:	f107 0310 	add.w	r3, r7, #16
 80130b2:	68f9      	ldr	r1, [r7, #12]
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fd f800 	bl	80100ba <lv_area_copy>
    area_tmp.y1 += radius;
 80130ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80130be:	b29a      	uxth	r2, r3
 80130c0:	8bfb      	ldrh	r3, [r7, #30]
 80130c2:	4413      	add	r3, r2
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	b21b      	sxth	r3, r3
 80130c8:	827b      	strh	r3, [r7, #18]
    area_tmp.y2 -= radius;
 80130ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	8bfb      	ldrh	r3, [r7, #30]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	b21b      	sxth	r3, r3
 80130d8:	82fb      	strh	r3, [r7, #22]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80130da:	f107 0310 	add.w	r3, r7, #16
 80130de:	4619      	mov	r1, r3
 80130e0:	68b8      	ldr	r0, [r7, #8]
 80130e2:	f003 f9e4 	bl	80164ae <lv_area_is_in>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d117      	bne.n	801311c <lv_draw_shadow+0xe8>

    if(style->body.shadow.type == LV_SHADOW_FULL) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	7d1b      	ldrb	r3, [r3, #20]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d106      	bne.n	8013102 <lv_draw_shadow+0xce>
        lv_draw_shadow_full(coords, mask, style, opa_scale);
 80130f4:	78fb      	ldrb	r3, [r7, #3]
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	68b9      	ldr	r1, [r7, #8]
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f000 f812 	bl	8013124 <lv_draw_shadow_full>
 8013100:	e00d      	b.n	801311e <lv_draw_shadow+0xea>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	7d1b      	ldrb	r3, [r3, #20]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d109      	bne.n	801311e <lv_draw_shadow+0xea>
        lv_draw_shadow_bottom(coords, mask, style, opa_scale);
 801310a:	78fb      	ldrb	r3, [r7, #3]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	68b9      	ldr	r1, [r7, #8]
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f000 fb2e 	bl	8013772 <lv_draw_shadow_bottom>
 8013116:	e002      	b.n	801311e <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8013118:	bf00      	nop
 801311a:	e000      	b.n	801311e <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801311c:	bf00      	nop
    }
}
 801311e:	3720      	adds	r7, #32
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <lv_draw_shadow_full>:

static void lv_draw_shadow_full(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                lv_opa_t opa_scale)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b0a0      	sub	sp, #128	; 0x80
 8013128:	af02      	add	r7, sp, #8
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
 8013130:	70fb      	strb	r3, [r7, #3]
     * radius means smaller average shadow opacity. The solution should be to start `line` from `-
     * swidth` and handle if the straight part is short (or zero) and the value is taken from the
     * other corner. `col` also should start from `- swidth`
     */

    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013132:	f7f7 fe55 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8013136:	4603      	mov	r3, r0
 8013138:	4618      	mov	r0, r3
 801313a:	f002 fd21 	bl	8015b80 <lv_disp_get_antialiasing>
 801313e:	4603      	mov	r3, r0
 8013140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    lv_coord_t radius = style->body.radius;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	88db      	ldrh	r3, [r3, #6]
 8013148:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_coord_t swidth = style->body.shadow.width;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	8a5b      	ldrh	r3, [r3, #18]
 8013150:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    lv_coord_t width  = lv_area_get_width(coords);
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7fc ffbe 	bl	80100d6 <lv_area_get_width>
 801315a:	4603      	mov	r3, r0
 801315c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_coord_t height = lv_area_get_height(coords);
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f7fc ffcf 	bl	8010104 <lv_area_get_height>
 8013166:	4603      	mov	r3, r0
 8013168:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 801316c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013170:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8013174:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 8013178:	4618      	mov	r0, r3
 801317a:	f000 fe53 	bl	8013e24 <lv_draw_cont_radius_corr>
 801317e:	4603      	mov	r3, r0
 8013180:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    radius += aa;
 8013184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013188:	b29a      	uxth	r2, r3
 801318a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801318e:	4413      	add	r3, r2
 8013190:	b29b      	uxth	r3, r3
 8013192:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    /*Allocate a draw buffer the buffer required to draw the shadow*/
    int16_t filter_width = 2 * swidth + 1;
 8013196:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	b29b      	uxth	r3, r3
 801319e:	3301      	adds	r3, #1
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80131a6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80131aa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80131ae:	4413      	add	r3, r2
 80131b0:	3304      	adds	r3, #4
 80131b2:	f023 0303 	bic.w	r3, r3, #3
 80131b6:	65bb      	str	r3, [r7, #88]	; 0x58
    curve_x_size *= sizeof(lv_coord_t);
 80131b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 80131be:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80131c2:	3303      	adds	r3, #3
 80131c4:	f023 0303 	bic.w	r3, r3, #3
 80131c8:	657b      	str	r3, [r7, #84]	; 0x54
    line_1d_blur_size *= sizeof(uint32_t);
 80131ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t line_2d_blur_size = ((radius + swidth + 1) + 3) & ~0x3;     /*Round to 4*/
 80131d0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80131d4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80131d8:	4413      	add	r3, r2
 80131da:	3304      	adds	r3, #4
 80131dc:	f023 0303 	bic.w	r3, r3, #3
 80131e0:	653b      	str	r3, [r7, #80]	; 0x50
    line_2d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 80131e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131e6:	441a      	add	r2, r3
 80131e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ea:	4413      	add	r3, r2
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7f8 fd69 	bl	800bcc4 <lv_draw_get_buf>
 80131f2:	64f8      	str	r0, [r7, #76]	; 0x4c

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 80131f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131f6:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 80131f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80131fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131fc:	4413      	add	r3, r2
 80131fe:	647b      	str	r3, [r7, #68]	; 0x44
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8013200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013204:	4413      	add	r3, r2
 8013206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013208:	4413      	add	r3, r2
 801320a:	643b      	str	r3, [r7, #64]	; 0x40

    memset(curve_x, 0, curve_x_size);
 801320c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801320e:	2100      	movs	r1, #0
 8013210:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8013212:	f017 ff08 	bl	802b026 <memset>
    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 8013216:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 801321a:	f107 0136 	add.w	r1, r7, #54	; 0x36
 801321e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013222:	4618      	mov	r0, r3
 8013224:	f003 f973 	bl	801650e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8013228:	e017      	b.n	801325a <lv_draw_shadow_full+0x136>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 801322a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801322e:	005b      	lsls	r3, r3, #1
 8013230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013232:	4413      	add	r3, r2
 8013234:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8013238:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 801323a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801323e:	005b      	lsls	r3, r3, #1
 8013240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013242:	4413      	add	r3, r2
 8013244:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8013248:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 801324a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 801324e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013252:	4611      	mov	r1, r2
 8013254:	4618      	mov	r0, r3
 8013256:	f003 f989 	bl	801656c <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 801325a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801325e:	4618      	mov	r0, r3
 8013260:	f003 f96f 	bl	8016542 <lv_circ_cont>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d1df      	bne.n	801322a <lv_draw_shadow_full+0x106>
    }
    int16_t line;
    /*1D Blur horizontally*/
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 801326a:	78fb      	ldrb	r3, [r7, #3]
 801326c:	2bff      	cmp	r3, #255	; 0xff
 801326e:	d102      	bne.n	8013276 <lv_draw_shadow_full+0x152>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	7a1b      	ldrb	r3, [r3, #8]
 8013274:	e00a      	b.n	801328c <lv_draw_shadow_full+0x168>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	7a1b      	ldrb	r3, [r3, #8]
 801327a:	b29a      	uxth	r2, r3
 801327c:	78fb      	ldrb	r3, [r7, #3]
 801327e:	b29b      	uxth	r3, r3
 8013280:	fb12 f303 	smulbb	r3, r2, r3
 8013284:	b29b      	uxth	r3, r3
 8013286:	0a1b      	lsrs	r3, r3, #8
 8013288:	b29b      	uxth	r3, r3
 801328a:	b2db      	uxtb	r3, r3
 801328c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for(line = 0; line < filter_width; line++) {
 8013290:	2300      	movs	r3, #0
 8013292:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013296:	e021      	b.n	80132dc <lv_draw_shadow_full+0x1b8>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 8013298:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 801329c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	461a      	mov	r2, r3
 80132a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80132a8:	fb03 f302 	mul.w	r3, r3, r2
 80132ac:	005b      	lsls	r3, r3, #1
 80132ae:	021a      	lsls	r2, r3, #8
                             (filter_width * filter_width);
 80132b0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80132b4:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 80132b8:	fb01 f303 	mul.w	r3, r1, r3
 80132bc:	4618      	mov	r0, r3
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 80132be:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80132c6:	440b      	add	r3, r1
 80132c8:	fbb2 f2f0 	udiv	r2, r2, r0
 80132cc:	601a      	str	r2, [r3, #0]
    for(line = 0; line < filter_width; line++) {
 80132ce:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	3301      	adds	r3, #1
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80132dc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 80132e0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80132e4:	429a      	cmp	r2, r3
 80132e6:	dbd7      	blt.n	8013298 <lv_draw_shadow_full+0x174>
    lv_point_t point_lb;
    lv_point_t ofs_rb;
    lv_point_t ofs_rt;
    lv_point_t ofs_lb;
    lv_point_t ofs_lt;
    ofs_rb.x = coords->x2 - radius - aa;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80132f4:	1ad3      	subs	r3, r2, r3
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	1ad3      	subs	r3, r2, r3
 8013300:	b29b      	uxth	r3, r3
 8013302:	b21b      	sxth	r3, r3
 8013304:	843b      	strh	r3, [r7, #32]
    ofs_rb.y = coords->y2 - radius - aa;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801330c:	b29a      	uxth	r2, r3
 801330e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	b29a      	uxth	r2, r3
 8013316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801331a:	b29b      	uxth	r3, r3
 801331c:	1ad3      	subs	r3, r2, r3
 801331e:	b29b      	uxth	r3, r3
 8013320:	b21b      	sxth	r3, r3
 8013322:	847b      	strh	r3, [r7, #34]	; 0x22

    ofs_rt.x = coords->x2 - radius - aa;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801332a:	b29a      	uxth	r2, r3
 801332c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	b29a      	uxth	r2, r3
 8013334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013338:	b29b      	uxth	r3, r3
 801333a:	1ad3      	subs	r3, r2, r3
 801333c:	b29b      	uxth	r3, r3
 801333e:	b21b      	sxth	r3, r3
 8013340:	83bb      	strh	r3, [r7, #28]
    ofs_rt.y = coords->y1 + radius + aa;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013348:	b29a      	uxth	r2, r3
 801334a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801334e:	4413      	add	r3, r2
 8013350:	b29a      	uxth	r2, r3
 8013352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013356:	b29b      	uxth	r3, r3
 8013358:	4413      	add	r3, r2
 801335a:	b29b      	uxth	r3, r3
 801335c:	b21b      	sxth	r3, r3
 801335e:	83fb      	strh	r3, [r7, #30]

    ofs_lb.x = coords->x1 + radius + aa;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013366:	b29a      	uxth	r2, r3
 8013368:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801336c:	4413      	add	r3, r2
 801336e:	b29a      	uxth	r2, r3
 8013370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013374:	b29b      	uxth	r3, r3
 8013376:	4413      	add	r3, r2
 8013378:	b29b      	uxth	r3, r3
 801337a:	b21b      	sxth	r3, r3
 801337c:	833b      	strh	r3, [r7, #24]
    ofs_lb.y = coords->y2 - radius - aa;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013384:	b29a      	uxth	r2, r3
 8013386:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	b29a      	uxth	r2, r3
 801338e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013392:	b29b      	uxth	r3, r3
 8013394:	1ad3      	subs	r3, r2, r3
 8013396:	b29b      	uxth	r3, r3
 8013398:	b21b      	sxth	r3, r3
 801339a:	837b      	strh	r3, [r7, #26]

    ofs_lt.x = coords->x1 + radius + aa;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133a2:	b29a      	uxth	r2, r3
 80133a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80133a8:	4413      	add	r3, r2
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	4413      	add	r3, r2
 80133b4:	b29b      	uxth	r3, r3
 80133b6:	b21b      	sxth	r3, r3
 80133b8:	82bb      	strh	r3, [r7, #20]
    ofs_lt.y = coords->y1 + radius + aa;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80133c6:	4413      	add	r3, r2
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	4413      	add	r3, r2
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	b21b      	sxth	r3, r3
 80133d6:	82fb      	strh	r3, [r7, #22]
    bool line_ready;
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 80133d8:	2300      	movs	r3, #0
 80133da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80133de:	e1ba      	b.n	8013756 <lv_draw_shadow_full+0x632>
        line_ready = false;
 80133e0:	2300      	movs	r3, #0
 80133e2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 80133e6:	2300      	movs	r3, #0
 80133e8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80133ec:	e098      	b.n	8013520 <lv_draw_shadow_full+0x3fc>
                                                         shadow pixel (radius + swidth))*/

            /*Sum the opacities from the lines above and below this 'row'*/
            int16_t line_rel;
            uint32_t px_opa_sum = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80133f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80133f6:	425b      	negs	r3, r3
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80133fe:	e06e      	b.n	80134de <lv_draw_shadow_full+0x3ba>
                /*Get the relative x position of the 'line_rel' to 'line'*/
                int16_t col_rel;
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 8013400:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8013404:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8013408:	4413      	add	r3, r2
 801340a:	2b00      	cmp	r3, #0
 801340c:	da12      	bge.n	8013434 <lv_draw_shadow_full+0x310>
                    col_rel = radius - curve_x[line] - col;
 801340e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8013412:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801341a:	440b      	add	r3, r1
 801341c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013420:	b29b      	uxth	r3, r3
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	b29a      	uxth	r2, r3
 8013426:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801342a:	1ad3      	subs	r3, r2, r3
 801342c:	b29b      	uxth	r3, r3
 801342e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8013432:	e023      	b.n	801347c <lv_draw_shadow_full+0x358>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8013434:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8013438:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801343c:	441a      	add	r2, r3
 801343e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8013442:	429a      	cmp	r2, r3
 8013444:	dc52      	bgt.n	80134ec <lv_draw_shadow_full+0x3c8>
                    break;
                } else { /*Blur from the curve*/
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8013446:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 801344a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801344e:	4413      	add	r3, r2
 8013450:	005b      	lsls	r3, r3, #1
 8013452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013454:	4413      	add	r3, r2
 8013456:	f9b3 3000 	ldrsh.w	r3, [r3]
 801345a:	b29a      	uxth	r2, r3
 801345c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013464:	440b      	add	r3, r1
 8013466:	f9b3 3000 	ldrsh.w	r3, [r3]
 801346a:	b29b      	uxth	r3, r3
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	b29a      	uxth	r2, r3
 8013470:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013474:	1ad3      	subs	r3, r2, r3
 8013476:	b29b      	uxth	r3, r3
 8013478:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
                }

                /*Add the value of the 1D blur on 'col_rel' position*/
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 801347c:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8013480:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013484:	425b      	negs	r3, r3
 8013486:	429a      	cmp	r2, r3
 8013488:	da0a      	bge.n	80134a0 <lv_draw_shadow_full+0x37c>
                    if(line_rel == -swidth)
 801348a:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801348e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013492:	425b      	negs	r3, r3
 8013494:	429a      	cmp	r2, r3
 8013496:	d12b      	bne.n	80134f0 <lv_draw_shadow_full+0x3cc>
                        line_ready = true; /*If no data even on the very first line then it wont't
 8013498:	2301      	movs	r3, #1
 801349a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                                              be anything else in this line*/
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 801349e:	e027      	b.n	80134f0 <lv_draw_shadow_full+0x3cc>
                } else if(col_rel > swidth)
 80134a0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80134a4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80134a8:	429a      	cmp	r2, r3
 80134aa:	dd05      	ble.n	80134b8 <lv_draw_shadow_full+0x394>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80134ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134b2:	4413      	add	r3, r2
 80134b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80134b6:	e00b      	b.n	80134d0 <lv_draw_shadow_full+0x3ac>
                else
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80134b8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80134bc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 80134c0:	1ad3      	subs	r3, r2, r3
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134c6:	4413      	add	r3, r2
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134cc:	4413      	add	r3, r2
 80134ce:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80134d0:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	3301      	adds	r3, #1
 80134d8:	b29b      	uxth	r3, r3
 80134da:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80134de:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 80134e2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80134e6:	429a      	cmp	r2, r3
 80134e8:	dd8a      	ble.n	8013400 <lv_draw_shadow_full+0x2dc>
 80134ea:	e002      	b.n	80134f2 <lv_draw_shadow_full+0x3ce>
                    break;
 80134ec:	bf00      	nop
 80134ee:	e000      	b.n	80134f2 <lv_draw_shadow_full+0x3ce>
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 80134f0:	bf00      	nop
            }

            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80134f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134f4:	0a19      	lsrs	r1, r3, #8
 80134f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80134fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134fc:	4413      	add	r3, r2
 80134fe:	b2ca      	uxtb	r2, r1
 8013500:	701a      	strb	r2, [r3, #0]
            if(line_ready) {
 8013502:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8013506:	2b00      	cmp	r3, #0
 8013508:	d005      	beq.n	8013516 <lv_draw_shadow_full+0x3f2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 801350a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801350e:	3301      	adds	r3, #1
 8013510:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                break;
 8013514:	e00e      	b.n	8013534 <lv_draw_shadow_full+0x410>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8013516:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801351a:	3301      	adds	r3, #1
 801351c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013520:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013524:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8013528:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801352c:	440b      	add	r3, r1
 801352e:	429a      	cmp	r2, r3
 8013530:	f77f af5d 	ble.w	80133ee <lv_draw_shadow_full+0x2ca>
            }
        }

        /*Flush the line*/
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8013534:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801353c:	4413      	add	r3, r2
 801353e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013542:	b29a      	uxth	r2, r3
 8013544:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013548:	b29b      	uxth	r3, r3
 801354a:	4413      	add	r3, r2
 801354c:	b29b      	uxth	r3, r3
 801354e:	3301      	adds	r3, #1
 8013550:	b29b      	uxth	r3, r3
 8013552:	b21b      	sxth	r3, r3
 8013554:	863b      	strh	r3, [r7, #48]	; 0x30
        point_rt.y = ofs_rt.y - line;
 8013556:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801355a:	b29a      	uxth	r2, r3
 801355c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013560:	1ad3      	subs	r3, r2, r3
 8013562:	b29b      	uxth	r3, r3
 8013564:	b21b      	sxth	r3, r3
 8013566:	867b      	strh	r3, [r7, #50]	; 0x32

        point_rb.x = curve_x[line] + ofs_rb.x + 1;
 8013568:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013570:	4413      	add	r3, r2
 8013572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013576:	b29a      	uxth	r2, r3
 8013578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801357c:	b29b      	uxth	r3, r3
 801357e:	4413      	add	r3, r2
 8013580:	b29b      	uxth	r3, r3
 8013582:	3301      	adds	r3, #1
 8013584:	b29b      	uxth	r3, r3
 8013586:	b21b      	sxth	r3, r3
 8013588:	85bb      	strh	r3, [r7, #44]	; 0x2c
        point_rb.y = ofs_rb.y + line;
 801358a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801358e:	b29a      	uxth	r2, r3
 8013590:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013594:	4413      	add	r3, r2
 8013596:	b29b      	uxth	r3, r3
 8013598:	b21b      	sxth	r3, r3
 801359a:	85fb      	strh	r3, [r7, #46]	; 0x2e

        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 801359c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80135aa:	440b      	add	r3, r1
 80135ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	b29b      	uxth	r3, r3
 80135b6:	3b01      	subs	r3, #1
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	b21b      	sxth	r3, r3
 80135bc:	853b      	strh	r3, [r7, #40]	; 0x28
        point_lt.y = ofs_lt.y - line;
 80135be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	b21b      	sxth	r3, r3
 80135ce:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_lb.x = ofs_lb.x - curve_x[line] - 1;
 80135d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80135da:	005b      	lsls	r3, r3, #1
 80135dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80135de:	440b      	add	r3, r1
 80135e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	1ad3      	subs	r3, r2, r3
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	3b01      	subs	r3, #1
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	b21b      	sxth	r3, r3
 80135f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_lb.y = ofs_lb.y + line;
 80135f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80135fc:	4413      	add	r3, r2
 80135fe:	b29b      	uxth	r3, r3
 8013600:	b21b      	sxth	r3, r3
 8013602:	84fb      	strh	r3, [r7, #38]	; 0x26

        uint16_t d;
        for(d = 1; d < col; d++) {
 8013604:	2301      	movs	r3, #1
 8013606:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801360a:	e08c      	b.n	8013726 <lv_draw_shadow_full+0x602>

            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 801360c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8013610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013614:	429a      	cmp	r2, r3
 8013616:	da14      	bge.n	8013642 <lv_draw_shadow_full+0x51e>
 8013618:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801361c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013620:	429a      	cmp	r2, r3
 8013622:	da0e      	bge.n	8013642 <lv_draw_shadow_full+0x51e>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8013624:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8013628:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801362c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013632:	4413      	add	r3, r2
 8013634:	781a      	ldrb	r2, [r3, #0]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	9200      	str	r2, [sp, #0]
 801363a:	8a1b      	ldrh	r3, [r3, #16]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	f7f9 f8ba 	bl	800c7b6 <lv_draw_px>
            }

            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8013642:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8013646:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801364a:	429a      	cmp	r2, r3
 801364c:	da14      	bge.n	8013678 <lv_draw_shadow_full+0x554>
 801364e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013652:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013656:	429a      	cmp	r2, r3
 8013658:	dd0e      	ble.n	8013678 <lv_draw_shadow_full+0x554>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801365a:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 801365e:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8013662:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013668:	4413      	add	r3, r2
 801366a:	781a      	ldrb	r2, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	9200      	str	r2, [sp, #0]
 8013670:	8a1b      	ldrh	r3, [r3, #16]
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	f7f9 f89f 	bl	800c7b6 <lv_draw_px>
            }

            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8013678:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801367c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013680:	429a      	cmp	r2, r3
 8013682:	dd14      	ble.n	80136ae <lv_draw_shadow_full+0x58a>
 8013684:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013688:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801368c:	429a      	cmp	r2, r3
 801368e:	da0e      	bge.n	80136ae <lv_draw_shadow_full+0x58a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8013690:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 8013694:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8013698:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801369c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801369e:	4413      	add	r3, r2
 80136a0:	781a      	ldrb	r2, [r3, #0]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	9200      	str	r2, [sp, #0]
 80136a6:	8a1b      	ldrh	r3, [r3, #16]
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	f7f9 f884 	bl	800c7b6 <lv_draw_px>
            }

            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 80136ae:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80136b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	dd14      	ble.n	80136e4 <lv_draw_shadow_full+0x5c0>
 80136ba:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80136be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80136c2:	429a      	cmp	r2, r3
 80136c4:	dd0e      	ble.n	80136e4 <lv_draw_shadow_full+0x5c0>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80136c6:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 80136ca:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80136ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80136d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136d4:	4413      	add	r3, r2
 80136d6:	781a      	ldrb	r2, [r3, #0]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	9200      	str	r2, [sp, #0]
 80136dc:	8a1b      	ldrh	r3, [r3, #16]
 80136de:	68ba      	ldr	r2, [r7, #8]
 80136e0:	f7f9 f869 	bl	800c7b6 <lv_draw_px>
            }

            point_rb.x++;
 80136e4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	3301      	adds	r3, #1
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	b21b      	sxth	r3, r3
 80136f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            point_lb.x--;
 80136f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	3b01      	subs	r3, #1
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	b21b      	sxth	r3, r3
 80136fe:	84bb      	strh	r3, [r7, #36]	; 0x24

            point_rt.x++;
 8013700:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013704:	b29b      	uxth	r3, r3
 8013706:	3301      	adds	r3, #1
 8013708:	b29b      	uxth	r3, r3
 801370a:	b21b      	sxth	r3, r3
 801370c:	863b      	strh	r3, [r7, #48]	; 0x30
            point_lt.x--;
 801370e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013712:	b29b      	uxth	r3, r3
 8013714:	3b01      	subs	r3, #1
 8013716:	b29b      	uxth	r3, r3
 8013718:	b21b      	sxth	r3, r3
 801371a:	853b      	strh	r3, [r7, #40]	; 0x28
        for(d = 1; d < col; d++) {
 801371c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013720:	3301      	adds	r3, #1
 8013722:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8013726:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 801372a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801372e:	429a      	cmp	r2, r3
 8013730:	f4ff af6c 	bcc.w	801360c <lv_draw_shadow_full+0x4e8>
        }

        /* Put the first line to the edges too.
         * It is not correct because blur should be done below the corner too
         * but is is simple, fast and gives a good enough result*/
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8013734:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8013738:	2b00      	cmp	r3, #0
 801373a:	d105      	bne.n	8013748 <lv_draw_shadow_full+0x624>
 801373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	68b9      	ldr	r1, [r7, #8]
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f000 fa17 	bl	8013b76 <lv_draw_shadow_full_straight>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8013748:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801374c:	b29b      	uxth	r3, r3
 801374e:	3301      	adds	r3, #1
 8013750:	b29b      	uxth	r3, r3
 8013752:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013756:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 801375a:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 801375e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013762:	440b      	add	r3, r1
 8013764:	429a      	cmp	r2, r3
 8013766:	f77f ae3b 	ble.w	80133e0 <lv_draw_shadow_full+0x2bc>
    }
}
 801376a:	bf00      	nop
 801376c:	3778      	adds	r7, #120	; 0x78
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}

08013772 <lv_draw_shadow_bottom>:

static void lv_draw_shadow_bottom(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 8013772:	b580      	push	{r7, lr}
 8013774:	b09a      	sub	sp, #104	; 0x68
 8013776:	af02      	add	r7, sp, #8
 8013778:	60f8      	str	r0, [r7, #12]
 801377a:	60b9      	str	r1, [r7, #8]
 801377c:	607a      	str	r2, [r7, #4]
 801377e:	70fb      	strb	r3, [r7, #3]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013780:	f7f7 fb2e 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8013784:	4603      	mov	r3, r0
 8013786:	4618      	mov	r0, r3
 8013788:	f002 f9fa 	bl	8015b80 <lv_disp_get_antialiasing>
 801378c:	4603      	mov	r3, r0
 801378e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_coord_t radius = style->body.radius;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	88db      	ldrh	r3, [r3, #6]
 8013796:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t swidth = style->body.shadow.width;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8a5b      	ldrh	r3, [r3, #18]
 801379e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t width  = lv_area_get_width(coords);
 80137a2:	68f8      	ldr	r0, [r7, #12]
 80137a4:	f7fc fc97 	bl	80100d6 <lv_area_get_width>
 80137a8:	4603      	mov	r3, r0
 80137aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t height = lv_area_get_height(coords);
 80137ae:	68f8      	ldr	r0, [r7, #12]
 80137b0:	f7fc fca8 	bl	8010104 <lv_area_get_height>
 80137b4:	4603      	mov	r3, r0
 80137b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 80137ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80137be:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80137c2:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 80137c6:	4618      	mov	r0, r3
 80137c8:	f000 fb2c 	bl	8013e24 <lv_draw_cont_radius_corr>
 80137cc:	4603      	mov	r3, r0
 80137ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 80137d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	461a      	mov	r2, r3
 80137da:	0052      	lsls	r2, r2, #1
 80137dc:	4413      	add	r3, r2
 80137de:	b29a      	uxth	r2, r3
 80137e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80137e4:	4413      	add	r3, r2
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    swidth += aa;
 80137ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80137f6:	4413      	add	r3, r2
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 80137fe:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8013802:	3304      	adds	r3, #4
 8013804:	f023 0303 	bic.w	r3, r3, #3
 8013808:	64bb      	str	r3, [r7, #72]	; 0x48
    curve_x_size *= sizeof(lv_coord_t);
 801380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8013810:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013814:	b2db      	uxtb	r3, r3
 8013816:	3303      	adds	r3, #3
 8013818:	b2db      	uxtb	r3, r3
 801381a:	f023 0303 	bic.w	r3, r3, #3
 801381e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    line_1d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8013822:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8013826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013828:	4413      	add	r3, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f7f8 fa4a 	bl	800bcc4 <lv_draw_get_buf>
 8013830:	6438      	str	r0, [r7, #64]	; 0x40

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 8013832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013834:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8013836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801383a:	4413      	add	r3, r2
 801383c:	63bb      	str	r3, [r7, #56]	; 0x38

    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 801383e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8013842:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8013846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801384a:	4618      	mov	r0, r3
 801384c:	f002 fe5f 	bl	801650e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8013850:	e017      	b.n	8013882 <lv_draw_shadow_bottom+0x110>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8013852:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8013856:	005b      	lsls	r3, r3, #1
 8013858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801385a:	4413      	add	r3, r2
 801385c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013860:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8013862:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801386a:	4413      	add	r3, r2
 801386c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013870:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 8013872:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8013876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801387a:	4611      	mov	r1, r2
 801387c:	4618      	mov	r0, r3
 801387e:	f002 fe75 	bl	801656c <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 8013882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013886:	4618      	mov	r0, r3
 8013888:	f002 fe5b 	bl	8016542 <lv_circ_cont>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	d1df      	bne.n	8013852 <lv_draw_shadow_bottom+0xe0>
    }

    int16_t col;

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8013892:	78fb      	ldrb	r3, [r7, #3]
 8013894:	2bff      	cmp	r3, #255	; 0xff
 8013896:	d102      	bne.n	801389e <lv_draw_shadow_bottom+0x12c>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	7a1b      	ldrb	r3, [r3, #8]
 801389c:	e00a      	b.n	80138b4 <lv_draw_shadow_bottom+0x142>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	7a1b      	ldrb	r3, [r3, #8]
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	78fb      	ldrb	r3, [r7, #3]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	fb12 f303 	smulbb	r3, r2, r3
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	0a1b      	lsrs	r3, r3, #8
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for(col = 0; col < swidth; col++) {
 80138b8:	2300      	movs	r3, #0
 80138ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80138be:	e01b      	b.n	80138f8 <lv_draw_shadow_bottom+0x186>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 80138c0:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80138c4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80138c8:	1ad3      	subs	r3, r2, r3
 80138ca:	461a      	mov	r2, r3
 80138cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138d0:	fb03 f302 	mul.w	r3, r3, r2
 80138d4:	085a      	lsrs	r2, r3, #1
 80138d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80138da:	fbb2 f1f3 	udiv	r1, r2, r3
 80138de:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80138e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138e4:	4413      	add	r3, r2
 80138e6:	b2ca      	uxtb	r2, r1
 80138e8:	701a      	strb	r2, [r3, #0]
    for(col = 0; col < swidth; col++) {
 80138ea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	3301      	adds	r3, #1
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80138f8:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80138fc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8013900:	429a      	cmp	r2, r3
 8013902:	dbdd      	blt.n	80138c0 <lv_draw_shadow_bottom+0x14e>
    lv_point_t point_r;
    lv_area_t area_mid;
    lv_point_t ofs_l;
    lv_point_t ofs_r;

    ofs_l.x = coords->x1 + radius;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f9b3 3000 	ldrsh.w	r3, [r3]
 801390a:	b29a      	uxth	r2, r3
 801390c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013910:	4413      	add	r3, r2
 8013912:	b29b      	uxth	r3, r3
 8013914:	b21b      	sxth	r3, r3
 8013916:	833b      	strh	r3, [r7, #24]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801391e:	b29a      	uxth	r2, r3
 8013920:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	b29a      	uxth	r2, r3
 8013928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801392c:	b29b      	uxth	r3, r3
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	b29b      	uxth	r3, r3
 8013932:	3301      	adds	r3, #1
 8013934:	b29b      	uxth	r3, r3
 8013936:	b21b      	sxth	r3, r3
 8013938:	837b      	strh	r3, [r7, #26]

    ofs_r.x = coords->x2 - radius;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013940:	b29a      	uxth	r2, r3
 8013942:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013946:	1ad3      	subs	r3, r2, r3
 8013948:	b29b      	uxth	r3, r3
 801394a:	b21b      	sxth	r3, r3
 801394c:	82bb      	strh	r3, [r7, #20]
    ofs_r.y = coords->y2 - radius + 1 - aa;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013954:	b29a      	uxth	r2, r3
 8013956:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	b29a      	uxth	r2, r3
 801395e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013962:	b29b      	uxth	r3, r3
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	b29b      	uxth	r3, r3
 8013968:	3301      	adds	r3, #1
 801396a:	b29b      	uxth	r3, r3
 801396c:	b21b      	sxth	r3, r3
 801396e:	82fb      	strh	r3, [r7, #22]

    for(col = 0; col <= radius; col++) {
 8013970:	2300      	movs	r3, #0
 8013972:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8013976:	e0b0      	b.n	8013ada <lv_draw_shadow_bottom+0x368>
        point_l.x = ofs_l.x - col;
 8013978:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801397c:	b29a      	uxth	r2, r3
 801397e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013982:	1ad3      	subs	r3, r2, r3
 8013984:	b29b      	uxth	r3, r3
 8013986:	b21b      	sxth	r3, r3
 8013988:	853b      	strh	r3, [r7, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 801398a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801398e:	b29a      	uxth	r2, r3
 8013990:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013998:	440b      	add	r3, r1
 801399a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4413      	add	r3, r2
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	b21b      	sxth	r3, r3
 80139a6:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_r.x = ofs_r.x + col;
 80139a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80139b2:	4413      	add	r3, r2
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	b21b      	sxth	r3, r3
 80139b8:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_r.y = ofs_r.y + curve_x[col];
 80139ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139be:	b29a      	uxth	r2, r3
 80139c0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80139c4:	005b      	lsls	r3, r3, #1
 80139c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139c8:	440b      	add	r3, r1
 80139ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4413      	add	r3, r2
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	b21b      	sxth	r3, r3
 80139d6:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_opa_t px_opa;
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 80139d8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d016      	beq.n	8013a0e <lv_draw_shadow_bottom+0x29c>
 80139e0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80139e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80139e8:	3b01      	subs	r3, #1
 80139ea:	005b      	lsls	r3, r3, #1
 80139ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139ee:	4413      	add	r3, r2
 80139f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80139fa:	005b      	lsls	r3, r3, #1
 80139fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139fe:	440b      	add	r3, r1
 8013a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	1ad3      	subs	r3, r2, r3
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	b21b      	sxth	r3, r3
 8013a0c:	e000      	b.n	8013a10 <lv_draw_shadow_bottom+0x29e>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	86bb      	strh	r3, [r7, #52]	; 0x34
        uint16_t d;
        for(d = 0; d < swidth; d++) {
 8013a12:	2300      	movs	r3, #0
 8013a14:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8013a18:	e052      	b.n	8013ac0 <lv_draw_shadow_bottom+0x34e>
            /*When stepping a pixel in y calculate the average with the pixel from the prev. column
             * to make a blur */
            if(diff == 0) {
 8013a1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d107      	bne.n	8013a32 <lv_draw_shadow_bottom+0x2c0>
                px_opa = line_1d_blur[d];
 8013a22:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a28:	4413      	add	r3, r2
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8013a30:	e015      	b.n	8013a5e <lv_draw_shadow_bottom+0x2ec>
            } else {
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8013a32:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a38:	4413      	add	r3, r2
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8013a42:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8013a46:	1acb      	subs	r3, r1, r3
 8013a48:	4619      	mov	r1, r3
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4c:	440b      	add	r3, r1
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	4413      	add	r3, r2
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	085b      	lsrs	r3, r3, #1
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            }
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8013a5e:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8013a62:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8013a6c:	9200      	str	r2, [sp, #0]
 8013a6e:	8a1b      	ldrh	r3, [r3, #16]
 8013a70:	68ba      	ldr	r2, [r7, #8]
 8013a72:	f7f8 fea0 	bl	800c7b6 <lv_draw_px>
            point_l.y++;
 8013a76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	b21b      	sxth	r3, r3
 8013a82:	857b      	strh	r3, [r7, #42]	; 0x2a

            /*Don't overdraw the pixel on the middle*/
            if(point_r.x > ofs_l.x) {
 8013a84:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8013a88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	dd0b      	ble.n	8013aa8 <lv_draw_shadow_bottom+0x336>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8013a90:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8013a94:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8013a9e:	9200      	str	r2, [sp, #0]
 8013aa0:	8a1b      	ldrh	r3, [r3, #16]
 8013aa2:	68ba      	ldr	r2, [r7, #8]
 8013aa4:	f7f8 fe87 	bl	800c7b6 <lv_draw_px>
            }
            point_r.y++;
 8013aa8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	3301      	adds	r3, #1
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	b21b      	sxth	r3, r3
 8013ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(d = 0; d < swidth; d++) {
 8013ab6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013aba:	3301      	adds	r3, #1
 8013abc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8013ac0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8013ac4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	dba6      	blt.n	8013a1a <lv_draw_shadow_bottom+0x2a8>
    for(col = 0; col <= radius; col++) {
 8013acc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8013ada:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8013ade:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	f77f af48 	ble.w	8013978 <lv_draw_shadow_bottom+0x206>
        }
    }

    area_mid.x1 = ofs_l.x + 1;
 8013ae8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	3301      	adds	r3, #1
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	b21b      	sxth	r3, r3
 8013af4:	83bb      	strh	r3, [r7, #28]
    area_mid.y1 = ofs_l.y + radius;
 8013af6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013b00:	4413      	add	r3, r2
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	b21b      	sxth	r3, r3
 8013b06:	83fb      	strh	r3, [r7, #30]
    area_mid.x2 = ofs_r.x - 1;
 8013b08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	b21b      	sxth	r3, r3
 8013b14:	843b      	strh	r3, [r7, #32]
    area_mid.y2 = area_mid.y1;
 8013b16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b1a:	847b      	strh	r3, [r7, #34]	; 0x22

    uint16_t d;
    for(d = 0; d < swidth; d++) {
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8013b22:	e01e      	b.n	8013b62 <lv_draw_shadow_bottom+0x3f0>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8013b24:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8013b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b2a:	4413      	add	r3, r2
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	f107 001c 	add.w	r0, r7, #28
 8013b34:	8a12      	ldrh	r2, [r2, #16]
 8013b36:	68b9      	ldr	r1, [r7, #8]
 8013b38:	f7f8 fed5 	bl	800c8e6 <lv_draw_fill>
        area_mid.y1++;
 8013b3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	3301      	adds	r3, #1
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	83fb      	strh	r3, [r7, #30]
        area_mid.y2++;
 8013b4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	3301      	adds	r3, #1
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	b21b      	sxth	r3, r3
 8013b56:	847b      	strh	r3, [r7, #34]	; 0x22
    for(d = 0; d < swidth; d++) {
 8013b58:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8013b62:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8013b66:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	dbda      	blt.n	8013b24 <lv_draw_shadow_bottom+0x3b2>
    }
}
 8013b6e:	bf00      	nop
 8013b70:	3760      	adds	r7, #96	; 0x60
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}

08013b76 <lv_draw_shadow_full_straight>:

static void lv_draw_shadow_full_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         const lv_opa_t * map)
{
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b090      	sub	sp, #64	; 0x40
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	60f8      	str	r0, [r7, #12]
 8013b7e:	60b9      	str	r1, [r7, #8]
 8013b80:	607a      	str	r2, [r7, #4]
 8013b82:	603b      	str	r3, [r7, #0]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013b84:	f7f7 f92c 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f001 fff8 	bl	8015b80 <lv_disp_get_antialiasing>
 8013b90:	4603      	mov	r3, r0
 8013b92:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    lv_coord_t radius = style->body.radius;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	88db      	ldrh	r3, [r3, #6]
 8013b9a:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t swidth = style->body.shadow.width;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	8a5b      	ldrh	r3, [r3, #18]
 8013ba0:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t width  = lv_area_get_width(coords);
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f7fc fa97 	bl	80100d6 <lv_area_get_width>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_coord_t height = lv_area_get_height(coords);
 8013bac:	68f8      	ldr	r0, [r7, #12]
 8013bae:	f7fc faa9 	bl	8010104 <lv_area_get_height>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	86bb      	strh	r3, [r7, #52]	; 0x34

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013bb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bb8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8013bbc:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f000 f92f 	bl	8013e24 <lv_draw_cont_radius_corr>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	877b      	strh	r3, [r7, #58]	; 0x3a
    radius += aa;
 8013bca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bd2:	4413      	add	r3, r2
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	877b      	strh	r3, [r7, #58]	; 0x3a

    lv_area_t right_area;
    right_area.x1 = coords->x2 + 1 - aa;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	1ad3      	subs	r3, r2, r3
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	3301      	adds	r3, #1
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	b21b      	sxth	r3, r3
 8013bf0:	853b      	strh	r3, [r7, #40]	; 0x28
    right_area.y1 = coords->y1 + radius + aa;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bfc:	4413      	add	r3, r2
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	4413      	add	r3, r2
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	b21b      	sxth	r3, r3
 8013c0c:	857b      	strh	r3, [r7, #42]	; 0x2a
    right_area.x2 = right_area.x1;
 8013c0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
    right_area.y2 = coords->y2 - radius - aa;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013c1a:	b29a      	uxth	r2, r3
 8013c1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c26:	b29b      	uxth	r3, r3
 8013c28:	1ad3      	subs	r3, r2, r3
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	b21b      	sxth	r3, r3
 8013c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    lv_area_t left_area;
    left_area.x1 = coords->x1 - 1 + aa;
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	4413      	add	r3, r2
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	3b01      	subs	r3, #1
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	b21b      	sxth	r3, r3
 8013c48:	843b      	strh	r3, [r7, #32]
    left_area.y1 = coords->y1 + radius + aa;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c54:	4413      	add	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	4413      	add	r3, r2
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	b21b      	sxth	r3, r3
 8013c64:	847b      	strh	r3, [r7, #34]	; 0x22
    left_area.x2 = left_area.x1;
 8013c66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c6a:	84bb      	strh	r3, [r7, #36]	; 0x24
    left_area.y2 = coords->y2 - radius - aa;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c76:	1ad3      	subs	r3, r2, r3
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	b21b      	sxth	r3, r3
 8013c86:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t top_area;
    top_area.x1 = coords->x1 + radius + aa;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c92:	4413      	add	r3, r2
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	4413      	add	r3, r2
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	b21b      	sxth	r3, r3
 8013ca2:	833b      	strh	r3, [r7, #24]
    top_area.y1 = coords->y1 - 1 + aa;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	4413      	add	r3, r2
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	3b01      	subs	r3, #1
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	b21b      	sxth	r3, r3
 8013cbc:	837b      	strh	r3, [r7, #26]
    top_area.x2 = coords->x2 - radius - aa;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29a      	uxth	r2, r3
 8013ccc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	b21b      	sxth	r3, r3
 8013cd8:	83bb      	strh	r3, [r7, #28]
    top_area.y2 = top_area.y1;
 8013cda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013cde:	83fb      	strh	r3, [r7, #30]

    lv_area_t bottom_area;
    bottom_area.x1 = coords->x1 + radius + aa;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013cea:	4413      	add	r3, r2
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	4413      	add	r3, r2
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	b21b      	sxth	r3, r3
 8013cfa:	823b      	strh	r3, [r7, #16]
    bottom_area.y1 = coords->y2 + 1 - aa;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	3301      	adds	r3, #1
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	b21b      	sxth	r3, r3
 8013d14:	827b      	strh	r3, [r7, #18]
    bottom_area.x2 = coords->x2 - radius - aa;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	b21b      	sxth	r3, r3
 8013d30:	82bb      	strh	r3, [r7, #20]
    bottom_area.y2 = bottom_area.y1;
 8013d32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d36:	82fb      	strh	r3, [r7, #22]

    lv_opa_t opa_act;
    int16_t d;
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8013d38:	2301      	movs	r3, #1
 8013d3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013d3c:	e068      	b.n	8013e10 <lv_draw_shadow_full_straight+0x29a>
        opa_act = map[d];
 8013d3e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8013d42:	683a      	ldr	r2, [r7, #0]
 8013d44:	4413      	add	r3, r2
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8013d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8013d56:	8a12      	ldrh	r2, [r2, #16]
 8013d58:	68b9      	ldr	r1, [r7, #8]
 8013d5a:	f7f8 fdc4 	bl	800c8e6 <lv_draw_fill>
        right_area.x1++;
 8013d5e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	3301      	adds	r3, #1
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	b21b      	sxth	r3, r3
 8013d6a:	853b      	strh	r3, [r7, #40]	; 0x28
        right_area.x2++;
 8013d6c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3301      	adds	r3, #1
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	b21b      	sxth	r3, r3
 8013d78:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8013d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	f107 0020 	add.w	r0, r7, #32
 8013d84:	8a12      	ldrh	r2, [r2, #16]
 8013d86:	68b9      	ldr	r1, [r7, #8]
 8013d88:	f7f8 fdad 	bl	800c8e6 <lv_draw_fill>
        left_area.x1--;
 8013d8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	3b01      	subs	r3, #1
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	b21b      	sxth	r3, r3
 8013d98:	843b      	strh	r3, [r7, #32]
        left_area.x2--;
 8013d9a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	3b01      	subs	r3, #1
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	b21b      	sxth	r3, r3
 8013da6:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8013da8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	f107 0018 	add.w	r0, r7, #24
 8013db2:	8a12      	ldrh	r2, [r2, #16]
 8013db4:	68b9      	ldr	r1, [r7, #8]
 8013db6:	f7f8 fd96 	bl	800c8e6 <lv_draw_fill>
        top_area.y1--;
 8013dba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	3b01      	subs	r3, #1
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	b21b      	sxth	r3, r3
 8013dc6:	837b      	strh	r3, [r7, #26]
        top_area.y2--;
 8013dc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	b21b      	sxth	r3, r3
 8013dd4:	83fb      	strh	r3, [r7, #30]

        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8013dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	f107 0010 	add.w	r0, r7, #16
 8013de0:	8a12      	ldrh	r2, [r2, #16]
 8013de2:	68b9      	ldr	r1, [r7, #8]
 8013de4:	f7f8 fd7f 	bl	800c8e6 <lv_draw_fill>
        bottom_area.y1++;
 8013de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	3301      	adds	r3, #1
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	b21b      	sxth	r3, r3
 8013df4:	827b      	strh	r3, [r7, #18]
        bottom_area.y2++;
 8013df6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	b21b      	sxth	r3, r3
 8013e02:	82fb      	strh	r3, [r7, #22]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8013e04:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013e10:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8013e14:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	dd90      	ble.n	8013d3e <lv_draw_shadow_full_straight+0x1c8>
    }
}
 8013e1c:	bf00      	nop
 8013e1e:	3740      	adds	r7, #64	; 0x40
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <lv_draw_cont_radius_corr>:

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	80fb      	strh	r3, [r7, #6]
 8013e2e:	460b      	mov	r3, r1
 8013e30:	80bb      	strh	r3, [r7, #4]
 8013e32:	4613      	mov	r3, r2
 8013e34:	807b      	strh	r3, [r7, #2]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013e36:	f7f6 ffd3 	bl	800ade0 <lv_refr_get_disp_refreshing>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f001 fe9f 	bl	8015b80 <lv_disp_get_antialiasing>
 8013e42:	4603      	mov	r3, r0
 8013e44:	73fb      	strb	r3, [r7, #15]

    if(r >= (w >> 1)) {
 8013e46:	88fb      	ldrh	r3, [r7, #6]
 8013e48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013e4c:	1052      	asrs	r2, r2, #1
 8013e4e:	b212      	sxth	r2, r2
 8013e50:	4293      	cmp	r3, r2
 8013e52:	db0a      	blt.n	8013e6a <lv_draw_cont_radius_corr+0x46>
        r = (w >> 1);
 8013e54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013e58:	105b      	asrs	r3, r3, #1
 8013e5a:	b21b      	sxth	r3, r3
 8013e5c:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 8013e5e:	88fb      	ldrh	r3, [r7, #6]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <lv_draw_cont_radius_corr+0x46>
 8013e64:	88fb      	ldrh	r3, [r7, #6]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	80fb      	strh	r3, [r7, #6]
    }
    if(r >= (h >> 1)) {
 8013e6a:	88fb      	ldrh	r3, [r7, #6]
 8013e6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013e70:	1052      	asrs	r2, r2, #1
 8013e72:	b212      	sxth	r2, r2
 8013e74:	4293      	cmp	r3, r2
 8013e76:	db0a      	blt.n	8013e8e <lv_draw_cont_radius_corr+0x6a>
        r = (h >> 1);
 8013e78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e7c:	105b      	asrs	r3, r3, #1
 8013e7e:	b21b      	sxth	r3, r3
 8013e80:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 8013e82:	88fb      	ldrh	r3, [r7, #6]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d002      	beq.n	8013e8e <lv_draw_cont_radius_corr+0x6a>
 8013e88:	88fb      	ldrh	r3, [r7, #6]
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	80fb      	strh	r3, [r7, #6]
    }

    if(r > 0) r -= aa;
 8013e8e:	88fb      	ldrh	r3, [r7, #6]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d004      	beq.n	8013e9e <lv_draw_cont_radius_corr+0x7a>
 8013e94:	7bfb      	ldrb	r3, [r7, #15]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	88fa      	ldrh	r2, [r7, #6]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	80fb      	strh	r3, [r7, #6]

    return r;
 8013e9e:	88fb      	ldrh	r3, [r7, #6]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	4603      	mov	r3, r0
 8013eb0:	80fb      	strh	r3, [r7, #6]
 8013eb2:	460b      	mov	r3, r1
 8013eb4:	80bb      	strh	r3, [r7, #4]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	70fb      	strb	r3, [r7, #3]
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8013eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d10a      	bne.n	8013ed8 <antialias_get_opa_circ+0x30>
 8013ec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013ec6:	4a20      	ldr	r2, [pc, #128]	; (8013f48 <antialias_get_opa_circ+0xa0>)
 8013ec8:	5cd3      	ldrb	r3, [r2, r3]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	78fb      	ldrb	r3, [r7, #3]
 8013ece:	fb03 f302 	mul.w	r3, r3, r2
 8013ed2:	121b      	asrs	r3, r3, #8
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	e031      	b.n	8013f3c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8013ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013edc:	2b03      	cmp	r3, #3
 8013ede:	d10a      	bne.n	8013ef6 <antialias_get_opa_circ+0x4e>
 8013ee0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013ee4:	4a19      	ldr	r2, [pc, #100]	; (8013f4c <antialias_get_opa_circ+0xa4>)
 8013ee6:	5cd3      	ldrb	r3, [r2, r3]
 8013ee8:	461a      	mov	r2, r3
 8013eea:	78fb      	ldrb	r3, [r7, #3]
 8013eec:	fb03 f302 	mul.w	r3, r3, r2
 8013ef0:	121b      	asrs	r3, r3, #8
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	e022      	b.n	8013f3c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8013ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013efa:	2b04      	cmp	r3, #4
 8013efc:	d10a      	bne.n	8013f14 <antialias_get_opa_circ+0x6c>
 8013efe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013f02:	4a13      	ldr	r2, [pc, #76]	; (8013f50 <antialias_get_opa_circ+0xa8>)
 8013f04:	5cd3      	ldrb	r3, [r2, r3]
 8013f06:	461a      	mov	r2, r3
 8013f08:	78fb      	ldrb	r3, [r7, #3]
 8013f0a:	fb03 f302 	mul.w	r3, r3, r2
 8013f0e:	121b      	asrs	r3, r3, #8
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	e013      	b.n	8013f3c <antialias_get_opa_circ+0x94>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8013f14:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013f18:	4613      	mov	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	1a9b      	subs	r3, r3, r2
 8013f1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013f22:	3a01      	subs	r2, #1
 8013f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f28:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8013f2a:	7bfb      	ldrb	r3, [r7, #15]
 8013f2c:	4a09      	ldr	r2, [pc, #36]	; (8013f54 <antialias_get_opa_circ+0xac>)
 8013f2e:	5cd3      	ldrb	r3, [r2, r3]
 8013f30:	461a      	mov	r2, r3
 8013f32:	78fb      	ldrb	r3, [r7, #3]
 8013f34:	fb03 f302 	mul.w	r3, r3, r2
 8013f38:	0a1b      	lsrs	r3, r3, #8
 8013f3a:	b2db      	uxtb	r3, r3
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3714      	adds	r7, #20
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr
 8013f48:	0802ddcc 	.word	0x0802ddcc
 8013f4c:	0802ddd0 	.word	0x0802ddd0
 8013f50:	0802ddd4 	.word	0x0802ddd4
 8013f54:	0802ddd8 	.word	0x0802ddd8

08013f58 <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b088      	sub	sp, #32
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
    if(entry_cnt == 0) {
 8013f62:	4b6b      	ldr	r3, [pc, #428]	; (8014110 <lv_img_cache_open+0x1b8>)
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d101      	bne.n	8013f6e <lv_img_cache_open+0x16>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	e0cc      	b.n	8014108 <lv_img_cache_open+0x1b0>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8013f6e:	4b69      	ldr	r3, [pc, #420]	; (8014114 <lv_img_cache_open+0x1bc>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8013f74:	2300      	movs	r3, #0
 8013f76:	83fb      	strh	r3, [r7, #30]
 8013f78:	e021      	b.n	8013fbe <lv_img_cache_open+0x66>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8013f7a:	8bfa      	ldrh	r2, [r7, #30]
 8013f7c:	4613      	mov	r3, r2
 8013f7e:	009b      	lsls	r3, r3, #2
 8013f80:	4413      	add	r3, r2
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	461a      	mov	r2, r3
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	4413      	add	r3, r2
 8013f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8c:	4a62      	ldr	r2, [pc, #392]	; (8014118 <lv_img_cache_open+0x1c0>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	db12      	blt.n	8013fb8 <lv_img_cache_open+0x60>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8013f92:	8bfa      	ldrh	r2, [r7, #30]
 8013f94:	4613      	mov	r3, r2
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	4413      	add	r3, r2
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	4413      	add	r3, r2
 8013fa2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013fa4:	8bfa      	ldrh	r2, [r7, #30]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	461a      	mov	r2, r3
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	1e4a      	subs	r2, r1, #1
 8013fb6:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8013fb8:	8bfb      	ldrh	r3, [r7, #30]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	83fb      	strh	r3, [r7, #30]
 8013fbe:	4b54      	ldr	r3, [pc, #336]	; (8014110 <lv_img_cache_open+0x1b8>)
 8013fc0:	881b      	ldrh	r3, [r3, #0]
 8013fc2:	8bfa      	ldrh	r2, [r7, #30]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d3d8      	bcc.n	8013f7a <lv_img_cache_open+0x22>
        }
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < entry_cnt; i++) {
 8013fcc:	2300      	movs	r3, #0
 8013fce:	83fb      	strh	r3, [r7, #30]
 8013fd0:	e02a      	b.n	8014028 <lv_img_cache_open+0xd0>
        if(cache[i].dec_dsc.src == src) {
 8013fd2:	8bfa      	ldrh	r2, [r7, #30]
 8013fd4:	4613      	mov	r3, r2
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	4413      	add	r3, r2
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	461a      	mov	r2, r3
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d11b      	bne.n	8014022 <lv_img_cache_open+0xca>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8013fea:	8bfa      	ldrh	r2, [r7, #30]
 8013fec:	4613      	mov	r3, r2
 8013fee:	009b      	lsls	r3, r3, #2
 8013ff0:	4413      	add	r3, r2
 8013ff2:	00db      	lsls	r3, r3, #3
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	61bb      	str	r3, [r7, #24]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014000:	461a      	mov	r2, r3
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	699b      	ldr	r3, [r3, #24]
 8014006:	4413      	add	r3, r2
 8014008:	461a      	mov	r2, r3
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014016:	dd0d      	ble.n	8014034 <lv_img_cache_open+0xdc>
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801401e:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8014020:	e008      	b.n	8014034 <lv_img_cache_open+0xdc>
    for(i = 0; i < entry_cnt; i++) {
 8014022:	8bfb      	ldrh	r3, [r7, #30]
 8014024:	3301      	adds	r3, #1
 8014026:	83fb      	strh	r3, [r7, #30]
 8014028:	4b39      	ldr	r3, [pc, #228]	; (8014110 <lv_img_cache_open+0x1b8>)
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	8bfa      	ldrh	r2, [r7, #30]
 801402e:	429a      	cmp	r2, r3
 8014030:	d3cf      	bcc.n	8013fd2 <lv_img_cache_open+0x7a>
 8014032:	e000      	b.n	8014036 <lv_img_cache_open+0xde>
            break;
 8014034:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
 8014036:	69bb      	ldr	r3, [r7, #24]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d164      	bne.n	8014106 <lv_img_cache_open+0x1ae>
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8014040:	2301      	movs	r3, #1
 8014042:	83fb      	strh	r3, [r7, #30]
 8014044:	e018      	b.n	8014078 <lv_img_cache_open+0x120>
            if(cache[i].life < cached_src->life) {
 8014046:	8bfa      	ldrh	r2, [r7, #30]
 8014048:	4613      	mov	r3, r2
 801404a:	009b      	lsls	r3, r3, #2
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	461a      	mov	r2, r3
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	4413      	add	r3, r2
 8014056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801405c:	429a      	cmp	r2, r3
 801405e:	da08      	bge.n	8014072 <lv_img_cache_open+0x11a>
                cached_src = &cache[i];
 8014060:	8bfa      	ldrh	r2, [r7, #30]
 8014062:	4613      	mov	r3, r2
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	4413      	add	r3, r2
 8014068:	00db      	lsls	r3, r3, #3
 801406a:	461a      	mov	r2, r3
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	4413      	add	r3, r2
 8014070:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8014072:	8bfb      	ldrh	r3, [r7, #30]
 8014074:	3301      	adds	r3, #1
 8014076:	83fb      	strh	r3, [r7, #30]
 8014078:	4b25      	ldr	r3, [pc, #148]	; (8014110 <lv_img_cache_open+0x1b8>)
 801407a:	881b      	ldrh	r3, [r3, #0]
 801407c:	8bfa      	ldrh	r2, [r7, #30]
 801407e:	429a      	cmp	r2, r3
 8014080:	d3e1      	bcc.n	8014046 <lv_img_cache_open+0xee>
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
 8014082:	69bb      	ldr	r3, [r7, #24]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d003      	beq.n	8014092 <lv_img_cache_open+0x13a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	4618      	mov	r0, r3
 801408e:	f000 fa21 	bl	80144d4 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
 8014092:	f001 fe15 	bl	8015cc0 <lv_tick_get>
 8014096:	6138      	str	r0, [r7, #16]
        cached_src->dec_dsc.time_to_open = 0;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	2200      	movs	r2, #0
 801409c:	619a      	str	r2, [r3, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	683a      	ldr	r2, [r7, #0]
 80140a2:	6879      	ldr	r1, [r7, #4]
 80140a4:	4618      	mov	r0, r3
 80140a6:	f000 f987 	bl	80143b8 <lv_img_decoder_open>
 80140aa:	4603      	mov	r3, r0
 80140ac:	73fb      	strb	r3, [r7, #15]
        if(open_res == LV_RES_INV) {
 80140ae:	7bfb      	ldrb	r3, [r7, #15]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d114      	bne.n	80140de <lv_img_cache_open+0x186>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f000 fa0c 	bl	80144d4 <lv_img_decoder_close>
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80140bc:	69bb      	ldr	r3, [r7, #24]
 80140be:	2224      	movs	r2, #36	; 0x24
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f016 ffaf 	bl	802b026 <memset>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 80140c8:	2228      	movs	r2, #40	; 0x28
 80140ca:	2100      	movs	r1, #0
 80140cc:	69b8      	ldr	r0, [r7, #24]
 80140ce:	f016 ffaa 	bl	802b026 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80140d8:	625a      	str	r2, [r3, #36]	; 0x24
            return NULL;
 80140da:	2300      	movs	r3, #0
 80140dc:	e014      	b.n	8014108 <lv_img_cache_open+0x1b0>
        }

        cached_src->life = 0;
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	2200      	movs	r2, #0
 80140e2:	625a      	str	r2, [r3, #36]	; 0x24

        /*If `time_to_open` was not set in the open function set it here*/
        if(cached_src->dec_dsc.time_to_open == 0) {
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	699b      	ldr	r3, [r3, #24]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d105      	bne.n	80140f8 <lv_img_cache_open+0x1a0>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80140ec:	6938      	ldr	r0, [r7, #16]
 80140ee:	f001 fe01 	bl	8015cf4 <lv_tick_elaps>
 80140f2:	4602      	mov	r2, r0
 80140f4:	69bb      	ldr	r3, [r7, #24]
 80140f6:	619a      	str	r2, [r3, #24]
        }

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80140f8:	69bb      	ldr	r3, [r7, #24]
 80140fa:	699b      	ldr	r3, [r3, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d102      	bne.n	8014106 <lv_img_cache_open+0x1ae>
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	2201      	movs	r2, #1
 8014104:	619a      	str	r2, [r3, #24]
    }

    return cached_src;
 8014106:	69bb      	ldr	r3, [r7, #24]
}
 8014108:	4618      	mov	r0, r3
 801410a:	3720      	adds	r7, #32
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	20017774 	.word	0x20017774
 8014114:	2001bbb0 	.word	0x2001bbb0
 8014118:	80000002 	.word	0x80000002

0801411c <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	4603      	mov	r3, r0
 8014124:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8014126:	4b27      	ldr	r3, [pc, #156]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 801412e:	2000      	movs	r0, #0
 8014130:	f000 f84c 	bl	80141cc <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8014134:	4b23      	ldr	r3, [pc, #140]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4618      	mov	r0, r3
 801413a:	f002 ff27 	bl	8016f8c <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 801413e:	88fa      	ldrh	r2, [r7, #6]
 8014140:	4613      	mov	r3, r2
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4413      	add	r3, r2
 8014146:	00db      	lsls	r3, r3, #3
 8014148:	4618      	mov	r0, r3
 801414a:	f002 fedf 	bl	8016f0c <lv_mem_alloc>
 801414e:	4602      	mov	r2, r0
 8014150:	4b1c      	ldr	r3, [pc, #112]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014152:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8014154:	4b1b      	ldr	r3, [pc, #108]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d100      	bne.n	801415e <lv_img_cache_set_size+0x42>
 801415c:	e7fe      	b.n	801415c <lv_img_cache_set_size+0x40>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 801415e:	4b19      	ldr	r3, [pc, #100]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d103      	bne.n	801416e <lv_img_cache_set_size+0x52>
        entry_cnt = 0;
 8014166:	4b18      	ldr	r3, [pc, #96]	; (80141c8 <lv_img_cache_set_size+0xac>)
 8014168:	2200      	movs	r2, #0
 801416a:	801a      	strh	r2, [r3, #0]
        return;
 801416c:	e027      	b.n	80141be <lv_img_cache_set_size+0xa2>
    }
    entry_cnt = new_entry_cnt;
 801416e:	4a16      	ldr	r2, [pc, #88]	; (80141c8 <lv_img_cache_set_size+0xac>)
 8014170:	88fb      	ldrh	r3, [r7, #6]
 8014172:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8014174:	2300      	movs	r3, #0
 8014176:	81fb      	strh	r3, [r7, #14]
 8014178:	e01c      	b.n	80141b4 <lv_img_cache_set_size+0x98>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801417a:	4b12      	ldr	r3, [pc, #72]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 801417c:	6819      	ldr	r1, [r3, #0]
 801417e:	89fa      	ldrh	r2, [r7, #14]
 8014180:	4613      	mov	r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	2224      	movs	r2, #36	; 0x24
 801418c:	2100      	movs	r1, #0
 801418e:	4618      	mov	r0, r3
 8014190:	f016 ff49 	bl	802b026 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 8014194:	4b0b      	ldr	r3, [pc, #44]	; (80141c4 <lv_img_cache_set_size+0xa8>)
 8014196:	6819      	ldr	r1, [r3, #0]
 8014198:	89fa      	ldrh	r2, [r7, #14]
 801419a:	4613      	mov	r3, r2
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	4413      	add	r3, r2
 80141a0:	00db      	lsls	r3, r3, #3
 80141a2:	440b      	add	r3, r1
 80141a4:	2228      	movs	r2, #40	; 0x28
 80141a6:	2100      	movs	r1, #0
 80141a8:	4618      	mov	r0, r3
 80141aa:	f016 ff3c 	bl	802b026 <memset>
    for(i = 0; i < entry_cnt; i++) {
 80141ae:	89fb      	ldrh	r3, [r7, #14]
 80141b0:	3301      	adds	r3, #1
 80141b2:	81fb      	strh	r3, [r7, #14]
 80141b4:	4b04      	ldr	r3, [pc, #16]	; (80141c8 <lv_img_cache_set_size+0xac>)
 80141b6:	881b      	ldrh	r3, [r3, #0]
 80141b8:	89fa      	ldrh	r2, [r7, #14]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d3dd      	bcc.n	801417a <lv_img_cache_set_size+0x5e>
    }
}
 80141be:	3710      	adds	r7, #16
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	2001bbb0 	.word	0x2001bbb0
 80141c8:	20017774 	.word	0x20017774

080141cc <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80141d4:	4b28      	ldr	r3, [pc, #160]	; (8014278 <lv_img_cache_invalidate_src+0xac>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80141da:	2300      	movs	r3, #0
 80141dc:	81fb      	strh	r3, [r7, #14]
 80141de:	e041      	b.n	8014264 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 80141e0:	89fa      	ldrh	r2, [r7, #14]
 80141e2:	4613      	mov	r3, r2
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	4413      	add	r3, r2
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	461a      	mov	r2, r3
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	4413      	add	r3, r2
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d002      	beq.n	80141fe <lv_img_cache_invalidate_src+0x32>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d12f      	bne.n	801425e <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 80141fe:	89fa      	ldrh	r2, [r7, #14]
 8014200:	4613      	mov	r3, r2
 8014202:	009b      	lsls	r3, r3, #2
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	461a      	mov	r2, r3
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	4413      	add	r3, r2
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d00a      	beq.n	801422a <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8014214:	89fa      	ldrh	r2, [r7, #14]
 8014216:	4613      	mov	r3, r2
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	4413      	add	r3, r2
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	461a      	mov	r2, r3
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	4413      	add	r3, r2
 8014224:	4618      	mov	r0, r3
 8014226:	f000 f955 	bl	80144d4 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801422a:	89fa      	ldrh	r2, [r7, #14]
 801422c:	4613      	mov	r3, r2
 801422e:	009b      	lsls	r3, r3, #2
 8014230:	4413      	add	r3, r2
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	461a      	mov	r2, r3
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	4413      	add	r3, r2
 801423a:	2224      	movs	r2, #36	; 0x24
 801423c:	2100      	movs	r1, #0
 801423e:	4618      	mov	r0, r3
 8014240:	f016 fef1 	bl	802b026 <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8014244:	89fa      	ldrh	r2, [r7, #14]
 8014246:	4613      	mov	r3, r2
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	461a      	mov	r2, r3
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	4413      	add	r3, r2
 8014254:	2228      	movs	r2, #40	; 0x28
 8014256:	2100      	movs	r1, #0
 8014258:	4618      	mov	r0, r3
 801425a:	f016 fee4 	bl	802b026 <memset>
    for(i = 0; i < entry_cnt; i++) {
 801425e:	89fb      	ldrh	r3, [r7, #14]
 8014260:	3301      	adds	r3, #1
 8014262:	81fb      	strh	r3, [r7, #14]
 8014264:	4b05      	ldr	r3, [pc, #20]	; (801427c <lv_img_cache_invalidate_src+0xb0>)
 8014266:	881b      	ldrh	r3, [r3, #0]
 8014268:	89fa      	ldrh	r2, [r7, #14]
 801426a:	429a      	cmp	r2, r3
 801426c:	d3b8      	bcc.n	80141e0 <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 801426e:	bf00      	nop
 8014270:	3710      	adds	r7, #16
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	2001bbb0 	.word	0x2001bbb0
 801427c:	20017774 	.word	0x20017774

08014280 <lv_color_make>:
{
 8014280:	b480      	push	{r7}
 8014282:	b085      	sub	sp, #20
 8014284:	af00      	add	r7, sp, #0
 8014286:	4603      	mov	r3, r0
 8014288:	71fb      	strb	r3, [r7, #7]
 801428a:	460b      	mov	r3, r1
 801428c:	71bb      	strb	r3, [r7, #6]
 801428e:	4613      	mov	r3, r2
 8014290:	717b      	strb	r3, [r7, #5]
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8014292:	79bb      	ldrb	r3, [r7, #6]
 8014294:	095b      	lsrs	r3, r3, #5
 8014296:	b2db      	uxtb	r3, r3
 8014298:	f003 0307 	and.w	r3, r3, #7
 801429c:	b2da      	uxtb	r2, r3
 801429e:	7b3b      	ldrb	r3, [r7, #12]
 80142a0:	f362 0302 	bfi	r3, r2, #0, #3
 80142a4:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80142a6:	79fb      	ldrb	r3, [r7, #7]
 80142a8:	08db      	lsrs	r3, r3, #3
 80142aa:	b2db      	uxtb	r3, r3
 80142ac:	f003 031f 	and.w	r3, r3, #31
 80142b0:	b2da      	uxtb	r2, r3
 80142b2:	7b3b      	ldrb	r3, [r7, #12]
 80142b4:	f362 03c7 	bfi	r3, r2, #3, #5
 80142b8:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80142ba:	797b      	ldrb	r3, [r7, #5]
 80142bc:	08db      	lsrs	r3, r3, #3
 80142be:	b2db      	uxtb	r3, r3
 80142c0:	f003 031f 	and.w	r3, r3, #31
 80142c4:	b2da      	uxtb	r2, r3
 80142c6:	7b7b      	ldrb	r3, [r7, #13]
 80142c8:	f362 0304 	bfi	r3, r2, #0, #5
 80142cc:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80142ce:	79bb      	ldrb	r3, [r7, #6]
 80142d0:	089b      	lsrs	r3, r3, #2
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	f003 0307 	and.w	r3, r3, #7
 80142d8:	b2da      	uxtb	r2, r3
 80142da:	7b7b      	ldrb	r3, [r7, #13]
 80142dc:	f362 1347 	bfi	r3, r2, #5, #3
 80142e0:	737b      	strb	r3, [r7, #13]
    return color;
 80142e2:	89bb      	ldrh	r3, [r7, #12]
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	3714      	adds	r7, #20
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr

080142f0 <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 80142f6:	2114      	movs	r1, #20
 80142f8:	4810      	ldr	r0, [pc, #64]	; (801433c <lv_img_decoder_init+0x4c>)
 80142fa:	f002 fb05 	bl	8016908 <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 80142fe:	f000 f8ff 	bl	8014500 <lv_img_decoder_create>
 8014302:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d103      	bne.n	8014312 <lv_img_decoder_init+0x22>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        lv_mem_assert(decoder);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d111      	bne.n	8014334 <lv_img_decoder_init+0x44>
 8014310:	e7fe      	b.n	8014310 <lv_img_decoder_init+0x20>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8014312:	490b      	ldr	r1, [pc, #44]	; (8014340 <lv_img_decoder_init+0x50>)
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f000 f90f 	bl	8014538 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801431a:	490a      	ldr	r1, [pc, #40]	; (8014344 <lv_img_decoder_init+0x54>)
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 f919 	bl	8014554 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8014322:	4909      	ldr	r1, [pc, #36]	; (8014348 <lv_img_decoder_init+0x58>)
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 f923 	bl	8014570 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801432a:	4908      	ldr	r1, [pc, #32]	; (801434c <lv_img_decoder_init+0x5c>)
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f000 f92d 	bl	801458c <lv_img_decoder_set_close_cb>
 8014332:	e000      	b.n	8014336 <lv_img_decoder_init+0x46>
        return;
 8014334:	bf00      	nop
}
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	2001bb94 	.word	0x2001bb94
 8014340:	080145a9 	.word	0x080145a9
 8014344:	080146ad 	.word	0x080146ad
 8014348:	08014905 	.word	0x08014905
 801434c:	08014a29 	.word	0x08014a29

08014350 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 801435a:	683a      	ldr	r2, [r7, #0]
 801435c:	7813      	ldrb	r3, [r2, #0]
 801435e:	f36f 1347 	bfc	r3, #5, #3
 8014362:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 8014364:	2300      	movs	r3, #0
 8014366:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014368:	4812      	ldr	r0, [pc, #72]	; (80143b4 <lv_img_decoder_get_info+0x64>)
 801436a:	f002 fc4f 	bl	8016c0c <lv_ll_get_head>
 801436e:	60b8      	str	r0, [r7, #8]
 8014370:	e015      	b.n	801439e <lv_img_decoder_get_info+0x4e>
    {
        res = LV_RES_INV;
 8014372:	2300      	movs	r3, #0
 8014374:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00a      	beq.n	8014394 <lv_img_decoder_get_info+0x44>
            res = d->info_cb(d, src, header);
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	6879      	ldr	r1, [r7, #4]
 8014386:	68b8      	ldr	r0, [r7, #8]
 8014388:	4798      	blx	r3
 801438a:	4603      	mov	r3, r0
 801438c:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 801438e:	7bfb      	ldrb	r3, [r7, #15]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d008      	beq.n	80143a6 <lv_img_decoder_get_info+0x56>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014394:	68b9      	ldr	r1, [r7, #8]
 8014396:	4807      	ldr	r0, [pc, #28]	; (80143b4 <lv_img_decoder_get_info+0x64>)
 8014398:	f002 fc5e 	bl	8016c58 <lv_ll_get_next>
 801439c:	60b8      	str	r0, [r7, #8]
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d1e6      	bne.n	8014372 <lv_img_decoder_get_info+0x22>
 80143a4:	e000      	b.n	80143a8 <lv_img_decoder_get_info+0x58>
            if(res == LV_RES_OK) break;
 80143a6:	bf00      	nop
        }
    }

    return res;
 80143a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	2001bb94 	.word	0x2001bb94

080143b8 <lv_img_decoder_open>:
 * @param style the style of the image
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, const lv_style_t * style)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	607a      	str	r2, [r7, #4]
    dsc->style     = style;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	609a      	str	r2, [r3, #8]
    dsc->src       = src;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	68ba      	ldr	r2, [r7, #8]
 80143ce:	605a      	str	r2, [r3, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 80143d0:	68b8      	ldr	r0, [r7, #8]
 80143d2:	f7f9 fa71 	bl	800d8b8 <lv_img_src_get_type>
 80143d6:	4603      	mov	r3, r0
 80143d8:	461a      	mov	r2, r3
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2200      	movs	r2, #0
 80143e2:	621a      	str	r2, [r3, #32]

    lv_res_t res = LV_RES_INV;
 80143e4:	2300      	movs	r3, #0
 80143e6:	75fb      	strb	r3, [r7, #23]

    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80143e8:	4823      	ldr	r0, [pc, #140]	; (8014478 <lv_img_decoder_open+0xc0>)
 80143ea:	f002 fc0f 	bl	8016c0c <lv_ll_get_head>
 80143ee:	6138      	str	r0, [r7, #16]
 80143f0:	e02f      	b.n	8014452 <lv_img_decoder_open+0x9a>
    {
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d023      	beq.n	8014442 <lv_img_decoder_open+0x8a>
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d01f      	beq.n	8014442 <lv_img_decoder_open+0x8a>

        res = d->info_cb(d, src, &dsc->header);
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	3210      	adds	r2, #16
 801440a:	68b9      	ldr	r1, [r7, #8]
 801440c:	6938      	ldr	r0, [r7, #16]
 801440e:	4798      	blx	r3
 8014410:	4603      	mov	r3, r0
 8014412:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) continue;
 8014414:	7dfb      	ldrb	r3, [r7, #23]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d115      	bne.n	8014446 <lv_img_decoder_open+0x8e>

        dsc->error_msg = NULL;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2200      	movs	r2, #0
 801441e:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2200      	movs	r2, #0
 8014424:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	693a      	ldr	r2, [r7, #16]
 801442a:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	68f9      	ldr	r1, [r7, #12]
 8014432:	6938      	ldr	r0, [r7, #16]
 8014434:	4798      	blx	r3
 8014436:	4603      	mov	r3, r0
 8014438:	75fb      	strb	r3, [r7, #23]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 801443a:	7dfb      	ldrb	r3, [r7, #23]
 801443c:	2b01      	cmp	r3, #1
 801443e:	d00c      	beq.n	801445a <lv_img_decoder_open+0xa2>
 8014440:	e002      	b.n	8014448 <lv_img_decoder_open+0x90>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8014442:	bf00      	nop
 8014444:	e000      	b.n	8014448 <lv_img_decoder_open+0x90>
        if(res != LV_RES_OK) continue;
 8014446:	bf00      	nop
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014448:	6939      	ldr	r1, [r7, #16]
 801444a:	480b      	ldr	r0, [pc, #44]	; (8014478 <lv_img_decoder_open+0xc0>)
 801444c:	f002 fc04 	bl	8016c58 <lv_ll_get_next>
 8014450:	6138      	str	r0, [r7, #16]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d1cc      	bne.n	80143f2 <lv_img_decoder_open+0x3a>
 8014458:	e000      	b.n	801445c <lv_img_decoder_open+0xa4>
        if(res == LV_RES_OK) break;
 801445a:	bf00      	nop
    }

    if(res == LV_RES_INV) {
 801445c:	7dfb      	ldrb	r3, [r7, #23]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d104      	bne.n	801446c <lv_img_decoder_open+0xb4>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8014462:	2224      	movs	r2, #36	; 0x24
 8014464:	2100      	movs	r1, #0
 8014466:	68f8      	ldr	r0, [r7, #12]
 8014468:	f016 fddd 	bl	802b026 <memset>
    }

    return res;
 801446c:	7dfb      	ldrb	r3, [r7, #23]
}
 801446e:	4618      	mov	r0, r3
 8014470:	3718      	adds	r7, #24
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}
 8014476:	bf00      	nop
 8014478:	2001bb94 	.word	0x2001bb94

0801447c <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 801447c:	b590      	push	{r4, r7, lr}
 801447e:	b089      	sub	sp, #36	; 0x24
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	4608      	mov	r0, r1
 8014486:	4611      	mov	r1, r2
 8014488:	461a      	mov	r2, r3
 801448a:	4603      	mov	r3, r0
 801448c:	817b      	strh	r3, [r7, #10]
 801448e:	460b      	mov	r3, r1
 8014490:	813b      	strh	r3, [r7, #8]
 8014492:	4613      	mov	r3, r2
 8014494:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8014496:	2300      	movs	r3, #0
 8014498:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	689b      	ldr	r3, [r3, #8]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d012      	beq.n	80144ca <lv_img_decoder_read_line+0x4e>
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	689c      	ldr	r4, [r3, #8]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	6818      	ldr	r0, [r3, #0]
 80144ae:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80144b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80144b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b8:	9301      	str	r3, [sp, #4]
 80144ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144be:	9300      	str	r3, [sp, #0]
 80144c0:	460b      	mov	r3, r1
 80144c2:	68f9      	ldr	r1, [r7, #12]
 80144c4:	47a0      	blx	r4
 80144c6:	4603      	mov	r3, r0
 80144c8:	75fb      	strb	r3, [r7, #23]

    return res;
 80144ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	371c      	adds	r7, #28
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd90      	pop	{r4, r7, pc}

080144d4 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b082      	sub	sp, #8
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	68db      	ldr	r3, [r3, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d007      	beq.n	80144f6 <lv_img_decoder_close+0x22>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	6879      	ldr	r1, [r7, #4]
 80144f2:	4610      	mov	r0, r2
 80144f4:	4798      	blx	r3
}
 80144f6:	bf00      	nop
 80144f8:	3708      	adds	r7, #8
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
	...

08014500 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8014506:	480b      	ldr	r0, [pc, #44]	; (8014534 <lv_img_decoder_create+0x34>)
 8014508:	f002 fa1e 	bl	8016948 <lv_ll_ins_head>
 801450c:	6078      	str	r0, [r7, #4]
    lv_mem_assert(decoder);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d100      	bne.n	8014516 <lv_img_decoder_create+0x16>
 8014514:	e7fe      	b.n	8014514 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d101      	bne.n	8014520 <lv_img_decoder_create+0x20>
 801451c:	2300      	movs	r3, #0
 801451e:	e005      	b.n	801452c <lv_img_decoder_create+0x2c>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8014520:	2214      	movs	r2, #20
 8014522:	2100      	movs	r1, #0
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f016 fd7e 	bl	802b026 <memset>

    return decoder;
 801452a:	687b      	ldr	r3, [r7, #4]
}
 801452c:	4618      	mov	r0, r3
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	2001bb94 	.word	0x2001bb94

08014538 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	601a      	str	r2, [r3, #0]
}
 8014548:	bf00      	nop
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	683a      	ldr	r2, [r7, #0]
 8014562:	605a      	str	r2, [r3, #4]
}
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	609a      	str	r2, [r3, #8]
}
 8014580:	bf00      	nop
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	683a      	ldr	r2, [r7, #0]
 801459a:	60da      	str	r2, [r3, #12]
}
 801459c:	bf00      	nop
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <lv_img_decoder_built_in_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b088      	sub	sp, #32
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80145b4:	68b8      	ldr	r0, [r7, #8]
 80145b6:	f7f9 f97f 	bl	800d8b8 <lv_img_src_get_type>
 80145ba:	4603      	mov	r3, r0
 80145bc:	77bb      	strb	r3, [r7, #30]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80145be:	7fbb      	ldrb	r3, [r7, #30]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d11e      	bne.n	8014602 <lv_img_decoder_built_in_info+0x5a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80145cc:	b299      	uxth	r1, r3
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	6813      	ldr	r3, [r2, #0]
 80145d2:	f361 2394 	bfi	r3, r1, #10, #11
 80145d6:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	885b      	ldrh	r3, [r3, #2]
 80145dc:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80145e0:	b299      	uxth	r1, r3
 80145e2:	687a      	ldr	r2, [r7, #4]
 80145e4:	8853      	ldrh	r3, [r2, #2]
 80145e6:	f361 134f 	bfi	r3, r1, #5, #11
 80145ea:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80145f4:	b2d9      	uxtb	r1, r3
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	7813      	ldrb	r3, [r2, #0]
 80145fa:	f361 0304 	bfi	r3, r1, #0, #5
 80145fe:	7013      	strb	r3, [r2, #0]
 8014600:	e04e      	b.n	80146a0 <lv_img_decoder_built_in_info+0xf8>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 8014602:	7fbb      	ldrb	r3, [r7, #30]
 8014604:	2b01      	cmp	r3, #1
 8014606:	d133      	bne.n	8014670 <lv_img_decoder_built_in_info+0xc8>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8014608:	f107 0314 	add.w	r3, r7, #20
 801460c:	2202      	movs	r2, #2
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	4618      	mov	r0, r3
 8014612:	f001 ffff 	bl	8016614 <lv_fs_open>
 8014616:	4603      	mov	r3, r0
 8014618:	77fb      	strb	r3, [r7, #31]
        if(res == LV_FS_RES_OK) {
 801461a:	7ffb      	ldrb	r3, [r7, #31]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d10e      	bne.n	801463e <lv_img_decoder_built_in_info+0x96>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8014620:	f107 0310 	add.w	r3, r7, #16
 8014624:	f107 0014 	add.w	r0, r7, #20
 8014628:	2204      	movs	r2, #4
 801462a:	6879      	ldr	r1, [r7, #4]
 801462c:	f002 f8a1 	bl	8016772 <lv_fs_read>
 8014630:	4603      	mov	r3, r0
 8014632:	77fb      	strb	r3, [r7, #31]
            lv_fs_close(&file);
 8014634:	f107 0314 	add.w	r3, r7, #20
 8014638:	4618      	mov	r0, r3
 801463a:	f002 f86b 	bl	8016714 <lv_fs_close>
        }

        /*Create a dummy header on fs error*/
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 801463e:	7ffb      	ldrb	r3, [r7, #31]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <lv_img_decoder_built_in_info+0xa2>
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	2b04      	cmp	r3, #4
 8014648:	d02a      	beq.n	80146a0 <lv_img_decoder_built_in_info+0xf8>
            header->w  = LV_DPI;
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	6813      	ldr	r3, [r2, #0]
 801464e:	2164      	movs	r1, #100	; 0x64
 8014650:	f361 2394 	bfi	r3, r1, #10, #11
 8014654:	6013      	str	r3, [r2, #0]
            header->h  = LV_DPI;
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	8853      	ldrh	r3, [r2, #2]
 801465a:	2164      	movs	r1, #100	; 0x64
 801465c:	f361 134f 	bfi	r3, r1, #5, #11
 8014660:	8053      	strh	r3, [r2, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	7813      	ldrb	r3, [r2, #0]
 8014666:	f36f 0304 	bfc	r3, #0, #5
 801466a:	7013      	strb	r3, [r2, #0]
            return LV_RES_INV;
 801466c:	2300      	movs	r3, #0
 801466e:	e018      	b.n	80146a2 <lv_img_decoder_built_in_info+0xfa>
        }
    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8014670:	7fbb      	ldrb	r3, [r7, #30]
 8014672:	2b02      	cmp	r3, #2
 8014674:	d112      	bne.n	801469c <lv_img_decoder_built_in_info+0xf4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	6813      	ldr	r3, [r2, #0]
 801467a:	2101      	movs	r1, #1
 801467c:	f361 2394 	bfi	r3, r1, #10, #11
 8014680:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	8853      	ldrh	r3, [r2, #2]
 8014686:	2101      	movs	r1, #1
 8014688:	f361 134f 	bfi	r3, r1, #5, #11
 801468c:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	7813      	ldrb	r3, [r2, #0]
 8014692:	210b      	movs	r1, #11
 8014694:	f361 0304 	bfi	r3, r1, #0, #5
 8014698:	7013      	strb	r3, [r2, #0]
 801469a:	e001      	b.n	80146a0 <lv_img_decoder_built_in_info+0xf8>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 801469c:	2300      	movs	r3, #0
 801469e:	e000      	b.n	80146a2 <lv_img_decoder_built_in_info+0xfa>
    }
    return LV_RES_OK;
 80146a0:	2301      	movs	r3, #1
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3720      	adds	r7, #32
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
	...

080146ac <lv_img_decoder_built_in_open>:

static lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80146ac:	b5b0      	push	{r4, r5, r7, lr}
 80146ae:	b08c      	sub	sp, #48	; 0x30
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	7b1b      	ldrb	r3, [r3, #12]
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d153      	bne.n	8014766 <lv_img_decoder_built_in_open+0xba>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	4618      	mov	r0, r3
 80146c4:	f002 f8ae 	bl	8016824 <lv_fs_get_ext>
 80146c8:	4603      	mov	r3, r0
 80146ca:	498d      	ldr	r1, [pc, #564]	; (8014900 <lv_img_decoder_built_in_open+0x254>)
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7eb fd7f 	bl	80001d0 <strcmp>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d001      	beq.n	80146dc <lv_img_decoder_built_in_open+0x30>
 80146d8:	2300      	movs	r3, #0
 80146da:	e10d      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	6859      	ldr	r1, [r3, #4]
 80146e0:	f107 030c 	add.w	r3, r7, #12
 80146e4:	2202      	movs	r2, #2
 80146e6:	4618      	mov	r0, r3
 80146e8:	f001 ff94 	bl	8016614 <lv_fs_open>
 80146ec:	4603      	mov	r3, r0
 80146ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if(res != LV_FS_RES_OK) {
 80146f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d001      	beq.n	80146fe <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80146fa:	2300      	movs	r3, #0
 80146fc:	e0fc      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	6a1b      	ldr	r3, [r3, #32]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d115      	bne.n	8014732 <lv_img_decoder_built_in_open+0x86>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014706:	2008      	movs	r0, #8
 8014708:	f002 fc00 	bl	8016f0c <lv_mem_alloc>
 801470c:	4602      	mov	r2, r0
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	6a1b      	ldr	r3, [r3, #32]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d104      	bne.n	8014724 <lv_img_decoder_built_in_open+0x78>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	6a1b      	ldr	r3, [r3, #32]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d100      	bne.n	8014724 <lv_img_decoder_built_in_open+0x78>
 8014722:	e7fe      	b.n	8014722 <lv_img_decoder_built_in_open+0x76>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	6a1b      	ldr	r3, [r3, #32]
 8014728:	2208      	movs	r2, #8
 801472a:	2100      	movs	r1, #0
 801472c:	4618      	mov	r0, r3
 801472e:	f016 fc7a 	bl	802b026 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	6a1b      	ldr	r3, [r3, #32]
 8014736:	627b      	str	r3, [r7, #36]	; 0x24
        user_data->f                               = lv_mem_alloc(sizeof(f));
 8014738:	2008      	movs	r0, #8
 801473a:	f002 fbe7 	bl	8016f0c <lv_mem_alloc>
 801473e:	4602      	mov	r2, r0
 8014740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014742:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 8014744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d104      	bne.n	8014756 <lv_img_decoder_built_in_open+0xaa>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_mem_assert(user_data->f);
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d100      	bne.n	8014756 <lv_img_decoder_built_in_open+0xaa>
 8014754:	e7fe      	b.n	8014754 <lv_img_decoder_built_in_open+0xa8>
        }

        memcpy(user_data->f, &f, sizeof(f));
 8014756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f107 010c 	add.w	r1, r7, #12
 801475e:	2208      	movs	r2, #8
 8014760:	4618      	mov	r0, r3
 8014762:	f016 fc55 	bl	802b010 <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	7c1b      	ldrb	r3, [r3, #16]
 801476a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801476e:	b2db      	uxtb	r3, r3
 8014770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8014774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014778:	2b04      	cmp	r3, #4
 801477a:	d007      	beq.n	801478c <lv_img_decoder_built_in_open+0xe0>
 801477c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014780:	2b05      	cmp	r3, #5
 8014782:	d003      	beq.n	801478c <lv_img_decoder_built_in_open+0xe0>
 8014784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014788:	2b06      	cmp	r3, #6
 801478a:	d10f      	bne.n	80147ac <lv_img_decoder_built_in_open+0x100>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	7b1b      	ldrb	r3, [r3, #12]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d106      	bne.n	80147a2 <lv_img_decoder_built_in_open+0xf6>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	689a      	ldr	r2, [r3, #8]
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 801479e:	2301      	movs	r3, #1
 80147a0:	e0aa      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2200      	movs	r2, #0
 80147a6:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80147a8:	2301      	movs	r3, #1
 80147aa:	e0a5      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80147ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147b0:	2b07      	cmp	r3, #7
 80147b2:	d00b      	beq.n	80147cc <lv_img_decoder_built_in_open+0x120>
 80147b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147b8:	2b08      	cmp	r3, #8
 80147ba:	d007      	beq.n	80147cc <lv_img_decoder_built_in_open+0x120>
 80147bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147c0:	2b09      	cmp	r3, #9
 80147c2:	d003      	beq.n	80147cc <lv_img_decoder_built_in_open+0x120>
 80147c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147c8:	2b0a      	cmp	r3, #10
 80147ca:	d17b      	bne.n	80148c4 <lv_img_decoder_built_in_open+0x218>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 80147cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7f8 ffd3 	bl	800d77c <lv_img_color_format_get_px_size>
 80147d6:	4603      	mov	r3, r0
 80147d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        uint32_t palette_size = 1 << px_size;
 80147dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80147e0:	2201      	movs	r2, #1
 80147e2:	fa02 f303 	lsl.w	r3, r2, r3
 80147e6:	61fb      	str	r3, [r7, #28]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	6a1b      	ldr	r3, [r3, #32]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d115      	bne.n	801481c <lv_img_decoder_built_in_open+0x170>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80147f0:	2008      	movs	r0, #8
 80147f2:	f002 fb8b 	bl	8016f0c <lv_mem_alloc>
 80147f6:	4602      	mov	r2, r0
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	6a1b      	ldr	r3, [r3, #32]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d104      	bne.n	801480e <lv_img_decoder_built_in_open+0x162>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	6a1b      	ldr	r3, [r3, #32]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d100      	bne.n	801480e <lv_img_decoder_built_in_open+0x162>
 801480c:	e7fe      	b.n	801480c <lv_img_decoder_built_in_open+0x160>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	6a1b      	ldr	r3, [r3, #32]
 8014812:	2208      	movs	r2, #8
 8014814:	2100      	movs	r1, #0
 8014816:	4618      	mov	r0, r3
 8014818:	f016 fc05 	bl	802b026 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	6a1b      	ldr	r3, [r3, #32]
 8014820:	61bb      	str	r3, [r7, #24]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	4618      	mov	r0, r3
 8014828:	f002 fb70 	bl	8016f0c <lv_mem_alloc>
 801482c:	4602      	mov	r2, r0
 801482e:	69bb      	ldr	r3, [r7, #24]
 8014830:	605a      	str	r2, [r3, #4]
        if(user_data->palette == NULL) {
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d104      	bne.n	8014844 <lv_img_decoder_built_in_open+0x198>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            lv_mem_assert(user_data->f);
 801483a:	69bb      	ldr	r3, [r7, #24]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d100      	bne.n	8014844 <lv_img_decoder_built_in_open+0x198>
 8014842:	e7fe      	b.n	8014842 <lv_img_decoder_built_in_open+0x196>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	7b1b      	ldrb	r3, [r3, #12]
 8014848:	2b01      	cmp	r3, #1
 801484a:	d10f      	bne.n	801486c <lv_img_decoder_built_in_open+0x1c0>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 801484c:	69bb      	ldr	r3, [r7, #24]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2104      	movs	r1, #4
 8014852:	4618      	mov	r0, r3
 8014854:	f001 ffc3 	bl	80167de <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 8014858:	69bb      	ldr	r3, [r7, #24]
 801485a:	6818      	ldr	r0, [r3, #0]
 801485c:	69bb      	ldr	r3, [r7, #24]
 801485e:	6859      	ldr	r1, [r3, #4]
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	005a      	lsls	r2, r3, #1
 8014864:	2300      	movs	r3, #0
 8014866:	f001 ff84 	bl	8016772 <lv_fs_read>
 801486a:	e026      	b.n	80148ba <lv_img_decoder_built_in_open+0x20e>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	689b      	ldr	r3, [r3, #8]
 8014872:	617b      	str	r3, [r7, #20]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014874:	2300      	movs	r3, #0
 8014876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014878:	e01b      	b.n	80148b2 <lv_img_decoder_built_in_open+0x206>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 801487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	697a      	ldr	r2, [r7, #20]
 8014880:	4413      	add	r3, r2
 8014882:	7898      	ldrb	r0, [r3, #2]
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	697a      	ldr	r2, [r7, #20]
 801488a:	4413      	add	r3, r2
 801488c:	7859      	ldrb	r1, [r3, #1]
 801488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	697a      	ldr	r2, [r7, #20]
 8014894:	4413      	add	r3, r2
 8014896:	781d      	ldrb	r5, [r3, #0]
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	685a      	ldr	r2, [r3, #4]
 801489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	18d4      	adds	r4, r2, r3
 80148a2:	462a      	mov	r2, r5
 80148a4:	f7ff fcec 	bl	8014280 <lv_color_make>
 80148a8:	4603      	mov	r3, r0
 80148aa:	8023      	strh	r3, [r4, #0]
            for(i = 0; i < palette_size; i++) {
 80148ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ae:	3301      	adds	r3, #1
 80148b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d3df      	bcc.n	801487a <lv_img_decoder_built_in_open+0x1ce>
            }
        }

        dsc->img_data = NULL;
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	2200      	movs	r2, #0
 80148be:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 80148c0:	2301      	movs	r3, #1
 80148c2:	e019      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80148c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148c8:	2b0b      	cmp	r3, #11
 80148ca:	d00b      	beq.n	80148e4 <lv_img_decoder_built_in_open+0x238>
 80148cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148d0:	2b0c      	cmp	r3, #12
 80148d2:	d007      	beq.n	80148e4 <lv_img_decoder_built_in_open+0x238>
 80148d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148d8:	2b0d      	cmp	r3, #13
 80148da:	d003      	beq.n	80148e4 <lv_img_decoder_built_in_open+0x238>
 80148dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148e0:	2b0e      	cmp	r3, #14
 80148e2:	d104      	bne.n	80148ee <lv_img_decoder_built_in_open+0x242>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	2200      	movs	r2, #0
 80148e8:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 80148ea:	2301      	movs	r3, #1
 80148ec:	e004      	b.n	80148f8 <lv_img_decoder_built_in_open+0x24c>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 80148ee:	6839      	ldr	r1, [r7, #0]
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 f899 	bl	8014a28 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 80148f6:	2300      	movs	r3, #0
    }
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3730      	adds	r7, #48	; 0x30
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014900:	0802d44c 	.word	0x0802d44c

08014904 <lv_img_decoder_built_in_read_line>:

static lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b088      	sub	sp, #32
 8014908:	af02      	add	r7, sp, #8
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4611      	mov	r1, r2
 8014910:	461a      	mov	r2, r3
 8014912:	460b      	mov	r3, r1
 8014914:	80fb      	strh	r3, [r7, #6]
 8014916:	4613      	mov	r3, r2
 8014918:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 801491a:	2300      	movs	r3, #0
 801491c:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	7c1b      	ldrb	r3, [r3, #16]
 8014922:	f003 031f 	and.w	r3, r3, #31
 8014926:	b2db      	uxtb	r3, r3
 8014928:	2b04      	cmp	r3, #4
 801492a:	d00d      	beq.n	8014948 <lv_img_decoder_built_in_read_line+0x44>
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	7c1b      	ldrb	r3, [r3, #16]
 8014930:	f003 031f 	and.w	r3, r3, #31
 8014934:	b2db      	uxtb	r3, r3
 8014936:	2b05      	cmp	r3, #5
 8014938:	d006      	beq.n	8014948 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	7c1b      	ldrb	r3, [r3, #16]
 801493e:	f003 031f 	and.w	r3, r3, #31
 8014942:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014944:	2b06      	cmp	r3, #6
 8014946:	d112      	bne.n	801496e <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	7b1b      	ldrb	r3, [r3, #12]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d166      	bne.n	8014a1e <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8014950:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014954:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014958:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	4603      	mov	r3, r0
 8014962:	68b8      	ldr	r0, [r7, #8]
 8014964:	f000 f88c 	bl	8014a80 <lv_img_decoder_built_in_line_true_color>
 8014968:	4603      	mov	r3, r0
 801496a:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801496c:	e057      	b.n	8014a1e <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	7c1b      	ldrb	r3, [r3, #16]
 8014972:	f003 031f 	and.w	r3, r3, #31
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b0b      	cmp	r3, #11
 801497a:	d014      	beq.n	80149a6 <lv_img_decoder_built_in_read_line+0xa2>
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	7c1b      	ldrb	r3, [r3, #16]
 8014980:	f003 031f 	and.w	r3, r3, #31
 8014984:	b2db      	uxtb	r3, r3
 8014986:	2b0c      	cmp	r3, #12
 8014988:	d00d      	beq.n	80149a6 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	7c1b      	ldrb	r3, [r3, #16]
 801498e:	f003 031f 	and.w	r3, r3, #31
 8014992:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014994:	2b0d      	cmp	r3, #13
 8014996:	d006      	beq.n	80149a6 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	7c1b      	ldrb	r3, [r3, #16]
 801499c:	f003 031f 	and.w	r3, r3, #31
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b0e      	cmp	r3, #14
 80149a4:	d10e      	bne.n	80149c4 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 80149a6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80149aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80149ae:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80149b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4603      	mov	r3, r0
 80149b8:	68b8      	ldr	r0, [r7, #8]
 80149ba:	f000 f8bf 	bl	8014b3c <lv_img_decoder_built_in_line_alpha>
 80149be:	4603      	mov	r3, r0
 80149c0:	75fb      	strb	r3, [r7, #23]
 80149c2:	e02c      	b.n	8014a1e <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	7c1b      	ldrb	r3, [r3, #16]
 80149c8:	f003 031f 	and.w	r3, r3, #31
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b07      	cmp	r3, #7
 80149d0:	d014      	beq.n	80149fc <lv_img_decoder_built_in_read_line+0xf8>
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	7c1b      	ldrb	r3, [r3, #16]
 80149d6:	f003 031f 	and.w	r3, r3, #31
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	2b08      	cmp	r3, #8
 80149de:	d00d      	beq.n	80149fc <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	7c1b      	ldrb	r3, [r3, #16]
 80149e4:	f003 031f 	and.w	r3, r3, #31
 80149e8:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80149ea:	2b09      	cmp	r3, #9
 80149ec:	d006      	beq.n	80149fc <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	7c1b      	ldrb	r3, [r3, #16]
 80149f2:	f003 031f 	and.w	r3, r3, #31
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	2b0a      	cmp	r3, #10
 80149fa:	d10e      	bne.n	8014a1a <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 80149fc:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014a00:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014a04:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	68b8      	ldr	r0, [r7, #8]
 8014a10:	f000 faaa 	bl	8014f68 <lv_img_decoder_built_in_line_indexed>
 8014a14:	4603      	mov	r3, r0
 8014a16:	75fb      	strb	r3, [r7, #23]
 8014a18:	e001      	b.n	8014a1e <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	e000      	b.n	8014a20 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8014a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3718      	adds	r7, #24
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <lv_img_decoder_built_in_close>:

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	6a1b      	ldr	r3, [r3, #32]
 8014a36:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d01c      	beq.n	8014a78 <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f001 fe62 	bl	8016714 <lv_fs_close>
            lv_mem_free(user_data->f);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	4618      	mov	r0, r3
 8014a56:	f002 fa99 	bl	8016f8c <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d004      	beq.n	8014a6c <lv_img_decoder_built_in_close+0x44>
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f002 fa90 	bl	8016f8c <lv_mem_free>

        lv_mem_free(user_data);
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f002 fa8d 	bl	8016f8c <lv_mem_free>

        dsc->user_data = NULL;
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	2200      	movs	r2, #0
 8014a76:	621a      	str	r2, [r3, #32]
    }
}
 8014a78:	bf00      	nop
 8014a7a:	3710      	adds	r7, #16
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <lv_img_decoder_built_in_line_true_color>:

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b08a      	sub	sp, #40	; 0x28
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	4608      	mov	r0, r1
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	4603      	mov	r3, r0
 8014a90:	817b      	strh	r3, [r7, #10]
 8014a92:	460b      	mov	r3, r1
 8014a94:	813b      	strh	r3, [r7, #8]
 8014a96:	4613      	mov	r3, r2
 8014a98:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	6a1b      	ldr	r3, [r3, #32]
 8014a9e:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	7c1b      	ldrb	r3, [r3, #16]
 8014aa4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014aa8:	b2db      	uxtb	r3, r3
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7f8 fe66 	bl	800d77c <lv_img_color_format_get_px_size>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8014ab6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	6912      	ldr	r2, [r2, #16]
 8014abe:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014ac2:	b292      	uxth	r2, r2
 8014ac4:	fb02 f203 	mul.w	r2, r2, r3
 8014ac8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014acc:	4413      	add	r3, r2
 8014ace:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014ad2:	fb02 f303 	mul.w	r3, r2, r3
 8014ad6:	10db      	asrs	r3, r3, #3
 8014ad8:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	3304      	adds	r3, #4
 8014ade:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	69f9      	ldr	r1, [r7, #28]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f001 fe79 	bl	80167de <lv_fs_seek>
 8014aec:	4603      	mov	r3, r0
 8014aee:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8014af0:	7efb      	ldrb	r3, [r7, #27]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d001      	beq.n	8014afa <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014af6:	2300      	movs	r3, #0
 8014af8:	e01c      	b.n	8014b34 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 8014afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014afe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014b02:	08d2      	lsrs	r2, r2, #3
 8014b04:	b2d2      	uxtb	r2, r2
 8014b06:	fb02 f303 	mul.w	r3, r2, r3
 8014b0a:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 8014b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b12:	6818      	ldr	r0, [r3, #0]
 8014b14:	f107 0310 	add.w	r3, r7, #16
 8014b18:	697a      	ldr	r2, [r7, #20]
 8014b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b1c:	f001 fe29 	bl	8016772 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8014b20:	7efb      	ldrb	r3, [r7, #27]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d103      	bne.n	8014b2e <lv_img_decoder_built_in_line_true_color+0xae>
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	697a      	ldr	r2, [r7, #20]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d001      	beq.n	8014b32 <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	e000      	b.n	8014b34 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 8014b32:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3728      	adds	r7, #40	; 0x28
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b0d1      	sub	sp, #324	; 0x144
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	f107 040c 	add.w	r4, r7, #12
 8014b46:	6020      	str	r0, [r4, #0]
 8014b48:	460c      	mov	r4, r1
 8014b4a:	4610      	mov	r0, r2
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	f107 030a 	add.w	r3, r7, #10
 8014b52:	4622      	mov	r2, r4
 8014b54:	801a      	strh	r2, [r3, #0]
 8014b56:	f107 0308 	add.w	r3, r7, #8
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	801a      	strh	r2, [r3, #0]
 8014b5e:	1dbb      	adds	r3, r7, #6
 8014b60:	460a      	mov	r2, r1
 8014b62:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8014b64:	2300      	movs	r3, #0
 8014b66:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8014b6a:	23ff      	movs	r3, #255	; 0xff
 8014b6c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8014b70:	4bcc      	ldr	r3, [pc, #816]	; (8014ea4 <lv_img_decoder_built_in_line_alpha+0x368>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8014b78:	4bcb      	ldr	r3, [pc, #812]	; (8014ea8 <lv_img_decoder_built_in_line_alpha+0x36c>)
 8014b7a:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8014b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8014b84:	f107 030c 	add.w	r3, r7, #12
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	689b      	ldr	r3, [r3, #8]
 8014b8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8014b8e:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8014b92:	2300      	movs	r3, #0
 8014b94:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8014b98:	e022      	b.n	8014be0 <lv_img_decoder_built_in_line_alpha+0xa4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8014b9a:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8014b9e:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	4413      	add	r3, r2
 8014ba8:	461a      	mov	r2, r3
 8014baa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8014bae:	4413      	add	r3, r2
 8014bb0:	b2ca      	uxtb	r2, r1
 8014bb2:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8014bb4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8014bb8:	0a1b      	lsrs	r3, r3, #8
 8014bba:	b299      	uxth	r1, r3
 8014bbc:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	005b      	lsls	r3, r3, #1
 8014bc4:	4413      	add	r3, r2
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8014bcc:	4413      	add	r3, r2
 8014bce:	b2ca      	uxtb	r2, r1
 8014bd0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8014bd2:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	3301      	adds	r3, #1
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8014be0:	1dbb      	adds	r3, r7, #6
 8014be2:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	dbd5      	blt.n	8014b9a <lv_img_decoder_built_in_line_alpha+0x5e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8014bf4:	f107 030c 	add.w	r3, r7, #12
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	7c1b      	ldrb	r3, [r3, #16]
 8014bfc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7f8 fdba 	bl	800d77c <lv_img_color_format_get_px_size>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8014c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014c12:	2201      	movs	r2, #1
 8014c14:	fa02 f303 	lsl.w	r3, r2, r3
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    lv_coord_t w = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    uint32_t ofs = 0;
 8014c26:	2300      	movs	r3, #0
 8014c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    int8_t pos   = 0;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    switch(dsc->header.cf) {
 8014c32:	f107 030c 	add.w	r3, r7, #12
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	7c1b      	ldrb	r3, [r3, #16]
 8014c3a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	3b0b      	subs	r3, #11
 8014c42:	2b03      	cmp	r3, #3
 8014c44:	f200 80f0 	bhi.w	8014e28 <lv_img_decoder_built_in_line_alpha+0x2ec>
 8014c48:	a201      	add	r2, pc, #4	; (adr r2, 8014c50 <lv_img_decoder_built_in_line_alpha+0x114>)
 8014c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c4e:	bf00      	nop
 8014c50:	08014c61 	.word	0x08014c61
 8014c54:	08014ce1 	.word	0x08014ce1
 8014c58:	08014d65 	.word	0x08014d65
 8014c5c:	08014de9 	.word	0x08014de9
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8014c60:	f107 030c 	add.w	r3, r7, #12
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	691b      	ldr	r3, [r3, #16]
 8014c68:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	10db      	asrs	r3, r3, #3
 8014c70:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x7) w++;
 8014c74:	f107 030c 	add.w	r3, r7, #12
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	691b      	ldr	r3, [r3, #16]
 8014c7c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	f003 0307 	and.w	r3, r3, #7
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d006      	beq.n	8014c98 <lv_img_decoder_built_in_line_alpha+0x15c>
 8014c8a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	3301      	adds	r3, #1
 8014c92:	b29b      	uxth	r3, r3
 8014c94:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 3); /*First pixel*/
 8014c98:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014c9c:	f107 0208 	add.w	r2, r7, #8
 8014ca0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014ca4:	fb02 f303 	mul.w	r3, r2, r3
 8014ca8:	f107 020a 	add.w	r2, r7, #10
 8014cac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014cb0:	10d2      	asrs	r2, r2, #3
 8014cb2:	b212      	sxth	r2, r2
 8014cb4:	4413      	add	r3, r2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cbc:	4413      	add	r3, r2
 8014cbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 7 - (x & 0x7);
 8014cc2:	f107 030a 	add.w	r3, r7, #10
 8014cc6:	881b      	ldrh	r3, [r3, #0]
 8014cc8:	b25b      	sxtb	r3, r3
 8014cca:	43db      	mvns	r3, r3
 8014ccc:	b25b      	sxtb	r3, r3
 8014cce:	f003 0307 	and.w	r3, r3, #7
 8014cd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha1_opa_table;
 8014cd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014cda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 8014cde:	e0a3      	b.n	8014e28 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8014ce0:	f107 030c 	add.w	r3, r7, #12
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	691b      	ldr	r3, [r3, #16]
 8014ce8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	109b      	asrs	r3, r3, #2
 8014cf0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x3) w++;
 8014cf4:	f107 030c 	add.w	r3, r7, #12
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	691b      	ldr	r3, [r3, #16]
 8014cfc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	f003 0303 	and.w	r3, r3, #3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d006      	beq.n	8014d18 <lv_img_decoder_built_in_line_alpha+0x1dc>
 8014d0a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	3301      	adds	r3, #1
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 2); /*First pixel*/
 8014d18:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014d1c:	f107 0208 	add.w	r2, r7, #8
 8014d20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d24:	fb02 f303 	mul.w	r3, r2, r3
 8014d28:	f107 020a 	add.w	r2, r7, #10
 8014d2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d30:	1092      	asrs	r2, r2, #2
 8014d32:	b212      	sxth	r2, r2
 8014d34:	4413      	add	r3, r2
 8014d36:	461a      	mov	r2, r3
 8014d38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014d3c:	4413      	add	r3, r2
 8014d3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 6 - ((x & 0x3) * 2);
 8014d42:	f107 030a 	add.w	r3, r7, #10
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	43db      	mvns	r3, r3
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	f003 0303 	and.w	r3, r3, #3
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha2_opa_table;
 8014d5a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014d5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 8014d62:	e061      	b.n	8014e28 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014d64:	f107 030c 	add.w	r3, r7, #12
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	691b      	ldr	r3, [r3, #16]
 8014d6c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	105b      	asrs	r3, r3, #1
 8014d74:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x1) w++;
 8014d78:	f107 030c 	add.w	r3, r7, #12
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	f003 0301 	and.w	r3, r3, #1
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d006      	beq.n	8014d9c <lv_img_decoder_built_in_line_alpha+0x260>
 8014d8e:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	3301      	adds	r3, #1
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 1); /*First pixel*/
 8014d9c:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014da0:	f107 0208 	add.w	r2, r7, #8
 8014da4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014da8:	fb02 f303 	mul.w	r3, r2, r3
 8014dac:	f107 020a 	add.w	r2, r7, #10
 8014db0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014db4:	1052      	asrs	r2, r2, #1
 8014db6:	b212      	sxth	r2, r2
 8014db8:	4413      	add	r3, r2
 8014dba:	461a      	mov	r2, r3
 8014dbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014dc0:	4413      	add	r3, r2
 8014dc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 4 - ((x & 0x1) * 4);
 8014dc6:	f107 030a 	add.w	r3, r7, #10
 8014dca:	881b      	ldrh	r3, [r3, #0]
 8014dcc:	f003 0301 	and.w	r3, r3, #1
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d101      	bne.n	8014dd8 <lv_img_decoder_built_in_line_alpha+0x29c>
 8014dd4:	2304      	movs	r3, #4
 8014dd6:	e000      	b.n	8014dda <lv_img_decoder_built_in_line_alpha+0x29e>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha4_opa_table;
 8014dde:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8014de2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 8014de6:	e01f      	b.n	8014e28 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014de8:	f107 030c 	add.w	r3, r7, #12
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	691b      	ldr	r3, [r3, #16]
 8014df0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + x;  /*First pixel*/
 8014dfa:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8014dfe:	f107 0208 	add.w	r2, r7, #8
 8014e02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014e06:	fb02 f203 	mul.w	r2, r2, r3
 8014e0a:	f107 030a 	add.w	r3, r7, #10
 8014e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e12:	4413      	add	r3, r2
 8014e14:	461a      	mov	r2, r3
 8014e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014e1a:	4413      	add	r3, r2
 8014e1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8014e26:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014e28:	f107 030c 	add.w	r3, r7, #12
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	6a1b      	ldr	r3, [r3, #32]
 8014e30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 8014e34:	2300      	movs	r3, #0
 8014e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014e3a:	f107 030c 	add.w	r3, r7, #12
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	7b1b      	ldrb	r3, [r3, #12]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d10e      	bne.n	8014e64 <lv_img_decoder_built_in_line_alpha+0x328>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014e46:	f107 030c 	add.w	r3, r7, #12
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        data_tmp = img_dsc->data + ofs;
 8014e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014e56:	689a      	ldr	r2, [r3, #8]
 8014e58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8014e62:	e017      	b.n	8014e94 <lv_img_decoder_built_in_line_alpha+0x358>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8014e64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014e68:	681a      	ldr	r2, [r3, #0]
 8014e6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014e6e:	3304      	adds	r3, #4
 8014e70:	4619      	mov	r1, r3
 8014e72:	4610      	mov	r0, r2
 8014e74:	f001 fcb3 	bl	80167de <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8014e78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014e7c:	6818      	ldr	r0, [r3, #0]
 8014e7e:	f9b7 2136 	ldrsh.w	r2, [r7, #310]	; 0x136
 8014e82:	f107 0110 	add.w	r1, r7, #16
 8014e86:	2300      	movs	r3, #0
 8014e88:	f001 fc73 	bl	8016772 <lv_fs_read>
        data_tmp = fs_buf;
 8014e8c:	f107 0310 	add.w	r3, r7, #16
 8014e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8014e94:	2300      	movs	r3, #0
 8014e96:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8014ea0:	e054      	b.n	8014f4c <lv_img_decoder_built_in_line_alpha+0x410>
 8014ea2:	bf00      	nop
 8014ea4:	0802d450 	.word	0x0802d450
 8014ea8:	0802d454 	.word	0x0802d454
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8014eac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8014eb0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014eb4:	4413      	add	r3, r2
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	4619      	mov	r1, r3
 8014eba:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 8014ebe:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8014ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ec6:	ea01 0203 	and.w	r2, r1, r3
 8014eca:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8014ece:	fa42 f303 	asr.w	r3, r2, r3
 8014ed2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014ed6:	f107 030c 	add.w	r3, r7, #12
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	7c1b      	ldrb	r3, [r3, #16]
 8014ede:	f003 031f 	and.w	r3, r3, #31
 8014ee2:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014ee4:	2b0e      	cmp	r3, #14
 8014ee6:	d006      	beq.n	8014ef6 <lv_img_decoder_built_in_line_alpha+0x3ba>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014ee8:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8014eec:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014ef0:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014ef2:	781a      	ldrb	r2, [r3, #0]
 8014ef4:	e001      	b.n	8014efa <lv_img_decoder_built_in_line_alpha+0x3be>
 8014ef6:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8014efa:	f9b7 113e 	ldrsh.w	r1, [r7, #318]	; 0x13e
 8014efe:	460b      	mov	r3, r1
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	440b      	add	r3, r1
 8014f04:	3302      	adds	r3, #2
 8014f06:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8014f0a:	440b      	add	r3, r1
 8014f0c:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8014f0e:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8014f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014f16:	1ad3      	subs	r3, r2, r3
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if(pos < 0) {
 8014f1e:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	da0b      	bge.n	8014f3e <lv_img_decoder_built_in_line_alpha+0x402>
            pos = 8 - px_size;
 8014f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014f2a:	f1c3 0308 	rsb	r3, r3, #8
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            data_tmp++;
 8014f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f38:	3301      	adds	r3, #1
 8014f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for(i = 0; i < len; i++) {
 8014f3e:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	3301      	adds	r3, #1
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8014f4c:	1dbb      	adds	r3, r7, #6
 8014f4e:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	dba8      	blt.n	8014eac <lv_img_decoder_built_in_line_alpha+0x370>
        }
    }

    return LV_RES_OK;
 8014f5a:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd90      	pop	{r4, r7, pc}
 8014f66:	bf00      	nop

08014f68 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8014f68:	b590      	push	{r4, r7, lr}
 8014f6a:	b0cb      	sub	sp, #300	; 0x12c
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	f107 040c 	add.w	r4, r7, #12
 8014f72:	6020      	str	r0, [r4, #0]
 8014f74:	460c      	mov	r4, r1
 8014f76:	4610      	mov	r0, r2
 8014f78:	4619      	mov	r1, r3
 8014f7a:	f107 030a 	add.w	r3, r7, #10
 8014f7e:	4622      	mov	r2, r4
 8014f80:	801a      	strh	r2, [r3, #0]
 8014f82:	f107 0308 	add.w	r3, r7, #8
 8014f86:	4602      	mov	r2, r0
 8014f88:	801a      	strh	r2, [r3, #0]
 8014f8a:	1dbb      	adds	r3, r7, #6
 8014f8c:	460a      	mov	r2, r1
 8014f8e:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8014f90:	f107 030c 	add.w	r3, r7, #12
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	7c1b      	ldrb	r3, [r3, #16]
 8014f98:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f8 fbec 	bl	800d77c <lv_img_color_format_get_px_size>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8014faa:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8014fae:	2201      	movs	r2, #1
 8014fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

    lv_coord_t w = 0;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    int8_t pos   = 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
    uint32_t ofs = 0;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    switch(dsc->header.cf) {
 8014fce:	f107 030c 	add.w	r3, r7, #12
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	7c1b      	ldrb	r3, [r3, #16]
 8014fd6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	3b07      	subs	r3, #7
 8014fde:	2b03      	cmp	r3, #3
 8014fe0:	f200 80f9 	bhi.w	80151d6 <lv_img_decoder_built_in_line_indexed+0x26e>
 8014fe4:	a201      	add	r2, pc, #4	; (adr r2, 8014fec <lv_img_decoder_built_in_line_indexed+0x84>)
 8014fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fea:	bf00      	nop
 8014fec:	08014ffd 	.word	0x08014ffd
 8014ff0:	0801507f 	.word	0x0801507f
 8014ff4:	08015105 	.word	0x08015105
 8014ff8:	0801518b 	.word	0x0801518b
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8014ffc:	f107 030c 	add.w	r3, r7, #12
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	691b      	ldr	r3, [r3, #16]
 8015004:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015008:	b29b      	uxth	r3, r3
 801500a:	10db      	asrs	r3, r3, #3
 801500c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x7) w++;
 8015010:	f107 030c 	add.w	r3, r7, #12
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	691b      	ldr	r3, [r3, #16]
 8015018:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801501c:	b29b      	uxth	r3, r3
 801501e:	f003 0307 	and.w	r3, r3, #7
 8015022:	2b00      	cmp	r3, #0
 8015024:	d006      	beq.n	8015034 <lv_img_decoder_built_in_line_indexed+0xcc>
 8015026:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 801502a:	b29b      	uxth	r3, r3
 801502c:	3301      	adds	r3, #1
 801502e:	b29b      	uxth	r3, r3
 8015030:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 3); /*First pixel*/
 8015034:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8015038:	f107 0208 	add.w	r2, r7, #8
 801503c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015040:	fb02 f303 	mul.w	r3, r2, r3
 8015044:	f107 020a 	add.w	r2, r7, #10
 8015048:	f9b2 2000 	ldrsh.w	r2, [r2]
 801504c:	10d2      	asrs	r2, r2, #3
 801504e:	b212      	sxth	r2, r2
 8015050:	4413      	add	r3, r2
 8015052:	461a      	mov	r2, r3
 8015054:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015058:	4413      	add	r3, r2
 801505a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 8;                /*Skip the palette*/
 801505e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015062:	3308      	adds	r3, #8
 8015064:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 7 - (x & 0x7);
 8015068:	f107 030a 	add.w	r3, r7, #10
 801506c:	881b      	ldrh	r3, [r3, #0]
 801506e:	b25b      	sxtb	r3, r3
 8015070:	43db      	mvns	r3, r3
 8015072:	b25b      	sxtb	r3, r3
 8015074:	f003 0307 	and.w	r3, r3, #7
 8015078:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 801507c:	e0ab      	b.n	80151d6 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801507e:	f107 030c 	add.w	r3, r7, #12
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	691b      	ldr	r3, [r3, #16]
 8015086:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801508a:	b29b      	uxth	r3, r3
 801508c:	109b      	asrs	r3, r3, #2
 801508e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x3) w++;
 8015092:	f107 030c 	add.w	r3, r7, #12
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	691b      	ldr	r3, [r3, #16]
 801509a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801509e:	b29b      	uxth	r3, r3
 80150a0:	f003 0303 	and.w	r3, r3, #3
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d006      	beq.n	80150b6 <lv_img_decoder_built_in_line_indexed+0x14e>
 80150a8:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	3301      	adds	r3, #1
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 2); /*First pixel*/
 80150b6:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80150ba:	f107 0208 	add.w	r2, r7, #8
 80150be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80150c2:	fb02 f303 	mul.w	r3, r2, r3
 80150c6:	f107 020a 	add.w	r2, r7, #10
 80150ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80150ce:	1092      	asrs	r2, r2, #2
 80150d0:	b212      	sxth	r2, r2
 80150d2:	4413      	add	r3, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80150da:	4413      	add	r3, r2
 80150dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 16;               /*Skip the palette*/
 80150e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80150e4:	3310      	adds	r3, #16
 80150e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 6 - ((x & 0x3) * 2);
 80150ea:	f107 030a 	add.w	r3, r7, #10
 80150ee:	881b      	ldrh	r3, [r3, #0]
 80150f0:	43db      	mvns	r3, r3
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	f003 0303 	and.w	r3, r3, #3
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8015102:	e068      	b.n	80151d6 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8015104:	f107 030c 	add.w	r3, r7, #12
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	691b      	ldr	r3, [r3, #16]
 801510c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015110:	b29b      	uxth	r3, r3
 8015112:	105b      	asrs	r3, r3, #1
 8015114:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x1) w++;
 8015118:	f107 030c 	add.w	r3, r7, #12
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	691b      	ldr	r3, [r3, #16]
 8015120:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015124:	b29b      	uxth	r3, r3
 8015126:	f003 0301 	and.w	r3, r3, #1
 801512a:	2b00      	cmp	r3, #0
 801512c:	d006      	beq.n	801513c <lv_img_decoder_built_in_line_indexed+0x1d4>
 801512e:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8015132:	b29b      	uxth	r3, r3
 8015134:	3301      	adds	r3, #1
 8015136:	b29b      	uxth	r3, r3
 8015138:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 1); /*First pixel*/
 801513c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8015140:	f107 0208 	add.w	r2, r7, #8
 8015144:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015148:	fb02 f303 	mul.w	r3, r2, r3
 801514c:	f107 020a 	add.w	r2, r7, #10
 8015150:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015154:	1052      	asrs	r2, r2, #1
 8015156:	b212      	sxth	r2, r2
 8015158:	4413      	add	r3, r2
 801515a:	461a      	mov	r2, r3
 801515c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015160:	4413      	add	r3, r2
 8015162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 64;               /*Skip the palette*/
 8015166:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801516a:	3340      	adds	r3, #64	; 0x40
 801516c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 4 - ((x & 0x1) * 4);
 8015170:	f107 030a 	add.w	r3, r7, #10
 8015174:	881b      	ldrh	r3, [r3, #0]
 8015176:	f003 0301 	and.w	r3, r3, #1
 801517a:	2b00      	cmp	r3, #0
 801517c:	d101      	bne.n	8015182 <lv_img_decoder_built_in_line_indexed+0x21a>
 801517e:	2304      	movs	r3, #4
 8015180:	e000      	b.n	8015184 <lv_img_decoder_built_in_line_indexed+0x21c>
 8015182:	2300      	movs	r3, #0
 8015184:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8015188:	e025      	b.n	80151d6 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801518a:	f107 030c 	add.w	r3, r7, #12
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	691b      	ldr	r3, [r3, #16]
 8015192:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015196:	b29b      	uxth	r3, r3
 8015198:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + x;  /*First pixel*/
 801519c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80151a0:	f107 0208 	add.w	r2, r7, #8
 80151a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80151a8:	fb02 f203 	mul.w	r2, r2, r3
 80151ac:	f107 030a 	add.w	r3, r7, #10
 80151b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151b4:	4413      	add	r3, r2
 80151b6:	461a      	mov	r2, r3
 80151b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80151bc:	4413      	add	r3, r2
 80151be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 1024;       /*Skip the palette*/
 80151c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80151c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80151ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 0;
 80151ce:	2300      	movs	r3, #0
 80151d0:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 80151d4:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80151d6:	f107 030c 	add.w	r3, r7, #12
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	6a1b      	ldr	r3, [r3, #32]
 80151de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 80151e2:	2300      	movs	r3, #0
 80151e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80151e8:	f107 030c 	add.w	r3, r7, #12
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	7b1b      	ldrb	r3, [r3, #12]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d10e      	bne.n	8015212 <lv_img_decoder_built_in_line_indexed+0x2aa>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80151f4:	f107 030c 	add.w	r3, r7, #12
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        data_tmp                     = img_dsc->data + ofs;
 8015200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015204:	689a      	ldr	r2, [r3, #8]
 8015206:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801520a:	4413      	add	r3, r2
 801520c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8015210:	e017      	b.n	8015242 <lv_img_decoder_built_in_line_indexed+0x2da>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8015212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801521c:	3304      	adds	r3, #4
 801521e:	4619      	mov	r1, r3
 8015220:	4610      	mov	r0, r2
 8015222:	f001 fadc 	bl	80167de <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8015226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8015230:	f107 0110 	add.w	r1, r7, #16
 8015234:	2300      	movs	r3, #0
 8015236:	f001 fa9c 	bl	8016772 <lv_fs_read>
        data_tmp = fs_buf;
 801523a:	f107 0310 	add.w	r3, r7, #16
 801523e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8015242:	2300      	movs	r3, #0
 8015244:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
 8015248:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801524c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    for(i = 0; i < len; i++) {
 8015250:	2300      	movs	r3, #0
 8015252:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8015256:	e042      	b.n	80152de <lv_img_decoder_built_in_line_indexed+0x376>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8015258:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801525c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015260:	4413      	add	r3, r2
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	4619      	mov	r1, r3
 8015266:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801526a:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 801526e:	fa02 f303 	lsl.w	r3, r2, r3
 8015272:	ea01 0203 	and.w	r2, r1, r3
 8015276:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 801527a:	fa42 f303 	asr.w	r3, r2, r3
 801527e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cbuf[i] = user_data->palette[val_act];
 8015282:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015286:	685a      	ldr	r2, [r3, #4]
 8015288:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	441a      	add	r2, r3
 8015290:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801529a:	440b      	add	r3, r1
 801529c:	8812      	ldrh	r2, [r2, #0]
 801529e:	801a      	strh	r2, [r3, #0]

        pos -= px_size;
 80152a0:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 80152a4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80152a8:	1ad3      	subs	r3, r2, r3
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
        if(pos < 0) {
 80152b0:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	da0b      	bge.n	80152d0 <lv_img_decoder_built_in_line_indexed+0x368>
            pos = 8 - px_size;
 80152b8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80152bc:	f1c3 0308 	rsb	r3, r3, #8
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            data_tmp++;
 80152c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80152ca:	3301      	adds	r3, #1
 80152cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(i = 0; i < len; i++) {
 80152d0:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	3301      	adds	r3, #1
 80152d8:	b29b      	uxth	r3, r3
 80152da:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 80152de:	1dbb      	adds	r3, r7, #6
 80152e0:	f9b7 211a 	ldrsh.w	r2, [r7, #282]	; 0x11a
 80152e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152e8:	429a      	cmp	r2, r3
 80152ea:	dbb5      	blt.n	8015258 <lv_img_decoder_built_in_line_indexed+0x2f0>
        }
    }

    return LV_RES_OK;
 80152ec:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd90      	pop	{r4, r7, pc}

080152f8 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	6839      	ldr	r1, [r7, #0]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	4798      	blx	r3
 801530c:	4603      	mov	r3, r0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8015316:	b590      	push	{r4, r7, lr}
 8015318:	b085      	sub	sp, #20
 801531a:	af00      	add	r7, sp, #0
 801531c:	60f8      	str	r0, [r7, #12]
 801531e:	60b9      	str	r1, [r7, #8]
 8015320:	607a      	str	r2, [r7, #4]
 8015322:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681c      	ldr	r4, [r3, #0]
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	68f8      	ldr	r0, [r7, #12]
 8015330:	47a0      	blx	r4
 8015332:	4603      	mov	r3, r0
}
 8015334:	4618      	mov	r0, r3
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	bd90      	pop	{r4, r7, pc}

0801533c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b088      	sub	sp, #32
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8015348:	f107 0114 	add.w	r1, r7, #20
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	68ba      	ldr	r2, [r7, #8]
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f7ff ffe0 	bl	8015316 <lv_font_get_glyph_dsc>
 8015356:	4603      	mov	r3, r0
 8015358:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 801535a:	7ffb      	ldrb	r3, [r7, #31]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <lv_font_get_glyph_width+0x28>
 8015360:	8abb      	ldrh	r3, [r7, #20]
 8015362:	e000      	b.n	8015366 <lv_font_get_glyph_width+0x2a>
    else return 0;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3720      	adds	r7, #32
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}

0801536e <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b086      	sub	sp, #24
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
 8015376:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	68db      	ldr	r3, [r3, #12]
 801537c:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801537e:	6839      	ldr	r1, [r7, #0]
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f000 f883 	bl	801548c <get_glyph_dsc_id>
 8015386:	6138      	str	r0, [r7, #16]
    if(!gid) return false;
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d101      	bne.n	8015392 <lv_font_get_bitmap_fmt_txt+0x24>
 801538e:	2300      	movs	r3, #0
 8015390:	e011      	b.n	80153b6 <lv_font_get_bitmap_fmt_txt+0x48>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	685a      	ldr	r2, [r3, #4]
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	00db      	lsls	r3, r3, #3
 801539a:	4413      	add	r3, r2
 801539c:	60fb      	str	r3, [r7, #12]

    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d007      	beq.n	80153b4 <lv_font_get_bitmap_fmt_txt+0x46>
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	68fa      	ldr	r2, [r7, #12]
 80153aa:	6812      	ldr	r2, [r2, #0]
 80153ac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80153b0:	4413      	add	r3, r2
 80153b2:	e000      	b.n	80153b6 <lv_font_get_bitmap_fmt_txt+0x48>

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b08a      	sub	sp, #40	; 0x28
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	60f8      	str	r0, [r7, #12]
 80153c6:	60b9      	str	r1, [r7, #8]
 80153c8:	607a      	str	r2, [r7, #4]
 80153ca:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	68f8      	ldr	r0, [r7, #12]
 80153d6:	f000 f859 	bl	801548c <get_glyph_dsc_id>
 80153da:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d101      	bne.n	80153e6 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 80153e2:	2300      	movs	r3, #0
 80153e4:	e04e      	b.n	8015484 <lv_font_get_glyph_dsc_fmt_txt+0xc6>

    int8_t kvalue = 0;
 80153e6:	2300      	movs	r3, #0
 80153e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(fdsc->kern_dsc) {
 80153ec:	6a3b      	ldr	r3, [r7, #32]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00f      	beq.n	8015414 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f000 f848 	bl	801548c <get_glyph_dsc_id>
 80153fc:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d007      	beq.n	8015414 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 8015404:	69ba      	ldr	r2, [r7, #24]
 8015406:	69f9      	ldr	r1, [r7, #28]
 8015408:	68f8      	ldr	r0, [r7, #12]
 801540a:	f000 f97b 	bl	8015704 <get_kern_value>
 801540e:	4603      	mov	r3, r0
 8015410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8015414:	6a3b      	ldr	r3, [r7, #32]
 8015416:	685a      	ldr	r2, [r3, #4]
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	00db      	lsls	r3, r3, #3
 801541c:	4413      	add	r3, r2
 801541e:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	885b      	ldrh	r3, [r3, #2]
 8015424:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8015428:	b29b      	uxth	r3, r3
 801542a:	4619      	mov	r1, r3
 801542c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015430:	6a3a      	ldr	r2, [r7, #32]
 8015432:	8a12      	ldrh	r2, [r2, #16]
 8015434:	fb02 f303 	mul.w	r3, r2, r3
 8015438:	111b      	asrs	r3, r3, #4
 801543a:	440b      	add	r3, r1
 801543c:	613b      	str	r3, [r7, #16]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	3308      	adds	r3, #8
 8015442:	091b      	lsrs	r3, r3, #4
 8015444:	613b      	str	r3, [r7, #16]

    dsc_out->adv_w = adv_w;
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	b29a      	uxth	r2, r3
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	795a      	ldrb	r2, [r3, #5]
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	791a      	ldrb	r2, [r3, #4]
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	79db      	ldrb	r3, [r3, #7]
 801546c:	b25a      	sxtb	r2, r3
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = fdsc->bpp;
 8015472:	6a3b      	ldr	r3, [r7, #32]
 8015474:	7cdb      	ldrb	r3, [r3, #19]
 8015476:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801547a:	b2db      	uxtb	r3, r3
 801547c:	461a      	mov	r2, r3
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	719a      	strb	r2, [r3, #6]

    return true;
 8015482:	2301      	movs	r3, #1
}
 8015484:	4618      	mov	r0, r3
 8015486:	3728      	adds	r7, #40	; 0x28
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b08f      	sub	sp, #60	; 0x3c
 8015490:	af02      	add	r7, sp, #8
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d101      	bne.n	80154a0 <get_glyph_dsc_id+0x14>
 801549c:	2300      	movs	r3, #0
 801549e:	e12a      	b.n	80156f6 <get_glyph_dsc_id+0x26a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	627b      	str	r3, [r7, #36]	; 0x24

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	695b      	ldr	r3, [r3, #20]
 80154aa:	683a      	ldr	r2, [r7, #0]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d102      	bne.n	80154b6 <get_glyph_dsc_id+0x2a>
 80154b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b2:	699b      	ldr	r3, [r3, #24]
 80154b4:	e11f      	b.n	80156f6 <get_glyph_dsc_id+0x26a>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 80154b6:	2300      	movs	r3, #0
 80154b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80154ba:	e10b      	b.n	80156d4 <get_glyph_dsc_id+0x248>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	6899      	ldr	r1, [r3, #8]
 80154c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80154c2:	4613      	mov	r3, r2
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	4413      	add	r3, r2
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	440b      	add	r3, r1
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	6899      	ldr	r1, [r3, #8]
 80154d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80154da:	4613      	mov	r3, r2
 80154dc:	009b      	lsls	r3, r3, #2
 80154de:	4413      	add	r3, r2
 80154e0:	009b      	lsls	r3, r3, #2
 80154e2:	440b      	add	r3, r1
 80154e4:	889b      	ldrh	r3, [r3, #4]
 80154e6:	461a      	mov	r2, r3
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d203      	bcs.n	80154f6 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80154ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80154f0:	3301      	adds	r3, #1
 80154f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80154f4:	e0ee      	b.n	80156d4 <get_glyph_dsc_id+0x248>
        uint32_t glyph_id = 0;
 80154f6:	2300      	movs	r3, #0
 80154f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80154fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fc:	6899      	ldr	r1, [r3, #8]
 80154fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015500:	4613      	mov	r3, r2
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	4413      	add	r3, r2
 8015506:	009b      	lsls	r3, r3, #2
 8015508:	440b      	add	r3, r1
 801550a:	7c9b      	ldrb	r3, [r3, #18]
 801550c:	f003 0303 	and.w	r3, r3, #3
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	d10d      	bne.n	8015532 <get_glyph_dsc_id+0xa6>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8015516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015518:	6899      	ldr	r1, [r3, #8]
 801551a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801551c:	4613      	mov	r3, r2
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	4413      	add	r3, r2
 8015522:	009b      	lsls	r3, r3, #2
 8015524:	440b      	add	r3, r1
 8015526:	88db      	ldrh	r3, [r3, #6]
 8015528:	461a      	mov	r2, r3
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	4413      	add	r3, r2
 801552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015530:	e0c8      	b.n	80156c4 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8015532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015534:	6899      	ldr	r1, [r3, #8]
 8015536:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	440b      	add	r3, r1
 8015542:	7c9b      	ldrb	r3, [r3, #18]
 8015544:	f003 0303 	and.w	r3, r3, #3
 8015548:	b2db      	uxtb	r3, r3
 801554a:	2b01      	cmp	r3, #1
 801554c:	d11a      	bne.n	8015584 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015550:	6899      	ldr	r1, [r3, #8]
 8015552:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015554:	4613      	mov	r3, r2
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	4413      	add	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	440b      	add	r3, r1
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8015562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015564:	6899      	ldr	r1, [r3, #8]
 8015566:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015568:	4613      	mov	r3, r2
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	4413      	add	r3, r2
 801556e:	009b      	lsls	r3, r3, #2
 8015570:	440b      	add	r3, r1
 8015572:	88db      	ldrh	r3, [r3, #6]
 8015574:	4619      	mov	r1, r3
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	4413      	add	r3, r2
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	440b      	add	r3, r1
 8015580:	62bb      	str	r3, [r7, #40]	; 0x28
 8015582:	e09f      	b.n	80156c4 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8015584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015586:	6899      	ldr	r1, [r3, #8]
 8015588:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801558a:	4613      	mov	r3, r2
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	4413      	add	r3, r2
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	440b      	add	r3, r1
 8015594:	7c9b      	ldrb	r3, [r3, #18]
 8015596:	f003 0303 	and.w	r3, r3, #3
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b02      	cmp	r3, #2
 801559e:	d13b      	bne.n	8015618 <get_glyph_dsc_id+0x18c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80155a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a2:	6899      	ldr	r1, [r3, #8]
 80155a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80155a6:	4613      	mov	r3, r2
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	4413      	add	r3, r2
 80155ac:	009b      	lsls	r3, r3, #2
 80155ae:	440b      	add	r3, r1
 80155b0:	689c      	ldr	r4, [r3, #8]
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	6899      	ldr	r1, [r3, #8]
 80155b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80155b8:	4613      	mov	r3, r2
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	4413      	add	r3, r2
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	440b      	add	r3, r1
 80155c2:	8a1b      	ldrh	r3, [r3, #16]
 80155c4:	461a      	mov	r2, r3
 80155c6:	f107 0008 	add.w	r0, r7, #8
 80155ca:	4b4d      	ldr	r3, [pc, #308]	; (8015700 <get_glyph_dsc_id+0x274>)
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	2302      	movs	r3, #2
 80155d0:	4621      	mov	r1, r4
 80155d2:	f002 fbfb 	bl	8017dcc <lv_utils_bsearch>
 80155d6:	6178      	str	r0, [r7, #20]

            if(p) {
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d072      	beq.n	80156c4 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 80155de:	6979      	ldr	r1, [r7, #20]
 80155e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e2:	6898      	ldr	r0, [r3, #8]
 80155e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80155e6:	4613      	mov	r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	4413      	add	r3, r2
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	4403      	add	r3, r0
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	1acb      	subs	r3, r1, r3
 80155f4:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	085b      	lsrs	r3, r3, #1
 80155fa:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80155fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fe:	6899      	ldr	r1, [r3, #8]
 8015600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015602:	4613      	mov	r3, r2
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	4413      	add	r3, r2
 8015608:	009b      	lsls	r3, r3, #2
 801560a:	440b      	add	r3, r1
 801560c:	88db      	ldrh	r3, [r3, #6]
 801560e:	461a      	mov	r2, r3
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	4413      	add	r3, r2
 8015614:	62bb      	str	r3, [r7, #40]	; 0x28
 8015616:	e055      	b.n	80156c4 <get_glyph_dsc_id+0x238>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8015618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561a:	6899      	ldr	r1, [r3, #8]
 801561c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801561e:	4613      	mov	r3, r2
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	4413      	add	r3, r2
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	440b      	add	r3, r1
 8015628:	7c9b      	ldrb	r3, [r3, #18]
 801562a:	f003 0303 	and.w	r3, r3, #3
 801562e:	b2db      	uxtb	r3, r3
 8015630:	2b03      	cmp	r3, #3
 8015632:	d147      	bne.n	80156c4 <get_glyph_dsc_id+0x238>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8015634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015636:	6899      	ldr	r1, [r3, #8]
 8015638:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801563a:	4613      	mov	r3, r2
 801563c:	009b      	lsls	r3, r3, #2
 801563e:	4413      	add	r3, r2
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	440b      	add	r3, r1
 8015644:	689c      	ldr	r4, [r3, #8]
 8015646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015648:	6899      	ldr	r1, [r3, #8]
 801564a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801564c:	4613      	mov	r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	4413      	add	r3, r2
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	440b      	add	r3, r1
 8015656:	8a1b      	ldrh	r3, [r3, #16]
 8015658:	461a      	mov	r2, r3
 801565a:	f107 0008 	add.w	r0, r7, #8
 801565e:	4b28      	ldr	r3, [pc, #160]	; (8015700 <get_glyph_dsc_id+0x274>)
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	2302      	movs	r3, #2
 8015664:	4621      	mov	r1, r4
 8015666:	f002 fbb1 	bl	8017dcc <lv_utils_bsearch>
 801566a:	6238      	str	r0, [r7, #32]

            if(p) {
 801566c:	6a3b      	ldr	r3, [r7, #32]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d028      	beq.n	80156c4 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8015672:	6a39      	ldr	r1, [r7, #32]
 8015674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015676:	6898      	ldr	r0, [r3, #8]
 8015678:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801567a:	4613      	mov	r3, r2
 801567c:	009b      	lsls	r3, r3, #2
 801567e:	4413      	add	r3, r2
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	4403      	add	r3, r0
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	1acb      	subs	r3, r1, r3
 8015688:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	085b      	lsrs	r3, r3, #1
 801568e:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8015690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015692:	6899      	ldr	r1, [r3, #8]
 8015694:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015696:	4613      	mov	r3, r2
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	4413      	add	r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	440b      	add	r3, r1
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80156a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a6:	6899      	ldr	r1, [r3, #8]
 80156a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80156aa:	4613      	mov	r3, r2
 80156ac:	009b      	lsls	r3, r3, #2
 80156ae:	4413      	add	r3, r2
 80156b0:	009b      	lsls	r3, r3, #2
 80156b2:	440b      	add	r3, r1
 80156b4:	88db      	ldrh	r3, [r3, #6]
 80156b6:	4619      	mov	r1, r3
 80156b8:	69ba      	ldr	r2, [r7, #24]
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	4413      	add	r3, r2
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	440b      	add	r3, r1
 80156c2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c6:	683a      	ldr	r2, [r7, #0]
 80156c8:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 80156ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ce:	619a      	str	r2, [r3, #24]
        return glyph_id;
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	e010      	b.n	80156f6 <get_glyph_dsc_id+0x26a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80156d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d6:	8a5b      	ldrh	r3, [r3, #18]
 80156d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80156dc:	b29b      	uxth	r3, r3
 80156de:	461a      	mov	r2, r3
 80156e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156e2:	4293      	cmp	r3, r2
 80156e4:	f4ff aeea 	bcc.w	80154bc <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 80156e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ea:	683a      	ldr	r2, [r7, #0]
 80156ec:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 80156ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f0:	2200      	movs	r2, #0
 80156f2:	619a      	str	r2, [r3, #24]
    return 0;
 80156f4:	2300      	movs	r3, #0

}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3734      	adds	r7, #52	; 0x34
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd90      	pop	{r4, r7, pc}
 80156fe:	bf00      	nop
 8015700:	080158ed 	.word	0x080158ed

08015704 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b094      	sub	sp, #80	; 0x50
 8015708:	af02      	add	r7, sp, #8
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 8015716:	2300      	movs	r3, #0
 8015718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801571e:	7cdb      	ldrb	r3, [r3, #19]
 8015720:	f003 0320 	and.w	r3, r3, #32
 8015724:	b2db      	uxtb	r3, r3
 8015726:	2b00      	cmp	r3, #0
 8015728:	d164      	bne.n	80157f4 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8015730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015732:	7adb      	ldrb	r3, [r3, #11]
 8015734:	f003 0303 	and.w	r3, r3, #3
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b00      	cmp	r3, #0
 801573c:	d12b      	bne.n	8015796 <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 801573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	b29b      	uxth	r3, r3
 8015748:	021b      	lsls	r3, r3, #8
 801574a:	b29a      	uxth	r2, r3
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	b29b      	uxth	r3, r3
 8015750:	4413      	add	r3, r2
 8015752:	b29b      	uxth	r3, r3
 8015754:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8015756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801575e:	461a      	mov	r2, r3
 8015760:	f107 001a 	add.w	r0, r7, #26
 8015764:	4b3b      	ldr	r3, [pc, #236]	; (8015854 <get_kern_value+0x150>)
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	2302      	movs	r3, #2
 801576a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801576c:	f002 fb2e 	bl	8017dcc <lv_utils_bsearch>
 8015770:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8015772:	6a3b      	ldr	r3, [r7, #32]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d067      	beq.n	8015848 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8015778:	6a3a      	ldr	r2, [r7, #32]
 801577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801577c:	1ad3      	subs	r3, r2, r3
 801577e:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	085b      	lsrs	r3, r3, #1
 8015784:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 8015786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015788:	685a      	ldr	r2, [r3, #4]
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	4413      	add	r3, r2
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015794:	e058      	b.n	8015848 <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 8015796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015798:	7adb      	ldrb	r3, [r3, #11]
 801579a:	f003 0303 	and.w	r3, r3, #3
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d151      	bne.n	8015848 <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 80157a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	021a      	lsls	r2, r3, #8
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	4413      	add	r3, r2
 80157b2:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80157b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80157bc:	461a      	mov	r2, r3
 80157be:	f107 0014 	add.w	r0, r7, #20
 80157c2:	4b25      	ldr	r3, [pc, #148]	; (8015858 <get_kern_value+0x154>)
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	2304      	movs	r3, #4
 80157c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80157ca:	f002 faff 	bl	8017dcc <lv_utils_bsearch>
 80157ce:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80157d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d038      	beq.n	8015848 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 80157d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	62bb      	str	r3, [r7, #40]	; 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 80157de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e0:	091b      	lsrs	r3, r3, #4
 80157e2:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 80157e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157e6:	685a      	ldr	r2, [r3, #4]
 80157e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ea:	4413      	add	r3, r2
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80157f2:	e029      	b.n	8015848 <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 80157f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80157fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157fc:	685a      	ldr	r2, [r3, #4]
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	4413      	add	r3, r2
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 8015808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801580a:	685a      	ldr	r2, [r3, #4]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	4413      	add	r3, r2
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8015816:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801581a:	2b00      	cmp	r3, #0
 801581c:	d014      	beq.n	8015848 <get_kern_value+0x144>
 801581e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015822:	2b00      	cmp	r3, #0
 8015824:	d010      	beq.n	8015848 <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8015826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801582e:	3a01      	subs	r2, #1
 8015830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015832:	7b49      	ldrb	r1, [r1, #13]
 8015834:	fb01 f102 	mul.w	r1, r1, r2
 8015838:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801583c:	3a01      	subs	r2, #1
 801583e:	440a      	add	r2, r1
 8015840:	4413      	add	r3, r2
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8015848:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801584c:	4618      	mov	r0, r3
 801584e:	3748      	adds	r7, #72	; 0x48
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	0801585d 	.word	0x0801585d
 8015858:	080158a5 	.word	0x080158a5

0801585c <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801585c:	b480      	push	{r7}
 801585e:	b085      	sub	sp, #20
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	781a      	ldrb	r2, [r3, #0]
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	429a      	cmp	r2, r3
 8015878:	d006      	beq.n	8015888 <kern_pair_8_compare+0x2c>
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	461a      	mov	r2, r3
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	1ad3      	subs	r3, r2, r3
 8015886:	e007      	b.n	8015898 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3301      	adds	r3, #1
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	461a      	mov	r2, r3
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	3301      	adds	r3, #1
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	1ad3      	subs	r3, r2, r3

}
 8015898:	4618      	mov	r0, r3
 801589a:	3714      	adds	r7, #20
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b085      	sub	sp, #20
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	881a      	ldrh	r2, [r3, #0]
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	881b      	ldrh	r3, [r3, #0]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d006      	beq.n	80158d0 <kern_pair_16_compare+0x2c>
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	461a      	mov	r2, r3
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	881b      	ldrh	r3, [r3, #0]
 80158cc:	1ad3      	subs	r3, r2, r3
 80158ce:	e007      	b.n	80158e0 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	3302      	adds	r3, #2
 80158d4:	881b      	ldrh	r3, [r3, #0]
 80158d6:	461a      	mov	r2, r3
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	3302      	adds	r3, #2
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	1ad3      	subs	r3, r2, r3
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3714      	adds	r7, #20
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	461a      	mov	r2, r3
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	881b      	ldrh	r3, [r3, #0]
 8015900:	1ad3      	subs	r3, r2, r3
}
 8015902:	4618      	mov	r0, r3
 8015904:	370c      	adds	r7, #12
 8015906:	46bd      	mov	sp, r7
 8015908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590c:	4770      	bx	lr

0801590e <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b082      	sub	sp, #8
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8015916:	2224      	movs	r2, #36	; 0x24
 8015918:	2100      	movs	r1, #0
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f015 fb83 	bl	802b026 <memset>

    driver->flush_cb         = NULL;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2200      	movs	r2, #0
 8015924:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	22f0      	movs	r2, #240	; 0xf0
 801592a:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	22f0      	movs	r2, #240	; 0xf0
 8015930:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2200      	movs	r2, #0
 8015936:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	7a13      	ldrb	r3, [r2, #8]
 801593c:	f36f 0341 	bfc	r3, #1, #1
 8015940:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8015942:	687a      	ldr	r2, [r7, #4]
 8015944:	7f13      	ldrb	r3, [r2, #28]
 8015946:	f043 0307 	orr.w	r3, r3, #7
 801594a:	7713      	strb	r3, [r2, #28]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	7f13      	ldrb	r3, [r2, #28]
 8015950:	f36f 03c7 	bfc	r3, #3, #5
 8015954:	7713      	strb	r3, [r2, #28]
 8015956:	687a      	ldr	r2, [r7, #4]
 8015958:	7f53      	ldrb	r3, [r2, #29]
 801595a:	f36f 0304 	bfc	r3, #0, #5
 801595e:	7753      	strb	r3, [r2, #29]
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	7f53      	ldrb	r3, [r2, #29]
 8015964:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015968:	7753      	strb	r3, [r2, #29]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	7a13      	ldrb	r3, [r2, #8]
 801596e:	f043 0301 	orr.w	r3, r3, #1
 8015972:	7213      	strb	r3, [r2, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2200      	movs	r2, #0
 8015978:	621a      	str	r2, [r3, #32]
#endif

    driver->set_px_cb = NULL;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2200      	movs	r2, #0
 801597e:	615a      	str	r2, [r3, #20]
}
 8015980:	bf00      	nop
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
 801598e:	60f8      	str	r0, [r7, #12]
 8015990:	60b9      	str	r1, [r7, #8]
 8015992:	607a      	str	r2, [r7, #4]
 8015994:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8015996:	221c      	movs	r2, #28
 8015998:	2100      	movs	r1, #0
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f015 fb43 	bl	802b026 <memset>

    disp_buf->buf1    = buf1;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	68ba      	ldr	r2, [r7, #8]
 80159a4:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	683a      	ldr	r2, [r7, #0]
 80159b8:	60da      	str	r2, [r3, #12]
}
 80159ba:	bf00      	nop
 80159bc:	3710      	adds	r7, #16
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
	...

080159c4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 80159cc:	4841      	ldr	r0, [pc, #260]	; (8015ad4 <lv_disp_drv_register+0x110>)
 80159ce:	f000 ffbb 	bl	8016948 <lv_ll_ins_head>
 80159d2:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d105      	bne.n	80159e6 <lv_disp_drv_register+0x22>
        lv_mem_assert(disp);
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d100      	bne.n	80159e2 <lv_disp_drv_register+0x1e>
 80159e0:	e7fe      	b.n	80159e0 <lv_disp_drv_register+0x1c>
        return NULL;
 80159e2:	2300      	movs	r3, #0
 80159e4:	e072      	b.n	8015acc <lv_disp_drv_register+0x108>
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2224      	movs	r2, #36	; 0x24
 80159ea:	6879      	ldr	r1, [r7, #4]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f015 fb0f 	bl	802b010 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80159f8:	2220      	movs	r2, #32
 80159fa:	2100      	movs	r1, #0
 80159fc:	4618      	mov	r0, r3
 80159fe:	f015 fb12 	bl	802b026 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	3340      	adds	r3, #64	; 0x40
 8015a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f015 fb0a 	bl	802b026 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	3328      	adds	r3, #40	; 0x28
 8015a16:	2148      	movs	r1, #72	; 0x48
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f000 ff75 	bl	8016908 <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 8015a1e:	4b2e      	ldr	r3, [pc, #184]	; (8015ad8 <lv_disp_drv_register+0x114>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d102      	bne.n	8015a2c <lv_disp_drv_register+0x68>
 8015a26:	4a2c      	ldr	r2, [pc, #176]	; (8015ad8 <lv_disp_drv_register+0x114>)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 8015a2c:	4b2a      	ldr	r3, [pc, #168]	; (8015ad8 <lv_disp_drv_register+0x114>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8015a32:	4a29      	ldr	r2, [pc, #164]	; (8015ad8 <lv_disp_drv_register+0x114>)
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	6013      	str	r3, [r2, #0]
                                        new display*/

    disp->inv_p = 0;
 8015a38:	68fa      	ldr	r2, [r7, #12]
 8015a3a:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8015a3e:	f36f 0309 	bfc	r3, #0, #10
 8015a42:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8015a46:	2100      	movs	r1, #0
 8015a48:	2000      	movs	r0, #0
 8015a4a:	f7f3 f955 	bl	8008cf8 <lv_obj_create>
 8015a4e:	4602      	mov	r2, r0
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	635a      	str	r2, [r3, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8015a54:	2100      	movs	r1, #0
 8015a56:	2000      	movs	r0, #0
 8015a58:	f7f3 f94e 	bl	8008cf8 <lv_obj_create>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	639a      	str	r2, [r3, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8015a62:	2100      	movs	r1, #0
 8015a64:	2000      	movs	r0, #0
 8015a66:	f7f3 f947 	bl	8008cf8 <lv_obj_create>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a74:	4919      	ldr	r1, [pc, #100]	; (8015adc <lv_disp_drv_register+0x118>)
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7f4 fb77 	bl	800a16a <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a80:	4916      	ldr	r1, [pc, #88]	; (8015adc <lv_disp_drv_register+0x118>)
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7f4 fb71 	bl	800a16a <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f3 fc70 	bl	8009372 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 8015a92:	4a11      	ldr	r2, [pc, #68]	; (8015ad8 <lv_disp_drv_register+0x114>)
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	6013      	str	r3, [r2, #0]

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2203      	movs	r2, #3
 8015a9c:	211e      	movs	r1, #30
 8015a9e:	4810      	ldr	r0, [pc, #64]	; (8015ae0 <lv_disp_drv_register+0x11c>)
 8015aa0:	f001 fc64 	bl	801736c <lv_task_create>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	625a      	str	r2, [r3, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d100      	bne.n	8015ab4 <lv_disp_drv_register+0xf0>
 8015ab2:	e7fe      	b.n	8015ab2 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d101      	bne.n	8015ac0 <lv_disp_drv_register+0xfc>
 8015abc:	2300      	movs	r3, #0
 8015abe:	e005      	b.n	8015acc <lv_disp_drv_register+0x108>

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f001 fcff 	bl	80174c8 <lv_task_ready>

    return disp;
 8015aca:	68fb      	ldr	r3, [r7, #12]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	2001bb88 	.word	0x2001bb88
 8015ad8:	20017778 	.word	0x20017778
 8015adc:	2001b89c 	.word	0x2001b89c
 8015ae0:	0800adf9 	.word	0x0800adf9

08015ae4 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	af00      	add	r7, sp, #0
    return disp_def;
 8015ae8:	4b03      	ldr	r3, [pc, #12]	; (8015af8 <lv_disp_get_default+0x14>)
 8015aea:	681b      	ldr	r3, [r3, #0]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	46bd      	mov	sp, r7
 8015af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af4:	4770      	bx	lr
 8015af6:	bf00      	nop
 8015af8:	20017778 	.word	0x20017778

08015afc <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d102      	bne.n	8015b10 <lv_disp_get_hor_res+0x14>
 8015b0a:	f7ff ffeb 	bl	8015ae4 <lv_disp_get_default>
 8015b0e:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <lv_disp_get_hor_res+0x1e>
        return LV_HOR_RES_MAX;
 8015b16:	23f0      	movs	r3, #240	; 0xf0
 8015b18:	e00d      	b.n	8015b36 <lv_disp_get_hor_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	7a1b      	ldrb	r3, [r3, #8]
 8015b1e:	f003 0302 	and.w	r3, r3, #2
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d103      	bne.n	8015b30 <lv_disp_get_hor_res+0x34>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b2e:	e002      	b.n	8015b36 <lv_disp_get_hor_res+0x3a>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b082      	sub	sp, #8
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <lv_disp_get_ver_res+0x14>
 8015b4c:	f7ff ffca 	bl	8015ae4 <lv_disp_get_default>
 8015b50:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d101      	bne.n	8015b5c <lv_disp_get_ver_res+0x1e>
        return LV_VER_RES_MAX;
 8015b58:	23f0      	movs	r3, #240	; 0xf0
 8015b5a:	e00d      	b.n	8015b78 <lv_disp_get_ver_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	7a1b      	ldrb	r3, [r3, #8]
 8015b60:	f003 0302 	and.w	r3, r3, #2
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d103      	bne.n	8015b72 <lv_disp_get_ver_res+0x34>
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b70:	e002      	b.n	8015b78 <lv_disp_get_ver_res+0x3a>
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d102      	bne.n	8015b94 <lv_disp_get_antialiasing+0x14>
 8015b8e:	f7ff ffa9 	bl	8015ae4 <lv_disp_get_default>
 8015b92:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return false;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d101      	bne.n	8015b9e <lv_disp_get_antialiasing+0x1e>
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	e008      	b.n	8015bb0 <lv_disp_get_antialiasing+0x30>

    return disp->driver.antialiasing ? true : false;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	7a1b      	ldrb	r3, [r3, #8]
 8015ba2:	f003 0301 	and.w	r3, r3, #1
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	bf14      	ite	ne
 8015baa:	2301      	movne	r3, #1
 8015bac:	2300      	moveq	r3, #0
 8015bae:	b2db      	uxtb	r3, r3
#endif
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3708      	adds	r7, #8
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
    disp_drv->buffer->flushing = 0;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	685a      	ldr	r2, [r3, #4]
 8015bc4:	7e13      	ldrb	r3, [r2, #24]
 8015bc6:	f36f 0300 	bfc	r3, #0, #1
 8015bca:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 8015bcc:	bf00      	nop
 8015bce:	370c      	adds	r7, #12
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr

08015bd8 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	685b      	ldr	r3, [r3, #4]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d006      	beq.n	8015c10 <lv_disp_is_double_buf+0x20>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d001      	beq.n	8015c10 <lv_disp_is_double_buf+0x20>
        return true;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e000      	b.n	8015c12 <lv_disp_is_double_buf+0x22>
    else
        return false;
 8015c10:	2300      	movs	r3, #0
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	370c      	adds	r7, #12
 8015c16:	46bd      	mov	sp, r7
 8015c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1c:	4770      	bx	lr

08015c1e <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b084      	sub	sp, #16
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c34:	fb03 f302 	mul.w	r3, r3, r2
 8015c38:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f7ff ffd8 	bl	8015bf0 <lv_disp_is_double_buf>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d007      	beq.n	8015c56 <lv_disp_is_true_double_buf+0x38>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	68db      	ldr	r3, [r3, #12]
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d101      	bne.n	8015c56 <lv_disp_is_true_double_buf+0x38>
        return true;
 8015c52:	2301      	movs	r3, #1
 8015c54:	e000      	b.n	8015c58 <lv_disp_is_true_double_buf+0x3a>
    } else {
        return false;
 8015c56:	2300      	movs	r3, #0
    }
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d104      	bne.n	8015c78 <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8015c6e:	4807      	ldr	r0, [pc, #28]	; (8015c8c <lv_indev_get_next+0x2c>)
 8015c70:	f000 ffcc 	bl	8016c0c <lv_ll_get_head>
 8015c74:	4603      	mov	r3, r0
 8015c76:	e004      	b.n	8015c82 <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8015c78:	6879      	ldr	r1, [r7, #4]
 8015c7a:	4804      	ldr	r0, [pc, #16]	; (8015c8c <lv_indev_get_next+0x2c>)
 8015c7c:	f000 ffec 	bl	8016c58 <lv_ll_get_next>
 8015c80:	4603      	mov	r3, r0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	2001bb78 	.word	0x2001bb78

08015c90 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 8015c98:	4b07      	ldr	r3, [pc, #28]	; (8015cb8 <lv_tick_inc+0x28>)
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8015c9e:	4b07      	ldr	r3, [pc, #28]	; (8015cbc <lv_tick_inc+0x2c>)
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	4413      	add	r3, r2
 8015ca6:	4a05      	ldr	r2, [pc, #20]	; (8015cbc <lv_tick_inc+0x2c>)
 8015ca8:	6013      	str	r3, [r2, #0]
}
 8015caa:	bf00      	nop
 8015cac:	370c      	adds	r7, #12
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop
 8015cb8:	20017780 	.word	0x20017780
 8015cbc:	2001777c 	.word	0x2001777c

08015cc0 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	af00      	add	r7, sp, #0
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8015cc6:	4b09      	ldr	r3, [pc, #36]	; (8015cec <lv_tick_get+0x2c>)
 8015cc8:	2201      	movs	r2, #1
 8015cca:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 8015ccc:	4b08      	ldr	r3, [pc, #32]	; (8015cf0 <lv_tick_get+0x30>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8015cd2:	4b06      	ldr	r3, [pc, #24]	; (8015cec <lv_tick_get+0x2c>)
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d0f4      	beq.n	8015cc6 <lv_tick_get+0x6>
                                Continue until make a non interrupted cycle */

    return result;
 8015cdc:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	370c      	adds	r7, #12
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	20017780 	.word	0x20017780
 8015cf0:	2001777c 	.word	0x2001777c

08015cf4 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 8015cfc:	f7ff ffe0 	bl	8015cc0 <lv_tick_get>
 8015d00:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 8015d02:	68fa      	ldr	r2, [r7, #12]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d304      	bcc.n	8015d14 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	607b      	str	r3, [r7, #4]
 8015d12:	e006      	b.n	8015d22 <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	425b      	negs	r3, r3
 8015d18:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 8015d1a:	687a      	ldr	r2, [r7, #4]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	4413      	add	r3, r2
 8015d20:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 8015d22:	687b      	ldr	r3, [r7, #4]
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3710      	adds	r7, #16
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8015d30:	2128      	movs	r1, #40	; 0x28
 8015d32:	4808      	ldr	r0, [pc, #32]	; (8015d54 <lv_anim_core_init+0x28>)
 8015d34:	f000 fde8 	bl	8016908 <lv_ll_init>
    last_task_run = lv_tick_get();
 8015d38:	f7ff ffc2 	bl	8015cc0 <lv_tick_get>
 8015d3c:	4602      	mov	r2, r0
 8015d3e:	4b06      	ldr	r3, [pc, #24]	; (8015d58 <lv_anim_core_init+0x2c>)
 8015d40:	601a      	str	r2, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8015d42:	2300      	movs	r3, #0
 8015d44:	2203      	movs	r2, #3
 8015d46:	211e      	movs	r1, #30
 8015d48:	4804      	ldr	r0, [pc, #16]	; (8015d5c <lv_anim_core_init+0x30>)
 8015d4a:	f001 fb0f 	bl	801736c <lv_task_create>
}
 8015d4e:	bf00      	nop
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	2001bbb4 	.word	0x2001bbb4
 8015d58:	20017784 	.word	0x20017784
 8015d5c:	08015f15 	.word	0x08015f15

08015d60 <lv_anim_create>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_create(lv_anim_t * a)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b084      	sub	sp, #16
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the  same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d007      	beq.n	8015d80 <lv_anim_create+0x20>
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	4619      	mov	r1, r3
 8015d7a:	4610      	mov	r0, r2
 8015d7c:	f000 f830 	bl	8015de0 <lv_anim_del>

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8015d80:	4815      	ldr	r0, [pc, #84]	; (8015dd8 <lv_anim_create+0x78>)
 8015d82:	f000 fde1 	bl	8016948 <lv_ll_ins_head>
 8015d86:	60f8      	str	r0, [r7, #12]
    lv_mem_assert(new_anim);
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d100      	bne.n	8015d90 <lv_anim_create+0x30>
 8015d8e:	e7fe      	b.n	8015d8e <lv_anim_create+0x2e>
    if(new_anim == NULL) return;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d01c      	beq.n	8015dd0 <lv_anim_create+0x70>

    /*Initialize the animation descriptor*/
    a->playback_now = 0;
 8015d96:	687a      	ldr	r2, [r7, #4]
 8015d98:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8015d9c:	f36f 0382 	bfc	r3, #2, #1
 8015da0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8015da4:	2228      	movs	r2, #40	; 0x28
 8015da6:	6879      	ldr	r1, [r7, #4]
 8015da8:	68f8      	ldr	r0, [r7, #12]
 8015daa:	f015 f931 	bl	802b010 <memcpy>

    /*Set the start value*/
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d008      	beq.n	8015dc8 <lv_anim_create+0x68>
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	68fa      	ldr	r2, [r7, #12]
 8015dbc:	6810      	ldr	r0, [r2, #0]
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	6912      	ldr	r2, [r2, #16]
 8015dc2:	b212      	sxth	r2, r2
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	4798      	blx	r3

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_list_changed = true;
 8015dc8:	4b04      	ldr	r3, [pc, #16]	; (8015ddc <lv_anim_create+0x7c>)
 8015dca:	2201      	movs	r2, #1
 8015dcc:	701a      	strb	r2, [r3, #0]
 8015dce:	e000      	b.n	8015dd2 <lv_anim_create+0x72>
    if(new_anim == NULL) return;
 8015dd0:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 8015dd2:	3710      	adds	r7, #16
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	2001bbb4 	.word	0x2001bbb4
 8015ddc:	20017788 	.word	0x20017788

08015de0 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 8015dea:	2300      	movs	r3, #0
 8015dec:	74fb      	strb	r3, [r7, #19]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8015dee:	4816      	ldr	r0, [pc, #88]	; (8015e48 <lv_anim_del+0x68>)
 8015df0:	f000 ff0c 	bl	8016c0c <lv_ll_get_head>
 8015df4:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 8015df6:	e01f      	b.n	8015e38 <lv_anim_del+0x58>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8015df8:	6979      	ldr	r1, [r7, #20]
 8015dfa:	4813      	ldr	r0, [pc, #76]	; (8015e48 <lv_anim_del+0x68>)
 8015dfc:	f000 ff2c 	bl	8016c58 <lv_ll_get_next>
 8015e00:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	687a      	ldr	r2, [r7, #4]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d113      	bne.n	8015e34 <lv_anim_del+0x54>
 8015e0c:	697b      	ldr	r3, [r7, #20]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	683a      	ldr	r2, [r7, #0]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d002      	beq.n	8015e1c <lv_anim_del+0x3c>
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10b      	bne.n	8015e34 <lv_anim_del+0x54>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8015e1c:	6979      	ldr	r1, [r7, #20]
 8015e1e:	480a      	ldr	r0, [pc, #40]	; (8015e48 <lv_anim_del+0x68>)
 8015e20:	f000 fe46 	bl	8016ab0 <lv_ll_rem>
            lv_mem_free(a);
 8015e24:	6978      	ldr	r0, [r7, #20]
 8015e26:	f001 f8b1 	bl	8016f8c <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8015e2a:	4b08      	ldr	r3, [pc, #32]	; (8015e4c <lv_anim_del+0x6c>)
 8015e2c:	2201      	movs	r2, #1
 8015e2e:	701a      	strb	r2, [r3, #0]
                                         the linked list*/
            del = true;
 8015e30:	2301      	movs	r3, #1
 8015e32:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d1dc      	bne.n	8015df8 <lv_anim_del+0x18>
    }

    return del;
 8015e3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3718      	adds	r7, #24
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}
 8015e48:	2001bbb4 	.word	0x2001bbb4
 8015e4c:	20017788 	.word	0x20017788

08015e50 <lv_anim_speed_to_time>:
 * @param start start value of the animation
 * @param end end value of the animation
 * @return the required time [ms] for the animation with the given parameters
 */
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)
{
 8015e50:	b480      	push	{r7}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	4603      	mov	r3, r0
 8015e58:	80fb      	strh	r3, [r7, #6]
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	80bb      	strh	r3, [r7, #4]
 8015e5e:	4613      	mov	r3, r2
 8015e60:	807b      	strh	r3, [r7, #2]
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8015e62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015e66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	bfb8      	it	lt
 8015e70:	425b      	neglt	r3, r3
 8015e72:	60bb      	str	r3, [r7, #8]
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e7a:	fb02 f203 	mul.w	r2, r2, r3
 8015e7e:	88fb      	ldrh	r3, [r7, #6]
 8015e80:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e84:	60fb      	str	r3, [r7, #12]

    if(time > UINT16_MAX) time = UINT16_MAX;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e8c:	d302      	bcc.n	8015e94 <lv_anim_speed_to_time+0x44>
 8015e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e92:	60fb      	str	r3, [r7, #12]

    if(time == 0) {
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d102      	bne.n	8015ea0 <lv_anim_speed_to_time+0x50>
        time++;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	60fb      	str	r3, [r7, #12]
    }

    return time;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	b29b      	uxth	r3, r3
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3714      	adds	r7, #20
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr

08015eb0 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b085      	sub	sp, #20
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	8b1b      	ldrh	r3, [r3, #24]
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d103      	bne.n	8015ed0 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8015ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ecc:	60fb      	str	r3, [r7, #12]
 8015ece:	e008      	b.n	8015ee2 <lv_anim_path_linear+0x32>
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015ed6:	029b      	lsls	r3, r3, #10
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	8b12      	ldrh	r2, [r2, #24]
 8015edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ee0:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	695a      	ldr	r2, [r3, #20]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	691b      	ldr	r3, [r3, #16]
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	fb02 f303 	mul.w	r3, r2, r3
 8015ef2:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	129b      	asrs	r3, r3, #10
 8015ef8:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	691b      	ldr	r3, [r3, #16]
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	4413      	add	r3, r2
 8015f02:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	b21b      	sxth	r3, r3
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3714      	adds	r7, #20
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b086      	sub	sp, #24
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8015f1c:	4842      	ldr	r0, [pc, #264]	; (8016028 <anim_task+0x114>)
 8015f1e:	f000 fe75 	bl	8016c0c <lv_ll_get_head>
 8015f22:	6178      	str	r0, [r7, #20]
 8015f24:	e00b      	b.n	8015f3e <anim_task+0x2a>
    {
        a->has_run = 0;
 8015f26:	697a      	ldr	r2, [r7, #20]
 8015f28:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8015f2c:	f36f 03c3 	bfc	r3, #3, #1
 8015f30:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8015f34:	6979      	ldr	r1, [r7, #20]
 8015f36:	483c      	ldr	r0, [pc, #240]	; (8016028 <anim_task+0x114>)
 8015f38:	f000 fe8e 	bl	8016c58 <lv_ll_get_next>
 8015f3c:	6178      	str	r0, [r7, #20]
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d1f0      	bne.n	8015f26 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8015f44:	4b39      	ldr	r3, [pc, #228]	; (801602c <anim_task+0x118>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7ff fed3 	bl	8015cf4 <lv_tick_elaps>
 8015f4e:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8015f50:	4835      	ldr	r0, [pc, #212]	; (8016028 <anim_task+0x114>)
 8015f52:	f000 fe5b 	bl	8016c0c <lv_ll_get_head>
 8015f56:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 8015f58:	e059      	b.n	801600e <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8015f5a:	4b35      	ldr	r3, [pc, #212]	; (8016030 <anim_task+0x11c>)
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015f66:	f003 0308 	and.w	r3, r3, #8
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d140      	bne.n	8015ff2 <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8015f70:	697a      	ldr	r2, [r7, #20]
 8015f72:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8015f76:	f043 0308 	orr.w	r3, r3, #8
 8015f7a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            a->act_time += elaps;
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015f84:	b29a      	uxth	r2, r3
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	4413      	add	r3, r2
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	b21a      	sxth	r2, r3
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	db29      	blt.n	8015ff2 <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	8b1b      	ldrh	r3, [r3, #24]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	dd04      	ble.n	8015fb8 <anim_task+0xa4>
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	8b1b      	ldrh	r3, [r3, #24]
 8015fb2:	b21a      	sxth	r2, r3
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	689b      	ldr	r3, [r3, #8]
 8015fbc:	6978      	ldr	r0, [r7, #20]
 8015fbe:	4798      	blx	r3
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d007      	beq.n	8015fdc <anim_task+0xc8>
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	697a      	ldr	r2, [r7, #20]
 8015fd2:	6812      	ldr	r2, [r2, #0]
 8015fd4:	68f9      	ldr	r1, [r7, #12]
 8015fd6:	b209      	sxth	r1, r1
 8015fd8:	4610      	mov	r0, r2
 8015fda:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	8b1b      	ldrh	r3, [r3, #24]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	db02      	blt.n	8015ff2 <anim_task+0xde>
                    anim_ready_handler(a);
 8015fec:	6978      	ldr	r0, [r7, #20]
 8015fee:	f000 f821 	bl	8016034 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8015ff2:	4b0f      	ldr	r3, [pc, #60]	; (8016030 <anim_task+0x11c>)
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d004      	beq.n	8016004 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8015ffa:	480b      	ldr	r0, [pc, #44]	; (8016028 <anim_task+0x114>)
 8015ffc:	f000 fe06 	bl	8016c0c <lv_ll_get_head>
 8016000:	6178      	str	r0, [r7, #20]
 8016002:	e004      	b.n	801600e <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016004:	6979      	ldr	r1, [r7, #20]
 8016006:	4808      	ldr	r0, [pc, #32]	; (8016028 <anim_task+0x114>)
 8016008:	f000 fe26 	bl	8016c58 <lv_ll_get_next>
 801600c:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d1a2      	bne.n	8015f5a <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 8016014:	f7ff fe54 	bl	8015cc0 <lv_tick_get>
 8016018:	4602      	mov	r2, r0
 801601a:	4b04      	ldr	r3, [pc, #16]	; (801602c <anim_task+0x118>)
 801601c:	601a      	str	r2, [r3, #0]
}
 801601e:	bf00      	nop
 8016020:	3718      	adds	r7, #24
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	2001bbb4 	.word	0x2001bbb4
 801602c:	20017784 	.word	0x20017784
 8016030:	20017788 	.word	0x20017788

08016034 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b08e      	sub	sp, #56	; 0x38
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016042:	f003 0302 	and.w	r3, r3, #2
 8016046:	b2db      	uxtb	r3, r3
 8016048:	2b00      	cmp	r3, #0
 801604a:	d107      	bne.n	801605c <anim_ready_handler+0x28>
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016052:	f003 0301 	and.w	r3, r3, #1
 8016056:	b2db      	uxtb	r3, r3
 8016058:	2b00      	cmp	r3, #0
 801605a:	d017      	beq.n	801608c <anim_ready_handler+0x58>
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016062:	f003 0302 	and.w	r3, r3, #2
 8016066:	b2db      	uxtb	r3, r3
 8016068:	2b00      	cmp	r3, #0
 801606a:	d129      	bne.n	80160c0 <anim_ready_handler+0x8c>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016072:	f003 0301 	and.w	r3, r3, #1
 8016076:	b2db      	uxtb	r3, r3
 8016078:	2b00      	cmp	r3, #0
 801607a:	d021      	beq.n	80160c0 <anim_ready_handler+0x8c>
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016082:	f003 0304 	and.w	r3, r3, #4
 8016086:	b2db      	uxtb	r3, r3
 8016088:	2b00      	cmp	r3, #0
 801608a:	d019      	beq.n	80160c0 <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 801608c:	f107 030c 	add.w	r3, r7, #12
 8016090:	2228      	movs	r2, #40	; 0x28
 8016092:	6879      	ldr	r1, [r7, #4]
 8016094:	4618      	mov	r0, r3
 8016096:	f014 ffbb 	bl	802b010 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 801609a:	6879      	ldr	r1, [r7, #4]
 801609c:	4829      	ldr	r0, [pc, #164]	; (8016144 <anim_ready_handler+0x110>)
 801609e:	f000 fd07 	bl	8016ab0 <lv_ll_rem>
        lv_mem_free(a);
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 ff72 	bl	8016f8c <lv_mem_free>
        anim_list_changed = true;
 80160a8:	4b27      	ldr	r3, [pc, #156]	; (8016148 <anim_ready_handler+0x114>)
 80160aa:	2201      	movs	r2, #1
 80160ac:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 80160ae:	69bb      	ldr	r3, [r7, #24]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d040      	beq.n	8016136 <anim_ready_handler+0x102>
 80160b4:	69bb      	ldr	r3, [r7, #24]
 80160b6:	f107 020c 	add.w	r2, r7, #12
 80160ba:	4610      	mov	r0, r2
 80160bc:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 80160be:	e03a      	b.n	8016136 <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	8bdb      	ldrh	r3, [r3, #30]
 80160c4:	425b      	negs	r3, r3
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	b21a      	sxth	r2, r3
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80160d4:	f003 0301 	and.w	r3, r3, #1
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d02c      	beq.n	8016138 <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80160e4:	f003 0304 	and.w	r3, r3, #4
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d106      	bne.n	80160fc <anim_ready_handler+0xc8>
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	8b9b      	ldrh	r3, [r3, #28]
 80160f2:	425b      	negs	r3, r3
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	b21a      	sxth	r2, r3
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016102:	f003 0304 	and.w	r3, r3, #4
 8016106:	b2db      	uxtb	r3, r3
 8016108:	2b00      	cmp	r3, #0
 801610a:	bf0c      	ite	eq
 801610c:	2301      	moveq	r3, #1
 801610e:	2300      	movne	r3, #0
 8016110:	b2d9      	uxtb	r1, r3
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8016118:	f361 0382 	bfi	r3, r1, #2, #1
 801611c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	691b      	ldr	r3, [r3, #16]
 8016124:	637b      	str	r3, [r7, #52]	; 0x34
            a->start = a->end;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	695a      	ldr	r2, [r3, #20]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016132:	615a      	str	r2, [r3, #20]
 8016134:	e000      	b.n	8016138 <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8016136:	bf00      	nop
        }
    }

    return anim_list_changed;
 8016138:	4b03      	ldr	r3, [pc, #12]	; (8016148 <anim_ready_handler+0x114>)
 801613a:	781b      	ldrb	r3, [r3, #0]
}
 801613c:	4618      	mov	r0, r3
 801613e:	3738      	adds	r7, #56	; 0x38
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}
 8016144:	2001bbb4 	.word	0x2001bbb4
 8016148:	20017788 	.word	0x20017788

0801614c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801615a:	b29a      	uxth	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016162:	b29b      	uxth	r3, r3
 8016164:	1ad3      	subs	r3, r2, r3
 8016166:	b29b      	uxth	r3, r3
 8016168:	3301      	adds	r3, #1
 801616a:	b29b      	uxth	r3, r3
 801616c:	b21b      	sxth	r3, r3
}
 801616e:	4618      	mov	r0, r3
 8016170:	370c      	adds	r7, #12
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr

0801617a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801617a:	b480      	push	{r7}
 801617c:	b083      	sub	sp, #12
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016188:	b29a      	uxth	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016190:	b29b      	uxth	r3, r3
 8016192:	1ad3      	subs	r3, r2, r3
 8016194:	b29b      	uxth	r3, r3
 8016196:	3301      	adds	r3, #1
 8016198:	b29b      	uxth	r3, r3
 801619a:	b21b      	sxth	r3, r3
}
 801619c:	4618      	mov	r0, r3
 801619e:	370c      	adds	r7, #12
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr

080161a8 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 80161a8:	b480      	push	{r7}
 80161aa:	b085      	sub	sp, #20
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	4608      	mov	r0, r1
 80161b2:	4611      	mov	r1, r2
 80161b4:	461a      	mov	r2, r3
 80161b6:	4603      	mov	r3, r0
 80161b8:	817b      	strh	r3, [r7, #10]
 80161ba:	460b      	mov	r3, r1
 80161bc:	813b      	strh	r3, [r7, #8]
 80161be:	4613      	mov	r3, r2
 80161c0:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	897a      	ldrh	r2, [r7, #10]
 80161c6:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	893a      	ldrh	r2, [r7, #8]
 80161cc:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	88fa      	ldrh	r2, [r7, #6]
 80161d2:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	8b3a      	ldrh	r2, [r7, #24]
 80161d8:	80da      	strh	r2, [r3, #6]
}
 80161da:	bf00      	nop
 80161dc:	3714      	adds	r7, #20
 80161de:	46bd      	mov	sp, r7
 80161e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e4:	4770      	bx	lr

080161e6 <lv_area_set_width>:
 * Set the width of an area
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
 80161e6:	b480      	push	{r7}
 80161e8:	b083      	sub	sp, #12
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	6078      	str	r0, [r7, #4]
 80161ee:	460b      	mov	r3, r1
 80161f0:	807b      	strh	r3, [r7, #2]
    area_p->x2 = area_p->x1 + w - 1;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161f8:	b29a      	uxth	r2, r3
 80161fa:	887b      	ldrh	r3, [r7, #2]
 80161fc:	4413      	add	r3, r2
 80161fe:	b29b      	uxth	r3, r3
 8016200:	3b01      	subs	r3, #1
 8016202:	b29b      	uxth	r3, r3
 8016204:	b21a      	sxth	r2, r3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	809a      	strh	r2, [r3, #4]
}
 801620a:	bf00      	nop
 801620c:	370c      	adds	r7, #12
 801620e:	46bd      	mov	sp, r7
 8016210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016214:	4770      	bx	lr

08016216 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 8016216:	b480      	push	{r7}
 8016218:	b083      	sub	sp, #12
 801621a:	af00      	add	r7, sp, #0
 801621c:	6078      	str	r0, [r7, #4]
 801621e:	460b      	mov	r3, r1
 8016220:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016228:	b29a      	uxth	r2, r3
 801622a:	887b      	ldrh	r3, [r7, #2]
 801622c:	4413      	add	r3, r2
 801622e:	b29b      	uxth	r3, r3
 8016230:	3b01      	subs	r3, #1
 8016232:	b29b      	uxth	r3, r3
 8016234:	b21a      	sxth	r2, r3
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	80da      	strh	r2, [r3, #6]
}
 801623a:	bf00      	nop
 801623c:	370c      	adds	r7, #12
 801623e:	46bd      	mov	sp, r7
 8016240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016244:	4770      	bx	lr

08016246 <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8016246:	b580      	push	{r7, lr}
 8016248:	b084      	sub	sp, #16
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
 801624e:	460b      	mov	r3, r1
 8016250:	807b      	strh	r3, [r7, #2]
 8016252:	4613      	mov	r3, r2
 8016254:	803b      	strh	r3, [r7, #0]
    lv_coord_t w = lv_area_get_width(area_p);
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f7ff ff78 	bl	801614c <lv_area_get_width>
 801625c:	4603      	mov	r3, r0
 801625e:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_area_get_height(area_p);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7ff ff8a 	bl	801617a <lv_area_get_height>
 8016266:	4603      	mov	r3, r0
 8016268:	81bb      	strh	r3, [r7, #12]
    area_p->x1   = x;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	887a      	ldrh	r2, [r7, #2]
 801626e:	801a      	strh	r2, [r3, #0]
    area_p->y1   = y;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	883a      	ldrh	r2, [r7, #0]
 8016274:	805a      	strh	r2, [r3, #2]
    lv_area_set_width(area_p, w);
 8016276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801627a:	4619      	mov	r1, r3
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7ff ffb2 	bl	80161e6 <lv_area_set_width>
    lv_area_set_height(area_p, h);
 8016282:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016286:	4619      	mov	r1, r3
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f7ff ffc4 	bl	8016216 <lv_area_set_height>
}
 801628e:	bf00      	nop
 8016290:	3710      	adds	r7, #16
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}

08016296 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 8016296:	b480      	push	{r7}
 8016298:	b085      	sub	sp, #20
 801629a:	af00      	add	r7, sp, #0
 801629c:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162a4:	461a      	mov	r2, r3
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	3301      	adds	r3, #1
 80162b0:	461a      	mov	r2, r3
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80162b8:	4619      	mov	r1, r3
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80162c0:	1acb      	subs	r3, r1, r3
 80162c2:	3301      	adds	r3, #1
 80162c4:	fb03 f302 	mul.w	r3, r3, r2
 80162c8:	60fb      	str	r3, [r7, #12]

    return size;
 80162ca:	68fb      	ldr	r3, [r7, #12]
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3714      	adds	r7, #20
 80162d0:	46bd      	mov	sp, r7
 80162d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d6:	4770      	bx	lr

080162d8 <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80162d8:	b480      	push	{r7}
 80162da:	b087      	sub	sp, #28
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162f0:	4293      	cmp	r3, r2
 80162f2:	bfb8      	it	lt
 80162f4:	4613      	movlt	r3, r2
 80162f6:	b21a      	sxth	r2, r3
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016308:	4293      	cmp	r3, r2
 801630a:	bfb8      	it	lt
 801630c:	4613      	movlt	r3, r2
 801630e:	b21a      	sxth	r2, r3
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016320:	4293      	cmp	r3, r2
 8016322:	bfa8      	it	ge
 8016324:	4613      	movge	r3, r2
 8016326:	b21a      	sxth	r2, r3
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016338:	4293      	cmp	r3, r2
 801633a:	bfa8      	it	ge
 801633c:	4613      	movge	r3, r2
 801633e:	b21a      	sxth	r2, r3
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8016344:	2301      	movs	r3, #1
 8016346:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016354:	429a      	cmp	r2, r3
 8016356:	dc07      	bgt.n	8016368 <lv_area_intersect+0x90>
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016364:	429a      	cmp	r2, r3
 8016366:	dd01      	ble.n	801636c <lv_area_intersect+0x94>
        union_ok = false;
 8016368:	2300      	movs	r3, #0
 801636a:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801636c:	7dfb      	ldrb	r3, [r7, #23]
}
 801636e:	4618      	mov	r0, r3
 8016370:	371c      	adds	r7, #28
 8016372:	46bd      	mov	sp, r7
 8016374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016378:	4770      	bx	lr

0801637a <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801637a:	b480      	push	{r7}
 801637c:	b085      	sub	sp, #20
 801637e:	af00      	add	r7, sp, #0
 8016380:	60f8      	str	r0, [r7, #12]
 8016382:	60b9      	str	r1, [r7, #8]
 8016384:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f9b3 2000 	ldrsh.w	r2, [r3]
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016392:	4293      	cmp	r3, r2
 8016394:	bfa8      	it	ge
 8016396:	4613      	movge	r3, r2
 8016398:	b21a      	sxth	r2, r3
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163aa:	4293      	cmp	r3, r2
 80163ac:	bfa8      	it	ge
 80163ae:	4613      	movge	r3, r2
 80163b0:	b21a      	sxth	r2, r3
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163c2:	4293      	cmp	r3, r2
 80163c4:	bfb8      	it	lt
 80163c6:	4613      	movlt	r3, r2
 80163c8:	b21a      	sxth	r2, r3
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80163da:	4293      	cmp	r3, r2
 80163dc:	bfb8      	it	lt
 80163de:	4613      	movlt	r3, r2
 80163e0:	b21a      	sxth	r2, r3
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	80da      	strh	r2, [r3, #6]
}
 80163e6:	bf00      	nop
 80163e8:	3714      	adds	r7, #20
 80163ea:	46bd      	mov	sp, r7
 80163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f0:	4770      	bx	lr

080163f2 <lv_area_is_point_on>:
 * @param a_p pointer to an area
 * @param p_p pointer to a point
 * @return false:the point is out of the area
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
 80163f2:	b480      	push	{r7}
 80163f4:	b085      	sub	sp, #20
 80163f6:	af00      	add	r7, sp, #0
 80163f8:	6078      	str	r0, [r7, #4]
 80163fa:	6039      	str	r1, [r7, #0]
    bool is_on = false;
 80163fc:	2300      	movs	r3, #0
 80163fe:	73fb      	strb	r3, [r7, #15]

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801640c:	429a      	cmp	r2, r3
 801640e:	db19      	blt.n	8016444 <lv_area_is_point_on+0x52>
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801641c:	429a      	cmp	r2, r3
 801641e:	dc11      	bgt.n	8016444 <lv_area_is_point_on+0x52>
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801642c:	429a      	cmp	r2, r3
 801642e:	db09      	blt.n	8016444 <lv_area_is_point_on+0x52>
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801643c:	429a      	cmp	r2, r3
 801643e:	dc01      	bgt.n	8016444 <lv_area_is_point_on+0x52>
        is_on = true;
 8016440:	2301      	movs	r3, #1
 8016442:	73fb      	strb	r3, [r7, #15]
    }

    return is_on;
 8016444:	7bfb      	ldrb	r3, [r7, #15]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3714      	adds	r7, #20
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr

08016452 <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8016452:	b480      	push	{r7}
 8016454:	b083      	sub	sp, #12
 8016456:	af00      	add	r7, sp, #0
 8016458:	6078      	str	r0, [r7, #4]
 801645a:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016468:	429a      	cmp	r2, r3
 801646a:	dc19      	bgt.n	80164a0 <lv_area_is_on+0x4e>
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016478:	429a      	cmp	r2, r3
 801647a:	db11      	blt.n	80164a0 <lv_area_is_on+0x4e>
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016488:	429a      	cmp	r2, r3
 801648a:	dc09      	bgt.n	80164a0 <lv_area_is_on+0x4e>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016498:	429a      	cmp	r2, r3
 801649a:	db01      	blt.n	80164a0 <lv_area_is_on+0x4e>
        return true;
 801649c:	2301      	movs	r3, #1
 801649e:	e000      	b.n	80164a2 <lv_area_is_on+0x50>
    } else {
        return false;
 80164a0:	2300      	movs	r3, #0
    }
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	370c      	adds	r7, #12
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr

080164ae <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 80164ae:	b480      	push	{r7}
 80164b0:	b085      	sub	sp, #20
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
 80164b6:	6039      	str	r1, [r7, #0]
    bool is_in = false;
 80164b8:	2300      	movs	r3, #0
 80164ba:	73fb      	strb	r3, [r7, #15]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	db19      	blt.n	8016500 <lv_area_is_in+0x52>
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80164d8:	429a      	cmp	r2, r3
 80164da:	db11      	blt.n	8016500 <lv_area_is_in+0x52>
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	dc09      	bgt.n	8016500 <lv_area_is_in+0x52>
       ain_p->y2 <= aholder_p->y2) {
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80164f8:	429a      	cmp	r2, r3
 80164fa:	dc01      	bgt.n	8016500 <lv_area_is_in+0x52>
        is_in = true;
 80164fc:	2301      	movs	r3, #1
 80164fe:	73fb      	strb	r3, [r7, #15]
    }

    return is_in;
 8016500:	7bfb      	ldrb	r3, [r7, #15]
}
 8016502:	4618      	mov	r0, r3
 8016504:	3714      	adds	r7, #20
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr

0801650e <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 801650e:	b480      	push	{r7}
 8016510:	b085      	sub	sp, #20
 8016512:	af00      	add	r7, sp, #0
 8016514:	60f8      	str	r0, [r7, #12]
 8016516:	60b9      	str	r1, [r7, #8]
 8016518:	4613      	mov	r3, r2
 801651a:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	88fa      	ldrh	r2, [r7, #6]
 8016520:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	2200      	movs	r2, #0
 8016526:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8016528:	88fb      	ldrh	r3, [r7, #6]
 801652a:	f1c3 0301 	rsb	r3, r3, #1
 801652e:	b29b      	uxth	r3, r3
 8016530:	b21a      	sxth	r2, r3
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	801a      	strh	r2, [r3, #0]
}
 8016536:	bf00      	nop
 8016538:	3714      	adds	r7, #20
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr

08016542 <lv_circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
 8016542:	b480      	push	{r7}
 8016544:	b083      	sub	sp, #12
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016556:	429a      	cmp	r2, r3
 8016558:	bfd4      	ite	le
 801655a:	2301      	movle	r3, #1
 801655c:	2300      	movgt	r3, #0
 801655e:	b2db      	uxtb	r3, r3
}
 8016560:	4618      	mov	r0, r3
 8016562:	370c      	adds	r7, #12
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr

0801656c <lv_circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 801656c:	b480      	push	{r7}
 801656e:	b083      	sub	sp, #12
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	6039      	str	r1, [r7, #0]
    c->y++;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801657c:	b29b      	uxth	r3, r3
 801657e:	3301      	adds	r3, #1
 8016580:	b29b      	uxth	r3, r3
 8016582:	b21a      	sxth	r2, r3
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	805a      	strh	r2, [r3, #2]

    if(*tmp <= 0) {
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801658e:	2b00      	cmp	r3, #0
 8016590:	dc11      	bgt.n	80165b6 <lv_circ_next+0x4a>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016598:	b29a      	uxth	r2, r3
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	b29b      	uxth	r3, r3
 80165a6:	4413      	add	r3, r2
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	3301      	adds	r3, #1
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	b21a      	sxth	r2, r3
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	801a      	strh	r2, [r3, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
    }
}
 80165b4:	e01e      	b.n	80165f4 <lv_circ_next+0x88>
        c->x--;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165bc:	b29b      	uxth	r3, r3
 80165be:	3b01      	subs	r3, #1
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	b21a      	sxth	r2, r3
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	801a      	strh	r2, [r3, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165d6:	4619      	mov	r1, r3
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165de:	1acb      	subs	r3, r1, r3
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	4413      	add	r3, r2
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	3301      	adds	r3, #1
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	b21a      	sxth	r2, r3
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	801a      	strh	r2, [r3, #0]
}
 80165f4:	bf00      	nop
 80165f6:	370c      	adds	r7, #12
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr

08016600 <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8016604:	2148      	movs	r1, #72	; 0x48
 8016606:	4802      	ldr	r0, [pc, #8]	; (8016610 <lv_fs_init+0x10>)
 8016608:	f000 f97e 	bl	8016908 <lv_ll_init>
}
 801660c:	bf00      	nop
 801660e:	bd80      	pop	{r7, pc}
 8016610:	2001bba0 	.word	0x2001bba0

08016614 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8016614:	b590      	push	{r4, r7, lr}
 8016616:	b089      	sub	sp, #36	; 0x24
 8016618:	af00      	add	r7, sp, #0
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	4613      	mov	r3, r2
 8016620:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2200      	movs	r2, #0
 8016626:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d101      	bne.n	8016638 <lv_fs_open+0x24>
 8016634:	230b      	movs	r3, #11
 8016636:	e069      	b.n	801670c <lv_fs_open+0xf8>

    char letter = path[0];
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 801663e:	7ffb      	ldrb	r3, [r7, #31]
 8016640:	4618      	mov	r0, r3
 8016642:	f000 f941 	bl	80168c8 <lv_fs_get_drv>
 8016646:	4602      	mov	r2, r0
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d104      	bne.n	801665e <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2200      	movs	r2, #0
 8016658:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 801665a:	2303      	movs	r3, #3
 801665c:	e056      	b.n	801670c <lv_fs_open+0xf8>
    }

    if(file_p->drv->ready_cb != NULL) {
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	689b      	ldr	r3, [r3, #8]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d014      	beq.n	8016692 <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	689b      	ldr	r3, [r3, #8]
 801666e:	68fa      	ldr	r2, [r7, #12]
 8016670:	6852      	ldr	r2, [r2, #4]
 8016672:	4610      	mov	r0, r2
 8016674:	4798      	blx	r3
 8016676:	4603      	mov	r3, r0
 8016678:	f083 0301 	eor.w	r3, r3, #1
 801667c:	b2db      	uxtb	r3, r3
 801667e:	2b00      	cmp	r3, #0
 8016680:	d007      	beq.n	8016692 <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	2200      	movs	r2, #0
 8016686:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2200      	movs	r2, #0
 801668c:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 801668e:	2301      	movs	r3, #1
 8016690:	e03c      	b.n	801670c <lv_fs_open+0xf8>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	885b      	ldrh	r3, [r3, #2]
 8016698:	4618      	mov	r0, r3
 801669a:	f000 fc37 	bl	8016f0c <lv_mem_alloc>
 801669e:	4602      	mov	r2, r0
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	601a      	str	r2, [r3, #0]
    lv_mem_assert(file_p->file_d);
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d100      	bne.n	80166ae <lv_fs_open+0x9a>
 80166ac:	e7fe      	b.n	80166ac <lv_fs_open+0x98>
    if(file_p->file_d == NULL) {
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d104      	bne.n	80166c0 <lv_fs_open+0xac>
        file_p->drv = NULL;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	2200      	movs	r2, #0
 80166ba:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 80166bc:	230a      	movs	r3, #10
 80166be:	e025      	b.n	801670c <lv_fs_open+0xf8>
    }

    if(file_p->drv->open_cb == NULL) {
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	68db      	ldr	r3, [r3, #12]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d101      	bne.n	80166ce <lv_fs_open+0xba>
        return LV_FS_RES_NOT_IMP;
 80166ca:	2309      	movs	r3, #9
 80166cc:	e01e      	b.n	801670c <lv_fs_open+0xf8>
    }

    const char * real_path = lv_fs_get_real_path(path);
 80166ce:	68b8      	ldr	r0, [r7, #8]
 80166d0:	f000 f8d8 	bl	8016884 <lv_fs_get_real_path>
 80166d4:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	68dc      	ldr	r4, [r3, #12]
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	6858      	ldr	r0, [r3, #4]
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	6819      	ldr	r1, [r3, #0]
 80166e4:	79fb      	ldrb	r3, [r7, #7]
 80166e6:	69ba      	ldr	r2, [r7, #24]
 80166e8:	47a0      	blx	r4
 80166ea:	4603      	mov	r3, r0
 80166ec:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 80166ee:	7dfb      	ldrb	r3, [r7, #23]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d00a      	beq.n	801670a <lv_fs_open+0xf6>
        lv_mem_free(file_p->file_d);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4618      	mov	r0, r3
 80166fa:	f000 fc47 	bl	8016f8c <lv_mem_free>
        file_p->file_d = NULL;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	2200      	movs	r2, #0
 8016702:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	2200      	movs	r2, #0
 8016708:	605a      	str	r2, [r3, #4]
    }

    return res;
 801670a:	7dfb      	ldrb	r3, [r7, #23]
}
 801670c:	4618      	mov	r0, r3
 801670e:	3724      	adds	r7, #36	; 0x24
 8016710:	46bd      	mov	sp, r7
 8016712:	bd90      	pop	{r4, r7, pc}

08016714 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d101      	bne.n	8016728 <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 8016724:	230b      	movs	r3, #11
 8016726:	e020      	b.n	801676a <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	691b      	ldr	r3, [r3, #16]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d101      	bne.n	8016736 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 8016732:	2309      	movs	r3, #9
 8016734:	e019      	b.n	801676a <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	691b      	ldr	r3, [r3, #16]
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	6850      	ldr	r0, [r2, #4]
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	6812      	ldr	r2, [r2, #0]
 8016744:	4611      	mov	r1, r2
 8016746:	4798      	blx	r3
 8016748:	4603      	mov	r3, r0
 801674a:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	4618      	mov	r0, r3
 8016752:	f000 fc1b 	bl	8016f8c <lv_mem_free>
    file_p->file_d = NULL;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2200      	movs	r2, #0
 8016766:	601a      	str	r2, [r3, #0]

    return res;
 8016768:	7bfb      	ldrb	r3, [r7, #15]
}
 801676a:	4618      	mov	r0, r3
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}

08016772 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8016772:	b590      	push	{r4, r7, lr}
 8016774:	b089      	sub	sp, #36	; 0x24
 8016776:	af02      	add	r7, sp, #8
 8016778:	60f8      	str	r0, [r7, #12]
 801677a:	60b9      	str	r1, [r7, #8]
 801677c:	607a      	str	r2, [r7, #4]
 801677e:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d002      	beq.n	801678c <lv_fs_read+0x1a>
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	2200      	movs	r2, #0
 801678a:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d101      	bne.n	8016798 <lv_fs_read+0x26>
 8016794:	230b      	movs	r3, #11
 8016796:	e01e      	b.n	80167d6 <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	699b      	ldr	r3, [r3, #24]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d101      	bne.n	80167a6 <lv_fs_read+0x34>
 80167a2:	2309      	movs	r3, #9
 80167a4:	e017      	b.n	80167d6 <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 80167a6:	2300      	movs	r3, #0
 80167a8:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	699c      	ldr	r4, [r3, #24]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	6858      	ldr	r0, [r3, #4]
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	6819      	ldr	r1, [r3, #0]
 80167b8:	f107 0310 	add.w	r3, r7, #16
 80167bc:	9300      	str	r3, [sp, #0]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	68ba      	ldr	r2, [r7, #8]
 80167c2:	47a0      	blx	r4
 80167c4:	4603      	mov	r3, r0
 80167c6:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d002      	beq.n	80167d4 <lv_fs_read+0x62>
 80167ce:	693a      	ldr	r2, [r7, #16]
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	601a      	str	r2, [r3, #0]

    return res;
 80167d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	371c      	adds	r7, #28
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd90      	pop	{r4, r7, pc}

080167de <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 80167de:	b580      	push	{r7, lr}
 80167e0:	b084      	sub	sp, #16
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
 80167e6:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d101      	bne.n	80167f4 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 80167f0:	230b      	movs	r3, #11
 80167f2:	e012      	b.n	801681a <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	6a1b      	ldr	r3, [r3, #32]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d101      	bne.n	8016802 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 80167fe:	2309      	movs	r3, #9
 8016800:	e00b      	b.n	801681a <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	6a1b      	ldr	r3, [r3, #32]
 8016808:	687a      	ldr	r2, [r7, #4]
 801680a:	6850      	ldr	r0, [r2, #4]
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	6811      	ldr	r1, [r2, #0]
 8016810:	683a      	ldr	r2, [r7, #0]
 8016812:	4798      	blx	r3
 8016814:	4603      	mov	r3, r0
 8016816:	73fb      	strb	r3, [r7, #15]

    return res;
 8016818:	7bfb      	ldrb	r3, [r7, #15]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
	...

08016824 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = strlen(fn); i > 0; i--) {
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7e9 fcd9 	bl	80001e4 <strlen>
 8016832:	4603      	mov	r3, r0
 8016834:	81fb      	strh	r3, [r7, #14]
 8016836:	e01b      	b.n	8016870 <lv_fs_get_ext+0x4c>
        if(fn[i] == '.') {
 8016838:	89fb      	ldrh	r3, [r7, #14]
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	4413      	add	r3, r2
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	2b2e      	cmp	r3, #46	; 0x2e
 8016842:	d104      	bne.n	801684e <lv_fs_get_ext+0x2a>
            return &fn[i + 1];
 8016844:	89fb      	ldrh	r3, [r7, #14]
 8016846:	3301      	adds	r3, #1
 8016848:	687a      	ldr	r2, [r7, #4]
 801684a:	4413      	add	r3, r2
 801684c:	e014      	b.n	8016878 <lv_fs_get_ext+0x54>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 801684e:	89fb      	ldrh	r3, [r7, #14]
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	4413      	add	r3, r2
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	2b2f      	cmp	r3, #47	; 0x2f
 8016858:	d005      	beq.n	8016866 <lv_fs_get_ext+0x42>
 801685a:	89fb      	ldrh	r3, [r7, #14]
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	4413      	add	r3, r2
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	2b5c      	cmp	r3, #92	; 0x5c
 8016864:	d101      	bne.n	801686a <lv_fs_get_ext+0x46>
            return ""; /*No extension if a '\' or '/' found*/
 8016866:	4b06      	ldr	r3, [pc, #24]	; (8016880 <lv_fs_get_ext+0x5c>)
 8016868:	e006      	b.n	8016878 <lv_fs_get_ext+0x54>
    for(i = strlen(fn); i > 0; i--) {
 801686a:	89fb      	ldrh	r3, [r7, #14]
 801686c:	3b01      	subs	r3, #1
 801686e:	81fb      	strh	r3, [r7, #14]
 8016870:	89fb      	ldrh	r3, [r7, #14]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d1e0      	bne.n	8016838 <lv_fs_get_ext+0x14>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 8016876:	4b02      	ldr	r3, [pc, #8]	; (8016880 <lv_fs_get_ext+0x5c>)
}
 8016878:	4618      	mov	r0, r3
 801687a:	3710      	adds	r7, #16
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}
 8016880:	0802d464 	.word	0x0802d464

08016884 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	3301      	adds	r3, #1
 8016890:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 8016892:	e00e      	b.n	80168b2 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	2b3a      	cmp	r3, #58	; 0x3a
 801689a:	d007      	beq.n	80168ac <lv_fs_get_real_path+0x28>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	2b5c      	cmp	r3, #92	; 0x5c
 80168a2:	d003      	beq.n	80168ac <lv_fs_get_real_path+0x28>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	2b2f      	cmp	r3, #47	; 0x2f
 80168aa:	d106      	bne.n	80168ba <lv_fs_get_real_path+0x36>
            path++;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	3301      	adds	r3, #1
 80168b0:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d1ec      	bne.n	8016894 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 80168ba:	687b      	ldr	r3, [r7, #4]
}
 80168bc:	4618      	mov	r0, r3
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	4603      	mov	r3, r0
 80168d0:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 80168d2:	480c      	ldr	r0, [pc, #48]	; (8016904 <lv_fs_get_drv+0x3c>)
 80168d4:	f000 f99a 	bl	8016c0c <lv_ll_get_head>
 80168d8:	60f8      	str	r0, [r7, #12]
 80168da:	e00b      	b.n	80168f4 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	79fa      	ldrb	r2, [r7, #7]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d101      	bne.n	80168ea <lv_fs_get_drv+0x22>
            return drv;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	e008      	b.n	80168fc <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 80168ea:	68f9      	ldr	r1, [r7, #12]
 80168ec:	4805      	ldr	r0, [pc, #20]	; (8016904 <lv_fs_get_drv+0x3c>)
 80168ee:	f000 f9b3 	bl	8016c58 <lv_ll_get_next>
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d1f0      	bne.n	80168dc <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 80168fa:	2300      	movs	r3, #0
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	2001bba0 	.word	0x2001bba0

08016908 <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 8016908:	b480      	push	{r7}
 801690a:	b083      	sub	sp, #12
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
 8016910:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	f003 0303 	and.w	r3, r3, #3
 8016924:	2b00      	cmp	r3, #0
 8016926:	d006      	beq.n	8016936 <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	f023 0303 	bic.w	r3, r3, #3
 801692e:	603b      	str	r3, [r7, #0]
        node_size += 4;
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	3304      	adds	r3, #4
 8016934:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	601a      	str	r2, [r3, #0]
}
 801693c:	bf00      	nop
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	3308      	adds	r3, #8
 8016956:	4618      	mov	r0, r3
 8016958:	f000 fad8 	bl	8016f0c <lv_mem_alloc>
 801695c:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d020      	beq.n	80169a6 <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8016964:	2200      	movs	r2, #0
 8016966:	68f9      	ldr	r1, [r7, #12]
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f000 fa08 	bl	8016d7e <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	461a      	mov	r2, r3
 8016974:	68f9      	ldr	r1, [r7, #12]
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f000 fa27 	bl	8016dca <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d006      	beq.n	8016992 <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	685b      	ldr	r3, [r3, #4]
 8016988:	68fa      	ldr	r2, [r7, #12]
 801698a:	4619      	mov	r1, r3
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f000 f9f6 	bl	8016d7e <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	68fa      	ldr	r2, [r7, #12]
 8016996:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	689b      	ldr	r3, [r3, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d102      	bne.n	80169a6 <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	68fa      	ldr	r2, [r7, #12]
 80169a4:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 80169a6:	68fb      	ldr	r3, [r7, #12]
}
 80169a8:	4618      	mov	r0, r3
 80169aa:	3710      	adds	r7, #16
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
 80169b8:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d002      	beq.n	80169c6 <lv_ll_ins_prev+0x16>
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d101      	bne.n	80169ca <lv_ll_ins_prev+0x1a>
 80169c6:	2300      	movs	r3, #0
 80169c8:	e035      	b.n	8016a36 <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 f91e 	bl	8016c0c <lv_ll_get_head>
 80169d0:	4602      	mov	r2, r0
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d108      	bne.n	80169ea <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f7ff ffb5 	bl	8016948 <lv_ll_ins_head>
 80169de:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d126      	bne.n	8016a34 <lv_ll_ins_prev+0x84>
 80169e6:	2300      	movs	r3, #0
 80169e8:	e025      	b.n	8016a36 <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	3308      	adds	r3, #8
 80169f0:	4618      	mov	r0, r3
 80169f2:	f000 fa8b 	bl	8016f0c <lv_mem_alloc>
 80169f6:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d101      	bne.n	8016a02 <lv_ll_ins_prev+0x52>
 80169fe:	2300      	movs	r3, #0
 8016a00:	e019      	b.n	8016a36 <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 8016a02:	6839      	ldr	r1, [r7, #0]
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f941 	bl	8016c8c <lv_ll_get_prev>
 8016a0a:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	68b9      	ldr	r1, [r7, #8]
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 f9da 	bl	8016dca <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 8016a16:	68ba      	ldr	r2, [r7, #8]
 8016a18:	68f9      	ldr	r1, [r7, #12]
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f000 f9af 	bl	8016d7e <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 8016a20:	68fa      	ldr	r2, [r7, #12]
 8016a22:	6839      	ldr	r1, [r7, #0]
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f9aa 	bl	8016d7e <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	68f9      	ldr	r1, [r7, #12]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 f9cb 	bl	8016dca <node_set_next>
    }

    return n_new;
 8016a34:	68fb      	ldr	r3, [r7, #12]
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3710      	adds	r7, #16
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b084      	sub	sp, #16
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	3308      	adds	r3, #8
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f000 fa5d 	bl	8016f0c <lv_mem_alloc>
 8016a52:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d101      	bne.n	8016a5e <lv_ll_ins_tail+0x20>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	e024      	b.n	8016aa8 <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d020      	beq.n	8016aa6 <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8016a64:	2200      	movs	r2, #0
 8016a66:	68f9      	ldr	r1, [r7, #12]
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f000 f9ae 	bl	8016dca <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	689b      	ldr	r3, [r3, #8]
 8016a72:	461a      	mov	r2, r3
 8016a74:	68f9      	ldr	r1, [r7, #12]
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f000 f981 	bl	8016d7e <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	689b      	ldr	r3, [r3, #8]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d006      	beq.n	8016a92 <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	689b      	ldr	r3, [r3, #8]
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 f99c 	bl	8016dca <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d102      	bne.n	8016aa6 <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f000 f8a6 	bl	8016c0c <lv_ll_get_head>
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	4293      	cmp	r3, r2
 8016ac6:	d116      	bne.n	8016af6 <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8016ac8:	6839      	ldr	r1, [r7, #0]
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 f8c4 	bl	8016c58 <lv_ll_get_next>
 8016ad0:	4602      	mov	r2, r0
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d103      	bne.n	8016ae6 <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 8016ae4:	e039      	b.n	8016b5a <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	685b      	ldr	r3, [r3, #4]
 8016aea:	2200      	movs	r2, #0
 8016aec:	4619      	mov	r1, r3
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 f945 	bl	8016d7e <node_set_prev>
}
 8016af4:	e031      	b.n	8016b5a <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 f89b 	bl	8016c32 <lv_ll_get_tail>
 8016afc:	4602      	mov	r2, r0
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d116      	bne.n	8016b32 <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 8016b04:	6839      	ldr	r1, [r7, #0]
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f000 f8c0 	bl	8016c8c <lv_ll_get_prev>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	689b      	ldr	r3, [r3, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d103      	bne.n	8016b22 <lv_ll_rem+0x72>
            ll_p->head = NULL;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	605a      	str	r2, [r3, #4]
}
 8016b20:	e01b      	b.n	8016b5a <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	689b      	ldr	r3, [r3, #8]
 8016b26:	2200      	movs	r2, #0
 8016b28:	4619      	mov	r1, r3
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 f94d 	bl	8016dca <node_set_next>
}
 8016b30:	e013      	b.n	8016b5a <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 8016b32:	6839      	ldr	r1, [r7, #0]
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f000 f8a9 	bl	8016c8c <lv_ll_get_prev>
 8016b3a:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8016b3c:	6839      	ldr	r1, [r7, #0]
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 f88a 	bl	8016c58 <lv_ll_get_next>
 8016b44:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 8016b46:	68ba      	ldr	r2, [r7, #8]
 8016b48:	68f9      	ldr	r1, [r7, #12]
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f000 f93d 	bl	8016dca <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	68b9      	ldr	r1, [r7, #8]
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f000 f912 	bl	8016d7e <node_set_prev>
}
 8016b5a:	bf00      	nop
 8016b5c:	3710      	adds	r7, #16
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b084      	sub	sp, #16
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	60f8      	str	r0, [r7, #12]
 8016b6a:	60b9      	str	r1, [r7, #8]
 8016b6c:	607a      	str	r2, [r7, #4]
 8016b6e:	70fb      	strb	r3, [r7, #3]
    lv_ll_rem(ll_ori_p, node);
 8016b70:	6879      	ldr	r1, [r7, #4]
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	f7ff ff9c 	bl	8016ab0 <lv_ll_rem>

    if(head) {
 8016b78:	78fb      	ldrb	r3, [r7, #3]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d021      	beq.n	8016bc2 <lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 8016b7e:	2200      	movs	r2, #0
 8016b80:	6879      	ldr	r1, [r7, #4]
 8016b82:	68b8      	ldr	r0, [r7, #8]
 8016b84:	f000 f8fb 	bl	8016d7e <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	6879      	ldr	r1, [r7, #4]
 8016b90:	68b8      	ldr	r0, [r7, #8]
 8016b92:	f000 f91a 	bl	8016dca <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d006      	beq.n	8016bac <lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	687a      	ldr	r2, [r7, #4]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	68b8      	ldr	r0, [r7, #8]
 8016ba8:	f000 f8e9 	bl	8016d7e <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	687a      	ldr	r2, [r7, #4]
 8016bb0:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	689b      	ldr	r3, [r3, #8]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d124      	bne.n	8016c04 <lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 8016bc0:	e020      	b.n	8016c04 <lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	689b      	ldr	r3, [r3, #8]
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	6879      	ldr	r1, [r7, #4]
 8016bca:	68b8      	ldr	r0, [r7, #8]
 8016bcc:	f000 f8d7 	bl	8016d7e <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	6879      	ldr	r1, [r7, #4]
 8016bd4:	68b8      	ldr	r0, [r7, #8]
 8016bd6:	f000 f8f8 	bl	8016dca <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	689b      	ldr	r3, [r3, #8]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d006      	beq.n	8016bf0 <lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	4619      	mov	r1, r3
 8016bea:	68b8      	ldr	r0, [r7, #8]
 8016bec:	f000 f8ed 	bl	8016dca <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	685b      	ldr	r3, [r3, #4]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d102      	bne.n	8016c04 <lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	605a      	str	r2, [r3, #4]
}
 8016c04:	bf00      	nop
 8016c06:	3710      	adds	r7, #16
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 8016c0c:	b480      	push	{r7}
 8016c0e:	b085      	sub	sp, #20
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 8016c14:	2300      	movs	r3, #0
 8016c16:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d002      	beq.n	8016c24 <lv_ll_get_head+0x18>
        head = ll_p->head;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	60fb      	str	r3, [r7, #12]
    }

    return head;
 8016c24:	68fb      	ldr	r3, [r7, #12]
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3714      	adds	r7, #20
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr

08016c32 <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 8016c32:	b480      	push	{r7}
 8016c34:	b085      	sub	sp, #20
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d002      	beq.n	8016c4a <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3714      	adds	r7, #20
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr

08016c58 <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d008      	beq.n	8016c7e <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	3304      	adds	r3, #4
 8016c76:	68fa      	ldr	r2, [r7, #12]
 8016c78:	4413      	add	r3, r2
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	60bb      	str	r3, [r7, #8]
    }

    return next;
 8016c7e:	68bb      	ldr	r3, [r7, #8]
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3714      	adds	r7, #20
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 8016c96:	2300      	movs	r3, #0
 8016c98:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d007      	beq.n	8016cb0 <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	68fa      	ldr	r2, [r7, #12]
 8016caa:	4413      	add	r3, r2
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 8016cb0:	68bb      	ldr	r3, [r7, #8]
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3714      	adds	r7, #20
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr

08016cbe <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b086      	sub	sp, #24
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	60f8      	str	r0, [r7, #12]
 8016cc6:	60b9      	str	r1, [r7, #8]
 8016cc8:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 8016cca:	68ba      	ldr	r2, [r7, #8]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d035      	beq.n	8016d3e <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d005      	beq.n	8016ce4 <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8016cd8:	6879      	ldr	r1, [r7, #4]
 8016cda:	68f8      	ldr	r0, [r7, #12]
 8016cdc:	f7ff ffd6 	bl	8016c8c <lv_ll_get_prev>
 8016ce0:	6178      	str	r0, [r7, #20]
 8016ce2:	e003      	b.n	8016cec <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f7ff ffa4 	bl	8016c32 <lv_ll_get_tail>
 8016cea:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 8016cec:	68ba      	ldr	r2, [r7, #8]
 8016cee:	697b      	ldr	r3, [r7, #20]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d026      	beq.n	8016d42 <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 8016cf4:	68b9      	ldr	r1, [r7, #8]
 8016cf6:	68f8      	ldr	r0, [r7, #12]
 8016cf8:	f7ff feda 	bl	8016ab0 <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 8016cfc:	68ba      	ldr	r2, [r7, #8]
 8016cfe:	6979      	ldr	r1, [r7, #20]
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f000 f862 	bl	8016dca <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 8016d06:	697a      	ldr	r2, [r7, #20]
 8016d08:	68b9      	ldr	r1, [r7, #8]
 8016d0a:	68f8      	ldr	r0, [r7, #12]
 8016d0c:	f000 f837 	bl	8016d7e <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	6879      	ldr	r1, [r7, #4]
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f000 f832 	bl	8016d7e <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 8016d1a:	687a      	ldr	r2, [r7, #4]
 8016d1c:	68b9      	ldr	r1, [r7, #8]
 8016d1e:	68f8      	ldr	r0, [r7, #12]
 8016d20:	f000 f853 	bl	8016dca <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d102      	bne.n	8016d30 <lv_ll_move_before+0x72>
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	68ba      	ldr	r2, [r7, #8]
 8016d2e:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d106      	bne.n	8016d44 <lv_ll_move_before+0x86>
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	68ba      	ldr	r2, [r7, #8]
 8016d3a:	605a      	str	r2, [r3, #4]
 8016d3c:	e002      	b.n	8016d44 <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 8016d3e:	bf00      	nop
 8016d40:	e000      	b.n	8016d44 <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8016d42:	bf00      	nop
}
 8016d44:	3718      	adds	r7, #24
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}

08016d4a <lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool lv_ll_is_empty(lv_ll_t * ll_p)
{
 8016d4a:	b480      	push	{r7}
 8016d4c:	b083      	sub	sp, #12
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d101      	bne.n	8016d5c <lv_ll_is_empty+0x12>
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e00a      	b.n	8016d72 <lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d105      	bne.n	8016d70 <lv_ll_is_empty+0x26>
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	689b      	ldr	r3, [r3, #8]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d101      	bne.n	8016d70 <lv_ll_is_empty+0x26>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	e000      	b.n	8016d72 <lv_ll_is_empty+0x28>

    return false;
 8016d70:	2300      	movs	r3, #0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	370c      	adds	r7, #12
 8016d76:	46bd      	mov	sp, r7
 8016d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7c:	4770      	bx	lr

08016d7e <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8016d7e:	b580      	push	{r7, lr}
 8016d80:	b086      	sub	sp, #24
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	60f8      	str	r0, [r7, #12]
 8016d86:	60b9      	str	r1, [r7, #8]
 8016d88:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d018      	beq.n	8016dc2 <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 8016d90:	2304      	movs	r3, #4
 8016d92:	617b      	str	r3, [r7, #20]
    if(prev)
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d009      	beq.n	8016dae <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	68ba      	ldr	r2, [r7, #8]
 8016da0:	4413      	add	r3, r2
 8016da2:	1d39      	adds	r1, r7, #4
 8016da4:	697a      	ldr	r2, [r7, #20]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f014 f932 	bl	802b010 <memcpy>
 8016dac:	e00a      	b.n	8016dc4 <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	68ba      	ldr	r2, [r7, #8]
 8016db4:	4413      	add	r3, r2
 8016db6:	697a      	ldr	r2, [r7, #20]
 8016db8:	2100      	movs	r1, #0
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f014 f933 	bl	802b026 <memset>
 8016dc0:	e000      	b.n	8016dc4 <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8016dc2:	bf00      	nop
}
 8016dc4:	3718      	adds	r7, #24
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	60f8      	str	r0, [r7, #12]
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d01a      	beq.n	8016e12 <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 8016ddc:	2304      	movs	r3, #4
 8016dde:	617b      	str	r3, [r7, #20]
    if(next)
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00a      	beq.n	8016dfc <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	3304      	adds	r3, #4
 8016dec:	68ba      	ldr	r2, [r7, #8]
 8016dee:	4413      	add	r3, r2
 8016df0:	1d39      	adds	r1, r7, #4
 8016df2:	697a      	ldr	r2, [r7, #20]
 8016df4:	4618      	mov	r0, r3
 8016df6:	f014 f90b 	bl	802b010 <memcpy>
 8016dfa:	e00b      	b.n	8016e14 <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	3304      	adds	r3, #4
 8016e02:	68ba      	ldr	r2, [r7, #8]
 8016e04:	4413      	add	r3, r2
 8016e06:	697a      	ldr	r2, [r7, #20]
 8016e08:	2100      	movs	r1, #0
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f014 f90b 	bl	802b026 <memset>
 8016e10:	e000      	b.n	8016e14 <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8016e12:	bf00      	nop
}
 8016e14:	3718      	adds	r7, #24
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
	...

08016e1c <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t lv_trigo_sin(int16_t angle)
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b085      	sub	sp, #20
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	4603      	mov	r3, r0
 8016e24:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 8016e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e2e:	4a31      	ldr	r2, [pc, #196]	; (8016ef4 <lv_trigo_sin+0xd8>)
 8016e30:	fb82 1203 	smull	r1, r2, r2, r3
 8016e34:	441a      	add	r2, r3
 8016e36:	1211      	asrs	r1, r2, #8
 8016e38:	17da      	asrs	r2, r3, #31
 8016e3a:	1a8a      	subs	r2, r1, r2
 8016e3c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016e40:	fb01 f202 	mul.w	r2, r1, r2
 8016e44:	1a9b      	subs	r3, r3, r2
 8016e46:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8016e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	da04      	bge.n	8016e5a <lv_trigo_sin+0x3e>
 8016e50:	88fb      	ldrh	r3, [r7, #6]
 8016e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8016e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e5e:	2b59      	cmp	r3, #89	; 0x59
 8016e60:	dc06      	bgt.n	8016e70 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8016e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e66:	4a24      	ldr	r2, [pc, #144]	; (8016ef8 <lv_trigo_sin+0xdc>)
 8016e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016e6c:	81fb      	strh	r3, [r7, #14]
 8016e6e:	e038      	b.n	8016ee2 <lv_trigo_sin+0xc6>
    } else if(angle >= 90 && angle < 180) {
 8016e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e74:	2b59      	cmp	r3, #89	; 0x59
 8016e76:	dd0f      	ble.n	8016e98 <lv_trigo_sin+0x7c>
 8016e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e7c:	2bb3      	cmp	r3, #179	; 0xb3
 8016e7e:	dc0b      	bgt.n	8016e98 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8016e80:	88fb      	ldrh	r3, [r7, #6]
 8016e82:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8016e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e8e:	4a1a      	ldr	r2, [pc, #104]	; (8016ef8 <lv_trigo_sin+0xdc>)
 8016e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016e94:	81fb      	strh	r3, [r7, #14]
 8016e96:	e024      	b.n	8016ee2 <lv_trigo_sin+0xc6>
    } else if(angle >= 180 && angle < 270) {
 8016e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e9c:	2bb3      	cmp	r3, #179	; 0xb3
 8016e9e:	dd12      	ble.n	8016ec6 <lv_trigo_sin+0xaa>
 8016ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ea4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016ea8:	da0d      	bge.n	8016ec6 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8016eaa:	88fb      	ldrh	r3, [r7, #6]
 8016eac:	3bb4      	subs	r3, #180	; 0xb4
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8016eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016eb6:	4a10      	ldr	r2, [pc, #64]	; (8016ef8 <lv_trigo_sin+0xdc>)
 8016eb8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	425b      	negs	r3, r3
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	81fb      	strh	r3, [r7, #14]
 8016ec4:	e00d      	b.n	8016ee2 <lv_trigo_sin+0xc6>
    } else { /*angle >=270*/
        angle = 360 - angle;
 8016ec6:	88fb      	ldrh	r3, [r7, #6]
 8016ec8:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8016ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ed4:	4a08      	ldr	r2, [pc, #32]	; (8016ef8 <lv_trigo_sin+0xdc>)
 8016ed6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	425b      	negs	r3, r3
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8016ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3714      	adds	r7, #20
 8016eea:	46bd      	mov	sp, r7
 8016eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef0:	4770      	bx	lr
 8016ef2:	bf00      	nop
 8016ef4:	b60b60b7 	.word	0xb60b60b7
 8016ef8:	200026e4 	.word	0x200026e4

08016efc <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8016efc:	b480      	push	{r7}
 8016efe:	af00      	add	r7, sp, #0
    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
    full->header.s.used = 0;
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
#endif
}
 8016f00:	bf00      	nop
 8016f02:	46bd      	mov	sp, r7
 8016f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f08:	4770      	bx	lr
	...

08016f0c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d101      	bne.n	8016f1e <lv_mem_alloc+0x12>
        return &zero_mem;
 8016f1a:	4b1b      	ldr	r3, [pc, #108]	; (8016f88 <lv_mem_alloc+0x7c>)
 8016f1c:	e030      	b.n	8016f80 <lv_mem_alloc+0x74>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f003 0303 	and.w	r3, r3, #3
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d006      	beq.n	8016f36 <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f023 0303 	bic.w	r3, r3, #3
 8016f2e:	607b      	str	r3, [r7, #4]
        size += 4;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	3304      	adds	r3, #4
 8016f34:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 8016f36:	2300      	movs	r3, #0
 8016f38:	60fb      	str	r3, [r7, #12]
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	3304      	adds	r3, #4
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f014 f856 	bl	802aff0 <malloc>
 8016f44:	4603      	mov	r3, r0
 8016f46:	60fb      	str	r3, [r7, #12]
    if(alloc != NULL) {
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d00f      	beq.n	8016f6e <lv_mem_alloc+0x62>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016f54:	68fa      	ldr	r2, [r7, #12]
 8016f56:	6813      	ldr	r3, [r2, #0]
 8016f58:	f361 035f 	bfi	r3, r1, #1, #31
 8016f5c:	6013      	str	r3, [r2, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
 8016f5e:	68fa      	ldr	r2, [r7, #12]
 8016f60:	7813      	ldrb	r3, [r2, #0]
 8016f62:	f043 0301 	orr.w	r3, r3, #1
 8016f66:	7013      	strb	r3, [r2, #0]

        alloc = &((lv_mem_ent_t *)alloc)->first_data;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	60fb      	str	r3, [r7, #12]
    }
#endif                /* LV_ENABLE_GC */
#endif                /* LV_MEM_CUSTOM */

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) memset(alloc, 0xaa, size);
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d004      	beq.n	8016f7e <lv_mem_alloc+0x72>
 8016f74:	687a      	ldr	r2, [r7, #4]
 8016f76:	21aa      	movs	r1, #170	; 0xaa
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	f014 f854 	bl	802b026 <memset>
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 8016f7e:	68fb      	ldr	r3, [r7, #12]
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3710      	adds	r7, #16
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	2001778c 	.word	0x2001778c

08016f8c <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b084      	sub	sp, #16
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	4a10      	ldr	r2, [pc, #64]	; (8016fd8 <lv_mem_free+0x4c>)
 8016f98:	4293      	cmp	r3, r2
 8016f9a:	d017      	beq.n	8016fcc <lv_mem_free+0x40>
    if(data == NULL) return;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d016      	beq.n	8016fd0 <lv_mem_free+0x44>

#if LV_MEM_ADD_JUNK
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	f000 f858 	bl	8017058 <lv_mem_get_size>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	461a      	mov	r2, r3
 8016fac:	21bb      	movs	r1, #187	; 0xbb
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f014 f839 	bl	802b026 <memset>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	3b04      	subs	r3, #4
 8016fb8:	60fb      	str	r3, [r7, #12]
    e->header.s.used = 0;
 8016fba:	68fa      	ldr	r2, [r7, #12]
 8016fbc:	7813      	ldrb	r3, [r2, #0]
 8016fbe:	f36f 0300 	bfc	r3, #0, #1
 8016fc2:	7013      	strb	r3, [r2, #0]
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f014 f81b 	bl	802b000 <free>
 8016fca:	e002      	b.n	8016fd2 <lv_mem_free+0x46>
    if(data == &zero_mem) return;
 8016fcc:	bf00      	nop
 8016fce:	e000      	b.n	8016fd2 <lv_mem_free+0x46>
    if(data == NULL) return;
 8016fd0:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 8016fd2:	3710      	adds	r7, #16
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}
 8016fd8:	2001778c 	.word	0x2001778c

08016fdc <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, uint32_t new_size)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b086      	sub	sp, #24
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00b      	beq.n	8017004 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	3b04      	subs	r3, #4
 8016ff0:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	f003 0301 	and.w	r3, r3, #1
 8016ffa:	b2db      	uxtb	r3, r3
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d101      	bne.n	8017004 <lv_mem_realloc+0x28>
            data_p = NULL;
 8017000:	2300      	movs	r3, #0
 8017002:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 f827 	bl	8017058 <lv_mem_get_size>
 801700a:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801700c:	693a      	ldr	r2, [r7, #16]
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	429a      	cmp	r2, r3
 8017012:	d101      	bne.n	8017018 <lv_mem_realloc+0x3c>
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	e01a      	b.n	801704e <lv_mem_realloc+0x72>
        return &e->first_data;
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 8017018:	6838      	ldr	r0, [r7, #0]
 801701a:	f7ff ff77 	bl	8016f0c <lv_mem_alloc>
 801701e:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d012      	beq.n	801704c <lv_mem_realloc+0x70>
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d00f      	beq.n	801704c <lv_mem_realloc+0x70>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d00c      	beq.n	801704c <lv_mem_realloc+0x70>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8017032:	693a      	ldr	r2, [r7, #16]
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	4293      	cmp	r3, r2
 8017038:	bf28      	it	cs
 801703a:	4613      	movcs	r3, r2
 801703c:	461a      	mov	r2, r3
 801703e:	6879      	ldr	r1, [r7, #4]
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f013 ffe5 	bl	802b010 <memcpy>
            lv_mem_free(data_p);
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f7ff ffa0 	bl	8016f8c <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 801704c:	68fb      	ldr	r3, [r7, #12]
}
 801704e:	4618      	mov	r0, r3
 8017050:	3718      	adds	r7, #24
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
	...

08017058 <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 8017058:	b480      	push	{r7}
 801705a:	b085      	sub	sp, #20
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d101      	bne.n	801706a <lv_mem_get_size+0x12>
 8017066:	2300      	movs	r3, #0
 8017068:	e00c      	b.n	8017084 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	4a08      	ldr	r2, [pc, #32]	; (8017090 <lv_mem_get_size+0x38>)
 801706e:	4293      	cmp	r3, r2
 8017070:	d101      	bne.n	8017076 <lv_mem_get_size+0x1e>
 8017072:	2300      	movs	r3, #0
 8017074:	e006      	b.n	8017084 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	3b04      	subs	r3, #4
 801707a:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 8017084:	4618      	mov	r0, r3
 8017086:	3714      	adds	r7, #20
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr
 8017090:	2001778c 	.word	0x2001778c

08017094 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8017098:	2114      	movs	r1, #20
 801709a:	4804      	ldr	r0, [pc, #16]	; (80170ac <lv_task_core_init+0x18>)
 801709c:	f7ff fc34 	bl	8016908 <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 80170a0:	2001      	movs	r0, #1
 80170a2:	f000 fa23 	bl	80174ec <lv_task_enable>
}
 80170a6:	bf00      	nop
 80170a8:	bd80      	pop	{r7, pc}
 80170aa:	bf00      	nop
 80170ac:	2001bb6c 	.word	0x2001bb6c

080170b0 <lv_task_handler>:

/**
 * Call it  periodically to handle lv_tasks.
 */
LV_ATTRIBUTE_TASK_HANDLER void lv_task_handler(void)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool task_handler_mutex = false;
    if(task_handler_mutex) return;
 80170b6:	4b6b      	ldr	r3, [pc, #428]	; (8017264 <lv_task_handler+0x1b4>)
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	f040 80cd 	bne.w	801725a <lv_task_handler+0x1aa>
    task_handler_mutex = true;
 80170c0:	4b68      	ldr	r3, [pc, #416]	; (8017264 <lv_task_handler+0x1b4>)
 80170c2:	2201      	movs	r2, #1
 80170c4:	701a      	strb	r2, [r3, #0]

    static uint32_t idle_period_start = 0;
    static uint32_t handler_start     = 0;
    static uint32_t busy_time         = 0;

    if(lv_task_run == false) {
 80170c6:	4b68      	ldr	r3, [pc, #416]	; (8017268 <lv_task_handler+0x1b8>)
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	f083 0301 	eor.w	r3, r3, #1
 80170ce:	b2db      	uxtb	r3, r3
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d003      	beq.n	80170dc <lv_task_handler+0x2c>
        task_handler_mutex = false; /*Release mutex*/
 80170d4:	4b63      	ldr	r3, [pc, #396]	; (8017264 <lv_task_handler+0x1b4>)
 80170d6:	2200      	movs	r2, #0
 80170d8:	701a      	strb	r2, [r3, #0]
        return;
 80170da:	e0bf      	b.n	801725c <lv_task_handler+0x1ac>
    }

    handler_start = lv_tick_get();
 80170dc:	f7fe fdf0 	bl	8015cc0 <lv_tick_get>
 80170e0:	4602      	mov	r2, r0
 80170e2:	4b62      	ldr	r3, [pc, #392]	; (801726c <lv_task_handler+0x1bc>)
 80170e4:	601a      	str	r2, [r3, #0]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 80170e6:	2300      	movs	r3, #0
 80170e8:	60fb      	str	r3, [r7, #12]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 80170ea:	2301      	movs	r3, #1
 80170ec:	72fb      	strb	r3, [r7, #11]
        task_deleted             = false;
 80170ee:	4b60      	ldr	r3, [pc, #384]	; (8017270 <lv_task_handler+0x1c0>)
 80170f0:	2200      	movs	r2, #0
 80170f2:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 80170f4:	4b5f      	ldr	r3, [pc, #380]	; (8017274 <lv_task_handler+0x1c4>)
 80170f6:	2200      	movs	r2, #0
 80170f8:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80170fa:	485f      	ldr	r0, [pc, #380]	; (8017278 <lv_task_handler+0x1c8>)
 80170fc:	f7ff fd86 	bl	8016c0c <lv_ll_get_head>
 8017100:	4602      	mov	r2, r0
 8017102:	4b5e      	ldr	r3, [pc, #376]	; (801727c <lv_task_handler+0x1cc>)
 8017104:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8017106:	e05e      	b.n	80171c6 <lv_task_handler+0x116>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8017108:	4b5c      	ldr	r3, [pc, #368]	; (801727c <lv_task_handler+0x1cc>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4619      	mov	r1, r3
 801710e:	485a      	ldr	r0, [pc, #360]	; (8017278 <lv_task_handler+0x1c8>)
 8017110:	f7ff fda2 	bl	8016c58 <lv_ll_get_next>
 8017114:	6078      	str	r0, [r7, #4]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8017116:	4b59      	ldr	r3, [pc, #356]	; (801727c <lv_task_handler+0x1cc>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	7c1b      	ldrb	r3, [r3, #16]
 801711c:	f003 0307 	and.w	r3, r3, #7
 8017120:	b2db      	uxtb	r3, r3
 8017122:	2b00      	cmp	r3, #0
 8017124:	d054      	beq.n	80171d0 <lv_task_handler+0x120>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8017126:	4b55      	ldr	r3, [pc, #340]	; (801727c <lv_task_handler+0x1cc>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	68fa      	ldr	r2, [r7, #12]
 801712c:	429a      	cmp	r2, r3
 801712e:	d105      	bne.n	801713c <lv_task_handler+0x8c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8017130:	2300      	movs	r3, #0
 8017132:	60fb      	str	r3, [r7, #12]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 8017134:	4a51      	ldr	r2, [pc, #324]	; (801727c <lv_task_handler+0x1cc>)
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 801713a:	e044      	b.n	80171c6 <lv_task_handler+0x116>
            }

            /*Just try to run the tasks with highest priority.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 801713c:	4b4f      	ldr	r3, [pc, #316]	; (801727c <lv_task_handler+0x1cc>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	7c1b      	ldrb	r3, [r3, #16]
 8017142:	f003 0307 	and.w	r3, r3, #7
 8017146:	b2db      	uxtb	r3, r3
 8017148:	2b05      	cmp	r3, #5
 801714a:	d105      	bne.n	8017158 <lv_task_handler+0xa8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801714c:	4b4b      	ldr	r3, [pc, #300]	; (801727c <lv_task_handler+0x1cc>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	4618      	mov	r0, r3
 8017152:	f000 f9db 	bl	801750c <lv_task_exec>
 8017156:	e02b      	b.n	80171b0 <lv_task_handler+0x100>
            }
            /*Tasks with higher priority then the interrupted shall be run in every case*/
            else if(task_interrupter) {
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d01a      	beq.n	8017194 <lv_task_handler+0xe4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 801715e:	4b47      	ldr	r3, [pc, #284]	; (801727c <lv_task_handler+0x1cc>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	7c1b      	ldrb	r3, [r3, #16]
 8017164:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017168:	b2da      	uxtb	r2, r3
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	7c1b      	ldrb	r3, [r3, #16]
 801716e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017172:	b2db      	uxtb	r3, r3
 8017174:	429a      	cmp	r2, r3
 8017176:	d91b      	bls.n	80171b0 <lv_task_handler+0x100>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8017178:	4b40      	ldr	r3, [pc, #256]	; (801727c <lv_task_handler+0x1cc>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	4618      	mov	r0, r3
 801717e:	f000 f9c5 	bl	801750c <lv_task_exec>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d013      	beq.n	80171b0 <lv_task_handler+0x100>
                        task_interrupter =
 8017188:	4b3c      	ldr	r3, [pc, #240]	; (801727c <lv_task_handler+0x1cc>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	60fb      	str	r3, [r7, #12]
                            LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
                        end_flag = false;
 801718e:	2300      	movs	r3, #0
 8017190:	72fb      	strb	r3, [r7, #11]
                        break;
 8017192:	e022      	b.n	80171da <lv_task_handler+0x12a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8017194:	4b39      	ldr	r3, [pc, #228]	; (801727c <lv_task_handler+0x1cc>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	4618      	mov	r0, r3
 801719a:	f000 f9b7 	bl	801750c <lv_task_exec>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d005      	beq.n	80171b0 <lv_task_handler+0x100>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80171a4:	4b35      	ldr	r3, [pc, #212]	; (801727c <lv_task_handler+0x1cc>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	60fb      	str	r3, [r7, #12]
                    end_flag         = false;
 80171aa:	2300      	movs	r3, #0
 80171ac:	72fb      	strb	r3, [r7, #11]
                    break;
 80171ae:	e014      	b.n	80171da <lv_task_handler+0x12a>
                }
            }

            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 80171b0:	4b2f      	ldr	r3, [pc, #188]	; (8017270 <lv_task_handler+0x1c0>)
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d10d      	bne.n	80171d4 <lv_task_handler+0x124>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 80171b8:	4b2e      	ldr	r3, [pc, #184]	; (8017274 <lv_task_handler+0x1c4>)
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d10b      	bne.n	80171d8 <lv_task_handler+0x128>

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 80171c0:	4a2e      	ldr	r2, [pc, #184]	; (801727c <lv_task_handler+0x1cc>)
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 80171c6:	4b2d      	ldr	r3, [pc, #180]	; (801727c <lv_task_handler+0x1cc>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d19c      	bne.n	8017108 <lv_task_handler+0x58>
 80171ce:	e004      	b.n	80171da <lv_task_handler+0x12a>
                break;
 80171d0:	bf00      	nop
 80171d2:	e002      	b.n	80171da <lv_task_handler+0x12a>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 80171d4:	bf00      	nop
 80171d6:	e000      	b.n	80171da <lv_task_handler+0x12a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 80171d8:	bf00      	nop
        }
    } while(!end_flag);
 80171da:	7afb      	ldrb	r3, [r7, #11]
 80171dc:	f083 0301 	eor.w	r3, r3, #1
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d181      	bne.n	80170ea <lv_task_handler+0x3a>

    busy_time += lv_tick_elaps(handler_start);
 80171e6:	4b21      	ldr	r3, [pc, #132]	; (801726c <lv_task_handler+0x1bc>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7fe fd82 	bl	8015cf4 <lv_tick_elaps>
 80171f0:	4602      	mov	r2, r0
 80171f2:	4b23      	ldr	r3, [pc, #140]	; (8017280 <lv_task_handler+0x1d0>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4413      	add	r3, r2
 80171f8:	4a21      	ldr	r2, [pc, #132]	; (8017280 <lv_task_handler+0x1d0>)
 80171fa:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80171fc:	4b21      	ldr	r3, [pc, #132]	; (8017284 <lv_task_handler+0x1d4>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	4618      	mov	r0, r3
 8017202:	f7fe fd77 	bl	8015cf4 <lv_tick_elaps>
 8017206:	6038      	str	r0, [r7, #0]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801720e:	d320      	bcc.n	8017252 <lv_task_handler+0x1a2>

        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8017210:	4b1b      	ldr	r3, [pc, #108]	; (8017280 <lv_task_handler+0x1d0>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2264      	movs	r2, #100	; 0x64
 8017216:	fb02 f303 	mul.w	r3, r2, r3
 801721a:	4a1b      	ldr	r2, [pc, #108]	; (8017288 <lv_task_handler+0x1d8>)
 801721c:	fba2 2303 	umull	r2, r3, r2, r3
 8017220:	095b      	lsrs	r3, r3, #5
 8017222:	b2da      	uxtb	r2, r3
 8017224:	4b19      	ldr	r3, [pc, #100]	; (801728c <lv_task_handler+0x1dc>)
 8017226:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8017228:	4b18      	ldr	r3, [pc, #96]	; (801728c <lv_task_handler+0x1dc>)
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b64      	cmp	r3, #100	; 0x64
 801722e:	d805      	bhi.n	801723c <lv_task_handler+0x18c>
 8017230:	4b16      	ldr	r3, [pc, #88]	; (801728c <lv_task_handler+0x1dc>)
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8017238:	b2db      	uxtb	r3, r3
 801723a:	e000      	b.n	801723e <lv_task_handler+0x18e>
 801723c:	2300      	movs	r3, #0
 801723e:	4a13      	ldr	r2, [pc, #76]	; (801728c <lv_task_handler+0x1dc>)
 8017240:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8017242:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <lv_task_handler+0x1d0>)
 8017244:	2200      	movs	r2, #0
 8017246:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8017248:	f7fe fd3a 	bl	8015cc0 <lv_tick_get>
 801724c:	4602      	mov	r2, r0
 801724e:	4b0d      	ldr	r3, [pc, #52]	; (8017284 <lv_task_handler+0x1d4>)
 8017250:	601a      	str	r2, [r3, #0]
    }

    task_handler_mutex = false; /*Release the mutex*/
 8017252:	4b04      	ldr	r3, [pc, #16]	; (8017264 <lv_task_handler+0x1b4>)
 8017254:	2200      	movs	r2, #0
 8017256:	701a      	strb	r2, [r3, #0]
 8017258:	e000      	b.n	801725c <lv_task_handler+0x1ac>
    if(task_handler_mutex) return;
 801725a:	bf00      	nop

    LV_LOG_TRACE("lv_task_handler ready");
}
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	20017794 	.word	0x20017794
 8017268:	20017790 	.word	0x20017790
 801726c:	20017798 	.word	0x20017798
 8017270:	20017792 	.word	0x20017792
 8017274:	20017793 	.word	0x20017793
 8017278:	2001bb6c 	.word	0x2001bb6c
 801727c:	2001bbac 	.word	0x2001bbac
 8017280:	2001779c 	.word	0x2001779c
 8017284:	200177a0 	.word	0x200177a0
 8017288:	10624dd3 	.word	0x10624dd3
 801728c:	20017791 	.word	0x20017791

08017290 <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 8017296:	2300      	movs	r3, #0
 8017298:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801729a:	4832      	ldr	r0, [pc, #200]	; (8017364 <lv_task_create_basic+0xd4>)
 801729c:	f7ff fcb6 	bl	8016c0c <lv_ll_get_head>
 80172a0:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d10c      	bne.n	80172c2 <lv_task_create_basic+0x32>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80172a8:	482e      	ldr	r0, [pc, #184]	; (8017364 <lv_task_create_basic+0xd4>)
 80172aa:	f7ff fb4d 	bl	8016948 <lv_ll_ins_head>
 80172ae:	6078      	str	r0, [r7, #4]
        lv_mem_assert(new_task);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d100      	bne.n	80172b8 <lv_task_create_basic+0x28>
 80172b6:	e7fe      	b.n	80172b6 <lv_task_create_basic+0x26>
        if(new_task == NULL) return NULL;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d130      	bne.n	8017320 <lv_task_create_basic+0x90>
 80172be:	2300      	movs	r3, #0
 80172c0:	e04c      	b.n	801735c <lv_task_create_basic+0xcc>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	7c1b      	ldrb	r3, [r3, #16]
 80172c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b03      	cmp	r3, #3
 80172ce:	d80d      	bhi.n	80172ec <lv_task_create_basic+0x5c>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80172d0:	6839      	ldr	r1, [r7, #0]
 80172d2:	4824      	ldr	r0, [pc, #144]	; (8017364 <lv_task_create_basic+0xd4>)
 80172d4:	f7ff fb6c 	bl	80169b0 <lv_ll_ins_prev>
 80172d8:	6078      	str	r0, [r7, #4]
                lv_mem_assert(new_task);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d100      	bne.n	80172e2 <lv_task_create_basic+0x52>
 80172e0:	e7fe      	b.n	80172e0 <lv_task_create_basic+0x50>
                if(new_task == NULL) return NULL;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d10a      	bne.n	80172fe <lv_task_create_basic+0x6e>
 80172e8:	2300      	movs	r3, #0
 80172ea:	e037      	b.n	801735c <lv_task_create_basic+0xcc>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	481d      	ldr	r0, [pc, #116]	; (8017364 <lv_task_create_basic+0xd4>)
 80172f0:	f7ff fcb2 	bl	8016c58 <lv_ll_get_next>
 80172f4:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d1e2      	bne.n	80172c2 <lv_task_create_basic+0x32>
 80172fc:	e000      	b.n	8017300 <lv_task_create_basic+0x70>
                break;
 80172fe:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d10c      	bne.n	8017320 <lv_task_create_basic+0x90>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8017306:	4817      	ldr	r0, [pc, #92]	; (8017364 <lv_task_create_basic+0xd4>)
 8017308:	f7ff fb99 	bl	8016a3e <lv_ll_ins_tail>
 801730c:	6078      	str	r0, [r7, #4]
            lv_mem_assert(new_task);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d100      	bne.n	8017316 <lv_task_create_basic+0x86>
 8017314:	e7fe      	b.n	8017314 <lv_task_create_basic+0x84>
            if(new_task == NULL) return NULL;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d101      	bne.n	8017320 <lv_task_create_basic+0x90>
 801731c:	2300      	movs	r3, #0
 801731e:	e01d      	b.n	801735c <lv_task_create_basic+0xcc>
        }
    }

    new_task->period  = DEF_PERIOD;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017326:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2200      	movs	r2, #0
 801732c:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	7c13      	ldrb	r3, [r2, #16]
 8017332:	2103      	movs	r1, #3
 8017334:	f361 0302 	bfi	r3, r1, #0, #3
 8017338:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 801733a:	687a      	ldr	r2, [r7, #4]
 801733c:	7c13      	ldrb	r3, [r2, #16]
 801733e:	f36f 03c3 	bfc	r3, #3, #1
 8017342:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 8017344:	f7fe fcbc 	bl	8015cc0 <lv_tick_get>
 8017348:	4602      	mov	r2, r0
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2200      	movs	r2, #0
 8017352:	60da      	str	r2, [r3, #12]

    task_created = true;
 8017354:	4b04      	ldr	r3, [pc, #16]	; (8017368 <lv_task_create_basic+0xd8>)
 8017356:	2201      	movs	r2, #1
 8017358:	701a      	strb	r2, [r3, #0]

    return new_task;
 801735a:	687b      	ldr	r3, [r7, #4]
}
 801735c:	4618      	mov	r0, r3
 801735e:	3708      	adds	r7, #8
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	2001bb6c 	.word	0x2001bb6c
 8017368:	20017793 	.word	0x20017793

0801736c <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b086      	sub	sp, #24
 8017370:	af00      	add	r7, sp, #0
 8017372:	60f8      	str	r0, [r7, #12]
 8017374:	60b9      	str	r1, [r7, #8]
 8017376:	603b      	str	r3, [r7, #0]
 8017378:	4613      	mov	r3, r2
 801737a:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 801737c:	f7ff ff88 	bl	8017290 <lv_task_create_basic>
 8017380:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_task);
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d100      	bne.n	801738a <lv_task_create+0x1e>
 8017388:	e7fe      	b.n	8017388 <lv_task_create+0x1c>
    if(new_task == NULL) return NULL;
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d101      	bne.n	8017394 <lv_task_create+0x28>
 8017390:	2300      	movs	r3, #0
 8017392:	e010      	b.n	80173b6 <lv_task_create+0x4a>

    lv_task_set_cb(new_task, task_cb);
 8017394:	68f9      	ldr	r1, [r7, #12]
 8017396:	6978      	ldr	r0, [r7, #20]
 8017398:	f000 f811 	bl	80173be <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 801739c:	68b9      	ldr	r1, [r7, #8]
 801739e:	6978      	ldr	r0, [r7, #20]
 80173a0:	f000 f884 	bl	80174ac <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 80173a4:	79fb      	ldrb	r3, [r7, #7]
 80173a6:	4619      	mov	r1, r3
 80173a8:	6978      	ldr	r0, [r7, #20]
 80173aa:	f000 f835 	bl	8017418 <lv_task_set_prio>
    new_task->user_data = user_data;
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	683a      	ldr	r2, [r7, #0]
 80173b2:	60da      	str	r2, [r3, #12]

    return new_task;
 80173b4:	697b      	ldr	r3, [r7, #20]
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3718      	adds	r7, #24
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}

080173be <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 80173be:	b480      	push	{r7}
 80173c0:	b083      	sub	sp, #12
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
 80173c6:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	683a      	ldr	r2, [r7, #0]
 80173cc:	609a      	str	r2, [r3, #8]
}
 80173ce:	bf00      	nop
 80173d0:	370c      	adds	r7, #12
 80173d2:	46bd      	mov	sp, r7
 80173d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d8:	4770      	bx	lr
	...

080173dc <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b082      	sub	sp, #8
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 80173e4:	6879      	ldr	r1, [r7, #4]
 80173e6:	4809      	ldr	r0, [pc, #36]	; (801740c <lv_task_del+0x30>)
 80173e8:	f7ff fb62 	bl	8016ab0 <lv_ll_rem>

    lv_mem_free(task);
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f7ff fdcd 	bl	8016f8c <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 80173f2:	4b07      	ldr	r3, [pc, #28]	; (8017410 <lv_task_del+0x34>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	687a      	ldr	r2, [r7, #4]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d102      	bne.n	8017402 <lv_task_del+0x26>
 80173fc:	4b05      	ldr	r3, [pc, #20]	; (8017414 <lv_task_del+0x38>)
 80173fe:	2201      	movs	r2, #1
 8017400:	701a      	strb	r2, [r3, #0]
}
 8017402:	bf00      	nop
 8017404:	3708      	adds	r7, #8
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
 801740a:	bf00      	nop
 801740c:	2001bb6c 	.word	0x2001bb6c
 8017410:	2001bbac 	.word	0x2001bbac
 8017414:	20017792 	.word	0x20017792

08017418 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b084      	sub	sp, #16
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
 8017420:	460b      	mov	r3, r1
 8017422:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	7c1b      	ldrb	r3, [r3, #16]
 8017428:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801742c:	b2db      	uxtb	r3, r3
 801742e:	461a      	mov	r2, r3
 8017430:	78fb      	ldrb	r3, [r7, #3]
 8017432:	429a      	cmp	r2, r3
 8017434:	d033      	beq.n	801749e <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8017436:	481c      	ldr	r0, [pc, #112]	; (80174a8 <lv_task_set_prio+0x90>)
 8017438:	f7ff fbe8 	bl	8016c0c <lv_ll_get_head>
 801743c:	60f8      	str	r0, [r7, #12]
 801743e:	e017      	b.n	8017470 <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	7c1b      	ldrb	r3, [r3, #16]
 8017444:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017448:	b2db      	uxtb	r3, r3
 801744a:	461a      	mov	r2, r3
 801744c:	78fb      	ldrb	r3, [r7, #3]
 801744e:	429a      	cmp	r2, r3
 8017450:	dc09      	bgt.n	8017466 <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8017452:	68fa      	ldr	r2, [r7, #12]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	429a      	cmp	r2, r3
 8017458:	d00e      	beq.n	8017478 <lv_task_set_prio+0x60>
 801745a:	68fa      	ldr	r2, [r7, #12]
 801745c:	6879      	ldr	r1, [r7, #4]
 801745e:	4812      	ldr	r0, [pc, #72]	; (80174a8 <lv_task_set_prio+0x90>)
 8017460:	f7ff fc2d 	bl	8016cbe <lv_ll_move_before>
            break;
 8017464:	e008      	b.n	8017478 <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8017466:	68f9      	ldr	r1, [r7, #12]
 8017468:	480f      	ldr	r0, [pc, #60]	; (80174a8 <lv_task_set_prio+0x90>)
 801746a:	f7ff fbf5 	bl	8016c58 <lv_ll_get_next>
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d1e4      	bne.n	8017440 <lv_task_set_prio+0x28>
 8017476:	e000      	b.n	801747a <lv_task_set_prio+0x62>
            break;
 8017478:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d104      	bne.n	801748a <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8017480:	2200      	movs	r2, #0
 8017482:	6879      	ldr	r1, [r7, #4]
 8017484:	4808      	ldr	r0, [pc, #32]	; (80174a8 <lv_task_set_prio+0x90>)
 8017486:	f7ff fc1a 	bl	8016cbe <lv_ll_move_before>
    }

    task->prio = prio;
 801748a:	78fb      	ldrb	r3, [r7, #3]
 801748c:	f003 0307 	and.w	r3, r3, #7
 8017490:	b2d9      	uxtb	r1, r3
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	7c13      	ldrb	r3, [r2, #16]
 8017496:	f361 0302 	bfi	r3, r1, #0, #3
 801749a:	7413      	strb	r3, [r2, #16]
 801749c:	e000      	b.n	80174a0 <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 801749e:	bf00      	nop
}
 80174a0:	3710      	adds	r7, #16
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	2001bb6c 	.word	0x2001bb6c

080174ac <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b083      	sub	sp, #12
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
    task->period = period;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	683a      	ldr	r2, [r7, #0]
 80174ba:	601a      	str	r2, [r3, #0]
}
 80174bc:	bf00      	nop
 80174be:	370c      	adds	r7, #12
 80174c0:	46bd      	mov	sp, r7
 80174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c6:	4770      	bx	lr

080174c8 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 80174d0:	f7fe fbf6 	bl	8015cc0 <lv_tick_get>
 80174d4:	4602      	mov	r2, r0
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	1ad3      	subs	r3, r2, r3
 80174dc:	1e5a      	subs	r2, r3, #1
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	605a      	str	r2, [r3, #4]
}
 80174e2:	bf00      	nop
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
	...

080174ec <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 80174ec:	b480      	push	{r7}
 80174ee:	b083      	sub	sp, #12
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	4603      	mov	r3, r0
 80174f4:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 80174f6:	4a04      	ldr	r2, [pc, #16]	; (8017508 <lv_task_enable+0x1c>)
 80174f8:	79fb      	ldrb	r3, [r7, #7]
 80174fa:	7013      	strb	r3, [r2, #0]
}
 80174fc:	bf00      	nop
 80174fe:	370c      	adds	r7, #12
 8017500:	46bd      	mov	sp, r7
 8017502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017506:	4770      	bx	lr
 8017508:	20017790 	.word	0x20017790

0801750c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b084      	sub	sp, #16
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
    bool exec = false;
 8017514:	2300      	movs	r3, #0
 8017516:	73fb      	strb	r3, [r7, #15]

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	4618      	mov	r0, r3
 801751e:	f7fe fbe9 	bl	8015cf4 <lv_tick_elaps>
 8017522:	60b8      	str	r0, [r7, #8]
    if(elp >= task->period) {
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	68ba      	ldr	r2, [r7, #8]
 801752a:	429a      	cmp	r2, r3
 801752c:	d325      	bcc.n	801757a <lv_task_exec+0x6e>
        task->last_run = lv_tick_get();
 801752e:	f7fe fbc7 	bl	8015cc0 <lv_tick_get>
 8017532:	4602      	mov	r2, r0
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	605a      	str	r2, [r3, #4]
        task_deleted   = false;
 8017538:	4b12      	ldr	r3, [pc, #72]	; (8017584 <lv_task_exec+0x78>)
 801753a:	2200      	movs	r2, #0
 801753c:	701a      	strb	r2, [r3, #0]
        task_created   = false;
 801753e:	4b12      	ldr	r3, [pc, #72]	; (8017588 <lv_task_exec+0x7c>)
 8017540:	2200      	movs	r2, #0
 8017542:	701a      	strb	r2, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	689b      	ldr	r3, [r3, #8]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d003      	beq.n	8017554 <lv_task_exec+0x48>
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	689b      	ldr	r3, [r3, #8]
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8017554:	4b0b      	ldr	r3, [pc, #44]	; (8017584 <lv_task_exec+0x78>)
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	f083 0301 	eor.w	r3, r3, #1
 801755c:	b2db      	uxtb	r3, r3
 801755e:	2b00      	cmp	r3, #0
 8017560:	d009      	beq.n	8017576 <lv_task_exec+0x6a>
            if(task->once != 0) {
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	7c1b      	ldrb	r3, [r3, #16]
 8017566:	f003 0308 	and.w	r3, r3, #8
 801756a:	b2db      	uxtb	r3, r3
 801756c:	2b00      	cmp	r3, #0
 801756e:	d002      	beq.n	8017576 <lv_task_exec+0x6a>
                lv_task_del(task);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f7ff ff33 	bl	80173dc <lv_task_del>
            }
        }
        exec = true;
 8017576:	2301      	movs	r3, #1
 8017578:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 801757a:	7bfb      	ldrb	r3, [r7, #15]
}
 801757c:	4618      	mov	r0, r3
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}
 8017584:	20017792 	.word	0x20017792
 8017588:	20017793 	.word	0x20017793

0801758c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801758c:	b480      	push	{r7}
 801758e:	b083      	sub	sp, #12
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	7a1b      	ldrb	r3, [r3, #8]
}
 8017598:	4618      	mov	r0, r3
 801759a:	370c      	adds	r7, #12
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr

080175a4 <lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b08a      	sub	sp, #40	; 0x28
 80175a8:	af02      	add	r7, sp, #8
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
 80175b0:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	2200      	movs	r2, #0
 80175b6:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	2200      	movs	r2, #0
 80175bc:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f000 809a 	beq.w	80176fa <lv_txt_get_size+0x156>
    if(font == NULL) return;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f000 8098 	beq.w	80176fe <lv_txt_get_size+0x15a>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80175ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80175d2:	f003 0302 	and.w	r3, r3, #2
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d002      	beq.n	80175e0 <lv_txt_get_size+0x3c>
 80175da:	f647 4318 	movw	r3, #31768	; 0x7c18
 80175de:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 80175e0:	2300      	movs	r3, #0
 80175e2:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 80175e4:	2300      	movs	r3, #0
 80175e6:	61bb      	str	r3, [r7, #24]
    lv_coord_t act_line_length;
    uint8_t letter_height = lv_font_get_line_height(font);
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f7ff ffcf 	bl	801758c <lv_font_get_line_height>
 80175ee:	4603      	mov	r3, r0
 80175f0:	75fb      	strb	r3, [r7, #23]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 80175f2:	e048      	b.n	8017686 <lv_txt_get_size+0xe2>
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80175f4:	68ba      	ldr	r2, [r7, #8]
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	18d0      	adds	r0, r2, r3
 80175fa:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80175fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017602:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017606:	9300      	str	r3, [sp, #0]
 8017608:	460b      	mov	r3, r1
 801760a:	6879      	ldr	r1, [r7, #4]
 801760c:	f000 f87c 	bl	8017708 <lv_txt_get_next_line>
 8017610:	4603      	mov	r3, r0
 8017612:	461a      	mov	r2, r3
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	4413      	add	r3, r2
 8017618:	61bb      	str	r3, [r7, #24]
        size_res->y += letter_height;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017620:	b29a      	uxth	r2, r3
 8017622:	7dfb      	ldrb	r3, [r7, #23]
 8017624:	b29b      	uxth	r3, r3
 8017626:	4413      	add	r3, r2
 8017628:	b29b      	uxth	r3, r3
 801762a:	b21a      	sxth	r2, r3
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	805a      	strh	r2, [r3, #2]
        size_res->y += line_space;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017636:	b29a      	uxth	r2, r3
 8017638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801763a:	4413      	add	r3, r2
 801763c:	b29b      	uxth	r3, r3
 801763e:	b21a      	sxth	r2, r3
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	805a      	strh	r2, [r3, #2]

        /*Calculate the the longest line*/
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8017644:	68ba      	ldr	r2, [r7, #8]
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	18d0      	adds	r0, r2, r3
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	b29a      	uxth	r2, r3
 801764e:	69fb      	ldr	r3, [r7, #28]
 8017650:	b29b      	uxth	r3, r3
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	b299      	uxth	r1, r3
 8017656:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801765a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	4613      	mov	r3, r2
 8017662:	687a      	ldr	r2, [r7, #4]
 8017664:	f000 f902 	bl	801786c <lv_txt_get_width>
 8017668:	4603      	mov	r3, r0
 801766a:	82bb      	strh	r3, [r7, #20]

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017672:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017676:	4293      	cmp	r3, r2
 8017678:	bfb8      	it	lt
 801767a:	4613      	movlt	r3, r2
 801767c:	b21a      	sxth	r2, r3
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 8017682:	69bb      	ldr	r3, [r7, #24]
 8017684:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 8017686:	68ba      	ldr	r2, [r7, #8]
 8017688:	69fb      	ldr	r3, [r7, #28]
 801768a:	4413      	add	r3, r2
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1b0      	bne.n	80175f4 <lv_txt_get_size+0x50>
    }

    /*Ma ke the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8017692:	69fb      	ldr	r3, [r7, #28]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d01b      	beq.n	80176d0 <lv_txt_get_size+0x12c>
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	3b01      	subs	r3, #1
 801769c:	68ba      	ldr	r2, [r7, #8]
 801769e:	4413      	add	r3, r2
 80176a0:	781b      	ldrb	r3, [r3, #0]
 80176a2:	2b0a      	cmp	r3, #10
 80176a4:	d006      	beq.n	80176b4 <lv_txt_get_size+0x110>
 80176a6:	69fb      	ldr	r3, [r7, #28]
 80176a8:	3b01      	subs	r3, #1
 80176aa:	68ba      	ldr	r2, [r7, #8]
 80176ac:	4413      	add	r3, r2
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	2b0d      	cmp	r3, #13
 80176b2:	d10d      	bne.n	80176d0 <lv_txt_get_size+0x12c>
        size_res->y += letter_height + line_space;
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	7dfb      	ldrb	r3, [r7, #23]
 80176be:	b299      	uxth	r1, r3
 80176c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80176c2:	440b      	add	r3, r1
 80176c4:	b29b      	uxth	r3, r3
 80176c6:	4413      	add	r3, r2
 80176c8:	b29b      	uxth	r3, r3
 80176ca:	b21a      	sxth	r2, r3
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d104      	bne.n	80176e4 <lv_txt_get_size+0x140>
        size_res->y = letter_height;
 80176da:	7dfb      	ldrb	r3, [r7, #23]
 80176dc:	b21a      	sxth	r2, r3
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	805a      	strh	r2, [r3, #2]
 80176e2:	e00d      	b.n	8017700 <lv_txt_get_size+0x15c>
    else
        size_res->y -= line_space;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80176ee:	1ad3      	subs	r3, r2, r3
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	b21a      	sxth	r2, r3
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	805a      	strh	r2, [r3, #2]
 80176f8:	e002      	b.n	8017700 <lv_txt_get_size+0x15c>
    if(text == NULL) return;
 80176fa:	bf00      	nop
 80176fc:	e000      	b.n	8017700 <lv_txt_get_size+0x15c>
    if(font == NULL) return;
 80176fe:	bf00      	nop
}
 8017700:	3720      	adds	r7, #32
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}
	...

08017708 <lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b08c      	sub	sp, #48	; 0x30
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	60b9      	str	r1, [r7, #8]
 8017712:	4611      	mov	r1, r2
 8017714:	461a      	mov	r2, r3
 8017716:	460b      	mov	r3, r1
 8017718:	80fb      	strh	r3, [r7, #6]
 801771a:	4613      	mov	r3, r2
 801771c:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d101      	bne.n	8017728 <lv_txt_get_next_line+0x20>
 8017724:	2300      	movs	r3, #0
 8017726:	e099      	b.n	801785c <lv_txt_get_next_line+0x154>
    if(font == NULL) return 0;
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d101      	bne.n	8017732 <lv_txt_get_next_line+0x2a>
 801772e:	2300      	movs	r3, #0
 8017730:	e094      	b.n	801785c <lv_txt_get_next_line+0x154>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8017732:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017736:	f003 0302 	and.w	r3, r3, #2
 801773a:	2b00      	cmp	r3, #0
 801773c:	d002      	beq.n	8017744 <lv_txt_get_next_line+0x3c>
 801773e:	f647 4318 	movw	r3, #31768	; 0x7c18
 8017742:	80bb      	strh	r3, [r7, #4]

    uint32_t i                   = 0;
 8017744:	2300      	movs	r3, #0
 8017746:	61bb      	str	r3, [r7, #24]
    uint32_t i_next              = 0;
 8017748:	2300      	movs	r3, #0
 801774a:	617b      	str	r3, [r7, #20]
    lv_coord_t cur_w             = 0;
 801774c:	2300      	movs	r3, #0
 801774e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t last_break          = NO_BREAK_FOUND;
 8017750:	f04f 33ff 	mov.w	r3, #4294967295
 8017754:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8017756:	2300      	movs	r3, #0
 8017758:	74fb      	strb	r3, [r7, #19]
    uint32_t letter_w;
    uint32_t letter      = 0;
 801775a:	2300      	movs	r3, #0
 801775c:	623b      	str	r3, [r7, #32]
    uint32_t letter_next = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	627b      	str	r3, [r7, #36]	; 0x24

    letter_next = lv_txt_encoded_next(txt, &i_next);
 8017762:	4b40      	ldr	r3, [pc, #256]	; (8017864 <lv_txt_get_next_line+0x15c>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f107 0214 	add.w	r2, r7, #20
 801776a:	4611      	mov	r1, r2
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	4798      	blx	r3
 8017770:	6278      	str	r0, [r7, #36]	; 0x24

    while(txt[i] != '\0') {
 8017772:	e06b      	b.n	801784c <lv_txt_get_next_line+0x144>
        letter      = letter_next;
 8017774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017776:	623b      	str	r3, [r7, #32]
        i           = i_next;
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	61bb      	str	r3, [r7, #24]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 801777c:	4b39      	ldr	r3, [pc, #228]	; (8017864 <lv_txt_get_next_line+0x15c>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	f107 0214 	add.w	r2, r7, #20
 8017784:	4611      	mov	r1, r2
 8017786:	68f8      	ldr	r0, [r7, #12]
 8017788:	4798      	blx	r3
 801778a:	6278      	str	r0, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801778c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017790:	f003 0301 	and.w	r3, r3, #1
 8017794:	2b00      	cmp	r3, #0
 8017796:	d009      	beq.n	80177ac <lv_txt_get_next_line+0xa4>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8017798:	f107 0313 	add.w	r3, r7, #19
 801779c:	6a39      	ldr	r1, [r7, #32]
 801779e:	4618      	mov	r0, r3
 80177a0:	f000 f8ce 	bl	8017940 <lv_txt_is_cmd>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d000      	beq.n	80177ac <lv_txt_get_next_line+0xa4>
                continue; /*Skip the letter is it is part of a command*/
 80177aa:	e04f      	b.n	801784c <lv_txt_get_next_line+0x144>
            }
        }

        /*Check for new line chars*/
        if(letter == '\n' || letter == '\r') {
 80177ac:	6a3b      	ldr	r3, [r7, #32]
 80177ae:	2b0a      	cmp	r3, #10
 80177b0:	d002      	beq.n	80177b8 <lv_txt_get_next_line+0xb0>
 80177b2:	6a3b      	ldr	r3, [r7, #32]
 80177b4:	2b0d      	cmp	r3, #13
 80177b6:	d10b      	bne.n	80177d0 <lv_txt_get_next_line+0xc8>
            /*Return with the first letter of the next line*/
            if(letter == '\r' && letter_next == '\n')
 80177b8:	6a3b      	ldr	r3, [r7, #32]
 80177ba:	2b0d      	cmp	r3, #13
 80177bc:	d105      	bne.n	80177ca <lv_txt_get_next_line+0xc2>
 80177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c0:	2b0a      	cmp	r3, #10
 80177c2:	d102      	bne.n	80177ca <lv_txt_get_next_line+0xc2>
                return i_next;
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	b29b      	uxth	r3, r3
 80177c8:	e048      	b.n	801785c <lv_txt_get_next_line+0x154>
            else
                return i;
 80177ca:	69bb      	ldr	r3, [r7, #24]
 80177cc:	b29b      	uxth	r3, r3
 80177ce:	e045      	b.n	801785c <lv_txt_get_next_line+0x154>
        } else { /*Check the actual length*/
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80177d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177d2:	6a39      	ldr	r1, [r7, #32]
 80177d4:	68b8      	ldr	r0, [r7, #8]
 80177d6:	f7fd fdb1 	bl	801533c <lv_font_get_glyph_width>
 80177da:	4603      	mov	r3, r0
 80177dc:	61fb      	str	r3, [r7, #28]
            cur_w += letter_w;
 80177de:	69fb      	ldr	r3, [r7, #28]
 80177e0:	b29a      	uxth	r2, r3
 80177e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80177e4:	4413      	add	r3, r2
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*If the txt is too long then finish, this is the line end*/
            if(cur_w > max_width) {
 80177ea:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80177ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	dd1a      	ble.n	801782c <lv_txt_get_next_line+0x124>
                /*If a break character was already found break there*/
                if(last_break != NO_BREAK_FOUND) {
 80177f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177fc:	d002      	beq.n	8017804 <lv_txt_get_next_line+0xfc>
                    i = last_break;
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	61bb      	str	r3, [r7, #24]
 8017802:	e006      	b.n	8017812 <lv_txt_get_next_line+0x10a>
                } else {
                    /* Now this character is out of the area so it will be first character of the next line*/
                    /* But 'i' already points to the next character (because of lv_txt_utf8_next) step beck one*/
                    lv_txt_encoded_prev(txt, &i);
 8017804:	4b18      	ldr	r3, [pc, #96]	; (8017868 <lv_txt_get_next_line+0x160>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f107 0218 	add.w	r2, r7, #24
 801780c:	4611      	mov	r1, r2
 801780e:	68f8      	ldr	r0, [r7, #12]
 8017810:	4798      	blx	r3
                }

                /* Do not let to return without doing nothing.
                 * Find at least one character (Avoid infinite loop )*/
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8017812:	69bb      	ldr	r3, [r7, #24]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d106      	bne.n	8017826 <lv_txt_get_next_line+0x11e>
 8017818:	4b12      	ldr	r3, [pc, #72]	; (8017864 <lv_txt_get_next_line+0x15c>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	f107 0218 	add.w	r2, r7, #24
 8017820:	4611      	mov	r1, r2
 8017822:	68f8      	ldr	r0, [r7, #12]
 8017824:	4798      	blx	r3

                return i;
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	b29b      	uxth	r3, r3
 801782a:	e017      	b.n	801785c <lv_txt_get_next_line+0x154>
            }
            /*If this char still can fit to this line then check if
             * txt can be broken here later */
            else if(is_break_char(letter)) {
 801782c:	6a38      	ldr	r0, [r7, #32]
 801782e:	f000 faa9 	bl	8017d84 <is_break_char>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d001      	beq.n	801783c <lv_txt_get_next_line+0x134>
                last_break = i; /*Save the first char index after break*/
 8017838:	69bb      	ldr	r3, [r7, #24]
 801783a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        if(letter_w > 0) {
 801783c:	69fb      	ldr	r3, [r7, #28]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d004      	beq.n	801784c <lv_txt_get_next_line+0x144>
            cur_w += letter_space;
 8017842:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017844:	88fb      	ldrh	r3, [r7, #6]
 8017846:	4413      	add	r3, r2
 8017848:	b29b      	uxth	r3, r3
 801784a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(txt[i] != '\0') {
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	68fa      	ldr	r2, [r7, #12]
 8017850:	4413      	add	r3, r2
 8017852:	781b      	ldrb	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d18d      	bne.n	8017774 <lv_txt_get_next_line+0x6c>
        }
    }

    return i;
 8017858:	69bb      	ldr	r3, [r7, #24]
 801785a:	b29b      	uxth	r3, r3
}
 801785c:	4618      	mov	r0, r3
 801785e:	3730      	adds	r7, #48	; 0x30
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	200027a0 	.word	0x200027a0
 8017868:	200027a4 	.word	0x200027a4

0801786c <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b08a      	sub	sp, #40	; 0x28
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	607a      	str	r2, [r7, #4]
 8017876:	461a      	mov	r2, r3
 8017878:	460b      	mov	r3, r1
 801787a:	817b      	strh	r3, [r7, #10]
 801787c:	4613      	mov	r3, r2
 801787e:	813b      	strh	r3, [r7, #8]
    if(txt == NULL) return 0;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d101      	bne.n	801788a <lv_txt_get_width+0x1e>
 8017886:	2300      	movs	r3, #0
 8017888:	e053      	b.n	8017932 <lv_txt_get_width+0xc6>
    if(font == NULL) return 0;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d101      	bne.n	8017894 <lv_txt_get_width+0x28>
 8017890:	2300      	movs	r3, #0
 8017892:	e04e      	b.n	8017932 <lv_txt_get_width+0xc6>

    uint32_t i                   = 0;
 8017894:	2300      	movs	r3, #0
 8017896:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 8017898:	2300      	movs	r3, #0
 801789a:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801789c:	2300      	movs	r3, #0
 801789e:	74fb      	strb	r3, [r7, #19]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
 80178a0:	897b      	ldrh	r3, [r7, #10]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d043      	beq.n	801792e <lv_txt_get_width+0xc2>
        while(i < length) {
 80178a6:	e035      	b.n	8017914 <lv_txt_get_width+0xa8>
            letter      = lv_txt_encoded_next(txt, &i);
 80178a8:	4b24      	ldr	r3, [pc, #144]	; (801793c <lv_txt_get_width+0xd0>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	f107 0214 	add.w	r2, r7, #20
 80178b0:	4611      	mov	r1, r2
 80178b2:	68f8      	ldr	r0, [r7, #12]
 80178b4:	4798      	blx	r3
 80178b6:	6238      	str	r0, [r7, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80178b8:	4b20      	ldr	r3, [pc, #128]	; (801793c <lv_txt_get_width+0xd0>)
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	697a      	ldr	r2, [r7, #20]
 80178be:	68f9      	ldr	r1, [r7, #12]
 80178c0:	440a      	add	r2, r1
 80178c2:	2100      	movs	r1, #0
 80178c4:	4610      	mov	r0, r2
 80178c6:	4798      	blx	r3
 80178c8:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80178ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80178ce:	f003 0301 	and.w	r3, r3, #1
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d009      	beq.n	80178ea <lv_txt_get_width+0x7e>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 80178d6:	f107 0313 	add.w	r3, r7, #19
 80178da:	6a39      	ldr	r1, [r7, #32]
 80178dc:	4618      	mov	r0, r3
 80178de:	f000 f82f 	bl	8017940 <lv_txt_is_cmd>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d000      	beq.n	80178ea <lv_txt_get_width+0x7e>
                    continue;
 80178e8:	e014      	b.n	8017914 <lv_txt_get_width+0xa8>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80178ea:	69fa      	ldr	r2, [r7, #28]
 80178ec:	6a39      	ldr	r1, [r7, #32]
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7fd fd24 	bl	801533c <lv_font_get_glyph_width>
 80178f4:	4603      	mov	r3, r0
 80178f6:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 80178f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	dd09      	ble.n	8017914 <lv_txt_get_width+0xa8>
                width += char_width;
 8017900:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017902:	8b7b      	ldrh	r3, [r7, #26]
 8017904:	4413      	add	r3, r2
 8017906:	b29b      	uxth	r3, r3
 8017908:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 801790a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801790c:	893b      	ldrh	r3, [r7, #8]
 801790e:	4413      	add	r3, r2
 8017910:	b29b      	uxth	r3, r3
 8017912:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 8017914:	897a      	ldrh	r2, [r7, #10]
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	429a      	cmp	r2, r3
 801791a:	d8c5      	bhi.n	80178a8 <lv_txt_get_width+0x3c>
            }
        }

        if(width > 0) {
 801791c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017920:	2b00      	cmp	r3, #0
 8017922:	dd04      	ble.n	801792e <lv_txt_get_width+0xc2>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8017924:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017926:	893b      	ldrh	r3, [r7, #8]
 8017928:	1ad3      	subs	r3, r2, r3
 801792a:	b29b      	uxth	r3, r3
 801792c:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 801792e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8017932:	4618      	mov	r0, r3
 8017934:	3728      	adds	r7, #40	; 0x28
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
 801793a:	bf00      	nop
 801793c:	200027a0 	.word	0x200027a0

08017940 <lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 8017940:	b480      	push	{r7}
 8017942:	b085      	sub	sp, #20
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	6039      	str	r1, [r7, #0]
    bool ret = false;
 801794a:	2300      	movs	r3, #0
 801794c:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801794e:	2323      	movs	r3, #35	; 0x23
 8017950:	461a      	mov	r2, r3
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	4293      	cmp	r3, r2
 8017956:	d11a      	bne.n	801798e <lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d105      	bne.n	801796c <lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2201      	movs	r2, #1
 8017964:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8017966:	2301      	movs	r3, #1
 8017968:	73fb      	strb	r3, [r7, #15]
 801796a:	e010      	b.n	801798e <lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	2b01      	cmp	r3, #1
 8017972:	d103      	bne.n	801797c <lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2200      	movs	r2, #0
 8017978:	701a      	strb	r2, [r3, #0]
 801797a:	e008      	b.n	801798e <lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	2b02      	cmp	r3, #2
 8017982:	d104      	bne.n	801798e <lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	2200      	movs	r2, #0
 8017988:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801798a:	2301      	movs	r3, #1
 801798c:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	781b      	ldrb	r3, [r3, #0]
 8017992:	2b01      	cmp	r3, #1
 8017994:	d107      	bne.n	80179a6 <lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	2b20      	cmp	r3, #32
 801799a:	d102      	bne.n	80179a2 <lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2202      	movs	r2, #2
 80179a0:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 80179a2:	2301      	movs	r3, #1
 80179a4:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 80179a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3714      	adds	r7, #20
 80179ac:	46bd      	mov	sp, r7
 80179ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b2:	4770      	bx	lr

080179b4 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 80179b4:	b480      	push	{r7}
 80179b6:	b083      	sub	sp, #12
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
    if((str[0] & 0x80) == 0)
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	b25b      	sxtb	r3, r3
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	db01      	blt.n	80179ca <lv_txt_utf8_size+0x16>
        return 1;
 80179c6:	2301      	movs	r3, #1
 80179c8:	e018      	b.n	80179fc <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xE0) == 0xC0)
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80179d2:	2bc0      	cmp	r3, #192	; 0xc0
 80179d4:	d101      	bne.n	80179da <lv_txt_utf8_size+0x26>
        return 2;
 80179d6:	2302      	movs	r3, #2
 80179d8:	e010      	b.n	80179fc <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF0) == 0xE0)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	781b      	ldrb	r3, [r3, #0]
 80179de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80179e2:	2be0      	cmp	r3, #224	; 0xe0
 80179e4:	d101      	bne.n	80179ea <lv_txt_utf8_size+0x36>
        return 3;
 80179e6:	2303      	movs	r3, #3
 80179e8:	e008      	b.n	80179fc <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF8) == 0xF0)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	781b      	ldrb	r3, [r3, #0]
 80179ee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80179f2:	2bf0      	cmp	r3, #240	; 0xf0
 80179f4:	d101      	bne.n	80179fa <lv_txt_utf8_size+0x46>
        return 4;
 80179f6:	2304      	movs	r3, #4
 80179f8:	e000      	b.n	80179fc <lv_txt_utf8_size+0x48>
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 80179fa:	2301      	movs	r3, #1
}
 80179fc:	4618      	mov	r0, r3
 80179fe:	370c      	adds	r7, #12
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr

08017a08 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 8017a12:	2300      	movs	r3, #0
 8017a14:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8017a16:	2300      	movs	r3, #0
 8017a18:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d102      	bne.n	8017a26 <lv_txt_utf8_next+0x1e>
 8017a20:	f107 0308 	add.w	r3, r7, #8
 8017a24:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8017a26:	683b      	ldr	r3, [r7, #0]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	687a      	ldr	r2, [r7, #4]
 8017a2c:	4413      	add	r3, r2
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	b25b      	sxtb	r3, r3
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	db0b      	blt.n	8017a4e <lv_txt_utf8_next+0x46>
        result = txt[*i];
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	4413      	add	r3, r2
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	1c5a      	adds	r2, r3, #1
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	601a      	str	r2, [r3, #0]
 8017a4c:	e0ea      	b.n	8017c24 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	4413      	add	r3, r2
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8017a5c:	2bc0      	cmp	r3, #192	; 0xc0
 8017a5e:	d128      	bne.n	8017ab2 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	4413      	add	r3, r2
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	019b      	lsls	r3, r3, #6
 8017a6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8017a70:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	687a      	ldr	r2, [r7, #4]
 8017a82:	4413      	add	r3, r2
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017a8a:	2b80      	cmp	r3, #128	; 0x80
 8017a8c:	d001      	beq.n	8017a92 <lv_txt_utf8_next+0x8a>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e0c9      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	4413      	add	r3, r2
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017aa0:	68fa      	ldr	r2, [r7, #12]
 8017aa2:	4413      	add	r3, r2
 8017aa4:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017aa6:	683b      	ldr	r3, [r7, #0]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	1c5a      	adds	r2, r3, #1
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	601a      	str	r2, [r3, #0]
 8017ab0:	e0b8      	b.n	8017c24 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	687a      	ldr	r2, [r7, #4]
 8017ab8:	4413      	add	r3, r2
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ac0:	2be0      	cmp	r3, #224	; 0xe0
 8017ac2:	d142      	bne.n	8017b4a <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	687a      	ldr	r2, [r7, #4]
 8017aca:	4413      	add	r3, r2
 8017acc:	781b      	ldrb	r3, [r3, #0]
 8017ace:	031b      	lsls	r3, r3, #12
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	1c5a      	adds	r2, r3, #1
 8017ada:	683b      	ldr	r3, [r7, #0]
 8017adc:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017aec:	2b80      	cmp	r3, #128	; 0x80
 8017aee:	d001      	beq.n	8017af4 <lv_txt_utf8_next+0xec>
 8017af0:	2300      	movs	r3, #0
 8017af2:	e098      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	687a      	ldr	r2, [r7, #4]
 8017afa:	4413      	add	r3, r2
 8017afc:	781b      	ldrb	r3, [r3, #0]
 8017afe:	019b      	lsls	r3, r3, #6
 8017b00:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8017b04:	68fa      	ldr	r2, [r7, #12]
 8017b06:	4413      	add	r3, r2
 8017b08:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	1c5a      	adds	r2, r3, #1
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	687a      	ldr	r2, [r7, #4]
 8017b1a:	4413      	add	r3, r2
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017b22:	2b80      	cmp	r3, #128	; 0x80
 8017b24:	d001      	beq.n	8017b2a <lv_txt_utf8_next+0x122>
 8017b26:	2300      	movs	r3, #0
 8017b28:	e07d      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	687a      	ldr	r2, [r7, #4]
 8017b30:	4413      	add	r3, r2
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	1c5a      	adds	r2, r3, #1
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	601a      	str	r2, [r3, #0]
 8017b48:	e06c      	b.n	8017c24 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	687a      	ldr	r2, [r7, #4]
 8017b50:	4413      	add	r3, r2
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017b58:	2bf0      	cmp	r3, #240	; 0xf0
 8017b5a:	d15e      	bne.n	8017c1a <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	4413      	add	r3, r2
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	049b      	lsls	r3, r3, #18
 8017b68:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8017b6c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	1c5a      	adds	r2, r3, #1
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	687a      	ldr	r2, [r7, #4]
 8017b7e:	4413      	add	r3, r2
 8017b80:	781b      	ldrb	r3, [r3, #0]
 8017b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017b86:	2b80      	cmp	r3, #128	; 0x80
 8017b88:	d001      	beq.n	8017b8e <lv_txt_utf8_next+0x186>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e04b      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	687a      	ldr	r2, [r7, #4]
 8017b94:	4413      	add	r3, r2
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	031b      	lsls	r3, r3, #12
 8017b9a:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8017b9e:	68fa      	ldr	r2, [r7, #12]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	1c5a      	adds	r2, r3, #1
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	687a      	ldr	r2, [r7, #4]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017bbc:	2b80      	cmp	r3, #128	; 0x80
 8017bbe:	d001      	beq.n	8017bc4 <lv_txt_utf8_next+0x1bc>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e030      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	4413      	add	r3, r2
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	019b      	lsls	r3, r3, #6
 8017bd0:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	1c5a      	adds	r2, r3, #1
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	4413      	add	r3, r2
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017bf2:	2b80      	cmp	r3, #128	; 0x80
 8017bf4:	d001      	beq.n	8017bfa <lv_txt_utf8_next+0x1f2>
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	e015      	b.n	8017c26 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	4413      	add	r3, r2
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c08:	68fa      	ldr	r2, [r7, #12]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017c0e:	683b      	ldr	r3, [r7, #0]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	1c5a      	adds	r2, r3, #1
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	601a      	str	r2, [r3, #0]
 8017c18:	e004      	b.n	8017c24 <lv_txt_utf8_next+0x21c>
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	1c5a      	adds	r2, r3, #1
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8017c24:	68fb      	ldr	r3, [r7, #12]
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	3714      	adds	r7, #20
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c30:	4770      	bx	lr
	...

08017c34 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b086      	sub	sp, #24
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	1e5a      	subs	r2, r3, #1
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8017c4c:	7dfb      	ldrb	r3, [r7, #23]
 8017c4e:	2b03      	cmp	r3, #3
 8017c50:	d901      	bls.n	8017c56 <lv_txt_utf8_prev+0x22>
 8017c52:	2300      	movs	r3, #0
 8017c54:	e02a      	b.n	8017cac <lv_txt_utf8_prev+0x78>

        c_size = lv_txt_encoded_size(&txt[*i]);
 8017c56:	4b17      	ldr	r3, [pc, #92]	; (8017cb4 <lv_txt_utf8_prev+0x80>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	683a      	ldr	r2, [r7, #0]
 8017c5c:	6812      	ldr	r2, [r2, #0]
 8017c5e:	6879      	ldr	r1, [r7, #4]
 8017c60:	440a      	add	r2, r1
 8017c62:	4610      	mov	r0, r2
 8017c64:	4798      	blx	r3
 8017c66:	4603      	mov	r3, r0
 8017c68:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8017c6a:	7dbb      	ldrb	r3, [r7, #22]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d10b      	bne.n	8017c88 <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8017c70:	683b      	ldr	r3, [r7, #0]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d005      	beq.n	8017c84 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	1e5a      	subs	r2, r3, #1
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	601a      	str	r2, [r3, #0]
 8017c82:	e001      	b.n	8017c88 <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8017c84:	2300      	movs	r3, #0
 8017c86:	e011      	b.n	8017cac <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8017c88:	7dfb      	ldrb	r3, [r7, #23]
 8017c8a:	3301      	adds	r3, #1
 8017c8c:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8017c8e:	7dbb      	ldrb	r3, [r7, #22]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d0db      	beq.n	8017c4c <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	60fb      	str	r3, [r7, #12]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8017c9a:	4b07      	ldr	r3, [pc, #28]	; (8017cb8 <lv_txt_utf8_prev+0x84>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f107 020c 	add.w	r2, r7, #12
 8017ca2:	4611      	mov	r1, r2
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	4798      	blx	r3
 8017ca8:	6138      	str	r0, [r7, #16]

    return letter;
 8017caa:	693b      	ldr	r3, [r7, #16]
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3718      	adds	r7, #24
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	2000279c 	.word	0x2000279c
 8017cb8:	200027a0 	.word	0x200027a0

08017cbc <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 8017cca:	2300      	movs	r3, #0
 8017ccc:	60fb      	str	r3, [r7, #12]
 8017cce:	e00e      	b.n	8017cee <lv_txt_utf8_get_byte_id+0x32>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8017cd0:	4b0b      	ldr	r3, [pc, #44]	; (8017d00 <lv_txt_utf8_get_byte_id+0x44>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	6879      	ldr	r1, [r7, #4]
 8017cd6:	68ba      	ldr	r2, [r7, #8]
 8017cd8:	440a      	add	r2, r1
 8017cda:	4610      	mov	r0, r2
 8017cdc:	4798      	blx	r3
 8017cde:	4603      	mov	r3, r0
 8017ce0:	461a      	mov	r2, r3
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	4413      	add	r3, r2
 8017ce6:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	3301      	adds	r3, #1
 8017cec:	60fb      	str	r3, [r7, #12]
 8017cee:	68fa      	ldr	r2, [r7, #12]
 8017cf0:	683b      	ldr	r3, [r7, #0]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d3ec      	bcc.n	8017cd0 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8017cf6:	68bb      	ldr	r3, [r7, #8]
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3710      	adds	r7, #16
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}
 8017d00:	2000279c 	.word	0x2000279c

08017d04 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b084      	sub	sp, #16
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8017d12:	2300      	movs	r3, #0
 8017d14:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8017d16:	e009      	b.n	8017d2c <lv_txt_utf8_get_char_id+0x28>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8017d18:	4b09      	ldr	r3, [pc, #36]	; (8017d40 <lv_txt_utf8_get_char_id+0x3c>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	f107 0208 	add.w	r2, r7, #8
 8017d20:	4611      	mov	r1, r2
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	4798      	blx	r3
        char_cnt++;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	683a      	ldr	r2, [r7, #0]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d8f1      	bhi.n	8017d18 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8017d34:	68fb      	ldr	r3, [r7, #12]
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3710      	adds	r7, #16
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	200027a0 	.word	0x200027a0

08017d44 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b084      	sub	sp, #16
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8017d50:	2300      	movs	r3, #0
 8017d52:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8017d54:	e009      	b.n	8017d6a <lv_txt_utf8_get_length+0x26>
        lv_txt_encoded_next(txt, &i);
 8017d56:	4b0a      	ldr	r3, [pc, #40]	; (8017d80 <lv_txt_utf8_get_length+0x3c>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	f107 0208 	add.w	r2, r7, #8
 8017d5e:	4611      	mov	r1, r2
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	4798      	blx	r3
        len++;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	3301      	adds	r3, #1
 8017d68:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	687a      	ldr	r2, [r7, #4]
 8017d6e:	4413      	add	r3, r2
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1ef      	bne.n	8017d56 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8017d76:	68fb      	ldr	r3, [r7, #12]
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3710      	adds	r7, #16
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	200027a0 	.word	0x200027a0

08017d84 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b085      	sub	sp, #20
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8017d90:	2300      	movs	r3, #0
 8017d92:	73fb      	strb	r3, [r7, #15]
 8017d94:	e00c      	b.n	8017db0 <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8017d96:	7bfb      	ldrb	r3, [r7, #15]
 8017d98:	4a0b      	ldr	r2, [pc, #44]	; (8017dc8 <is_break_char+0x44>)
 8017d9a:	5cd3      	ldrb	r3, [r2, r3]
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d102      	bne.n	8017daa <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 8017da4:	2301      	movs	r3, #1
 8017da6:	73bb      	strb	r3, [r7, #14]
            break;
 8017da8:	e007      	b.n	8017dba <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8017daa:	7bfb      	ldrb	r3, [r7, #15]
 8017dac:	3301      	adds	r3, #1
 8017dae:	73fb      	strb	r3, [r7, #15]
 8017db0:	7bfb      	ldrb	r3, [r7, #15]
 8017db2:	4a05      	ldr	r2, [pc, #20]	; (8017dc8 <is_break_char+0x44>)
 8017db4:	5cd3      	ldrb	r3, [r2, r3]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d1ed      	bne.n	8017d96 <is_break_char+0x12>
        }
    }

    return ret;
 8017dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	3714      	adds	r7, #20
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc6:	4770      	bx	lr
 8017dc8:	0802d468 	.word	0x0802d468

08017dcc <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b086      	sub	sp, #24
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	60f8      	str	r0, [r7, #12]
 8017dd4:	60b9      	str	r1, [r7, #8]
 8017dd6:	607a      	str	r2, [r7, #4]
 8017dd8:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8017dda:	68bb      	ldr	r3, [r7, #8]
 8017ddc:	617b      	str	r3, [r7, #20]
 8017dde:	e02d      	b.n	8017e3c <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	085b      	lsrs	r3, r3, #1
 8017de4:	683a      	ldr	r2, [r7, #0]
 8017de6:	fb02 f303 	mul.w	r3, r2, r3
 8017dea:	697a      	ldr	r2, [r7, #20]
 8017dec:	4413      	add	r3, r2
 8017dee:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8017df0:	6a3b      	ldr	r3, [r7, #32]
 8017df2:	6979      	ldr	r1, [r7, #20]
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	4798      	blx	r3
 8017df8:	6138      	str	r0, [r7, #16]
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	dd12      	ble.n	8017e26 <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	085b      	lsrs	r3, r3, #1
 8017e04:	687a      	ldr	r2, [r7, #4]
 8017e06:	f002 0201 	and.w	r2, r2, #1
 8017e0a:	2a00      	cmp	r2, #0
 8017e0c:	bf0c      	ite	eq
 8017e0e:	2201      	moveq	r2, #1
 8017e10:	2200      	movne	r2, #0
 8017e12:	b2d2      	uxtb	r2, r2
 8017e14:	1a9b      	subs	r3, r3, r2
 8017e16:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8017e18:	697a      	ldr	r2, [r7, #20]
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	617b      	str	r3, [r7, #20]
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	60bb      	str	r3, [r7, #8]
 8017e24:	e00a      	b.n	8017e3c <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	da05      	bge.n	8017e38 <lv_utils_bsearch+0x6c>
            n /= 2;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	085b      	lsrs	r3, r3, #1
 8017e30:	607b      	str	r3, [r7, #4]
            middle = base;
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	617b      	str	r3, [r7, #20]
 8017e36:	e001      	b.n	8017e3c <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	e003      	b.n	8017e44 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d1ce      	bne.n	8017de0 <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8017e42:	2300      	movs	r3, #0
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <lv_arc_create>:
 * @param par pointer to an object, it will be the parent of the new arc
 * @param copy pointer to a arc object, if not NULL then the new object will be copied from it
 * @return pointer to the created arc
 */
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b086      	sub	sp, #24
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("arc create started");

    /*Create the ancestor of arc*/
    lv_obj_t * new_arc = lv_obj_create(par, copy);
 8017e56:	6839      	ldr	r1, [r7, #0]
 8017e58:	6878      	ldr	r0, [r7, #4]
 8017e5a:	f7f0 ff4d 	bl	8008cf8 <lv_obj_create>
 8017e5e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_arc);
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d100      	bne.n	8017e68 <lv_arc_create+0x1c>
 8017e66:	e7fe      	b.n	8017e66 <lv_arc_create+0x1a>
    if(new_arc == NULL) return NULL;
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d101      	bne.n	8017e72 <lv_arc_create+0x26>
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e059      	b.n	8017f26 <lv_arc_create+0xda>

    /*Allocate the arc type specific extended data*/
    lv_arc_ext_t * ext = lv_obj_allocate_ext_attr(new_arc, sizeof(lv_arc_ext_t));
 8017e72:	2104      	movs	r1, #4
 8017e74:	6978      	ldr	r0, [r7, #20]
 8017e76:	f7f2 fadb 	bl	800a430 <lv_obj_allocate_ext_attr>
 8017e7a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d100      	bne.n	8017e84 <lv_arc_create+0x38>
 8017e82:	e7fe      	b.n	8017e82 <lv_arc_create+0x36>
    if(ext == NULL) return NULL;
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d101      	bne.n	8017e8e <lv_arc_create+0x42>
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	e04b      	b.n	8017f26 <lv_arc_create+0xda>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_arc);
 8017e8e:	4b28      	ldr	r3, [pc, #160]	; (8017f30 <lv_arc_create+0xe4>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d105      	bne.n	8017ea2 <lv_arc_create+0x56>
 8017e96:	6978      	ldr	r0, [r7, #20]
 8017e98:	f7f2 fc7f 	bl	800a79a <lv_obj_get_signal_cb>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	4b24      	ldr	r3, [pc, #144]	; (8017f30 <lv_arc_create+0xe4>)
 8017ea0:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_arc);
 8017ea2:	4b24      	ldr	r3, [pc, #144]	; (8017f34 <lv_arc_create+0xe8>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d105      	bne.n	8017eb6 <lv_arc_create+0x6a>
 8017eaa:	6978      	ldr	r0, [r7, #20]
 8017eac:	f7f2 fc81 	bl	800a7b2 <lv_obj_get_design_cb>
 8017eb0:	4602      	mov	r2, r0
 8017eb2:	4b20      	ldr	r3, [pc, #128]	; (8017f34 <lv_arc_create+0xe8>)
 8017eb4:	601a      	str	r2, [r3, #0]

    /*Initialize the allocated 'ext' */
    ext->angle_start = 45;
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	222d      	movs	r2, #45	; 0x2d
 8017eba:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = 315;
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	f240 123b 	movw	r2, #315	; 0x13b
 8017ec2:	805a      	strh	r2, [r3, #2]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_arc, lv_arc_signal);
 8017ec4:	491c      	ldr	r1, [pc, #112]	; (8017f38 <lv_arc_create+0xec>)
 8017ec6:	6978      	ldr	r0, [r7, #20]
 8017ec8:	f7f2 fa96 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_arc, lv_arc_design);
 8017ecc:	491b      	ldr	r1, [pc, #108]	; (8017f3c <lv_arc_create+0xf0>)
 8017ece:	6978      	ldr	r0, [r7, #20]
 8017ed0:	f7f2 faa0 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new arc arc*/
    if(copy == NULL) {
 8017ed4:	683b      	ldr	r3, [r7, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d113      	bne.n	8017f02 <lv_arc_create+0xb6>
        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8017eda:	f00a faf9 	bl	80224d0 <lv_theme_get_current>
 8017ede:	60b8      	str	r0, [r7, #8]
        if(th) {
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d007      	beq.n	8017ef6 <lv_arc_create+0xaa>
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, th->style.arc);
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eea:	461a      	mov	r2, r3
 8017eec:	2100      	movs	r1, #0
 8017eee:	6978      	ldr	r0, [r7, #20]
 8017ef0:	f000 f851 	bl	8017f96 <lv_arc_set_style>
 8017ef4:	e016      	b.n	8017f24 <lv_arc_create+0xd8>
        } else {
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, &lv_style_plain_color);
 8017ef6:	4a12      	ldr	r2, [pc, #72]	; (8017f40 <lv_arc_create+0xf4>)
 8017ef8:	2100      	movs	r1, #0
 8017efa:	6978      	ldr	r0, [r7, #20]
 8017efc:	f000 f84b 	bl	8017f96 <lv_arc_set_style>
 8017f00:	e010      	b.n	8017f24 <lv_arc_create+0xd8>
        }

    }
    /*Copy an existing arc*/
    else {
        lv_arc_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017f02:	6838      	ldr	r0, [r7, #0]
 8017f04:	f7f2 fc61 	bl	800a7ca <lv_obj_get_ext_attr>
 8017f08:	60f8      	str	r0, [r7, #12]
        ext->angle_start        = copy_ext->angle_start;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	801a      	strh	r2, [r3, #0]
        ext->angle_end          = copy_ext->angle_end;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	805a      	strh	r2, [r3, #2]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_arc);
 8017f1e:	6978      	ldr	r0, [r7, #20]
 8017f20:	f7f2 f935 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("arc created");

    return new_arc;
 8017f24:	697b      	ldr	r3, [r7, #20]
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3718      	adds	r7, #24
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	200177a4 	.word	0x200177a4
 8017f34:	200177a8 	.word	0x200177a8
 8017f38:	080182bd 	.word	0x080182bd
 8017f3c:	08017ff1 	.word	0x08017ff1
 8017f40:	2001bb30 	.word	0x2001bb30

08017f44 <lv_arc_set_angles>:
 * @param arc pointer to an arc object
 * @param start the start angle [0..360]
 * @param end the end angle [0..360]
 */
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	807b      	strh	r3, [r7, #2]
 8017f50:	4613      	mov	r3, r2
 8017f52:	803b      	strh	r3, [r7, #0]
    lv_arc_ext_t * ext = lv_obj_get_ext_attr(arc);
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f7f2 fc38 	bl	800a7ca <lv_obj_get_ext_attr>
 8017f5a:	60f8      	str	r0, [r7, #12]

    if(start > 360) start = 360;
 8017f5c:	887b      	ldrh	r3, [r7, #2]
 8017f5e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8017f62:	d902      	bls.n	8017f6a <lv_arc_set_angles+0x26>
 8017f64:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017f68:	807b      	strh	r3, [r7, #2]
    if(end > 360) end = 360;
 8017f6a:	883b      	ldrh	r3, [r7, #0]
 8017f6c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8017f70:	d902      	bls.n	8017f78 <lv_arc_set_angles+0x34>
 8017f72:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017f76:	803b      	strh	r3, [r7, #0]

    ext->angle_start = start;
 8017f78:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = end;
 8017f80:	f9b7 2000 	ldrsh.w	r2, [r7]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	805a      	strh	r2, [r3, #2]

    lv_obj_invalidate(arc);
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f7f1 f9f2 	bl	8009372 <lv_obj_invalidate>
}
 8017f8e:	bf00      	nop
 8017f90:	3710      	adds	r7, #16
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}

08017f96 <lv_arc_set_style>:
 * @param arc pointer to arc object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_arc_set_style(lv_obj_t * arc, lv_arc_style_t type, const lv_style_t * style)
{
 8017f96:	b580      	push	{r7, lr}
 8017f98:	b084      	sub	sp, #16
 8017f9a:	af00      	add	r7, sp, #0
 8017f9c:	60f8      	str	r0, [r7, #12]
 8017f9e:	460b      	mov	r3, r1
 8017fa0:	607a      	str	r2, [r7, #4]
 8017fa2:	72fb      	strb	r3, [r7, #11]
    switch(type) {
 8017fa4:	7afb      	ldrb	r3, [r7, #11]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d000      	beq.n	8017fac <lv_arc_set_style+0x16>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
    }
}
 8017faa:	e004      	b.n	8017fb6 <lv_arc_set_style+0x20>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
 8017fac:	6879      	ldr	r1, [r7, #4]
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f7f2 f8db 	bl	800a16a <lv_obj_set_style>
 8017fb4:	bf00      	nop
}
 8017fb6:	bf00      	nop
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}

08017fbe <lv_arc_get_style>:
 * @param arc pointer to arc object
 * @param type which style should be get
 * @return style pointer to the style
 *  */
const lv_style_t * lv_arc_get_style(const lv_obj_t * arc, lv_arc_style_t type)
{
 8017fbe:	b580      	push	{r7, lr}
 8017fc0:	b084      	sub	sp, #16
 8017fc2:	af00      	add	r7, sp, #0
 8017fc4:	6078      	str	r0, [r7, #4]
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	60fb      	str	r3, [r7, #12]

    switch(type) {
 8017fce:	78fb      	ldrb	r3, [r7, #3]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d104      	bne.n	8017fde <lv_arc_get_style+0x20>
        case LV_ARC_STYLE_MAIN: style = lv_obj_get_style(arc); break;
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f7f2 fb3d 	bl	800a654 <lv_obj_get_style>
 8017fda:	60f8      	str	r0, [r7, #12]
 8017fdc:	e002      	b.n	8017fe4 <lv_arc_get_style+0x26>
        default: style = NULL; break;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	60fb      	str	r3, [r7, #12]
 8017fe2:	bf00      	nop
    }

    return style;
 8017fe4:	68fb      	ldr	r3, [r7, #12]
}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	3710      	adds	r7, #16
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
	...

08017ff0 <lv_arc_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_arc_design(lv_obj_t * arc, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017ff0:	b5b0      	push	{r4, r5, r7, lr}
 8017ff2:	b0a0      	sub	sp, #128	; 0x80
 8017ff4:	af04      	add	r7, sp, #16
 8017ff6:	60f8      	str	r0, [r7, #12]
 8017ff8:	60b9      	str	r1, [r7, #8]
 8017ffa:	4613      	mov	r3, r2
 8017ffc:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8017ffe:	79fb      	ldrb	r3, [r7, #7]
 8018000:	2b02      	cmp	r3, #2
 8018002:	d101      	bne.n	8018008 <lv_arc_design+0x18>
        return false;
 8018004:	2300      	movs	r3, #0
 8018006:	e152      	b.n	80182ae <lv_arc_design+0x2be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8018008:	79fb      	ldrb	r3, [r7, #7]
 801800a:	2b00      	cmp	r3, #0
 801800c:	f040 814e 	bne.w	80182ac <lv_arc_design+0x2bc>
        lv_arc_ext_t * ext       = lv_obj_get_ext_attr(arc);
 8018010:	68f8      	ldr	r0, [r7, #12]
 8018012:	f7f2 fbda 	bl	800a7ca <lv_obj_get_ext_attr>
 8018016:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * style = lv_arc_get_style(arc, LV_ARC_STYLE_MAIN);
 8018018:	2100      	movs	r1, #0
 801801a:	68f8      	ldr	r0, [r7, #12]
 801801c:	f7ff ffcf 	bl	8017fbe <lv_arc_get_style>
 8018020:	66b8      	str	r0, [r7, #104]	; 0x68

        lv_coord_t r       = (LV_MATH_MIN(lv_obj_get_width(arc), lv_obj_get_height(arc))) / 2;
 8018022:	68f8      	ldr	r0, [r7, #12]
 8018024:	f7f2 fae6 	bl	800a5f4 <lv_obj_get_width>
 8018028:	4603      	mov	r3, r0
 801802a:	461c      	mov	r4, r3
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f7f2 faef 	bl	800a610 <lv_obj_get_height>
 8018032:	4603      	mov	r3, r0
 8018034:	429c      	cmp	r4, r3
 8018036:	da08      	bge.n	801804a <lv_arc_design+0x5a>
 8018038:	68f8      	ldr	r0, [r7, #12]
 801803a:	f7f2 fadb 	bl	800a5f4 <lv_obj_get_width>
 801803e:	4603      	mov	r3, r0
 8018040:	0fda      	lsrs	r2, r3, #31
 8018042:	4413      	add	r3, r2
 8018044:	105b      	asrs	r3, r3, #1
 8018046:	b21b      	sxth	r3, r3
 8018048:	e007      	b.n	801805a <lv_arc_design+0x6a>
 801804a:	68f8      	ldr	r0, [r7, #12]
 801804c:	f7f2 fae0 	bl	800a610 <lv_obj_get_height>
 8018050:	4603      	mov	r3, r0
 8018052:	0fda      	lsrs	r2, r3, #31
 8018054:	4413      	add	r3, r2
 8018056:	105b      	asrs	r3, r3, #1
 8018058:	b21b      	sxth	r3, r3
 801805a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_coord_t x       = arc->coords.x1 + lv_obj_get_width(arc) / 2;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8018064:	b29c      	uxth	r4, r3
 8018066:	68f8      	ldr	r0, [r7, #12]
 8018068:	f7f2 fac4 	bl	800a5f4 <lv_obj_get_width>
 801806c:	4603      	mov	r3, r0
 801806e:	0fda      	lsrs	r2, r3, #31
 8018070:	4413      	add	r3, r2
 8018072:	105b      	asrs	r3, r3, #1
 8018074:	b21b      	sxth	r3, r3
 8018076:	b29b      	uxth	r3, r3
 8018078:	4423      	add	r3, r4
 801807a:	b29b      	uxth	r3, r3
 801807c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        lv_coord_t y       = arc->coords.y1 + lv_obj_get_height(arc) / 2;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8018086:	b29c      	uxth	r4, r3
 8018088:	68f8      	ldr	r0, [r7, #12]
 801808a:	f7f2 fac1 	bl	800a610 <lv_obj_get_height>
 801808e:	4603      	mov	r3, r0
 8018090:	0fda      	lsrs	r2, r3, #31
 8018092:	4413      	add	r3, r2
 8018094:	105b      	asrs	r3, r3, #1
 8018096:	b21b      	sxth	r3, r3
 8018098:	b29b      	uxth	r3, r3
 801809a:	4423      	add	r3, r4
 801809c:	b29b      	uxth	r3, r3
 801809e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        lv_opa_t opa_scale = lv_obj_get_opa_scale(arc);
 80180a2:	68f8      	ldr	r0, [r7, #12]
 80180a4:	f7f2 fb43 	bl	800a72e <lv_obj_get_opa_scale>
 80180a8:	4603      	mov	r3, r0
 80180aa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        lv_draw_arc(x, y, r, mask, ext->angle_start, ext->angle_end, style, opa_scale);
 80180ae:	f8b7 5066 	ldrh.w	r5, [r7, #102]	; 0x66
 80180b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80180bc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80180c0:	b292      	uxth	r2, r2
 80180c2:	f9b7 4062 	ldrsh.w	r4, [r7, #98]	; 0x62
 80180c6:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 80180ca:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
 80180ce:	9103      	str	r1, [sp, #12]
 80180d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80180d2:	9102      	str	r1, [sp, #8]
 80180d4:	9201      	str	r2, [sp, #4]
 80180d6:	9300      	str	r3, [sp, #0]
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	462a      	mov	r2, r5
 80180dc:	4621      	mov	r1, r4
 80180de:	f7f3 ff0f 	bl	800bf00 <lv_draw_arc>

        /*Draw circle on the ends if enabled */
        if(style->line.rounded) {
 80180e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80180e8:	f003 0301 	and.w	r3, r3, #1
 80180ec:	b2db      	uxtb	r3, r3
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	f000 80dc 	beq.w	80182ac <lv_arc_design+0x2bc>
            lv_coord_t thick_half = style->line.width / 2;
 80180f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180f6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80180fa:	0fda      	lsrs	r2, r3, #31
 80180fc:	4413      	add	r3, r2
 80180fe:	105b      	asrs	r3, r3, #1
 8018100:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t cir_x      = ((r - thick_half) * lv_trigo_sin(ext->angle_start) >> LV_TRIGO_SHIFT);
 8018104:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8018108:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801810c:	1ad4      	subs	r4, r2, r3
 801810e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018114:	4618      	mov	r0, r3
 8018116:	f7fe fe81 	bl	8016e1c <lv_trigo_sin>
 801811a:	4603      	mov	r3, r0
 801811c:	fb03 f304 	mul.w	r3, r3, r4
 8018120:	13db      	asrs	r3, r3, #15
 8018122:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t cir_y      = ((r - thick_half) * lv_trigo_sin(ext->angle_start + 90) >> LV_TRIGO_SHIFT);
 8018126:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801812a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801812e:	1ad4      	subs	r4, r2, r3
 8018130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018136:	b29b      	uxth	r3, r3
 8018138:	335a      	adds	r3, #90	; 0x5a
 801813a:	b29b      	uxth	r3, r3
 801813c:	b21b      	sxth	r3, r3
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fe6c 	bl	8016e1c <lv_trigo_sin>
 8018144:	4603      	mov	r3, r0
 8018146:	fb03 f304 	mul.w	r3, r3, r4
 801814a:	13db      	asrs	r3, r3, #15
 801814c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_style_t cir_style;
            lv_style_copy(&cir_style, &lv_style_plain);
 8018150:	f107 0314 	add.w	r3, r7, #20
 8018154:	4958      	ldr	r1, [pc, #352]	; (80182b8 <lv_arc_design+0x2c8>)
 8018156:	4618      	mov	r0, r3
 8018158:	f7f3 fda6 	bl	800bca8 <lv_style_copy>
            cir_style.body.grad_color = style->line.color;
 801815c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801815e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8018160:	833b      	strh	r3, [r7, #24]
            cir_style.body.main_color = cir_style.body.grad_color;
 8018162:	8b3b      	ldrh	r3, [r7, #24]
 8018164:	82fb      	strh	r3, [r7, #22]
            cir_style.body.radius     = LV_RADIUS_CIRCLE;
 8018166:	f647 4318 	movw	r3, #31768	; 0x7c18
 801816a:	837b      	strh	r3, [r7, #26]
            lv_area_t cir_area;
            cir_area.x1 = cir_x + x - thick_half;
 801816c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8018170:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018174:	4413      	add	r3, r2
 8018176:	b29a      	uxth	r2, r3
 8018178:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801817c:	1ad3      	subs	r3, r2, r3
 801817e:	b29b      	uxth	r3, r3
 8018180:	b21b      	sxth	r3, r3
 8018182:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 8018186:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801818a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801818e:	4413      	add	r3, r2
 8018190:	b29a      	uxth	r2, r3
 8018192:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	b29b      	uxth	r3, r3
 801819a:	b21b      	sxth	r3, r3
 801819c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 80181a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80181a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80181a8:	4413      	add	r3, r2
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80181b0:	4413      	add	r3, r2
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	b21b      	sxth	r3, r3
 80181b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 80181ba:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80181be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80181c2:	4413      	add	r3, r2
 80181c4:	b29a      	uxth	r2, r3
 80181c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80181ca:	4413      	add	r3, r2
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	b21b      	sxth	r3, r3
 80181d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 80181d4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80181d8:	f107 0214 	add.w	r2, r7, #20
 80181dc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80181e0:	68b9      	ldr	r1, [r7, #8]
 80181e2:	f7f7 ffa6 	bl	8010132 <lv_draw_rect>

            cir_x = ((r - thick_half) * lv_trigo_sin(ext->angle_end) >> LV_TRIGO_SHIFT);
 80181e6:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80181ea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80181ee:	1ad4      	subs	r4, r2, r3
 80181f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fe fe10 	bl	8016e1c <lv_trigo_sin>
 80181fc:	4603      	mov	r3, r0
 80181fe:	fb03 f304 	mul.w	r3, r3, r4
 8018202:	13db      	asrs	r3, r3, #15
 8018204:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            cir_y = ((r - thick_half) * lv_trigo_sin(ext->angle_end + 90) >> LV_TRIGO_SHIFT);
 8018208:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801820c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8018210:	1ad4      	subs	r4, r2, r3
 8018212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018218:	b29b      	uxth	r3, r3
 801821a:	335a      	adds	r3, #90	; 0x5a
 801821c:	b29b      	uxth	r3, r3
 801821e:	b21b      	sxth	r3, r3
 8018220:	4618      	mov	r0, r3
 8018222:	f7fe fdfb 	bl	8016e1c <lv_trigo_sin>
 8018226:	4603      	mov	r3, r0
 8018228:	fb03 f304 	mul.w	r3, r3, r4
 801822c:	13db      	asrs	r3, r3, #15
 801822e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            cir_area.x1 = cir_x + x - thick_half;
 8018232:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8018236:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801823a:	4413      	add	r3, r2
 801823c:	b29a      	uxth	r2, r3
 801823e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	b29b      	uxth	r3, r3
 8018246:	b21b      	sxth	r3, r3
 8018248:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 801824c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8018250:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8018254:	4413      	add	r3, r2
 8018256:	b29a      	uxth	r2, r3
 8018258:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801825c:	1ad3      	subs	r3, r2, r3
 801825e:	b29b      	uxth	r3, r3
 8018260:	b21b      	sxth	r3, r3
 8018262:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 8018266:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801826a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801826e:	4413      	add	r3, r2
 8018270:	b29a      	uxth	r2, r3
 8018272:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018276:	4413      	add	r3, r2
 8018278:	b29b      	uxth	r3, r3
 801827a:	b21b      	sxth	r3, r3
 801827c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 8018280:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8018284:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8018288:	4413      	add	r3, r2
 801828a:	b29a      	uxth	r2, r3
 801828c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018290:	4413      	add	r3, r2
 8018292:	b29b      	uxth	r3, r3
 8018294:	b21b      	sxth	r3, r3
 8018296:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 801829a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801829e:	f107 0214 	add.w	r2, r7, #20
 80182a2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80182a6:	68b9      	ldr	r1, [r7, #8]
 80182a8:	f7f7 ff43 	bl	8010132 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 80182ac:	2301      	movs	r3, #1
}
 80182ae:	4618      	mov	r0, r3
 80182b0:	3770      	adds	r7, #112	; 0x70
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bdb0      	pop	{r4, r5, r7, pc}
 80182b6:	bf00      	nop
 80182b8:	2001ba40 	.word	0x2001ba40

080182bc <lv_arc_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_arc_signal(lv_obj_t * arc, lv_signal_t sign, void * param)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b086      	sub	sp, #24
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	460b      	mov	r3, r1
 80182c6:	607a      	str	r2, [r7, #4]
 80182c8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(arc, sign, param);
 80182ca:	4b18      	ldr	r3, [pc, #96]	; (801832c <lv_arc_signal+0x70>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	7af9      	ldrb	r1, [r7, #11]
 80182d0:	687a      	ldr	r2, [r7, #4]
 80182d2:	68f8      	ldr	r0, [r7, #12]
 80182d4:	4798      	blx	r3
 80182d6:	4603      	mov	r3, r0
 80182d8:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 80182da:	7dbb      	ldrb	r3, [r7, #22]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d001      	beq.n	80182e4 <lv_arc_signal+0x28>
 80182e0:	7dbb      	ldrb	r3, [r7, #22]
 80182e2:	e01e      	b.n	8018322 <lv_arc_signal+0x66>

    if(sign == LV_SIGNAL_CLEANUP) {
 80182e4:	7afb      	ldrb	r3, [r7, #11]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d01a      	beq.n	8018320 <lv_arc_signal+0x64>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80182ea:	7afb      	ldrb	r3, [r7, #11]
 80182ec:	2b06      	cmp	r3, #6
 80182ee:	d117      	bne.n	8018320 <lv_arc_signal+0x64>
        lv_obj_type_t * buf = param;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80182f4:	2300      	movs	r3, #0
 80182f6:	75fb      	strb	r3, [r7, #23]
 80182f8:	e008      	b.n	801830c <lv_arc_signal+0x50>
            if(buf->type[i] == NULL) break;
 80182fa:	7dfa      	ldrb	r2, [r7, #23]
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d006      	beq.n	8018314 <lv_arc_signal+0x58>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018306:	7dfb      	ldrb	r3, [r7, #23]
 8018308:	3301      	adds	r3, #1
 801830a:	75fb      	strb	r3, [r7, #23]
 801830c:	7dfb      	ldrb	r3, [r7, #23]
 801830e:	2b06      	cmp	r3, #6
 8018310:	d9f3      	bls.n	80182fa <lv_arc_signal+0x3e>
 8018312:	e000      	b.n	8018316 <lv_arc_signal+0x5a>
            if(buf->type[i] == NULL) break;
 8018314:	bf00      	nop
        }
        buf->type[i] = "lv_arc";
 8018316:	7dfa      	ldrb	r2, [r7, #23]
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	4905      	ldr	r1, [pc, #20]	; (8018330 <lv_arc_signal+0x74>)
 801831c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8018320:	7dbb      	ldrb	r3, [r7, #22]
}
 8018322:	4618      	mov	r0, r3
 8018324:	3718      	adds	r7, #24
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	200177a4 	.word	0x200177a4
 8018330:	0802d470 	.word	0x0802d470

08018334 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801833e:	2208      	movs	r2, #8
 8018340:	6839      	ldr	r1, [r7, #0]
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	f012 fe64 	bl	802b010 <memcpy>
}
 8018348:	bf00      	nop
 801834a:	3708      	adds	r7, #8
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}

08018350 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8018350:	b480      	push	{r7}
 8018352:	b083      	sub	sp, #12
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801835e:	b29a      	uxth	r2, r3
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018366:	b29b      	uxth	r3, r3
 8018368:	1ad3      	subs	r3, r2, r3
 801836a:	b29b      	uxth	r3, r3
 801836c:	3301      	adds	r3, #1
 801836e:	b29b      	uxth	r3, r3
 8018370:	b21b      	sxth	r3, r3
}
 8018372:	4618      	mov	r0, r3
 8018374:	370c      	adds	r7, #12
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr

0801837e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801837e:	b480      	push	{r7}
 8018380:	b083      	sub	sp, #12
 8018382:	af00      	add	r7, sp, #0
 8018384:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801838c:	b29a      	uxth	r2, r3
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018394:	b29b      	uxth	r3, r3
 8018396:	1ad3      	subs	r3, r2, r3
 8018398:	b29b      	uxth	r3, r3
 801839a:	3301      	adds	r3, #1
 801839c:	b29b      	uxth	r3, r3
 801839e:	b21b      	sxth	r3, r3
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	370c      	adds	r7, #12
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <lv_bar_create>:
 * @param par pointer to an object, it will be the parent of the new bar
 * @param copy pointer to a bar object, if not NULL then the new object will be copied from it
 * @return pointer to the created bar
 */
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b086      	sub	sp, #24
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("lv_bar create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 80183b6:	6839      	ldr	r1, [r7, #0]
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f7f0 fc9d 	bl	8008cf8 <lv_obj_create>
 80183be:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_bar);
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d100      	bne.n	80183c8 <lv_bar_create+0x1c>
 80183c6:	e7fe      	b.n	80183c6 <lv_bar_create+0x1a>
    if(new_bar == NULL) return NULL;
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <lv_bar_create+0x26>
 80183ce:	2300      	movs	r3, #0
 80183d0:	e0a2      	b.n	8018518 <lv_bar_create+0x16c>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 80183d2:	4b53      	ldr	r3, [pc, #332]	; (8018520 <lv_bar_create+0x174>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d105      	bne.n	80183e6 <lv_bar_create+0x3a>
 80183da:	6978      	ldr	r0, [r7, #20]
 80183dc:	f7f2 f9dd 	bl	800a79a <lv_obj_get_signal_cb>
 80183e0:	4602      	mov	r2, r0
 80183e2:	4b4f      	ldr	r3, [pc, #316]	; (8018520 <lv_bar_create+0x174>)
 80183e4:	601a      	str	r2, [r3, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 80183e6:	4b4f      	ldr	r3, [pc, #316]	; (8018524 <lv_bar_create+0x178>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d105      	bne.n	80183fa <lv_bar_create+0x4e>
 80183ee:	6978      	ldr	r0, [r7, #20]
 80183f0:	f7f2 f9df 	bl	800a7b2 <lv_obj_get_design_cb>
 80183f4:	4602      	mov	r2, r0
 80183f6:	4b4b      	ldr	r3, [pc, #300]	; (8018524 <lv_bar_create+0x178>)
 80183f8:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 80183fa:	2114      	movs	r1, #20
 80183fc:	6978      	ldr	r0, [r7, #20]
 80183fe:	f7f2 f817 	bl	800a430 <lv_obj_allocate_ext_attr>
 8018402:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d100      	bne.n	801840c <lv_bar_create+0x60>
 801840a:	e7fe      	b.n	801840a <lv_bar_create+0x5e>
    if(ext == NULL) return NULL;
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d101      	bne.n	8018416 <lv_bar_create+0x6a>
 8018412:	2300      	movs	r3, #0
 8018414:	e080      	b.n	8018518 <lv_bar_create+0x16c>

    ext->min_value = 0;
 8018416:	693b      	ldr	r3, [r7, #16]
 8018418:	2200      	movs	r2, #0
 801841a:	805a      	strh	r2, [r3, #2]
    ext->max_value = 100;
 801841c:	693b      	ldr	r3, [r7, #16]
 801841e:	2264      	movs	r2, #100	; 0x64
 8018420:	809a      	strh	r2, [r3, #4]
    ext->cur_value = 0;
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	2200      	movs	r2, #0
 8018426:	801a      	strh	r2, [r3, #0]
#if LV_USE_ANIMATION
    ext->anim_time  = 200;
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	22c8      	movs	r2, #200	; 0xc8
 801842c:	819a      	strh	r2, [r3, #12]
    ext->anim_start = 0;
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	2200      	movs	r2, #0
 8018432:	80da      	strh	r2, [r3, #6]
    ext->anim_end   = 0;
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	2200      	movs	r2, #0
 8018438:	811a      	strh	r2, [r3, #8]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018440:	815a      	strh	r2, [r3, #10]
#endif
    ext->sym         = 0;
 8018442:	693a      	ldr	r2, [r7, #16]
 8018444:	7b93      	ldrb	r3, [r2, #14]
 8018446:	f36f 0300 	bfc	r3, #0, #1
 801844a:	7393      	strb	r3, [r2, #14]
    ext->style_indic = &lv_style_pretty_color;
 801844c:	693b      	ldr	r3, [r7, #16]
 801844e:	4a36      	ldr	r2, [pc, #216]	; (8018528 <lv_bar_create+0x17c>)
 8018450:	611a      	str	r2, [r3, #16]

    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8018452:	4936      	ldr	r1, [pc, #216]	; (801852c <lv_bar_create+0x180>)
 8018454:	6978      	ldr	r0, [r7, #20]
 8018456:	f7f1 ffcf 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 801845a:	4935      	ldr	r1, [pc, #212]	; (8018530 <lv_bar_create+0x184>)
 801845c:	6978      	ldr	r0, [r7, #20]
 801845e:	f7f1 ffd9 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new  bar object*/
    if(copy == NULL) {
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d12a      	bne.n	80184be <lv_bar_create+0x112>
        lv_obj_set_click(new_bar, false);
 8018468:	2100      	movs	r1, #0
 801846a:	6978      	ldr	r0, [r7, #20]
 801846c:	f7f1 fea3 	bl	800a1b6 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8018470:	2221      	movs	r2, #33	; 0x21
 8018472:	21c8      	movs	r1, #200	; 0xc8
 8018474:	6978      	ldr	r0, [r7, #20]
 8018476:	f7f1 f930 	bl	80096da <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018480:	2200      	movs	r2, #0
 8018482:	4619      	mov	r1, r3
 8018484:	6978      	ldr	r0, [r7, #20]
 8018486:	f000 f857 	bl	8018538 <lv_bar_set_value>

        lv_theme_t * th = lv_theme_get_current();
 801848a:	f00a f821 	bl	80224d0 <lv_theme_get_current>
 801848e:	60b8      	str	r0, [r7, #8]
        if(th) {
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d00e      	beq.n	80184b4 <lv_bar_create+0x108>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801849a:	461a      	mov	r2, r3
 801849c:	2100      	movs	r1, #0
 801849e:	6978      	ldr	r0, [r7, #20]
 80184a0:	f000 f91a 	bl	80186d8 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80184a8:	461a      	mov	r2, r3
 80184aa:	2101      	movs	r1, #1
 80184ac:	6978      	ldr	r0, [r7, #20]
 80184ae:	f000 f913 	bl	80186d8 <lv_bar_set_style>
 80184b2:	e030      	b.n	8018516 <lv_bar_create+0x16a>
        } else {
            lv_obj_set_style(new_bar, &lv_style_pretty);
 80184b4:	491f      	ldr	r1, [pc, #124]	; (8018534 <lv_bar_create+0x188>)
 80184b6:	6978      	ldr	r0, [r7, #20]
 80184b8:	f7f1 fe57 	bl	800a16a <lv_obj_set_style>
 80184bc:	e02b      	b.n	8018516 <lv_bar_create+0x16a>
        }
    } else {
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 80184be:	6838      	ldr	r0, [r7, #0]
 80184c0:	f7f2 f983 	bl	800a7ca <lv_obj_get_ext_attr>
 80184c4:	60f8      	str	r0, [r7, #12]
        ext->min_value          = ext_copy->min_value;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	805a      	strh	r2, [r3, #2]
        ext->max_value          = ext_copy->max_value;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	809a      	strh	r2, [r3, #4]
        ext->cur_value          = ext_copy->cur_value;
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	801a      	strh	r2, [r3, #0]
        ext->style_indic        = ext_copy->style_indic;
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	691a      	ldr	r2, [r3, #16]
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	611a      	str	r2, [r3, #16]
        ext->sym                = ext_copy->sym;
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	7b9b      	ldrb	r3, [r3, #14]
 80184f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80184f4:	b2d9      	uxtb	r1, r3
 80184f6:	693a      	ldr	r2, [r7, #16]
 80184f8:	7b93      	ldrb	r3, [r2, #14]
 80184fa:	f361 0300 	bfi	r3, r1, #0, #1
 80184fe:	7393      	strb	r3, [r2, #14]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_bar);
 8018500:	6978      	ldr	r0, [r7, #20]
 8018502:	f7f1 fe44 	bl	800a18e <lv_obj_refresh_style>

        lv_bar_set_value(new_bar, ext->cur_value, false);
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801850c:	2200      	movs	r2, #0
 801850e:	4619      	mov	r1, r3
 8018510:	6978      	ldr	r0, [r7, #20]
 8018512:	f000 f811 	bl	8018538 <lv_bar_set_value>
    }

    LV_LOG_INFO("bar created");

    return new_bar;
 8018516:	697b      	ldr	r3, [r7, #20]
}
 8018518:	4618      	mov	r0, r3
 801851a:	3718      	adds	r7, #24
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	200177b0 	.word	0x200177b0
 8018524:	200177ac 	.word	0x200177ac
 8018528:	2001b860 	.word	0x2001b860
 801852c:	08018c61 	.word	0x08018c61
 8018530:	080187d1 	.word	0x080187d1
 8018534:	2001b950 	.word	0x2001b950

08018538 <lv_bar_set_value>:
 * @param bar pointer to a bar object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediatelly
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b08e      	sub	sp, #56	; 0x38
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	460b      	mov	r3, r1
 8018542:	807b      	strh	r3, [r7, #2]
 8018544:	4613      	mov	r3, r2
 8018546:	707b      	strb	r3, [r7, #1]
#if LV_USE_ANIMATION == 0
    anim = false;
#endif
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7f2 f93e 	bl	800a7ca <lv_obj_get_ext_attr>
 801854e:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->cur_value == value) return;
 8018550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018556:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801855a:	429a      	cmp	r2, r3
 801855c:	d063      	beq.n	8018626 <lv_bar_set_value+0xee>

    int16_t new_value;
    new_value = value > ext->max_value ? ext->max_value : value;
 801855e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018564:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018568:	4293      	cmp	r3, r2
 801856a:	bfa8      	it	ge
 801856c:	4613      	movge	r3, r2
 801856e:	867b      	strh	r3, [r7, #50]	; 0x32
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8018570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018576:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801857a:	4293      	cmp	r3, r2
 801857c:	bfb8      	it	lt
 801857e:	4613      	movlt	r3, r2
 8018580:	867b      	strh	r3, [r7, #50]	; 0x32

    if(ext->cur_value == new_value) return;
 8018582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018588:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801858c:	429a      	cmp	r2, r3
 801858e:	d04c      	beq.n	801862a <lv_bar_set_value+0xf2>

    if(anim == LV_ANIM_OFF) {
 8018590:	787b      	ldrb	r3, [r7, #1]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d106      	bne.n	80185a4 <lv_bar_set_value+0x6c>
        ext->cur_value = new_value;
 8018596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018598:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801859a:	801a      	strh	r2, [r3, #0]
        lv_obj_invalidate(bar);
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7f0 fee8 	bl	8009372 <lv_obj_invalidate>
 80185a2:	e043      	b.n	801862c <lv_bar_set_value+0xf4>
    } else {
#if LV_USE_ANIMATION
        /*No animation in progress -> simply set the values*/
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 80185a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80185aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185ae:	d108      	bne.n	80185c2 <lv_bar_set_value+0x8a>
            ext->anim_start = ext->cur_value;
 80185b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80185b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185b8:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 80185ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80185be:	811a      	strh	r2, [r3, #8]
 80185c0:	e007      	b.n	80185d2 <lv_bar_set_value+0x9a>
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            ext->anim_start = ext->anim_end;
 80185c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80185c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ca:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 80185cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80185d0:	811a      	strh	r2, [r3, #8]
        }

        lv_anim_t a;
        a.var            = bar;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	60bb      	str	r3, [r7, #8]
        a.start          = LV_BAR_ANIM_STATE_START;
 80185d6:	2300      	movs	r3, #0
 80185d8:	61bb      	str	r3, [r7, #24]
        a.end            = LV_BAR_ANIM_STATE_END;
 80185da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80185de:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 80185e0:	4b14      	ldr	r3, [pc, #80]	; (8018634 <lv_bar_set_value+0xfc>)
 80185e2:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 80185e4:	4b14      	ldr	r3, [pc, #80]	; (8018638 <lv_bar_set_value+0x100>)
 80185e6:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_bar_anim_ready;
 80185e8:	4b14      	ldr	r3, [pc, #80]	; (801863c <lv_bar_set_value+0x104>)
 80185ea:	617b      	str	r3, [r7, #20]
        a.act_time       = 0;
 80185ec:	2300      	movs	r3, #0
 80185ee:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = ext->anim_time;
 80185f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 80185fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80185fe:	f36f 0300 	bfc	r3, #0, #1
 8018602:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 8018606:	2300      	movs	r3, #0
 8018608:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801860a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801860e:	f36f 0341 	bfc	r3, #1, #1
 8018612:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 8018616:	2300      	movs	r3, #0
 8018618:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_anim_create(&a);
 801861a:	f107 0308 	add.w	r3, r7, #8
 801861e:	4618      	mov	r0, r3
 8018620:	f7fd fb9e 	bl	8015d60 <lv_anim_create>
 8018624:	e002      	b.n	801862c <lv_bar_set_value+0xf4>
    if(ext->cur_value == value) return;
 8018626:	bf00      	nop
 8018628:	e000      	b.n	801862c <lv_bar_set_value+0xf4>
    if(ext->cur_value == new_value) return;
 801862a:	bf00      	nop
#endif
    }
}
 801862c:	3738      	adds	r7, #56	; 0x38
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	08018cfd 	.word	0x08018cfd
 8018638:	08015eb1 	.word	0x08015eb1
 801863c:	08018d25 	.word	0x08018d25

08018640 <lv_bar_set_range>:
 * @param bar pointer to the bar object
 * @param min minimum value
 * @param max maximum value
 */
void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	460b      	mov	r3, r1
 801864a:	807b      	strh	r3, [r7, #2]
 801864c:	4613      	mov	r3, r2
 801864e:	803b      	strh	r3, [r7, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7f2 f8ba 	bl	800a7ca <lv_obj_get_ext_attr>
 8018656:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801865e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018662:	429a      	cmp	r2, r3
 8018664:	d106      	bne.n	8018674 <lv_bar_set_range+0x34>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801866c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018670:	429a      	cmp	r2, r3
 8018672:	d02d      	beq.n	80186d0 <lv_bar_set_range+0x90>

    ext->max_value = max;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	883a      	ldrh	r2, [r7, #0]
 8018678:	809a      	strh	r2, [r3, #4]
    ext->min_value = min;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	887a      	ldrh	r2, [r7, #2]
 801867e:	805a      	strh	r2, [r3, #2]
    if(ext->cur_value > max) {
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018686:	f9b7 2000 	ldrsh.w	r2, [r7]
 801868a:	429a      	cmp	r2, r3
 801868c:	da0a      	bge.n	80186a4 <lv_bar_set_range+0x64>
        ext->cur_value = max;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	883a      	ldrh	r2, [r7, #0]
 8018692:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	f9b3 3000 	ldrsh.w	r3, [r3]
 801869a:	2200      	movs	r2, #0
 801869c:	4619      	mov	r1, r3
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f7ff ff4a 	bl	8018538 <lv_bar_set_value>
    }
    if(ext->cur_value < min) {
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	dd0a      	ble.n	80186c8 <lv_bar_set_range+0x88>
        ext->cur_value = min;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	887a      	ldrh	r2, [r7, #2]
 80186b6:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186be:	2200      	movs	r2, #0
 80186c0:	4619      	mov	r1, r3
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f7ff ff38 	bl	8018538 <lv_bar_set_value>
    }
    lv_obj_invalidate(bar);
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f7f0 fe52 	bl	8009372 <lv_obj_invalidate>
 80186ce:	e000      	b.n	80186d2 <lv_bar_set_range+0x92>
    if(ext->min_value == min && ext->max_value == max) return;
 80186d0:	bf00      	nop
}
 80186d2:	3710      	adds	r7, #16
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <lv_bar_set_style>:
 * @param bar pointer to a bar object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_bar_set_style(lv_obj_t * bar, lv_bar_style_t type, const lv_style_t * style)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b086      	sub	sp, #24
 80186dc:	af00      	add	r7, sp, #0
 80186de:	60f8      	str	r0, [r7, #12]
 80186e0:	460b      	mov	r3, r1
 80186e2:	607a      	str	r2, [r7, #4]
 80186e4:	72fb      	strb	r3, [r7, #11]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80186e6:	68f8      	ldr	r0, [r7, #12]
 80186e8:	f7f2 f86f 	bl	800a7ca <lv_obj_get_ext_attr>
 80186ec:	6178      	str	r0, [r7, #20]

    switch(type) {
 80186ee:	7afb      	ldrb	r3, [r7, #11]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d002      	beq.n	80186fa <lv_bar_set_style+0x22>
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d005      	beq.n	8018704 <lv_bar_set_style+0x2c>
        case LV_BAR_STYLE_INDIC:
            ext->style_indic = style;
            lv_obj_refresh_ext_draw_pad(bar);
            break;
    }
}
 80186f8:	e00b      	b.n	8018712 <lv_bar_set_style+0x3a>
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 80186fa:	6879      	ldr	r1, [r7, #4]
 80186fc:	68f8      	ldr	r0, [r7, #12]
 80186fe:	f7f1 fd34 	bl	800a16a <lv_obj_set_style>
 8018702:	e006      	b.n	8018712 <lv_bar_set_style+0x3a>
            ext->style_indic = style;
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	611a      	str	r2, [r3, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 801870a:	68f8      	ldr	r0, [r7, #12]
 801870c:	f7f1 fea6 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
            break;
 8018710:	bf00      	nop
}
 8018712:	bf00      	nop
 8018714:	3718      	adds	r7, #24
 8018716:	46bd      	mov	sp, r7
 8018718:	bd80      	pop	{r7, pc}

0801871a <lv_bar_get_value>:
 * Get the value of a bar
 * @param bar pointer to a bar object
 * @return the value of the bar
 */
int16_t lv_bar_get_value(const lv_obj_t * bar)
{
 801871a:	b580      	push	{r7, lr}
 801871c:	b084      	sub	sp, #16
 801871e:	af00      	add	r7, sp, #0
 8018720:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7f2 f851 	bl	800a7ca <lv_obj_get_ext_attr>
 8018728:	60f8      	str	r0, [r7, #12]
    /*If animated tell that it's already at the end value*/
#if LV_USE_ANIMATION
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8018730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018734:	d003      	beq.n	801873e <lv_bar_get_value+0x24>
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801873c:	e002      	b.n	8018744 <lv_bar_get_value+0x2a>
#endif
    /*No animation, simple return the current value*/
    return ext->cur_value;
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8018744:	4618      	mov	r0, r3
 8018746:	3710      	adds	r7, #16
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}

0801874c <lv_bar_get_min_value>:
 * Get the minimum value of a bar
 * @param bar pointer to a bar object
 * @return the minimum value of the bar
 */
int16_t lv_bar_get_min_value(const lv_obj_t * bar)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f7f2 f838 	bl	800a7ca <lv_obj_get_ext_attr>
 801875a:	60f8      	str	r0, [r7, #12]
    return ext->min_value;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8018762:	4618      	mov	r0, r3
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <lv_bar_get_max_value>:
 * Get the maximum value of a bar
 * @param bar pointer to a bar object
 * @return the maximum value of the bar
 */
int16_t lv_bar_get_max_value(const lv_obj_t * bar)
{
 801876a:	b580      	push	{r7, lr}
 801876c:	b084      	sub	sp, #16
 801876e:	af00      	add	r7, sp, #0
 8018770:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f7f2 f829 	bl	800a7ca <lv_obj_get_ext_attr>
 8018778:	60f8      	str	r0, [r7, #12]
    return ext->max_value;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8018780:	4618      	mov	r0, r3
 8018782:	3710      	adds	r7, #16
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <lv_bar_get_style>:
 * @param bar pointer to a bar object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_bar_get_style(const lv_obj_t * bar, lv_bar_style_t type)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
 8018790:	460b      	mov	r3, r1
 8018792:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8018794:	2300      	movs	r3, #0
 8018796:	60fb      	str	r3, [r7, #12]
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f7f2 f816 	bl	800a7ca <lv_obj_get_ext_attr>
 801879e:	60b8      	str	r0, [r7, #8]

    switch(type) {
 80187a0:	78fb      	ldrb	r3, [r7, #3]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d002      	beq.n	80187ac <lv_bar_get_style+0x24>
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d005      	beq.n	80187b6 <lv_bar_get_style+0x2e>
 80187aa:	e008      	b.n	80187be <lv_bar_get_style+0x36>
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7f1 ff51 	bl	800a654 <lv_obj_get_style>
 80187b2:	60f8      	str	r0, [r7, #12]
 80187b4:	e006      	b.n	80187c4 <lv_bar_get_style+0x3c>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	691b      	ldr	r3, [r3, #16]
 80187ba:	60fb      	str	r3, [r7, #12]
 80187bc:	e002      	b.n	80187c4 <lv_bar_get_style+0x3c>
        default: style = NULL; break;
 80187be:	2300      	movs	r3, #0
 80187c0:	60fb      	str	r3, [r7, #12]
 80187c2:	bf00      	nop
    }

    return style;
 80187c4:	68fb      	ldr	r3, [r7, #12]
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
	...

080187d0 <lv_bar_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b0a0      	sub	sp, #128	; 0x80
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	4613      	mov	r3, r2
 80187dc:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80187de:	79fb      	ldrb	r3, [r7, #7]
 80187e0:	2b02      	cmp	r3, #2
 80187e2:	d107      	bne.n	80187f4 <lv_bar_design+0x24>
        /*Return false if the object is not covers the mask area*/
        return ancestor_design_f(bar, mask, mode);
 80187e4:	4bab      	ldr	r3, [pc, #684]	; (8018a94 <lv_bar_design+0x2c4>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	79fa      	ldrb	r2, [r7, #7]
 80187ea:	68b9      	ldr	r1, [r7, #8]
 80187ec:	68f8      	ldr	r0, [r7, #12]
 80187ee:	4798      	blx	r3
 80187f0:	4603      	mov	r3, r0
 80187f2:	e231      	b.n	8018c58 <lv_bar_design+0x488>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80187f4:	79fb      	ldrb	r3, [r7, #7]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	f040 8205 	bne.w	8018c06 <lv_bar_design+0x436>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 80187fc:	68f8      	ldr	r0, [r7, #12]
 80187fe:	f7f1 ff96 	bl	800a72e <lv_obj_get_opa_scale>
 8018802:	4603      	mov	r3, r0
 8018804:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        ancestor_design_f(bar, mask, mode);
#else
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(bar)) {
 8018808:	68f8      	ldr	r0, [r7, #12]
 801880a:	f7f1 fff6 	bl	800a7fa <lv_obj_is_focused>
 801880e:	4603      	mov	r3, r0
 8018810:	2b00      	cmp	r3, #0
 8018812:	d017      	beq.n	8018844 <lv_bar_design+0x74>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8018814:	2100      	movs	r1, #0
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	f7ff ffb6 	bl	8018788 <lv_bar_get_style>
 801881c:	6738      	str	r0, [r7, #112]	; 0x70
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801881e:	f107 0314 	add.w	r3, r7, #20
 8018822:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8018824:	4618      	mov	r0, r3
 8018826:	f7f3 fa3f 	bl	800bca8 <lv_style_copy>
            style_tmp.body.border.width = 0;
 801882a:	2300      	movs	r3, #0
 801882c:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	f103 0010 	add.w	r0, r3, #16
 8018834:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8018838:	f107 0214 	add.w	r2, r7, #20
 801883c:	68b9      	ldr	r1, [r7, #8]
 801883e:	f7f7 fc78 	bl	8010132 <lv_draw_rect>
 8018842:	e005      	b.n	8018850 <lv_bar_design+0x80>
        } else {
            ancestor_design_f(bar, mask, mode);
 8018844:	4b93      	ldr	r3, [pc, #588]	; (8018a94 <lv_bar_design+0x2c4>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	79fa      	ldrb	r2, [r7, #7]
 801884a:	68b9      	ldr	r1, [r7, #8]
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	4798      	blx	r3
        }
#endif
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018850:	68f8      	ldr	r0, [r7, #12]
 8018852:	f7f1 ffba 	bl	800a7ca <lv_obj_get_ext_attr>
 8018856:	66f8      	str	r0, [r7, #108]	; 0x6c

        if(ext->cur_value != ext->min_value || ext->sym
 8018858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801885a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018864:	429a      	cmp	r2, r3
 8018866:	d10d      	bne.n	8018884 <lv_bar_design+0xb4>
 8018868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801886a:	7b9b      	ldrb	r3, [r3, #14]
 801886c:	f003 0301 	and.w	r3, r3, #1
 8018870:	b2db      	uxtb	r3, r3
 8018872:	2b00      	cmp	r3, #0
 8018874:	d106      	bne.n	8018884 <lv_bar_design+0xb4>
#if LV_USE_ANIMATION
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8018876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018878:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018880:	f000 81e9 	beq.w	8018c56 <lv_bar_design+0x486>
#endif
        ) {
            const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8018884:	2101      	movs	r1, #1
 8018886:	68f8      	ldr	r0, [r7, #12]
 8018888:	f7ff ff7e 	bl	8018788 <lv_bar_get_style>
 801888c:	66b8      	str	r0, [r7, #104]	; 0x68
            lv_area_t indic_area;
            lv_area_copy(&indic_area, &bar->coords);
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	f103 0210 	add.w	r2, r3, #16
 8018894:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018898:	4611      	mov	r1, r2
 801889a:	4618      	mov	r0, r3
 801889c:	f7ff fd4a 	bl	8018334 <lv_area_copy>
            indic_area.x1 += style_indic->body.padding.left;
 80188a0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188a8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	4413      	add	r3, r2
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	b21b      	sxth	r3, r3
 80188b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            indic_area.x2 -= style_indic->body.padding.right;
 80188b8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80188bc:	b29a      	uxth	r2, r3
 80188be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188c0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80188c4:	b29b      	uxth	r3, r3
 80188c6:	1ad3      	subs	r3, r2, r3
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	b21b      	sxth	r3, r3
 80188cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            indic_area.y1 += style_indic->body.padding.top;
 80188d0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80188d4:	b29a      	uxth	r2, r3
 80188d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188d8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80188dc:	b29b      	uxth	r3, r3
 80188de:	4413      	add	r3, r2
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	b21b      	sxth	r3, r3
 80188e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            indic_area.y2 -= style_indic->body.padding.bottom;
 80188e8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80188ec:	b29a      	uxth	r2, r3
 80188ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188f0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80188f4:	b29b      	uxth	r3, r3
 80188f6:	1ad3      	subs	r3, r2, r3
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	b21b      	sxth	r3, r3
 80188fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_coord_t w = lv_area_get_width(&indic_area);
 8018900:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018904:	4618      	mov	r0, r3
 8018906:	f7ff fd23 	bl	8018350 <lv_area_get_width>
 801890a:	4603      	mov	r3, r0
 801890c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            lv_coord_t h = lv_area_get_height(&indic_area);
 8018910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018914:	4618      	mov	r0, r3
 8018916:	f7ff fd32 	bl	801837e <lv_area_get_height>
 801891a:	4603      	mov	r3, r0
 801891c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            if(w >= h) {
 8018920:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8018924:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018928:	429a      	cmp	r2, r3
 801892a:	f2c0 80b5 	blt.w	8018a98 <lv_bar_design+0x2c8>
                /*Horizontal*/
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 801892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018930:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8018934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018938:	d043      	beq.n	80189c2 <lv_bar_design+0x1f2>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801893a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801893e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018940:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8018944:	4611      	mov	r1, r2
 8018946:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018948:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801894c:	1a8a      	subs	r2, r1, r2
 801894e:	fb02 f203 	mul.w	r2, r2, r3
 8018952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018958:	4619      	mov	r1, r3
 801895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801895c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018960:	1acb      	subs	r3, r1, r3
 8018962:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8018966:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801896a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801896e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018970:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018974:	4611      	mov	r1, r2
 8018976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018978:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801897c:	1a8a      	subs	r2, r1, r2
 801897e:	fb02 f203 	mul.w	r2, r2, r3
 8018982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018988:	4619      	mov	r1, r3
 801898a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801898c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018990:	1acb      	subs	r3, r1, r3
 8018992:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8018996:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.x2 =
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 801899a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801899e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80189a2:	1ad3      	subs	r3, r2, r3
 80189a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80189a6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80189aa:	fb02 f303 	mul.w	r3, r2, r3
 80189ae:	121b      	asrs	r3, r3, #8
 80189b0:	b29a      	uxth	r2, r3
 80189b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80189b6:	4413      	add	r3, r2
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	b21b      	sxth	r3, r3
                    indic_area.x2 =
 80189bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80189c0:	e018      	b.n	80189f4 <lv_bar_design+0x224>
                } else
#endif
                {
                    indic_area.x2 =
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80189c2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80189c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80189c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80189cc:	4611      	mov	r1, r2
 80189ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80189d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80189d4:	1a8a      	subs	r2, r1, r2
 80189d6:	fb02 f203 	mul.w	r2, r2, r3
 80189da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80189e0:	4619      	mov	r1, r3
 80189e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189e8:	1acb      	subs	r3, r1, r3
 80189ea:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.x2 =
 80189ee:	b21b      	sxth	r3, r3
 80189f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                }

                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80189f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80189f8:	b29a      	uxth	r2, r3
 80189fa:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	4413      	add	r3, r2
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	3b01      	subs	r3, #1
 8018a06:	b29b      	uxth	r3, r3
 8018a08:	b21b      	sxth	r3, r3
 8018a0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8018a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a10:	7b9b      	ldrb	r3, [r3, #14]
 8018a12:	f003 0301 	and.w	r3, r3, #1
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	f000 80eb 	beq.w	8018bf4 <lv_bar_design+0x424>
 8018a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	f280 80e5 	bge.w	8018bf4 <lv_bar_design+0x424>
 8018a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	f340 80df 	ble.w	8018bf4 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 8018a36:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8018a3a:	b29a      	uxth	r2, r3
 8018a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a42:	425b      	negs	r3, r3
 8018a44:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 8018a48:	fb01 f103 	mul.w	r1, r1, r3
 8018a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a52:	4618      	mov	r0, r3
 8018a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a5a:	1ac3      	subs	r3, r0, r3
 8018a5c:	fb91 f3f3 	sdiv	r3, r1, r3
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	4413      	add	r3, r2
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    if(indic_area.x2 > zero)
 8018a6a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8018a6e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8018a72:	429a      	cmp	r2, r3
 8018a74:	da04      	bge.n	8018a80 <lv_bar_design+0x2b0>
                        indic_area.x1 = zero;
 8018a76:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8018a7a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8018a7e:	e0b9      	b.n	8018bf4 <lv_bar_design+0x424>
                    else {
                        indic_area.x1 = indic_area.x2;
 8018a80:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8018a84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                        indic_area.x2 = zero;
 8018a88:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8018a8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8018a90:	e0b0      	b.n	8018bf4 <lv_bar_design+0x424>
 8018a92:	bf00      	nop
 8018a94:	200177ac 	.word	0x200177ac
                    }
                }
            } else {
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8018a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8018a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018aa2:	d043      	beq.n	8018b2c <lv_bar_design+0x35c>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_y =
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8018aa4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018aaa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8018aae:	4611      	mov	r1, r2
 8018ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018ab2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018ab6:	1a8a      	subs	r2, r1, r2
 8018ab8:	fb02 f203 	mul.w	r2, r2, r3
 8018abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018abe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018aca:	1acb      	subs	r3, r1, r3
 8018acc:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_y =
 8018ad0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                    lv_coord_t anim_end_y =
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8018ad4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018ada:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018ade:	4611      	mov	r1, r2
 8018ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018ae2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018ae6:	1a8a      	subs	r2, r1, r2
 8018ae8:	fb02 f203 	mul.w	r2, r2, r3
 8018aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018aee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018af2:	4619      	mov	r1, r3
 8018af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018afa:	1acb      	subs	r3, r1, r3
 8018afc:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_y =
 8018b00:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.y1 =
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8018b04:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8018b08:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8018b0c:	1ad3      	subs	r3, r2, r3
 8018b0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018b10:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8018b14:	fb02 f303 	mul.w	r3, r2, r3
 8018b18:	121b      	asrs	r3, r3, #8
 8018b1a:	b29a      	uxth	r2, r3
 8018b1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8018b20:	4413      	add	r3, r2
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	b21b      	sxth	r3, r3
                    indic_area.y1 =
 8018b26:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8018b2a:	e018      	b.n	8018b5e <lv_bar_design+0x38e>
                } else
#endif
                {
                    indic_area.y1 =
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8018b2c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018b32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018b36:	4611      	mov	r1, r2
 8018b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018b3a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018b3e:	1a8a      	subs	r2, r1, r2
 8018b40:	fb02 f203 	mul.w	r2, r2, r3
 8018b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b52:	1acb      	subs	r3, r1, r3
 8018b54:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.y1 =
 8018b58:	b21b      	sxth	r3, r3
 8018b5a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }

                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8018b5e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8018b68:	b29b      	uxth	r3, r3
 8018b6a:	1ad3      	subs	r3, r2, r3
 8018b6c:	b29b      	uxth	r3, r3
 8018b6e:	3301      	adds	r3, #1
 8018b70:	b29b      	uxth	r3, r3
 8018b72:	b21b      	sxth	r3, r3
 8018b74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8018b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b7a:	7b9b      	ldrb	r3, [r3, #14]
 8018b7c:	f003 0301 	and.w	r3, r3, #1
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d036      	beq.n	8018bf4 <lv_bar_design+0x424>
 8018b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	da31      	bge.n	8018bf4 <lv_bar_design+0x424>
 8018b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	dd2c      	ble.n	8018bf4 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8018b9a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018ba6:	425b      	negs	r3, r3
 8018ba8:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8018bac:	fb01 f103 	mul.w	r1, r1, r3
 8018bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018bbe:	1ac3      	subs	r3, r0, r3
 8018bc0:	fb91 f3f3 	sdiv	r3, r1, r3
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	1ad3      	subs	r3, r2, r3
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                    if(indic_area.y1 < zero)
 8018bce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8018bd2:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	dd04      	ble.n	8018be4 <lv_bar_design+0x414>
                        indic_area.y2 = zero;
 8018bda:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018bde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018be2:	e007      	b.n	8018bf4 <lv_bar_design+0x424>
                    else {
                        indic_area.y2 = indic_area.y1;
 8018be4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8018be8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                        indic_area.y1 = zero;
 8018bec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018bf0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
            }

            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8018bf4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8018bf8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8018bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018bfe:	68b9      	ldr	r1, [r7, #8]
 8018c00:	f7f7 fa97 	bl	8010132 <lv_draw_rect>
 8018c04:	e027      	b.n	8018c56 <lv_bar_design+0x486>
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8018c06:	79fb      	ldrb	r3, [r7, #7]
 8018c08:	2b01      	cmp	r3, #1
 8018c0a:	d124      	bne.n	8018c56 <lv_bar_design+0x486>
#if LV_USE_GROUP
        /*Draw the border*/
        if(lv_obj_is_focused(bar)) {
 8018c0c:	68f8      	ldr	r0, [r7, #12]
 8018c0e:	f7f1 fdf4 	bl	800a7fa <lv_obj_is_focused>
 8018c12:	4603      	mov	r3, r0
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d01e      	beq.n	8018c56 <lv_bar_design+0x486>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8018c18:	68f8      	ldr	r0, [r7, #12]
 8018c1a:	f7f1 fd88 	bl	800a72e <lv_obj_get_opa_scale>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8018c24:	2100      	movs	r1, #0
 8018c26:	68f8      	ldr	r0, [r7, #12]
 8018c28:	f7ff fdae 	bl	8018788 <lv_bar_get_style>
 8018c2c:	67b8      	str	r0, [r7, #120]	; 0x78
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8018c2e:	f107 0314 	add.w	r3, r7, #20
 8018c32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7f3 f837 	bl	800bca8 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	f103 0010 	add.w	r0, r3, #16
 8018c48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8018c4c:	f107 0214 	add.w	r2, r7, #20
 8018c50:	68b9      	ldr	r1, [r7, #8]
 8018c52:	f7f7 fa6e 	bl	8010132 <lv_draw_rect>
        }
#endif
    }
    return true;
 8018c56:	2301      	movs	r3, #1
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3780      	adds	r7, #128	; 0x80
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b088      	sub	sp, #32
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	460b      	mov	r3, r1
 8018c6a:	607a      	str	r2, [r7, #4]
 8018c6c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 8018c6e:	4b21      	ldr	r3, [pc, #132]	; (8018cf4 <lv_bar_signal+0x94>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	7af9      	ldrb	r1, [r7, #11]
 8018c74:	687a      	ldr	r2, [r7, #4]
 8018c76:	68f8      	ldr	r0, [r7, #12]
 8018c78:	4798      	blx	r3
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 8018c7e:	7fbb      	ldrb	r3, [r7, #30]
 8018c80:	2b01      	cmp	r3, #1
 8018c82:	d001      	beq.n	8018c88 <lv_bar_signal+0x28>
 8018c84:	7fbb      	ldrb	r3, [r7, #30]
 8018c86:	e031      	b.n	8018cec <lv_bar_signal+0x8c>

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8018c88:	7afb      	ldrb	r3, [r7, #11]
 8018c8a:	2b05      	cmp	r3, #5
 8018c8c:	d112      	bne.n	8018cb4 <lv_bar_signal+0x54>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8018c8e:	2101      	movs	r1, #1
 8018c90:	68f8      	ldr	r0, [r7, #12]
 8018c92:	f7ff fd79 	bl	8018788 <lv_bar_get_style>
 8018c96:	6178      	str	r0, [r7, #20]
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	dd20      	ble.n	8018cea <lv_bar_signal+0x8a>
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	869a      	strh	r2, [r3, #52]	; 0x34
 8018cb2:	e01a      	b.n	8018cea <lv_bar_signal+0x8a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018cb4:	7afb      	ldrb	r3, [r7, #11]
 8018cb6:	2b06      	cmp	r3, #6
 8018cb8:	d117      	bne.n	8018cea <lv_bar_signal+0x8a>
        lv_obj_type_t * buf = param;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	77fb      	strb	r3, [r7, #31]
 8018cc2:	e008      	b.n	8018cd6 <lv_bar_signal+0x76>
            if(buf->type[i] == NULL) break;
 8018cc4:	7ffa      	ldrb	r2, [r7, #31]
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d006      	beq.n	8018cde <lv_bar_signal+0x7e>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018cd0:	7ffb      	ldrb	r3, [r7, #31]
 8018cd2:	3301      	adds	r3, #1
 8018cd4:	77fb      	strb	r3, [r7, #31]
 8018cd6:	7ffb      	ldrb	r3, [r7, #31]
 8018cd8:	2b06      	cmp	r3, #6
 8018cda:	d9f3      	bls.n	8018cc4 <lv_bar_signal+0x64>
 8018cdc:	e000      	b.n	8018ce0 <lv_bar_signal+0x80>
            if(buf->type[i] == NULL) break;
 8018cde:	bf00      	nop
        }
        buf->type[i] = "lv_bar";
 8018ce0:	7ffa      	ldrb	r2, [r7, #31]
 8018ce2:	69bb      	ldr	r3, [r7, #24]
 8018ce4:	4904      	ldr	r1, [pc, #16]	; (8018cf8 <lv_bar_signal+0x98>)
 8018ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8018cea:	7fbb      	ldrb	r3, [r7, #30]
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	3720      	adds	r7, #32
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}
 8018cf4:	200177b0 	.word	0x200177b0
 8018cf8:	0802d478 	.word	0x0802d478

08018cfc <lv_bar_anim>:

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
 8018d04:	460b      	mov	r3, r1
 8018d06:	807b      	strh	r3, [r7, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f7f1 fd5e 	bl	800a7ca <lv_obj_get_ext_attr>
 8018d0e:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = value;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	887a      	ldrh	r2, [r7, #2]
 8018d14:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(bar);
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f7f0 fb2b 	bl	8009372 <lv_obj_invalidate>
}
 8018d1c:	bf00      	nop
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b084      	sub	sp, #16
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7f1 fd4a 	bl	800a7ca <lv_obj_get_ext_attr>
 8018d36:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d3e:	815a      	strh	r2, [r3, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6818      	ldr	r0, [r3, #0]
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	f7ff fbf3 	bl	8018538 <lv_bar_set_value>
}
 8018d52:	bf00      	nop
 8018d54:	3710      	adds	r7, #16
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <lv_btn_set_layout>:
 * Set the layout on a button
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
 8018d5a:	b580      	push	{r7, lr}
 8018d5c:	b082      	sub	sp, #8
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	6078      	str	r0, [r7, #4]
 8018d62:	460b      	mov	r3, r1
 8018d64:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 8018d66:	78fb      	ldrb	r3, [r7, #3]
 8018d68:	4619      	mov	r1, r3
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f002 fb72 	bl	801b454 <lv_cont_set_layout>
}
 8018d70:	bf00      	nop
 8018d72:	3708      	adds	r7, #8
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <lv_btn_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b086      	sub	sp, #24
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button create started");

    lv_obj_t * new_btn;

    new_btn = lv_cont_create(par, copy);
 8018d82:	6839      	ldr	r1, [r7, #0]
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f002 fabb 	bl	801b300 <lv_cont_create>
 8018d8a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btn);
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d100      	bne.n	8018d94 <lv_btn_create+0x1c>
 8018d92:	e7fe      	b.n	8018d92 <lv_btn_create+0x1a>
    if(new_btn == NULL) return NULL;
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d101      	bne.n	8018d9e <lv_btn_create+0x26>
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	e0a5      	b.n	8018eea <lv_btn_create+0x172>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8018d9e:	4b55      	ldr	r3, [pc, #340]	; (8018ef4 <lv_btn_create+0x17c>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d105      	bne.n	8018db2 <lv_btn_create+0x3a>
 8018da6:	6978      	ldr	r0, [r7, #20]
 8018da8:	f7f1 fcf7 	bl	800a79a <lv_obj_get_signal_cb>
 8018dac:	4602      	mov	r2, r0
 8018dae:	4b51      	ldr	r3, [pc, #324]	; (8018ef4 <lv_btn_create+0x17c>)
 8018db0:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8018db2:	4b51      	ldr	r3, [pc, #324]	; (8018ef8 <lv_btn_create+0x180>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d105      	bne.n	8018dc6 <lv_btn_create+0x4e>
 8018dba:	6978      	ldr	r0, [r7, #20]
 8018dbc:	f7f1 fcf9 	bl	800a7b2 <lv_obj_get_design_cb>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	4b4d      	ldr	r3, [pc, #308]	; (8018ef8 <lv_btn_create+0x180>)
 8018dc4:	601a      	str	r2, [r3, #0]

    /*Allocate the extended data*/
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8018dc6:	211c      	movs	r1, #28
 8018dc8:	6978      	ldr	r0, [r7, #20]
 8018dca:	f7f1 fb31 	bl	800a430 <lv_obj_allocate_ext_attr>
 8018dce:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d100      	bne.n	8018dd8 <lv_btn_create+0x60>
 8018dd6:	e7fe      	b.n	8018dd6 <lv_btn_create+0x5e>
    if(ext == NULL) return NULL;
 8018dd8:	693b      	ldr	r3, [r7, #16]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d101      	bne.n	8018de2 <lv_btn_create+0x6a>
 8018dde:	2300      	movs	r3, #0
 8018de0:	e083      	b.n	8018eea <lv_btn_create+0x172>

    ext->state = LV_BTN_STATE_REL;
 8018de2:	693a      	ldr	r2, [r7, #16]
 8018de4:	7e13      	ldrb	r3, [r2, #24]
 8018de6:	f36f 0302 	bfc	r3, #0, #3
 8018dea:	7613      	strb	r3, [r2, #24]

    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	4a43      	ldr	r2, [pc, #268]	; (8018efc <lv_btn_create+0x184>)
 8018df0:	605a      	str	r2, [r3, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8018df2:	693b      	ldr	r3, [r7, #16]
 8018df4:	4a42      	ldr	r2, [pc, #264]	; (8018f00 <lv_btn_create+0x188>)
 8018df6:	609a      	str	r2, [r3, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8018df8:	693b      	ldr	r3, [r7, #16]
 8018dfa:	4a42      	ldr	r2, [pc, #264]	; (8018f04 <lv_btn_create+0x18c>)
 8018dfc:	60da      	str	r2, [r3, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8018dfe:	693b      	ldr	r3, [r7, #16]
 8018e00:	4a41      	ldr	r2, [pc, #260]	; (8018f08 <lv_btn_create+0x190>)
 8018e02:	611a      	str	r2, [r3, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8018e04:	693b      	ldr	r3, [r7, #16]
 8018e06:	4a41      	ldr	r2, [pc, #260]	; (8018f0c <lv_btn_create+0x194>)
 8018e08:	615a      	str	r2, [r3, #20]

    ext->toggle = 0;
 8018e0a:	693a      	ldr	r2, [r7, #16]
 8018e0c:	7e13      	ldrb	r3, [r2, #24]
 8018e0e:	f36f 03c3 	bfc	r3, #3, #1
 8018e12:	7613      	strb	r3, [r2, #24]
    ext->ink_in_time   = 0;
    ext->ink_wait_time = 0;
    ext->ink_out_time  = 0;
#endif

    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 8018e14:	493e      	ldr	r1, [pc, #248]	; (8018f10 <lv_btn_create+0x198>)
 8018e16:	6978      	ldr	r0, [r7, #20]
 8018e18:	f7f1 faee 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 8018e1c:	493d      	ldr	r1, [pc, #244]	; (8018f14 <lv_btn_create+0x19c>)
 8018e1e:	6978      	ldr	r0, [r7, #20]
 8018e20:	f7f1 faf8 	bl	800a414 <lv_obj_set_design_cb>

    /*If no copy do the basic initialization*/
    if(copy == NULL) {
 8018e24:	683b      	ldr	r3, [r7, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d13b      	bne.n	8018ea2 <lv_btn_create+0x12a>
        /*Set layout if the button is not a screen*/
        if(par != NULL) {
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d003      	beq.n	8018e38 <lv_btn_create+0xc0>
            lv_btn_set_layout(new_btn, LV_LAYOUT_CENTER);
 8018e30:	2101      	movs	r1, #1
 8018e32:	6978      	ldr	r0, [r7, #20]
 8018e34:	f7ff ff91 	bl	8018d5a <lv_btn_set_layout>
        }

        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 8018e38:	2101      	movs	r1, #1
 8018e3a:	6978      	ldr	r0, [r7, #20]
 8018e3c:	f7f1 f9bb 	bl	800a1b6 <lv_obj_set_click>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8018e40:	f009 fb46 	bl	80224d0 <lv_theme_get_current>
 8018e44:	60b8      	str	r0, [r7, #8]
        if(th) {
 8018e46:	68bb      	ldr	r3, [r7, #8]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d023      	beq.n	8018e94 <lv_btn_create+0x11c>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	691b      	ldr	r3, [r3, #16]
 8018e50:	461a      	mov	r2, r3
 8018e52:	2100      	movs	r1, #0
 8018e54:	6978      	ldr	r0, [r7, #20]
 8018e56:	f000 f89d 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	695b      	ldr	r3, [r3, #20]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	2101      	movs	r1, #1
 8018e62:	6978      	ldr	r0, [r7, #20]
 8018e64:	f000 f896 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	699b      	ldr	r3, [r3, #24]
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	2102      	movs	r1, #2
 8018e70:	6978      	ldr	r0, [r7, #20]
 8018e72:	f000 f88f 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	69db      	ldr	r3, [r3, #28]
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	2103      	movs	r1, #3
 8018e7e:	6978      	ldr	r0, [r7, #20]
 8018e80:	f000 f888 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	6a1b      	ldr	r3, [r3, #32]
 8018e88:	461a      	mov	r2, r3
 8018e8a:	2104      	movs	r1, #4
 8018e8c:	6978      	ldr	r0, [r7, #20]
 8018e8e:	f000 f881 	bl	8018f94 <lv_btn_set_style>
 8018e92:	e029      	b.n	8018ee8 <lv_btn_create+0x170>
        } else {
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	685b      	ldr	r3, [r3, #4]
 8018e98:	4619      	mov	r1, r3
 8018e9a:	6978      	ldr	r0, [r7, #20]
 8018e9c:	f7f1 f965 	bl	800a16a <lv_obj_set_style>
 8018ea0:	e022      	b.n	8018ee8 <lv_btn_create+0x170>
        }
    }
    /*Copy 'copy'*/
    else {
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018ea2:	6838      	ldr	r0, [r7, #0]
 8018ea4:	f7f1 fc91 	bl	800a7ca <lv_obj_get_ext_attr>
 8018ea8:	60f8      	str	r0, [r7, #12]
        ext->state              = copy_ext->state;
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	7e1b      	ldrb	r3, [r3, #24]
 8018eae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018eb2:	b2d9      	uxtb	r1, r3
 8018eb4:	693a      	ldr	r2, [r7, #16]
 8018eb6:	7e13      	ldrb	r3, [r2, #24]
 8018eb8:	f361 0302 	bfi	r3, r1, #0, #3
 8018ebc:	7613      	strb	r3, [r2, #24]
        ext->toggle             = copy_ext->toggle;
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	7e1b      	ldrb	r3, [r3, #24]
 8018ec2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018ec6:	b2d9      	uxtb	r1, r3
 8018ec8:	693a      	ldr	r2, [r7, #16]
 8018eca:	7e13      	ldrb	r3, [r2, #24]
 8018ecc:	f361 03c3 	bfi	r3, r1, #3, #1
 8018ed0:	7613      	strb	r3, [r2, #24]
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
        ext->ink_in_time   = copy_ext->ink_in_time;
        ext->ink_wait_time = copy_ext->ink_wait_time;
        ext->ink_out_time  = copy_ext->ink_out_time;
#endif
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8018ed2:	693b      	ldr	r3, [r7, #16]
 8018ed4:	1d18      	adds	r0, r3, #4
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	3304      	adds	r3, #4
 8018eda:	2214      	movs	r2, #20
 8018edc:	4619      	mov	r1, r3
 8018ede:	f012 f897 	bl	802b010 <memcpy>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_btn);
 8018ee2:	6978      	ldr	r0, [r7, #20]
 8018ee4:	f7f1 f953 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("button created");

    return new_btn;
 8018ee8:	697b      	ldr	r3, [r7, #20]
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	3718      	adds	r7, #24
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	200177b4 	.word	0x200177b4
 8018ef8:	200177b8 	.word	0x200177b8
 8018efc:	2001b8d8 	.word	0x2001b8d8
 8018f00:	2001b914 	.word	0x2001b914
 8018f04:	2001ba7c 	.word	0x2001ba7c
 8018f08:	2001baf4 	.word	0x2001baf4
 8018f0c:	2001b9c8 	.word	0x2001b9c8
 8018f10:	080190b5 	.word	0x080190b5
 8018f14:	08019069 	.word	0x08019069

08018f18 <lv_btn_set_toggle>:
 * Enable the toggled states
 * @param btn pointer to a button object
 * @param tgl true: enable toggled states, false: disable
 */
void lv_btn_set_toggle(lv_obj_t * btn, bool tgl)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b084      	sub	sp, #16
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
 8018f20:	460b      	mov	r3, r1
 8018f22:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	f7f1 fc50 	bl	800a7ca <lv_obj_get_ext_attr>
 8018f2a:	60f8      	str	r0, [r7, #12]

    ext->toggle = tgl != false ? 1 : 0;
 8018f2c:	78f9      	ldrb	r1, [r7, #3]
 8018f2e:	68fa      	ldr	r2, [r7, #12]
 8018f30:	7e13      	ldrb	r3, [r2, #24]
 8018f32:	f361 03c3 	bfi	r3, r1, #3, #1
 8018f36:	7613      	strb	r3, [r2, #24]
}
 8018f38:	bf00      	nop
 8018f3a:	3710      	adds	r7, #16
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}

08018f40 <lv_btn_set_state>:
 * Set the state of the button
 * @param btn pointer to a button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	460b      	mov	r3, r1
 8018f4a:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f7f1 fc3c 	bl	800a7ca <lv_obj_get_ext_attr>
 8018f52:	60f8      	str	r0, [r7, #12]
    if(ext->state != state) {
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	7e1b      	ldrb	r3, [r3, #24]
 8018f58:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	461a      	mov	r2, r3
 8018f60:	78fb      	ldrb	r3, [r7, #3]
 8018f62:	429a      	cmp	r2, r3
 8018f64:	d011      	beq.n	8018f8a <lv_btn_set_state+0x4a>
        ext->state = state;
 8018f66:	78fb      	ldrb	r3, [r7, #3]
 8018f68:	f003 0307 	and.w	r3, r3, #7
 8018f6c:	b2d9      	uxtb	r1, r3
 8018f6e:	68fa      	ldr	r2, [r7, #12]
 8018f70:	7e13      	ldrb	r3, [r2, #24]
 8018f72:	f361 0302 	bfi	r3, r1, #0, #3
 8018f76:	7613      	strb	r3, [r2, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 8018f78:	78fb      	ldrb	r3, [r7, #3]
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	009b      	lsls	r3, r3, #2
 8018f7e:	4413      	add	r3, r2
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	4619      	mov	r1, r3
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	f7f1 f8f0 	bl	800a16a <lv_obj_set_style>
    }
}
 8018f8a:	bf00      	nop
 8018f8c:	3710      	adds	r7, #16
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}
	...

08018f94 <lv_btn_set_style>:
 * @param btn pointer to a button object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btn_set_style(lv_obj_t * btn, lv_btn_style_t type, const lv_style_t * style)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b086      	sub	sp, #24
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	607a      	str	r2, [r7, #4]
 8018fa0:	72fb      	strb	r3, [r7, #11]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018fa2:	68f8      	ldr	r0, [r7, #12]
 8018fa4:	f7f1 fc11 	bl	800a7ca <lv_obj_get_ext_attr>
 8018fa8:	6178      	str	r0, [r7, #20]

    switch(type) {
 8018faa:	7afb      	ldrb	r3, [r7, #11]
 8018fac:	2b04      	cmp	r3, #4
 8018fae:	d821      	bhi.n	8018ff4 <lv_btn_set_style+0x60>
 8018fb0:	a201      	add	r2, pc, #4	; (adr r2, 8018fb8 <lv_btn_set_style+0x24>)
 8018fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fb6:	bf00      	nop
 8018fb8:	08018fcd 	.word	0x08018fcd
 8018fbc:	08018fd5 	.word	0x08018fd5
 8018fc0:	08018fdd 	.word	0x08018fdd
 8018fc4:	08018fe5 	.word	0x08018fe5
 8018fc8:	08018fed 	.word	0x08018fed
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8018fcc:	697b      	ldr	r3, [r7, #20]
 8018fce:	687a      	ldr	r2, [r7, #4]
 8018fd0:	605a      	str	r2, [r3, #4]
 8018fd2:	e00f      	b.n	8018ff4 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	687a      	ldr	r2, [r7, #4]
 8018fd8:	609a      	str	r2, [r3, #8]
 8018fda:	e00b      	b.n	8018ff4 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	687a      	ldr	r2, [r7, #4]
 8018fe0:	60da      	str	r2, [r3, #12]
 8018fe2:	e007      	b.n	8018ff4 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	687a      	ldr	r2, [r7, #4]
 8018fe8:	611a      	str	r2, [r3, #16]
 8018fea:	e003      	b.n	8018ff4 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	687a      	ldr	r2, [r7, #4]
 8018ff0:	615a      	str	r2, [r3, #20]
 8018ff2:	bf00      	nop
    }

    /*Refresh the object with the new style*/
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8018ff4:	697b      	ldr	r3, [r7, #20]
 8018ff6:	7e1b      	ldrb	r3, [r3, #24]
 8018ff8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	697a      	ldr	r2, [r7, #20]
 8019000:	009b      	lsls	r3, r3, #2
 8019002:	4413      	add	r3, r2
 8019004:	685b      	ldr	r3, [r3, #4]
 8019006:	4619      	mov	r1, r3
 8019008:	68f8      	ldr	r0, [r7, #12]
 801900a:	f7f1 f8ae 	bl	800a16a <lv_obj_set_style>
}
 801900e:	bf00      	nop
 8019010:	3718      	adds	r7, #24
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
 8019016:	bf00      	nop

08019018 <lv_btn_get_state>:
 * Get the current state of the button
 * @param btn pointer to a button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b084      	sub	sp, #16
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8019020:	6878      	ldr	r0, [r7, #4]
 8019022:	f7f1 fbd2 	bl	800a7ca <lv_obj_get_ext_attr>
 8019026:	60f8      	str	r0, [r7, #12]
    return ext->state;
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	7e1b      	ldrb	r3, [r3, #24]
 801902c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8019030:	b2db      	uxtb	r3, r3
}
 8019032:	4618      	mov	r0, r3
 8019034:	3710      	adds	r7, #16
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}

0801903a <lv_btn_get_toggle>:
 * Get the toggle enable attribute of the button
 * @param btn pointer to a button object
 * @return ture: toggle enabled, false: disabled
 */
bool lv_btn_get_toggle(const lv_obj_t * btn)
{
 801903a:	b580      	push	{r7, lr}
 801903c:	b084      	sub	sp, #16
 801903e:	af00      	add	r7, sp, #0
 8019040:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8019042:	6878      	ldr	r0, [r7, #4]
 8019044:	f7f1 fbc1 	bl	800a7ca <lv_obj_get_ext_attr>
 8019048:	60f8      	str	r0, [r7, #12]

    return ext->toggle != 0 ? true : false;
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	7e1b      	ldrb	r3, [r3, #24]
 801904e:	08db      	lsrs	r3, r3, #3
 8019050:	b2db      	uxtb	r3, r3
 8019052:	f003 0301 	and.w	r3, r3, #1
 8019056:	2b00      	cmp	r3, #0
 8019058:	bf14      	ite	ne
 801905a:	2301      	movne	r3, #1
 801905c:	2300      	moveq	r3, #0
 801905e:	b2db      	uxtb	r3, r3
}
 8019060:	4618      	mov	r0, r3
 8019062:	3710      	adds	r7, #16
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b084      	sub	sp, #16
 801906c:	af00      	add	r7, sp, #0
 801906e:	60f8      	str	r0, [r7, #12]
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	4613      	mov	r3, r2
 8019074:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8019076:	79fb      	ldrb	r3, [r7, #7]
 8019078:	2b02      	cmp	r3, #2
 801907a:	d101      	bne.n	8019080 <lv_btn_design+0x18>
        return false;
 801907c:	2300      	movs	r3, #0
 801907e:	e013      	b.n	80190a8 <lv_btn_design+0x40>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019080:	79fb      	ldrb	r3, [r7, #7]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d106      	bne.n	8019094 <lv_btn_design+0x2c>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
            }
        }
#else
        ancestor_design(btn, mask, mode);
 8019086:	4b0a      	ldr	r3, [pc, #40]	; (80190b0 <lv_btn_design+0x48>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	79fa      	ldrb	r2, [r7, #7]
 801908c:	68b9      	ldr	r1, [r7, #8]
 801908e:	68f8      	ldr	r0, [r7, #12]
 8019090:	4798      	blx	r3
 8019092:	e008      	b.n	80190a6 <lv_btn_design+0x3e>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8019094:	79fb      	ldrb	r3, [r7, #7]
 8019096:	2b01      	cmp	r3, #1
 8019098:	d105      	bne.n	80190a6 <lv_btn_design+0x3e>
        ancestor_design(btn, mask, mode);
 801909a:	4b05      	ldr	r3, [pc, #20]	; (80190b0 <lv_btn_design+0x48>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	79fa      	ldrb	r2, [r7, #7]
 80190a0:	68b9      	ldr	r1, [r7, #8]
 80190a2:	68f8      	ldr	r0, [r7, #12]
 80190a4:	4798      	blx	r3
    }

    return true;
 80190a6:	2301      	movs	r3, #1
}
 80190a8:	4618      	mov	r0, r3
 80190aa:	3710      	adds	r7, #16
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd80      	pop	{r7, pc}
 80190b0:	200177b8 	.word	0x200177b8

080190b4 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b08c      	sub	sp, #48	; 0x30
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	60f8      	str	r0, [r7, #12]
 80190bc:	460b      	mov	r3, r1
 80190be:	607a      	str	r2, [r7, #4]
 80190c0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 80190c2:	4bb4      	ldr	r3, [pc, #720]	; (8019394 <lv_btn_signal+0x2e0>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	7af9      	ldrb	r1, [r7, #11]
 80190c8:	687a      	ldr	r2, [r7, #4]
 80190ca:	68f8      	ldr	r0, [r7, #12]
 80190cc:	4798      	blx	r3
 80190ce:	4603      	mov	r3, r0
 80190d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(res != LV_RES_OK) return res;
 80190d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80190d8:	2b01      	cmp	r3, #1
 80190da:	d002      	beq.n	80190e2 <lv_btn_signal+0x2e>
 80190dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80190e0:	e165      	b.n	80193ae <lv_btn_signal+0x2fa>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80190e2:	68f8      	ldr	r0, [r7, #12]
 80190e4:	f7f1 fb71 	bl	800a7ca <lv_obj_get_ext_attr>
 80190e8:	62b8      	str	r0, [r7, #40]	; 0x28
    bool tgl           = lv_btn_get_toggle(btn);
 80190ea:	68f8      	ldr	r0, [r7, #12]
 80190ec:	f7ff ffa5 	bl	801903a <lv_btn_get_toggle>
 80190f0:	4603      	mov	r3, r0
 80190f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(sign == LV_SIGNAL_PRESSED) {
 80190f6:	7afb      	ldrb	r3, [r7, #11]
 80190f8:	2b07      	cmp	r3, #7
 80190fa:	d118      	bne.n	801912e <lv_btn_signal+0x7a>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 80190fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fe:	7e1b      	ldrb	r3, [r3, #24]
 8019100:	f003 0307 	and.w	r3, r3, #7
 8019104:	b2db      	uxtb	r3, r3
 8019106:	2b00      	cmp	r3, #0
 8019108:	d104      	bne.n	8019114 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 801910a:	2101      	movs	r1, #1
 801910c:	68f8      	ldr	r0, [r7, #12]
 801910e:	f7ff ff17 	bl	8018f40 <lv_btn_set_state>
 8019112:	e14a      	b.n	80193aa <lv_btn_signal+0x2f6>
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
            ink_bg_state  = LV_BTN_STATE_REL;
            ink_top_state = LV_BTN_STATE_PR;
#endif
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8019114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019116:	7e1b      	ldrb	r3, [r3, #24]
 8019118:	f003 0307 	and.w	r3, r3, #7
 801911c:	b2db      	uxtb	r3, r3
 801911e:	2b02      	cmp	r3, #2
 8019120:	f040 8143 	bne.w	80193aa <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 8019124:	2103      	movs	r1, #3
 8019126:	68f8      	ldr	r0, [r7, #12]
 8019128:	f7ff ff0a 	bl	8018f40 <lv_btn_set_state>
 801912c:	e13d      	b.n	80193aa <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 801912e:	7afb      	ldrb	r3, [r7, #11]
 8019130:	2b09      	cmp	r3, #9
 8019132:	d118      	bne.n	8019166 <lv_btn_signal+0xb2>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
 8019134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019136:	7e1b      	ldrb	r3, [r3, #24]
 8019138:	f003 0307 	and.w	r3, r3, #7
 801913c:	b2db      	uxtb	r3, r3
 801913e:	2b01      	cmp	r3, #1
 8019140:	d104      	bne.n	801914c <lv_btn_signal+0x98>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8019142:	2100      	movs	r1, #0
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7ff fefb 	bl	8018f40 <lv_btn_set_state>
 801914a:	e12e      	b.n	80193aa <lv_btn_signal+0x2f6>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 801914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914e:	7e1b      	ldrb	r3, [r3, #24]
 8019150:	f003 0307 	and.w	r3, r3, #7
 8019154:	b2db      	uxtb	r3, r3
 8019156:	2b03      	cmp	r3, #3
 8019158:	f040 8127 	bne.w	80193aa <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 801915c:	2102      	movs	r1, #2
 801915e:	68f8      	ldr	r0, [r7, #12]
 8019160:	f7ff feee 	bl	8018f40 <lv_btn_set_state>
 8019164:	e121      	b.n	80193aa <lv_btn_signal+0x2f6>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8019166:	7afb      	ldrb	r3, [r7, #11]
 8019168:	2b08      	cmp	r3, #8
 801916a:	d11f      	bne.n	80191ac <lv_btn_signal+0xf8>
        /*When the button begins to drag revert pressed states to released*/
        if(lv_indev_is_dragging(param) != false) {
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f7ef fcf9 	bl	8008b64 <lv_indev_is_dragging>
 8019172:	4603      	mov	r3, r0
 8019174:	2b00      	cmp	r3, #0
 8019176:	f000 8118 	beq.w	80193aa <lv_btn_signal+0x2f6>
            if(ext->state == LV_BTN_STATE_PR)
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	7e1b      	ldrb	r3, [r3, #24]
 801917e:	f003 0307 	and.w	r3, r3, #7
 8019182:	b2db      	uxtb	r3, r3
 8019184:	2b01      	cmp	r3, #1
 8019186:	d104      	bne.n	8019192 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8019188:	2100      	movs	r1, #0
 801918a:	68f8      	ldr	r0, [r7, #12]
 801918c:	f7ff fed8 	bl	8018f40 <lv_btn_set_state>
 8019190:	e10b      	b.n	80193aa <lv_btn_signal+0x2f6>
            else if(ext->state == LV_BTN_STATE_TGL_PR)
 8019192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019194:	7e1b      	ldrb	r3, [r3, #24]
 8019196:	f003 0307 	and.w	r3, r3, #7
 801919a:	b2db      	uxtb	r3, r3
 801919c:	2b03      	cmp	r3, #3
 801919e:	f040 8104 	bne.w	80193aa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80191a2:	2102      	movs	r1, #2
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	f7ff fecb 	bl	8018f40 <lv_btn_set_state>
 80191aa:	e0fe      	b.n	80193aa <lv_btn_signal+0x2f6>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 80191ac:	7afb      	ldrb	r3, [r7, #11]
 80191ae:	2b0a      	cmp	r3, #10
 80191b0:	f040 8087 	bne.w	80192c2 <lv_btn_signal+0x20e>
        /*If not dragged and it was not long press action then
         *change state and run the action*/
        if(lv_indev_is_dragging(param) == false) {
 80191b4:	6878      	ldr	r0, [r7, #4]
 80191b6:	f7ef fcd5 	bl	8008b64 <lv_indev_is_dragging>
 80191ba:	4603      	mov	r3, r0
 80191bc:	f083 0301 	eor.w	r3, r3, #1
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d065      	beq.n	8019292 <lv_btn_signal+0x1de>
            uint32_t toggled = 0;
 80191c6:	2300      	movs	r3, #0
 80191c8:	61bb      	str	r3, [r7, #24]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 80191ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191cc:	7e1b      	ldrb	r3, [r3, #24]
 80191ce:	f003 0307 	and.w	r3, r3, #7
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d10d      	bne.n	80191f4 <lv_btn_signal+0x140>
 80191d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191dc:	f083 0301 	eor.w	r3, r3, #1
 80191e0:	b2db      	uxtb	r3, r3
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d006      	beq.n	80191f4 <lv_btn_signal+0x140>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80191e6:	2100      	movs	r1, #0
 80191e8:	68f8      	ldr	r0, [r7, #12]
 80191ea:	f7ff fea9 	bl	8018f40 <lv_btn_set_state>
                toggled = 0;
 80191ee:	2300      	movs	r3, #0
 80191f0:	61bb      	str	r3, [r7, #24]
 80191f2:	e037      	b.n	8019264 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 80191f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f6:	7e1b      	ldrb	r3, [r3, #24]
 80191f8:	f003 0307 	and.w	r3, r3, #7
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	2b03      	cmp	r3, #3
 8019200:	d10d      	bne.n	801921e <lv_btn_signal+0x16a>
 8019202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019206:	f083 0301 	eor.w	r3, r3, #1
 801920a:	b2db      	uxtb	r3, r3
 801920c:	2b00      	cmp	r3, #0
 801920e:	d006      	beq.n	801921e <lv_btn_signal+0x16a>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8019210:	2102      	movs	r1, #2
 8019212:	68f8      	ldr	r0, [r7, #12]
 8019214:	f7ff fe94 	bl	8018f40 <lv_btn_set_state>
                toggled = 1;
 8019218:	2301      	movs	r3, #1
 801921a:	61bb      	str	r3, [r7, #24]
 801921c:	e022      	b.n	8019264 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_PR && tgl == true) {
 801921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019220:	7e1b      	ldrb	r3, [r3, #24]
 8019222:	f003 0307 	and.w	r3, r3, #7
 8019226:	b2db      	uxtb	r3, r3
 8019228:	2b01      	cmp	r3, #1
 801922a:	d10a      	bne.n	8019242 <lv_btn_signal+0x18e>
 801922c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019230:	2b00      	cmp	r3, #0
 8019232:	d006      	beq.n	8019242 <lv_btn_signal+0x18e>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8019234:	2102      	movs	r1, #2
 8019236:	68f8      	ldr	r0, [r7, #12]
 8019238:	f7ff fe82 	bl	8018f40 <lv_btn_set_state>
                toggled = 1;
 801923c:	2301      	movs	r3, #1
 801923e:	61bb      	str	r3, [r7, #24]
 8019240:	e010      	b.n	8019264 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == true) {
 8019242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019244:	7e1b      	ldrb	r3, [r3, #24]
 8019246:	f003 0307 	and.w	r3, r3, #7
 801924a:	b2db      	uxtb	r3, r3
 801924c:	2b03      	cmp	r3, #3
 801924e:	d109      	bne.n	8019264 <lv_btn_signal+0x1b0>
 8019250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019254:	2b00      	cmp	r3, #0
 8019256:	d005      	beq.n	8019264 <lv_btn_signal+0x1b0>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8019258:	2100      	movs	r1, #0
 801925a:	68f8      	ldr	r0, [r7, #12]
 801925c:	f7ff fe70 	bl	8018f40 <lv_btn_set_state>
                toggled = 0;
 8019260:	2300      	movs	r3, #0
 8019262:	61bb      	str	r3, [r7, #24]
            }

            if(tgl) {
 8019264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019268:	2b00      	cmp	r3, #0
 801926a:	f000 809e 	beq.w	80193aa <lv_btn_signal+0x2f6>
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 801926e:	f107 0318 	add.w	r3, r7, #24
 8019272:	461a      	mov	r2, r3
 8019274:	210e      	movs	r1, #14
 8019276:	68f8      	ldr	r0, [r7, #12]
 8019278:	f7f1 f82d 	bl	800a2d6 <lv_event_send>
 801927c:	4603      	mov	r3, r0
 801927e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8019282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019286:	2b01      	cmp	r3, #1
 8019288:	f000 808f 	beq.w	80193aa <lv_btn_signal+0x2f6>
 801928c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019290:	e08d      	b.n	80193ae <lv_btn_signal+0x2fa>
            }

        } else { /*If dragged change back the state*/
            if(ext->state == LV_BTN_STATE_PR) {
 8019292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019294:	7e1b      	ldrb	r3, [r3, #24]
 8019296:	f003 0307 	and.w	r3, r3, #7
 801929a:	b2db      	uxtb	r3, r3
 801929c:	2b01      	cmp	r3, #1
 801929e:	d104      	bne.n	80192aa <lv_btn_signal+0x1f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80192a0:	2100      	movs	r1, #0
 80192a2:	68f8      	ldr	r0, [r7, #12]
 80192a4:	f7ff fe4c 	bl	8018f40 <lv_btn_set_state>
 80192a8:	e07f      	b.n	80193aa <lv_btn_signal+0x2f6>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 80192aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ac:	7e1b      	ldrb	r3, [r3, #24]
 80192ae:	f003 0307 	and.w	r3, r3, #7
 80192b2:	b2db      	uxtb	r3, r3
 80192b4:	2b03      	cmp	r3, #3
 80192b6:	d178      	bne.n	80193aa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80192b8:	2102      	movs	r1, #2
 80192ba:	68f8      	ldr	r0, [r7, #12]
 80192bc:	f7ff fe40 	bl	8018f40 <lv_btn_set_state>
 80192c0:	e073      	b.n	80193aa <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_CONTROL) {
 80192c2:	7afb      	ldrb	r3, [r7, #11]
 80192c4:	2b11      	cmp	r3, #17
 80192c6:	d148      	bne.n	801935a <lv_btn_signal+0x2a6>
        char c = *((char *)param);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	77fb      	strb	r3, [r7, #31]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80192ce:	7ffb      	ldrb	r3, [r7, #31]
 80192d0:	2b13      	cmp	r3, #19
 80192d2:	d002      	beq.n	80192da <lv_btn_signal+0x226>
 80192d4:	7ffb      	ldrb	r3, [r7, #31]
 80192d6:	2b11      	cmp	r3, #17
 80192d8:	d11c      	bne.n	8019314 <lv_btn_signal+0x260>
            if(lv_btn_get_toggle(btn)) {
 80192da:	68f8      	ldr	r0, [r7, #12]
 80192dc:	f7ff fead 	bl	801903a <lv_btn_get_toggle>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d060      	beq.n	80193a8 <lv_btn_signal+0x2f4>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80192e6:	2102      	movs	r1, #2
 80192e8:	68f8      	ldr	r0, [r7, #12]
 80192ea:	f7ff fe29 	bl	8018f40 <lv_btn_set_state>

                uint32_t state = 1;
 80192ee:	2301      	movs	r3, #1
 80192f0:	617b      	str	r3, [r7, #20]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 80192f2:	f107 0314 	add.w	r3, r7, #20
 80192f6:	461a      	mov	r2, r3
 80192f8:	210e      	movs	r1, #14
 80192fa:	68f8      	ldr	r0, [r7, #12]
 80192fc:	f7f0 ffeb 	bl	800a2d6 <lv_event_send>
 8019300:	4603      	mov	r3, r0
 8019302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8019306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801930a:	2b01      	cmp	r3, #1
 801930c:	d04c      	beq.n	80193a8 <lv_btn_signal+0x2f4>
 801930e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019312:	e04c      	b.n	80193ae <lv_btn_signal+0x2fa>
            }

        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8019314:	7ffb      	ldrb	r3, [r7, #31]
 8019316:	2b14      	cmp	r3, #20
 8019318:	d002      	beq.n	8019320 <lv_btn_signal+0x26c>
 801931a:	7ffb      	ldrb	r3, [r7, #31]
 801931c:	2b12      	cmp	r3, #18
 801931e:	d144      	bne.n	80193aa <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8019320:	68f8      	ldr	r0, [r7, #12]
 8019322:	f7ff fe8a 	bl	801903a <lv_btn_get_toggle>
 8019326:	4603      	mov	r3, r0
 8019328:	2b00      	cmp	r3, #0
 801932a:	d03e      	beq.n	80193aa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 801932c:	2100      	movs	r1, #0
 801932e:	68f8      	ldr	r0, [r7, #12]
 8019330:	f7ff fe06 	bl	8018f40 <lv_btn_set_state>

                uint32_t state = 0;
 8019334:	2300      	movs	r3, #0
 8019336:	613b      	str	r3, [r7, #16]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8019338:	f107 0310 	add.w	r3, r7, #16
 801933c:	461a      	mov	r2, r3
 801933e:	210e      	movs	r1, #14
 8019340:	68f8      	ldr	r0, [r7, #12]
 8019342:	f7f0 ffc8 	bl	800a2d6 <lv_event_send>
 8019346:	4603      	mov	r3, r0
 8019348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 801934c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019350:	2b01      	cmp	r3, #1
 8019352:	d02a      	beq.n	80193aa <lv_btn_signal+0x2f6>
 8019354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019358:	e029      	b.n	80193ae <lv_btn_signal+0x2fa>
            }
        }
    } else if(sign == LV_SIGNAL_CLEANUP) {
 801935a:	7afb      	ldrb	r3, [r7, #11]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d024      	beq.n	80193aa <lv_btn_signal+0x2f6>
        if(btn == ink_obj) {
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
            ink_obj = NULL;
        }
#endif
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019360:	7afb      	ldrb	r3, [r7, #11]
 8019362:	2b06      	cmp	r3, #6
 8019364:	d121      	bne.n	80193aa <lv_btn_signal+0x2f6>
        lv_obj_type_t * buf = param;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	623b      	str	r3, [r7, #32]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801936a:	2300      	movs	r3, #0
 801936c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8019370:	e00b      	b.n	801938a <lv_btn_signal+0x2d6>
            if(buf->type[i] == NULL) break;
 8019372:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8019376:	6a3b      	ldr	r3, [r7, #32]
 8019378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d00b      	beq.n	8019398 <lv_btn_signal+0x2e4>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8019384:	3301      	adds	r3, #1
 8019386:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801938a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801938e:	2b06      	cmp	r3, #6
 8019390:	d9ef      	bls.n	8019372 <lv_btn_signal+0x2be>
 8019392:	e002      	b.n	801939a <lv_btn_signal+0x2e6>
 8019394:	200177b4 	.word	0x200177b4
            if(buf->type[i] == NULL) break;
 8019398:	bf00      	nop
        }
        buf->type[i] = "lv_btn";
 801939a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801939e:	6a3b      	ldr	r3, [r7, #32]
 80193a0:	4905      	ldr	r1, [pc, #20]	; (80193b8 <lv_btn_signal+0x304>)
 80193a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80193a6:	e000      	b.n	80193aa <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 80193a8:	bf00      	nop
    }

    return res;
 80193aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80193ae:	4618      	mov	r0, r3
 80193b0:	3730      	adds	r7, #48	; 0x30
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	0802d480 	.word	0x0802d480

080193bc <lv_area_copy>:
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
 80193c4:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80193c6:	2208      	movs	r2, #8
 80193c8:	6839      	ldr	r1, [r7, #0]
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f011 fe20 	bl	802b010 <memcpy>
}
 80193d0:	bf00      	nop
 80193d2:	3708      	adds	r7, #8
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}

080193d8 <lv_area_get_width>:
{
 80193d8:	b480      	push	{r7}
 80193da:	b083      	sub	sp, #12
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80193e6:	b29a      	uxth	r2, r3
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193ee:	b29b      	uxth	r3, r3
 80193f0:	1ad3      	subs	r3, r2, r3
 80193f2:	b29b      	uxth	r3, r3
 80193f4:	3301      	adds	r3, #1
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	b21b      	sxth	r3, r3
}
 80193fa:	4618      	mov	r0, r3
 80193fc:	370c      	adds	r7, #12
 80193fe:	46bd      	mov	sp, r7
 8019400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019404:	4770      	bx	lr

08019406 <lv_area_get_height>:
{
 8019406:	b480      	push	{r7}
 8019408:	b083      	sub	sp, #12
 801940a:	af00      	add	r7, sp, #0
 801940c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019414:	b29a      	uxth	r2, r3
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801941c:	b29b      	uxth	r3, r3
 801941e:	1ad3      	subs	r3, r2, r3
 8019420:	b29b      	uxth	r3, r3
 8019422:	3301      	adds	r3, #1
 8019424:	b29b      	uxth	r3, r3
 8019426:	b21b      	sxth	r3, r3
}
 8019428:	4618      	mov	r0, r3
 801942a:	370c      	adds	r7, #12
 801942c:	46bd      	mov	sp, r7
 801942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019432:	4770      	bx	lr

08019434 <lv_btnm_create>:
 * @param copy pointer to a button matrix object, if not NULL then the new object will be copied
 * from it
 * @return pointer to the created button matrix
 */
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button matrix create started");

    /*Create the ancestor object*/
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 801943e:	6839      	ldr	r1, [r7, #0]
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f7ef fc59 	bl	8008cf8 <lv_obj_create>
 8019446:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btnm);
 8019448:	697b      	ldr	r3, [r7, #20]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d100      	bne.n	8019450 <lv_btnm_create+0x1c>
 801944e:	e7fe      	b.n	801944e <lv_btnm_create+0x1a>
    if(new_btnm == NULL) return NULL;
 8019450:	697b      	ldr	r3, [r7, #20]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d101      	bne.n	801945a <lv_btnm_create+0x26>
 8019456:	2300      	movs	r3, #0
 8019458:	e0b9      	b.n	80195ce <lv_btnm_create+0x19a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 801945a:	4b5f      	ldr	r3, [pc, #380]	; (80195d8 <lv_btnm_create+0x1a4>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d105      	bne.n	801946e <lv_btnm_create+0x3a>
 8019462:	6978      	ldr	r0, [r7, #20]
 8019464:	f7f1 f999 	bl	800a79a <lv_obj_get_signal_cb>
 8019468:	4602      	mov	r2, r0
 801946a:	4b5b      	ldr	r3, [pc, #364]	; (80195d8 <lv_btnm_create+0x1a4>)
 801946c:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 801946e:	2128      	movs	r1, #40	; 0x28
 8019470:	6978      	ldr	r0, [r7, #20]
 8019472:	f7f0 ffdd 	bl	800a430 <lv_obj_allocate_ext_attr>
 8019476:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	2b00      	cmp	r3, #0
 801947c:	d100      	bne.n	8019480 <lv_btnm_create+0x4c>
 801947e:	e7fe      	b.n	801947e <lv_btnm_create+0x4a>
    if(ext == NULL) return NULL;
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d101      	bne.n	801948a <lv_btnm_create+0x56>
 8019486:	2300      	movs	r3, #0
 8019488:	e0a1      	b.n	80195ce <lv_btnm_create+0x19a>

    ext->btn_cnt                          = 0;
 801948a:	693b      	ldr	r3, [r7, #16]
 801948c:	2200      	movs	r2, #0
 801948e:	841a      	strh	r2, [r3, #32]
    ext->btn_id_pr                        = LV_BTNM_BTN_NONE;
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019496:	845a      	strh	r2, [r3, #34]	; 0x22
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801949e:	849a      	strh	r2, [r3, #36]	; 0x24
    ext->button_areas                     = NULL;
 80194a0:	693b      	ldr	r3, [r7, #16]
 80194a2:	2200      	movs	r2, #0
 80194a4:	605a      	str	r2, [r3, #4]
    ext->ctrl_bits                        = NULL;
 80194a6:	693b      	ldr	r3, [r7, #16]
 80194a8:	2200      	movs	r2, #0
 80194aa:	609a      	str	r2, [r3, #8]
    ext->map_p                            = NULL;
 80194ac:	693b      	ldr	r3, [r7, #16]
 80194ae:	2200      	movs	r2, #0
 80194b0:	601a      	str	r2, [r3, #0]
    ext->recolor                          = 0;
 80194b2:	693a      	ldr	r2, [r7, #16]
 80194b4:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80194b8:	f36f 0300 	bfc	r3, #0, #1
 80194bc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->one_toggle                       = 0;
 80194c0:	693a      	ldr	r2, [r7, #16]
 80194c2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80194c6:	f36f 0341 	bfc	r3, #1, #1
 80194ca:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80194ce:	693b      	ldr	r3, [r7, #16]
 80194d0:	4a42      	ldr	r2, [pc, #264]	; (80195dc <lv_btnm_create+0x1a8>)
 80194d2:	60da      	str	r2, [r3, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80194d4:	693b      	ldr	r3, [r7, #16]
 80194d6:	4a42      	ldr	r2, [pc, #264]	; (80195e0 <lv_btnm_create+0x1ac>)
 80194d8:	611a      	str	r2, [r3, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	4a41      	ldr	r2, [pc, #260]	; (80195e4 <lv_btnm_create+0x1b0>)
 80194de:	615a      	str	r2, [r3, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	4a41      	ldr	r2, [pc, #260]	; (80195e8 <lv_btnm_create+0x1b4>)
 80194e4:	619a      	str	r2, [r3, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	4a40      	ldr	r2, [pc, #256]	; (80195ec <lv_btnm_create+0x1b8>)
 80194ea:	61da      	str	r2, [r3, #28]

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 80194ec:	4b40      	ldr	r3, [pc, #256]	; (80195f0 <lv_btnm_create+0x1bc>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d105      	bne.n	8019500 <lv_btnm_create+0xcc>
 80194f4:	6978      	ldr	r0, [r7, #20]
 80194f6:	f7f1 f95c 	bl	800a7b2 <lv_obj_get_design_cb>
 80194fa:	4602      	mov	r2, r0
 80194fc:	4b3c      	ldr	r3, [pc, #240]	; (80195f0 <lv_btnm_create+0x1bc>)
 80194fe:	601a      	str	r2, [r3, #0]

    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 8019500:	493c      	ldr	r1, [pc, #240]	; (80195f4 <lv_btnm_create+0x1c0>)
 8019502:	6978      	ldr	r0, [r7, #20]
 8019504:	f7f0 ff78 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 8019508:	493b      	ldr	r1, [pc, #236]	; (80195f8 <lv_btnm_create+0x1c4>)
 801950a:	6978      	ldr	r0, [r7, #20]
 801950c:	f7f0 ff82 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new button matrix object*/
    if(copy == NULL) {
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d145      	bne.n	80195a2 <lv_btnm_create+0x16e>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 8019516:	22c8      	movs	r2, #200	; 0xc8
 8019518:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801951c:	6978      	ldr	r0, [r7, #20]
 801951e:	f7f0 f8dc 	bl	80096da <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8019522:	4936      	ldr	r1, [pc, #216]	; (80195fc <lv_btnm_create+0x1c8>)
 8019524:	6978      	ldr	r0, [r7, #20]
 8019526:	f000 f86d 	bl	8019604 <lv_btnm_set_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801952a:	f008 ffd1 	bl	80224d0 <lv_theme_get_current>
 801952e:	60b8      	str	r0, [r7, #8]
        if(th) {
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d030      	beq.n	8019598 <lv_btnm_create+0x164>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 8019536:	68bb      	ldr	r3, [r7, #8]
 8019538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801953c:	461a      	mov	r2, r3
 801953e:	2100      	movs	r1, #0
 8019540:	6978      	ldr	r0, [r7, #20]
 8019542:	f000 fa09 	bl	8019958 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801954c:	461a      	mov	r2, r3
 801954e:	2101      	movs	r1, #1
 8019550:	6978      	ldr	r0, [r7, #20]
 8019552:	f000 fa01 	bl	8019958 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801955c:	461a      	mov	r2, r3
 801955e:	2102      	movs	r1, #2
 8019560:	6978      	ldr	r0, [r7, #20]
 8019562:	f000 f9f9 	bl	8019958 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801956c:	461a      	mov	r2, r3
 801956e:	2103      	movs	r1, #3
 8019570:	6978      	ldr	r0, [r7, #20]
 8019572:	f000 f9f1 	bl	8019958 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 8019576:	68bb      	ldr	r3, [r7, #8]
 8019578:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801957c:	461a      	mov	r2, r3
 801957e:	2104      	movs	r1, #4
 8019580:	6978      	ldr	r0, [r7, #20]
 8019582:	f000 f9e9 	bl	8019958 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 8019586:	68bb      	ldr	r3, [r7, #8]
 8019588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801958c:	461a      	mov	r2, r3
 801958e:	2105      	movs	r1, #5
 8019590:	6978      	ldr	r0, [r7, #20]
 8019592:	f000 f9e1 	bl	8019958 <lv_btnm_set_style>
 8019596:	e019      	b.n	80195cc <lv_btnm_create+0x198>
        } else {
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8019598:	4919      	ldr	r1, [pc, #100]	; (8019600 <lv_btnm_create+0x1cc>)
 801959a:	6978      	ldr	r0, [r7, #20]
 801959c:	f7f0 fde5 	bl	800a16a <lv_obj_set_style>
 80195a0:	e014      	b.n	80195cc <lv_btnm_create+0x198>
        }
    }
    /*Copy an existing object*/
    else {
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80195a2:	6838      	ldr	r0, [r7, #0]
 80195a4:	f7f1 f911 	bl	800a7ca <lv_obj_get_ext_attr>
 80195a8:	60f8      	str	r0, [r7, #12]
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 80195aa:	693b      	ldr	r3, [r7, #16]
 80195ac:	f103 000c 	add.w	r0, r3, #12
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	330c      	adds	r3, #12
 80195b4:	2214      	movs	r2, #20
 80195b6:	4619      	mov	r1, r3
 80195b8:	f011 fd2a 	bl	802b010 <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 80195bc:	6838      	ldr	r0, [r7, #0]
 80195be:	f000 faac 	bl	8019b1a <lv_btnm_get_map_array>
 80195c2:	4603      	mov	r3, r0
 80195c4:	4619      	mov	r1, r3
 80195c6:	6978      	ldr	r0, [r7, #20]
 80195c8:	f000 f81c 	bl	8019604 <lv_btnm_set_map>
    }

    LV_LOG_INFO("button matrix created");

    return new_btnm;
 80195cc:	697b      	ldr	r3, [r7, #20]
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	3718      	adds	r7, #24
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
 80195d6:	bf00      	nop
 80195d8:	200177c0 	.word	0x200177c0
 80195dc:	2001b8d8 	.word	0x2001b8d8
 80195e0:	2001b914 	.word	0x2001b914
 80195e4:	2001ba7c 	.word	0x2001ba7c
 80195e8:	2001baf4 	.word	0x2001baf4
 80195ec:	2001b9c8 	.word	0x2001b9c8
 80195f0:	200177bc 	.word	0x200177bc
 80195f4:	0801a085 	.word	0x0801a085
 80195f8:	08019c1d 	.word	0x08019c1d
 80195fc:	200027b4 	.word	0x200027b4
 8019600:	2001b950 	.word	0x2001b950

08019604 <lv_btnm_set_map>:
 * be deallocated during the life of the matrix.
 * @param btnm pointer to a button matrix object
 * @param map pointer a string array. The last string has to be: "". Use "\n" to make a line break.
 */
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
{
 8019604:	b590      	push	{r4, r7, lr}
 8019606:	b091      	sub	sp, #68	; 0x44
 8019608:	af02      	add	r7, sp, #8
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	6039      	str	r1, [r7, #0]
    if(map == NULL) return;
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	2b00      	cmp	r3, #0
 8019612:	f000 819a 	beq.w	801994a <lv_btnm_set_map+0x346>
     * to hidden/longpress/disabled states after the map was originally set.
     *
     * TODO: separate all map set/allocation from layout code below and skip
     * set/allocation when map hasn't changed.
     */
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019616:	6878      	ldr	r0, [r7, #4]
 8019618:	f7f1 f8d7 	bl	800a7ca <lv_obj_get_ext_attr>
 801961c:	61f8      	str	r0, [r7, #28]
    if(!maps_are_identical(ext->map_p, map)) {
 801961e:	69fb      	ldr	r3, [r7, #28]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	6839      	ldr	r1, [r7, #0]
 8019624:	4618      	mov	r0, r3
 8019626:	f001 fab3 	bl	801ab90 <maps_are_identical>
 801962a:	4603      	mov	r3, r0
 801962c:	f083 0301 	eor.w	r3, r3, #1
 8019630:	b2db      	uxtb	r3, r3
 8019632:	2b00      	cmp	r3, #0
 8019634:	d003      	beq.n	801963e <lv_btnm_set_map+0x3a>

        /*Analyze the map and create the required number of buttons*/
        allocate_btn_areas_and_controls(btnm, map);
 8019636:	6839      	ldr	r1, [r7, #0]
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f001 f8e9 	bl	801a810 <allocate_btn_areas_and_controls>
    }
    ext->map_p = map;
 801963e:	69fb      	ldr	r3, [r7, #28]
 8019640:	683a      	ldr	r2, [r7, #0]
 8019642:	601a      	str	r2, [r3, #0]

    /*Set size and positions of the buttons*/
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8019644:	2100      	movs	r1, #0
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f000 faa8 	bl	8019b9c <lv_btnm_get_style>
 801964c:	61b8      	str	r0, [r7, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 801964e:	6878      	ldr	r0, [r7, #4]
 8019650:	f7f0 ffd0 	bl	800a5f4 <lv_obj_get_width>
 8019654:	4603      	mov	r3, r0
 8019656:	b29a      	uxth	r2, r3
 8019658:	69bb      	ldr	r3, [r7, #24]
 801965a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801965e:	b29b      	uxth	r3, r3
 8019660:	1ad3      	subs	r3, r2, r3
 8019662:	b29a      	uxth	r2, r3
 8019664:	69bb      	ldr	r3, [r7, #24]
 8019666:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801966a:	b29b      	uxth	r3, r3
 801966c:	1ad3      	subs	r3, r2, r3
 801966e:	b29b      	uxth	r3, r3
 8019670:	82fb      	strh	r3, [r7, #22]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f7f0 ffcc 	bl	800a610 <lv_obj_get_height>
 8019678:	4603      	mov	r3, r0
 801967a:	b29a      	uxth	r2, r3
 801967c:	69bb      	ldr	r3, [r7, #24]
 801967e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019682:	b29b      	uxth	r3, r3
 8019684:	1ad3      	subs	r3, r2, r3
 8019686:	b29a      	uxth	r2, r3
 8019688:	69bb      	ldr	r3, [r7, #24]
 801968a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801968e:	b29b      	uxth	r3, r3
 8019690:	1ad3      	subs	r3, r2, r3
 8019692:	b29b      	uxth	r3, r3
 8019694:	82bb      	strh	r3, [r7, #20]
    lv_coord_t act_y            = style_bg->body.padding.top;
 8019696:	69bb      	ldr	r3, [r7, #24]
 8019698:	8adb      	ldrh	r3, [r3, #22]
 801969a:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*Count the lines to calculate button height*/
    uint8_t line_cnt = 1;
 801969c:	2301      	movs	r3, #1
 801969e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t li;
    for(li = 0; strlen(map[li]) != 0; li++) {
 80196a2:	2300      	movs	r3, #0
 80196a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80196a8:	e016      	b.n	80196d8 <lv_btnm_set_map+0xd4>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 80196aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80196ae:	009b      	lsls	r3, r3, #2
 80196b0:	683a      	ldr	r2, [r7, #0]
 80196b2:	4413      	add	r3, r2
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	49a7      	ldr	r1, [pc, #668]	; (8019954 <lv_btnm_set_map+0x350>)
 80196b8:	4618      	mov	r0, r3
 80196ba:	f7e6 fd89 	bl	80001d0 <strcmp>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d104      	bne.n	80196ce <lv_btnm_set_map+0xca>
 80196c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80196c8:	3301      	adds	r3, #1
 80196ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for(li = 0; strlen(map[li]) != 0; li++) {
 80196ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80196d2:	3301      	adds	r3, #1
 80196d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80196d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80196dc:	009b      	lsls	r3, r3, #2
 80196de:	683a      	ldr	r2, [r7, #0]
 80196e0:	4413      	add	r3, r2
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	781b      	ldrb	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d1df      	bne.n	80196aa <lv_btnm_set_map+0xa6>
    }

    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 80196ea:	8aba      	ldrh	r2, [r7, #20]
 80196ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80196f0:	3b01      	subs	r3, #1
 80196f2:	b299      	uxth	r1, r3
 80196f4:	69bb      	ldr	r3, [r7, #24]
 80196f6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	fb11 f303 	smulbb	r3, r1, r3
 8019700:	b29b      	uxth	r3, r3
 8019702:	1ad3      	subs	r3, r2, r3
 8019704:	b29b      	uxth	r3, r3
 8019706:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h            = btn_h / line_cnt;
 8019708:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801970c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8019710:	fb92 f3f3 	sdiv	r3, r2, r3
 8019714:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 8019716:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801971a:	b29b      	uxth	r3, r3
 801971c:	3b01      	subs	r3, #1
 801971e:	b29b      	uxth	r3, r3
 8019720:	867b      	strh	r3, [r7, #50]	; 0x32
    /* Count the units and the buttons in a line
     * (A button can be 1,2,3... unit wide)*/
    uint16_t unit_cnt;           /*Number of units in a row*/
    uint16_t unit_act_cnt;       /*Number of units currently put in a row*/
    uint16_t btn_cnt;            /*Number of buttons in a row*/
    uint16_t i_tot          = 0; /*Act. index in the str map*/
 8019722:	2300      	movs	r3, #0
 8019724:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 8019726:	2300      	movs	r3, #0
 8019728:	853b      	strh	r3, [r7, #40]	; 0x28
    const char ** map_p_tmp = map;
 801972a:	683b      	ldr	r3, [r7, #0]
 801972c:	627b      	str	r3, [r7, #36]	; 0x24

    /*Count the units and the buttons in a line*/
    while(1) {
        unit_cnt = 0;
 801972e:	2300      	movs	r3, #0
 8019730:	863b      	strh	r3, [r7, #48]	; 0x30
        btn_cnt  = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	85bb      	strh	r3, [r7, #44]	; 0x2c
        /*Count the buttons in a line*/
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8019736:	e012      	b.n	801975e <lv_btnm_set_map+0x15a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 8019738:	69fb      	ldr	r3, [r7, #28]
 801973a:	689a      	ldr	r2, [r3, #8]
 801973c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801973e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019740:	440b      	add	r3, r1
 8019742:	005b      	lsls	r3, r3, #1
 8019744:	4413      	add	r3, r2
 8019746:	881b      	ldrh	r3, [r3, #0]
 8019748:	4618      	mov	r0, r3
 801974a:	f001 f8d7 	bl	801a8fc <get_button_width>
 801974e:	4603      	mov	r3, r0
 8019750:	b29a      	uxth	r2, r3
 8019752:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019754:	4413      	add	r3, r2
 8019756:	863b      	strh	r3, [r7, #48]	; 0x30
            btn_cnt++;
 8019758:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801975a:	3301      	adds	r3, #1
 801975c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 801975e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019764:	4413      	add	r3, r2
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	497a      	ldr	r1, [pc, #488]	; (8019954 <lv_btnm_set_map+0x350>)
 801976a:	4618      	mov	r0, r3
 801976c:	f7e6 fd30 	bl	80001d0 <strcmp>
 8019770:	4603      	mov	r3, r0
 8019772:	2b00      	cmp	r3, #0
 8019774:	d007      	beq.n	8019786 <lv_btnm_set_map+0x182>
 8019776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019778:	009b      	lsls	r3, r3, #2
 801977a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801977c:	4413      	add	r3, r2
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	781b      	ldrb	r3, [r3, #0]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d1d8      	bne.n	8019738 <lv_btnm_set_map+0x134>
        }

        /*Make sure the last row is at the bottom of 'btnm'*/
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 8019786:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019788:	009b      	lsls	r3, r3, #2
 801978a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801978c:	4413      	add	r3, r2
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	781b      	ldrb	r3, [r3, #0]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d10c      	bne.n	80197b0 <lv_btnm_set_map+0x1ac>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 8019796:	8aba      	ldrh	r2, [r7, #20]
 8019798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801979a:	1ad3      	subs	r3, r2, r3
 801979c:	b29a      	uxth	r2, r3
 801979e:	69bb      	ldr	r3, [r7, #24]
 80197a0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80197a4:	b29b      	uxth	r3, r3
 80197a6:	4413      	add	r3, r2
 80197a8:	b29b      	uxth	r3, r3
 80197aa:	3b01      	subs	r3, #1
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        /*Only deal with the non empty lines*/
        if(btn_cnt != 0) {
 80197b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	f000 80a7 	beq.w	8019906 <lv_btnm_set_map+0x302>
            /*Calculate the width of all units*/
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 80197b8:	8afa      	ldrh	r2, [r7, #22]
 80197ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80197bc:	3b01      	subs	r3, #1
 80197be:	b299      	uxth	r1, r3
 80197c0:	69bb      	ldr	r3, [r7, #24]
 80197c2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80197c6:	b29b      	uxth	r3, r3
 80197c8:	fb11 f303 	smulbb	r3, r1, r3
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	827b      	strh	r3, [r7, #18]

            /*Set the button size and positions and set the texts*/
            uint16_t i;
            lv_coord_t act_x = style_bg->body.padding.left;
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	8b5b      	ldrh	r3, [r3, #26]
 80197d8:	823b      	strh	r3, [r7, #16]
            lv_coord_t act_unit_w;
            unit_act_cnt = 0;
 80197da:	2300      	movs	r3, #0
 80197dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(i = 0; i < btn_cnt; i++) {
 80197de:	2300      	movs	r3, #0
 80197e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80197e2:	e08b      	b.n	80198fc <lv_btnm_set_map+0x2f8>
                /* one_unit_w = all_unit_w / unit_cnt
                 * act_unit_w = one_unit_w * button_width
                 * do this two operations but the multiply first to divide a greater number */
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 80197e4:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 80197e8:	69fb      	ldr	r3, [r7, #28]
 80197ea:	689a      	ldr	r2, [r3, #8]
 80197ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197ee:	005b      	lsls	r3, r3, #1
 80197f0:	4413      	add	r3, r2
 80197f2:	881b      	ldrh	r3, [r3, #0]
 80197f4:	4618      	mov	r0, r3
 80197f6:	f001 f881 	bl	801a8fc <get_button_width>
 80197fa:	4603      	mov	r3, r0
 80197fc:	fb03 f204 	mul.w	r2, r3, r4
 8019800:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019802:	fb92 f3f3 	sdiv	r3, r2, r3
 8019806:	81fb      	strh	r3, [r7, #14]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 8019808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801980c:	b29b      	uxth	r3, r3
 801980e:	3b01      	subs	r3, #1
 8019810:	b29b      	uxth	r3, r3
 8019812:	81fb      	strh	r3, [r7, #14]

                /*Always recalculate act_x because of rounding errors */
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8019814:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019816:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801981a:	fb02 f203 	mul.w	r2, r2, r3
 801981e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019820:	fb92 f3f3 	sdiv	r3, r2, r3
 8019824:	b29a      	uxth	r2, r3
 8019826:	69bb      	ldr	r3, [r7, #24]
 8019828:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801982c:	b29b      	uxth	r3, r3
 801982e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8019830:	fb11 f303 	smulbb	r3, r1, r3
 8019834:	b29b      	uxth	r3, r3
 8019836:	4413      	add	r3, r2
 8019838:	b29a      	uxth	r2, r3
                        style_bg->body.padding.left;
 801983a:	69bb      	ldr	r3, [r7, #24]
 801983c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019840:	b29b      	uxth	r3, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8019842:	4413      	add	r3, r2
 8019844:	b29b      	uxth	r3, r3
 8019846:	823b      	strh	r3, [r7, #16]

                /* Set the button's area.
                 * If inner padding is zero then use the prev. button x2 as x1 to avoid rounding
                 * errors*/
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d126      	bne.n	80198a0 <lv_btnm_set_map+0x29c>
 8019852:	69bb      	ldr	r3, [r7, #24]
 8019854:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019858:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801985c:	429a      	cmp	r2, r3
 801985e:	d01f      	beq.n	80198a0 <lv_btnm_set_map+0x29c>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8019860:	69fb      	ldr	r3, [r7, #28]
 8019862:	685a      	ldr	r2, [r3, #4]
 8019864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019866:	00db      	lsls	r3, r3, #3
 8019868:	18d0      	adds	r0, r2, r3
 801986a:	69fb      	ldr	r3, [r7, #28]
 801986c:	685a      	ldr	r2, [r3, #4]
 801986e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019870:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019874:	3b01      	subs	r3, #1
 8019876:	00db      	lsls	r3, r3, #3
 8019878:	4413      	add	r3, r2
 801987a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801987e:	8a3a      	ldrh	r2, [r7, #16]
 8019880:	89fb      	ldrh	r3, [r7, #14]
 8019882:	4413      	add	r3, r2
 8019884:	b29b      	uxth	r3, r3
 8019886:	b21c      	sxth	r4, r3
                                act_y + btn_h);
 8019888:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801988a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801988c:	4413      	add	r3, r2
 801988e:	b29b      	uxth	r3, r3
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8019890:	b21b      	sxth	r3, r3
 8019892:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8019896:	9300      	str	r3, [sp, #0]
 8019898:	4623      	mov	r3, r4
 801989a:	f7fc fc85 	bl	80161a8 <lv_area_set>
 801989e:	e016      	b.n	80198ce <lv_btnm_set_map+0x2ca>
                } else {
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	685a      	ldr	r2, [r3, #4]
 80198a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80198a6:	00db      	lsls	r3, r3, #3
 80198a8:	18d0      	adds	r0, r2, r3
 80198aa:	8a3a      	ldrh	r2, [r7, #16]
 80198ac:	89fb      	ldrh	r3, [r7, #14]
 80198ae:	4413      	add	r3, r2
 80198b0:	b29b      	uxth	r3, r3
 80198b2:	b21c      	sxth	r4, r3
 80198b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80198b8:	4413      	add	r3, r2
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	b21b      	sxth	r3, r3
 80198be:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80198c2:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80198c6:	9300      	str	r3, [sp, #0]
 80198c8:	4623      	mov	r3, r4
 80198ca:	f7fc fc6d 	bl	80161a8 <lv_area_set>
                }

                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 80198ce:	69fb      	ldr	r3, [r7, #28]
 80198d0:	689a      	ldr	r2, [r3, #8]
 80198d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80198d4:	005b      	lsls	r3, r3, #1
 80198d6:	4413      	add	r3, r2
 80198d8:	881b      	ldrh	r3, [r3, #0]
 80198da:	4618      	mov	r0, r3
 80198dc:	f001 f80e 	bl	801a8fc <get_button_width>
 80198e0:	4603      	mov	r3, r0
 80198e2:	b29a      	uxth	r2, r3
 80198e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80198e6:	4413      	add	r3, r2
 80198e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

                i_tot++;
 80198ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198ec:	3301      	adds	r3, #1
 80198ee:	857b      	strh	r3, [r7, #42]	; 0x2a
                btn_i++;
 80198f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80198f2:	3301      	adds	r3, #1
 80198f4:	853b      	strh	r3, [r7, #40]	; 0x28
            for(i = 0; i < btn_cnt; i++) {
 80198f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80198f8:	3301      	adds	r3, #1
 80198fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80198fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80198fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019900:	429a      	cmp	r2, r3
 8019902:	f4ff af6f 	bcc.w	80197e4 <lv_btnm_set_map+0x1e0>
            }
        }
        act_y += btn_h + style_bg->body.padding.inner;
 8019906:	69bb      	ldr	r3, [r7, #24]
 8019908:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801990c:	b29a      	uxth	r2, r3
 801990e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019910:	4413      	add	r3, r2
 8019912:	b29a      	uxth	r2, r3
 8019914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019916:	4413      	add	r3, r2
 8019918:	b29b      	uxth	r3, r3
 801991a:	86fb      	strh	r3, [r7, #54]	; 0x36

        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 801991c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801991e:	009b      	lsls	r3, r3, #2
 8019920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019922:	4413      	add	r3, r2
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	781b      	ldrb	r3, [r3, #0]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d009      	beq.n	8019940 <lv_btnm_set_map+0x33c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 801992c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801992e:	3301      	adds	r3, #1
 8019930:	009b      	lsls	r3, r3, #2
 8019932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019934:	4413      	add	r3, r2
 8019936:	627b      	str	r3, [r7, #36]	; 0x24
        i_tot++;                                   /*Skip the '\n'*/
 8019938:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801993a:	3301      	adds	r3, #1
 801993c:	857b      	strh	r3, [r7, #42]	; 0x2a
        unit_cnt = 0;
 801993e:	e6f6      	b.n	801972e <lv_btnm_set_map+0x12a>
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8019940:	bf00      	nop
    }

    lv_obj_invalidate(btnm);
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	f7ef fd15 	bl	8009372 <lv_obj_invalidate>
 8019948:	e000      	b.n	801994c <lv_btnm_set_map+0x348>
    if(map == NULL) return;
 801994a:	bf00      	nop
}
 801994c:	373c      	adds	r7, #60	; 0x3c
 801994e:	46bd      	mov	sp, r7
 8019950:	bd90      	pop	{r4, r7, pc}
 8019952:	bf00      	nop
 8019954:	0802d4a0 	.word	0x0802d4a0

08019958 <lv_btnm_set_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b086      	sub	sp, #24
 801995c:	af00      	add	r7, sp, #0
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	460b      	mov	r3, r1
 8019962:	607a      	str	r2, [r7, #4]
 8019964:	72fb      	strb	r3, [r7, #11]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019966:	68f8      	ldr	r0, [r7, #12]
 8019968:	f7f0 ff2f 	bl	800a7ca <lv_obj_get_ext_attr>
 801996c:	6178      	str	r0, [r7, #20]

    switch(type) {
 801996e:	7afb      	ldrb	r3, [r7, #11]
 8019970:	2b05      	cmp	r3, #5
 8019972:	d837      	bhi.n	80199e4 <lv_btnm_set_style+0x8c>
 8019974:	a201      	add	r2, pc, #4	; (adr r2, 801997c <lv_btnm_set_style+0x24>)
 8019976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801997a:	bf00      	nop
 801997c:	08019995 	.word	0x08019995
 8019980:	0801999f 	.word	0x0801999f
 8019984:	080199ad 	.word	0x080199ad
 8019988:	080199bb 	.word	0x080199bb
 801998c:	080199c9 	.word	0x080199c9
 8019990:	080199d7 	.word	0x080199d7
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 8019994:	6879      	ldr	r1, [r7, #4]
 8019996:	68f8      	ldr	r0, [r7, #12]
 8019998:	f7f0 fbe7 	bl	800a16a <lv_obj_set_style>
 801999c:	e022      	b.n	80199e4 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_REL:
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 801999e:	697b      	ldr	r3, [r7, #20]
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	60da      	str	r2, [r3, #12]
            lv_obj_invalidate(btnm);
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f7ef fce4 	bl	8009372 <lv_obj_invalidate>
            break;
 80199aa:	e01b      	b.n	80199e4 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_PR:
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	611a      	str	r2, [r3, #16]
            lv_obj_invalidate(btnm);
 80199b2:	68f8      	ldr	r0, [r7, #12]
 80199b4:	f7ef fcdd 	bl	8009372 <lv_obj_invalidate>
            break;
 80199b8:	e014      	b.n	80199e4 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_REL:
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	615a      	str	r2, [r3, #20]
            lv_obj_invalidate(btnm);
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	f7ef fcd6 	bl	8009372 <lv_obj_invalidate>
            break;
 80199c6:	e00d      	b.n	80199e4 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_PR:
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	687a      	ldr	r2, [r7, #4]
 80199cc:	619a      	str	r2, [r3, #24]
            lv_obj_invalidate(btnm);
 80199ce:	68f8      	ldr	r0, [r7, #12]
 80199d0:	f7ef fccf 	bl	8009372 <lv_obj_invalidate>
            break;
 80199d4:	e006      	b.n	80199e4 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_INA:
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 80199d6:	697b      	ldr	r3, [r7, #20]
 80199d8:	687a      	ldr	r2, [r7, #4]
 80199da:	61da      	str	r2, [r3, #28]
            lv_obj_invalidate(btnm);
 80199dc:	68f8      	ldr	r0, [r7, #12]
 80199de:	f7ef fcc8 	bl	8009372 <lv_obj_invalidate>
            break;
 80199e2:	bf00      	nop
    }
}
 80199e4:	bf00      	nop
 80199e6:	3718      	adds	r7, #24
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}

080199ec <lv_btnm_set_btn_ctrl>:
 * Set the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	460b      	mov	r3, r1
 80199f6:	807b      	strh	r3, [r7, #2]
 80199f8:	4613      	mov	r3, r2
 80199fa:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80199fc:	6878      	ldr	r0, [r7, #4]
 80199fe:	f7f0 fee4 	bl	800a7ca <lv_obj_get_ext_attr>
 8019a02:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	8c1b      	ldrh	r3, [r3, #32]
 8019a08:	887a      	ldrh	r2, [r7, #2]
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	d214      	bcs.n	8019a38 <lv_btnm_set_btn_ctrl+0x4c>

    ext->ctrl_bits[btn_id] |= ctrl;
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	689a      	ldr	r2, [r3, #8]
 8019a12:	887b      	ldrh	r3, [r7, #2]
 8019a14:	005b      	lsls	r3, r3, #1
 8019a16:	4413      	add	r3, r2
 8019a18:	8819      	ldrh	r1, [r3, #0]
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	689a      	ldr	r2, [r3, #8]
 8019a1e:	887b      	ldrh	r3, [r7, #2]
 8019a20:	005b      	lsls	r3, r3, #1
 8019a22:	4413      	add	r3, r2
 8019a24:	883a      	ldrh	r2, [r7, #0]
 8019a26:	430a      	orrs	r2, r1
 8019a28:	b292      	uxth	r2, r2
 8019a2a:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 8019a2c:	887b      	ldrh	r3, [r7, #2]
 8019a2e:	4619      	mov	r1, r3
 8019a30:	6878      	ldr	r0, [r7, #4]
 8019a32:	f001 f856 	bl	801aae2 <invalidate_button_area>
 8019a36:	e000      	b.n	8019a3a <lv_btnm_set_btn_ctrl+0x4e>
    if(btn_id >= ext->btn_cnt) return;
 8019a38:	bf00      	nop
}
 8019a3a:	3710      	adds	r7, #16
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <lv_btnm_clear_btn_ctrl>:
 * Clear the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	807b      	strh	r3, [r7, #2]
 8019a4c:	4613      	mov	r3, r2
 8019a4e:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	f7f0 feba 	bl	800a7ca <lv_obj_get_ext_attr>
 8019a56:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	8c1b      	ldrh	r3, [r3, #32]
 8019a5c:	887a      	ldrh	r2, [r7, #2]
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	d219      	bcs.n	8019a96 <lv_btnm_clear_btn_ctrl+0x56>

    ext->ctrl_bits[btn_id] &= (~ctrl);
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	689a      	ldr	r2, [r3, #8]
 8019a66:	887b      	ldrh	r3, [r7, #2]
 8019a68:	005b      	lsls	r3, r3, #1
 8019a6a:	4413      	add	r3, r2
 8019a6c:	881b      	ldrh	r3, [r3, #0]
 8019a6e:	b21a      	sxth	r2, r3
 8019a70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8019a74:	43db      	mvns	r3, r3
 8019a76:	b21b      	sxth	r3, r3
 8019a78:	4013      	ands	r3, r2
 8019a7a:	b219      	sxth	r1, r3
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	689a      	ldr	r2, [r3, #8]
 8019a80:	887b      	ldrh	r3, [r7, #2]
 8019a82:	005b      	lsls	r3, r3, #1
 8019a84:	4413      	add	r3, r2
 8019a86:	b28a      	uxth	r2, r1
 8019a88:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 8019a8a:	887b      	ldrh	r3, [r7, #2]
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f001 f827 	bl	801aae2 <invalidate_button_area>
 8019a94:	e000      	b.n	8019a98 <lv_btnm_clear_btn_ctrl+0x58>
    if(btn_id >= ext->btn_cnt) return;
 8019a96:	bf00      	nop
}
 8019a98:	3710      	adds	r7, #16
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <lv_btnm_set_btn_ctrl_all>:
 * Set the attributes of all buttons of a button matrix
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 */
void lv_btnm_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b084      	sub	sp, #16
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
 8019aa6:	460b      	mov	r3, r1
 8019aa8:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019aaa:	6878      	ldr	r0, [r7, #4]
 8019aac:	f7f0 fe8d 	bl	800a7ca <lv_obj_get_ext_attr>
 8019ab0:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	81fb      	strh	r3, [r7, #14]
 8019ab6:	e008      	b.n	8019aca <lv_btnm_set_btn_ctrl_all+0x2c>
        lv_btnm_set_btn_ctrl(btnm, i, ctrl);
 8019ab8:	887a      	ldrh	r2, [r7, #2]
 8019aba:	89fb      	ldrh	r3, [r7, #14]
 8019abc:	4619      	mov	r1, r3
 8019abe:	6878      	ldr	r0, [r7, #4]
 8019ac0:	f7ff ff94 	bl	80199ec <lv_btnm_set_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8019ac4:	89fb      	ldrh	r3, [r7, #14]
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	81fb      	strh	r3, [r7, #14]
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	8c1b      	ldrh	r3, [r3, #32]
 8019ace:	89fa      	ldrh	r2, [r7, #14]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d3f1      	bcc.n	8019ab8 <lv_btnm_set_btn_ctrl_all+0x1a>
    }
}
 8019ad4:	bf00      	nop
 8019ad6:	3710      	adds	r7, #16
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}

08019adc <lv_btnm_clear_btn_ctrl_all>:
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 * @param en true: set the attributes; false: clear the attributes
 */
void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b084      	sub	sp, #16
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	f7f0 fe6e 	bl	800a7ca <lv_obj_get_ext_attr>
 8019aee:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8019af0:	2300      	movs	r3, #0
 8019af2:	81fb      	strh	r3, [r7, #14]
 8019af4:	e008      	b.n	8019b08 <lv_btnm_clear_btn_ctrl_all+0x2c>
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 8019af6:	887a      	ldrh	r2, [r7, #2]
 8019af8:	89fb      	ldrh	r3, [r7, #14]
 8019afa:	4619      	mov	r1, r3
 8019afc:	6878      	ldr	r0, [r7, #4]
 8019afe:	f7ff ff9f 	bl	8019a40 <lv_btnm_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8019b02:	89fb      	ldrh	r3, [r7, #14]
 8019b04:	3301      	adds	r3, #1
 8019b06:	81fb      	strh	r3, [r7, #14]
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	8c1b      	ldrh	r3, [r3, #32]
 8019b0c:	89fa      	ldrh	r2, [r7, #14]
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	d3f1      	bcc.n	8019af6 <lv_btnm_clear_btn_ctrl_all+0x1a>
    }
}
 8019b12:	bf00      	nop
 8019b14:	3710      	adds	r7, #16
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}

08019b1a <lv_btnm_get_map_array>:
 * Get the current map of a button matrix
 * @param btnm pointer to a button matrix object
 * @return the current map
 */
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm)
{
 8019b1a:	b580      	push	{r7, lr}
 8019b1c:	b084      	sub	sp, #16
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7f0 fe51 	bl	800a7ca <lv_obj_get_ext_attr>
 8019b28:	60f8      	str	r0, [r7, #12]
    return ext->map_p;
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	681b      	ldr	r3, [r3, #0]
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3710      	adds	r7, #16
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}

08019b36 <lv_btnm_get_active_btn>:
 * Useful in the the `event_cb` to get the text of the button, check if hidden etc.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm)
{
 8019b36:	b580      	push	{r7, lr}
 8019b38:	b084      	sub	sp, #16
 8019b3a:	af00      	add	r7, sp, #0
 8019b3c:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019b3e:	6878      	ldr	r0, [r7, #4]
 8019b40:	f7f0 fe43 	bl	800a7ca <lv_obj_get_ext_attr>
 8019b44:	60f8      	str	r0, [r7, #12]
    return ext->btn_id_act;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3710      	adds	r7, #16
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}

08019b52 <lv_btnm_get_btn_ctrl>:
 * lv_btnm_get_pressed/released)
 * @param ctrl control values to check (ORed value can be used)
 * @return true: long press repeat is disabled; false: long press repeat enabled
 */
bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8019b52:	b580      	push	{r7, lr}
 8019b54:	b084      	sub	sp, #16
 8019b56:	af00      	add	r7, sp, #0
 8019b58:	6078      	str	r0, [r7, #4]
 8019b5a:	460b      	mov	r3, r1
 8019b5c:	807b      	strh	r3, [r7, #2]
 8019b5e:	4613      	mov	r3, r2
 8019b60:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	f7f0 fe31 	bl	800a7ca <lv_obj_get_ext_attr>
 8019b68:	60f8      	str	r0, [r7, #12]
    if(btn_id >= ext->btn_cnt) return false;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	8c1b      	ldrh	r3, [r3, #32]
 8019b6e:	887a      	ldrh	r2, [r7, #2]
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d301      	bcc.n	8019b78 <lv_btnm_get_btn_ctrl+0x26>
 8019b74:	2300      	movs	r3, #0
 8019b76:	e00d      	b.n	8019b94 <lv_btnm_get_btn_ctrl+0x42>

    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	689a      	ldr	r2, [r3, #8]
 8019b7c:	887b      	ldrh	r3, [r7, #2]
 8019b7e:	005b      	lsls	r3, r3, #1
 8019b80:	4413      	add	r3, r2
 8019b82:	881a      	ldrh	r2, [r3, #0]
 8019b84:	883b      	ldrh	r3, [r7, #0]
 8019b86:	4013      	ands	r3, r2
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	bf14      	ite	ne
 8019b8e:	2301      	movne	r3, #1
 8019b90:	2300      	moveq	r3, #0
 8019b92:	b2db      	uxtb	r3, r3
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <lv_btnm_get_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b084      	sub	sp, #16
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
 8019ba4:	460b      	mov	r3, r1
 8019ba6:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	60fb      	str	r3, [r7, #12]
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8019bac:	6878      	ldr	r0, [r7, #4]
 8019bae:	f7f0 fe0c 	bl	800a7ca <lv_obj_get_ext_attr>
 8019bb2:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8019bb4:	78fb      	ldrb	r3, [r7, #3]
 8019bb6:	2b05      	cmp	r3, #5
 8019bb8:	d827      	bhi.n	8019c0a <lv_btnm_get_style+0x6e>
 8019bba:	a201      	add	r2, pc, #4	; (adr r2, 8019bc0 <lv_btnm_get_style+0x24>)
 8019bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bc0:	08019bd9 	.word	0x08019bd9
 8019bc4:	08019be3 	.word	0x08019be3
 8019bc8:	08019beb 	.word	0x08019beb
 8019bcc:	08019bf3 	.word	0x08019bf3
 8019bd0:	08019bfb 	.word	0x08019bfb
 8019bd4:	08019c03 	.word	0x08019c03
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8019bd8:	6878      	ldr	r0, [r7, #4]
 8019bda:	f7f0 fd3b 	bl	800a654 <lv_obj_get_style>
 8019bde:	60f8      	str	r0, [r7, #12]
 8019be0:	e016      	b.n	8019c10 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	68db      	ldr	r3, [r3, #12]
 8019be6:	60fb      	str	r3, [r7, #12]
 8019be8:	e012      	b.n	8019c10 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	691b      	ldr	r3, [r3, #16]
 8019bee:	60fb      	str	r3, [r7, #12]
 8019bf0:	e00e      	b.n	8019c10 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 8019bf2:	68bb      	ldr	r3, [r7, #8]
 8019bf4:	695b      	ldr	r3, [r3, #20]
 8019bf6:	60fb      	str	r3, [r7, #12]
 8019bf8:	e00a      	b.n	8019c10 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	699b      	ldr	r3, [r3, #24]
 8019bfe:	60fb      	str	r3, [r7, #12]
 8019c00:	e006      	b.n	8019c10 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 8019c02:	68bb      	ldr	r3, [r7, #8]
 8019c04:	69db      	ldr	r3, [r3, #28]
 8019c06:	60fb      	str	r3, [r7, #12]
 8019c08:	e002      	b.n	8019c10 <lv_btnm_get_style+0x74>
        default: style = NULL; break;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	60fb      	str	r3, [r7, #12]
 8019c0e:	bf00      	nop
    }

    return style;
 8019c10:	68fb      	ldr	r3, [r7, #12]
}
 8019c12:	4618      	mov	r0, r3
 8019c14:	3710      	adds	r7, #16
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd80      	pop	{r7, pc}
 8019c1a:	bf00      	nop

08019c1c <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c1e:	b0a7      	sub	sp, #156	; 0x9c
 8019c20:	af06      	add	r7, sp, #24
 8019c22:	60f8      	str	r0, [r7, #12]
 8019c24:	60b9      	str	r1, [r7, #8]
 8019c26:	4613      	mov	r3, r2
 8019c28:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8019c2a:	79fb      	ldrb	r3, [r7, #7]
 8019c2c:	2b02      	cmp	r3, #2
 8019c2e:	d107      	bne.n	8019c40 <lv_btnm_design+0x24>
        return ancestor_design_f(btnm, mask, mode);
 8019c30:	4ba5      	ldr	r3, [pc, #660]	; (8019ec8 <lv_btnm_design+0x2ac>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	79fa      	ldrb	r2, [r7, #7]
 8019c36:	68b9      	ldr	r1, [r7, #8]
 8019c38:	68f8      	ldr	r0, [r7, #12]
 8019c3a:	4798      	blx	r3
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	e21b      	b.n	801a078 <lv_btnm_design+0x45c>
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019c40:	79fb      	ldrb	r3, [r7, #7]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	f040 8217 	bne.w	801a076 <lv_btnm_design+0x45a>

        ancestor_design_f(btnm, mask, mode);
 8019c48:	4b9f      	ldr	r3, [pc, #636]	; (8019ec8 <lv_btnm_design+0x2ac>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	79fa      	ldrb	r2, [r7, #7]
 8019c4e:	68b9      	ldr	r1, [r7, #8]
 8019c50:	68f8      	ldr	r0, [r7, #12]
 8019c52:	4798      	blx	r3

        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 8019c54:	68f8      	ldr	r0, [r7, #12]
 8019c56:	f7f0 fdb8 	bl	800a7ca <lv_obj_get_ext_attr>
 8019c5a:	6738      	str	r0, [r7, #112]	; 0x70
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 8019c5c:	68f8      	ldr	r0, [r7, #12]
 8019c5e:	f7f0 fcf9 	bl	800a654 <lv_obj_get_style>
 8019c62:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * btn_style;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f7f0 fd62 	bl	800a72e <lv_obj_get_opa_scale>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);
 8019c70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019c74:	4619      	mov	r1, r3
 8019c76:	68f8      	ldr	r0, [r7, #12]
 8019c78:	f7f0 fc7b 	bl	800a572 <lv_obj_get_coords>

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        uint16_t txt_i = 0;
 8019c82:	2300      	movs	r3, #0
 8019c84:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        lv_style_t style_tmp;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 8019c88:	2300      	movs	r3, #0
 8019c8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 8019c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8019c94:	f003 0301 	and.w	r3, r3, #1
 8019c98:	b2db      	uxtb	r3, r3
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d002      	beq.n	8019ca4 <lv_btnm_design+0x88>
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8019caa:	e1dd      	b.n	801a068 <lv_btnm_design+0x44c>
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
 8019cac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019cb0:	3301      	adds	r3, #1
 8019cb2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8019cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	4413      	add	r3, r2
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	4981      	ldr	r1, [pc, #516]	; (8019ecc <lv_btnm_design+0x2b0>)
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7e6 fa82 	bl	80001d0 <strcmp>
 8019ccc:	4603      	mov	r3, r0
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d0ec      	beq.n	8019cac <lv_btnm_design+0x90>
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8019cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019cd4:	689a      	ldr	r2, [r3, #8]
 8019cd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8019cda:	005b      	lsls	r3, r3, #1
 8019cdc:	4413      	add	r3, r2
 8019cde:	881b      	ldrh	r3, [r3, #0]
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	f000 fe21 	bl	801a928 <button_is_hidden>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	f040 81b2 	bne.w	801a052 <lv_btnm_design+0x436>

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8019cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019cf0:	685a      	ldr	r2, [r3, #4]
 8019cf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	441a      	add	r2, r3
 8019cfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019cfe:	4611      	mov	r1, r2
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7ff fb5b 	bl	80193bc <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
 8019d06:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d10:	b29b      	uxth	r3, r3
 8019d12:	4413      	add	r3, r2
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	b21b      	sxth	r3, r3
 8019d18:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += area_btnm.y1;
 8019d1c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019d20:	b29a      	uxth	r2, r3
 8019d22:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019d26:	b29b      	uxth	r3, r3
 8019d28:	4413      	add	r3, r2
 8019d2a:	b29b      	uxth	r3, r3
 8019d2c:	b21b      	sxth	r3, r3
 8019d2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 += area_btnm.x1;
 8019d32:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8019d36:	b29a      	uxth	r2, r3
 8019d38:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d3c:	b29b      	uxth	r3, r3
 8019d3e:	4413      	add	r3, r2
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	b21b      	sxth	r3, r3
 8019d44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 += area_btnm.y1;
 8019d48:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019d52:	b29b      	uxth	r3, r3
 8019d54:	4413      	add	r3, r2
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	b21b      	sxth	r3, r3
 8019d5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            btn_w = lv_area_get_width(&area_tmp);
 8019d5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7ff fb38 	bl	80193d8 <lv_area_get_width>
 8019d68:	4603      	mov	r3, r0
 8019d6a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
            btn_h = lv_area_get_height(&area_tmp);
 8019d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019d72:	4618      	mov	r0, r3
 8019d74:	f7ff fb47 	bl	8019406 <lv_area_get_height>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            /*Load the style*/
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 8019d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d80:	689a      	ldr	r2, [r3, #8]
 8019d82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8019d86:	005b      	lsls	r3, r3, #1
 8019d88:	4413      	add	r3, r2
 8019d8a:	881b      	ldrh	r3, [r3, #0]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f000 fe2f 	bl	801a9f0 <button_get_tgl_state>
 8019d92:	4603      	mov	r3, r0
 8019d94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 8019d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d9a:	689a      	ldr	r2, [r3, #8]
 8019d9c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8019da0:	005b      	lsls	r3, r3, #1
 8019da2:	4413      	add	r3, r2
 8019da4:	881b      	ldrh	r3, [r3, #0]
 8019da6:	4618      	mov	r0, r3
 8019da8:	f000 fde6 	bl	801a978 <button_is_inactive>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d005      	beq.n	8019dbe <lv_btnm_design+0x1a2>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8019db2:	2105      	movs	r1, #5
 8019db4:	68f8      	ldr	r0, [r7, #12]
 8019db6:	f7ff fef1 	bl	8019b9c <lv_btnm_get_style>
 8019dba:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019dbc:	e04a      	b.n	8019e54 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 8019dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019dc0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019dc2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d00c      	beq.n	8019de4 <lv_btnm_design+0x1c8>
 8019dca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8019dce:	f083 0301 	eor.w	r3, r3, #1
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d005      	beq.n	8019de4 <lv_btnm_design+0x1c8>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8019dd8:	2101      	movs	r1, #1
 8019dda:	68f8      	ldr	r0, [r7, #12]
 8019ddc:	f7ff fede 	bl	8019b9c <lv_btnm_get_style>
 8019de0:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019de2:	e037      	b.n	8019e54 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 8019de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019de6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019de8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d10c      	bne.n	8019e0a <lv_btnm_design+0x1ee>
 8019df0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8019df4:	f083 0301 	eor.w	r3, r3, #1
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d005      	beq.n	8019e0a <lv_btnm_design+0x1ee>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 8019dfe:	2102      	movs	r1, #2
 8019e00:	68f8      	ldr	r0, [r7, #12]
 8019e02:	f7ff fecb 	bl	8019b9c <lv_btnm_get_style>
 8019e06:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019e08:	e024      	b.n	8019e54 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == true)
 8019e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e0c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019e0e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d009      	beq.n	8019e2a <lv_btnm_design+0x20e>
 8019e16:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d005      	beq.n	8019e2a <lv_btnm_design+0x20e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 8019e1e:	2103      	movs	r1, #3
 8019e20:	68f8      	ldr	r0, [r7, #12]
 8019e22:	f7ff febb 	bl	8019b9c <lv_btnm_get_style>
 8019e26:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019e28:	e014      	b.n	8019e54 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == true)
 8019e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e2c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019e2e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019e32:	429a      	cmp	r2, r3
 8019e34:	d109      	bne.n	8019e4a <lv_btnm_design+0x22e>
 8019e36:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d005      	beq.n	8019e4a <lv_btnm_design+0x22e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 8019e3e:	2104      	movs	r1, #4
 8019e40:	68f8      	ldr	r0, [r7, #12]
 8019e42:	f7ff feab 	bl	8019b9c <lv_btnm_get_style>
 8019e46:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019e48:	e004      	b.n	8019e54 <lv_btnm_design+0x238>
            else
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL); /*Not possible option, just to be sure*/
 8019e4a:	2101      	movs	r1, #1
 8019e4c:	68f8      	ldr	r0, [r7, #12]
 8019e4e:	f7ff fea5 	bl	8019b9c <lv_btnm_get_style>
 8019e52:	67f8      	str	r0, [r7, #124]	; 0x7c

            lv_style_copy(&style_tmp, btn_style);
 8019e54:	f107 0310 	add.w	r3, r7, #16
 8019e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f7f1 ff24 	bl	800bca8 <lv_style_copy>

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 8019e60:	7fbb      	ldrb	r3, [r7, #30]
 8019e62:	f003 0310 	and.w	r3, r3, #16
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d067      	beq.n	8019f3a <lv_btnm_design+0x31e>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 8019e6a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019e6e:	461a      	mov	r2, r3
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8019e76:	4619      	mov	r1, r3
 8019e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019e7e:	440b      	add	r3, r1
 8019e80:	429a      	cmp	r2, r3
 8019e82:	d104      	bne.n	8019e8e <lv_btnm_design+0x272>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8019e84:	7fbb      	ldrb	r3, [r7, #30]
 8019e86:	f023 0302 	bic.w	r3, r3, #2
 8019e8a:	b2db      	uxtb	r3, r3
 8019e8c:	77bb      	strb	r3, [r7, #30]
                }
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 8019e8e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8019e92:	461a      	mov	r2, r3
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019e9a:	4619      	mov	r1, r3
 8019e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e9e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019ea2:	1acb      	subs	r3, r1, r3
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d104      	bne.n	8019eb2 <lv_btnm_design+0x296>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 8019ea8:	7fbb      	ldrb	r3, [r7, #30]
 8019eaa:	f023 0301 	bic.w	r3, r3, #1
 8019eae:	b2db      	uxtb	r3, r3
 8019eb0:	77bb      	strb	r3, [r7, #30]
                }

                if(txt_i == 0) {
 8019eb2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d10a      	bne.n	8019ed0 <lv_btnm_design+0x2b4>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8019eba:	7fbb      	ldrb	r3, [r7, #30]
 8019ebc:	f023 0304 	bic.w	r3, r3, #4
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	77bb      	strb	r3, [r7, #30]
 8019ec4:	e01a      	b.n	8019efc <lv_btnm_design+0x2e0>
 8019ec6:	bf00      	nop
 8019ec8:	200177bc 	.word	0x200177bc
 8019ecc:	0802d4a0 	.word	0x0802d4a0
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 8019ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ed2:	681a      	ldr	r2, [r3, #0]
 8019ed4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019ed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019edc:	3b01      	subs	r3, #1
 8019ede:	009b      	lsls	r3, r3, #2
 8019ee0:	4413      	add	r3, r2
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	4966      	ldr	r1, [pc, #408]	; (801a080 <lv_btnm_design+0x464>)
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f7e6 f972 	bl	80001d0 <strcmp>
 8019eec:	4603      	mov	r3, r0
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d104      	bne.n	8019efc <lv_btnm_design+0x2e0>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8019ef2:	7fbb      	ldrb	r3, [r7, #30]
 8019ef4:	f023 0304 	bic.w	r3, r3, #4
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	77bb      	strb	r3, [r7, #30]
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 8019efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019efe:	681a      	ldr	r2, [r3, #0]
 8019f00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019f04:	3301      	adds	r3, #1
 8019f06:	009b      	lsls	r3, r3, #2
 8019f08:	4413      	add	r3, r2
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d00e      	beq.n	8019f30 <lv_btnm_design+0x314>
 8019f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f14:	681a      	ldr	r2, [r3, #0]
 8019f16:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	009b      	lsls	r3, r3, #2
 8019f1e:	4413      	add	r3, r2
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	4957      	ldr	r1, [pc, #348]	; (801a080 <lv_btnm_design+0x464>)
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7e6 f953 	bl	80001d0 <strcmp>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d104      	bne.n	8019f3a <lv_btnm_design+0x31e>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 8019f30:	7fbb      	ldrb	r3, [r7, #30]
 8019f32:	f023 0308 	bic.w	r3, r3, #8
 8019f36:	b2db      	uxtb	r3, r3
 8019f38:	77bb      	strb	r3, [r7, #30]
                }
            }
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 8019f3a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8019f3e:	f107 0210 	add.w	r2, r7, #16
 8019f42:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8019f46:	68b9      	ldr	r1, [r7, #8]
 8019f48:	f7f6 f8f3 	bl	8010132 <lv_draw_rect>

            /*Calculate the size of the text*/
            if(btn_style->glass) btn_style = bg_style;
 8019f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f4e:	781b      	ldrb	r3, [r3, #0]
 8019f50:	f003 0301 	and.w	r3, r3, #1
 8019f54:	b2db      	uxtb	r3, r3
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d001      	beq.n	8019f5e <lv_btnm_design+0x342>
 8019f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
            const lv_font_t * font = btn_style->text.font;
 8019f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f62:	663b      	str	r3, [r7, #96]	; 0x60
            lv_point_t txt_size;
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 8019f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f66:	681a      	ldr	r2, [r3, #0]
 8019f68:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019f6c:	009b      	lsls	r3, r3, #2
 8019f6e:	4413      	add	r3, r2
 8019f70:	681d      	ldr	r5, [r3, #0]
 8019f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f74:	f9b3 6028 	ldrsh.w	r6, [r3, #40]	; 0x28
 8019f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f7a:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8019f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7ff fa28 	bl	80193d8 <lv_area_get_width>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8019f90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019f94:	9302      	str	r3, [sp, #8]
 8019f96:	9201      	str	r2, [sp, #4]
 8019f98:	9400      	str	r4, [sp, #0]
 8019f9a:	4633      	mov	r3, r6
 8019f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019f9e:	4629      	mov	r1, r5
 8019fa0:	f7fd fb00 	bl	80175a4 <lv_txt_get_size>
                            btn_style->text.line_space, lv_area_get_width(&area_btnm), txt_flag);

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8019fa4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8019fa8:	b29a      	uxth	r2, r3
 8019faa:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8019fae:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8019fb2:	1a5b      	subs	r3, r3, r1
 8019fb4:	0fd9      	lsrs	r1, r3, #31
 8019fb6:	440b      	add	r3, r1
 8019fb8:	105b      	asrs	r3, r3, #1
 8019fba:	b29b      	uxth	r3, r3
 8019fbc:	4413      	add	r3, r2
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	b21b      	sxth	r3, r3
 8019fc2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8019fc6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019fca:	b29a      	uxth	r2, r3
 8019fcc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019fd0:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8019fd4:	1a5b      	subs	r3, r3, r1
 8019fd6:	0fd9      	lsrs	r1, r3, #31
 8019fd8:	440b      	add	r3, r1
 8019fda:	105b      	asrs	r3, r3, #1
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	4413      	add	r3, r2
 8019fe0:	b29b      	uxth	r3, r3
 8019fe2:	b21b      	sxth	r3, r3
 8019fe4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8019fe8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	4413      	add	r3, r2
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	b21b      	sxth	r3, r3
 8019ffa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8019ffe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801a002:	b29a      	uxth	r2, r3
 801a004:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a008:	b29b      	uxth	r3, r3
 801a00a:	4413      	add	r3, r2
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	b21b      	sxth	r3, r3
 801a010:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 801a014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a016:	681a      	ldr	r2, [r3, #0]
 801a018:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801a01c:	009b      	lsls	r3, r3, #2
 801a01e:	4413      	add	r3, r2
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 801a026:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801a02a:	2200      	movs	r2, #0
 801a02c:	9205      	str	r2, [sp, #20]
 801a02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a032:	9204      	str	r2, [sp, #16]
 801a034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a038:	9203      	str	r2, [sp, #12]
 801a03a:	2200      	movs	r2, #0
 801a03c:	9202      	str	r2, [sp, #8]
 801a03e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801a042:	9201      	str	r2, [sp, #4]
 801a044:	9300      	str	r3, [sp, #0]
 801a046:	460b      	mov	r3, r1
 801a048:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801a04a:	68b9      	ldr	r1, [r7, #8]
 801a04c:	f7f3 fdd8 	bl	800dc00 <lv_draw_label>
 801a050:	e000      	b.n	801a054 <lv_btnm_design+0x438>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 801a052:	bf00      	nop
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 801a054:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801a058:	3301      	adds	r3, #1
 801a05a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 801a05e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801a062:	3301      	adds	r3, #1
 801a064:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801a068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a06a:	8c1b      	ldrh	r3, [r3, #32]
 801a06c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801a070:	429a      	cmp	r2, r3
 801a072:	f4ff ae20 	bcc.w	8019cb6 <lv_btnm_design+0x9a>
        }
    }
    return true;
 801a076:	2301      	movs	r3, #1
}
 801a078:	4618      	mov	r0, r3
 801a07a:	3784      	adds	r7, #132	; 0x84
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a080:	0802d4a0 	.word	0x0802d4a0

0801a084 <lv_btnm_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btnm_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)
{
 801a084:	b590      	push	{r4, r7, lr}
 801a086:	b09b      	sub	sp, #108	; 0x6c
 801a088:	af00      	add	r7, sp, #0
 801a08a:	60f8      	str	r0, [r7, #12]
 801a08c:	460b      	mov	r3, r1
 801a08e:	607a      	str	r2, [r7, #4]
 801a090:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btnm, sign, param);
 801a092:	4b93      	ldr	r3, [pc, #588]	; (801a2e0 <lv_btnm_signal+0x25c>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	7af9      	ldrb	r1, [r7, #11]
 801a098:	687a      	ldr	r2, [r7, #4]
 801a09a:	68f8      	ldr	r0, [r7, #12]
 801a09c:	4798      	blx	r3
 801a09e:	4603      	mov	r3, r0
 801a0a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(res != LV_RES_OK) return res;
 801a0a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a0a8:	2b01      	cmp	r3, #1
 801a0aa:	d002      	beq.n	801a0b2 <lv_btnm_signal+0x2e>
 801a0ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a0b0:	e3a7      	b.n	801a802 <lv_btnm_signal+0x77e>

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a0b2:	68f8      	ldr	r0, [r7, #12]
 801a0b4:	f7f0 fb89 	bl	800a7ca <lv_obj_get_ext_attr>
 801a0b8:	65f8      	str	r0, [r7, #92]	; 0x5c
    lv_point_t p;
    if(sign == LV_SIGNAL_CLEANUP) {
 801a0ba:	7afb      	ldrb	r3, [r7, #11]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d10a      	bne.n	801a0d6 <lv_btnm_signal+0x52>
        lv_mem_free(ext->button_areas);
 801a0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f7fc ff61 	bl	8016f8c <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 801a0ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a0cc:	689b      	ldr	r3, [r3, #8]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7fc ff5c 	bl	8016f8c <lv_mem_free>
 801a0d4:	e393      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 801a0d6:	7afb      	ldrb	r3, [r7, #11]
 801a0d8:	2b04      	cmp	r3, #4
 801a0da:	d002      	beq.n	801a0e2 <lv_btnm_signal+0x5e>
 801a0dc:	7afb      	ldrb	r3, [r7, #11]
 801a0de:	2b02      	cmp	r3, #2
 801a0e0:	d106      	bne.n	801a0f0 <lv_btnm_signal+0x6c>
        lv_btnm_set_map(btnm, ext->map_p);
 801a0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	68f8      	ldr	r0, [r7, #12]
 801a0ea:	f7ff fa8b 	bl	8019604 <lv_btnm_set_map>
 801a0ee:	e386      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 801a0f0:	7afb      	ldrb	r3, [r7, #11]
 801a0f2:	2b07      	cmp	r3, #7
 801a0f4:	d176      	bne.n	801a1e4 <lv_btnm_signal+0x160>
        lv_indev_t * indev = lv_indev_get_act();
 801a0f6:	f7ee fcb3 	bl	8008a60 <lv_indev_get_act>
 801a0fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801a0fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0fe:	f7ee fcbb 	bl	8008a78 <lv_indev_get_type>
 801a102:	4603      	mov	r3, r0
 801a104:	2b01      	cmp	r3, #1
 801a106:	d005      	beq.n	801a114 <lv_btnm_signal+0x90>
 801a108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a10a:	f7ee fcb5 	bl	8008a78 <lv_indev_get_type>
 801a10e:	4603      	mov	r3, r0
 801a110:	2b03      	cmp	r3, #3
 801a112:	d11f      	bne.n	801a154 <lv_btnm_signal+0xd0>
            uint16_t btn_pr;
            /*Search the pressed area*/
            lv_indev_get_point(param, &p);
 801a114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a118:	4619      	mov	r1, r3
 801a11a:	6878      	ldr	r0, [r7, #4]
 801a11c:	f7ee fcfc 	bl	8008b18 <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 801a120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a124:	4619      	mov	r1, r3
 801a126:	68f8      	ldr	r0, [r7, #12]
 801a128:	f000 fc76 	bl	801aa18 <get_button_from_point>
 801a12c:	4603      	mov	r3, r0
 801a12e:	857b      	strh	r3, [r7, #42]	; 0x2a

            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 801a130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a132:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a134:	4619      	mov	r1, r3
 801a136:	68f8      	ldr	r0, [r7, #12]
 801a138:	f000 fcd3 	bl	801aae2 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 801a13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a13e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801a140:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = btn_pr;
 801a142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a144:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801a146:	849a      	strh	r2, [r3, #36]	; 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 801a148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a14a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a14c:	4619      	mov	r1, r3
 801a14e:	68f8      	ldr	r0, [r7, #12]
 801a150:	f000 fcc7 	bl	801aae2 <invalidate_button_area>
        }
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 801a154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a15c:	4293      	cmp	r3, r2
 801a15e:	f000 834e 	beq.w	801a7fe <lv_btnm_signal+0x77a>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a164:	689a      	ldr	r2, [r3, #8]
 801a166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a168:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4413      	add	r3, r2
 801a16e:	881b      	ldrh	r3, [r3, #0]
 801a170:	4618      	mov	r0, r3
 801a172:	f000 fc15 	bl	801a9a0 <button_is_click_trig>
 801a176:	4603      	mov	r3, r0
 801a178:	f083 0301 	eor.w	r3, r3, #1
 801a17c:	b2db      	uxtb	r3, r3
 801a17e:	2b00      	cmp	r3, #0
 801a180:	f000 833d 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a186:	689a      	ldr	r2, [r3, #8]
 801a188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a18a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a18c:	005b      	lsls	r3, r3, #1
 801a18e:	4413      	add	r3, r2
 801a190:	881b      	ldrh	r3, [r3, #0]
 801a192:	4618      	mov	r0, r3
 801a194:	f000 fbf0 	bl	801a978 <button_is_inactive>
 801a198:	4603      	mov	r3, r0
 801a19a:	f083 0301 	eor.w	r3, r3, #1
 801a19e:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	f000 832c 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 801a1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a1a8:	689a      	ldr	r2, [r3, #8]
 801a1aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a1ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a1ae:	005b      	lsls	r3, r3, #1
 801a1b0:	4413      	add	r3, r2
 801a1b2:	881b      	ldrh	r3, [r3, #0]
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f000 fbb7 	bl	801a928 <button_is_hidden>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	f083 0301 	eor.w	r3, r3, #1
 801a1c0:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	f000 831b 	beq.w	801a7fe <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 801a1c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a1ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a1cc:	623b      	str	r3, [r7, #32]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a1ce:	f107 0320 	add.w	r3, r7, #32
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	210e      	movs	r1, #14
 801a1d6:	68f8      	ldr	r0, [r7, #12]
 801a1d8:	f7f0 f87d 	bl	800a2d6 <lv_event_send>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801a1e2:	e30c      	b.n	801a7fe <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING) {
 801a1e4:	7afb      	ldrb	r3, [r7, #11]
 801a1e6:	2b08      	cmp	r3, #8
 801a1e8:	d143      	bne.n	801a272 <lv_btnm_signal+0x1ee>
        uint16_t btn_pr;
        /*Search the pressed area*/
        lv_indev_get_point(param, &p);
 801a1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1ee:	4619      	mov	r1, r3
 801a1f0:	6878      	ldr	r0, [r7, #4]
 801a1f2:	f7ee fc91 	bl	8008b18 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 801a1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1fa:	4619      	mov	r1, r3
 801a1fc:	68f8      	ldr	r0, [r7, #12]
 801a1fe:	f000 fc0b 	bl	801aa18 <get_button_from_point>
 801a202:	4603      	mov	r3, r0
 801a204:	867b      	strh	r3, [r7, #50]	; 0x32
        /*Invalidate to old and the new areas*/;
        if(btn_pr != ext->btn_id_pr) {
 801a206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a208:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a20a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801a20c:	429a      	cmp	r2, r3
 801a20e:	d029      	beq.n	801a264 <lv_btnm_signal+0x1e0>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f7ee fc68 	bl	8008ae6 <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 801a216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a218:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a21a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a21e:	4293      	cmp	r3, r2
 801a220:	d005      	beq.n	801a22e <lv_btnm_signal+0x1aa>
                invalidate_button_area(btnm, ext->btn_id_pr);
 801a222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a224:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a226:	4619      	mov	r1, r3
 801a228:	68f8      	ldr	r0, [r7, #12]
 801a22a:	f000 fc5a 	bl	801aae2 <invalidate_button_area>
            }
            if(btn_pr != LV_BTNM_BTN_NONE) {
 801a22e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a234:	4293      	cmp	r3, r2
 801a236:	d015      	beq.n	801a264 <lv_btnm_signal+0x1e0>
                uint32_t b = ext->btn_id_act;
 801a238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a23a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a23c:	61fb      	str	r3, [r7, #28]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a23e:	f107 031c 	add.w	r3, r7, #28
 801a242:	461a      	mov	r2, r3
 801a244:	210e      	movs	r1, #14
 801a246:	68f8      	ldr	r0, [r7, #12]
 801a248:	f7f0 f845 	bl	800a2d6 <lv_event_send>
 801a24c:	4603      	mov	r3, r0
 801a24e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                if(res == LV_RES_OK) {
 801a252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801a256:	2b01      	cmp	r3, #1
 801a258:	d104      	bne.n	801a264 <lv_btnm_signal+0x1e0>
                    invalidate_button_area(btnm, btn_pr);
 801a25a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a25c:	4619      	mov	r1, r3
 801a25e:	68f8      	ldr	r0, [r7, #12]
 801a260:	f000 fc3f 	bl	801aae2 <invalidate_button_area>
                }
            }
        }

        ext->btn_id_pr  = btn_pr;
 801a264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a266:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801a268:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = btn_pr;
 801a26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a26c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801a26e:	849a      	strh	r2, [r3, #36]	; 0x24
 801a270:	e2c5      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801a272:	7afb      	ldrb	r3, [r7, #11]
 801a274:	2b0a      	cmp	r3, #10
 801a276:	f040 80a7 	bne.w	801a3c8 <lv_btnm_signal+0x344>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 801a27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a27c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a27e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a282:	4293      	cmp	r3, r2
 801a284:	f000 82bb 	beq.w	801a7fe <lv_btnm_signal+0x77a>
            /*Toggle the button if enabled*/
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 801a288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a28a:	689a      	ldr	r2, [r3, #8]
 801a28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a28e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a290:	005b      	lsls	r3, r3, #1
 801a292:	4413      	add	r3, r2
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	4618      	mov	r0, r3
 801a298:	f000 fb96 	bl	801a9c8 <button_is_tgl_enabled>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d03f      	beq.n	801a322 <lv_btnm_signal+0x29e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 801a2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2a4:	689a      	ldr	r2, [r3, #8]
 801a2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a2aa:	005b      	lsls	r3, r3, #1
 801a2ac:	4413      	add	r3, r2
 801a2ae:	881b      	ldrh	r3, [r3, #0]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f000 fb9d 	bl	801a9f0 <button_get_tgl_state>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d013      	beq.n	801a2e4 <lv_btnm_signal+0x260>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 801a2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2be:	689a      	ldr	r2, [r3, #8]
 801a2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a2c4:	005b      	lsls	r3, r3, #1
 801a2c6:	4413      	add	r3, r2
 801a2c8:	881a      	ldrh	r2, [r3, #0]
 801a2ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2cc:	6899      	ldr	r1, [r3, #8]
 801a2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a2d2:	005b      	lsls	r3, r3, #1
 801a2d4:	440b      	add	r3, r1
 801a2d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a2da:	b292      	uxth	r2, r2
 801a2dc:	801a      	strh	r2, [r3, #0]
 801a2de:	e012      	b.n	801a306 <lv_btnm_signal+0x282>
 801a2e0:	200177c0 	.word	0x200177c0
                } else {
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 801a2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2e6:	689a      	ldr	r2, [r3, #8]
 801a2e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a2ec:	005b      	lsls	r3, r3, #1
 801a2ee:	4413      	add	r3, r2
 801a2f0:	881a      	ldrh	r2, [r3, #0]
 801a2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2f4:	6899      	ldr	r1, [r3, #8]
 801a2f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a2fa:	005b      	lsls	r3, r3, #1
 801a2fc:	440b      	add	r3, r1
 801a2fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a302:	b292      	uxth	r2, r2
 801a304:	801a      	strh	r2, [r3, #0]
                }
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 801a306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a308:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a30c:	f003 0302 	and.w	r3, r3, #2
 801a310:	b2db      	uxtb	r3, r3
 801a312:	2b00      	cmp	r3, #0
 801a314:	d005      	beq.n	801a322 <lv_btnm_signal+0x29e>
 801a316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a318:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a31a:	4619      	mov	r1, r3
 801a31c:	68f8      	ldr	r0, [r7, #12]
 801a31e:	f000 fc92 	bl	801ac46 <make_one_button_toggled>
            }

            /*Invalidate to old pressed area*/;
            invalidate_button_area(btnm, ext->btn_id_pr);
 801a322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a324:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a326:	4619      	mov	r1, r3
 801a328:	68f8      	ldr	r0, [r7, #12]
 801a32a:	f000 fbda 	bl	801aae2 <invalidate_button_area>

#if LV_USE_GROUP
            /*Leave the clicked button when releases if this not the focused object in a group*/
            lv_group_t * g = lv_obj_get_group(btnm);
 801a32e:	68f8      	ldr	r0, [r7, #12]
 801a330:	f7f0 fa57 	bl	800a7e2 <lv_obj_get_group>
 801a334:	6378      	str	r0, [r7, #52]	; 0x34
            if(lv_group_get_focused(g) != btnm) {
 801a336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a338:	f7ee fa35 	bl	80087a6 <lv_group_get_focused>
 801a33c:	4602      	mov	r2, r0
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	4293      	cmp	r3, r2
 801a342:	d003      	beq.n	801a34c <lv_btnm_signal+0x2c8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801a344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a34a:	845a      	strh	r2, [r3, #34]	; 0x22
            }
#else
            ext->btn_id_pr = LV_BTNM_BTN_NONE;
#endif

            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801a34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a34e:	689a      	ldr	r2, [r3, #8]
 801a350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a352:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a354:	005b      	lsls	r3, r3, #1
 801a356:	4413      	add	r3, r2
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	4618      	mov	r0, r3
 801a35c:	f000 fb20 	bl	801a9a0 <button_is_click_trig>
 801a360:	4603      	mov	r3, r0
 801a362:	2b00      	cmp	r3, #0
 801a364:	f000 824b 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a36a:	689a      	ldr	r2, [r3, #8]
 801a36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a36e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a370:	005b      	lsls	r3, r3, #1
 801a372:	4413      	add	r3, r2
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	4618      	mov	r0, r3
 801a378:	f000 fafe 	bl	801a978 <button_is_inactive>
 801a37c:	4603      	mov	r3, r0
 801a37e:	f083 0301 	eor.w	r3, r3, #1
 801a382:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801a384:	2b00      	cmp	r3, #0
 801a386:	f000 823a 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 801a38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a38c:	689a      	ldr	r2, [r3, #8]
 801a38e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a390:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a392:	005b      	lsls	r3, r3, #1
 801a394:	4413      	add	r3, r2
 801a396:	881b      	ldrh	r3, [r3, #0]
 801a398:	4618      	mov	r0, r3
 801a39a:	f000 fac5 	bl	801a928 <button_is_hidden>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	f083 0301 	eor.w	r3, r3, #1
 801a3a4:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	f000 8229 	beq.w	801a7fe <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 801a3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a3b0:	61bb      	str	r3, [r7, #24]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a3b2:	f107 0318 	add.w	r3, r7, #24
 801a3b6:	461a      	mov	r2, r3
 801a3b8:	210e      	movs	r1, #14
 801a3ba:	68f8      	ldr	r0, [r7, #12]
 801a3bc:	f7ef ff8b 	bl	800a2d6 <lv_event_send>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801a3c6:	e21a      	b.n	801a7fe <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 801a3c8:	7afb      	ldrb	r3, [r7, #11]
 801a3ca:	2b0c      	cmp	r3, #12
 801a3cc:	d147      	bne.n	801a45e <lv_btnm_signal+0x3da>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 801a3ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	f000 8211 	beq.w	801a7fe <lv_btnm_signal+0x77a>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3de:	689a      	ldr	r2, [r3, #8]
 801a3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a3e4:	005b      	lsls	r3, r3, #1
 801a3e6:	4413      	add	r3, r2
 801a3e8:	881b      	ldrh	r3, [r3, #0]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f000 fab0 	bl	801a950 <button_is_repeat_disabled>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	f083 0301 	eor.w	r3, r3, #1
 801a3f6:	b2db      	uxtb	r3, r3
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	f000 8200 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a400:	689a      	ldr	r2, [r3, #8]
 801a402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a404:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a406:	005b      	lsls	r3, r3, #1
 801a408:	4413      	add	r3, r2
 801a40a:	881b      	ldrh	r3, [r3, #0]
 801a40c:	4618      	mov	r0, r3
 801a40e:	f000 fab3 	bl	801a978 <button_is_inactive>
 801a412:	4603      	mov	r3, r0
 801a414:	f083 0301 	eor.w	r3, r3, #1
 801a418:	b2db      	uxtb	r3, r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	f000 81ef 	beq.w	801a7fe <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 801a420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a422:	689a      	ldr	r2, [r3, #8]
 801a424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	4413      	add	r3, r2
 801a42c:	881b      	ldrh	r3, [r3, #0]
 801a42e:	4618      	mov	r0, r3
 801a430:	f000 fa7a 	bl	801a928 <button_is_hidden>
 801a434:	4603      	mov	r3, r0
 801a436:	f083 0301 	eor.w	r3, r3, #1
 801a43a:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	f000 81de 	beq.w	801a7fe <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 801a442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a444:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a446:	617b      	str	r3, [r7, #20]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a448:	f107 0314 	add.w	r3, r7, #20
 801a44c:	461a      	mov	r2, r3
 801a44e:	210e      	movs	r1, #14
 801a450:	68f8      	ldr	r0, [r7, #12]
 801a452:	f7ef ff40 	bl	800a2d6 <lv_event_send>
 801a456:	4603      	mov	r3, r0
 801a458:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801a45c:	e1cf      	b.n	801a7fe <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 801a45e:	7afb      	ldrb	r3, [r7, #11]
 801a460:	2b09      	cmp	r3, #9
 801a462:	d002      	beq.n	801a46a <lv_btnm_signal+0x3e6>
 801a464:	7afb      	ldrb	r3, [r7, #11]
 801a466:	2b10      	cmp	r3, #16
 801a468:	d10b      	bne.n	801a482 <lv_btnm_signal+0x3fe>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 801a46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a46c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a470:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = LV_BTNM_BTN_NONE;
 801a472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a478:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 801a47a:	68f8      	ldr	r0, [r7, #12]
 801a47c:	f7ee ff79 	bl	8009372 <lv_obj_invalidate>
 801a480:	e1bd      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 801a482:	7afb      	ldrb	r3, [r7, #11]
 801a484:	2b0f      	cmp	r3, #15
 801a486:	d140      	bne.n	801a50a <lv_btnm_signal+0x486>
#if LV_USE_GROUP
        lv_indev_t * indev         = lv_indev_get_act();
 801a488:	f7ee faea 	bl	8008a60 <lv_indev_get_act>
 801a48c:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801a48e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a490:	f7ee faf2 	bl	8008a78 <lv_indev_get_type>
 801a494:	4603      	mov	r3, r0
 801a496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 801a49a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801a49e:	2b01      	cmp	r3, #1
 801a4a0:	d111      	bne.n	801a4c6 <lv_btnm_signal+0x442>
            /*Select the clicked button*/
            lv_point_t p1;
            lv_indev_get_point(indev, &p1);
 801a4a2:	f107 0310 	add.w	r3, r7, #16
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a4aa:	f7ee fb35 	bl	8008b18 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 801a4ae:	f107 0310 	add.w	r3, r7, #16
 801a4b2:	4619      	mov	r1, r3
 801a4b4:	68f8      	ldr	r0, [r7, #12]
 801a4b6:	f000 faaf 	bl	801aa18 <get_button_from_point>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	873b      	strh	r3, [r7, #56]	; 0x38
            ext->btn_id_pr = btn_i;
 801a4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a4c2:	845a      	strh	r2, [r3, #34]	; 0x22
 801a4c4:	e019      	b.n	801a4fa <lv_btnm_signal+0x476>

        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a4c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801a4ca:	2b04      	cmp	r3, #4
 801a4cc:	d112      	bne.n	801a4f4 <lv_btnm_signal+0x470>
            /*In navigation mode don't select any button but in edit mode select the fist*/
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 801a4ce:	68f8      	ldr	r0, [r7, #12]
 801a4d0:	f7f0 f987 	bl	800a7e2 <lv_obj_get_group>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	f7ee f97d 	bl	80087d6 <lv_group_get_editing>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d003      	beq.n	801a4ea <lv_btnm_signal+0x466>
                ext->btn_id_pr = 0;
 801a4e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	845a      	strh	r2, [r3, #34]	; 0x22
 801a4e8:	e007      	b.n	801a4fa <lv_btnm_signal+0x476>
            else
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801a4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4f0:	845a      	strh	r2, [r3, #34]	; 0x22
 801a4f2:	e002      	b.n	801a4fa <lv_btnm_signal+0x476>
        } else {
            ext->btn_id_pr = 0;
 801a4f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	845a      	strh	r2, [r3, #34]	; 0x22
        }
#else
        ext->btn_id_pr = 0;
#endif

        ext->btn_id_act = ext->btn_id_pr;
 801a4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a4fc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a4fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a500:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 801a502:	68f8      	ldr	r0, [r7, #12]
 801a504:	f7ee ff35 	bl	8009372 <lv_obj_invalidate>
 801a508:	e179      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801a50a:	7afb      	ldrb	r3, [r7, #11]
 801a50c:	2b11      	cmp	r3, #17
 801a50e:	f040 814c 	bne.w	801a7aa <lv_btnm_signal+0x726>
        char c = *((char *)param);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if(c == LV_KEY_RIGHT) {
 801a51a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a51e:	2b13      	cmp	r3, #19
 801a520:	d125      	bne.n	801a56e <lv_btnm_signal+0x4ea>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 801a522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a524:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a52a:	4293      	cmp	r3, r2
 801a52c:	d103      	bne.n	801a536 <lv_btnm_signal+0x4b2>
                ext->btn_id_pr = 0;
 801a52e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a530:	2200      	movs	r2, #0
 801a532:	845a      	strh	r2, [r3, #34]	; 0x22
 801a534:	e005      	b.n	801a542 <lv_btnm_signal+0x4be>
            else
                ext->btn_id_pr++;
 801a536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a538:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a53a:	3301      	adds	r3, #1
 801a53c:	b29a      	uxth	r2, r3
 801a53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a540:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 801a542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a544:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a546:	461a      	mov	r2, r3
 801a548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a54a:	8c1b      	ldrh	r3, [r3, #32]
 801a54c:	3b01      	subs	r3, #1
 801a54e:	429a      	cmp	r2, r3
 801a550:	db05      	blt.n	801a55e <lv_btnm_signal+0x4da>
 801a552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a554:	8c1b      	ldrh	r3, [r3, #32]
 801a556:	3b01      	subs	r3, #1
 801a558:	b29a      	uxth	r2, r3
 801a55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a55c:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 801a55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a560:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a564:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801a566:	68f8      	ldr	r0, [r7, #12]
 801a568:	f7ee ff03 	bl	8009372 <lv_obj_invalidate>
 801a56c:	e147      	b.n	801a7fe <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_LEFT) {
 801a56e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a572:	2b14      	cmp	r3, #20
 801a574:	d11a      	bne.n	801a5ac <lv_btnm_signal+0x528>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 801a576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a578:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a57e:	4293      	cmp	r3, r2
 801a580:	d102      	bne.n	801a588 <lv_btnm_signal+0x504>
 801a582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a584:	2200      	movs	r2, #0
 801a586:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 801a588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a58a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d005      	beq.n	801a59c <lv_btnm_signal+0x518>
 801a590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a592:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a594:	3b01      	subs	r3, #1
 801a596:	b29a      	uxth	r2, r3
 801a598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a59a:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 801a59c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a59e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5a2:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801a5a4:	68f8      	ldr	r0, [r7, #12]
 801a5a6:	f7ee fee4 	bl	8009372 <lv_obj_invalidate>
 801a5aa:	e128      	b.n	801a7fe <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_DOWN) {
 801a5ac:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a5b0:	2b12      	cmp	r3, #18
 801a5b2:	d17b      	bne.n	801a6ac <lv_btnm_signal+0x628>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 801a5b4:	2100      	movs	r1, #0
 801a5b6:	68f8      	ldr	r0, [r7, #12]
 801a5b8:	f7ff faf0 	bl	8019b9c <lv_btnm_get_style>
 801a5bc:	6478      	str	r0, [r7, #68]	; 0x44
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 801a5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d103      	bne.n	801a5d2 <lv_btnm_signal+0x54e>
                ext->btn_id_pr = 0;
 801a5ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5cc:	2200      	movs	r2, #0
 801a5ce:	845a      	strh	r2, [r3, #34]	; 0x22
 801a5d0:	e064      	b.n	801a69c <lv_btnm_signal+0x618>
            } else {
                uint16_t area_below;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801a5d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5d4:	685a      	ldr	r2, [r3, #4]
 801a5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a5da:	00db      	lsls	r3, r3, #3
 801a5dc:	4413      	add	r3, r2
 801a5de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5e2:	b29c      	uxth	r4, r3
 801a5e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5e6:	685a      	ldr	r2, [r3, #4]
 801a5e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a5ec:	00db      	lsls	r3, r3, #3
 801a5ee:	4413      	add	r3, r2
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7fe fef1 	bl	80193d8 <lv_area_get_width>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	105b      	asrs	r3, r3, #1
 801a5fa:	b21b      	sxth	r3, r3
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	4423      	add	r3, r4
 801a600:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 801a602:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 801a606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a608:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a60a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801a60e:	e033      	b.n	801a678 <lv_btnm_signal+0x5f4>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 801a610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a612:	685a      	ldr	r2, [r3, #4]
 801a614:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a618:	00db      	lsls	r3, r3, #3
 801a61a:	4413      	add	r3, r2
 801a61c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a622:	6859      	ldr	r1, [r3, #4]
 801a624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a626:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a628:	00db      	lsls	r3, r3, #3
 801a62a:	440b      	add	r3, r1
 801a62c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a630:	429a      	cmp	r2, r3
 801a632:	dd1c      	ble.n	801a66e <lv_btnm_signal+0x5ea>
                       pr_center >= ext->button_areas[area_below].x1 &&
 801a634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a636:	685a      	ldr	r2, [r3, #4]
 801a638:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a63c:	00db      	lsls	r3, r3, #3
 801a63e:	4413      	add	r3, r2
 801a640:	f9b3 3000 	ldrsh.w	r3, [r3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 801a644:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801a648:	429a      	cmp	r2, r3
 801a64a:	db10      	blt.n	801a66e <lv_btnm_signal+0x5ea>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 801a64c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801a650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a652:	6859      	ldr	r1, [r3, #4]
 801a654:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a658:	00db      	lsls	r3, r3, #3
 801a65a:	440b      	add	r3, r1
 801a65c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a660:	4619      	mov	r1, r3
 801a662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a664:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a668:	440b      	add	r3, r1
                       pr_center >= ext->button_areas[area_below].x1 &&
 801a66a:	429a      	cmp	r2, r3
 801a66c:	dd0b      	ble.n	801a686 <lv_btnm_signal+0x602>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 801a66e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a672:	3301      	adds	r3, #1
 801a674:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801a678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a67a:	8c1b      	ldrh	r3, [r3, #32]
 801a67c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801a680:	429a      	cmp	r2, r3
 801a682:	d3c5      	bcc.n	801a610 <lv_btnm_signal+0x58c>
 801a684:	e000      	b.n	801a688 <lv_btnm_signal+0x604>
                        break;
 801a686:	bf00      	nop
                    }
                }

                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 801a688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a68a:	8c1b      	ldrh	r3, [r3, #32]
 801a68c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801a690:	429a      	cmp	r2, r3
 801a692:	d203      	bcs.n	801a69c <lv_btnm_signal+0x618>
 801a694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a696:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801a69a:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 801a69c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a69e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6a2:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801a6a4:	68f8      	ldr	r0, [r7, #12]
 801a6a6:	f7ee fe64 	bl	8009372 <lv_obj_invalidate>
 801a6aa:	e0a8      	b.n	801a7fe <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_UP) {
 801a6ac:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a6b0:	2b11      	cmp	r3, #17
 801a6b2:	f040 80a4 	bne.w	801a7fe <lv_btnm_signal+0x77a>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 801a6b6:	2100      	movs	r1, #0
 801a6b8:	68f8      	ldr	r0, [r7, #12]
 801a6ba:	f7ff fa6f 	bl	8019b9c <lv_btnm_get_style>
 801a6be:	64f8      	str	r0, [r7, #76]	; 0x4c
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 801a6c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a6c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6c8:	4293      	cmp	r3, r2
 801a6ca:	d103      	bne.n	801a6d4 <lv_btnm_signal+0x650>
                ext->btn_id_pr = 0;
 801a6cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	845a      	strh	r2, [r3, #34]	; 0x22
 801a6d2:	e062      	b.n	801a79a <lv_btnm_signal+0x716>
            } else {
                int16_t area_above;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801a6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6d6:	685a      	ldr	r2, [r3, #4]
 801a6d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	4413      	add	r3, r2
 801a6e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6e4:	b29c      	uxth	r4, r3
 801a6e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6e8:	685a      	ldr	r2, [r3, #4]
 801a6ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a6ee:	00db      	lsls	r3, r3, #3
 801a6f0:	4413      	add	r3, r2
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7fe fe70 	bl	80193d8 <lv_area_get_width>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	105b      	asrs	r3, r3, #1
 801a6fc:	b21b      	sxth	r3, r3
 801a6fe:	b29b      	uxth	r3, r3
 801a700:	4423      	add	r3, r4
 801a702:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 801a704:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 801a708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a70a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a70c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801a710:	e035      	b.n	801a77e <lv_btnm_signal+0x6fa>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 801a712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a714:	685a      	ldr	r2, [r3, #4]
 801a716:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a71a:	00db      	lsls	r3, r3, #3
 801a71c:	4413      	add	r3, r2
 801a71e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a724:	6859      	ldr	r1, [r3, #4]
 801a726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a728:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a72a:	00db      	lsls	r3, r3, #3
 801a72c:	440b      	add	r3, r1
 801a72e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a732:	429a      	cmp	r2, r3
 801a734:	da1c      	bge.n	801a770 <lv_btnm_signal+0x6ec>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 801a736:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 801a73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a73c:	6859      	ldr	r1, [r3, #4]
 801a73e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a742:	00db      	lsls	r3, r3, #3
 801a744:	440b      	add	r3, r1
 801a746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a74a:	4619      	mov	r1, r3
 801a74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a74e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a752:	1acb      	subs	r3, r1, r3
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 801a754:	429a      	cmp	r2, r3
 801a756:	db0b      	blt.n	801a770 <lv_btnm_signal+0x6ec>
                       pr_center <= ext->button_areas[area_above].x2) {
 801a758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a75a:	685a      	ldr	r2, [r3, #4]
 801a75c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a760:	00db      	lsls	r3, r3, #3
 801a762:	4413      	add	r3, r2
 801a764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 801a768:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 801a76c:	429a      	cmp	r2, r3
 801a76e:	dd0b      	ble.n	801a788 <lv_btnm_signal+0x704>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 801a770:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a774:	b29b      	uxth	r3, r3
 801a776:	3b01      	subs	r3, #1
 801a778:	b29b      	uxth	r3, r3
 801a77a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801a77e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a782:	2b00      	cmp	r3, #0
 801a784:	dac5      	bge.n	801a712 <lv_btnm_signal+0x68e>
 801a786:	e000      	b.n	801a78a <lv_btnm_signal+0x706>
                        break;
 801a788:	bf00      	nop
                    }
                }
                if(area_above >= 0) ext->btn_id_pr = area_above;
 801a78a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a78e:	2b00      	cmp	r3, #0
 801a790:	db03      	blt.n	801a79a <lv_btnm_signal+0x716>
 801a792:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 801a796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a798:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 801a79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a79c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801a79e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a7a0:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801a7a2:	68f8      	ldr	r0, [r7, #12]
 801a7a4:	f7ee fde5 	bl	8009372 <lv_obj_invalidate>
 801a7a8:	e029      	b.n	801a7fe <lv_btnm_signal+0x77a>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801a7aa:	7afb      	ldrb	r3, [r7, #11]
 801a7ac:	2b12      	cmp	r3, #18
 801a7ae:	d105      	bne.n	801a7bc <lv_btnm_signal+0x738>
        bool * editable = (bool *)param;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	657b      	str	r3, [r7, #84]	; 0x54
        *editable       = true;
 801a7b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	701a      	strb	r2, [r3, #0]
 801a7ba:	e020      	b.n	801a7fe <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a7bc:	7afb      	ldrb	r3, [r7, #11]
 801a7be:	2b06      	cmp	r3, #6
 801a7c0:	d11d      	bne.n	801a7fe <lv_btnm_signal+0x77a>
        lv_obj_type_t * buf = param;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	65bb      	str	r3, [r7, #88]	; 0x58
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 801a7cc:	e00b      	b.n	801a7e6 <lv_btnm_signal+0x762>
            if(buf->type[i] == NULL) break;
 801a7ce:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801a7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d009      	beq.n	801a7f0 <lv_btnm_signal+0x76c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a7dc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 801a7e6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801a7ea:	2b06      	cmp	r3, #6
 801a7ec:	d9ef      	bls.n	801a7ce <lv_btnm_signal+0x74a>
 801a7ee:	e000      	b.n	801a7f2 <lv_btnm_signal+0x76e>
            if(buf->type[i] == NULL) break;
 801a7f0:	bf00      	nop
        }
        buf->type[i] = "lv_btnm";
 801a7f2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801a7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a7f8:	4904      	ldr	r1, [pc, #16]	; (801a80c <lv_btnm_signal+0x788>)
 801a7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801a7fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801a802:	4618      	mov	r0, r3
 801a804:	376c      	adds	r7, #108	; 0x6c
 801a806:	46bd      	mov	sp, r7
 801a808:	bd90      	pop	{r4, r7, pc}
 801a80a:	bf00      	nop
 801a80c:	0802d4b8 	.word	0x0802d4b8

0801a810 <allocate_btn_areas_and_controls>:
 * Create the required number of buttons and control bytes according to a map
 * @param btnm pointer to button matrix object
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b084      	sub	sp, #16
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
 801a818:	6039      	str	r1, [r7, #0]
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
 801a81a:	2300      	movs	r3, #0
 801a81c:	81fb      	strh	r3, [r7, #14]
    uint16_t i       = 0;
 801a81e:	2300      	movs	r3, #0
 801a820:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 801a822:	e011      	b.n	801a848 <allocate_btn_areas_and_controls+0x38>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801a824:	89bb      	ldrh	r3, [r7, #12]
 801a826:	009b      	lsls	r3, r3, #2
 801a828:	683a      	ldr	r2, [r7, #0]
 801a82a:	4413      	add	r3, r2
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	4932      	ldr	r1, [pc, #200]	; (801a8f8 <allocate_btn_areas_and_controls+0xe8>)
 801a830:	4618      	mov	r0, r3
 801a832:	f7e5 fccd 	bl	80001d0 <strcmp>
 801a836:	4603      	mov	r3, r0
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d002      	beq.n	801a842 <allocate_btn_areas_and_controls+0x32>
            btn_cnt++;
 801a83c:	89fb      	ldrh	r3, [r7, #14]
 801a83e:	3301      	adds	r3, #1
 801a840:	81fb      	strh	r3, [r7, #14]
        }
        i++;
 801a842:	89bb      	ldrh	r3, [r7, #12]
 801a844:	3301      	adds	r3, #1
 801a846:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 801a848:	89bb      	ldrh	r3, [r7, #12]
 801a84a:	009b      	lsls	r3, r3, #2
 801a84c:	683a      	ldr	r2, [r7, #0]
 801a84e:	4413      	add	r3, r2
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	781b      	ldrb	r3, [r3, #0]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d1e5      	bne.n	801a824 <allocate_btn_areas_and_controls+0x14>
    }

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f7ef ffb6 	bl	800a7ca <lv_obj_get_ext_attr>
 801a85e:	60b8      	str	r0, [r7, #8]

    if(ext->button_areas != NULL) {
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d007      	beq.n	801a878 <allocate_btn_areas_and_controls+0x68>
        lv_mem_free(ext->button_areas);
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	685b      	ldr	r3, [r3, #4]
 801a86c:	4618      	mov	r0, r3
 801a86e:	f7fc fb8d 	bl	8016f8c <lv_mem_free>
        ext->button_areas = NULL;
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	2200      	movs	r2, #0
 801a876:	605a      	str	r2, [r3, #4]
    }
    if(ext->ctrl_bits != NULL) {
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	689b      	ldr	r3, [r3, #8]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d007      	beq.n	801a890 <allocate_btn_areas_and_controls+0x80>
        lv_mem_free(ext->ctrl_bits);
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	689b      	ldr	r3, [r3, #8]
 801a884:	4618      	mov	r0, r3
 801a886:	f7fc fb81 	bl	8016f8c <lv_mem_free>
        ext->ctrl_bits = NULL;
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	2200      	movs	r2, #0
 801a88e:	609a      	str	r2, [r3, #8]
    }

    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801a890:	89fb      	ldrh	r3, [r7, #14]
 801a892:	00db      	lsls	r3, r3, #3
 801a894:	4618      	mov	r0, r3
 801a896:	f7fc fb39 	bl	8016f0c <lv_mem_alloc>
 801a89a:	4602      	mov	r2, r0
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	605a      	str	r2, [r3, #4]
    lv_mem_assert(ext->button_areas);
 801a8a0:	68bb      	ldr	r3, [r7, #8]
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d100      	bne.n	801a8aa <allocate_btn_areas_and_controls+0x9a>
 801a8a8:	e7fe      	b.n	801a8a8 <allocate_btn_areas_and_controls+0x98>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 801a8aa:	89fb      	ldrh	r3, [r7, #14]
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7fc fb2c 	bl	8016f0c <lv_mem_alloc>
 801a8b4:	4602      	mov	r2, r0
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	609a      	str	r2, [r3, #8]
    lv_mem_assert(ext->ctrl_bits);
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	689b      	ldr	r3, [r3, #8]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d100      	bne.n	801a8c4 <allocate_btn_areas_and_controls+0xb4>
 801a8c2:	e7fe      	b.n	801a8c2 <allocate_btn_areas_and_controls+0xb2>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	685b      	ldr	r3, [r3, #4]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d003      	beq.n	801a8d4 <allocate_btn_areas_and_controls+0xc4>
 801a8cc:	68bb      	ldr	r3, [r7, #8]
 801a8ce:	689b      	ldr	r3, [r3, #8]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d101      	bne.n	801a8d8 <allocate_btn_areas_and_controls+0xc8>
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	81fb      	strh	r3, [r7, #14]

    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	6898      	ldr	r0, [r3, #8]
 801a8dc:	89fb      	ldrh	r3, [r7, #14]
 801a8de:	005b      	lsls	r3, r3, #1
 801a8e0:	461a      	mov	r2, r3
 801a8e2:	2100      	movs	r1, #0
 801a8e4:	f010 fb9f 	bl	802b026 <memset>

    ext->btn_cnt = btn_cnt;
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	89fa      	ldrh	r2, [r7, #14]
 801a8ec:	841a      	strh	r2, [r3, #32]
}
 801a8ee:	bf00      	nop
 801a8f0:	3710      	adds	r7, #16
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	0802d4a0 	.word	0x0802d4a0

0801a8fc <get_button_width>:
 * Get the width of a button in units (default is 1).
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnm_ctrl_t ctrl_bits)
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	b085      	sub	sp, #20
 801a900:	af00      	add	r7, sp, #0
 801a902:	4603      	mov	r3, r0
 801a904:	80fb      	strh	r3, [r7, #6]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 801a906:	88fb      	ldrh	r3, [r7, #6]
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	f003 0307 	and.w	r3, r3, #7
 801a90e:	73fb      	strb	r3, [r7, #15]
    return w != 0 ? w : 1;
 801a910:	7bfb      	ldrb	r3, [r7, #15]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d001      	beq.n	801a91a <get_button_width+0x1e>
 801a916:	7bfb      	ldrb	r3, [r7, #15]
 801a918:	e000      	b.n	801a91c <get_button_width+0x20>
 801a91a:	2301      	movs	r3, #1
}
 801a91c:	4618      	mov	r0, r3
 801a91e:	3714      	adds	r7, #20
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr

0801a928 <button_is_hidden>:

static bool button_is_hidden(lv_btnm_ctrl_t ctrl_bits)
{
 801a928:	b480      	push	{r7}
 801a92a:	b083      	sub	sp, #12
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	4603      	mov	r3, r0
 801a930:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 801a932:	88fb      	ldrh	r3, [r7, #6]
 801a934:	10db      	asrs	r3, r3, #3
 801a936:	f003 0301 	and.w	r3, r3, #1
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	bf14      	ite	ne
 801a93e:	2301      	movne	r3, #1
 801a940:	2300      	moveq	r3, #0
 801a942:	b2db      	uxtb	r3, r3
}
 801a944:	4618      	mov	r0, r3
 801a946:	370c      	adds	r7, #12
 801a948:	46bd      	mov	sp, r7
 801a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94e:	4770      	bx	lr

0801a950 <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnm_ctrl_t ctrl_bits)
{
 801a950:	b480      	push	{r7}
 801a952:	b083      	sub	sp, #12
 801a954:	af00      	add	r7, sp, #0
 801a956:	4603      	mov	r3, r0
 801a958:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 801a95a:	88fb      	ldrh	r3, [r7, #6]
 801a95c:	111b      	asrs	r3, r3, #4
 801a95e:	f003 0301 	and.w	r3, r3, #1
 801a962:	2b00      	cmp	r3, #0
 801a964:	bf14      	ite	ne
 801a966:	2301      	movne	r3, #1
 801a968:	2300      	moveq	r3, #0
 801a96a:	b2db      	uxtb	r3, r3
}
 801a96c:	4618      	mov	r0, r3
 801a96e:	370c      	adds	r7, #12
 801a970:	46bd      	mov	sp, r7
 801a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a976:	4770      	bx	lr

0801a978 <button_is_inactive>:

static bool button_is_inactive(lv_btnm_ctrl_t ctrl_bits)
{
 801a978:	b480      	push	{r7}
 801a97a:	b083      	sub	sp, #12
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	4603      	mov	r3, r0
 801a980:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_INACTIVE ? true : false;
 801a982:	88fb      	ldrh	r3, [r7, #6]
 801a984:	115b      	asrs	r3, r3, #5
 801a986:	f003 0301 	and.w	r3, r3, #1
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	bf14      	ite	ne
 801a98e:	2301      	movne	r3, #1
 801a990:	2300      	moveq	r3, #0
 801a992:	b2db      	uxtb	r3, r3
}
 801a994:	4618      	mov	r0, r3
 801a996:	370c      	adds	r7, #12
 801a998:	46bd      	mov	sp, r7
 801a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99e:	4770      	bx	lr

0801a9a0 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnm_ctrl_t ctrl_bits)
{
 801a9a0:	b480      	push	{r7}
 801a9a2:	b083      	sub	sp, #12
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 801a9aa:	88fb      	ldrh	r3, [r7, #6]
 801a9ac:	121b      	asrs	r3, r3, #8
 801a9ae:	f003 0301 	and.w	r3, r3, #1
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	bf14      	ite	ne
 801a9b6:	2301      	movne	r3, #1
 801a9b8:	2300      	moveq	r3, #0
 801a9ba:	b2db      	uxtb	r3, r3
}
 801a9bc:	4618      	mov	r0, r3
 801a9be:	370c      	adds	r7, #12
 801a9c0:	46bd      	mov	sp, r7
 801a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c6:	4770      	bx	lr

0801a9c8 <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnm_ctrl_t ctrl_bits)
{
 801a9c8:	b480      	push	{r7}
 801a9ca:	b083      	sub	sp, #12
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
 801a9d2:	88fb      	ldrh	r3, [r7, #6]
 801a9d4:	119b      	asrs	r3, r3, #6
 801a9d6:	f003 0301 	and.w	r3, r3, #1
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	bf14      	ite	ne
 801a9de:	2301      	movne	r3, #1
 801a9e0:	2300      	moveq	r3, #0
 801a9e2:	b2db      	uxtb	r3, r3
}
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	370c      	adds	r7, #12
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ee:	4770      	bx	lr

0801a9f0 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
 801a9f0:	b480      	push	{r7}
 801a9f2:	b083      	sub	sp, #12
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 801a9fa:	88fb      	ldrh	r3, [r7, #6]
 801a9fc:	11db      	asrs	r3, r3, #7
 801a9fe:	f003 0301 	and.w	r3, r3, #1
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	bf14      	ite	ne
 801aa06:	2301      	movne	r3, #1
 801aa08:	2300      	moveq	r3, #0
 801aa0a:	b2db      	uxtb	r3, r3
}
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	370c      	adds	r7, #12
 801aa10:	46bd      	mov	sp, r7
 801aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa16:	4770      	bx	lr

0801aa18 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNM_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b088      	sub	sp, #32
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
 801aa20:	6039      	str	r1, [r7, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f7ef fed1 	bl	800a7ca <lv_obj_get_ext_attr>
 801aa28:	61b8      	str	r0, [r7, #24]
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 801aa2a:	f107 0310 	add.w	r3, r7, #16
 801aa2e:	4619      	mov	r1, r3
 801aa30:	6878      	ldr	r0, [r7, #4]
 801aa32:	f7ef fd9e 	bl	800a572 <lv_obj_get_coords>

    for(i = 0; i < ext->btn_cnt; i++) {
 801aa36:	2300      	movs	r3, #0
 801aa38:	83fb      	strh	r3, [r7, #30]
 801aa3a:	e03e      	b.n	801aaba <get_button_from_point+0xa2>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 801aa3c:	69bb      	ldr	r3, [r7, #24]
 801aa3e:	685a      	ldr	r2, [r3, #4]
 801aa40:	8bfb      	ldrh	r3, [r7, #30]
 801aa42:	00db      	lsls	r3, r3, #3
 801aa44:	441a      	add	r2, r3
 801aa46:	f107 0308 	add.w	r3, r7, #8
 801aa4a:	4611      	mov	r1, r2
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7fe fcb5 	bl	80193bc <lv_area_copy>
        btn_area.x1 += btnm_cords.x1;
 801aa52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801aa56:	b29a      	uxth	r2, r3
 801aa58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	4413      	add	r3, r2
 801aa60:	b29b      	uxth	r3, r3
 801aa62:	b21b      	sxth	r3, r3
 801aa64:	813b      	strh	r3, [r7, #8]
        btn_area.y1 += btnm_cords.y1;
 801aa66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801aa70:	b29b      	uxth	r3, r3
 801aa72:	4413      	add	r3, r2
 801aa74:	b29b      	uxth	r3, r3
 801aa76:	b21b      	sxth	r3, r3
 801aa78:	817b      	strh	r3, [r7, #10]
        btn_area.x2 += btnm_cords.x1;
 801aa7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801aa7e:	b29a      	uxth	r2, r3
 801aa80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	4413      	add	r3, r2
 801aa88:	b29b      	uxth	r3, r3
 801aa8a:	b21b      	sxth	r3, r3
 801aa8c:	81bb      	strh	r3, [r7, #12]
        btn_area.y2 += btnm_cords.y1;
 801aa8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801aa92:	b29a      	uxth	r2, r3
 801aa94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	4413      	add	r3, r2
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	b21b      	sxth	r3, r3
 801aaa0:	81fb      	strh	r3, [r7, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 801aaa2:	f107 0308 	add.w	r3, r7, #8
 801aaa6:	6839      	ldr	r1, [r7, #0]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7fb fca2 	bl	80163f2 <lv_area_is_point_on>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d108      	bne.n	801aac6 <get_button_from_point+0xae>
    for(i = 0; i < ext->btn_cnt; i++) {
 801aab4:	8bfb      	ldrh	r3, [r7, #30]
 801aab6:	3301      	adds	r3, #1
 801aab8:	83fb      	strh	r3, [r7, #30]
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	8c1b      	ldrh	r3, [r3, #32]
 801aabe:	8bfa      	ldrh	r2, [r7, #30]
 801aac0:	429a      	cmp	r2, r3
 801aac2:	d3bb      	bcc.n	801aa3c <get_button_from_point+0x24>
 801aac4:	e000      	b.n	801aac8 <get_button_from_point+0xb0>
            break;
 801aac6:	bf00      	nop
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	8c1b      	ldrh	r3, [r3, #32]
 801aacc:	8bfa      	ldrh	r2, [r7, #30]
 801aace:	429a      	cmp	r2, r3
 801aad0:	d102      	bne.n	801aad8 <get_button_from_point+0xc0>
 801aad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aad6:	83fb      	strh	r3, [r7, #30]

    return i;
 801aad8:	8bfb      	ldrh	r3, [r7, #30]
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3720      	adds	r7, #32
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}

0801aae2 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
 801aae2:	b580      	push	{r7, lr}
 801aae4:	b088      	sub	sp, #32
 801aae6:	af00      	add	r7, sp, #0
 801aae8:	6078      	str	r0, [r7, #4]
 801aaea:	460b      	mov	r3, r1
 801aaec:	807b      	strh	r3, [r7, #2]
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 801aaee:	887b      	ldrh	r3, [r7, #2]
 801aaf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aaf4:	4293      	cmp	r3, r2
 801aaf6:	d047      	beq.n	801ab88 <invalidate_button_area+0xa6>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801aaf8:	6878      	ldr	r0, [r7, #4]
 801aafa:	f7ef fe66 	bl	800a7ca <lv_obj_get_ext_attr>
 801aafe:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	685a      	ldr	r2, [r3, #4]
 801ab04:	887b      	ldrh	r3, [r7, #2]
 801ab06:	00db      	lsls	r3, r3, #3
 801ab08:	441a      	add	r2, r3
 801ab0a:	f107 0314 	add.w	r3, r7, #20
 801ab0e:	4611      	mov	r1, r2
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7fe fc53 	bl	80193bc <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
 801ab16:	f107 030c 	add.w	r3, r7, #12
 801ab1a:	4619      	mov	r1, r3
 801ab1c:	6878      	ldr	r0, [r7, #4]
 801ab1e:	f7ef fd28 	bl	800a572 <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 801ab22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ab26:	b29a      	uxth	r2, r3
 801ab28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	4413      	add	r3, r2
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	b21b      	sxth	r3, r3
 801ab34:	82bb      	strh	r3, [r7, #20]
    btn_area.y1 += btnm_area.y1;
 801ab36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ab3a:	b29a      	uxth	r2, r3
 801ab3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ab40:	b29b      	uxth	r3, r3
 801ab42:	4413      	add	r3, r2
 801ab44:	b29b      	uxth	r3, r3
 801ab46:	b21b      	sxth	r3, r3
 801ab48:	82fb      	strh	r3, [r7, #22]
    btn_area.x2 += btnm_area.x1;
 801ab4a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ab4e:	b29a      	uxth	r2, r3
 801ab50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ab54:	b29b      	uxth	r3, r3
 801ab56:	4413      	add	r3, r2
 801ab58:	b29b      	uxth	r3, r3
 801ab5a:	b21b      	sxth	r3, r3
 801ab5c:	833b      	strh	r3, [r7, #24]
    btn_area.y2 += btnm_area.y1;
 801ab5e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ab62:	b29a      	uxth	r2, r3
 801ab64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ab68:	b29b      	uxth	r3, r3
 801ab6a:	4413      	add	r3, r2
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	b21b      	sxth	r3, r3
 801ab70:	837b      	strh	r3, [r7, #26]

    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 801ab72:	6878      	ldr	r0, [r7, #4]
 801ab74:	f7ef fc9a 	bl	800a4ac <lv_obj_get_disp>
 801ab78:	4602      	mov	r2, r0
 801ab7a:	f107 0314 	add.w	r3, r7, #20
 801ab7e:	4619      	mov	r1, r3
 801ab80:	4610      	mov	r0, r2
 801ab82:	f7f0 f87b 	bl	800ac7c <lv_inv_area>
 801ab86:	e000      	b.n	801ab8a <invalidate_button_area+0xa8>
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 801ab88:	bf00      	nop
}
 801ab8a:	3720      	adds	r7, #32
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd80      	pop	{r7, pc}

0801ab90 <maps_are_identical>:
 * @param map1 map to compare
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b084      	sub	sp, #16
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
 801ab98:	6039      	str	r1, [r7, #0]
    if(map1 == map2) return true;
 801ab9a:	687a      	ldr	r2, [r7, #4]
 801ab9c:	683b      	ldr	r3, [r7, #0]
 801ab9e:	429a      	cmp	r2, r3
 801aba0:	d101      	bne.n	801aba6 <maps_are_identical+0x16>
 801aba2:	2301      	movs	r3, #1
 801aba4:	e04b      	b.n	801ac3e <maps_are_identical+0xae>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d002      	beq.n	801abb2 <maps_are_identical+0x22>
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d107      	bne.n	801abc2 <maps_are_identical+0x32>
 801abb2:	687a      	ldr	r2, [r7, #4]
 801abb4:	683b      	ldr	r3, [r7, #0]
 801abb6:	429a      	cmp	r2, r3
 801abb8:	bf0c      	ite	eq
 801abba:	2301      	moveq	r3, #1
 801abbc:	2300      	movne	r3, #0
 801abbe:	b2db      	uxtb	r3, r3
 801abc0:	e03d      	b.n	801ac3e <maps_are_identical+0xae>

    uint16_t i = 0;
 801abc2:	2300      	movs	r3, #0
 801abc4:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 801abc6:	e014      	b.n	801abf2 <maps_are_identical+0x62>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 801abc8:	89fb      	ldrh	r3, [r7, #14]
 801abca:	009b      	lsls	r3, r3, #2
 801abcc:	687a      	ldr	r2, [r7, #4]
 801abce:	4413      	add	r3, r2
 801abd0:	6818      	ldr	r0, [r3, #0]
 801abd2:	89fb      	ldrh	r3, [r7, #14]
 801abd4:	009b      	lsls	r3, r3, #2
 801abd6:	683a      	ldr	r2, [r7, #0]
 801abd8:	4413      	add	r3, r2
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	4619      	mov	r1, r3
 801abde:	f7e5 faf7 	bl	80001d0 <strcmp>
 801abe2:	4603      	mov	r3, r0
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d001      	beq.n	801abec <maps_are_identical+0x5c>
 801abe8:	2300      	movs	r3, #0
 801abea:	e028      	b.n	801ac3e <maps_are_identical+0xae>
        i++;
 801abec:	89fb      	ldrh	r3, [r7, #14]
 801abee:	3301      	adds	r3, #1
 801abf0:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 801abf2:	89fb      	ldrh	r3, [r7, #14]
 801abf4:	009b      	lsls	r3, r3, #2
 801abf6:	687a      	ldr	r2, [r7, #4]
 801abf8:	4413      	add	r3, r2
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	781b      	ldrb	r3, [r3, #0]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d007      	beq.n	801ac12 <maps_are_identical+0x82>
 801ac02:	89fb      	ldrh	r3, [r7, #14]
 801ac04:	009b      	lsls	r3, r3, #2
 801ac06:	683a      	ldr	r2, [r7, #0]
 801ac08:	4413      	add	r3, r2
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	781b      	ldrb	r3, [r3, #0]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d1da      	bne.n	801abc8 <maps_are_identical+0x38>
    }
    return map1[i][0] == '\0' && map2[i][0] == '\0';
 801ac12:	89fb      	ldrh	r3, [r7, #14]
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	687a      	ldr	r2, [r7, #4]
 801ac18:	4413      	add	r3, r2
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	781b      	ldrb	r3, [r3, #0]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d109      	bne.n	801ac36 <maps_are_identical+0xa6>
 801ac22:	89fb      	ldrh	r3, [r7, #14]
 801ac24:	009b      	lsls	r3, r3, #2
 801ac26:	683a      	ldr	r2, [r7, #0]
 801ac28:	4413      	add	r3, r2
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	781b      	ldrb	r3, [r3, #0]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d101      	bne.n	801ac36 <maps_are_identical+0xa6>
 801ac32:	2301      	movs	r3, #1
 801ac34:	e000      	b.n	801ac38 <maps_are_identical+0xa8>
 801ac36:	2300      	movs	r3, #0
 801ac38:	f003 0301 	and.w	r3, r3, #1
 801ac3c:	b2db      	uxtb	r3, r3
}
 801ac3e:	4618      	mov	r0, r3
 801ac40:	3710      	adds	r7, #16
 801ac42:	46bd      	mov	sp, r7
 801ac44:	bd80      	pop	{r7, pc}

0801ac46 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 801ac46:	b580      	push	{r7, lr}
 801ac48:	b084      	sub	sp, #16
 801ac4a:	af00      	add	r7, sp, #0
 801ac4c:	6078      	str	r0, [r7, #4]
 801ac4e:	460b      	mov	r3, r1
 801ac50:	807b      	strh	r3, [r7, #2]
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801ac52:	887b      	ldrh	r3, [r7, #2]
 801ac54:	2280      	movs	r2, #128	; 0x80
 801ac56:	4619      	mov	r1, r3
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f7fe ff7a 	bl	8019b52 <lv_btnm_get_btn_ctrl>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	73fb      	strb	r3, [r7, #15]

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 801ac62:	2180      	movs	r1, #128	; 0x80
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f7fe ff39 	bl	8019adc <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801ac6a:	7bfb      	ldrb	r3, [r7, #15]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d005      	beq.n	801ac7c <make_one_button_toggled+0x36>
 801ac70:	887b      	ldrh	r3, [r7, #2]
 801ac72:	2280      	movs	r2, #128	; 0x80
 801ac74:	4619      	mov	r1, r3
 801ac76:	6878      	ldr	r0, [r7, #4]
 801ac78:	f7fe feb8 	bl	80199ec <lv_btnm_set_btn_ctrl>
}
 801ac7c:	bf00      	nop
 801ac7e:	3710      	adds	r7, #16
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd80      	pop	{r7, pc}

0801ac84 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801ac84:	b480      	push	{r7}
 801ac86:	b083      	sub	sp, #12
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	7a1b      	ldrb	r3, [r3, #8]
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	370c      	adds	r7, #12
 801ac94:	46bd      	mov	sp, r7
 801ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9a:	4770      	bx	lr

0801ac9c <lv_cont_set_fit>:
 * It tell how to change the container's size automatically.
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b084      	sub	sp, #16
 801aca0:	af02      	add	r7, sp, #8
 801aca2:	6078      	str	r0, [r7, #4]
 801aca4:	460b      	mov	r3, r1
 801aca6:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801aca8:	78f8      	ldrb	r0, [r7, #3]
 801acaa:	78fa      	ldrb	r2, [r7, #3]
 801acac:	78f9      	ldrb	r1, [r7, #3]
 801acae:	78fb      	ldrb	r3, [r7, #3]
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	4603      	mov	r3, r0
 801acb4:	6878      	ldr	r0, [r7, #4]
 801acb6:	f000 fbf4 	bl	801b4a2 <lv_cont_set_fit4>
}
 801acba:	bf00      	nop
 801acbc:	3708      	adds	r7, #8
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}

0801acc2 <lv_btn_set_layout>:
{
 801acc2:	b580      	push	{r7, lr}
 801acc4:	b082      	sub	sp, #8
 801acc6:	af00      	add	r7, sp, #0
 801acc8:	6078      	str	r0, [r7, #4]
 801acca:	460b      	mov	r3, r1
 801accc:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 801acce:	78fb      	ldrb	r3, [r7, #3]
 801acd0:	4619      	mov	r1, r3
 801acd2:	6878      	ldr	r0, [r7, #4]
 801acd4:	f000 fbbe 	bl	801b454 <lv_cont_set_layout>
}
 801acd8:	bf00      	nop
 801acda:	3708      	adds	r7, #8
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}

0801ace0 <lv_btn_set_fit>:
 * It tell how to change the button size automatically.
 * @param btn pointer to a button object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_btn_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 801ace0:	b580      	push	{r7, lr}
 801ace2:	b082      	sub	sp, #8
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	6078      	str	r0, [r7, #4]
 801ace8:	460b      	mov	r3, r1
 801acea:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit(cont, fit);
 801acec:	78fb      	ldrb	r3, [r7, #3]
 801acee:	4619      	mov	r1, r3
 801acf0:	6878      	ldr	r0, [r7, #4]
 801acf2:	f7ff ffd3 	bl	801ac9c <lv_cont_set_fit>
}
 801acf6:	bf00      	nop
 801acf8:	3708      	adds	r7, #8
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}

0801acfe <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 801acfe:	b580      	push	{r7, lr}
 801ad00:	b082      	sub	sp, #8
 801ad02:	af00      	add	r7, sp, #0
 801ad04:	6078      	str	r0, [r7, #4]
 801ad06:	460b      	mov	r3, r1
 801ad08:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 801ad0a:	6878      	ldr	r0, [r7, #4]
 801ad0c:	f7ef fca2 	bl	800a654 <lv_obj_get_style>
 801ad10:	4603      	mov	r3, r0
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3708      	adds	r7, #8
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
	...

0801ad1c <lv_cb_create>:
 * @param par pointer to an object, it will be the parent of the new check box
 * @param copy pointer to a check box object, if not NULL then the new object will be copied from it
 * @return pointer to the created check box
 */
lv_obj_t * lv_cb_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b086      	sub	sp, #24
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
 801ad24:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("check box create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_cb = lv_btn_create(par, copy);
 801ad26:	6839      	ldr	r1, [r7, #0]
 801ad28:	6878      	ldr	r0, [r7, #4]
 801ad2a:	f7fe f825 	bl	8018d78 <lv_btn_create>
 801ad2e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cb);
 801ad30:	697b      	ldr	r3, [r7, #20]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d100      	bne.n	801ad38 <lv_cb_create+0x1c>
 801ad36:	e7fe      	b.n	801ad36 <lv_cb_create+0x1a>
    if(new_cb == NULL) return NULL;
 801ad38:	697b      	ldr	r3, [r7, #20]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d101      	bne.n	801ad42 <lv_cb_create+0x26>
 801ad3e:	2300      	movs	r3, #0
 801ad40:	e0c8      	b.n	801aed4 <lv_cb_create+0x1b8>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cb);
 801ad42:	4b66      	ldr	r3, [pc, #408]	; (801aedc <lv_cb_create+0x1c0>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d105      	bne.n	801ad56 <lv_cb_create+0x3a>
 801ad4a:	6978      	ldr	r0, [r7, #20]
 801ad4c:	f7ef fd25 	bl	800a79a <lv_obj_get_signal_cb>
 801ad50:	4602      	mov	r2, r0
 801ad52:	4b62      	ldr	r3, [pc, #392]	; (801aedc <lv_cb_create+0x1c0>)
 801ad54:	601a      	str	r2, [r3, #0]
    if(ancestor_bg_design == NULL) ancestor_bg_design = lv_obj_get_design_cb(new_cb);
 801ad56:	4b62      	ldr	r3, [pc, #392]	; (801aee0 <lv_cb_create+0x1c4>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d105      	bne.n	801ad6a <lv_cb_create+0x4e>
 801ad5e:	6978      	ldr	r0, [r7, #20]
 801ad60:	f7ef fd27 	bl	800a7b2 <lv_obj_get_design_cb>
 801ad64:	4602      	mov	r2, r0
 801ad66:	4b5e      	ldr	r3, [pc, #376]	; (801aee0 <lv_cb_create+0x1c4>)
 801ad68:	601a      	str	r2, [r3, #0]

    lv_cb_ext_t * ext = lv_obj_allocate_ext_attr(new_cb, sizeof(lv_cb_ext_t));
 801ad6a:	2124      	movs	r1, #36	; 0x24
 801ad6c:	6978      	ldr	r0, [r7, #20]
 801ad6e:	f7ef fb5f 	bl	800a430 <lv_obj_allocate_ext_attr>
 801ad72:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ad74:	693b      	ldr	r3, [r7, #16]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d100      	bne.n	801ad7c <lv_cb_create+0x60>
 801ad7a:	e7fe      	b.n	801ad7a <lv_cb_create+0x5e>
    if(ext == NULL) return NULL;
 801ad7c:	693b      	ldr	r3, [r7, #16]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d101      	bne.n	801ad86 <lv_cb_create+0x6a>
 801ad82:	2300      	movs	r3, #0
 801ad84:	e0a6      	b.n	801aed4 <lv_cb_create+0x1b8>

    ext->bullet = NULL;
 801ad86:	693b      	ldr	r3, [r7, #16]
 801ad88:	2200      	movs	r2, #0
 801ad8a:	61da      	str	r2, [r3, #28]
    ext->label  = NULL;
 801ad8c:	693b      	ldr	r3, [r7, #16]
 801ad8e:	2200      	movs	r2, #0
 801ad90:	621a      	str	r2, [r3, #32]

    lv_obj_set_signal_cb(new_cb, lv_cb_signal);
 801ad92:	4954      	ldr	r1, [pc, #336]	; (801aee4 <lv_cb_create+0x1c8>)
 801ad94:	6978      	ldr	r0, [r7, #20]
 801ad96:	f7ef fb2f 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_cb, lv_cb_design);
 801ad9a:	4953      	ldr	r1, [pc, #332]	; (801aee8 <lv_cb_create+0x1cc>)
 801ad9c:	6978      	ldr	r0, [r7, #20]
 801ad9e:	f7ef fb39 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new checkbox object*/
    if(copy == NULL) {
 801ada2:	683b      	ldr	r3, [r7, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d175      	bne.n	801ae94 <lv_cb_create+0x178>
        ext->bullet = lv_btn_create(new_cb, NULL);
 801ada8:	2100      	movs	r1, #0
 801adaa:	6978      	ldr	r0, [r7, #20]
 801adac:	f7fd ffe4 	bl	8018d78 <lv_btn_create>
 801adb0:	4602      	mov	r2, r0
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	61da      	str	r2, [r3, #28]
        if(ancestor_bullet_design == NULL) ancestor_bullet_design = lv_obj_get_design_cb(ext->bullet);
 801adb6:	4b4d      	ldr	r3, [pc, #308]	; (801aeec <lv_cb_create+0x1d0>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d107      	bne.n	801adce <lv_cb_create+0xb2>
 801adbe:	693b      	ldr	r3, [r7, #16]
 801adc0:	69db      	ldr	r3, [r3, #28]
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7ef fcf5 	bl	800a7b2 <lv_obj_get_design_cb>
 801adc8:	4602      	mov	r2, r0
 801adca:	4b48      	ldr	r3, [pc, #288]	; (801aeec <lv_cb_create+0x1d0>)
 801adcc:	601a      	str	r2, [r3, #0]
        lv_obj_set_click(ext->bullet, false);
 801adce:	693b      	ldr	r3, [r7, #16]
 801add0:	69db      	ldr	r3, [r3, #28]
 801add2:	2100      	movs	r1, #0
 801add4:	4618      	mov	r0, r3
 801add6:	f7ef f9ee 	bl	800a1b6 <lv_obj_set_click>

        ext->label = lv_label_create(new_cb, NULL);
 801adda:	2100      	movs	r1, #0
 801addc:	6978      	ldr	r0, [r7, #20]
 801adde:	f001 fe37 	bl	801ca50 <lv_label_create>
 801ade2:	4602      	mov	r2, r0
 801ade4:	693b      	ldr	r3, [r7, #16]
 801ade6:	621a      	str	r2, [r3, #32]

        lv_cb_set_text(new_cb, "Check box");
 801ade8:	4941      	ldr	r1, [pc, #260]	; (801aef0 <lv_cb_create+0x1d4>)
 801adea:	6978      	ldr	r0, [r7, #20]
 801adec:	f000 f888 	bl	801af00 <lv_cb_set_text>
        lv_btn_set_layout(new_cb, LV_LAYOUT_ROW_M);
 801adf0:	2106      	movs	r1, #6
 801adf2:	6978      	ldr	r0, [r7, #20]
 801adf4:	f7ff ff65 	bl	801acc2 <lv_btn_set_layout>
        lv_btn_set_fit(new_cb, LV_FIT_TIGHT);
 801adf8:	2101      	movs	r1, #1
 801adfa:	6978      	ldr	r0, [r7, #20]
 801adfc:	f7ff ff70 	bl	801ace0 <lv_btn_set_fit>
        lv_btn_set_toggle(new_cb, true);
 801ae00:	2101      	movs	r1, #1
 801ae02:	6978      	ldr	r0, [r7, #20]
 801ae04:	f7fe f888 	bl	8018f18 <lv_btn_set_toggle>
        lv_obj_set_protect(new_cb, LV_PROTECT_PRESS_LOST);
 801ae08:	2110      	movs	r1, #16
 801ae0a:	6978      	ldr	r0, [r7, #20]
 801ae0c:	f7ef fa28 	bl	800a260 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801ae10:	f007 fb5e 	bl	80224d0 <lv_theme_get_current>
 801ae14:	60b8      	str	r0, [r7, #8]
        if(th) {
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d030      	beq.n	801ae7e <lv_cb_create+0x162>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, th->style.cb.bg);
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ae22:	461a      	mov	r2, r3
 801ae24:	2100      	movs	r1, #0
 801ae26:	6978      	ldr	r0, [r7, #20]
 801ae28:	f000 f87e 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, th->style.cb.box.rel);
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ae32:	461a      	mov	r2, r3
 801ae34:	2101      	movs	r1, #1
 801ae36:	6978      	ldr	r0, [r7, #20]
 801ae38:	f000 f876 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_PR, th->style.cb.box.pr);
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ae42:	461a      	mov	r2, r3
 801ae44:	2102      	movs	r1, #2
 801ae46:	6978      	ldr	r0, [r7, #20]
 801ae48:	f000 f86e 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_REL, th->style.cb.box.tgl_rel);
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801ae52:	461a      	mov	r2, r3
 801ae54:	2103      	movs	r1, #3
 801ae56:	6978      	ldr	r0, [r7, #20]
 801ae58:	f000 f866 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_PR, th->style.cb.box.tgl_pr);
 801ae5c:	68bb      	ldr	r3, [r7, #8]
 801ae5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ae62:	461a      	mov	r2, r3
 801ae64:	2104      	movs	r1, #4
 801ae66:	6978      	ldr	r0, [r7, #20]
 801ae68:	f000 f85e 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_INA, th->style.cb.box.ina);
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801ae72:	461a      	mov	r2, r3
 801ae74:	2105      	movs	r1, #5
 801ae76:	6978      	ldr	r0, [r7, #20]
 801ae78:	f000 f856 	bl	801af28 <lv_cb_set_style>
 801ae7c:	e023      	b.n	801aec6 <lv_cb_create+0x1aa>
        } else {
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, &lv_style_transp);
 801ae7e:	4a1d      	ldr	r2, [pc, #116]	; (801aef4 <lv_cb_create+0x1d8>)
 801ae80:	2100      	movs	r1, #0
 801ae82:	6978      	ldr	r0, [r7, #20]
 801ae84:	f000 f850 	bl	801af28 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, &lv_style_pretty);
 801ae88:	4a1b      	ldr	r2, [pc, #108]	; (801aef8 <lv_cb_create+0x1dc>)
 801ae8a:	2101      	movs	r1, #1
 801ae8c:	6978      	ldr	r0, [r7, #20]
 801ae8e:	f000 f84b 	bl	801af28 <lv_cb_set_style>
 801ae92:	e018      	b.n	801aec6 <lv_cb_create+0x1aa>
        }
    } else {
        lv_cb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801ae94:	6838      	ldr	r0, [r7, #0]
 801ae96:	f7ef fc98 	bl	800a7ca <lv_obj_get_ext_attr>
 801ae9a:	60f8      	str	r0, [r7, #12]
        ext->bullet            = lv_btn_create(new_cb, copy_ext->bullet);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	69db      	ldr	r3, [r3, #28]
 801aea0:	4619      	mov	r1, r3
 801aea2:	6978      	ldr	r0, [r7, #20]
 801aea4:	f7fd ff68 	bl	8018d78 <lv_btn_create>
 801aea8:	4602      	mov	r2, r0
 801aeaa:	693b      	ldr	r3, [r7, #16]
 801aeac:	61da      	str	r2, [r3, #28]
        ext->label             = lv_label_create(new_cb, copy_ext->label);
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	6a1b      	ldr	r3, [r3, #32]
 801aeb2:	4619      	mov	r1, r3
 801aeb4:	6978      	ldr	r0, [r7, #20]
 801aeb6:	f001 fdcb 	bl	801ca50 <lv_label_create>
 801aeba:	4602      	mov	r2, r0
 801aebc:	693b      	ldr	r3, [r7, #16]
 801aebe:	621a      	str	r2, [r3, #32]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cb);
 801aec0:	6978      	ldr	r0, [r7, #20]
 801aec2:	f7ef f964 	bl	800a18e <lv_obj_refresh_style>
    }

    lv_obj_set_design_cb(ext->bullet, lv_bullet_design);
 801aec6:	693b      	ldr	r3, [r7, #16]
 801aec8:	69db      	ldr	r3, [r3, #28]
 801aeca:	490c      	ldr	r1, [pc, #48]	; (801aefc <lv_cb_create+0x1e0>)
 801aecc:	4618      	mov	r0, r3
 801aece:	f7ef faa1 	bl	800a414 <lv_obj_set_design_cb>

    LV_LOG_INFO("check box created");

    return new_cb;
 801aed2:	697b      	ldr	r3, [r7, #20]
}
 801aed4:	4618      	mov	r0, r3
 801aed6:	3718      	adds	r7, #24
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}
 801aedc:	200177cc 	.word	0x200177cc
 801aee0:	200177c4 	.word	0x200177c4
 801aee4:	0801b125 	.word	0x0801b125
 801aee8:	0801aff1 	.word	0x0801aff1
 801aeec:	200177c8 	.word	0x200177c8
 801aef0:	0802d4c0 	.word	0x0802d4c0
 801aef4:	2001b89c 	.word	0x2001b89c
 801aef8:	2001b950 	.word	0x2001b950
 801aefc:	0801b081 	.word	0x0801b081

0801af00 <lv_cb_set_text>:
 * after this function returns.
 * @param cb pointer to a check box
 * @param txt the text of the check box. NULL to refresh with the current text.
 */
void lv_cb_set_text(lv_obj_t * cb, const char * txt)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b084      	sub	sp, #16
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
 801af08:	6039      	str	r1, [r7, #0]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f7ef fc5d 	bl	800a7ca <lv_obj_get_ext_attr>
 801af10:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->label, txt);
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	6a1b      	ldr	r3, [r3, #32]
 801af16:	6839      	ldr	r1, [r7, #0]
 801af18:	4618      	mov	r0, r3
 801af1a:	f001 fecb 	bl	801ccb4 <lv_label_set_text>
}
 801af1e:	bf00      	nop
 801af20:	3710      	adds	r7, #16
 801af22:	46bd      	mov	sp, r7
 801af24:	bd80      	pop	{r7, pc}
	...

0801af28 <lv_cb_set_style>:
 * @param cb pointer to check box object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_cb_set_style(lv_obj_t * cb, lv_cb_style_t type, const lv_style_t * style)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b086      	sub	sp, #24
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	60f8      	str	r0, [r7, #12]
 801af30:	460b      	mov	r3, r1
 801af32:	607a      	str	r2, [r7, #4]
 801af34:	72fb      	strb	r3, [r7, #11]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801af36:	68f8      	ldr	r0, [r7, #12]
 801af38:	f7ef fc47 	bl	800a7ca <lv_obj_get_ext_attr>
 801af3c:	6178      	str	r0, [r7, #20]

    switch(type) {
 801af3e:	7afb      	ldrb	r3, [r7, #11]
 801af40:	2b05      	cmp	r3, #5
 801af42:	d851      	bhi.n	801afe8 <lv_cb_set_style+0xc0>
 801af44:	a201      	add	r2, pc, #4	; (adr r2, 801af4c <lv_cb_set_style+0x24>)
 801af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af4a:	bf00      	nop
 801af4c:	0801af65 	.word	0x0801af65
 801af50:	0801af99 	.word	0x0801af99
 801af54:	0801afa9 	.word	0x0801afa9
 801af58:	0801afb9 	.word	0x0801afb9
 801af5c:	0801afc9 	.word	0x0801afc9
 801af60:	0801afd9 	.word	0x0801afd9
        case LV_CB_STYLE_BG:
            lv_btn_set_style(cb, LV_BTN_STYLE_REL, style);
 801af64:	687a      	ldr	r2, [r7, #4]
 801af66:	2100      	movs	r1, #0
 801af68:	68f8      	ldr	r0, [r7, #12]
 801af6a:	f7fe f813 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_PR, style);
 801af6e:	687a      	ldr	r2, [r7, #4]
 801af70:	2101      	movs	r1, #1
 801af72:	68f8      	ldr	r0, [r7, #12]
 801af74:	f7fe f80e 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_REL, style);
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	2102      	movs	r1, #2
 801af7c:	68f8      	ldr	r0, [r7, #12]
 801af7e:	f7fe f809 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_PR, style);
 801af82:	687a      	ldr	r2, [r7, #4]
 801af84:	2103      	movs	r1, #3
 801af86:	68f8      	ldr	r0, [r7, #12]
 801af88:	f7fe f804 	bl	8018f94 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_INA, style);
 801af8c:	687a      	ldr	r2, [r7, #4]
 801af8e:	2104      	movs	r1, #4
 801af90:	68f8      	ldr	r0, [r7, #12]
 801af92:	f7fd ffff 	bl	8018f94 <lv_btn_set_style>
            break;
 801af96:	e027      	b.n	801afe8 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_REL, style); break;
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	69db      	ldr	r3, [r3, #28]
 801af9c:	687a      	ldr	r2, [r7, #4]
 801af9e:	2100      	movs	r1, #0
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7fd fff7 	bl	8018f94 <lv_btn_set_style>
 801afa6:	e01f      	b.n	801afe8 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_PR, style); break;
 801afa8:	697b      	ldr	r3, [r7, #20]
 801afaa:	69db      	ldr	r3, [r3, #28]
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	2101      	movs	r1, #1
 801afb0:	4618      	mov	r0, r3
 801afb2:	f7fd ffef 	bl	8018f94 <lv_btn_set_style>
 801afb6:	e017      	b.n	801afe8 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_REL, style); break;
 801afb8:	697b      	ldr	r3, [r7, #20]
 801afba:	69db      	ldr	r3, [r3, #28]
 801afbc:	687a      	ldr	r2, [r7, #4]
 801afbe:	2102      	movs	r1, #2
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7fd ffe7 	bl	8018f94 <lv_btn_set_style>
 801afc6:	e00f      	b.n	801afe8 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_PR, style); break;
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	69db      	ldr	r3, [r3, #28]
 801afcc:	687a      	ldr	r2, [r7, #4]
 801afce:	2103      	movs	r1, #3
 801afd0:	4618      	mov	r0, r3
 801afd2:	f7fd ffdf 	bl	8018f94 <lv_btn_set_style>
 801afd6:	e007      	b.n	801afe8 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_INA: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_INA, style); break;
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	69db      	ldr	r3, [r3, #28]
 801afdc:	687a      	ldr	r2, [r7, #4]
 801afde:	2104      	movs	r1, #4
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7fd ffd7 	bl	8018f94 <lv_btn_set_style>
 801afe6:	bf00      	nop
    }
}
 801afe8:	bf00      	nop
 801afea:	3718      	adds	r7, #24
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <lv_cb_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_cb_design(lv_obj_t * cb, const lv_area_t * mask, lv_design_mode_t mode)
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b088      	sub	sp, #32
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	60f8      	str	r0, [r7, #12]
 801aff8:	60b9      	str	r1, [r7, #8]
 801affa:	4613      	mov	r3, r2
 801affc:	71fb      	strb	r3, [r7, #7]
    bool result = true;
 801affe:	2301      	movs	r3, #1
 801b000:	77fb      	strb	r3, [r7, #31]

    if(mode == LV_DESIGN_COVER_CHK) {
 801b002:	79fb      	ldrb	r3, [r7, #7]
 801b004:	2b02      	cmp	r3, #2
 801b006:	d108      	bne.n	801b01a <lv_cb_design+0x2a>
        /*Return false if the object is not covers the mask_p area*/
        result = ancestor_bg_design(cb, mask, mode);
 801b008:	4b1c      	ldr	r3, [pc, #112]	; (801b07c <lv_cb_design+0x8c>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	79fa      	ldrb	r2, [r7, #7]
 801b00e:	68b9      	ldr	r1, [r7, #8]
 801b010:	68f8      	ldr	r0, [r7, #12]
 801b012:	4798      	blx	r3
 801b014:	4603      	mov	r3, r0
 801b016:	77fb      	strb	r3, [r7, #31]
 801b018:	e02a      	b.n	801b070 <lv_cb_design+0x80>
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 801b01a:	79fb      	ldrb	r3, [r7, #7]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d002      	beq.n	801b026 <lv_cb_design+0x36>
 801b020:	79fb      	ldrb	r3, [r7, #7]
 801b022:	2b01      	cmp	r3, #1
 801b024:	d11c      	bne.n	801b060 <lv_cb_design+0x70>
        lv_cb_ext_t * cb_ext      = lv_obj_get_ext_attr(cb);
 801b026:	68f8      	ldr	r0, [r7, #12]
 801b028:	f7ef fbcf 	bl	800a7ca <lv_obj_get_ext_attr>
 801b02c:	61b8      	str	r0, [r7, #24]
        lv_btn_ext_t * bullet_ext = lv_obj_get_ext_attr(cb_ext->bullet);
 801b02e:	69bb      	ldr	r3, [r7, #24]
 801b030:	69db      	ldr	r3, [r3, #28]
 801b032:	4618      	mov	r0, r3
 801b034:	f7ef fbc9 	bl	800a7ca <lv_obj_get_ext_attr>
 801b038:	6178      	str	r0, [r7, #20]

        /*Be sure the state of the bullet is the same as the parent button*/
        bullet_ext->state = cb_ext->bg_btn.state;
 801b03a:	69bb      	ldr	r3, [r7, #24]
 801b03c:	7e1b      	ldrb	r3, [r3, #24]
 801b03e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801b042:	b2d9      	uxtb	r1, r3
 801b044:	697a      	ldr	r2, [r7, #20]
 801b046:	7e13      	ldrb	r3, [r2, #24]
 801b048:	f361 0302 	bfi	r3, r1, #0, #3
 801b04c:	7613      	strb	r3, [r2, #24]

        result = ancestor_bg_design(cb, mask, mode);
 801b04e:	4b0b      	ldr	r3, [pc, #44]	; (801b07c <lv_cb_design+0x8c>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	79fa      	ldrb	r2, [r7, #7]
 801b054:	68b9      	ldr	r1, [r7, #8]
 801b056:	68f8      	ldr	r0, [r7, #12]
 801b058:	4798      	blx	r3
 801b05a:	4603      	mov	r3, r0
 801b05c:	77fb      	strb	r3, [r7, #31]
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 801b05e:	e007      	b.n	801b070 <lv_cb_design+0x80>

    } else {
        result = ancestor_bg_design(cb, mask, mode);
 801b060:	4b06      	ldr	r3, [pc, #24]	; (801b07c <lv_cb_design+0x8c>)
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	79fa      	ldrb	r2, [r7, #7]
 801b066:	68b9      	ldr	r1, [r7, #8]
 801b068:	68f8      	ldr	r0, [r7, #12]
 801b06a:	4798      	blx	r3
 801b06c:	4603      	mov	r3, r0
 801b06e:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 801b070:	7ffb      	ldrb	r3, [r7, #31]
}
 801b072:	4618      	mov	r0, r3
 801b074:	3720      	adds	r7, #32
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	200177c4 	.word	0x200177c4

0801b080 <lv_bullet_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bullet_design(lv_obj_t * bullet, const lv_area_t * mask, lv_design_mode_t mode)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b08a      	sub	sp, #40	; 0x28
 801b084:	af00      	add	r7, sp, #0
 801b086:	60f8      	str	r0, [r7, #12]
 801b088:	60b9      	str	r1, [r7, #8]
 801b08a:	4613      	mov	r3, r2
 801b08c:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801b08e:	79fb      	ldrb	r3, [r7, #7]
 801b090:	2b02      	cmp	r3, #2
 801b092:	d107      	bne.n	801b0a4 <lv_bullet_design+0x24>
        return ancestor_bullet_design(bullet, mask, mode);
 801b094:	4b22      	ldr	r3, [pc, #136]	; (801b120 <lv_bullet_design+0xa0>)
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	79fa      	ldrb	r2, [r7, #7]
 801b09a:	68b9      	ldr	r1, [r7, #8]
 801b09c:	68f8      	ldr	r0, [r7, #12]
 801b09e:	4798      	blx	r3
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	e039      	b.n	801b118 <lv_bullet_design+0x98>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801b0a4:	79fb      	ldrb	r3, [r7, #7]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d12c      	bne.n	801b104 <lv_bullet_design+0x84>
#if LV_USE_GROUP
        /* If the check box is the active in a group and
         * the background is not visible (transparent)
         * then activate the style of the bullet*/
        const lv_style_t * style_ori  = lv_obj_get_style(bullet);
 801b0aa:	68f8      	ldr	r0, [r7, #12]
 801b0ac:	f7ef fad2 	bl	800a654 <lv_obj_get_style>
 801b0b0:	6278      	str	r0, [r7, #36]	; 0x24
        lv_obj_t * bg                 = lv_obj_get_parent(bullet);
 801b0b2:	68f8      	ldr	r0, [r7, #12]
 801b0b4:	f7ef fa34 	bl	800a520 <lv_obj_get_parent>
 801b0b8:	6238      	str	r0, [r7, #32]
        const lv_style_t * style_page = lv_obj_get_style(bg);
 801b0ba:	6a38      	ldr	r0, [r7, #32]
 801b0bc:	f7ef faca 	bl	800a654 <lv_obj_get_style>
 801b0c0:	61f8      	str	r0, [r7, #28]
        lv_group_t * g                = lv_obj_get_group(bg);
 801b0c2:	6a38      	ldr	r0, [r7, #32]
 801b0c4:	f7ef fb8d 	bl	800a7e2 <lv_obj_get_group>
 801b0c8:	61b8      	str	r0, [r7, #24]
        if(style_page->body.opa == LV_OPA_TRANSP) { /*Is the Background visible?*/
 801b0ca:	69fb      	ldr	r3, [r7, #28]
 801b0cc:	7a1b      	ldrb	r3, [r3, #8]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d10e      	bne.n	801b0f0 <lv_bullet_design+0x70>
            if(lv_group_get_focused(g) == bg) {
 801b0d2:	69b8      	ldr	r0, [r7, #24]
 801b0d4:	f7ed fb67 	bl	80087a6 <lv_group_get_focused>
 801b0d8:	4602      	mov	r2, r0
 801b0da:	6a3b      	ldr	r3, [r7, #32]
 801b0dc:	4293      	cmp	r3, r2
 801b0de:	d107      	bne.n	801b0f0 <lv_bullet_design+0x70>
                lv_style_t * style_mod;
                style_mod       = lv_group_mod_style(g, style_ori);
 801b0e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0e2:	69b8      	ldr	r0, [r7, #24]
 801b0e4:	f7ed fb2f 	bl	8008746 <lv_group_mod_style>
 801b0e8:	6178      	str	r0, [r7, #20]
                bullet->style_p = style_mod; /*Temporally change the style to the activated */
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	697a      	ldr	r2, [r7, #20]
 801b0ee:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_bullet_design(bullet, mask, mode);
 801b0f0:	4b0b      	ldr	r3, [pc, #44]	; (801b120 <lv_bullet_design+0xa0>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	79fa      	ldrb	r2, [r7, #7]
 801b0f6:	68b9      	ldr	r1, [r7, #8]
 801b0f8:	68f8      	ldr	r0, [r7, #12]
 801b0fa:	4798      	blx	r3

#if LV_USE_GROUP
        bullet->style_p = style_ori; /*Revert the style*/
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b100:	629a      	str	r2, [r3, #40]	; 0x28
 801b102:	e008      	b.n	801b116 <lv_bullet_design+0x96>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801b104:	79fb      	ldrb	r3, [r7, #7]
 801b106:	2b01      	cmp	r3, #1
 801b108:	d105      	bne.n	801b116 <lv_bullet_design+0x96>
        ancestor_bullet_design(bullet, mask, mode);
 801b10a:	4b05      	ldr	r3, [pc, #20]	; (801b120 <lv_bullet_design+0xa0>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	79fa      	ldrb	r2, [r7, #7]
 801b110:	68b9      	ldr	r1, [r7, #8]
 801b112:	68f8      	ldr	r0, [r7, #12]
 801b114:	4798      	blx	r3
    }

    return true;
 801b116:	2301      	movs	r3, #1
}
 801b118:	4618      	mov	r0, r3
 801b11a:	3728      	adds	r7, #40	; 0x28
 801b11c:	46bd      	mov	sp, r7
 801b11e:	bd80      	pop	{r7, pc}
 801b120:	200177c8 	.word	0x200177c8

0801b124 <lv_cb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cb_signal(lv_obj_t * cb, lv_signal_t sign, void * param)
{
 801b124:	b5b0      	push	{r4, r5, r7, lr}
 801b126:	b08a      	sub	sp, #40	; 0x28
 801b128:	af00      	add	r7, sp, #0
 801b12a:	60f8      	str	r0, [r7, #12]
 801b12c:	460b      	mov	r3, r1
 801b12e:	607a      	str	r2, [r7, #4]
 801b130:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cb, sign, param);
 801b132:	4b4b      	ldr	r3, [pc, #300]	; (801b260 <lv_cb_signal+0x13c>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	7af9      	ldrb	r1, [r7, #11]
 801b138:	687a      	ldr	r2, [r7, #4]
 801b13a:	68f8      	ldr	r0, [r7, #12]
 801b13c:	4798      	blx	r3
 801b13e:	4603      	mov	r3, r0
 801b140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(res != LV_RES_OK) return res;
 801b144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b148:	2b01      	cmp	r3, #1
 801b14a:	d002      	beq.n	801b152 <lv_cb_signal+0x2e>
 801b14c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b150:	e081      	b.n	801b256 <lv_cb_signal+0x132>

    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801b152:	68f8      	ldr	r0, [r7, #12]
 801b154:	f7ef fb39 	bl	800a7ca <lv_obj_get_ext_attr>
 801b158:	6238      	str	r0, [r7, #32]

    if(sign == LV_SIGNAL_STYLE_CHG) {
 801b15a:	7afb      	ldrb	r3, [r7, #11]
 801b15c:	2b04      	cmp	r3, #4
 801b15e:	d126      	bne.n	801b1ae <lv_cb_signal+0x8a>
        const lv_style_t * label_style = lv_label_get_style(ext->label, LV_LABEL_STYLE_MAIN);
 801b160:	6a3b      	ldr	r3, [r7, #32]
 801b162:	6a1b      	ldr	r3, [r3, #32]
 801b164:	2100      	movs	r1, #0
 801b166:	4618      	mov	r0, r3
 801b168:	f7ff fdc9 	bl	801acfe <lv_label_get_style>
 801b16c:	6178      	str	r0, [r7, #20]
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 801b16e:	6a3b      	ldr	r3, [r7, #32]
 801b170:	69dc      	ldr	r4, [r3, #28]
 801b172:	697b      	ldr	r3, [r7, #20]
 801b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b176:	4618      	mov	r0, r3
 801b178:	f7ff fd84 	bl	801ac84 <lv_font_get_line_height>
 801b17c:	4603      	mov	r3, r0
 801b17e:	b21d      	sxth	r5, r3
                        lv_font_get_line_height(label_style->text.font));
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b184:	4618      	mov	r0, r3
 801b186:	f7ff fd7d 	bl	801ac84 <lv_font_get_line_height>
 801b18a:	4603      	mov	r3, r0
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 801b18c:	b21b      	sxth	r3, r3
 801b18e:	461a      	mov	r2, r3
 801b190:	4629      	mov	r1, r5
 801b192:	4620      	mov	r0, r4
 801b194:	f7ee faa1 	bl	80096da <lv_obj_set_size>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801b198:	6a3b      	ldr	r3, [r7, #32]
 801b19a:	69dc      	ldr	r4, [r3, #28]
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f7fd ff3b 	bl	8019018 <lv_btn_get_state>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	f7fd feca 	bl	8018f40 <lv_btn_set_state>
 801b1ac:	e051      	b.n	801b252 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801b1ae:	7afb      	ldrb	r3, [r7, #11]
 801b1b0:	2b07      	cmp	r3, #7
 801b1b2:	d005      	beq.n	801b1c0 <lv_cb_signal+0x9c>
 801b1b4:	7afb      	ldrb	r3, [r7, #11]
 801b1b6:	2b0a      	cmp	r3, #10
 801b1b8:	d002      	beq.n	801b1c0 <lv_cb_signal+0x9c>
 801b1ba:	7afb      	ldrb	r3, [r7, #11]
 801b1bc:	2b09      	cmp	r3, #9
 801b1be:	d10a      	bne.n	801b1d6 <lv_cb_signal+0xb2>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801b1c0:	6a3b      	ldr	r3, [r7, #32]
 801b1c2:	69dc      	ldr	r4, [r3, #28]
 801b1c4:	68f8      	ldr	r0, [r7, #12]
 801b1c6:	f7fd ff27 	bl	8019018 <lv_btn_get_state>
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	4619      	mov	r1, r3
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f7fd feb6 	bl	8018f40 <lv_btn_set_state>
 801b1d4:	e03d      	b.n	801b252 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801b1d6:	7afb      	ldrb	r3, [r7, #11]
 801b1d8:	2b11      	cmp	r3, #17
 801b1da:	d119      	bne.n	801b210 <lv_cb_signal+0xec>
        char c = *((char *)param);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	781b      	ldrb	r3, [r3, #0]
 801b1e0:	76fb      	strb	r3, [r7, #27]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN || c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801b1e2:	7efb      	ldrb	r3, [r7, #27]
 801b1e4:	2b13      	cmp	r3, #19
 801b1e6:	d008      	beq.n	801b1fa <lv_cb_signal+0xd6>
 801b1e8:	7efb      	ldrb	r3, [r7, #27]
 801b1ea:	2b12      	cmp	r3, #18
 801b1ec:	d005      	beq.n	801b1fa <lv_cb_signal+0xd6>
 801b1ee:	7efb      	ldrb	r3, [r7, #27]
 801b1f0:	2b14      	cmp	r3, #20
 801b1f2:	d002      	beq.n	801b1fa <lv_cb_signal+0xd6>
 801b1f4:	7efb      	ldrb	r3, [r7, #27]
 801b1f6:	2b11      	cmp	r3, #17
 801b1f8:	d12b      	bne.n	801b252 <lv_cb_signal+0x12e>
            /*Follow the backgrounds state with the bullet*/
            lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801b1fa:	6a3b      	ldr	r3, [r7, #32]
 801b1fc:	69dc      	ldr	r4, [r3, #28]
 801b1fe:	68f8      	ldr	r0, [r7, #12]
 801b200:	f7fd ff0a 	bl	8019018 <lv_btn_get_state>
 801b204:	4603      	mov	r3, r0
 801b206:	4619      	mov	r1, r3
 801b208:	4620      	mov	r0, r4
 801b20a:	f7fd fe99 	bl	8018f40 <lv_btn_set_state>
 801b20e:	e020      	b.n	801b252 <lv_cb_signal+0x12e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b210:	7afb      	ldrb	r3, [r7, #11]
 801b212:	2b06      	cmp	r3, #6
 801b214:	d11d      	bne.n	801b252 <lv_cb_signal+0x12e>
        lv_obj_type_t * buf = param;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	61fb      	str	r3, [r7, #28]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b21a:	2300      	movs	r3, #0
 801b21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b220:	e00b      	b.n	801b23a <lv_cb_signal+0x116>
            if(buf->type[i] == NULL) break;
 801b222:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d009      	beq.n	801b244 <lv_cb_signal+0x120>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b234:	3301      	adds	r3, #1
 801b236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b23e:	2b06      	cmp	r3, #6
 801b240:	d9ef      	bls.n	801b222 <lv_cb_signal+0xfe>
 801b242:	e000      	b.n	801b246 <lv_cb_signal+0x122>
            if(buf->type[i] == NULL) break;
 801b244:	bf00      	nop
        }
        buf->type[i] = "lv_cb";
 801b246:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b24a:	69fb      	ldr	r3, [r7, #28]
 801b24c:	4905      	ldr	r1, [pc, #20]	; (801b264 <lv_cb_signal+0x140>)
 801b24e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801b252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 801b256:	4618      	mov	r0, r3
 801b258:	3728      	adds	r7, #40	; 0x28
 801b25a:	46bd      	mov	sp, r7
 801b25c:	bdb0      	pop	{r4, r5, r7, pc}
 801b25e:	bf00      	nop
 801b260:	200177cc 	.word	0x200177cc
 801b264:	0802d4cc 	.word	0x0802d4cc

0801b268 <lv_area_copy>:
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
 801b270:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801b272:	2208      	movs	r2, #8
 801b274:	6839      	ldr	r1, [r7, #0]
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	f00f feca 	bl	802b010 <memcpy>
}
 801b27c:	bf00      	nop
 801b27e:	3708      	adds	r7, #8
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}

0801b284 <lv_area_get_width>:
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b292:	b29a      	uxth	r2, r3
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	1ad3      	subs	r3, r2, r3
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	b29b      	uxth	r3, r3
 801b2a4:	b21b      	sxth	r3, r3
}
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	370c      	adds	r7, #12
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b0:	4770      	bx	lr

0801b2b2 <lv_area_get_height>:
{
 801b2b2:	b480      	push	{r7}
 801b2b4:	b083      	sub	sp, #12
 801b2b6:	af00      	add	r7, sp, #0
 801b2b8:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b2c0:	b29a      	uxth	r2, r3
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2c8:	b29b      	uxth	r3, r3
 801b2ca:	1ad3      	subs	r3, r2, r3
 801b2cc:	b29b      	uxth	r3, r3
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	b29b      	uxth	r3, r3
 801b2d2:	b21b      	sxth	r3, r3
}
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	370c      	adds	r7, #12
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2de:	4770      	bx	lr

0801b2e0 <lv_cont_set_style>:
 * @param cont pointer to a container object
 * @param type which style should be set (can be only `LV_CONT_STYLE_MAIN`)
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b084      	sub	sp, #16
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	460b      	mov	r3, r1
 801b2ea:	607a      	str	r2, [r7, #4]
 801b2ec:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 801b2ee:	6879      	ldr	r1, [r7, #4]
 801b2f0:	68f8      	ldr	r0, [r7, #12]
 801b2f2:	f7ee ff3a 	bl	800a16a <lv_obj_set_style>
}
 801b2f6:	bf00      	nop
 801b2f8:	3710      	adds	r7, #16
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	bd80      	pop	{r7, pc}
	...

0801b300 <lv_cont_create>:
 * @param par pointer to an object, it will be the parent of the new container
 * @param copy pointer to a container object, if not NULL then the new object will be copied from it
 * @return pointer to the created container
 */
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b086      	sub	sp, #24
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
 801b308:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("container create started");

    /*Create a basic object*/
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 801b30a:	6839      	ldr	r1, [r7, #0]
 801b30c:	6878      	ldr	r0, [r7, #4]
 801b30e:	f7ed fcf3 	bl	8008cf8 <lv_obj_create>
 801b312:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cont);
 801b314:	697b      	ldr	r3, [r7, #20]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d100      	bne.n	801b31c <lv_cont_create+0x1c>
 801b31a:	e7fe      	b.n	801b31a <lv_cont_create+0x1a>
    if(new_cont == NULL) return NULL;
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d101      	bne.n	801b326 <lv_cont_create+0x26>
 801b322:	2300      	movs	r3, #0
 801b324:	e08b      	b.n	801b43e <lv_cont_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 801b326:	4b48      	ldr	r3, [pc, #288]	; (801b448 <lv_cont_create+0x148>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d105      	bne.n	801b33a <lv_cont_create+0x3a>
 801b32e:	6978      	ldr	r0, [r7, #20]
 801b330:	f7ef fa33 	bl	800a79a <lv_obj_get_signal_cb>
 801b334:	4602      	mov	r2, r0
 801b336:	4b44      	ldr	r3, [pc, #272]	; (801b448 <lv_cont_create+0x148>)
 801b338:	601a      	str	r2, [r3, #0]

    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 801b33a:	2102      	movs	r1, #2
 801b33c:	6978      	ldr	r0, [r7, #20]
 801b33e:	f7ef f877 	bl	800a430 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 801b342:	6978      	ldr	r0, [r7, #20]
 801b344:	f7ef fa41 	bl	800a7ca <lv_obj_get_ext_attr>
 801b348:	6138      	str	r0, [r7, #16]
    if(ext == NULL) return NULL;
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d101      	bne.n	801b354 <lv_cont_create+0x54>
 801b350:	2300      	movs	r3, #0
 801b352:	e074      	b.n	801b43e <lv_cont_create+0x13e>

    lv_mem_assert(ext);
 801b354:	693b      	ldr	r3, [r7, #16]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d100      	bne.n	801b35c <lv_cont_create+0x5c>
 801b35a:	e7fe      	b.n	801b35a <lv_cont_create+0x5a>
    ext->fit_left   = LV_FIT_NONE;
 801b35c:	693a      	ldr	r2, [r7, #16]
 801b35e:	7813      	ldrb	r3, [r2, #0]
 801b360:	f36f 1305 	bfc	r3, #4, #2
 801b364:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = LV_FIT_NONE;
 801b366:	693a      	ldr	r2, [r7, #16]
 801b368:	7813      	ldrb	r3, [r2, #0]
 801b36a:	f36f 1387 	bfc	r3, #6, #2
 801b36e:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = LV_FIT_NONE;
 801b370:	693a      	ldr	r2, [r7, #16]
 801b372:	7853      	ldrb	r3, [r2, #1]
 801b374:	f36f 0301 	bfc	r3, #0, #2
 801b378:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = LV_FIT_NONE;
 801b37a:	693a      	ldr	r2, [r7, #16]
 801b37c:	7853      	ldrb	r3, [r2, #1]
 801b37e:	f36f 0383 	bfc	r3, #2, #2
 801b382:	7053      	strb	r3, [r2, #1]
    ext->layout     = LV_LAYOUT_OFF;
 801b384:	693a      	ldr	r2, [r7, #16]
 801b386:	7813      	ldrb	r3, [r2, #0]
 801b388:	f36f 0303 	bfc	r3, #0, #4
 801b38c:	7013      	strb	r3, [r2, #0]

    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 801b38e:	492f      	ldr	r1, [pc, #188]	; (801b44c <lv_cont_create+0x14c>)
 801b390:	6978      	ldr	r0, [r7, #20]
 801b392:	f7ef f831 	bl	800a3f8 <lv_obj_set_signal_cb>

    /*Init the new container*/
    if(copy == NULL) {
 801b396:	683b      	ldr	r3, [r7, #0]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d116      	bne.n	801b3ca <lv_cont_create+0xca>
        /*Set the default styles if it's not screen*/
        if(par != NULL) {
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d04c      	beq.n	801b43c <lv_cont_create+0x13c>
            lv_theme_t * th = lv_theme_get_current();
 801b3a2:	f007 f895 	bl	80224d0 <lv_theme_get_current>
 801b3a6:	60b8      	str	r0, [r7, #8]
            if(th) {
 801b3a8:	68bb      	ldr	r3, [r7, #8]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d007      	beq.n	801b3be <lv_cont_create+0xbe>
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, th->style.cont);
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	68db      	ldr	r3, [r3, #12]
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	2100      	movs	r1, #0
 801b3b6:	6978      	ldr	r0, [r7, #20]
 801b3b8:	f7ff ff92 	bl	801b2e0 <lv_cont_set_style>
 801b3bc:	e03e      	b.n	801b43c <lv_cont_create+0x13c>
            } else {
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, &lv_style_pretty);
 801b3be:	4a24      	ldr	r2, [pc, #144]	; (801b450 <lv_cont_create+0x150>)
 801b3c0:	2100      	movs	r1, #0
 801b3c2:	6978      	ldr	r0, [r7, #20]
 801b3c4:	f7ff ff8c 	bl	801b2e0 <lv_cont_set_style>
 801b3c8:	e038      	b.n	801b43c <lv_cont_create+0x13c>
            }
        }
    }
    /*Copy an existing object*/
    else {
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b3ca:	6838      	ldr	r0, [r7, #0]
 801b3cc:	f7ef f9fd 	bl	800a7ca <lv_obj_get_ext_attr>
 801b3d0:	60f8      	str	r0, [r7, #12]
        ext->fit_left            = copy_ext->fit_left;
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b3da:	b2d9      	uxtb	r1, r3
 801b3dc:	693a      	ldr	r2, [r7, #16]
 801b3de:	7813      	ldrb	r3, [r2, #0]
 801b3e0:	f361 1305 	bfi	r3, r1, #4, #2
 801b3e4:	7013      	strb	r3, [r2, #0]
        ext->fit_right           = copy_ext->fit_right;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	781b      	ldrb	r3, [r3, #0]
 801b3ea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801b3ee:	b2d9      	uxtb	r1, r3
 801b3f0:	693a      	ldr	r2, [r7, #16]
 801b3f2:	7813      	ldrb	r3, [r2, #0]
 801b3f4:	f361 1387 	bfi	r3, r1, #6, #2
 801b3f8:	7013      	strb	r3, [r2, #0]
        ext->fit_top             = copy_ext->fit_top;
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	785b      	ldrb	r3, [r3, #1]
 801b3fe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801b402:	b2d9      	uxtb	r1, r3
 801b404:	693a      	ldr	r2, [r7, #16]
 801b406:	7853      	ldrb	r3, [r2, #1]
 801b408:	f361 0301 	bfi	r3, r1, #0, #2
 801b40c:	7053      	strb	r3, [r2, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	785b      	ldrb	r3, [r3, #1]
 801b412:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b416:	b2d9      	uxtb	r1, r3
 801b418:	693a      	ldr	r2, [r7, #16]
 801b41a:	7853      	ldrb	r3, [r2, #1]
 801b41c:	f361 0383 	bfi	r3, r1, #2, #2
 801b420:	7053      	strb	r3, [r2, #1]
        ext->layout              = copy_ext->layout;
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b42a:	b2d9      	uxtb	r1, r3
 801b42c:	693a      	ldr	r2, [r7, #16]
 801b42e:	7813      	ldrb	r3, [r2, #0]
 801b430:	f361 0303 	bfi	r3, r1, #0, #4
 801b434:	7013      	strb	r3, [r2, #0]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cont);
 801b436:	6978      	ldr	r0, [r7, #20]
 801b438:	f7ee fea9 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("container created");

    return new_cont;
 801b43c:	697b      	ldr	r3, [r7, #20]
}
 801b43e:	4618      	mov	r0, r3
 801b440:	3718      	adds	r7, #24
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}
 801b446:	bf00      	nop
 801b448:	200177d0 	.word	0x200177d0
 801b44c:	0801b5d9 	.word	0x0801b5d9
 801b450:	2001b950 	.word	0x2001b950

0801b454 <lv_cont_set_layout>:
 * Set a layout on a container
 * @param cont pointer to a container object
 * @param layout a layout from 'lv_cont_layout_t'
 */
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout)
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b084      	sub	sp, #16
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
 801b45c:	460b      	mov	r3, r1
 801b45e:	70fb      	strb	r3, [r7, #3]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	f7ef f9b2 	bl	800a7ca <lv_obj_get_ext_attr>
 801b466:	60f8      	str	r0, [r7, #12]
    if(ext->layout == layout) return;
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b470:	b2db      	uxtb	r3, r3
 801b472:	461a      	mov	r2, r3
 801b474:	78fb      	ldrb	r3, [r7, #3]
 801b476:	429a      	cmp	r2, r3
 801b478:	d00f      	beq.n	801b49a <lv_cont_set_layout+0x46>

    ext->layout = layout;
 801b47a:	78fb      	ldrb	r3, [r7, #3]
 801b47c:	f003 030f 	and.w	r3, r3, #15
 801b480:	b2d9      	uxtb	r1, r3
 801b482:	68fa      	ldr	r2, [r7, #12]
 801b484:	7813      	ldrb	r3, [r2, #0]
 801b486:	f361 0303 	bfi	r3, r1, #0, #4
 801b48a:	7013      	strb	r3, [r2, #0]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	69db      	ldr	r3, [r3, #28]
 801b490:	2200      	movs	r2, #0
 801b492:	2101      	movs	r1, #1
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	4798      	blx	r3
 801b498:	e000      	b.n	801b49c <lv_cont_set_layout+0x48>
    if(ext->layout == layout) return;
 801b49a:	bf00      	nop
}
 801b49c:	3710      	adds	r7, #16
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}

0801b4a2 <lv_cont_set_fit4>:
 * @param right right fit policy from `lv_fit_t`
 * @param top bottom fit policy from `lv_fit_t`
 * @param bottom bottom fit policy from `lv_fit_t`
 */
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
 801b4a2:	b580      	push	{r7, lr}
 801b4a4:	b084      	sub	sp, #16
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	6078      	str	r0, [r7, #4]
 801b4aa:	4608      	mov	r0, r1
 801b4ac:	4611      	mov	r1, r2
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	70fb      	strb	r3, [r7, #3]
 801b4b4:	460b      	mov	r3, r1
 801b4b6:	70bb      	strb	r3, [r7, #2]
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	707b      	strb	r3, [r7, #1]
    lv_obj_invalidate(cont);
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7ed ff58 	bl	8009372 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b4c2:	6878      	ldr	r0, [r7, #4]
 801b4c4:	f7ef f981 	bl	800a7ca <lv_obj_get_ext_attr>
 801b4c8:	60f8      	str	r0, [r7, #12]
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	781b      	ldrb	r3, [r3, #0]
 801b4ce:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b4d2:	b2db      	uxtb	r3, r3
 801b4d4:	461a      	mov	r2, r3
 801b4d6:	78fb      	ldrb	r3, [r7, #3]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d11a      	bne.n	801b512 <lv_cont_set_fit4+0x70>
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	781b      	ldrb	r3, [r3, #0]
 801b4e0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801b4e4:	b2db      	uxtb	r3, r3
 801b4e6:	461a      	mov	r2, r3
 801b4e8:	78bb      	ldrb	r3, [r7, #2]
 801b4ea:	429a      	cmp	r2, r3
 801b4ec:	d111      	bne.n	801b512 <lv_cont_set_fit4+0x70>
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	785b      	ldrb	r3, [r3, #1]
 801b4f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801b4f6:	b2db      	uxtb	r3, r3
 801b4f8:	461a      	mov	r2, r3
 801b4fa:	787b      	ldrb	r3, [r7, #1]
 801b4fc:	429a      	cmp	r2, r3
 801b4fe:	d108      	bne.n	801b512 <lv_cont_set_fit4+0x70>
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	785b      	ldrb	r3, [r3, #1]
 801b504:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b508:	b2db      	uxtb	r3, r3
 801b50a:	461a      	mov	r2, r3
 801b50c:	7e3b      	ldrb	r3, [r7, #24]
 801b50e:	429a      	cmp	r2, r3
 801b510:	d02a      	beq.n	801b568 <lv_cont_set_fit4+0xc6>
        return;
    }

    ext->fit_left   = left;
 801b512:	78fb      	ldrb	r3, [r7, #3]
 801b514:	f003 0303 	and.w	r3, r3, #3
 801b518:	b2d9      	uxtb	r1, r3
 801b51a:	68fa      	ldr	r2, [r7, #12]
 801b51c:	7813      	ldrb	r3, [r2, #0]
 801b51e:	f361 1305 	bfi	r3, r1, #4, #2
 801b522:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = right;
 801b524:	78bb      	ldrb	r3, [r7, #2]
 801b526:	f003 0303 	and.w	r3, r3, #3
 801b52a:	b2d9      	uxtb	r1, r3
 801b52c:	68fa      	ldr	r2, [r7, #12]
 801b52e:	7813      	ldrb	r3, [r2, #0]
 801b530:	f361 1387 	bfi	r3, r1, #6, #2
 801b534:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = top;
 801b536:	787b      	ldrb	r3, [r7, #1]
 801b538:	f003 0303 	and.w	r3, r3, #3
 801b53c:	b2d9      	uxtb	r1, r3
 801b53e:	68fa      	ldr	r2, [r7, #12]
 801b540:	7853      	ldrb	r3, [r2, #1]
 801b542:	f361 0301 	bfi	r3, r1, #0, #2
 801b546:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = bottom;
 801b548:	7e3b      	ldrb	r3, [r7, #24]
 801b54a:	f003 0303 	and.w	r3, r3, #3
 801b54e:	b2d9      	uxtb	r1, r3
 801b550:	68fa      	ldr	r2, [r7, #12]
 801b552:	7853      	ldrb	r3, [r2, #1]
 801b554:	f361 0383 	bfi	r3, r1, #2, #2
 801b558:	7053      	strb	r3, [r2, #1]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	69db      	ldr	r3, [r3, #28]
 801b55e:	2200      	movs	r2, #0
 801b560:	2101      	movs	r1, #1
 801b562:	6878      	ldr	r0, [r7, #4]
 801b564:	4798      	blx	r3
 801b566:	e000      	b.n	801b56a <lv_cont_set_fit4+0xc8>
        return;
 801b568:	bf00      	nop
}
 801b56a:	3710      	adds	r7, #16
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd80      	pop	{r7, pc}

0801b570 <lv_cont_get_layout>:
 * Get the layout of a container
 * @param cont pointer to container object
 * @return the layout from 'lv_cont_layout_t'
 */
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b084      	sub	sp, #16
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b578:	6878      	ldr	r0, [r7, #4]
 801b57a:	f7ef f926 	bl	800a7ca <lv_obj_get_ext_attr>
 801b57e:	60f8      	str	r0, [r7, #12]
    return ext->layout;
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	781b      	ldrb	r3, [r3, #0]
 801b584:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b588:	b2db      	uxtb	r3, r3
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}

0801b592 <lv_cont_get_fit_left>:
 * Get left fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)
{
 801b592:	b580      	push	{r7, lr}
 801b594:	b084      	sub	sp, #16
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f7ef f915 	bl	800a7ca <lv_obj_get_ext_attr>
 801b5a0:	60f8      	str	r0, [r7, #12]
    return ext->fit_left;
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	781b      	ldrb	r3, [r3, #0]
 801b5a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b5aa:	b2db      	uxtb	r3, r3
}
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	3710      	adds	r7, #16
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	bd80      	pop	{r7, pc}

0801b5b4 <lv_cont_get_fit_top>:
 * Get top fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b084      	sub	sp, #16
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f7ef f904 	bl	800a7ca <lv_obj_get_ext_attr>
 801b5c2:	60f8      	str	r0, [r7, #12]
    return ext->fit_top;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	785b      	ldrb	r3, [r3, #1]
 801b5c8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801b5cc:	b2db      	uxtb	r3, r3
}
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	3710      	adds	r7, #16
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bd80      	pop	{r7, pc}
	...

0801b5d8 <lv_cont_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)
{
 801b5d8:	b590      	push	{r4, r7, lr}
 801b5da:	b087      	sub	sp, #28
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	60f8      	str	r0, [r7, #12]
 801b5e0:	460b      	mov	r3, r1
 801b5e2:	607a      	str	r2, [r7, #4]
 801b5e4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cont, sign, param);
 801b5e6:	4b34      	ldr	r3, [pc, #208]	; (801b6b8 <lv_cont_signal+0xe0>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	7af9      	ldrb	r1, [r7, #11]
 801b5ec:	687a      	ldr	r2, [r7, #4]
 801b5ee:	68f8      	ldr	r0, [r7, #12]
 801b5f0:	4798      	blx	r3
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 801b5f6:	7dbb      	ldrb	r3, [r7, #22]
 801b5f8:	2b01      	cmp	r3, #1
 801b5fa:	d001      	beq.n	801b600 <lv_cont_signal+0x28>
 801b5fc:	7dbb      	ldrb	r3, [r7, #22]
 801b5fe:	e056      	b.n	801b6ae <lv_cont_signal+0xd6>

    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 801b600:	7afb      	ldrb	r3, [r7, #11]
 801b602:	2b04      	cmp	r3, #4
 801b604:	d106      	bne.n	801b614 <lv_cont_signal+0x3c>
        lv_cont_refr_layout(cont);
 801b606:	68f8      	ldr	r0, [r7, #12]
 801b608:	f000 f85a 	bl	801b6c0 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801b60c:	68f8      	ldr	r0, [r7, #12]
 801b60e:	f000 fc94 	bl	801bf3a <lv_cont_refr_autofit>
 801b612:	e04b      	b.n	801b6ac <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 801b614:	7afb      	ldrb	r3, [r7, #11]
 801b616:	2b01      	cmp	r3, #1
 801b618:	d106      	bne.n	801b628 <lv_cont_signal+0x50>
        lv_cont_refr_layout(cont);
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f000 f850 	bl	801b6c0 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801b620:	68f8      	ldr	r0, [r7, #12]
 801b622:	f000 fc8a 	bl	801bf3a <lv_cont_refr_autofit>
 801b626:	e041      	b.n	801b6ac <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801b628:	7afb      	ldrb	r3, [r7, #11]
 801b62a:	2b02      	cmp	r3, #2
 801b62c:	d11c      	bne.n	801b668 <lv_cont_signal+0x90>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 801b62e:	68f8      	ldr	r0, [r7, #12]
 801b630:	f7ee ffe0 	bl	800a5f4 <lv_obj_get_width>
 801b634:	4603      	mov	r3, r0
 801b636:	461c      	mov	r4, r3
 801b638:	6878      	ldr	r0, [r7, #4]
 801b63a:	f7ff fe23 	bl	801b284 <lv_area_get_width>
 801b63e:	4603      	mov	r3, r0
 801b640:	429c      	cmp	r4, r3
 801b642:	d10a      	bne.n	801b65a <lv_cont_signal+0x82>
 801b644:	68f8      	ldr	r0, [r7, #12]
 801b646:	f7ee ffe3 	bl	800a610 <lv_obj_get_height>
 801b64a:	4603      	mov	r3, r0
 801b64c:	461c      	mov	r4, r3
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f7ff fe2f 	bl	801b2b2 <lv_area_get_height>
 801b654:	4603      	mov	r3, r0
 801b656:	429c      	cmp	r4, r3
 801b658:	d028      	beq.n	801b6ac <lv_cont_signal+0xd4>
            lv_cont_refr_layout(cont);
 801b65a:	68f8      	ldr	r0, [r7, #12]
 801b65c:	f000 f830 	bl	801b6c0 <lv_cont_refr_layout>
            lv_cont_refr_autofit(cont);
 801b660:	68f8      	ldr	r0, [r7, #12]
 801b662:	f000 fc6a 	bl	801bf3a <lv_cont_refr_autofit>
 801b666:	e021      	b.n	801b6ac <lv_cont_signal+0xd4>
        }
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 801b668:	7afb      	ldrb	r3, [r7, #11]
 801b66a:	2b03      	cmp	r3, #3
 801b66c:	d103      	bne.n	801b676 <lv_cont_signal+0x9e>
        /*FLOOD and FILL fit needs to be refreshed if the parent size has changed*/
        lv_cont_refr_autofit(cont);
 801b66e:	68f8      	ldr	r0, [r7, #12]
 801b670:	f000 fc63 	bl	801bf3a <lv_cont_refr_autofit>
 801b674:	e01a      	b.n	801b6ac <lv_cont_signal+0xd4>

    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b676:	7afb      	ldrb	r3, [r7, #11]
 801b678:	2b06      	cmp	r3, #6
 801b67a:	d117      	bne.n	801b6ac <lv_cont_signal+0xd4>
        lv_obj_type_t * buf = param;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b680:	2300      	movs	r3, #0
 801b682:	75fb      	strb	r3, [r7, #23]
 801b684:	e008      	b.n	801b698 <lv_cont_signal+0xc0>
            if(buf->type[i] == NULL) break;
 801b686:	7dfa      	ldrb	r2, [r7, #23]
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d006      	beq.n	801b6a0 <lv_cont_signal+0xc8>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b692:	7dfb      	ldrb	r3, [r7, #23]
 801b694:	3301      	adds	r3, #1
 801b696:	75fb      	strb	r3, [r7, #23]
 801b698:	7dfb      	ldrb	r3, [r7, #23]
 801b69a:	2b06      	cmp	r3, #6
 801b69c:	d9f3      	bls.n	801b686 <lv_cont_signal+0xae>
 801b69e:	e000      	b.n	801b6a2 <lv_cont_signal+0xca>
            if(buf->type[i] == NULL) break;
 801b6a0:	bf00      	nop
        }
        buf->type[i] = "lv_cont";
 801b6a2:	7dfa      	ldrb	r2, [r7, #23]
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	4905      	ldr	r1, [pc, #20]	; (801b6bc <lv_cont_signal+0xe4>)
 801b6a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801b6ac:	7dbb      	ldrb	r3, [r7, #22]
}
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	371c      	adds	r7, #28
 801b6b2:	46bd      	mov	sp, r7
 801b6b4:	bd90      	pop	{r4, r7, pc}
 801b6b6:	bf00      	nop
 801b6b8:	200177d0 	.word	0x200177d0
 801b6bc:	0802d4d4 	.word	0x0802d4d4

0801b6c0 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b084      	sub	sp, #16
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	f7ff ff51 	bl	801b570 <lv_cont_get_layout>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	73fb      	strb	r3, [r7, #15]

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b6d2:	2100      	movs	r1, #0
 801b6d4:	6878      	ldr	r0, [r7, #4]
 801b6d6:	f7ee ff2f 	bl	800a538 <lv_obj_get_child>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d031      	beq.n	801b744 <lv_cont_refr_layout+0x84>

    if(type == LV_LAYOUT_OFF) return;
 801b6e0:	7bfb      	ldrb	r3, [r7, #15]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d030      	beq.n	801b748 <lv_cont_refr_layout+0x88>

    if(type == LV_LAYOUT_CENTER) {
 801b6e6:	7bfb      	ldrb	r3, [r7, #15]
 801b6e8:	2b01      	cmp	r3, #1
 801b6ea:	d103      	bne.n	801b6f4 <lv_cont_refr_layout+0x34>
        lv_cont_layout_center(cont);
 801b6ec:	6878      	ldr	r0, [r7, #4]
 801b6ee:	f000 f91b 	bl	801b928 <lv_cont_layout_center>
 801b6f2:	e02a      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 801b6f4:	7bfb      	ldrb	r3, [r7, #15]
 801b6f6:	2b02      	cmp	r3, #2
 801b6f8:	d005      	beq.n	801b706 <lv_cont_refr_layout+0x46>
 801b6fa:	7bfb      	ldrb	r3, [r7, #15]
 801b6fc:	2b03      	cmp	r3, #3
 801b6fe:	d002      	beq.n	801b706 <lv_cont_refr_layout+0x46>
 801b700:	7bfb      	ldrb	r3, [r7, #15]
 801b702:	2b04      	cmp	r3, #4
 801b704:	d103      	bne.n	801b70e <lv_cont_refr_layout+0x4e>
        lv_cont_layout_col(cont);
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f000 f822 	bl	801b750 <lv_cont_layout_col>
 801b70c:	e01d      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 801b70e:	7bfb      	ldrb	r3, [r7, #15]
 801b710:	2b05      	cmp	r3, #5
 801b712:	d005      	beq.n	801b720 <lv_cont_refr_layout+0x60>
 801b714:	7bfb      	ldrb	r3, [r7, #15]
 801b716:	2b06      	cmp	r3, #6
 801b718:	d002      	beq.n	801b720 <lv_cont_refr_layout+0x60>
 801b71a:	7bfb      	ldrb	r3, [r7, #15]
 801b71c:	2b07      	cmp	r3, #7
 801b71e:	d103      	bne.n	801b728 <lv_cont_refr_layout+0x68>
        lv_cont_layout_row(cont);
 801b720:	6878      	ldr	r0, [r7, #4]
 801b722:	f000 f88b 	bl	801b83c <lv_cont_layout_row>
 801b726:	e010      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_PRETTY) {
 801b728:	7bfb      	ldrb	r3, [r7, #15]
 801b72a:	2b08      	cmp	r3, #8
 801b72c:	d103      	bne.n	801b736 <lv_cont_refr_layout+0x76>
        lv_cont_layout_pretty(cont);
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	f000 f99c 	bl	801ba6c <lv_cont_layout_pretty>
 801b734:	e009      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_GRID) {
 801b736:	7bfb      	ldrb	r3, [r7, #15]
 801b738:	2b09      	cmp	r3, #9
 801b73a:	d106      	bne.n	801b74a <lv_cont_refr_layout+0x8a>
        lv_cont_layout_grid(cont);
 801b73c:	6878      	ldr	r0, [r7, #4]
 801b73e:	f000 fb35 	bl	801bdac <lv_cont_layout_grid>
 801b742:	e002      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b744:	bf00      	nop
 801b746:	e000      	b.n	801b74a <lv_cont_refr_layout+0x8a>
    if(type == LV_LAYOUT_OFF) return;
 801b748:	bf00      	nop
    }
}
 801b74a:	3710      	adds	r7, #16
 801b74c:	46bd      	mov	sp, r7
 801b74e:	bd80      	pop	{r7, pc}

0801b750 <lv_cont_layout_col>:
/**
 * Handle column type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_col(lv_obj_t * cont)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b088      	sub	sp, #32
 801b754:	af02      	add	r7, sp, #8
 801b756:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801b758:	6878      	ldr	r0, [r7, #4]
 801b75a:	f7ff ff09 	bl	801b570 <lv_cont_get_layout>
 801b75e:	4603      	mov	r3, r0
 801b760:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801b762:	6878      	ldr	r0, [r7, #4]
 801b764:	f7ee ff76 	bl	800a654 <lv_obj_get_style>
 801b768:	60b8      	str	r0, [r7, #8]
    lv_coord_t hpad_corr;

    switch(type) {
 801b76a:	7b7b      	ldrb	r3, [r7, #13]
 801b76c:	2b03      	cmp	r3, #3
 801b76e:	d009      	beq.n	801b784 <lv_cont_layout_col+0x34>
 801b770:	2b04      	cmp	r3, #4
 801b772:	d00c      	beq.n	801b78e <lv_cont_layout_col+0x3e>
 801b774:	2b02      	cmp	r3, #2
 801b776:	d114      	bne.n	801b7a2 <lv_cont_layout_col+0x52>
        case LV_LAYOUT_COL_L:
            hpad_corr = style->body.padding.left;
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	8b5b      	ldrh	r3, [r3, #26]
 801b77c:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801b77e:	2301      	movs	r3, #1
 801b780:	74fb      	strb	r3, [r7, #19]
            break;
 801b782:	e013      	b.n	801b7ac <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_M:
            hpad_corr = 0;
 801b784:	2300      	movs	r3, #0
 801b786:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_MID;
 801b788:	2302      	movs	r3, #2
 801b78a:	74fb      	strb	r3, [r7, #19]
            break;
 801b78c:	e00e      	b.n	801b7ac <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_R:
            hpad_corr = -style->body.padding.right;
 801b78e:	68bb      	ldr	r3, [r7, #8]
 801b790:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b794:	b29b      	uxth	r3, r3
 801b796:	425b      	negs	r3, r3
 801b798:	b29b      	uxth	r3, r3
 801b79a:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801b79c:	2303      	movs	r3, #3
 801b79e:	74fb      	strb	r3, [r7, #19]
            break;
 801b7a0:	e004      	b.n	801b7ac <lv_cont_layout_col+0x5c>
        default:
            hpad_corr = 0;
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801b7a6:	2301      	movs	r3, #1
 801b7a8:	74fb      	strb	r3, [r7, #19]
            break;
 801b7aa:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b7ac:	2101      	movs	r1, #1
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7ee fd56 	bl	800a260 <lv_obj_set_protect>
    /* Align the children */
    lv_coord_t last_cord = style->body.padding.top;
 801b7b4:	68bb      	ldr	r3, [r7, #8]
 801b7b6:	8adb      	ldrh	r3, [r3, #22]
 801b7b8:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	3304      	adds	r3, #4
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f7fb fa37 	bl	8016c32 <lv_ll_get_tail>
 801b7c4:	6178      	str	r0, [r7, #20]
 801b7c6:	e02e      	b.n	801b826 <lv_cont_layout_col+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b7c8:	6978      	ldr	r0, [r7, #20]
 801b7ca:	f7ee ff9b 	bl	800a704 <lv_obj_get_hidden>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d120      	bne.n	801b816 <lv_cont_layout_col+0xc6>
 801b7d4:	2104      	movs	r1, #4
 801b7d6:	6978      	ldr	r0, [r7, #20]
 801b7d8:	f7ee ffc8 	bl	800a76c <lv_obj_is_protected>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d119      	bne.n	801b816 <lv_cont_layout_col+0xc6>

        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 801b7e2:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801b7e6:	7cfa      	ldrb	r2, [r7, #19]
 801b7e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b7ec:	9300      	str	r3, [sp, #0]
 801b7ee:	460b      	mov	r3, r1
 801b7f0:	6879      	ldr	r1, [r7, #4]
 801b7f2:	6978      	ldr	r0, [r7, #20]
 801b7f4:	f7ee f814 	bl	8009820 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801b7f8:	6978      	ldr	r0, [r7, #20]
 801b7fa:	f7ee ff09 	bl	800a610 <lv_obj_get_height>
 801b7fe:	4603      	mov	r3, r0
 801b800:	461a      	mov	r2, r3
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b808:	4413      	add	r3, r2
 801b80a:	b29a      	uxth	r2, r3
 801b80c:	89fb      	ldrh	r3, [r7, #14]
 801b80e:	4413      	add	r3, r2
 801b810:	b29b      	uxth	r3, r3
 801b812:	81fb      	strh	r3, [r7, #14]
 801b814:	e000      	b.n	801b818 <lv_cont_layout_col+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b816:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	3304      	adds	r3, #4
 801b81c:	6979      	ldr	r1, [r7, #20]
 801b81e:	4618      	mov	r0, r3
 801b820:	f7fb fa34 	bl	8016c8c <lv_ll_get_prev>
 801b824:	6178      	str	r0, [r7, #20]
 801b826:	697b      	ldr	r3, [r7, #20]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d1cd      	bne.n	801b7c8 <lv_cont_layout_col+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b82c:	2101      	movs	r1, #1
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f7ee fd2b 	bl	800a28a <lv_obj_clear_protect>
}
 801b834:	bf00      	nop
 801b836:	3718      	adds	r7, #24
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}

0801b83c <lv_cont_layout_row>:
/**
 * Handle row type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_row(lv_obj_t * cont)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b088      	sub	sp, #32
 801b840:	af02      	add	r7, sp, #8
 801b842:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801b844:	6878      	ldr	r0, [r7, #4]
 801b846:	f7ff fe93 	bl	801b570 <lv_cont_get_layout>
 801b84a:	4603      	mov	r3, r0
 801b84c:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f7ee ff00 	bl	800a654 <lv_obj_get_style>
 801b854:	60b8      	str	r0, [r7, #8]
    lv_coord_t vpad_corr;

    switch(type) {
 801b856:	7b7b      	ldrb	r3, [r7, #13]
 801b858:	2b06      	cmp	r3, #6
 801b85a:	d009      	beq.n	801b870 <lv_cont_layout_row+0x34>
 801b85c:	2b07      	cmp	r3, #7
 801b85e:	d00c      	beq.n	801b87a <lv_cont_layout_row+0x3e>
 801b860:	2b05      	cmp	r3, #5
 801b862:	d114      	bne.n	801b88e <lv_cont_layout_row+0x52>
        case LV_LAYOUT_ROW_T:
            vpad_corr = style->body.padding.top;
 801b864:	68bb      	ldr	r3, [r7, #8]
 801b866:	8adb      	ldrh	r3, [r3, #22]
 801b868:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801b86a:	2301      	movs	r3, #1
 801b86c:	74fb      	strb	r3, [r7, #19]
            break;
 801b86e:	e013      	b.n	801b898 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_M:
            vpad_corr = 0;
 801b870:	2300      	movs	r3, #0
 801b872:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_LEFT_MID;
 801b874:	2307      	movs	r3, #7
 801b876:	74fb      	strb	r3, [r7, #19]
            break;
 801b878:	e00e      	b.n	801b898 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_B:
            vpad_corr = -style->body.padding.bottom;
 801b87a:	68bb      	ldr	r3, [r7, #8]
 801b87c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b880:	b29b      	uxth	r3, r3
 801b882:	425b      	negs	r3, r3
 801b884:	b29b      	uxth	r3, r3
 801b886:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 801b888:	2304      	movs	r3, #4
 801b88a:	74fb      	strb	r3, [r7, #19]
            break;
 801b88c:	e004      	b.n	801b898 <lv_cont_layout_row+0x5c>
        default:
            vpad_corr = 0;
 801b88e:	2300      	movs	r3, #0
 801b890:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801b892:	2301      	movs	r3, #1
 801b894:	74fb      	strb	r3, [r7, #19]
            break;
 801b896:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b898:	2101      	movs	r1, #1
 801b89a:	6878      	ldr	r0, [r7, #4]
 801b89c:	f7ee fce0 	bl	800a260 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = style->body.padding.left;
 801b8a0:	68bb      	ldr	r3, [r7, #8]
 801b8a2:	8b5b      	ldrh	r3, [r3, #26]
 801b8a4:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	3304      	adds	r3, #4
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7fb f9c1 	bl	8016c32 <lv_ll_get_tail>
 801b8b0:	6178      	str	r0, [r7, #20]
 801b8b2:	e02e      	b.n	801b912 <lv_cont_layout_row+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b8b4:	6978      	ldr	r0, [r7, #20]
 801b8b6:	f7ee ff25 	bl	800a704 <lv_obj_get_hidden>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d120      	bne.n	801b902 <lv_cont_layout_row+0xc6>
 801b8c0:	2104      	movs	r1, #4
 801b8c2:	6978      	ldr	r0, [r7, #20]
 801b8c4:	f7ee ff52 	bl	800a76c <lv_obj_is_protected>
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d119      	bne.n	801b902 <lv_cont_layout_row+0xc6>

        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b8ce:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801b8d2:	7cfa      	ldrb	r2, [r7, #19]
 801b8d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b8d8:	9300      	str	r3, [sp, #0]
 801b8da:	460b      	mov	r3, r1
 801b8dc:	6879      	ldr	r1, [r7, #4]
 801b8de:	6978      	ldr	r0, [r7, #20]
 801b8e0:	f7ed ff9e 	bl	8009820 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 801b8e4:	6978      	ldr	r0, [r7, #20]
 801b8e6:	f7ee fe85 	bl	800a5f4 <lv_obj_get_width>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	461a      	mov	r2, r3
 801b8ee:	68bb      	ldr	r3, [r7, #8]
 801b8f0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b8f4:	4413      	add	r3, r2
 801b8f6:	b29a      	uxth	r2, r3
 801b8f8:	89fb      	ldrh	r3, [r7, #14]
 801b8fa:	4413      	add	r3, r2
 801b8fc:	b29b      	uxth	r3, r3
 801b8fe:	81fb      	strh	r3, [r7, #14]
 801b900:	e000      	b.n	801b904 <lv_cont_layout_row+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b902:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	3304      	adds	r3, #4
 801b908:	6979      	ldr	r1, [r7, #20]
 801b90a:	4618      	mov	r0, r3
 801b90c:	f7fb f9be 	bl	8016c8c <lv_ll_get_prev>
 801b910:	6178      	str	r0, [r7, #20]
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d1cd      	bne.n	801b8b4 <lv_cont_layout_row+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b918:	2101      	movs	r1, #1
 801b91a:	6878      	ldr	r0, [r7, #4]
 801b91c:	f7ee fcb5 	bl	800a28a <lv_obj_clear_protect>
}
 801b920:	bf00      	nop
 801b922:	3718      	adds	r7, #24
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}

0801b928 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b088      	sub	sp, #32
 801b92c:	af02      	add	r7, sp, #8
 801b92e:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	f7ee fe8f 	bl	800a654 <lv_obj_get_style>
 801b936:	60b8      	str	r0, [r7, #8]
    uint32_t obj_num         = 0;
 801b938:	2300      	movs	r3, #0
 801b93a:	613b      	str	r3, [r7, #16]
    lv_coord_t h_tot         = 0;
 801b93c:	2300      	movs	r3, #0
 801b93e:	81fb      	strh	r3, [r7, #14]

    LV_LL_READ(cont->child_ll, child)
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	3304      	adds	r3, #4
 801b944:	4618      	mov	r0, r3
 801b946:	f7fb f961 	bl	8016c0c <lv_ll_get_head>
 801b94a:	6178      	str	r0, [r7, #20]
 801b94c:	e026      	b.n	801b99c <lv_cont_layout_center+0x74>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b94e:	6978      	ldr	r0, [r7, #20]
 801b950:	f7ee fed8 	bl	800a704 <lv_obj_get_hidden>
 801b954:	4603      	mov	r3, r0
 801b956:	2b00      	cmp	r3, #0
 801b958:	d118      	bne.n	801b98c <lv_cont_layout_center+0x64>
 801b95a:	2104      	movs	r1, #4
 801b95c:	6978      	ldr	r0, [r7, #20]
 801b95e:	f7ee ff05 	bl	800a76c <lv_obj_is_protected>
 801b962:	4603      	mov	r3, r0
 801b964:	2b00      	cmp	r3, #0
 801b966:	d111      	bne.n	801b98c <lv_cont_layout_center+0x64>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 801b968:	6978      	ldr	r0, [r7, #20]
 801b96a:	f7ee fe51 	bl	800a610 <lv_obj_get_height>
 801b96e:	4603      	mov	r3, r0
 801b970:	461a      	mov	r2, r3
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b978:	4413      	add	r3, r2
 801b97a:	b29a      	uxth	r2, r3
 801b97c:	89fb      	ldrh	r3, [r7, #14]
 801b97e:	4413      	add	r3, r2
 801b980:	b29b      	uxth	r3, r3
 801b982:	81fb      	strh	r3, [r7, #14]
        obj_num++;
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	3301      	adds	r3, #1
 801b988:	613b      	str	r3, [r7, #16]
 801b98a:	e000      	b.n	801b98e <lv_cont_layout_center+0x66>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b98c:	bf00      	nop
    LV_LL_READ(cont->child_ll, child)
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	3304      	adds	r3, #4
 801b992:	6979      	ldr	r1, [r7, #20]
 801b994:	4618      	mov	r0, r3
 801b996:	f7fb f95f 	bl	8016c58 <lv_ll_get_next>
 801b99a:	6178      	str	r0, [r7, #20]
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d1d5      	bne.n	801b94e <lv_cont_layout_center+0x26>
    }

    if(obj_num == 0) return;
 801b9a2:	693b      	ldr	r3, [r7, #16]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d05c      	beq.n	801ba62 <lv_cont_layout_center+0x13a>

    h_tot -= style->body.padding.inner;
 801b9a8:	89fa      	ldrh	r2, [r7, #14]
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b9b0:	b29b      	uxth	r3, r3
 801b9b2:	1ad3      	subs	r3, r2, r3
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b9b8:	2101      	movs	r1, #1
 801b9ba:	6878      	ldr	r0, [r7, #4]
 801b9bc:	f7ee fc50 	bl	800a260 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = -(h_tot / 2);
 801b9c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b9c4:	0fda      	lsrs	r2, r3, #31
 801b9c6:	4413      	add	r3, r2
 801b9c8:	105b      	asrs	r3, r3, #1
 801b9ca:	b21b      	sxth	r3, r3
 801b9cc:	b29b      	uxth	r3, r3
 801b9ce:	425b      	negs	r3, r3
 801b9d0:	b29b      	uxth	r3, r3
 801b9d2:	81bb      	strh	r3, [r7, #12]
    LV_LL_READ_BACK(cont->child_ll, child)
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	3304      	adds	r3, #4
 801b9d8:	4618      	mov	r0, r3
 801b9da:	f7fb f92a 	bl	8016c32 <lv_ll_get_tail>
 801b9de:	6178      	str	r0, [r7, #20]
 801b9e0:	e037      	b.n	801ba52 <lv_cont_layout_center+0x12a>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b9e2:	6978      	ldr	r0, [r7, #20]
 801b9e4:	f7ee fe8e 	bl	800a704 <lv_obj_get_hidden>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d129      	bne.n	801ba42 <lv_cont_layout_center+0x11a>
 801b9ee:	2104      	movs	r1, #4
 801b9f0:	6978      	ldr	r0, [r7, #20]
 801b9f2:	f7ee febb 	bl	800a76c <lv_obj_is_protected>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d122      	bne.n	801ba42 <lv_cont_layout_center+0x11a>

        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 801b9fc:	6978      	ldr	r0, [r7, #20]
 801b9fe:	f7ee fe07 	bl	800a610 <lv_obj_get_height>
 801ba02:	4603      	mov	r3, r0
 801ba04:	0fda      	lsrs	r2, r3, #31
 801ba06:	4413      	add	r3, r2
 801ba08:	105b      	asrs	r3, r3, #1
 801ba0a:	b21b      	sxth	r3, r3
 801ba0c:	b29a      	uxth	r2, r3
 801ba0e:	89bb      	ldrh	r3, [r7, #12]
 801ba10:	4413      	add	r3, r2
 801ba12:	b29b      	uxth	r3, r3
 801ba14:	b21b      	sxth	r3, r3
 801ba16:	9300      	str	r3, [sp, #0]
 801ba18:	2300      	movs	r3, #0
 801ba1a:	2200      	movs	r2, #0
 801ba1c:	6879      	ldr	r1, [r7, #4]
 801ba1e:	6978      	ldr	r0, [r7, #20]
 801ba20:	f7ed fefe 	bl	8009820 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801ba24:	6978      	ldr	r0, [r7, #20]
 801ba26:	f7ee fdf3 	bl	800a610 <lv_obj_get_height>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	461a      	mov	r2, r3
 801ba2e:	68bb      	ldr	r3, [r7, #8]
 801ba30:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801ba34:	4413      	add	r3, r2
 801ba36:	b29a      	uxth	r2, r3
 801ba38:	89bb      	ldrh	r3, [r7, #12]
 801ba3a:	4413      	add	r3, r2
 801ba3c:	b29b      	uxth	r3, r3
 801ba3e:	81bb      	strh	r3, [r7, #12]
 801ba40:	e000      	b.n	801ba44 <lv_cont_layout_center+0x11c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801ba42:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	3304      	adds	r3, #4
 801ba48:	6979      	ldr	r1, [r7, #20]
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	f7fb f91e 	bl	8016c8c <lv_ll_get_prev>
 801ba50:	6178      	str	r0, [r7, #20]
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d1c4      	bne.n	801b9e2 <lv_cont_layout_center+0xba>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801ba58:	2101      	movs	r1, #1
 801ba5a:	6878      	ldr	r0, [r7, #4]
 801ba5c:	f7ee fc15 	bl	800a28a <lv_obj_clear_protect>
 801ba60:	e000      	b.n	801ba64 <lv_cont_layout_center+0x13c>
    if(obj_num == 0) return;
 801ba62:	bf00      	nop
}
 801ba64:	3718      	adds	r7, #24
 801ba66:	46bd      	mov	sp, r7
 801ba68:	bd80      	pop	{r7, pc}
	...

0801ba6c <lv_cont_layout_pretty>:
 * Handle the pretty layout. Put as many object as possible in row
 * then begin a new row
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_pretty(lv_obj_t * cont)
{
 801ba6c:	b5b0      	push	{r4, r5, r7, lr}
 801ba6e:	b090      	sub	sp, #64	; 0x40
 801ba70:	af02      	add	r7, sp, #8
 801ba72:	6078      	str	r0, [r7, #4]
    lv_obj_t * child_rs;  /* Row starter child */
    lv_obj_t * child_rc;  /* Row closer child */
    lv_obj_t * child_tmp; /* Temporary child */
    const lv_style_t * style = lv_obj_get_style(cont);
 801ba74:	6878      	ldr	r0, [r7, #4]
 801ba76:	f7ee fded 	bl	800a654 <lv_obj_get_style>
 801ba7a:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801ba7c:	6878      	ldr	r0, [r7, #4]
 801ba7e:	f7ee fdb9 	bl	800a5f4 <lv_obj_get_width>
 801ba82:	4603      	mov	r3, r0
 801ba84:	82fb      	strh	r3, [r7, #22]
    lv_coord_t act_y         = style->body.padding.top;
 801ba86:	69bb      	ldr	r3, [r7, #24]
 801ba88:	8adb      	ldrh	r3, [r3, #22]
 801ba8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/

    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	3304      	adds	r3, #4
 801ba90:	4618      	mov	r0, r3
 801ba92:	f7fb f8ce 	bl	8016c32 <lv_ll_get_tail>
 801ba96:	6378      	str	r0, [r7, #52]	; 0x34
    if(child_rs == NULL) return;                /*Return if no child*/
 801ba98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	f000 8180 	beq.w	801bda0 <lv_cont_layout_pretty+0x334>

    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801baa0:	2101      	movs	r1, #1
 801baa2:	6878      	ldr	r0, [r7, #4]
 801baa4:	f7ee fbdc 	bl	800a260 <lv_obj_set_protect>

    child_rc = child_rs; /*Initially the the row starter and closer is the same*/
 801baa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801baaa:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 801baac:	e16d      	b.n	801bd8a <lv_cont_layout_pretty+0x31e>
        lv_coord_t h_row = 0;
 801baae:	2300      	movs	r3, #0
 801bab0:	853b      	strh	r3, [r7, #40]	; 0x28
        lv_coord_t w_row =
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 801bab2:	69bb      	ldr	r3, [r7, #24]
 801bab4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801bab8:	b29a      	uxth	r2, r3
 801baba:	69bb      	ldr	r3, [r7, #24]
 801babc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801bac0:	b29b      	uxth	r3, r3
 801bac2:	4413      	add	r3, r2
 801bac4:	b29b      	uxth	r3, r3
        lv_coord_t w_row =
 801bac6:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint32_t obj_num = 0;
 801bac8:	2300      	movs	r3, #0
 801baca:	623b      	str	r3, [r7, #32]

        /*Find the row closer object and collect some data*/
        do {
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801bacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bace:	f7ee fe19 	bl	800a704 <lv_obj_get_hidden>
 801bad2:	4603      	mov	r3, r0
 801bad4:	f083 0301 	eor.w	r3, r3, #1
 801bad8:	b2db      	uxtb	r3, r3
 801bada:	2b00      	cmp	r3, #0
 801badc:	d04b      	beq.n	801bb76 <lv_cont_layout_pretty+0x10a>
 801bade:	2104      	movs	r1, #4
 801bae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bae2:	f7ee fe43 	bl	800a76c <lv_obj_is_protected>
 801bae6:	4603      	mov	r3, r0
 801bae8:	f083 0301 	eor.w	r3, r3, #1
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d041      	beq.n	801bb76 <lv_cont_layout_pretty+0x10a>
                /*If this object is already not fit then break*/
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 801baf2:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 801baf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801baf8:	f7ee fd7c 	bl	800a5f4 <lv_obj_get_width>
 801bafc:	4603      	mov	r3, r0
 801bafe:	18e2      	adds	r2, r4, r3
 801bb00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bb04:	429a      	cmp	r2, r3
 801bb06:	dd0d      	ble.n	801bb24 <lv_cont_layout_pretty+0xb8>
                    /*Step back one child because the last already not fit, so the previous is the
                     * closer*/
                    if(child_rc != NULL && obj_num != 0) {
 801bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d043      	beq.n	801bb96 <lv_cont_layout_pretty+0x12a>
 801bb0e:	6a3b      	ldr	r3, [r7, #32]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d040      	beq.n	801bb96 <lv_cont_layout_pretty+0x12a>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	3304      	adds	r3, #4
 801bb18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	f7fb f89c 	bl	8016c58 <lv_ll_get_next>
 801bb20:	6338      	str	r0, [r7, #48]	; 0x30
                    }
                    break;
 801bb22:	e038      	b.n	801bb96 <lv_cont_layout_pretty+0x12a>
                }
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 801bb24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bb26:	f7ee fd65 	bl	800a5f4 <lv_obj_get_width>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	69bb      	ldr	r3, [r7, #24]
 801bb30:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bb34:	4413      	add	r3, r2
 801bb36:	b29a      	uxth	r2, r3
 801bb38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bb3a:	4413      	add	r3, r2
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	84fb      	strh	r3, [r7, #38]	; 0x26
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 801bb40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bb42:	f7ee fd65 	bl	800a610 <lv_obj_get_height>
 801bb46:	4603      	mov	r3, r0
 801bb48:	461a      	mov	r2, r3
 801bb4a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bb4e:	4293      	cmp	r3, r2
 801bb50:	dc04      	bgt.n	801bb5c <lv_cont_layout_pretty+0xf0>
 801bb52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bb54:	f7ee fd5c 	bl	800a610 <lv_obj_get_height>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	e001      	b.n	801bb60 <lv_cont_layout_pretty+0xf4>
 801bb5c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bb60:	853b      	strh	r3, [r7, #40]	; 0x28
                obj_num++;
 801bb62:	6a3b      	ldr	r3, [r7, #32]
 801bb64:	3301      	adds	r3, #1
 801bb66:	623b      	str	r3, [r7, #32]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801bb68:	2108      	movs	r1, #8
 801bb6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bb6c:	f7ee fdfe 	bl	800a76c <lv_obj_is_protected>
 801bb70:	4603      	mov	r3, r0
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d111      	bne.n	801bb9a <lv_cont_layout_pretty+0x12e>
                    break; /*If can not be followed by an other object then break here*/
            }
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	3304      	adds	r3, #4
 801bb7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	f7fb f885 	bl	8016c8c <lv_ll_get_prev>
 801bb82:	6338      	str	r0, [r7, #48]	; 0x30
            if(obj_num == 0)
 801bb84:	6a3b      	ldr	r3, [r7, #32]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d101      	bne.n	801bb8e <lv_cont_layout_pretty+0x122>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
 801bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb8c:	637b      	str	r3, [r7, #52]	; 0x34
                                        next as first */
        } while(child_rc != NULL);
 801bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d19b      	bne.n	801bacc <lv_cont_layout_pretty+0x60>
 801bb94:	e002      	b.n	801bb9c <lv_cont_layout_pretty+0x130>
                    break;
 801bb96:	bf00      	nop
 801bb98:	e000      	b.n	801bb9c <lv_cont_layout_pretty+0x130>
                    break; /*If can not be followed by an other object then break here*/
 801bb9a:	bf00      	nop

        /*If the object is too long  then align it to the middle*/
        if(obj_num == 0) {
 801bb9c:	6a3b      	ldr	r3, [r7, #32]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d112      	bne.n	801bbc8 <lv_cont_layout_pretty+0x15c>
            if(child_rc != NULL) {
 801bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	f000 80d9 	beq.w	801bd5c <lv_cont_layout_pretty+0x2f0>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801bbaa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801bbae:	9300      	str	r3, [sp, #0]
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	2202      	movs	r2, #2
 801bbb4:	6879      	ldr	r1, [r7, #4]
 801bbb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bbb8:	f7ed fe32 	bl	8009820 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 801bbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bbbe:	f7ee fd27 	bl	800a610 <lv_obj_get_height>
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	853b      	strh	r3, [r7, #40]	; 0x28
 801bbc6:	e0c9      	b.n	801bd5c <lv_cont_layout_pretty+0x2f0>
            }
        }
        /*If there is only one object in the row then align it to the middle*/
        else if(obj_num == 1) {
 801bbc8:	6a3b      	ldr	r3, [r7, #32]
 801bbca:	2b01      	cmp	r3, #1
 801bbcc:	d109      	bne.n	801bbe2 <lv_cont_layout_pretty+0x176>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801bbce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801bbd2:	9300      	str	r3, [sp, #0]
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	2202      	movs	r2, #2
 801bbd8:	6879      	ldr	r1, [r7, #4]
 801bbda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bbdc:	f7ed fe20 	bl	8009820 <lv_obj_align>
 801bbe0:	e0bc      	b.n	801bd5c <lv_cont_layout_pretty+0x2f0>
        }
        /*If there are two object in the row then align them proportionally*/
        else if(obj_num == 2) {
 801bbe2:	6a3b      	ldr	r3, [r7, #32]
 801bbe4:	2b02      	cmp	r3, #2
 801bbe6:	d153      	bne.n	801bc90 <lv_cont_layout_pretty+0x224>
            lv_obj_t * obj1 = child_rs;
 801bbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbea:	613b      	str	r3, [r7, #16]
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	3304      	adds	r3, #4
 801bbf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	f7fb f84a 	bl	8016c8c <lv_ll_get_prev>
 801bbf8:	60f8      	str	r0, [r7, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 801bbfa:	6938      	ldr	r0, [r7, #16]
 801bbfc:	f7ee fcfa 	bl	800a5f4 <lv_obj_get_width>
 801bc00:	4603      	mov	r3, r0
 801bc02:	b29c      	uxth	r4, r3
 801bc04:	68f8      	ldr	r0, [r7, #12]
 801bc06:	f7ee fcf5 	bl	800a5f4 <lv_obj_get_width>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	b29b      	uxth	r3, r3
 801bc0e:	4423      	add	r3, r4
 801bc10:	b29b      	uxth	r3, r3
 801bc12:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t pad  = (w_obj - w_row) / 3;
 801bc14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bc1c:	1ad3      	subs	r3, r2, r3
 801bc1e:	4a62      	ldr	r2, [pc, #392]	; (801bda8 <lv_cont_layout_pretty+0x33c>)
 801bc20:	fb82 1203 	smull	r1, r2, r2, r3
 801bc24:	17db      	asrs	r3, r3, #31
 801bc26:	1ad3      	subs	r3, r2, r3
 801bc28:	817b      	strh	r3, [r7, #10]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 801bc2a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801bc2e:	6938      	ldr	r0, [r7, #16]
 801bc30:	f7ee fcee 	bl	800a610 <lv_obj_get_height>
 801bc34:	4603      	mov	r3, r0
 801bc36:	1ae3      	subs	r3, r4, r3
 801bc38:	0fda      	lsrs	r2, r3, #31
 801bc3a:	4413      	add	r3, r2
 801bc3c:	105b      	asrs	r3, r3, #1
 801bc3e:	b29a      	uxth	r2, r3
 801bc40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bc42:	4413      	add	r3, r2
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	b21b      	sxth	r3, r3
 801bc48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801bc4c:	9300      	str	r3, [sp, #0]
 801bc4e:	4613      	mov	r3, r2
 801bc50:	2201      	movs	r2, #1
 801bc52:	6879      	ldr	r1, [r7, #4]
 801bc54:	6938      	ldr	r0, [r7, #16]
 801bc56:	f7ed fde3 	bl	8009820 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801bc5a:	897b      	ldrh	r3, [r7, #10]
 801bc5c:	425b      	negs	r3, r3
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	b21d      	sxth	r5, r3
 801bc62:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801bc66:	68f8      	ldr	r0, [r7, #12]
 801bc68:	f7ee fcd2 	bl	800a610 <lv_obj_get_height>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	1ae3      	subs	r3, r4, r3
 801bc70:	0fda      	lsrs	r2, r3, #31
 801bc72:	4413      	add	r3, r2
 801bc74:	105b      	asrs	r3, r3, #1
 801bc76:	b29a      	uxth	r2, r3
 801bc78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bc7a:	4413      	add	r3, r2
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	b21b      	sxth	r3, r3
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	462b      	mov	r3, r5
 801bc84:	2203      	movs	r2, #3
 801bc86:	6879      	ldr	r1, [r7, #4]
 801bc88:	68f8      	ldr	r0, [r7, #12]
 801bc8a:	f7ed fdc9 	bl	8009820 <lv_obj_align>
 801bc8e:	e065      	b.n	801bd5c <lv_cont_layout_pretty+0x2f0>
        }
        /* Align the children (from child_rs to child_rc)*/
        else {
            w_row -= style->body.padding.inner * obj_num;
 801bc90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bc92:	69bb      	ldr	r3, [r7, #24]
 801bc94:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bc98:	b299      	uxth	r1, r3
 801bc9a:	6a3b      	ldr	r3, [r7, #32]
 801bc9c:	b29b      	uxth	r3, r3
 801bc9e:	fb11 f303 	smulbb	r3, r1, r3
 801bca2:	b29b      	uxth	r3, r3
 801bca4:	1ad3      	subs	r3, r2, r3
 801bca6:	b29b      	uxth	r3, r3
 801bca8:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 801bcaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bcb2:	1ad3      	subs	r3, r2, r3
 801bcb4:	461a      	mov	r2, r3
 801bcb6:	6a3b      	ldr	r3, [r7, #32]
 801bcb8:	3b01      	subs	r3, #1
 801bcba:	fbb2 f3f3 	udiv	r3, r2, r3
 801bcbe:	82bb      	strh	r3, [r7, #20]
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 801bcc0:	69bb      	ldr	r3, [r7, #24]
 801bcc2:	8b5b      	ldrh	r3, [r3, #26]
 801bcc4:	83fb      	strh	r3, [r7, #30]
            child_tmp           = child_rs;
 801bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801bcca:	e042      	b.n	801bd52 <lv_cont_layout_pretty+0x2e6>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 801bccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bcce:	f7ee fd19 	bl	800a704 <lv_obj_get_hidden>
 801bcd2:	4603      	mov	r3, r0
 801bcd4:	f083 0301 	eor.w	r3, r3, #1
 801bcd8:	b2db      	uxtb	r3, r3
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d02e      	beq.n	801bd3c <lv_cont_layout_pretty+0x2d0>
 801bcde:	2104      	movs	r1, #4
 801bce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bce2:	f7ee fd43 	bl	800a76c <lv_obj_is_protected>
 801bce6:	4603      	mov	r3, r0
 801bce8:	f083 0301 	eor.w	r3, r3, #1
 801bcec:	b2db      	uxtb	r3, r3
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d024      	beq.n	801bd3c <lv_cont_layout_pretty+0x2d0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801bcf2:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801bcf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bcf8:	f7ee fc8a 	bl	800a610 <lv_obj_get_height>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	1ae3      	subs	r3, r4, r3
 801bd00:	0fda      	lsrs	r2, r3, #31
 801bd02:	4413      	add	r3, r2
 801bd04:	105b      	asrs	r3, r3, #1
 801bd06:	b29a      	uxth	r2, r3
 801bd08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bd0a:	4413      	add	r3, r2
 801bd0c:	b29b      	uxth	r3, r3
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 801bd0e:	b21b      	sxth	r3, r3
 801bd10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801bd14:	9300      	str	r3, [sp, #0]
 801bd16:	4613      	mov	r3, r2
 801bd18:	2201      	movs	r2, #1
 801bd1a:	6879      	ldr	r1, [r7, #4]
 801bd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bd1e:	f7ed fd7f 	bl	8009820 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 801bd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bd24:	f7ee fc66 	bl	800a5f4 <lv_obj_get_width>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	461a      	mov	r2, r3
 801bd2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bd30:	4413      	add	r3, r2
 801bd32:	b29a      	uxth	r2, r3
 801bd34:	8bfb      	ldrh	r3, [r7, #30]
 801bd36:	4413      	add	r3, r2
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	83fb      	strh	r3, [r7, #30]
                }
                if(child_tmp == child_rc) break;
 801bd3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd40:	429a      	cmp	r2, r3
 801bd42:	d00a      	beq.n	801bd5a <lv_cont_layout_pretty+0x2ee>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	3304      	adds	r3, #4
 801bd48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7fa ff9e 	bl	8016c8c <lv_ll_get_prev>
 801bd50:	62f8      	str	r0, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d1b9      	bne.n	801bccc <lv_cont_layout_pretty+0x260>
 801bd58:	e000      	b.n	801bd5c <lv_cont_layout_pretty+0x2f0>
                if(child_tmp == child_rc) break;
 801bd5a:	bf00      	nop
            }
        }

        if(child_rc == NULL) break;
 801bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d018      	beq.n	801bd94 <lv_cont_layout_pretty+0x328>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801bd62:	69bb      	ldr	r3, [r7, #24]
 801bd64:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bd68:	b29a      	uxth	r2, r3
 801bd6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd6c:	4413      	add	r3, r2
 801bd6e:	b29a      	uxth	r2, r3
 801bd70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bd72:	4413      	add	r3, r2
 801bd74:	b29b      	uxth	r3, r3
 801bd76:	857b      	strh	r3, [r7, #42]	; 0x2a
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	3304      	adds	r3, #4
 801bd7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bd7e:	4618      	mov	r0, r3
 801bd80:	f7fa ff84 	bl	8016c8c <lv_ll_get_prev>
 801bd84:	6378      	str	r0, [r7, #52]	; 0x34
        child_rc = child_rs;
 801bd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd88:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 801bd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	f47f ae8e 	bne.w	801baae <lv_cont_layout_pretty+0x42>
 801bd92:	e000      	b.n	801bd96 <lv_cont_layout_pretty+0x32a>
        if(child_rc == NULL) break;
 801bd94:	bf00      	nop
    }
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801bd96:	2101      	movs	r1, #1
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f7ee fa76 	bl	800a28a <lv_obj_clear_protect>
 801bd9e:	e000      	b.n	801bda2 <lv_cont_layout_pretty+0x336>
    if(child_rs == NULL) return;                /*Return if no child*/
 801bda0:	bf00      	nop
}
 801bda2:	3738      	adds	r7, #56	; 0x38
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bdb0      	pop	{r4, r5, r7, pc}
 801bda8:	55555556 	.word	0x55555556

0801bdac <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b08a      	sub	sp, #40	; 0x28
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 801bdb4:	6878      	ldr	r0, [r7, #4]
 801bdb6:	f7ee fc4d 	bl	800a654 <lv_obj_get_style>
 801bdba:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 801bdbc:	6878      	ldr	r0, [r7, #4]
 801bdbe:	f7ee fc19 	bl	800a5f4 <lv_obj_get_width>
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	82fb      	strh	r3, [r7, #22]
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801bdc6:	2100      	movs	r1, #0
 801bdc8:	6878      	ldr	r0, [r7, #4]
 801bdca:	f7ee fbb5 	bl	800a538 <lv_obj_get_child>
 801bdce:	4603      	mov	r3, r0
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7ee fc0f 	bl	800a5f4 <lv_obj_get_width>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	82bb      	strh	r3, [r7, #20]
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801bdda:	2100      	movs	r1, #0
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f7ee fbab 	bl	800a538 <lv_obj_get_child>
 801bde2:	4603      	mov	r3, r0
 801bde4:	4618      	mov	r0, r3
 801bde6:	f7ee fc13 	bl	800a610 <lv_obj_get_height>
 801bdea:	4603      	mov	r3, r0
 801bdec:	827b      	strh	r3, [r7, #18]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 801bdee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bdf2:	69ba      	ldr	r2, [r7, #24]
 801bdf4:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 801bdf8:	1a9b      	subs	r3, r3, r2
 801bdfa:	69ba      	ldr	r2, [r7, #24]
 801bdfc:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801be00:	1a9a      	subs	r2, r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 801be02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801be06:	69b9      	ldr	r1, [r7, #24]
 801be08:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 801be0c:	440b      	add	r3, r1
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 801be0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801be12:	823b      	strh	r3, [r7, #16]
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 801be14:	8a3b      	ldrh	r3, [r7, #16]
 801be16:	2b01      	cmp	r3, #1
 801be18:	d918      	bls.n	801be4c <lv_cont_layout_grid+0xa0>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 801be1a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801be1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801be22:	69b9      	ldr	r1, [r7, #24]
 801be24:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801be28:	1a5b      	subs	r3, r3, r1
 801be2a:	69b9      	ldr	r1, [r7, #24]
 801be2c:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801be30:	1a5b      	subs	r3, r3, r1
 801be32:	441a      	add	r2, r3
 801be34:	8a3b      	ldrh	r3, [r7, #16]
 801be36:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 801be3a:	fb01 f303 	mul.w	r3, r1, r3
 801be3e:	1ad2      	subs	r2, r2, r3
                (obj_row - 1);
 801be40:	8a3b      	ldrh	r3, [r7, #16]
 801be42:	3b01      	subs	r3, #1
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 801be44:	fb92 f3f3 	sdiv	r3, r2, r3
 801be48:	847b      	strh	r3, [r7, #34]	; 0x22
 801be4a:	e010      	b.n	801be6e <lv_cont_layout_grid+0xc2>
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
 801be4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801be50:	0fda      	lsrs	r2, r3, #31
 801be52:	4413      	add	r3, r2
 801be54:	105b      	asrs	r3, r3, #1
 801be56:	b21b      	sxth	r3, r3
 801be58:	b29a      	uxth	r2, r3
 801be5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801be5e:	0fd9      	lsrs	r1, r3, #31
 801be60:	440b      	add	r3, r1
 801be62:	105b      	asrs	r3, r3, #1
 801be64:	b21b      	sxth	r3, r3
 801be66:	b29b      	uxth	r3, r3
 801be68:	1ad3      	subs	r3, r2, r3
 801be6a:	b29b      	uxth	r3, r3
 801be6c:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 801be6e:	69bb      	ldr	r3, [r7, #24]
 801be70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801be74:	b29a      	uxth	r2, r3
 801be76:	8a7b      	ldrh	r3, [r7, #18]
 801be78:	4413      	add	r3, r2
 801be7a:	b29b      	uxth	r3, r3
 801be7c:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801be7e:	2101      	movs	r1, #1
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f7ee f9ed 	bl	800a260 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t act_x = style->body.padding.left;
 801be86:	69bb      	ldr	r3, [r7, #24]
 801be88:	8b5b      	ldrh	r3, [r3, #26]
 801be8a:	843b      	strh	r3, [r7, #32]
    lv_coord_t act_y = style->body.padding.top;
 801be8c:	69bb      	ldr	r3, [r7, #24]
 801be8e:	8adb      	ldrh	r3, [r3, #22]
 801be90:	83fb      	strh	r3, [r7, #30]
    uint16_t obj_cnt = 0;
 801be92:	2300      	movs	r3, #0
 801be94:	83bb      	strh	r3, [r7, #28]
    LV_LL_READ_BACK(cont->child_ll, child)
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	3304      	adds	r3, #4
 801be9a:	4618      	mov	r0, r3
 801be9c:	f7fa fec9 	bl	8016c32 <lv_ll_get_tail>
 801bea0:	6278      	str	r0, [r7, #36]	; 0x24
 801bea2:	e03f      	b.n	801bf24 <lv_cont_layout_grid+0x178>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801bea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bea6:	f7ee fc2d 	bl	800a704 <lv_obj_get_hidden>
 801beaa:	4603      	mov	r3, r0
 801beac:	2b00      	cmp	r3, #0
 801beae:	d131      	bne.n	801bf14 <lv_cont_layout_grid+0x168>
 801beb0:	2104      	movs	r1, #4
 801beb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beb4:	f7ee fc5a 	bl	800a76c <lv_obj_is_protected>
 801beb8:	4603      	mov	r3, r0
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d12a      	bne.n	801bf14 <lv_cont_layout_grid+0x168>

        if(obj_row > 1) {
 801bebe:	8a3b      	ldrh	r3, [r7, #16]
 801bec0:	2b01      	cmp	r3, #1
 801bec2:	d90d      	bls.n	801bee0 <lv_cont_layout_grid+0x134>
            lv_obj_set_pos(child, act_x, act_y);
 801bec4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801bec8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801becc:	4619      	mov	r1, r3
 801bece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bed0:	f7ed fb4e 	bl	8009570 <lv_obj_set_pos>
            act_x += x_ofs;
 801bed4:	8c3a      	ldrh	r2, [r7, #32]
 801bed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bed8:	4413      	add	r3, r2
 801beda:	b29b      	uxth	r3, r3
 801bedc:	843b      	strh	r3, [r7, #32]
 801bede:	e007      	b.n	801bef0 <lv_cont_layout_grid+0x144>
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
 801bee0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801bee4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bee8:	4619      	mov	r1, r3
 801beea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beec:	f7ed fb40 	bl	8009570 <lv_obj_set_pos>
        }
        obj_cnt++;
 801bef0:	8bbb      	ldrh	r3, [r7, #28]
 801bef2:	3301      	adds	r3, #1
 801bef4:	83bb      	strh	r3, [r7, #28]

        if(obj_cnt >= obj_row) {
 801bef6:	8bba      	ldrh	r2, [r7, #28]
 801bef8:	8a3b      	ldrh	r3, [r7, #16]
 801befa:	429a      	cmp	r2, r3
 801befc:	d30b      	bcc.n	801bf16 <lv_cont_layout_grid+0x16a>
            obj_cnt = 0;
 801befe:	2300      	movs	r3, #0
 801bf00:	83bb      	strh	r3, [r7, #28]
            act_x   = style->body.padding.left;
 801bf02:	69bb      	ldr	r3, [r7, #24]
 801bf04:	8b5b      	ldrh	r3, [r3, #26]
 801bf06:	843b      	strh	r3, [r7, #32]
            act_y += y_ofs;
 801bf08:	8bfa      	ldrh	r2, [r7, #30]
 801bf0a:	89fb      	ldrh	r3, [r7, #14]
 801bf0c:	4413      	add	r3, r2
 801bf0e:	b29b      	uxth	r3, r3
 801bf10:	83fb      	strh	r3, [r7, #30]
 801bf12:	e000      	b.n	801bf16 <lv_cont_layout_grid+0x16a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801bf14:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	3304      	adds	r3, #4
 801bf1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7fa feb5 	bl	8016c8c <lv_ll_get_prev>
 801bf22:	6278      	str	r0, [r7, #36]	; 0x24
 801bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d1bc      	bne.n	801bea4 <lv_cont_layout_grid+0xf8>
        }
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801bf2a:	2101      	movs	r1, #1
 801bf2c:	6878      	ldr	r0, [r7, #4]
 801bf2e:	f7ee f9ac 	bl	800a28a <lv_obj_clear_protect>
}
 801bf32:	bf00      	nop
 801bf34:	3728      	adds	r7, #40	; 0x28
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd80      	pop	{r7, pc}

0801bf3a <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 801bf3a:	b580      	push	{r7, lr}
 801bf3c:	b090      	sub	sp, #64	; 0x40
 801bf3e:	af00      	add	r7, sp, #0
 801bf40:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801bf42:	6878      	ldr	r0, [r7, #4]
 801bf44:	f7ee fc41 	bl	800a7ca <lv_obj_get_ext_attr>
 801bf48:	63b8      	str	r0, [r7, #56]	; 0x38

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d115      	bne.n	801bf84 <lv_cont_refr_autofit+0x4a>
 801bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf5a:	781b      	ldrb	r3, [r3, #0]
 801bf5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801bf60:	b2db      	uxtb	r3, r3
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d10e      	bne.n	801bf84 <lv_cont_refr_autofit+0x4a>
 801bf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf68:	785b      	ldrb	r3, [r3, #1]
 801bf6a:	f003 0303 	and.w	r3, r3, #3
 801bf6e:	b2db      	uxtb	r3, r3
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d107      	bne.n	801bf84 <lv_cont_refr_autofit+0x4a>
       ext->fit_bottom == LV_FIT_NONE) {
 801bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf76:	785b      	ldrb	r3, [r3, #1]
 801bf78:	f003 030c 	and.w	r3, r3, #12
 801bf7c:	b2db      	uxtb	r3, r3
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	f000 81c8 	beq.w	801c314 <lv_cont_refr_autofit+0x3da>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 801bf84:	6878      	ldr	r0, [r7, #4]
 801bf86:	f7ee fb65 	bl	800a654 <lv_obj_get_style>
 801bf8a:	6378      	str	r0, [r7, #52]	; 0x34
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 801bf8c:	6878      	ldr	r0, [r7, #4]
 801bf8e:	f7ee fac7 	bl	800a520 <lv_obj_get_parent>
 801bf92:	6338      	str	r0, [r7, #48]	; 0x30
    const lv_style_t * par_style = lv_obj_get_style(par);
 801bf94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bf96:	f7ee fb5d 	bl	800a654 <lv_obj_get_style>
 801bf9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
 801bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf9e:	f103 0210 	add.w	r2, r3, #16
 801bfa2:	f107 0310 	add.w	r3, r7, #16
 801bfa6:	4611      	mov	r1, r2
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	f7ff f95d 	bl	801b268 <lv_area_copy>
    flood_area.x1 += par_style->body.padding.left;
 801bfae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801bfb2:	b29a      	uxth	r2, r3
 801bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfb6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801bfba:	b29b      	uxth	r3, r3
 801bfbc:	4413      	add	r3, r2
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	b21b      	sxth	r3, r3
 801bfc2:	823b      	strh	r3, [r7, #16]
    flood_area.x2 -= par_style->body.padding.right;
 801bfc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bfc8:	b29a      	uxth	r2, r3
 801bfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfcc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	1ad3      	subs	r3, r2, r3
 801bfd4:	b29b      	uxth	r3, r3
 801bfd6:	b21b      	sxth	r3, r3
 801bfd8:	82bb      	strh	r3, [r7, #20]
    flood_area.y1 += par_style->body.padding.top;
 801bfda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bfde:	b29a      	uxth	r2, r3
 801bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bfe6:	b29b      	uxth	r3, r3
 801bfe8:	4413      	add	r3, r2
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	b21b      	sxth	r3, r3
 801bfee:	827b      	strh	r3, [r7, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 801bff0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bff4:	b29a      	uxth	r2, r3
 801bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bff8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bffc:	b29b      	uxth	r3, r3
 801bffe:	1ad3      	subs	r3, r2, r3
 801c000:	b29b      	uxth	r3, r3
 801c002:	b21b      	sxth	r3, r3
 801c004:	82fb      	strh	r3, [r7, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 801c006:	f107 0318 	add.w	r3, r7, #24
 801c00a:	4619      	mov	r1, r3
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f7ee fab0 	bl	800a572 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 801c012:	f107 0320 	add.w	r3, r7, #32
 801c016:	4619      	mov	r1, r3
 801c018:	6878      	ldr	r0, [r7, #4]
 801c01a:	f7ee faaa 	bl	800a572 <lv_obj_get_coords>

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	3304      	adds	r3, #4
 801c022:	4618      	mov	r0, r3
 801c024:	f7fa fe91 	bl	8016d4a <lv_ll_is_empty>
 801c028:	4603      	mov	r3, r0
 801c02a:	f083 0301 	eor.w	r3, r3, #1
 801c02e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(has_children) {
 801c032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c036:	2b00      	cmp	r3, #0
 801c038:	d078      	beq.n	801c12c <lv_cont_refr_autofit+0x1f2>
        tight_area.x1 = LV_COORD_MAX;
 801c03a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c03e:	843b      	strh	r3, [r7, #32]
        tight_area.y1 = LV_COORD_MAX;
 801c040:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c044:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.x2 = LV_COORD_MIN;
 801c046:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801c04a:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y2 = LV_COORD_MIN;
 801c04c:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801c050:	84fb      	strh	r3, [r7, #38]	; 0x26

        LV_LL_READ(cont->child_ll, child_i)
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	3304      	adds	r3, #4
 801c056:	4618      	mov	r0, r3
 801c058:	f7fa fdd8 	bl	8016c0c <lv_ll_get_head>
 801c05c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801c05e:	e036      	b.n	801c0ce <lv_cont_refr_autofit+0x194>
        {
            if(lv_obj_get_hidden(child_i) != false) continue;
 801c060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c062:	f7ee fb4f 	bl	800a704 <lv_obj_get_hidden>
 801c066:	4603      	mov	r3, r0
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d128      	bne.n	801c0be <lv_cont_refr_autofit+0x184>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 801c06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c06e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c072:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c076:	4293      	cmp	r3, r2
 801c078:	bfa8      	it	ge
 801c07a:	4613      	movge	r3, r2
 801c07c:	b21b      	sxth	r3, r3
 801c07e:	843b      	strh	r3, [r7, #32]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 801c080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c082:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c086:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c08a:	4293      	cmp	r3, r2
 801c08c:	bfa8      	it	ge
 801c08e:	4613      	movge	r3, r2
 801c090:	b21b      	sxth	r3, r3
 801c092:	847b      	strh	r3, [r7, #34]	; 0x22
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 801c094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c096:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801c09a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c09e:	4293      	cmp	r3, r2
 801c0a0:	bfb8      	it	lt
 801c0a2:	4613      	movlt	r3, r2
 801c0a4:	b21b      	sxth	r3, r3
 801c0a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 801c0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0aa:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801c0ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	bfb8      	it	lt
 801c0b6:	4613      	movlt	r3, r2
 801c0b8:	b21b      	sxth	r3, r3
 801c0ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c0bc:	e000      	b.n	801c0c0 <lv_cont_refr_autofit+0x186>
            if(lv_obj_get_hidden(child_i) != false) continue;
 801c0be:	bf00      	nop
        LV_LL_READ(cont->child_ll, child_i)
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	3304      	adds	r3, #4
 801c0c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7fa fdc6 	bl	8016c58 <lv_ll_get_next>
 801c0cc:	63f8      	str	r0, [r7, #60]	; 0x3c
 801c0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d1c5      	bne.n	801c060 <lv_cont_refr_autofit+0x126>
        }

        tight_area.x1 -= style->body.padding.left;
 801c0d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c0d8:	b29a      	uxth	r2, r3
 801c0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0e0:	b29b      	uxth	r3, r3
 801c0e2:	1ad3      	subs	r3, r2, r3
 801c0e4:	b29b      	uxth	r3, r3
 801c0e6:	b21b      	sxth	r3, r3
 801c0e8:	843b      	strh	r3, [r7, #32]
        tight_area.x2 += style->body.padding.right;
 801c0ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c0ee:	b29a      	uxth	r2, r3
 801c0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0f2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	4413      	add	r3, r2
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	b21b      	sxth	r3, r3
 801c0fe:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y1 -= style->body.padding.top;
 801c100:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c104:	b29a      	uxth	r2, r3
 801c106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c108:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c10c:	b29b      	uxth	r3, r3
 801c10e:	1ad3      	subs	r3, r2, r3
 801c110:	b29b      	uxth	r3, r3
 801c112:	b21b      	sxth	r3, r3
 801c114:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.y2 += style->body.padding.bottom;
 801c116:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c11a:	b29a      	uxth	r2, r3
 801c11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c11e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c122:	b29b      	uxth	r3, r3
 801c124:	4413      	add	r3, r2
 801c126:	b29b      	uxth	r3, r3
 801c128:	b21b      	sxth	r3, r3
 801c12a:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 801c12c:	f107 0218 	add.w	r2, r7, #24
 801c130:	f107 0308 	add.w	r3, r7, #8
 801c134:	4611      	mov	r1, r2
 801c136:	4618      	mov	r0, r3
 801c138:	f7ff f896 	bl	801b268 <lv_area_copy>

    switch(ext->fit_left) {
 801c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13e:	781b      	ldrb	r3, [r3, #0]
 801c140:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801c144:	b2db      	uxtb	r3, r3
 801c146:	2b02      	cmp	r3, #2
 801c148:	d008      	beq.n	801c15c <lv_cont_refr_autofit+0x222>
 801c14a:	2b03      	cmp	r3, #3
 801c14c:	d00a      	beq.n	801c164 <lv_cont_refr_autofit+0x22a>
 801c14e:	2b01      	cmp	r3, #1
 801c150:	d000      	beq.n	801c154 <lv_cont_refr_autofit+0x21a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
 801c152:	e018      	b.n	801c186 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 801c154:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c158:	813b      	strh	r3, [r7, #8]
 801c15a:	e014      	b.n	801c186 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 801c15c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801c160:	813b      	strh	r3, [r7, #8]
 801c162:	e010      	b.n	801c186 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 801c164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d008      	beq.n	801c17e <lv_cont_refr_autofit+0x244>
 801c16c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801c170:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c174:	4293      	cmp	r3, r2
 801c176:	bfa8      	it	ge
 801c178:	4613      	movge	r3, r2
 801c17a:	b21b      	sxth	r3, r3
 801c17c:	e001      	b.n	801c182 <lv_cont_refr_autofit+0x248>
 801c17e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801c182:	813b      	strh	r3, [r7, #8]
 801c184:	bf00      	nop
    }

    switch(ext->fit_right) {
 801c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c188:	781b      	ldrb	r3, [r3, #0]
 801c18a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801c18e:	b2db      	uxtb	r3, r3
 801c190:	2b02      	cmp	r3, #2
 801c192:	d008      	beq.n	801c1a6 <lv_cont_refr_autofit+0x26c>
 801c194:	2b03      	cmp	r3, #3
 801c196:	d00a      	beq.n	801c1ae <lv_cont_refr_autofit+0x274>
 801c198:	2b01      	cmp	r3, #1
 801c19a:	d000      	beq.n	801c19e <lv_cont_refr_autofit+0x264>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
 801c19c:	e018      	b.n	801c1d0 <lv_cont_refr_autofit+0x296>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 801c19e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c1a2:	81bb      	strh	r3, [r7, #12]
 801c1a4:	e014      	b.n	801c1d0 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 801c1a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c1aa:	81bb      	strh	r3, [r7, #12]
 801c1ac:	e010      	b.n	801c1d0 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 801c1ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d008      	beq.n	801c1c8 <lv_cont_refr_autofit+0x28e>
 801c1b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c1ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	bfb8      	it	lt
 801c1c2:	4613      	movlt	r3, r2
 801c1c4:	b21b      	sxth	r3, r3
 801c1c6:	e001      	b.n	801c1cc <lv_cont_refr_autofit+0x292>
 801c1c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c1cc:	81bb      	strh	r3, [r7, #12]
 801c1ce:	bf00      	nop
    }

    switch(ext->fit_top) {
 801c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d2:	785b      	ldrb	r3, [r3, #1]
 801c1d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801c1d8:	b2db      	uxtb	r3, r3
 801c1da:	2b02      	cmp	r3, #2
 801c1dc:	d008      	beq.n	801c1f0 <lv_cont_refr_autofit+0x2b6>
 801c1de:	2b03      	cmp	r3, #3
 801c1e0:	d00a      	beq.n	801c1f8 <lv_cont_refr_autofit+0x2be>
 801c1e2:	2b01      	cmp	r3, #1
 801c1e4:	d000      	beq.n	801c1e8 <lv_cont_refr_autofit+0x2ae>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
 801c1e6:	e018      	b.n	801c21a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 801c1e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c1ec:	817b      	strh	r3, [r7, #10]
 801c1ee:	e014      	b.n	801c21a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 801c1f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c1f4:	817b      	strh	r3, [r7, #10]
 801c1f6:	e010      	b.n	801c21a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 801c1f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d008      	beq.n	801c212 <lv_cont_refr_autofit+0x2d8>
 801c200:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801c204:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c208:	4293      	cmp	r3, r2
 801c20a:	bfa8      	it	ge
 801c20c:	4613      	movge	r3, r2
 801c20e:	b21b      	sxth	r3, r3
 801c210:	e001      	b.n	801c216 <lv_cont_refr_autofit+0x2dc>
 801c212:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c216:	817b      	strh	r3, [r7, #10]
 801c218:	bf00      	nop
    }

    switch(ext->fit_bottom) {
 801c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c21c:	785b      	ldrb	r3, [r3, #1]
 801c21e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801c222:	b2db      	uxtb	r3, r3
 801c224:	2b02      	cmp	r3, #2
 801c226:	d008      	beq.n	801c23a <lv_cont_refr_autofit+0x300>
 801c228:	2b03      	cmp	r3, #3
 801c22a:	d00a      	beq.n	801c242 <lv_cont_refr_autofit+0x308>
 801c22c:	2b01      	cmp	r3, #1
 801c22e:	d000      	beq.n	801c232 <lv_cont_refr_autofit+0x2f8>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
 801c230:	e018      	b.n	801c264 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 801c232:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c236:	81fb      	strh	r3, [r7, #14]
 801c238:	e014      	b.n	801c264 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 801c23a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c23e:	81fb      	strh	r3, [r7, #14]
 801c240:	e010      	b.n	801c264 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 801c242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c246:	2b00      	cmp	r3, #0
 801c248:	d008      	beq.n	801c25c <lv_cont_refr_autofit+0x322>
 801c24a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c24e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c252:	4293      	cmp	r3, r2
 801c254:	bfb8      	it	lt
 801c256:	4613      	movlt	r3, r2
 801c258:	b21b      	sxth	r3, r3
 801c25a:	e001      	b.n	801c260 <lv_cont_refr_autofit+0x326>
 801c25c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c260:	81fb      	strh	r3, [r7, #14]
 801c262:	bf00      	nop
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c26a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c26e:	429a      	cmp	r2, r3
 801c270:	d114      	bne.n	801c29c <lv_cont_refr_autofit+0x362>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801c27c:	429a      	cmp	r2, r3
 801c27e:	d10d      	bne.n	801c29c <lv_cont_refr_autofit+0x362>
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801c286:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d106      	bne.n	801c29c <lv_cont_refr_autofit+0x362>
       cont->coords.y2 != new_area.y2) {
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801c294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801c298:	429a      	cmp	r2, r3
 801c29a:	d03c      	beq.n	801c316 <lv_cont_refr_autofit+0x3dc>

        lv_obj_invalidate(cont);
 801c29c:	6878      	ldr	r0, [r7, #4]
 801c29e:	f7ed f868 	bl	8009372 <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	3310      	adds	r3, #16
 801c2a6:	f107 0208 	add.w	r2, r7, #8
 801c2aa:	4611      	mov	r1, r2
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	f7fe ffdb 	bl	801b268 <lv_area_copy>
        lv_obj_invalidate(cont);
 801c2b2:	6878      	ldr	r0, [r7, #4]
 801c2b4:	f7ed f85d 	bl	8009372 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	69db      	ldr	r3, [r3, #28]
 801c2bc:	f107 0218 	add.w	r2, r7, #24
 801c2c0:	2102      	movs	r1, #2
 801c2c2:	6878      	ldr	r0, [r7, #4]
 801c2c4:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 801c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2c8:	69db      	ldr	r3, [r3, #28]
 801c2ca:	687a      	ldr	r2, [r7, #4]
 801c2cc:	2101      	movs	r1, #1
 801c2ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c2d0:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 801c2d2:	6878      	ldr	r0, [r7, #4]
 801c2d4:	f7ee f9aa 	bl	800a62c <lv_obj_get_auto_realign>
 801c2d8:	4603      	mov	r3, r0
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d002      	beq.n	801c2e4 <lv_cont_refr_autofit+0x3aa>
            lv_obj_realign(cont);
 801c2de:	6878      	ldr	r0, [r7, #4]
 801c2e0:	f7ed ff12 	bl	800a108 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	3304      	adds	r3, #4
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7fa fc8f 	bl	8016c0c <lv_ll_get_head>
 801c2ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 801c2f0:	e00c      	b.n	801c30c <lv_cont_refr_autofit+0x3d2>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 801c2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2f4:	69db      	ldr	r3, [r3, #28]
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	2103      	movs	r1, #3
 801c2fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c2fc:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	3304      	adds	r3, #4
 801c302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c304:	4618      	mov	r0, r3
 801c306:	f7fa fca7 	bl	8016c58 <lv_ll_get_next>
 801c30a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801c30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d1ef      	bne.n	801c2f2 <lv_cont_refr_autofit+0x3b8>
 801c312:	e000      	b.n	801c316 <lv_cont_refr_autofit+0x3dc>
        return;
 801c314:	bf00      	nop
        }
    }
}
 801c316:	3740      	adds	r7, #64	; 0x40
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd80      	pop	{r7, pc}

0801c31c <lv_img_get_style>:
 * @param img pointer to an image object
 * @param type which style should be get (can be only `LV_IMG_STYLE_MAIN`)
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b082      	sub	sp, #8
 801c320:	af00      	add	r7, sp, #0
 801c322:	6078      	str	r0, [r7, #4]
 801c324:	460b      	mov	r3, r1
 801c326:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 801c328:	6878      	ldr	r0, [r7, #4]
 801c32a:	f7ee f993 	bl	800a654 <lv_obj_get_style>
 801c32e:	4603      	mov	r3, r0
}
 801c330:	4618      	mov	r0, r3
 801c332:	3708      	adds	r7, #8
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}

0801c338 <lv_img_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a image object, if not NULL then the new object will be copied from it
 * @return pointer to the created image
 */
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b086      	sub	sp, #24
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("image create started");

    lv_obj_t * new_img = NULL;
 801c342:	2300      	movs	r3, #0
 801c344:	617b      	str	r3, [r7, #20]

    /*Create a basic object*/
    new_img = lv_obj_create(par, copy);
 801c346:	6839      	ldr	r1, [r7, #0]
 801c348:	6878      	ldr	r0, [r7, #4]
 801c34a:	f7ec fcd5 	bl	8008cf8 <lv_obj_create>
 801c34e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_img);
 801c350:	697b      	ldr	r3, [r7, #20]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d100      	bne.n	801c358 <lv_img_create+0x20>
 801c356:	e7fe      	b.n	801c356 <lv_img_create+0x1e>
    if(new_img == NULL) return NULL;
 801c358:	697b      	ldr	r3, [r7, #20]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d101      	bne.n	801c362 <lv_img_create+0x2a>
 801c35e:	2300      	movs	r3, #0
 801c360:	e07b      	b.n	801c45a <lv_img_create+0x122>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 801c362:	4b40      	ldr	r3, [pc, #256]	; (801c464 <lv_img_create+0x12c>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d105      	bne.n	801c376 <lv_img_create+0x3e>
 801c36a:	6978      	ldr	r0, [r7, #20]
 801c36c:	f7ee fa15 	bl	800a79a <lv_obj_get_signal_cb>
 801c370:	4602      	mov	r2, r0
 801c372:	4b3c      	ldr	r3, [pc, #240]	; (801c464 <lv_img_create+0x12c>)
 801c374:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to image object*/
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 801c376:	2110      	movs	r1, #16
 801c378:	6978      	ldr	r0, [r7, #20]
 801c37a:	f7ee f859 	bl	800a430 <lv_obj_allocate_ext_attr>
 801c37e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801c380:	693b      	ldr	r3, [r7, #16]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d100      	bne.n	801c388 <lv_img_create+0x50>
 801c386:	e7fe      	b.n	801c386 <lv_img_create+0x4e>
    if(ext == NULL) return NULL;
 801c388:	693b      	ldr	r3, [r7, #16]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d101      	bne.n	801c392 <lv_img_create+0x5a>
 801c38e:	2300      	movs	r3, #0
 801c390:	e063      	b.n	801c45a <lv_img_create+0x122>

    ext->src       = NULL;
 801c392:	693b      	ldr	r3, [r7, #16]
 801c394:	2200      	movs	r2, #0
 801c396:	601a      	str	r2, [r3, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 801c398:	693a      	ldr	r2, [r7, #16]
 801c39a:	7b13      	ldrb	r3, [r2, #12]
 801c39c:	f043 0303 	orr.w	r3, r3, #3
 801c3a0:	7313      	strb	r3, [r2, #12]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 801c3a2:	693a      	ldr	r2, [r7, #16]
 801c3a4:	7b13      	ldrb	r3, [r2, #12]
 801c3a6:	f36f 03c7 	bfc	r3, #3, #5
 801c3aa:	7313      	strb	r3, [r2, #12]
    ext->w         = lv_obj_get_width(new_img);
 801c3ac:	6978      	ldr	r0, [r7, #20]
 801c3ae:	f7ee f921 	bl	800a5f4 <lv_obj_get_width>
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	461a      	mov	r2, r3
 801c3b6:	693b      	ldr	r3, [r7, #16]
 801c3b8:	811a      	strh	r2, [r3, #8]
    ext->h         = lv_obj_get_height(new_img);
 801c3ba:	6978      	ldr	r0, [r7, #20]
 801c3bc:	f7ee f928 	bl	800a610 <lv_obj_get_height>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	693b      	ldr	r3, [r7, #16]
 801c3c6:	815a      	strh	r2, [r3, #10]
    ext->auto_size = 1;
 801c3c8:	693a      	ldr	r2, [r7, #16]
 801c3ca:	7b13      	ldrb	r3, [r2, #12]
 801c3cc:	f043 0304 	orr.w	r3, r3, #4
 801c3d0:	7313      	strb	r3, [r2, #12]
    ext->offset.x  = 0;
 801c3d2:	693b      	ldr	r3, [r7, #16]
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	809a      	strh	r2, [r3, #4]
    ext->offset.y  = 0;
 801c3d8:	693b      	ldr	r3, [r7, #16]
 801c3da:	2200      	movs	r2, #0
 801c3dc:	80da      	strh	r2, [r3, #6]

    /*Init the new object*/
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 801c3de:	4922      	ldr	r1, [pc, #136]	; (801c468 <lv_img_create+0x130>)
 801c3e0:	6978      	ldr	r0, [r7, #20]
 801c3e2:	f7ee f809 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 801c3e6:	4921      	ldr	r1, [pc, #132]	; (801c46c <lv_img_create+0x134>)
 801c3e8:	6978      	ldr	r0, [r7, #20]
 801c3ea:	f7ee f813 	bl	800a414 <lv_obj_set_design_cb>

    if(copy == NULL) {
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d11a      	bne.n	801c42a <lv_img_create+0xf2>
        lv_obj_set_click(new_img, false);
 801c3f4:	2100      	movs	r1, #0
 801c3f6:	6978      	ldr	r0, [r7, #20]
 801c3f8:	f7ed fedd 	bl	800a1b6 <lv_obj_set_click>
        /* Enable auto size for non screens
         * because image screens are wallpapers
         * and must be screen sized*/
        if(par != NULL) {
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d009      	beq.n	801c416 <lv_img_create+0xde>
            ext->auto_size = 1;
 801c402:	693a      	ldr	r2, [r7, #16]
 801c404:	7b13      	ldrb	r3, [r2, #12]
 801c406:	f043 0304 	orr.w	r3, r3, #4
 801c40a:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 801c40c:	2100      	movs	r1, #0
 801c40e:	6978      	ldr	r0, [r7, #20]
 801c410:	f7ed feab 	bl	800a16a <lv_obj_set_style>
 801c414:	e020      	b.n	801c458 <lv_img_create+0x120>
        } else {
            ext->auto_size = 0;
 801c416:	693a      	ldr	r2, [r7, #16]
 801c418:	7b13      	ldrb	r3, [r2, #12]
 801c41a:	f36f 0382 	bfc	r3, #2, #1
 801c41e:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 801c420:	4913      	ldr	r1, [pc, #76]	; (801c470 <lv_img_create+0x138>)
 801c422:	6978      	ldr	r0, [r7, #20]
 801c424:	f7ed fea1 	bl	800a16a <lv_obj_set_style>
 801c428:	e016      	b.n	801c458 <lv_img_create+0x120>
        }
    } else {
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801c42a:	6838      	ldr	r0, [r7, #0]
 801c42c:	f7ee f9cd 	bl	800a7ca <lv_obj_get_ext_attr>
 801c430:	60f8      	str	r0, [r7, #12]
        ext->auto_size          = copy_ext->auto_size;
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	7b1b      	ldrb	r3, [r3, #12]
 801c436:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c43a:	b2d9      	uxtb	r1, r3
 801c43c:	693a      	ldr	r2, [r7, #16]
 801c43e:	7b13      	ldrb	r3, [r2, #12]
 801c440:	f361 0382 	bfi	r3, r1, #2, #1
 801c444:	7313      	strb	r3, [r2, #12]
        lv_img_set_src(new_img, copy_ext->src);
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	4619      	mov	r1, r3
 801c44c:	6978      	ldr	r0, [r7, #20]
 801c44e:	f000 f811 	bl	801c474 <lv_img_set_src>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_img);
 801c452:	6978      	ldr	r0, [r7, #20]
 801c454:	f7ed fe9b 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("image created");

    return new_img;
 801c458:	697b      	ldr	r3, [r7, #20]
}
 801c45a:	4618      	mov	r0, r3
 801c45c:	3718      	adds	r7, #24
 801c45e:	46bd      	mov	sp, r7
 801c460:	bd80      	pop	{r7, pc}
 801c462:	bf00      	nop
 801c464:	200177d4 	.word	0x200177d4
 801c468:	0801c8c9 	.word	0x0801c8c9
 801c46c:	0801c673 	.word	0x0801c673
 801c470:	2001ba40 	.word	0x2001ba40

0801c474 <lv_img_set_src>:
 * Set the pixel map to display by the image
 * @param img pointer to an image object
 * @param data the image data
 */
void lv_img_set_src(lv_obj_t * img, const void * src_img)
{
 801c474:	b590      	push	{r4, r7, lr}
 801c476:	b08d      	sub	sp, #52	; 0x34
 801c478:	af04      	add	r7, sp, #16
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	6039      	str	r1, [r7, #0]
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 801c47e:	6838      	ldr	r0, [r7, #0]
 801c480:	f7f1 fa1a 	bl	800d8b8 <lv_img_src_get_type>
 801c484:	4603      	mov	r3, r0
 801c486:	77fb      	strb	r3, [r7, #31]
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 801c488:	6878      	ldr	r0, [r7, #4]
 801c48a:	f7ee f99e 	bl	800a7ca <lv_obj_get_ext_attr>
 801c48e:	61b8      	str	r0, [r7, #24]
        default: LV_LOG_WARN("lv_img_set_src: unknown type");
    }
#endif

    /*If the new source type is unknown free the memories of the old source*/
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801c490:	7ffb      	ldrb	r3, [r7, #31]
 801c492:	2b03      	cmp	r3, #3
 801c494:	d11b      	bne.n	801c4ce <lv_img_set_src+0x5a>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 801c496:	69bb      	ldr	r3, [r7, #24]
 801c498:	7b1b      	ldrb	r3, [r3, #12]
 801c49a:	f003 0303 	and.w	r3, r3, #3
 801c49e:	b2db      	uxtb	r3, r3
 801c4a0:	2b02      	cmp	r3, #2
 801c4a2:	d006      	beq.n	801c4b2 <lv_img_set_src+0x3e>
 801c4a4:	69bb      	ldr	r3, [r7, #24]
 801c4a6:	7b1b      	ldrb	r3, [r3, #12]
 801c4a8:	f003 0303 	and.w	r3, r3, #3
 801c4ac:	b2db      	uxtb	r3, r3
 801c4ae:	2b01      	cmp	r3, #1
 801c4b0:	d104      	bne.n	801c4bc <lv_img_set_src+0x48>
            lv_mem_free(ext->src);
 801c4b2:	69bb      	ldr	r3, [r7, #24]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	f7fa fd68 	bl	8016f8c <lv_mem_free>
        }
        ext->src      = NULL;
 801c4bc:	69bb      	ldr	r3, [r7, #24]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	601a      	str	r2, [r3, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 801c4c2:	69ba      	ldr	r2, [r7, #24]
 801c4c4:	7b13      	ldrb	r3, [r2, #12]
 801c4c6:	f043 0303 	orr.w	r3, r3, #3
 801c4ca:	7313      	strb	r3, [r2, #12]
        return;
 801c4cc:	e0b8      	b.n	801c640 <lv_img_set_src+0x1cc>
    }

    lv_img_header_t header;
    lv_img_decoder_get_info(src_img, &header);
 801c4ce:	f107 030c 	add.w	r3, r7, #12
 801c4d2:	4619      	mov	r1, r3
 801c4d4:	6838      	ldr	r0, [r7, #0]
 801c4d6:	f7f7 ff3b 	bl	8014350 <lv_img_decoder_get_info>

    /*Save the source*/
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801c4da:	7ffb      	ldrb	r3, [r7, #31]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d116      	bne.n	801c50e <lv_img_set_src+0x9a>
        LV_LOG_INFO("lv_img_set_src:  `LV_IMG_SRC_VARIABLE` type found");

        /*If memory was allocated because of the previous `src_type` then free it*/
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c4e0:	69bb      	ldr	r3, [r7, #24]
 801c4e2:	7b1b      	ldrb	r3, [r3, #12]
 801c4e4:	f003 0303 	and.w	r3, r3, #3
 801c4e8:	b2db      	uxtb	r3, r3
 801c4ea:	2b01      	cmp	r3, #1
 801c4ec:	d006      	beq.n	801c4fc <lv_img_set_src+0x88>
 801c4ee:	69bb      	ldr	r3, [r7, #24]
 801c4f0:	7b1b      	ldrb	r3, [r3, #12]
 801c4f2:	f003 0303 	and.w	r3, r3, #3
 801c4f6:	b2db      	uxtb	r3, r3
 801c4f8:	2b02      	cmp	r3, #2
 801c4fa:	d104      	bne.n	801c506 <lv_img_set_src+0x92>
            lv_mem_free(ext->src);
 801c4fc:	69bb      	ldr	r3, [r7, #24]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4618      	mov	r0, r3
 801c502:	f7fa fd43 	bl	8016f8c <lv_mem_free>
        }
        ext->src = src_img;
 801c506:	69bb      	ldr	r3, [r7, #24]
 801c508:	683a      	ldr	r2, [r7, #0]
 801c50a:	601a      	str	r2, [r3, #0]
 801c50c:	e034      	b.n	801c578 <lv_img_set_src+0x104>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 801c50e:	7ffb      	ldrb	r3, [r7, #31]
 801c510:	2b01      	cmp	r3, #1
 801c512:	d002      	beq.n	801c51a <lv_img_set_src+0xa6>
 801c514:	7ffb      	ldrb	r3, [r7, #31]
 801c516:	2b02      	cmp	r3, #2
 801c518:	d12e      	bne.n	801c578 <lv_img_set_src+0x104>
        /* If the new and the old src are the same then it was only a refresh.*/
        if(ext->src != src_img) {
 801c51a:	69bb      	ldr	r3, [r7, #24]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	683a      	ldr	r2, [r7, #0]
 801c520:	429a      	cmp	r2, r3
 801c522:	d029      	beq.n	801c578 <lv_img_set_src+0x104>
            /*If memory was allocated because of the previous `src_type` then free it*/
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c524:	69bb      	ldr	r3, [r7, #24]
 801c526:	7b1b      	ldrb	r3, [r3, #12]
 801c528:	f003 0303 	and.w	r3, r3, #3
 801c52c:	b2db      	uxtb	r3, r3
 801c52e:	2b01      	cmp	r3, #1
 801c530:	d006      	beq.n	801c540 <lv_img_set_src+0xcc>
 801c532:	69bb      	ldr	r3, [r7, #24]
 801c534:	7b1b      	ldrb	r3, [r3, #12]
 801c536:	f003 0303 	and.w	r3, r3, #3
 801c53a:	b2db      	uxtb	r3, r3
 801c53c:	2b02      	cmp	r3, #2
 801c53e:	d104      	bne.n	801c54a <lv_img_set_src+0xd6>
                lv_mem_free(ext->src);
 801c540:	69bb      	ldr	r3, [r7, #24]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	4618      	mov	r0, r3
 801c546:	f7fa fd21 	bl	8016f8c <lv_mem_free>
            }
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 801c54a:	6838      	ldr	r0, [r7, #0]
 801c54c:	f7e3 fe4a 	bl	80001e4 <strlen>
 801c550:	4603      	mov	r3, r0
 801c552:	3301      	adds	r3, #1
 801c554:	4618      	mov	r0, r3
 801c556:	f7fa fcd9 	bl	8016f0c <lv_mem_alloc>
 801c55a:	6178      	str	r0, [r7, #20]
            lv_mem_assert(new_str);
 801c55c:	697b      	ldr	r3, [r7, #20]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d100      	bne.n	801c564 <lv_img_set_src+0xf0>
 801c562:	e7fe      	b.n	801c562 <lv_img_set_src+0xee>
            if(new_str == NULL) return;
 801c564:	697b      	ldr	r3, [r7, #20]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d069      	beq.n	801c63e <lv_img_set_src+0x1ca>
            strcpy(new_str, src_img);
 801c56a:	6839      	ldr	r1, [r7, #0]
 801c56c:	6978      	ldr	r0, [r7, #20]
 801c56e:	f00e fe9b 	bl	802b2a8 <strcpy>
            ext->src = new_str;
 801c572:	69bb      	ldr	r3, [r7, #24]
 801c574:	697a      	ldr	r2, [r7, #20]
 801c576:	601a      	str	r2, [r3, #0]
        }
    }

    if(src_type == LV_IMG_SRC_SYMBOL) {
 801c578:	7ffb      	ldrb	r3, [r7, #31]
 801c57a:	2b02      	cmp	r3, #2
 801c57c:	d12b      	bne.n	801c5d6 <lv_img_set_src+0x162>
        /*`lv_img_dsc_get_info` couldn't set the with and height of a font so set it here*/
        const lv_style_t * style = lv_img_get_style(img, LV_IMG_STYLE_MAIN);
 801c57e:	2100      	movs	r1, #0
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f7ff fecb 	bl	801c31c <lv_img_get_style>
 801c586:	6138      	str	r0, [r7, #16]
        lv_point_t size;
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 801c588:	693b      	ldr	r3, [r7, #16]
 801c58a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c58c:	693b      	ldr	r3, [r7, #16]
 801c58e:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801c592:	693b      	ldr	r3, [r7, #16]
 801c594:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c598:	f107 0008 	add.w	r0, r7, #8
 801c59c:	2200      	movs	r2, #0
 801c59e:	9202      	str	r2, [sp, #8]
 801c5a0:	f647 4218 	movw	r2, #31768	; 0x7c18
 801c5a4:	9201      	str	r2, [sp, #4]
 801c5a6:	9300      	str	r3, [sp, #0]
 801c5a8:	4623      	mov	r3, r4
 801c5aa:	460a      	mov	r2, r1
 801c5ac:	6839      	ldr	r1, [r7, #0]
 801c5ae:	f7fa fff9 	bl	80175a4 <lv_txt_get_size>
                        LV_COORD_MAX, LV_TXT_FLAG_NONE);
        header.w = size.x;
 801c5b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c5b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c5ba:	b29a      	uxth	r2, r3
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	f362 2394 	bfi	r3, r2, #10, #11
 801c5c2:	60fb      	str	r3, [r7, #12]
        header.h = size.y;
 801c5c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801c5c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c5cc:	b29a      	uxth	r2, r3
 801c5ce:	89fb      	ldrh	r3, [r7, #14]
 801c5d0:	f362 134f 	bfi	r3, r2, #5, #11
 801c5d4:	81fb      	strh	r3, [r7, #14]
    }

    ext->src_type = src_type;
 801c5d6:	7ffb      	ldrb	r3, [r7, #31]
 801c5d8:	f003 0303 	and.w	r3, r3, #3
 801c5dc:	b2d9      	uxtb	r1, r3
 801c5de:	69ba      	ldr	r2, [r7, #24]
 801c5e0:	7b13      	ldrb	r3, [r2, #12]
 801c5e2:	f361 0301 	bfi	r3, r1, #0, #2
 801c5e6:	7313      	strb	r3, [r2, #12]
    ext->w        = header.w;
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	b21a      	sxth	r2, r3
 801c5f2:	69bb      	ldr	r3, [r7, #24]
 801c5f4:	811a      	strh	r2, [r3, #8]
    ext->h        = header.h;
 801c5f6:	89fb      	ldrh	r3, [r7, #14]
 801c5f8:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	b21a      	sxth	r2, r3
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	815a      	strh	r2, [r3, #10]
    ext->cf       = header.cf;
 801c604:	7b3b      	ldrb	r3, [r7, #12]
 801c606:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801c60a:	b2d9      	uxtb	r1, r3
 801c60c:	69ba      	ldr	r2, [r7, #24]
 801c60e:	7b13      	ldrb	r3, [r2, #12]
 801c610:	f361 03c7 	bfi	r3, r1, #3, #5
 801c614:	7313      	strb	r3, [r2, #12]

    if(lv_img_get_auto_size(img) != false) {
 801c616:	6878      	ldr	r0, [r7, #4]
 801c618:	f000 f815 	bl	801c646 <lv_img_get_auto_size>
 801c61c:	4603      	mov	r3, r0
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d009      	beq.n	801c636 <lv_img_set_src+0x1c2>
        lv_obj_set_size(img, ext->w, ext->h);
 801c622:	69bb      	ldr	r3, [r7, #24]
 801c624:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c628:	69bb      	ldr	r3, [r7, #24]
 801c62a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801c62e:	461a      	mov	r2, r3
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f7ed f852 	bl	80096da <lv_obj_set_size>
    }

    lv_obj_invalidate(img);
 801c636:	6878      	ldr	r0, [r7, #4]
 801c638:	f7ec fe9b 	bl	8009372 <lv_obj_invalidate>
 801c63c:	e000      	b.n	801c640 <lv_img_set_src+0x1cc>
            if(new_str == NULL) return;
 801c63e:	bf00      	nop
}
 801c640:	3724      	adds	r7, #36	; 0x24
 801c642:	46bd      	mov	sp, r7
 801c644:	bd90      	pop	{r4, r7, pc}

0801c646 <lv_img_get_auto_size>:
 * Get the auto size enable attribute
 * @param img pointer to an image
 * @return true: auto size is enabled, false: auto size is disabled
 */
bool lv_img_get_auto_size(const lv_obj_t * img)
{
 801c646:	b580      	push	{r7, lr}
 801c648:	b084      	sub	sp, #16
 801c64a:	af00      	add	r7, sp, #0
 801c64c:	6078      	str	r0, [r7, #4]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801c64e:	6878      	ldr	r0, [r7, #4]
 801c650:	f7ee f8bb 	bl	800a7ca <lv_obj_get_ext_attr>
 801c654:	60f8      	str	r0, [r7, #12]

    return ext->auto_size == 0 ? false : true;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	7b1b      	ldrb	r3, [r3, #12]
 801c65a:	f003 0304 	and.w	r3, r3, #4
 801c65e:	b2db      	uxtb	r3, r3
 801c660:	2b00      	cmp	r3, #0
 801c662:	bf14      	ite	ne
 801c664:	2301      	movne	r3, #1
 801c666:	2300      	moveq	r3, #0
 801c668:	b2db      	uxtb	r3, r3
}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3710      	adds	r7, #16
 801c66e:	46bd      	mov	sp, r7
 801c670:	bd80      	pop	{r7, pc}

0801c672 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c672:	b590      	push	{r4, r7, lr}
 801c674:	b0a3      	sub	sp, #140	; 0x8c
 801c676:	af06      	add	r7, sp, #24
 801c678:	60f8      	str	r0, [r7, #12]
 801c67a:	60b9      	str	r1, [r7, #8]
 801c67c:	4613      	mov	r3, r2
 801c67e:	71fb      	strb	r3, [r7, #7]
    const lv_style_t * style = lv_obj_get_style(img);
 801c680:	68f8      	ldr	r0, [r7, #12]
 801c682:	f7ed ffe7 	bl	800a654 <lv_obj_get_style>
 801c686:	66b8      	str	r0, [r7, #104]	; 0x68
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 801c688:	68f8      	ldr	r0, [r7, #12]
 801c68a:	f7ee f89e 	bl	800a7ca <lv_obj_get_ext_attr>
 801c68e:	6678      	str	r0, [r7, #100]	; 0x64

    if(mode == LV_DESIGN_COVER_CHK) {
 801c690:	79fb      	ldrb	r3, [r7, #7]
 801c692:	2b02      	cmp	r3, #2
 801c694:	d12c      	bne.n	801c6f0 <lv_img_design+0x7e>
        bool cover = false;
 801c696:	2300      	movs	r3, #0
 801c698:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 801c69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c69e:	7b1b      	ldrb	r3, [r3, #12]
 801c6a0:	f003 0303 	and.w	r3, r3, #3
 801c6a4:	b2db      	uxtb	r3, r3
 801c6a6:	2b03      	cmp	r3, #3
 801c6a8:	d006      	beq.n	801c6b8 <lv_img_design+0x46>
 801c6aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6ac:	7b1b      	ldrb	r3, [r3, #12]
 801c6ae:	f003 0303 	and.w	r3, r3, #3
 801c6b2:	b2db      	uxtb	r3, r3
 801c6b4:	2b02      	cmp	r3, #2
 801c6b6:	d101      	bne.n	801c6bc <lv_img_design+0x4a>
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	e101      	b.n	801c8c0 <lv_img_design+0x24e>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 801c6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6be:	7b1b      	ldrb	r3, [r3, #12]
 801c6c0:	f023 0307 	bic.w	r3, r3, #7
 801c6c4:	b2db      	uxtb	r3, r3
 801c6c6:	2b20      	cmp	r3, #32
 801c6c8:	d006      	beq.n	801c6d8 <lv_img_design+0x66>
 801c6ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6cc:	7b1b      	ldrb	r3, [r3, #12]
 801c6ce:	f023 0307 	bic.w	r3, r3, #7
 801c6d2:	b2db      	uxtb	r3, r3
 801c6d4:	2b08      	cmp	r3, #8
 801c6d6:	d108      	bne.n	801c6ea <lv_img_design+0x78>
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	3310      	adds	r3, #16
 801c6dc:	4619      	mov	r1, r3
 801c6de:	68b8      	ldr	r0, [r7, #8]
 801c6e0:	f7f9 fee5 	bl	80164ae <lv_area_is_in>
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        return cover;
 801c6ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c6ee:	e0e7      	b.n	801c8c0 <lv_img_design+0x24e>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801c6f0:	79fb      	ldrb	r3, [r7, #7]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	f040 80e3 	bne.w	801c8be <lv_img_design+0x24c>
        if(ext->h == 0 || ext->w == 0) return true;
 801c6f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d004      	beq.n	801c70c <lv_img_design+0x9a>
 801c702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c704:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d101      	bne.n	801c710 <lv_img_design+0x9e>
 801c70c:	2301      	movs	r3, #1
 801c70e:	e0d7      	b.n	801c8c0 <lv_img_design+0x24e>
        lv_area_t coords;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 801c710:	68f8      	ldr	r0, [r7, #12]
 801c712:	f7ee f80c 	bl	800a72e <lv_obj_get_opa_scale>
 801c716:	4603      	mov	r3, r0
 801c718:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        lv_obj_get_coords(img, &coords);
 801c71c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c720:	4619      	mov	r1, r3
 801c722:	68f8      	ldr	r0, [r7, #12]
 801c724:	f7ed ff25 	bl	800a572 <lv_obj_get_coords>

        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801c728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c72a:	7b1b      	ldrb	r3, [r3, #12]
 801c72c:	f003 0303 	and.w	r3, r3, #3
 801c730:	b2db      	uxtb	r3, r3
 801c732:	2b01      	cmp	r3, #1
 801c734:	d007      	beq.n	801c746 <lv_img_design+0xd4>
 801c736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c738:	7b1b      	ldrb	r3, [r3, #12]
 801c73a:	f003 0303 	and.w	r3, r3, #3
 801c73e:	b2db      	uxtb	r3, r3
 801c740:	2b00      	cmp	r3, #0
 801c742:	f040 8086 	bne.w	801c852 <lv_img_design+0x1e0>
            coords.x1 -= ext->offset.x;
 801c746:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c74a:	b29a      	uxth	r2, r3
 801c74c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c74e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c752:	b29b      	uxth	r3, r3
 801c754:	1ad3      	subs	r3, r2, r3
 801c756:	b29b      	uxth	r3, r3
 801c758:	b21b      	sxth	r3, r3
 801c75a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            coords.y1 -= ext->offset.y;
 801c75e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c762:	b29a      	uxth	r2, r3
 801c764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c766:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c76a:	b29b      	uxth	r3, r3
 801c76c:	1ad3      	subs	r3, r2, r3
 801c76e:	b29b      	uxth	r3, r3
 801c770:	b21b      	sxth	r3, r3
 801c772:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            LV_LOG_TRACE("lv_img_design: start to draw image");
            lv_area_t cords_tmp;
            cords_tmp.y1 = coords.y1;
 801c776:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c77a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801c77e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c782:	b29a      	uxth	r2, r3
 801c784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c786:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	4413      	add	r3, r2
 801c78e:	b29b      	uxth	r3, r3
 801c790:	3b01      	subs	r3, #1
 801c792:	b29b      	uxth	r3, r3
 801c794:	b21b      	sxth	r3, r3
 801c796:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801c79a:	e053      	b.n	801c844 <lv_img_design+0x1d2>
                cords_tmp.x1 = coords.x1;
 801c79c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c7a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 801c7a4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c7b0:	b29b      	uxth	r3, r3
 801c7b2:	4413      	add	r3, r2
 801c7b4:	b29b      	uxth	r3, r3
 801c7b6:	3b01      	subs	r3, #1
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	b21b      	sxth	r3, r3
 801c7bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801c7c0:	e022      	b.n	801c808 <lv_img_design+0x196>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 801c7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7c4:	681a      	ldr	r2, [r3, #0]
 801c7c6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801c7ca:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801c7ce:	9300      	str	r3, [sp, #0]
 801c7d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c7d2:	68b9      	ldr	r1, [r7, #8]
 801c7d4:	f7f0 ff7c 	bl	800d6d0 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801c7d8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801c7dc:	b29a      	uxth	r2, r3
 801c7de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c7e4:	b29b      	uxth	r3, r3
 801c7e6:	4413      	add	r3, r2
 801c7e8:	b29b      	uxth	r3, r3
 801c7ea:	b21b      	sxth	r3, r3
 801c7ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801c7f0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c7f4:	b29a      	uxth	r2, r3
 801c7f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c7fc:	b29b      	uxth	r3, r3
 801c7fe:	4413      	add	r3, r2
 801c800:	b29b      	uxth	r3, r3
 801c802:	b21b      	sxth	r3, r3
 801c804:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801c808:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 801c80c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801c810:	429a      	cmp	r2, r3
 801c812:	dbd6      	blt.n	801c7c2 <lv_img_design+0x150>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801c814:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801c818:	b29a      	uxth	r2, r3
 801c81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c81c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801c820:	b29b      	uxth	r3, r3
 801c822:	4413      	add	r3, r2
 801c824:	b29b      	uxth	r3, r3
 801c826:	b21b      	sxth	r3, r3
 801c828:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c82c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c830:	b29a      	uxth	r2, r3
 801c832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c834:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801c838:	b29b      	uxth	r3, r3
 801c83a:	4413      	add	r3, r2
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	b21b      	sxth	r3, r3
 801c840:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801c844:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 801c848:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801c84c:	429a      	cmp	r2, r3
 801c84e:	dba5      	blt.n	801c79c <lv_img_design+0x12a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801c850:	e035      	b.n	801c8be <lv_img_design+0x24c>
                }
            }
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c854:	7b1b      	ldrb	r3, [r3, #12]
 801c856:	f003 0303 	and.w	r3, r3, #3
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	2b02      	cmp	r3, #2
 801c85e:	d123      	bne.n	801c8a8 <lv_img_design+0x236>
            LV_LOG_TRACE("lv_img_design: start to draw symbol");
            lv_style_t style_mod;
            lv_style_copy(&style_mod, style);
 801c860:	f107 0314 	add.w	r3, r7, #20
 801c864:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c866:	4618      	mov	r0, r3
 801c868:	f7ef fa1e 	bl	800bca8 <lv_style_copy>
            style_mod.text.color = style->image.color;
 801c86c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c86e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801c870:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 801c872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	f897 4063 	ldrb.w	r4, [r7, #99]	; 0x63
 801c87a:	f107 0114 	add.w	r1, r7, #20
 801c87e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801c882:	2200      	movs	r2, #0
 801c884:	9205      	str	r2, [sp, #20]
 801c886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c88a:	9204      	str	r2, [sp, #16]
 801c88c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c890:	9203      	str	r2, [sp, #12]
 801c892:	2200      	movs	r2, #0
 801c894:	9202      	str	r2, [sp, #8]
 801c896:	2200      	movs	r2, #0
 801c898:	9201      	str	r2, [sp, #4]
 801c89a:	9300      	str	r3, [sp, #0]
 801c89c:	4623      	mov	r3, r4
 801c89e:	460a      	mov	r2, r1
 801c8a0:	68b9      	ldr	r1, [r7, #8]
 801c8a2:	f7f1 f9ad 	bl	800dc00 <lv_draw_label>
 801c8a6:	e00a      	b.n	801c8be <lv_img_design+0x24c>
        } else {
            /*Trigger the error handler of image drawer*/
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	f103 0010 	add.w	r0, r3, #16
 801c8ae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801c8b2:	9300      	str	r3, [sp, #0]
 801c8b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	68b9      	ldr	r1, [r7, #8]
 801c8ba:	f7f0 ff09 	bl	800d6d0 <lv_draw_img>
        }
    }

    return true;
 801c8be:	2301      	movs	r3, #1
}
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	3774      	adds	r7, #116	; 0x74
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd90      	pop	{r4, r7, pc}

0801c8c8 <lv_img_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b088      	sub	sp, #32
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	60f8      	str	r0, [r7, #12]
 801c8d0:	460b      	mov	r3, r1
 801c8d2:	607a      	str	r2, [r7, #4]
 801c8d4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 801c8d6:	4b30      	ldr	r3, [pc, #192]	; (801c998 <lv_img_signal+0xd0>)
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	7af9      	ldrb	r1, [r7, #11]
 801c8dc:	687a      	ldr	r2, [r7, #4]
 801c8de:	68f8      	ldr	r0, [r7, #12]
 801c8e0:	4798      	blx	r3
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801c8e6:	7fbb      	ldrb	r3, [r7, #30]
 801c8e8:	2b01      	cmp	r3, #1
 801c8ea:	d001      	beq.n	801c8f0 <lv_img_signal+0x28>
 801c8ec:	7fbb      	ldrb	r3, [r7, #30]
 801c8ee:	e04f      	b.n	801c990 <lv_img_signal+0xc8>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801c8f0:	68f8      	ldr	r0, [r7, #12]
 801c8f2:	f7ed ff6a 	bl	800a7ca <lv_obj_get_ext_attr>
 801c8f6:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801c8f8:	7afb      	ldrb	r3, [r7, #11]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d11b      	bne.n	801c936 <lv_img_signal+0x6e>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c8fe:	69bb      	ldr	r3, [r7, #24]
 801c900:	7b1b      	ldrb	r3, [r3, #12]
 801c902:	f003 0303 	and.w	r3, r3, #3
 801c906:	b2db      	uxtb	r3, r3
 801c908:	2b01      	cmp	r3, #1
 801c90a:	d006      	beq.n	801c91a <lv_img_signal+0x52>
 801c90c:	69bb      	ldr	r3, [r7, #24]
 801c90e:	7b1b      	ldrb	r3, [r3, #12]
 801c910:	f003 0303 	and.w	r3, r3, #3
 801c914:	b2db      	uxtb	r3, r3
 801c916:	2b02      	cmp	r3, #2
 801c918:	d139      	bne.n	801c98e <lv_img_signal+0xc6>
            lv_mem_free(ext->src);
 801c91a:	69bb      	ldr	r3, [r7, #24]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	4618      	mov	r0, r3
 801c920:	f7fa fb34 	bl	8016f8c <lv_mem_free>
            ext->src      = NULL;
 801c924:	69bb      	ldr	r3, [r7, #24]
 801c926:	2200      	movs	r2, #0
 801c928:	601a      	str	r2, [r3, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801c92a:	69ba      	ldr	r2, [r7, #24]
 801c92c:	7b13      	ldrb	r3, [r2, #12]
 801c92e:	f043 0303 	orr.w	r3, r3, #3
 801c932:	7313      	strb	r3, [r2, #12]
 801c934:	e02b      	b.n	801c98e <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801c936:	7afb      	ldrb	r3, [r7, #11]
 801c938:	2b04      	cmp	r3, #4
 801c93a:	d10d      	bne.n	801c958 <lv_img_signal+0x90>
        /*Refresh the file name to refresh the symbol text size*/
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c93c:	69bb      	ldr	r3, [r7, #24]
 801c93e:	7b1b      	ldrb	r3, [r3, #12]
 801c940:	f003 0303 	and.w	r3, r3, #3
 801c944:	b2db      	uxtb	r3, r3
 801c946:	2b02      	cmp	r3, #2
 801c948:	d121      	bne.n	801c98e <lv_img_signal+0xc6>
            lv_img_set_src(img, ext->src);
 801c94a:	69bb      	ldr	r3, [r7, #24]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	4619      	mov	r1, r3
 801c950:	68f8      	ldr	r0, [r7, #12]
 801c952:	f7ff fd8f 	bl	801c474 <lv_img_set_src>
 801c956:	e01a      	b.n	801c98e <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801c958:	7afb      	ldrb	r3, [r7, #11]
 801c95a:	2b06      	cmp	r3, #6
 801c95c:	d117      	bne.n	801c98e <lv_img_signal+0xc6>
        lv_obj_type_t * buf = param;
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801c962:	2300      	movs	r3, #0
 801c964:	77fb      	strb	r3, [r7, #31]
 801c966:	e008      	b.n	801c97a <lv_img_signal+0xb2>
            if(buf->type[i] == NULL) break;
 801c968:	7ffa      	ldrb	r2, [r7, #31]
 801c96a:	697b      	ldr	r3, [r7, #20]
 801c96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d006      	beq.n	801c982 <lv_img_signal+0xba>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801c974:	7ffb      	ldrb	r3, [r7, #31]
 801c976:	3301      	adds	r3, #1
 801c978:	77fb      	strb	r3, [r7, #31]
 801c97a:	7ffb      	ldrb	r3, [r7, #31]
 801c97c:	2b06      	cmp	r3, #6
 801c97e:	d9f3      	bls.n	801c968 <lv_img_signal+0xa0>
 801c980:	e000      	b.n	801c984 <lv_img_signal+0xbc>
            if(buf->type[i] == NULL) break;
 801c982:	bf00      	nop
        }
        buf->type[i] = "lv_img";
 801c984:	7ffa      	ldrb	r2, [r7, #31]
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	4904      	ldr	r1, [pc, #16]	; (801c99c <lv_img_signal+0xd4>)
 801c98a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801c98e:	7fbb      	ldrb	r3, [r7, #30]
}
 801c990:	4618      	mov	r0, r3
 801c992:	3720      	adds	r7, #32
 801c994:	46bd      	mov	sp, r7
 801c996:	bd80      	pop	{r7, pc}
 801c998:	200177d4 	.word	0x200177d4
 801c99c:	0802d4e0 	.word	0x0802d4e0

0801c9a0 <lv_font_get_line_height>:
{
 801c9a0:	b480      	push	{r7}
 801c9a2:	b083      	sub	sp, #12
 801c9a4:	af00      	add	r7, sp, #0
 801c9a6:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	7a1b      	ldrb	r3, [r3, #8]
}
 801c9ac:	4618      	mov	r0, r3
 801c9ae:	370c      	adds	r7, #12
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9b6:	4770      	bx	lr

0801c9b8 <lv_area_get_width>:
{
 801c9b8:	b480      	push	{r7}
 801c9ba:	b083      	sub	sp, #12
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9ce:	b29b      	uxth	r3, r3
 801c9d0:	1ad3      	subs	r3, r2, r3
 801c9d2:	b29b      	uxth	r3, r3
 801c9d4:	3301      	adds	r3, #1
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	b21b      	sxth	r3, r3
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	370c      	adds	r7, #12
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e4:	4770      	bx	lr

0801c9e6 <lv_area_get_height>:
{
 801c9e6:	b480      	push	{r7}
 801c9e8:	b083      	sub	sp, #12
 801c9ea:	af00      	add	r7, sp, #0
 801c9ec:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c9f4:	b29a      	uxth	r2, r3
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9fc:	b29b      	uxth	r3, r3
 801c9fe:	1ad3      	subs	r3, r2, r3
 801ca00:	b29b      	uxth	r3, r3
 801ca02:	3301      	adds	r3, #1
 801ca04:	b29b      	uxth	r3, r3
 801ca06:	b21b      	sxth	r3, r3
}
 801ca08:	4618      	mov	r0, r3
 801ca0a:	370c      	adds	r7, #12
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca12:	4770      	bx	lr

0801ca14 <lv_label_set_style>:
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b084      	sub	sp, #16
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	60f8      	str	r0, [r7, #12]
 801ca1c:	460b      	mov	r3, r1
 801ca1e:	607a      	str	r2, [r7, #4]
 801ca20:	72fb      	strb	r3, [r7, #11]
    lv_obj_set_style(label, style);
 801ca22:	6879      	ldr	r1, [r7, #4]
 801ca24:	68f8      	ldr	r0, [r7, #12]
 801ca26:	f7ed fba0 	bl	800a16a <lv_obj_set_style>
}
 801ca2a:	bf00      	nop
 801ca2c:	3710      	adds	r7, #16
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	bd80      	pop	{r7, pc}

0801ca32 <lv_label_get_style>:
{
 801ca32:	b580      	push	{r7, lr}
 801ca34:	b082      	sub	sp, #8
 801ca36:	af00      	add	r7, sp, #0
 801ca38:	6078      	str	r0, [r7, #4]
 801ca3a:	460b      	mov	r3, r1
 801ca3c:	70fb      	strb	r3, [r7, #3]
    return lv_obj_get_style(label);
 801ca3e:	6878      	ldr	r0, [r7, #4]
 801ca40:	f7ed fe08 	bl	800a654 <lv_obj_get_style>
 801ca44:	4603      	mov	r3, r0
}
 801ca46:	4618      	mov	r0, r3
 801ca48:	3708      	adds	r7, #8
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
	...

0801ca50 <lv_label_create>:
 * @param par pointer to an object, it will be the parent of the new label
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801ca50:	b5b0      	push	{r4, r5, r7, lr}
 801ca52:	b086      	sub	sp, #24
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("label create started");

    /*Create a basic object*/
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801ca5a:	6839      	ldr	r1, [r7, #0]
 801ca5c:	6878      	ldr	r0, [r7, #4]
 801ca5e:	f7ec f94b 	bl	8008cf8 <lv_obj_create>
 801ca62:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_label);
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d100      	bne.n	801ca6c <lv_label_create+0x1c>
 801ca6a:	e7fe      	b.n	801ca6a <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
 801ca6c:	697b      	ldr	r3, [r7, #20]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d101      	bne.n	801ca76 <lv_label_create+0x26>
 801ca72:	2300      	movs	r3, #0
 801ca74:	e111      	b.n	801cc9a <lv_label_create+0x24a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 801ca76:	4b8b      	ldr	r3, [pc, #556]	; (801cca4 <lv_label_create+0x254>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d105      	bne.n	801ca8a <lv_label_create+0x3a>
 801ca7e:	6978      	ldr	r0, [r7, #20]
 801ca80:	f7ed fe8b 	bl	800a79a <lv_obj_get_signal_cb>
 801ca84:	4602      	mov	r2, r0
 801ca86:	4b87      	ldr	r3, [pc, #540]	; (801cca4 <lv_label_create+0x254>)
 801ca88:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to a label object*/
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801ca8a:	2120      	movs	r1, #32
 801ca8c:	6978      	ldr	r0, [r7, #20]
 801ca8e:	f7ed fccf 	bl	800a430 <lv_obj_allocate_ext_attr>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 801ca92:	6978      	ldr	r0, [r7, #20]
 801ca94:	f7ed fe99 	bl	800a7ca <lv_obj_get_ext_attr>
 801ca98:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ca9a:	693b      	ldr	r3, [r7, #16]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d100      	bne.n	801caa2 <lv_label_create+0x52>
 801caa0:	e7fe      	b.n	801caa0 <lv_label_create+0x50>
    if(ext == NULL) return NULL;
 801caa2:	693b      	ldr	r3, [r7, #16]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d101      	bne.n	801caac <lv_label_create+0x5c>
 801caa8:	2300      	movs	r3, #0
 801caaa:	e0f6      	b.n	801cc9a <lv_label_create+0x24a>

    ext->text       = NULL;
 801caac:	693b      	ldr	r3, [r7, #16]
 801caae:	2200      	movs	r2, #0
 801cab0:	601a      	str	r2, [r3, #0]
    ext->static_txt = 0;
 801cab2:	693a      	ldr	r2, [r7, #16]
 801cab4:	7f93      	ldrb	r3, [r2, #30]
 801cab6:	f36f 03c3 	bfc	r3, #3, #1
 801caba:	7793      	strb	r3, [r2, #30]
    ext->recolor    = 0;
 801cabc:	693a      	ldr	r2, [r7, #16]
 801cabe:	7f93      	ldrb	r3, [r2, #30]
 801cac0:	f36f 1386 	bfc	r3, #6, #1
 801cac4:	7793      	strb	r3, [r2, #30]
    ext->body_draw  = 0;
 801cac6:	693a      	ldr	r2, [r7, #16]
 801cac8:	7fd3      	ldrb	r3, [r2, #31]
 801caca:	f36f 0300 	bfc	r3, #0, #1
 801cace:	77d3      	strb	r3, [r2, #31]
    ext->align      = LV_LABEL_ALIGN_LEFT;
 801cad0:	693a      	ldr	r2, [r7, #16]
 801cad2:	7f93      	ldrb	r3, [r2, #30]
 801cad4:	f36f 1305 	bfc	r3, #4, #2
 801cad8:	7793      	strb	r3, [r2, #30]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801cada:	693b      	ldr	r3, [r7, #16]
 801cadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cae0:	811a      	strh	r2, [r3, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801cae2:	693a      	ldr	r2, [r7, #16]
 801cae4:	7f93      	ldrb	r3, [r2, #30]
 801cae6:	f36f 0302 	bfc	r3, #0, #3
 801caea:	7793      	strb	r3, [r2, #30]
#if LV_USE_ANIMATION
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801caec:	693b      	ldr	r3, [r7, #16]
 801caee:	2219      	movs	r2, #25
 801caf0:	839a      	strh	r2, [r3, #28]
#endif
    ext->offset.x = 0;
 801caf2:	693b      	ldr	r3, [r7, #16]
 801caf4:	2200      	movs	r2, #0
 801caf6:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 801caf8:	693b      	ldr	r3, [r7, #16]
 801cafa:	2200      	movs	r2, #0
 801cafc:	819a      	strh	r2, [r3, #12]

    ext->hint.line_start = -1;
 801cafe:	693b      	ldr	r3, [r7, #16]
 801cb00:	f04f 32ff 	mov.w	r2, #4294967295
 801cb04:	611a      	str	r2, [r3, #16]
    ext->hint.coord_y    = 0;
 801cb06:	693b      	ldr	r3, [r7, #16]
 801cb08:	2200      	movs	r2, #0
 801cb0a:	619a      	str	r2, [r3, #24]
    ext->hint.y          = 0;
 801cb0c:	693b      	ldr	r3, [r7, #16]
 801cb0e:	2200      	movs	r2, #0
 801cb10:	615a      	str	r2, [r3, #20]

#if LV_LABEL_TEXT_SEL
    ext->txt_sel_start = LV_LABEL_TEXT_SEL_OFF;
    ext->txt_sel_end   = LV_LABEL_TEXT_SEL_OFF;
#endif
    ext->dot.tmp_ptr   = NULL;
 801cb12:	693b      	ldr	r3, [r7, #16]
 801cb14:	2200      	movs	r2, #0
 801cb16:	605a      	str	r2, [r3, #4]
    ext->dot_tmp_alloc = 0;
 801cb18:	693a      	ldr	r2, [r7, #16]
 801cb1a:	7fd3      	ldrb	r3, [r2, #31]
 801cb1c:	f36f 0341 	bfc	r3, #1, #1
 801cb20:	77d3      	strb	r3, [r2, #31]

    lv_obj_set_design_cb(new_label, lv_label_design);
 801cb22:	4961      	ldr	r1, [pc, #388]	; (801cca8 <lv_label_create+0x258>)
 801cb24:	6978      	ldr	r0, [r7, #20]
 801cb26:	f7ed fc75 	bl	800a414 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 801cb2a:	4960      	ldr	r1, [pc, #384]	; (801ccac <lv_label_create+0x25c>)
 801cb2c:	6978      	ldr	r0, [r7, #20]
 801cb2e:	f7ed fc63 	bl	800a3f8 <lv_obj_set_signal_cb>

    /*Init the new label*/
    if(copy == NULL) {
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d111      	bne.n	801cb5c <lv_label_create+0x10c>
        lv_obj_set_click(new_label, false);
 801cb38:	2100      	movs	r1, #0
 801cb3a:	6978      	ldr	r0, [r7, #20]
 801cb3c:	f7ed fb3b 	bl	800a1b6 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 801cb40:	2100      	movs	r1, #0
 801cb42:	6978      	ldr	r0, [r7, #20]
 801cb44:	f000 f952 	bl	801cdec <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 801cb48:	4959      	ldr	r1, [pc, #356]	; (801ccb0 <lv_label_create+0x260>)
 801cb4a:	6978      	ldr	r0, [r7, #20]
 801cb4c:	f000 f8b2 	bl	801ccb4 <lv_label_set_text>
        lv_label_set_style(new_label, LV_LABEL_STYLE_MAIN, NULL); /*Inherit parent's style*/
 801cb50:	2200      	movs	r2, #0
 801cb52:	2100      	movs	r1, #0
 801cb54:	6978      	ldr	r0, [r7, #20]
 801cb56:	f7ff ff5d 	bl	801ca14 <lv_label_set_style>
 801cb5a:	e09d      	b.n	801cc98 <lv_label_create+0x248>
    }
    /*Copy 'copy' if not NULL*/
    else {
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801cb5c:	6838      	ldr	r0, [r7, #0]
 801cb5e:	f7ed fe34 	bl	800a7ca <lv_obj_get_ext_attr>
 801cb62:	60f8      	str	r0, [r7, #12]
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 801cb64:	6838      	ldr	r0, [r7, #0]
 801cb66:	f000 fa22 	bl	801cfae <lv_label_get_long_mode>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	6978      	ldr	r0, [r7, #20]
 801cb70:	f000 f93c 	bl	801cdec <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 801cb74:	6838      	ldr	r0, [r7, #0]
 801cb76:	f000 fa3c 	bl	801cff2 <lv_label_get_recolor>
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	4619      	mov	r1, r3
 801cb7e:	6978      	ldr	r0, [r7, #20]
 801cb80:	f000 f9b4 	bl	801ceec <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 801cb84:	6838      	ldr	r0, [r7, #0]
 801cb86:	f000 fa4a 	bl	801d01e <lv_label_get_body_draw>
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	4619      	mov	r1, r3
 801cb8e:	6978      	ldr	r0, [r7, #20]
 801cb90:	f000 f9d4 	bl	801cf3c <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 801cb94:	6838      	ldr	r0, [r7, #0]
 801cb96:	f000 fa1b 	bl	801cfd0 <lv_label_get_align>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	4619      	mov	r1, r3
 801cb9e:	6978      	ldr	r0, [r7, #20]
 801cba0:	f000 f980 	bl	801cea4 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	7f9b      	ldrb	r3, [r3, #30]
 801cba8:	f003 0308 	and.w	r3, r3, #8
 801cbac:	b2db      	uxtb	r3, r3
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d108      	bne.n	801cbc4 <lv_label_create+0x174>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801cbb2:	6838      	ldr	r0, [r7, #0]
 801cbb4:	f000 f9ed 	bl	801cf92 <lv_label_get_text>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	4619      	mov	r1, r3
 801cbbc:	6978      	ldr	r0, [r7, #20]
 801cbbe:	f000 f879 	bl	801ccb4 <lv_label_set_text>
 801cbc2:	e007      	b.n	801cbd4 <lv_label_create+0x184>
        else
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 801cbc4:	6838      	ldr	r0, [r7, #0]
 801cbc6:	f000 f9e4 	bl	801cf92 <lv_label_get_text>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	4619      	mov	r1, r3
 801cbce:	6978      	ldr	r0, [r7, #20]
 801cbd0:	f000 f8dd 	bl	801cd8e <lv_label_set_static_text>

        /*In DOT mode save the text byte-to-byte because a '\0' can be in the middle*/
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	7f9b      	ldrb	r3, [r3, #30]
 801cbd8:	f003 0307 	and.w	r3, r3, #7
 801cbdc:	b2db      	uxtb	r3, r3
 801cbde:	2b02      	cmp	r3, #2
 801cbe0:	d128      	bne.n	801cc34 <lv_label_create+0x1e4>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 801cbe2:	693b      	ldr	r3, [r7, #16]
 801cbe4:	681c      	ldr	r4, [r3, #0]
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	4618      	mov	r0, r3
 801cbec:	f7fa fa34 	bl	8017058 <lv_mem_get_size>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f7fa f9f1 	bl	8016fdc <lv_mem_realloc>
 801cbfa:	4602      	mov	r2, r0
 801cbfc:	693b      	ldr	r3, [r7, #16]
 801cbfe:	601a      	str	r2, [r3, #0]
            lv_mem_assert(ext->text);
 801cc00:	693b      	ldr	r3, [r7, #16]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d100      	bne.n	801cc0a <lv_label_create+0x1ba>
 801cc08:	e7fe      	b.n	801cc08 <lv_label_create+0x1b8>
            if(ext->text == NULL) return NULL;
 801cc0a:	693b      	ldr	r3, [r7, #16]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d101      	bne.n	801cc16 <lv_label_create+0x1c6>
 801cc12:	2300      	movs	r3, #0
 801cc14:	e041      	b.n	801cc9a <lv_label_create+0x24a>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 801cc16:	693b      	ldr	r3, [r7, #16]
 801cc18:	681c      	ldr	r4, [r3, #0]
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	681d      	ldr	r5, [r3, #0]
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	4618      	mov	r0, r3
 801cc24:	f7fa fa18 	bl	8017058 <lv_mem_get_size>
 801cc28:	4603      	mov	r3, r0
 801cc2a:	461a      	mov	r2, r3
 801cc2c:	4629      	mov	r1, r5
 801cc2e:	4620      	mov	r0, r4
 801cc30:	f00e f9ee 	bl	802b010 <memcpy>
        }

        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	7fdb      	ldrb	r3, [r3, #31]
 801cc38:	f003 0302 	and.w	r3, r3, #2
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d013      	beq.n	801cc6a <lv_label_create+0x21a>
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	685b      	ldr	r3, [r3, #4]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00f      	beq.n	801cc6a <lv_label_create+0x21a>
            int len = strlen(copy_ext->dot.tmp_ptr);
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	685b      	ldr	r3, [r3, #4]
 801cc4e:	4618      	mov	r0, r3
 801cc50:	f7e3 fac8 	bl	80001e4 <strlen>
 801cc54:	4603      	mov	r3, r0
 801cc56:	60bb      	str	r3, [r7, #8]
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 801cc58:	693b      	ldr	r3, [r7, #16]
 801cc5a:	685b      	ldr	r3, [r3, #4]
 801cc5c:	68ba      	ldr	r2, [r7, #8]
 801cc5e:	b292      	uxth	r2, r2
 801cc60:	4619      	mov	r1, r3
 801cc62:	6978      	ldr	r0, [r7, #20]
 801cc64:	f001 f8ec 	bl	801de40 <lv_label_set_dot_tmp>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801cc68:	e005      	b.n	801cc76 <lv_label_create+0x226>
        } else {
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 801cc6a:	693b      	ldr	r3, [r7, #16]
 801cc6c:	3304      	adds	r3, #4
 801cc6e:	68fa      	ldr	r2, [r7, #12]
 801cc70:	3204      	adds	r2, #4
 801cc72:	6812      	ldr	r2, [r2, #0]
 801cc74:	601a      	str	r2, [r3, #0]
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	7fdb      	ldrb	r3, [r3, #31]
 801cc7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801cc7e:	b2d9      	uxtb	r1, r3
 801cc80:	693a      	ldr	r2, [r7, #16]
 801cc82:	7fd3      	ldrb	r3, [r2, #31]
 801cc84:	f361 0341 	bfi	r3, r1, #1, #1
 801cc88:	77d3      	strb	r3, [r2, #31]
        ext->dot_end       = copy_ext->dot_end;
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	891a      	ldrh	r2, [r3, #8]
 801cc8e:	693b      	ldr	r3, [r7, #16]
 801cc90:	811a      	strh	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_label);
 801cc92:	6978      	ldr	r0, [r7, #20]
 801cc94:	f7ed fa7b 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("label created");

    return new_label;
 801cc98:	697b      	ldr	r3, [r7, #20]
}
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	3718      	adds	r7, #24
 801cc9e:	46bd      	mov	sp, r7
 801cca0:	bdb0      	pop	{r4, r5, r7, pc}
 801cca2:	bf00      	nop
 801cca4:	200177d8 	.word	0x200177d8
 801cca8:	0801d2c5 	.word	0x0801d2c5
 801ccac:	0801d671 	.word	0x0801d671
 801ccb0:	0802d4e8 	.word	0x0802d4e8

0801ccb4 <lv_label_set_text>:
 * Set a new text for a label. Memory will be allocated to store the text by the label.
 * @param label pointer to a label object
 * @param text '\0' terminated character string. NULL to refresh with the current text.
 */
void lv_label_set_text(lv_obj_t * label, const char * text)
{
 801ccb4:	b590      	push	{r4, r7, lr}
 801ccb6:	b085      	sub	sp, #20
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6078      	str	r0, [r7, #4]
 801ccbc:	6039      	str	r1, [r7, #0]
    lv_obj_invalidate(label);
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7ec fb57 	bl	8009372 <lv_obj_invalidate>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801ccc4:	6878      	ldr	r0, [r7, #4]
 801ccc6:	f7ed fd80 	bl	800a7ca <lv_obj_get_ext_attr>
 801ccca:	60f8      	str	r0, [r7, #12]

    /*If text is NULL then refresh */
    if(text == NULL) {
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d103      	bne.n	801ccda <lv_label_set_text+0x26>
        lv_label_refr_text(label);
 801ccd2:	6878      	ldr	r0, [r7, #4]
 801ccd4:	f000 fd8c 	bl	801d7f0 <lv_label_refr_text>
        return;
 801ccd8:	e056      	b.n	801cd88 <lv_label_set_text+0xd4>
    }

    if(ext->text == text) {
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	683a      	ldr	r2, [r7, #0]
 801cce0:	429a      	cmp	r2, r3
 801cce2:	d119      	bne.n	801cd18 <lv_label_set_text+0x64>
        /*If set its own text then reallocate it (maybe its size changed)*/
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	681c      	ldr	r4, [r3, #0]
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	4618      	mov	r0, r3
 801ccee:	f7e3 fa79 	bl	80001e4 <strlen>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f7fa f96f 	bl	8016fdc <lv_mem_realloc>
 801ccfe:	4602      	mov	r2, r0
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d100      	bne.n	801cd0e <lv_label_set_text+0x5a>
 801cd0c:	e7fe      	b.n	801cd0c <lv_label_set_text+0x58>
        if(ext->text == NULL) return;
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d133      	bne.n	801cd7e <lv_label_set_text+0xca>
 801cd16:	e037      	b.n	801cd88 <lv_label_set_text+0xd4>
    } else {
        /*Allocate space for the new text*/
        uint32_t len = strlen(text) + 1;
 801cd18:	6838      	ldr	r0, [r7, #0]
 801cd1a:	f7e3 fa63 	bl	80001e4 <strlen>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	3301      	adds	r3, #1
 801cd22:	60bb      	str	r3, [r7, #8]
        if(ext->text != NULL && ext->static_txt == 0) {
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d00e      	beq.n	801cd4a <lv_label_set_text+0x96>
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	7f9b      	ldrb	r3, [r3, #30]
 801cd30:	f003 0308 	and.w	r3, r3, #8
 801cd34:	b2db      	uxtb	r3, r3
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d107      	bne.n	801cd4a <lv_label_set_text+0x96>
            lv_mem_free(ext->text);
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f7fa f924 	bl	8016f8c <lv_mem_free>
            ext->text = NULL;
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	2200      	movs	r2, #0
 801cd48:	601a      	str	r2, [r3, #0]
        }

        ext->text = lv_mem_alloc(len);
 801cd4a:	68b8      	ldr	r0, [r7, #8]
 801cd4c:	f7fa f8de 	bl	8016f0c <lv_mem_alloc>
 801cd50:	4602      	mov	r2, r0
 801cd52:	68fb      	ldr	r3, [r7, #12]
 801cd54:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d100      	bne.n	801cd60 <lv_label_set_text+0xac>
 801cd5e:	e7fe      	b.n	801cd5e <lv_label_set_text+0xaa>
        if(ext->text == NULL) return;
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d00e      	beq.n	801cd86 <lv_label_set_text+0xd2>

        strcpy(ext->text, text);
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	6839      	ldr	r1, [r7, #0]
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f00e fa9a 	bl	802b2a8 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 801cd74:	68fa      	ldr	r2, [r7, #12]
 801cd76:	7f93      	ldrb	r3, [r2, #30]
 801cd78:	f36f 03c3 	bfc	r3, #3, #1
 801cd7c:	7793      	strb	r3, [r2, #30]
    }

    lv_label_refr_text(label);
 801cd7e:	6878      	ldr	r0, [r7, #4]
 801cd80:	f000 fd36 	bl	801d7f0 <lv_label_refr_text>
 801cd84:	e000      	b.n	801cd88 <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
 801cd86:	bf00      	nop
}
 801cd88:	3714      	adds	r7, #20
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd90      	pop	{r4, r7, pc}

0801cd8e <lv_label_set_static_text>:
 * has to be 'alive' while the label exist.
 * @param label pointer to a label object
 * @param text pointer to a text. NULL to refresh with the current text.
 */
void lv_label_set_static_text(lv_obj_t * label, const char * text)
{
 801cd8e:	b580      	push	{r7, lr}
 801cd90:	b084      	sub	sp, #16
 801cd92:	af00      	add	r7, sp, #0
 801cd94:	6078      	str	r0, [r7, #4]
 801cd96:	6039      	str	r1, [r7, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cd98:	6878      	ldr	r0, [r7, #4]
 801cd9a:	f7ed fd16 	bl	800a7ca <lv_obj_get_ext_attr>
 801cd9e:	60f8      	str	r0, [r7, #12]
    if(ext->static_txt == 0 && ext->text != NULL) {
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	7f9b      	ldrb	r3, [r3, #30]
 801cda4:	f003 0308 	and.w	r3, r3, #8
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d10b      	bne.n	801cdc6 <lv_label_set_static_text+0x38>
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d007      	beq.n	801cdc6 <lv_label_set_static_text+0x38>
        lv_mem_free(ext->text);
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f7fa f8e6 	bl	8016f8c <lv_mem_free>
        ext->text = NULL;
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	601a      	str	r2, [r3, #0]
    }

    if(text != NULL) {
 801cdc6:	683b      	ldr	r3, [r7, #0]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d007      	beq.n	801cddc <lv_label_set_static_text+0x4e>
        ext->static_txt = 1;
 801cdcc:	68fa      	ldr	r2, [r7, #12]
 801cdce:	7f93      	ldrb	r3, [r2, #30]
 801cdd0:	f043 0308 	orr.w	r3, r3, #8
 801cdd4:	7793      	strb	r3, [r2, #30]
        ext->text       = (char *)text;
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	683a      	ldr	r2, [r7, #0]
 801cdda:	601a      	str	r2, [r3, #0]
    }

    lv_label_refr_text(label);
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f000 fd07 	bl	801d7f0 <lv_label_refr_text>
}
 801cde2:	bf00      	nop
 801cde4:	3710      	adds	r7, #16
 801cde6:	46bd      	mov	sp, r7
 801cde8:	bd80      	pop	{r7, pc}
	...

0801cdec <lv_label_set_long_mode>:
 * @param long_mode the new mode from 'lv_label_long_mode' enum.
 *                  In LV_LONG_BREAK/LONG/ROLL the size of the label should be set AFTER this
 * function
 */
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b084      	sub	sp, #16
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	6078      	str	r0, [r7, #4]
 801cdf4:	460b      	mov	r3, r1
 801cdf6:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cdf8:	6878      	ldr	r0, [r7, #4]
 801cdfa:	f7ed fce6 	bl	800a7ca <lv_obj_get_ext_attr>
 801cdfe:	60f8      	str	r0, [r7, #12]

#if LV_USE_ANIMATION
    /*Delete the old animation (if exists)*/
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801ce00:	4924      	ldr	r1, [pc, #144]	; (801ce94 <lv_label_set_long_mode+0xa8>)
 801ce02:	6878      	ldr	r0, [r7, #4]
 801ce04:	f7f8 ffec 	bl	8015de0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 801ce08:	4923      	ldr	r1, [pc, #140]	; (801ce98 <lv_label_set_long_mode+0xac>)
 801ce0a:	6878      	ldr	r0, [r7, #4]
 801ce0c:	f7f8 ffe8 	bl	8015de0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801ce10:	4922      	ldr	r1, [pc, #136]	; (801ce9c <lv_label_set_long_mode+0xb0>)
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f7f8 ffe4 	bl	8015de0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801ce18:	4921      	ldr	r1, [pc, #132]	; (801cea0 <lv_label_set_long_mode+0xb4>)
 801ce1a:	6878      	ldr	r0, [r7, #4]
 801ce1c:	f7f8 ffe0 	bl	8015de0 <lv_anim_del>
#endif
    ext->offset.x = 0;
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	2200      	movs	r2, #0
 801ce24:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	2200      	movs	r2, #0
 801ce2a:	819a      	strh	r2, [r3, #12]

    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 801ce2c:	78fb      	ldrb	r3, [r7, #3]
 801ce2e:	2b03      	cmp	r3, #3
 801ce30:	d005      	beq.n	801ce3e <lv_label_set_long_mode+0x52>
 801ce32:	78fb      	ldrb	r3, [r7, #3]
 801ce34:	2b04      	cmp	r3, #4
 801ce36:	d002      	beq.n	801ce3e <lv_label_set_long_mode+0x52>
 801ce38:	78fb      	ldrb	r3, [r7, #3]
 801ce3a:	2b05      	cmp	r3, #5
 801ce3c:	d105      	bne.n	801ce4a <lv_label_set_long_mode+0x5e>
        ext->expand = 1;
 801ce3e:	68fa      	ldr	r2, [r7, #12]
 801ce40:	7f93      	ldrb	r3, [r2, #30]
 801ce42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce46:	7793      	strb	r3, [r2, #30]
 801ce48:	e004      	b.n	801ce54 <lv_label_set_long_mode+0x68>
    else
        ext->expand = 0;
 801ce4a:	68fa      	ldr	r2, [r7, #12]
 801ce4c:	7f93      	ldrb	r3, [r2, #30]
 801ce4e:	f36f 13c7 	bfc	r3, #7, #1
 801ce52:	7793      	strb	r3, [r2, #30]

    /*Restore the character under the dots*/
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	7f9b      	ldrb	r3, [r3, #30]
 801ce58:	f003 0307 	and.w	r3, r3, #7
 801ce5c:	b2db      	uxtb	r3, r3
 801ce5e:	2b02      	cmp	r3, #2
 801ce60:	d108      	bne.n	801ce74 <lv_label_set_long_mode+0x88>
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	891b      	ldrh	r3, [r3, #8]
 801ce66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d002      	beq.n	801ce74 <lv_label_set_long_mode+0x88>
        lv_label_revert_dots(label);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f000 ff64 	bl	801dd3c <lv_label_revert_dots>
    }

    ext->long_mode = long_mode;
 801ce74:	78fb      	ldrb	r3, [r7, #3]
 801ce76:	f003 0307 	and.w	r3, r3, #7
 801ce7a:	b2d9      	uxtb	r1, r3
 801ce7c:	68fa      	ldr	r2, [r7, #12]
 801ce7e:	7f93      	ldrb	r3, [r2, #30]
 801ce80:	f361 0302 	bfi	r3, r1, #0, #3
 801ce84:	7793      	strb	r3, [r2, #30]
    lv_label_refr_text(label);
 801ce86:	6878      	ldr	r0, [r7, #4]
 801ce88:	f000 fcb2 	bl	801d7f0 <lv_label_refr_text>
}
 801ce8c:	bf00      	nop
 801ce8e:	3710      	adds	r7, #16
 801ce90:	46bd      	mov	sp, r7
 801ce92:	bd80      	pop	{r7, pc}
 801ce94:	08009687 	.word	0x08009687
 801ce98:	080096b1 	.word	0x080096b1
 801ce9c:	0801ddf1 	.word	0x0801ddf1
 801cea0:	0801de19 	.word	0x0801de19

0801cea4 <lv_label_set_align>:
 * Set the align of the label (left or center)
 * @param label pointer to a label object
 * @param align 'LV_LABEL_ALIGN_LEFT' or 'LV_LABEL_ALIGN_LEFT'
 */
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)
{
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b084      	sub	sp, #16
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	6078      	str	r0, [r7, #4]
 801ceac:	460b      	mov	r3, r1
 801ceae:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801ceb0:	6878      	ldr	r0, [r7, #4]
 801ceb2:	f7ed fc8a 	bl	800a7ca <lv_obj_get_ext_attr>
 801ceb6:	60f8      	str	r0, [r7, #12]
    if(ext->align == align) return;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	7f9b      	ldrb	r3, [r3, #30]
 801cebc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cec0:	b2db      	uxtb	r3, r3
 801cec2:	461a      	mov	r2, r3
 801cec4:	78fb      	ldrb	r3, [r7, #3]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d00c      	beq.n	801cee4 <lv_label_set_align+0x40>

    ext->align = align;
 801ceca:	78fb      	ldrb	r3, [r7, #3]
 801cecc:	f003 0303 	and.w	r3, r3, #3
 801ced0:	b2d9      	uxtb	r1, r3
 801ced2:	68fa      	ldr	r2, [r7, #12]
 801ced4:	7f93      	ldrb	r3, [r2, #30]
 801ced6:	f361 1305 	bfi	r3, r1, #4, #2
 801ceda:	7793      	strb	r3, [r2, #30]

    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 801cedc:	6878      	ldr	r0, [r7, #4]
 801cede:	f7ec fa48 	bl	8009372 <lv_obj_invalidate>
 801cee2:	e000      	b.n	801cee6 <lv_label_set_align+0x42>
    if(ext->align == align) return;
 801cee4:	bf00      	nop
                                 (lv_refr_label_text() not required)*/
}
 801cee6:	3710      	adds	r7, #16
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}

0801ceec <lv_label_set_recolor>:
 * Enable the recoloring by in-line commands
 * @param label pointer to a label object
 * @param en true: enable recoloring, false: disable
 */
void lv_label_set_recolor(lv_obj_t * label, bool en)
{
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b084      	sub	sp, #16
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 801cef4:	460b      	mov	r3, r1
 801cef6:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cef8:	6878      	ldr	r0, [r7, #4]
 801cefa:	f7ed fc66 	bl	800a7ca <lv_obj_get_ext_attr>
 801cefe:	60f8      	str	r0, [r7, #12]
    if(ext->recolor == en) return;
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	7f9b      	ldrb	r3, [r3, #30]
 801cf04:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801cf08:	b2db      	uxtb	r3, r3
 801cf0a:	78fa      	ldrb	r2, [r7, #3]
 801cf0c:	429a      	cmp	r2, r3
 801cf0e:	d011      	beq.n	801cf34 <lv_label_set_recolor+0x48>

    ext->recolor = en == false ? 0 : 1;
 801cf10:	78fb      	ldrb	r3, [r7, #3]
 801cf12:	f083 0301 	eor.w	r3, r3, #1
 801cf16:	b2db      	uxtb	r3, r3
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d001      	beq.n	801cf20 <lv_label_set_recolor+0x34>
 801cf1c:	2100      	movs	r1, #0
 801cf1e:	e000      	b.n	801cf22 <lv_label_set_recolor+0x36>
 801cf20:	2101      	movs	r1, #1
 801cf22:	68fa      	ldr	r2, [r7, #12]
 801cf24:	7f93      	ldrb	r3, [r2, #30]
 801cf26:	f361 1386 	bfi	r3, r1, #6, #1
 801cf2a:	7793      	strb	r3, [r2, #30]

    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 801cf2c:	6878      	ldr	r0, [r7, #4]
 801cf2e:	f000 fc5f 	bl	801d7f0 <lv_label_refr_text>
 801cf32:	e000      	b.n	801cf36 <lv_label_set_recolor+0x4a>
    if(ext->recolor == en) return;
 801cf34:	bf00      	nop
                                  be hided or revealed*/
}
 801cf36:	3710      	adds	r7, #16
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd80      	pop	{r7, pc}

0801cf3c <lv_label_set_body_draw>:
 * Set the label to draw (or not draw) background specified in its style's body
 * @param label pointer to a label object
 * @param en true: draw body; false: don't draw body
 */
void lv_label_set_body_draw(lv_obj_t * label, bool en)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
 801cf44:	460b      	mov	r3, r1
 801cf46:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cf48:	6878      	ldr	r0, [r7, #4]
 801cf4a:	f7ed fc3e 	bl	800a7ca <lv_obj_get_ext_attr>
 801cf4e:	60f8      	str	r0, [r7, #12]
    if(ext->body_draw == en) return;
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	7fdb      	ldrb	r3, [r3, #31]
 801cf54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801cf58:	b2db      	uxtb	r3, r3
 801cf5a:	78fa      	ldrb	r2, [r7, #3]
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	d014      	beq.n	801cf8a <lv_label_set_body_draw+0x4e>

    ext->body_draw = en == false ? 0 : 1;
 801cf60:	78fb      	ldrb	r3, [r7, #3]
 801cf62:	f083 0301 	eor.w	r3, r3, #1
 801cf66:	b2db      	uxtb	r3, r3
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d001      	beq.n	801cf70 <lv_label_set_body_draw+0x34>
 801cf6c:	2100      	movs	r1, #0
 801cf6e:	e000      	b.n	801cf72 <lv_label_set_body_draw+0x36>
 801cf70:	2101      	movs	r1, #1
 801cf72:	68fa      	ldr	r2, [r7, #12]
 801cf74:	7fd3      	ldrb	r3, [r2, #31]
 801cf76:	f361 0300 	bfi	r3, r1, #0, #1
 801cf7a:	77d3      	strb	r3, [r2, #31]

    lv_obj_refresh_ext_draw_pad(label);
 801cf7c:	6878      	ldr	r0, [r7, #4]
 801cf7e:	f7ed fa6d 	bl	800a45c <lv_obj_refresh_ext_draw_pad>

    lv_obj_invalidate(label);
 801cf82:	6878      	ldr	r0, [r7, #4]
 801cf84:	f7ec f9f5 	bl	8009372 <lv_obj_invalidate>
 801cf88:	e000      	b.n	801cf8c <lv_label_set_body_draw+0x50>
    if(ext->body_draw == en) return;
 801cf8a:	bf00      	nop
}
 801cf8c:	3710      	adds	r7, #16
 801cf8e:	46bd      	mov	sp, r7
 801cf90:	bd80      	pop	{r7, pc}

0801cf92 <lv_label_get_text>:
 * Get the text of a label
 * @param label pointer to a label object
 * @return the text of the label
 */
char * lv_label_get_text(const lv_obj_t * label)
{
 801cf92:	b580      	push	{r7, lr}
 801cf94:	b084      	sub	sp, #16
 801cf96:	af00      	add	r7, sp, #0
 801cf98:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cf9a:	6878      	ldr	r0, [r7, #4]
 801cf9c:	f7ed fc15 	bl	800a7ca <lv_obj_get_ext_attr>
 801cfa0:	60f8      	str	r0, [r7, #12]

    return ext->text;
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	681b      	ldr	r3, [r3, #0]
}
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	3710      	adds	r7, #16
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	bd80      	pop	{r7, pc}

0801cfae <lv_label_get_long_mode>:
 * Get the long mode of a label
 * @param label pointer to a label object
 * @return the long mode
 */
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)
{
 801cfae:	b580      	push	{r7, lr}
 801cfb0:	b084      	sub	sp, #16
 801cfb2:	af00      	add	r7, sp, #0
 801cfb4:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cfb6:	6878      	ldr	r0, [r7, #4]
 801cfb8:	f7ed fc07 	bl	800a7ca <lv_obj_get_ext_attr>
 801cfbc:	60f8      	str	r0, [r7, #12]
    return ext->long_mode;
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	7f9b      	ldrb	r3, [r3, #30]
 801cfc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801cfc6:	b2db      	uxtb	r3, r3
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3710      	adds	r7, #16
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <lv_label_get_align>:
 * Get the align attribute
 * @param label pointer to a label object
 * @return LV_LABEL_ALIGN_LEFT or LV_LABEL_ALIGN_CENTER
 */
lv_label_align_t lv_label_get_align(const lv_obj_t * label)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b084      	sub	sp, #16
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cfd8:	6878      	ldr	r0, [r7, #4]
 801cfda:	f7ed fbf6 	bl	800a7ca <lv_obj_get_ext_attr>
 801cfde:	60f8      	str	r0, [r7, #12]
    return ext->align;
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	7f9b      	ldrb	r3, [r3, #30]
 801cfe4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cfe8:	b2db      	uxtb	r3, r3
}
 801cfea:	4618      	mov	r0, r3
 801cfec:	3710      	adds	r7, #16
 801cfee:	46bd      	mov	sp, r7
 801cff0:	bd80      	pop	{r7, pc}

0801cff2 <lv_label_get_recolor>:
 * Get the recoloring attribute
 * @param label pointer to a label object
 * @return true: recoloring is enabled, false: disable
 */
bool lv_label_get_recolor(const lv_obj_t * label)
{
 801cff2:	b580      	push	{r7, lr}
 801cff4:	b084      	sub	sp, #16
 801cff6:	af00      	add	r7, sp, #0
 801cff8:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cffa:	6878      	ldr	r0, [r7, #4]
 801cffc:	f7ed fbe5 	bl	800a7ca <lv_obj_get_ext_attr>
 801d000:	60f8      	str	r0, [r7, #12]
    return ext->recolor == 0 ? false : true;
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	7f9b      	ldrb	r3, [r3, #30]
 801d006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d00a:	b2db      	uxtb	r3, r3
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	bf14      	ite	ne
 801d010:	2301      	movne	r3, #1
 801d012:	2300      	moveq	r3, #0
 801d014:	b2db      	uxtb	r3, r3
}
 801d016:	4618      	mov	r0, r3
 801d018:	3710      	adds	r7, #16
 801d01a:	46bd      	mov	sp, r7
 801d01c:	bd80      	pop	{r7, pc}

0801d01e <lv_label_get_body_draw>:
 * Get the body draw attribute
 * @param label pointer to a label object
 * @return true: draw body; false: don't draw body
 */
bool lv_label_get_body_draw(const lv_obj_t * label)
{
 801d01e:	b580      	push	{r7, lr}
 801d020:	b084      	sub	sp, #16
 801d022:	af00      	add	r7, sp, #0
 801d024:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	f7ed fbcf 	bl	800a7ca <lv_obj_get_ext_attr>
 801d02c:	60f8      	str	r0, [r7, #12]
    return ext->body_draw == 0 ? false : true;
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	7fdb      	ldrb	r3, [r3, #31]
 801d032:	f003 0301 	and.w	r3, r3, #1
 801d036:	b2db      	uxtb	r3, r3
 801d038:	2b00      	cmp	r3, #0
 801d03a:	bf14      	ite	ne
 801d03c:	2301      	movne	r3, #1
 801d03e:	2300      	moveq	r3, #0
 801d040:	b2db      	uxtb	r3, r3
}
 801d042:	4618      	mov	r0, r3
 801d044:	3710      	adds	r7, #16
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}
	...

0801d04c <lv_label_get_letter_on>:
 * @param pos pointer to point with coordinates on a the label
 * @return the index of the letter on the 'pos_p' point (E.g. on 0;0 is the 0. letter)
 * Expressed in character index and not byte index (different in UTF-8)
 */
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b092      	sub	sp, #72	; 0x48
 801d050:	af02      	add	r7, sp, #8
 801d052:	6078      	str	r0, [r7, #4]
 801d054:	6039      	str	r1, [r7, #0]
    const char * txt         = lv_label_get_text(label);
 801d056:	6878      	ldr	r0, [r7, #4]
 801d058:	f7ff ff9b 	bl	801cf92 <lv_label_get_text>
 801d05c:	62b8      	str	r0, [r7, #40]	; 0x28
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 801d05e:	6878      	ldr	r0, [r7, #4]
 801d060:	f7ed fbb3 	bl	800a7ca <lv_obj_get_ext_attr>
 801d064:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t line_start      = 0;
 801d066:	2300      	movs	r3, #0
 801d068:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t new_line_start  = 0;
 801d06a:	2300      	movs	r3, #0
 801d06c:	63bb      	str	r3, [r7, #56]	; 0x38
    lv_coord_t max_w         = lv_obj_get_width(label);
 801d06e:	6878      	ldr	r0, [r7, #4]
 801d070:	f7ed fac0 	bl	800a5f4 <lv_obj_get_width>
 801d074:	4603      	mov	r3, r0
 801d076:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_style_t * style = lv_obj_get_style(label);
 801d078:	6878      	ldr	r0, [r7, #4]
 801d07a:	f7ed faeb 	bl	800a654 <lv_obj_get_style>
 801d07e:	6238      	str	r0, [r7, #32]
    const lv_font_t * font   = style->text.font;
 801d080:	6a3b      	ldr	r3, [r7, #32]
 801d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d084:	61fb      	str	r3, [r7, #28]
    uint8_t letter_height    = lv_font_get_line_height(font);
 801d086:	69f8      	ldr	r0, [r7, #28]
 801d088:	f7ff fc8a 	bl	801c9a0 <lv_font_get_line_height>
 801d08c:	4603      	mov	r3, r0
 801d08e:	76fb      	strb	r3, [r7, #27]
    lv_coord_t y             = 0;
 801d090:	2300      	movs	r3, #0
 801d092:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 801d094:	2300      	movs	r3, #0
 801d096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d09c:	7f9b      	ldrb	r3, [r3, #30]
 801d09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0a2:	b2db      	uxtb	r3, r3
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d005      	beq.n	801d0b4 <lv_label_get_letter_on+0x68>
 801d0a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d0ac:	f043 0301 	orr.w	r3, r3, #1
 801d0b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0b6:	7f9b      	ldrb	r3, [r3, #30]
 801d0b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d0bc:	b2db      	uxtb	r3, r3
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d005      	beq.n	801d0ce <lv_label_get_letter_on+0x82>
 801d0c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d0c6:	f043 0302 	orr.w	r3, r3, #2
 801d0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d0:	7f9b      	ldrb	r3, [r3, #30]
 801d0d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d0d6:	b2db      	uxtb	r3, r3
 801d0d8:	2b10      	cmp	r3, #16
 801d0da:	d105      	bne.n	801d0e8 <lv_label_get_letter_on+0x9c>
 801d0dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d0e0:	f043 0304 	orr.w	r3, r3, #4
 801d0e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ea:	7f9b      	ldrb	r3, [r3, #30]
 801d0ec:	f003 0307 	and.w	r3, r3, #7
 801d0f0:	b2db      	uxtb	r3, r3
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d12f      	bne.n	801d156 <lv_label_get_letter_on+0x10a>
        max_w = LV_COORD_MAX;
 801d0f6:	f647 4318 	movw	r3, #31768	; 0x7c18
 801d0fa:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    /*Search the line of the index letter */;
    while(txt[line_start] != '\0') {
 801d0fc:	e02b      	b.n	801d156 <lv_label_get_letter_on+0x10a>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801d0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d102:	18d0      	adds	r0, r2, r3
 801d104:	6a3b      	ldr	r3, [r7, #32]
 801d106:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 801d10a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 801d10e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d112:	9300      	str	r3, [sp, #0]
 801d114:	460b      	mov	r3, r1
 801d116:	69f9      	ldr	r1, [r7, #28]
 801d118:	f7fa faf6 	bl	8017708 <lv_txt_get_next_line>
 801d11c:	4603      	mov	r3, r0
 801d11e:	461a      	mov	r2, r3
 801d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d122:	4413      	add	r3, r2
 801d124:	63bb      	str	r3, [r7, #56]	; 0x38

        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d126:	683b      	ldr	r3, [r7, #0]
 801d128:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d12c:	4619      	mov	r1, r3
 801d12e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801d132:	7efb      	ldrb	r3, [r7, #27]
 801d134:	4413      	add	r3, r2
 801d136:	4299      	cmp	r1, r3
 801d138:	dd14      	ble.n	801d164 <lv_label_get_letter_on+0x118>
        y += letter_height + style->text.line_space;
 801d13a:	7efb      	ldrb	r3, [r7, #27]
 801d13c:	b29a      	uxth	r2, r3
 801d13e:	6a3b      	ldr	r3, [r7, #32]
 801d140:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d144:	b29b      	uxth	r3, r3
 801d146:	4413      	add	r3, r2
 801d148:	b29a      	uxth	r2, r3
 801d14a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d14c:	4413      	add	r3, r2
 801d14e:	b29b      	uxth	r3, r3
 801d150:	86bb      	strh	r3, [r7, #52]	; 0x34

        line_start = new_line_start;
 801d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d154:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(txt[line_start] != '\0') {
 801d156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d15a:	4413      	add	r3, r2
 801d15c:	781b      	ldrb	r3, [r3, #0]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d1cd      	bne.n	801d0fe <lv_label_get_letter_on+0xb2>
 801d162:	e000      	b.n	801d166 <lv_label_get_letter_on+0x11a>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d164:	bf00      	nop
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 801d166:	2300      	movs	r3, #0
 801d168:	863b      	strh	r3, [r7, #48]	; 0x30
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 801d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d16c:	7f9b      	ldrb	r3, [r3, #30]
 801d16e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d172:	b2db      	uxtb	r3, r3
 801d174:	2b10      	cmp	r3, #16
 801d176:	d129      	bne.n	801d1cc <lv_label_get_letter_on+0x180>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 801d178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d17c:	18d0      	adds	r0, r2, r3
 801d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d180:	b29a      	uxth	r2, r3
 801d182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d184:	b29b      	uxth	r3, r3
 801d186:	1ad3      	subs	r3, r2, r3
 801d188:	b299      	uxth	r1, r3
 801d18a:	6a3b      	ldr	r3, [r7, #32]
 801d18c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 801d190:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d194:	9300      	str	r3, [sp, #0]
 801d196:	4613      	mov	r3, r2
 801d198:	69fa      	ldr	r2, [r7, #28]
 801d19a:	f7fa fb67 	bl	801786c <lv_txt_get_width>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	833b      	strh	r3, [r7, #24]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 801d1a2:	6878      	ldr	r0, [r7, #4]
 801d1a4:	f7ed fa26 	bl	800a5f4 <lv_obj_get_width>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	0fda      	lsrs	r2, r3, #31
 801d1ac:	4413      	add	r3, r2
 801d1ae:	105b      	asrs	r3, r3, #1
 801d1b0:	b21b      	sxth	r3, r3
 801d1b2:	4619      	mov	r1, r3
 801d1b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d1b8:	0fda      	lsrs	r2, r3, #31
 801d1ba:	4413      	add	r3, r2
 801d1bc:	105b      	asrs	r3, r3, #1
 801d1be:	b21b      	sxth	r3, r3
 801d1c0:	1acb      	subs	r3, r1, r3
 801d1c2:	b29a      	uxth	r2, r3
 801d1c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d1c6:	4413      	add	r3, r2
 801d1c8:	b29b      	uxth	r3, r3
 801d1ca:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	73fb      	strb	r3, [r7, #15]

    uint32_t i         = line_start;
 801d1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1d2:	60bb      	str	r3, [r7, #8]
    uint32_t i_current = i;
 801d1d4:	68bb      	ldr	r3, [r7, #8]
 801d1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t letter;
    uint32_t letter_next;

    if(new_line_start > 0) {
 801d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d04a      	beq.n	801d274 <lv_label_get_letter_on+0x228>
        while(i <= new_line_start - 1) {
 801d1de:	e044      	b.n	801d26a <lv_label_get_letter_on+0x21e>
            /* Get the current letter.
             * Be careful 'i' already points to the next character*/
            letter = lv_txt_encoded_next(txt, &i);
 801d1e0:	4b2a      	ldr	r3, [pc, #168]	; (801d28c <lv_label_get_letter_on+0x240>)
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	f107 0208 	add.w	r2, r7, #8
 801d1e8:	4611      	mov	r1, r2
 801d1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d1ec:	4798      	blx	r3
 801d1ee:	6178      	str	r0, [r7, #20]

            /*Get the next letter too for kerning*/
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 801d1f0:	4b26      	ldr	r3, [pc, #152]	; (801d28c <lv_label_get_letter_on+0x240>)
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	68ba      	ldr	r2, [r7, #8]
 801d1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d1f8:	440a      	add	r2, r1
 801d1fa:	2100      	movs	r1, #0
 801d1fc:	4610      	mov	r0, r2
 801d1fe:	4798      	blx	r3
 801d200:	6138      	str	r0, [r7, #16]

            /*Handle the recolor command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801d202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d206:	f003 0301 	and.w	r3, r3, #1
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d00e      	beq.n	801d22c <lv_label_get_letter_on+0x1e0>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801d20e:	68bb      	ldr	r3, [r7, #8]
 801d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d212:	4413      	add	r3, r2
 801d214:	781b      	ldrb	r3, [r3, #0]
 801d216:	461a      	mov	r2, r3
 801d218:	f107 030f 	add.w	r3, r7, #15
 801d21c:	4611      	mov	r1, r2
 801d21e:	4618      	mov	r0, r3
 801d220:	f7fa fb8e 	bl	8017940 <lv_txt_is_cmd>
 801d224:	4603      	mov	r3, r0
 801d226:	2b00      	cmp	r3, #0
 801d228:	d000      	beq.n	801d22c <lv_label_get_letter_on+0x1e0>
                    continue; /*Skip the letter is it is part of a command*/
 801d22a:	e01e      	b.n	801d26a <lv_label_get_letter_on+0x21e>
                }
            }

            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d22c:	693a      	ldr	r2, [r7, #16]
 801d22e:	6979      	ldr	r1, [r7, #20]
 801d230:	69f8      	ldr	r0, [r7, #28]
 801d232:	f7f8 f883 	bl	801533c <lv_font_get_glyph_width>
 801d236:	4603      	mov	r3, r0
 801d238:	461a      	mov	r2, r3
 801d23a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d23c:	4413      	add	r3, r2
 801d23e:	b29b      	uxth	r3, r3
 801d240:	863b      	strh	r3, [r7, #48]	; 0x30
            if(pos->x < x) {
 801d242:	683b      	ldr	r3, [r7, #0]
 801d244:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d248:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801d24c:	429a      	cmp	r2, r3
 801d24e:	dd02      	ble.n	801d256 <lv_label_get_letter_on+0x20a>
                i = i_current;
 801d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d252:	60bb      	str	r3, [r7, #8]
                break;
 801d254:	e00e      	b.n	801d274 <lv_label_get_letter_on+0x228>
            }
            x += style->text.letter_space;
 801d256:	6a3b      	ldr	r3, [r7, #32]
 801d258:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801d25c:	b29a      	uxth	r2, r3
 801d25e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d260:	4413      	add	r3, r2
 801d262:	b29b      	uxth	r3, r3
 801d264:	863b      	strh	r3, [r7, #48]	; 0x30
            i_current = i;
 801d266:	68bb      	ldr	r3, [r7, #8]
 801d268:	62fb      	str	r3, [r7, #44]	; 0x2c
        while(i <= new_line_start - 1) {
 801d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d26c:	1e5a      	subs	r2, r3, #1
 801d26e:	68bb      	ldr	r3, [r7, #8]
 801d270:	429a      	cmp	r2, r3
 801d272:	d2b5      	bcs.n	801d1e0 <lv_label_get_letter_on+0x194>
        }
    }

    return lv_encoded_get_char_id(txt, i);
 801d274:	4b06      	ldr	r3, [pc, #24]	; (801d290 <lv_label_get_letter_on+0x244>)
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	68ba      	ldr	r2, [r7, #8]
 801d27a:	4611      	mov	r1, r2
 801d27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d27e:	4798      	blx	r3
 801d280:	4603      	mov	r3, r0
 801d282:	b29b      	uxth	r3, r3
}
 801d284:	4618      	mov	r0, r3
 801d286:	3740      	adds	r7, #64	; 0x40
 801d288:	46bd      	mov	sp, r7
 801d28a:	bd80      	pop	{r7, pc}
 801d28c:	200027a0 	.word	0x200027a0
 801d290:	200027ac 	.word	0x200027ac

0801d294 <lv_label_get_text_sel_start>:
 * @brief Get the selection start index.
 * @param label pointer to a label object.
 * @return selection start index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_start(const lv_obj_t * label)
{
 801d294:	b480      	push	{r7}
 801d296:	b083      	sub	sp, #12
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_start;

#else
    (void)label;    /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 801d29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	370c      	adds	r7, #12
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2aa:	4770      	bx	lr

0801d2ac <lv_label_get_text_sel_end>:
 * @brief Get the selection end index.
 * @param label pointer to a label object.
 * @return selection end index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_end(const lv_obj_t * label)
{
 801d2ac:	b480      	push	{r7}
 801d2ae:	b083      	sub	sp, #12
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
#if LV_LABEL_TEXT_SEL
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_end;
#else
    (void)label; /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 801d2b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	370c      	adds	r7, #12
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c2:	4770      	bx	lr

0801d2c4 <lv_label_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_label_design(lv_obj_t * label, const lv_area_t * mask, lv_design_mode_t mode)
{
 801d2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2c6:	b099      	sub	sp, #100	; 0x64
 801d2c8:	af06      	add	r7, sp, #24
 801d2ca:	60f8      	str	r0, [r7, #12]
 801d2cc:	60b9      	str	r1, [r7, #8]
 801d2ce:	4613      	mov	r3, r2
 801d2d0:	71fb      	strb	r3, [r7, #7]
    /* A label never covers an area */
    if(mode == LV_DESIGN_COVER_CHK)
 801d2d2:	79fb      	ldrb	r3, [r7, #7]
 801d2d4:	2b02      	cmp	r3, #2
 801d2d6:	d101      	bne.n	801d2dc <lv_label_design+0x18>
        return false;
 801d2d8:	2300      	movs	r3, #0
 801d2da:	e1c4      	b.n	801d666 <lv_label_design+0x3a2>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801d2dc:	79fb      	ldrb	r3, [r7, #7]
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	f040 81c0 	bne.w	801d664 <lv_label_design+0x3a0>
        lv_area_t coords;
        const lv_style_t * style = lv_obj_get_style(label);
 801d2e4:	68f8      	ldr	r0, [r7, #12]
 801d2e6:	f7ed f9b5 	bl	800a654 <lv_obj_get_style>
 801d2ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 801d2ec:	68f8      	ldr	r0, [r7, #12]
 801d2ee:	f7ed fa1e 	bl	800a72e <lv_obj_get_opa_scale>
 801d2f2:	4603      	mov	r3, r0
 801d2f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        lv_obj_get_coords(label, &coords);
 801d2f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	68f8      	ldr	r0, [r7, #12]
 801d300:	f7ed f937 	bl	800a572 <lv_obj_get_coords>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(label);
 801d304:	68f8      	ldr	r0, [r7, #12]
 801d306:	f7ed fa6c 	bl	800a7e2 <lv_obj_get_group>
 801d30a:	6378      	str	r0, [r7, #52]	; 0x34
        if(lv_group_get_focused(g) == label) {
 801d30c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d30e:	f7eb fa4a 	bl	80087a6 <lv_group_get_focused>
 801d312:	4602      	mov	r2, r0
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	4293      	cmp	r3, r2
 801d318:	d107      	bne.n	801d32a <lv_label_design+0x66>
            lv_draw_rect(&coords, mask, style, opa_scale);
 801d31a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801d31e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801d322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d324:	68b9      	ldr	r1, [r7, #8]
 801d326:	f7f2 ff04 	bl	8010132 <lv_draw_rect>
        }
#endif

        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d32a:	68f8      	ldr	r0, [r7, #12]
 801d32c:	f7ed fa4d 	bl	800a7ca <lv_obj_get_ext_attr>
 801d330:	6338      	str	r0, [r7, #48]	; 0x30

        if(ext->body_draw) {
 801d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d334:	7fdb      	ldrb	r3, [r3, #31]
 801d336:	f003 0301 	and.w	r3, r3, #1
 801d33a:	b2db      	uxtb	r3, r3
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d03b      	beq.n	801d3b8 <lv_label_design+0xf4>
            lv_area_t bg;
            lv_obj_get_coords(label, &bg);
 801d340:	f107 0320 	add.w	r3, r7, #32
 801d344:	4619      	mov	r1, r3
 801d346:	68f8      	ldr	r0, [r7, #12]
 801d348:	f7ed f913 	bl	800a572 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 801d34c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d350:	b29a      	uxth	r2, r3
 801d352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d354:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801d358:	b29b      	uxth	r3, r3
 801d35a:	1ad3      	subs	r3, r2, r3
 801d35c:	b29b      	uxth	r3, r3
 801d35e:	b21b      	sxth	r3, r3
 801d360:	843b      	strh	r3, [r7, #32]
            bg.x2 += style->body.padding.right;
 801d362:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801d366:	b29a      	uxth	r2, r3
 801d368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d36a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801d36e:	b29b      	uxth	r3, r3
 801d370:	4413      	add	r3, r2
 801d372:	b29b      	uxth	r3, r3
 801d374:	b21b      	sxth	r3, r3
 801d376:	84bb      	strh	r3, [r7, #36]	; 0x24
            bg.y1 -= style->body.padding.top;
 801d378:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d37c:	b29a      	uxth	r2, r3
 801d37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d380:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801d384:	b29b      	uxth	r3, r3
 801d386:	1ad3      	subs	r3, r2, r3
 801d388:	b29b      	uxth	r3, r3
 801d38a:	b21b      	sxth	r3, r3
 801d38c:	847b      	strh	r3, [r7, #34]	; 0x22
            bg.y2 += style->body.padding.bottom;
 801d38e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d392:	b29a      	uxth	r2, r3
 801d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d396:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	4413      	add	r3, r2
 801d39e:	b29b      	uxth	r3, r3
 801d3a0:	b21b      	sxth	r3, r3
 801d3a2:	84fb      	strh	r3, [r7, #38]	; 0x26

            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801d3a4:	68f8      	ldr	r0, [r7, #12]
 801d3a6:	f7ed f9c2 	bl	800a72e <lv_obj_get_opa_scale>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	f107 0020 	add.w	r0, r7, #32
 801d3b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d3b2:	68b9      	ldr	r1, [r7, #8]
 801d3b4:	f7f2 febd 	bl	8010132 <lv_draw_rect>
        }

        /*TEST: draw a background for the label*/
        // lv_draw_rect(&label->coords, mask, &lv_style_plain_color, LV_OPA_COVER);

        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3c0:	7f9b      	ldrb	r3, [r3, #30]
 801d3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3c6:	b2db      	uxtb	r3, r3
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d005      	beq.n	801d3d8 <lv_label_design+0x114>
 801d3cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d3d0:	f043 0301 	orr.w	r3, r3, #1
 801d3d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3da:	7f9b      	ldrb	r3, [r3, #30]
 801d3dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d3e0:	b2db      	uxtb	r3, r3
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d005      	beq.n	801d3f2 <lv_label_design+0x12e>
 801d3e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d3ea:	f043 0302 	orr.w	r3, r3, #2
 801d3ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3f4:	7f9b      	ldrb	r3, [r3, #30]
 801d3f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d3fa:	b2db      	uxtb	r3, r3
 801d3fc:	2b10      	cmp	r3, #16
 801d3fe:	d105      	bne.n	801d40c <lv_label_design+0x148>
 801d400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d404:	f043 0304 	orr.w	r3, r3, #4
 801d408:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 801d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d40e:	7f9b      	ldrb	r3, [r3, #30]
 801d410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d414:	b2db      	uxtb	r3, r3
 801d416:	2b20      	cmp	r3, #32
 801d418:	d105      	bne.n	801d426 <lv_label_design+0x162>
 801d41a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d41e:	f043 0308 	orr.w	r3, r3, #8
 801d422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        /* In ROLL mode the CENTER and RIGHT are pointless so remove them.
         * (In addition they will result mis-alignment is this case)*/
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d428:	7f9b      	ldrb	r3, [r3, #30]
 801d42a:	f003 0307 	and.w	r3, r3, #7
 801d42e:	b2db      	uxtb	r3, r3
 801d430:	2b03      	cmp	r3, #3
 801d432:	d006      	beq.n	801d442 <lv_label_design+0x17e>
 801d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d436:	7f9b      	ldrb	r3, [r3, #30]
 801d438:	f003 0307 	and.w	r3, r3, #7
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	2b04      	cmp	r3, #4
 801d440:	d138      	bne.n	801d4b4 <lv_label_design+0x1f0>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d444:	7f9b      	ldrb	r3, [r3, #30]
 801d446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d44a:	b2db      	uxtb	r3, r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801d44c:	2b10      	cmp	r3, #16
 801d44e:	d006      	beq.n	801d45e <lv_label_design+0x19a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d452:	7f9b      	ldrb	r3, [r3, #30]
 801d454:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801d458:	b2db      	uxtb	r3, r3
 801d45a:	2b20      	cmp	r3, #32
 801d45c:	d12a      	bne.n	801d4b4 <lv_label_design+0x1f0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 801d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d460:	6819      	ldr	r1, [r3, #0]
 801d462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d464:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801d466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d468:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 801d46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d46e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d472:	f107 001c 	add.w	r0, r7, #28
 801d476:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801d47a:	9202      	str	r2, [sp, #8]
 801d47c:	f647 4218 	movw	r2, #31768	; 0x7c18
 801d480:	9201      	str	r2, [sp, #4]
 801d482:	9300      	str	r3, [sp, #0]
 801d484:	462b      	mov	r3, r5
 801d486:	4622      	mov	r2, r4
 801d488:	f7fa f88c 	bl	80175a4 <lv_txt_get_size>
                            LV_COORD_MAX, flag);
            if(size.x > lv_obj_get_width(label)) {
 801d48c:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 801d490:	68f8      	ldr	r0, [r7, #12]
 801d492:	f7ed f8af 	bl	800a5f4 <lv_obj_get_width>
 801d496:	4603      	mov	r3, r0
 801d498:	429c      	cmp	r4, r3
 801d49a:	dd0b      	ble.n	801d4b4 <lv_label_design+0x1f0>
                flag &= ~LV_TXT_FLAG_RIGHT;
 801d49c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d4a0:	f023 0308 	bic.w	r3, r3, #8
 801d4a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                flag &= ~LV_TXT_FLAG_CENTER;
 801d4a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d4ac:	f023 0304 	bic.w	r3, r3, #4
 801d4b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        lv_draw_label_hint_t * hint = &ext->hint;
 801d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4b6:	3310      	adds	r3, #16
 801d4b8:	643b      	str	r3, [r7, #64]	; 0x40
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4bc:	7f9b      	ldrb	r3, [r3, #30]
 801d4be:	f003 0307 	and.w	r3, r3, #7
 801d4c2:	b2db      	uxtb	r3, r3
 801d4c4:	2b04      	cmp	r3, #4
 801d4c6:	d006      	beq.n	801d4d6 <lv_label_design+0x212>
 801d4c8:	68f8      	ldr	r0, [r7, #12]
 801d4ca:	f7ed f8a1 	bl	800a610 <lv_obj_get_height>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d4d4:	da01      	bge.n	801d4da <lv_label_design+0x216>
            hint = NULL;
 801d4d6:	2300      	movs	r3, #0
 801d4d8:	643b      	str	r3, [r7, #64]	; 0x40

        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 801d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4dc:	681c      	ldr	r4, [r3, #0]
 801d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4e0:	f103 050a 	add.w	r5, r3, #10
 801d4e4:	68f8      	ldr	r0, [r7, #12]
 801d4e6:	f7ff fed5 	bl	801d294 <lv_label_get_text_sel_start>
 801d4ea:	4603      	mov	r3, r0
 801d4ec:	461e      	mov	r6, r3
 801d4ee:	68f8      	ldr	r0, [r7, #12]
 801d4f0:	f7ff fedc 	bl	801d2ac <lv_label_get_text_sel_end>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	4619      	mov	r1, r3
 801d4f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801d4fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801d500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d502:	9305      	str	r3, [sp, #20]
 801d504:	9104      	str	r1, [sp, #16]
 801d506:	9603      	str	r6, [sp, #12]
 801d508:	9502      	str	r5, [sp, #8]
 801d50a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d50e:	9301      	str	r3, [sp, #4]
 801d510:	9400      	str	r4, [sp, #0]
 801d512:	4613      	mov	r3, r2
 801d514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d516:	68b9      	ldr	r1, [r7, #8]
 801d518:	f7f0 fb72 	bl	800dc00 <lv_draw_label>
                      lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), hint);

        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d51e:	7f9b      	ldrb	r3, [r3, #30]
 801d520:	f003 0307 	and.w	r3, r3, #7
 801d524:	b2db      	uxtb	r3, r3
 801d526:	2b04      	cmp	r3, #4
 801d528:	f040 809c 	bne.w	801d664 <lv_label_design+0x3a0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 801d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d52e:	6819      	ldr	r1, [r3, #0]
 801d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d532:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801d534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d536:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 801d53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d53c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d540:	f107 0018 	add.w	r0, r7, #24
 801d544:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801d548:	9202      	str	r2, [sp, #8]
 801d54a:	f647 4218 	movw	r2, #31768	; 0x7c18
 801d54e:	9201      	str	r2, [sp, #4]
 801d550:	9300      	str	r3, [sp, #0]
 801d552:	462b      	mov	r3, r5
 801d554:	4622      	mov	r2, r4
 801d556:	f7fa f825 	bl	80175a4 <lv_txt_get_size>
                            LV_COORD_MAX, flag);

            lv_point_t ofs;

            /*Draw the text again next to the original to make an circular effect */
            if(size.x > lv_obj_get_width(label)) {
 801d55a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 801d55e:	68f8      	ldr	r0, [r7, #12]
 801d560:	f7ed f848 	bl	800a5f4 <lv_obj_get_width>
 801d564:	4603      	mov	r3, r0
 801d566:	429c      	cmp	r4, r3
 801d568:	dd3c      	ble.n	801d5e4 <lv_label_design+0x320>
                ofs.x = ext->offset.x + size.x +
 801d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d56c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801d570:	b29a      	uxth	r2, r3
 801d572:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d576:	b29b      	uxth	r3, r3
 801d578:	4413      	add	r3, r2
 801d57a:	b29c      	uxth	r4, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d580:	2220      	movs	r2, #32
 801d582:	2120      	movs	r1, #32
 801d584:	4618      	mov	r0, r3
 801d586:	f7f7 fed9 	bl	801533c <lv_font_get_glyph_width>
 801d58a:	4603      	mov	r3, r0
                ofs.x = ext->offset.x + size.x +
 801d58c:	461a      	mov	r2, r3
 801d58e:	0052      	lsls	r2, r2, #1
 801d590:	4413      	add	r3, r2
 801d592:	b29b      	uxth	r3, r3
 801d594:	4423      	add	r3, r4
 801d596:	b29b      	uxth	r3, r3
 801d598:	b21b      	sxth	r3, r3
 801d59a:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y;
 801d59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d59e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d5a2:	82fb      	strh	r3, [r7, #22]

                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5a6:	681c      	ldr	r4, [r3, #0]
 801d5a8:	68f8      	ldr	r0, [r7, #12]
 801d5aa:	f7ff fe73 	bl	801d294 <lv_label_get_text_sel_start>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	461d      	mov	r5, r3
 801d5b2:	68f8      	ldr	r0, [r7, #12]
 801d5b4:	f7ff fe7a 	bl	801d2ac <lv_label_get_text_sel_end>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	4619      	mov	r1, r3
 801d5bc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801d5c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	9305      	str	r3, [sp, #20]
 801d5c8:	9104      	str	r1, [sp, #16]
 801d5ca:	9503      	str	r5, [sp, #12]
 801d5cc:	f107 0314 	add.w	r3, r7, #20
 801d5d0:	9302      	str	r3, [sp, #8]
 801d5d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d5d6:	9301      	str	r3, [sp, #4]
 801d5d8:	9400      	str	r4, [sp, #0]
 801d5da:	4613      	mov	r3, r2
 801d5dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d5de:	68b9      	ldr	r1, [r7, #8]
 801d5e0:	f7f0 fb0e 	bl	800dc00 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }

            /*Draw the text again below the original to make an circular effect */
            if(size.y > lv_obj_get_height(label)) {
 801d5e4:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 801d5e8:	68f8      	ldr	r0, [r7, #12]
 801d5ea:	f7ed f811 	bl	800a610 <lv_obj_get_height>
 801d5ee:	4603      	mov	r3, r0
 801d5f0:	429c      	cmp	r4, r3
 801d5f2:	dd37      	ble.n	801d664 <lv_label_design+0x3a0>
                ofs.x = ext->offset.x;
 801d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801d5fa:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 801d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d602:	b29a      	uxth	r2, r3
 801d604:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d608:	b29b      	uxth	r3, r3
 801d60a:	4413      	add	r3, r2
 801d60c:	b29c      	uxth	r4, r3
 801d60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d612:	4618      	mov	r0, r3
 801d614:	f7ff f9c4 	bl	801c9a0 <lv_font_get_line_height>
 801d618:	4603      	mov	r3, r0
 801d61a:	b29b      	uxth	r3, r3
 801d61c:	4423      	add	r3, r4
 801d61e:	b29b      	uxth	r3, r3
 801d620:	b21b      	sxth	r3, r3
 801d622:	82fb      	strh	r3, [r7, #22]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d626:	681c      	ldr	r4, [r3, #0]
 801d628:	68f8      	ldr	r0, [r7, #12]
 801d62a:	f7ff fe33 	bl	801d294 <lv_label_get_text_sel_start>
 801d62e:	4603      	mov	r3, r0
 801d630:	461d      	mov	r5, r3
 801d632:	68f8      	ldr	r0, [r7, #12]
 801d634:	f7ff fe3a 	bl	801d2ac <lv_label_get_text_sel_end>
 801d638:	4603      	mov	r3, r0
 801d63a:	4619      	mov	r1, r3
 801d63c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801d640:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801d644:	2300      	movs	r3, #0
 801d646:	9305      	str	r3, [sp, #20]
 801d648:	9104      	str	r1, [sp, #16]
 801d64a:	9503      	str	r5, [sp, #12]
 801d64c:	f107 0314 	add.w	r3, r7, #20
 801d650:	9302      	str	r3, [sp, #8]
 801d652:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d656:	9301      	str	r3, [sp, #4]
 801d658:	9400      	str	r4, [sp, #0]
 801d65a:	4613      	mov	r3, r2
 801d65c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d65e:	68b9      	ldr	r1, [r7, #8]
 801d660:	f7f0 face 	bl	800dc00 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }
        }
    }
    return true;
 801d664:	2301      	movs	r3, #1
}
 801d666:	4618      	mov	r0, r3
 801d668:	374c      	adds	r7, #76	; 0x4c
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801d670 <lv_label_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)
{
 801d670:	b590      	push	{r4, r7, lr}
 801d672:	b089      	sub	sp, #36	; 0x24
 801d674:	af00      	add	r7, sp, #0
 801d676:	60f8      	str	r0, [r7, #12]
 801d678:	460b      	mov	r3, r1
 801d67a:	607a      	str	r2, [r7, #4]
 801d67c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(label, sign, param);
 801d67e:	4b5a      	ldr	r3, [pc, #360]	; (801d7e8 <lv_label_signal+0x178>)
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	7af9      	ldrb	r1, [r7, #11]
 801d684:	687a      	ldr	r2, [r7, #4]
 801d686:	68f8      	ldr	r0, [r7, #12]
 801d688:	4798      	blx	r3
 801d68a:	4603      	mov	r3, r0
 801d68c:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801d68e:	7fbb      	ldrb	r3, [r7, #30]
 801d690:	2b01      	cmp	r3, #1
 801d692:	d001      	beq.n	801d698 <lv_label_signal+0x28>
 801d694:	7fbb      	ldrb	r3, [r7, #30]
 801d696:	e0a3      	b.n	801d7e0 <lv_label_signal+0x170>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d698:	68f8      	ldr	r0, [r7, #12]
 801d69a:	f7ed f896 	bl	800a7ca <lv_obj_get_ext_attr>
 801d69e:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801d6a0:	7afb      	ldrb	r3, [r7, #11]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d112      	bne.n	801d6cc <lv_label_signal+0x5c>
        if(ext->static_txt == 0) {
 801d6a6:	69bb      	ldr	r3, [r7, #24]
 801d6a8:	7f9b      	ldrb	r3, [r3, #30]
 801d6aa:	f003 0308 	and.w	r3, r3, #8
 801d6ae:	b2db      	uxtb	r3, r3
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d107      	bne.n	801d6c4 <lv_label_signal+0x54>
            lv_mem_free(ext->text);
 801d6b4:	69bb      	ldr	r3, [r7, #24]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	f7f9 fc67 	bl	8016f8c <lv_mem_free>
            ext->text = NULL;
 801d6be:	69bb      	ldr	r3, [r7, #24]
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	601a      	str	r2, [r3, #0]
        }
        lv_label_dot_tmp_free(label);
 801d6c4:	68f8      	ldr	r0, [r7, #12]
 801d6c6:	f000 fc16 	bl	801def6 <lv_label_dot_tmp_free>
 801d6ca:	e088      	b.n	801d7de <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801d6cc:	7afb      	ldrb	r3, [r7, #11]
 801d6ce:	2b04      	cmp	r3, #4
 801d6d0:	d106      	bne.n	801d6e0 <lv_label_signal+0x70>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(label);
 801d6d2:	68f8      	ldr	r0, [r7, #12]
 801d6d4:	f000 fb32 	bl	801dd3c <lv_label_revert_dots>

        lv_label_refr_text(label);
 801d6d8:	68f8      	ldr	r0, [r7, #12]
 801d6da:	f000 f889 	bl	801d7f0 <lv_label_refr_text>
 801d6de:	e07e      	b.n	801d7de <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801d6e0:	7afb      	ldrb	r3, [r7, #11]
 801d6e2:	2b02      	cmp	r3, #2
 801d6e4:	d120      	bne.n	801d728 <lv_label_signal+0xb8>
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	3310      	adds	r3, #16
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7ff f964 	bl	801c9b8 <lv_area_get_width>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	461c      	mov	r4, r3
 801d6f4:	6878      	ldr	r0, [r7, #4]
 801d6f6:	f7ff f95f 	bl	801c9b8 <lv_area_get_width>
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	429c      	cmp	r4, r3
 801d6fe:	d10c      	bne.n	801d71a <lv_label_signal+0xaa>
           lv_area_get_height(&label->coords) != lv_area_get_height(param)) {
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	3310      	adds	r3, #16
 801d704:	4618      	mov	r0, r3
 801d706:	f7ff f96e 	bl	801c9e6 <lv_area_get_height>
 801d70a:	4603      	mov	r3, r0
 801d70c:	461c      	mov	r4, r3
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f7ff f969 	bl	801c9e6 <lv_area_get_height>
 801d714:	4603      	mov	r3, r0
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801d716:	429c      	cmp	r4, r3
 801d718:	d061      	beq.n	801d7de <lv_label_signal+0x16e>
            lv_label_revert_dots(label);
 801d71a:	68f8      	ldr	r0, [r7, #12]
 801d71c:	f000 fb0e 	bl	801dd3c <lv_label_revert_dots>
            lv_label_refr_text(label);
 801d720:	68f8      	ldr	r0, [r7, #12]
 801d722:	f000 f865 	bl	801d7f0 <lv_label_refr_text>
 801d726:	e05a      	b.n	801d7de <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801d728:	7afb      	ldrb	r3, [r7, #11]
 801d72a:	2b05      	cmp	r3, #5
 801d72c:	d13c      	bne.n	801d7a8 <lv_label_signal+0x138>
        if(ext->body_draw) {
 801d72e:	69bb      	ldr	r3, [r7, #24]
 801d730:	7fdb      	ldrb	r3, [r3, #31]
 801d732:	f003 0301 	and.w	r3, r3, #1
 801d736:	b2db      	uxtb	r3, r3
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d050      	beq.n	801d7de <lv_label_signal+0x16e>
            const lv_style_t * style = lv_label_get_style(label, LV_LABEL_STYLE_MAIN);
 801d73c:	2100      	movs	r1, #0
 801d73e:	68f8      	ldr	r0, [r7, #12]
 801d740:	f7ff f977 	bl	801ca32 <lv_label_get_style>
 801d744:	6138      	str	r0, [r7, #16]

            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.left);
 801d746:	693b      	ldr	r3, [r7, #16]
 801d748:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801d752:	4293      	cmp	r3, r2
 801d754:	bfb8      	it	lt
 801d756:	4613      	movlt	r3, r2
 801d758:	b21a      	sxth	r2, r3
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 801d75e:	693b      	ldr	r3, [r7, #16]
 801d760:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801d76a:	4293      	cmp	r3, r2
 801d76c:	bfb8      	it	lt
 801d76e:	4613      	movlt	r3, r2
 801d770:	b21a      	sxth	r2, r3
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 801d776:	693b      	ldr	r3, [r7, #16]
 801d778:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801d782:	4293      	cmp	r3, r2
 801d784:	bfb8      	it	lt
 801d786:	4613      	movlt	r3, r2
 801d788:	b21a      	sxth	r2, r3
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 801d78e:	693b      	ldr	r3, [r7, #16]
 801d790:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801d79a:	4293      	cmp	r3, r2
 801d79c:	bfb8      	it	lt
 801d79e:	4613      	movlt	r3, r2
 801d7a0:	b21a      	sxth	r2, r3
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	869a      	strh	r2, [r3, #52]	; 0x34
 801d7a6:	e01a      	b.n	801d7de <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801d7a8:	7afb      	ldrb	r3, [r7, #11]
 801d7aa:	2b06      	cmp	r3, #6
 801d7ac:	d117      	bne.n	801d7de <lv_label_signal+0x16e>
        lv_obj_type_t * buf = param;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	77fb      	strb	r3, [r7, #31]
 801d7b6:	e008      	b.n	801d7ca <lv_label_signal+0x15a>
            if(buf->type[i] == NULL) break;
 801d7b8:	7ffa      	ldrb	r2, [r7, #31]
 801d7ba:	697b      	ldr	r3, [r7, #20]
 801d7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d006      	beq.n	801d7d2 <lv_label_signal+0x162>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801d7c4:	7ffb      	ldrb	r3, [r7, #31]
 801d7c6:	3301      	adds	r3, #1
 801d7c8:	77fb      	strb	r3, [r7, #31]
 801d7ca:	7ffb      	ldrb	r3, [r7, #31]
 801d7cc:	2b06      	cmp	r3, #6
 801d7ce:	d9f3      	bls.n	801d7b8 <lv_label_signal+0x148>
 801d7d0:	e000      	b.n	801d7d4 <lv_label_signal+0x164>
            if(buf->type[i] == NULL) break;
 801d7d2:	bf00      	nop
        }
        buf->type[i] = "lv_label";
 801d7d4:	7ffa      	ldrb	r2, [r7, #31]
 801d7d6:	697b      	ldr	r3, [r7, #20]
 801d7d8:	4904      	ldr	r1, [pc, #16]	; (801d7ec <lv_label_signal+0x17c>)
 801d7da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801d7de:	7fbb      	ldrb	r3, [r7, #30]
}
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	3724      	adds	r7, #36	; 0x24
 801d7e4:	46bd      	mov	sp, r7
 801d7e6:	bd90      	pop	{r4, r7, pc}
 801d7e8:	200177d8 	.word	0x200177d8
 801d7ec:	0802d4f0 	.word	0x0802d4f0

0801d7f0 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * label)
{
 801d7f0:	b590      	push	{r4, r7, lr}
 801d7f2:	b09d      	sub	sp, #116	; 0x74
 801d7f4:	af04      	add	r7, sp, #16
 801d7f6:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d7f8:	6878      	ldr	r0, [r7, #4]
 801d7fa:	f7ec ffe6 	bl	800a7ca <lv_obj_get_ext_attr>
 801d7fe:	64f8      	str	r0, [r7, #76]	; 0x4c

    if(ext->text == NULL) return;
 801d800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	2b00      	cmp	r3, #0
 801d806:	f000 828f 	beq.w	801dd28 <lv_label_refr_text+0x538>

    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d80c:	f04f 32ff 	mov.w	r2, #4294967295
 801d810:	611a      	str	r2, [r3, #16]

    lv_coord_t max_w         = lv_obj_get_width(label);
 801d812:	6878      	ldr	r0, [r7, #4]
 801d814:	f7ec feee 	bl	800a5f4 <lv_obj_get_width>
 801d818:	4603      	mov	r3, r0
 801d81a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    const lv_style_t * style = lv_obj_get_style(label);
 801d81e:	6878      	ldr	r0, [r7, #4]
 801d820:	f7ec ff18 	bl	800a654 <lv_obj_get_style>
 801d824:	64b8      	str	r0, [r7, #72]	; 0x48
    const lv_font_t * font   = style->text.font;
 801d826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d82a:	647b      	str	r3, [r7, #68]	; 0x44

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801d82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d82e:	7f9b      	ldrb	r3, [r3, #30]
 801d830:	f003 0307 	and.w	r3, r3, #7
 801d834:	b2db      	uxtb	r3, r3
 801d836:	2b00      	cmp	r3, #0
 801d838:	d103      	bne.n	801d842 <lv_label_refr_text+0x52>
        max_w = LV_COORD_MAX;
 801d83a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801d83e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    }

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801d842:	2300      	movs	r3, #0
 801d844:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801d848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d84a:	7f9b      	ldrb	r3, [r3, #30]
 801d84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d850:	b2db      	uxtb	r3, r3
 801d852:	2b00      	cmp	r3, #0
 801d854:	d005      	beq.n	801d862 <lv_label_refr_text+0x72>
 801d856:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801d85a:	f043 0301 	orr.w	r3, r3, #1
 801d85e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801d862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d864:	7f9b      	ldrb	r3, [r3, #30]
 801d866:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d86a:	b2db      	uxtb	r3, r3
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d005      	beq.n	801d87c <lv_label_refr_text+0x8c>
 801d870:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801d874:	f043 0302 	orr.w	r3, r3, #2
 801d878:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801d87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d87e:	6819      	ldr	r1, [r3, #0]
 801d880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d882:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801d886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d888:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d88c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801d890:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 801d894:	9202      	str	r2, [sp, #8]
 801d896:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801d89a:	9201      	str	r2, [sp, #4]
 801d89c:	9300      	str	r3, [sp, #0]
 801d89e:	4623      	mov	r3, r4
 801d8a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d8a2:	f7f9 fe7f 	bl	80175a4 <lv_txt_get_size>

    /*Set the full size in expand mode*/
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801d8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8a8:	7f9b      	ldrb	r3, [r3, #30]
 801d8aa:	f003 0307 	and.w	r3, r3, #7
 801d8ae:	b2db      	uxtb	r3, r3
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d108      	bne.n	801d8c6 <lv_label_refr_text+0xd6>
        lv_obj_set_size(label, size.x, size.y);
 801d8b4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d8b8:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801d8bc:	4619      	mov	r1, r3
 801d8be:	6878      	ldr	r0, [r7, #4]
 801d8c0:	f7eb ff0b 	bl	80096da <lv_obj_set_size>
 801d8c4:	e22c      	b.n	801dd20 <lv_label_refr_text+0x530>
    }
    /*In roll mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801d8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8c8:	7f9b      	ldrb	r3, [r3, #30]
 801d8ca:	f003 0307 	and.w	r3, r3, #7
 801d8ce:	b2db      	uxtb	r3, r3
 801d8d0:	2b03      	cmp	r3, #3
 801d8d2:	f040 809f 	bne.w	801da14 <lv_label_refr_text+0x224>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801d8da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d8de:	f043 0302 	orr.w	r3, r3, #2
 801d8e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 1;
 801d8e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d8ea:	f043 0301 	orr.w	r3, r3, #1
 801d8ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	61bb      	str	r3, [r7, #24]
        anim.ready_cb = NULL;
 801d8f6:	2300      	movs	r3, #0
 801d8f8:	617b      	str	r3, [r7, #20]
        anim.path_cb  = lv_anim_path_linear;
 801d8fa:	4baa      	ldr	r3, [pc, #680]	; (801dba4 <lv_label_refr_text+0x3b4>)
 801d8fc:	613b      	str	r3, [r7, #16]
        anim.playback_pause =
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801d8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d902:	2220      	movs	r2, #32
 801d904:	2120      	movs	r1, #32
 801d906:	4618      	mov	r0, r3
 801d908:	f7f7 fd18 	bl	801533c <lv_font_get_glyph_width>
 801d90c:	4603      	mov	r3, r0
 801d90e:	461a      	mov	r2, r3
 801d910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d912:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801d916:	4413      	add	r3, r2
 801d918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d91c:	fb02 f303 	mul.w	r3, r2, r3
             ext->anim_speed) *
 801d920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d922:	8b92      	ldrh	r2, [r2, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801d924:	fb93 f3f2 	sdiv	r3, r3, r2
        anim.playback_pause =
 801d928:	b29b      	uxth	r3, r3
 801d92a:	461a      	mov	r2, r3
 801d92c:	0052      	lsls	r2, r2, #1
 801d92e:	4413      	add	r3, r2
 801d930:	b29b      	uxth	r3, r3
 801d932:	84bb      	strh	r3, [r7, #36]	; 0x24
            LV_LABEL_WAIT_CHAR_COUNT;
        anim.repeat_pause = anim.playback_pause;
 801d934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d936:	84fb      	strh	r3, [r7, #38]	; 0x26
        anim.act_time     = -anim.playback_pause;
 801d938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d93a:	425b      	negs	r3, r3
 801d93c:	b29b      	uxth	r3, r3
 801d93e:	b21b      	sxth	r3, r3
 801d940:	847b      	strh	r3, [r7, #34]	; 0x22

        bool hor_anim = false;
 801d942:	2300      	movs	r3, #0
 801d944:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if(size.x > lv_obj_get_width(label)) {
 801d948:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801d94c:	6878      	ldr	r0, [r7, #4]
 801d94e:	f7ec fe51 	bl	800a5f4 <lv_obj_get_width>
 801d952:	4603      	mov	r3, r0
 801d954:	429c      	cmp	r4, r3
 801d956:	dd1e      	ble.n	801d996 <lv_label_refr_text+0x1a6>
            anim.end     = lv_obj_get_width(label) - size.x;
 801d958:	6878      	ldr	r0, [r7, #4]
 801d95a:	f7ec fe4b 	bl	800a5f4 <lv_obj_get_width>
 801d95e:	4603      	mov	r3, r0
 801d960:	461a      	mov	r2, r3
 801d962:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d966:	1ad3      	subs	r3, r2, r3
 801d968:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801d96a:	4b8f      	ldr	r3, [pc, #572]	; (801dba8 <lv_label_refr_text+0x3b8>)
 801d96c:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801d96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d970:	8b9b      	ldrh	r3, [r3, #28]
 801d972:	69ba      	ldr	r2, [r7, #24]
 801d974:	b211      	sxth	r1, r2
 801d976:	69fa      	ldr	r2, [r7, #28]
 801d978:	b212      	sxth	r2, r2
 801d97a:	4618      	mov	r0, r3
 801d97c:	f7f8 fa68 	bl	8015e50 <lv_anim_speed_to_time>
 801d980:	4603      	mov	r3, r0
 801d982:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801d984:	f107 0308 	add.w	r3, r7, #8
 801d988:	4618      	mov	r0, r3
 801d98a:	f7f8 f9e9 	bl	8015d60 <lv_anim_create>
            hor_anim = true;
 801d98e:	2301      	movs	r3, #1
 801d990:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801d994:	e006      	b.n	801d9a4 <lv_label_refr_text+0x1b4>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d996:	4984      	ldr	r1, [pc, #528]	; (801dba8 <lv_label_refr_text+0x3b8>)
 801d998:	6878      	ldr	r0, [r7, #4]
 801d99a:	f7f8 fa21 	bl	8015de0 <lv_anim_del>
            ext->offset.x = 0;
 801d99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801d9a4:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801d9a8:	6878      	ldr	r0, [r7, #4]
 801d9aa:	f7ec fe31 	bl	800a610 <lv_obj_get_height>
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	429c      	cmp	r4, r3
 801d9b2:	dd27      	ble.n	801da04 <lv_label_refr_text+0x214>
 801d9b4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801d9b8:	f083 0301 	eor.w	r3, r3, #1
 801d9bc:	b2db      	uxtb	r3, r3
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d020      	beq.n	801da04 <lv_label_refr_text+0x214>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 801d9c2:	6878      	ldr	r0, [r7, #4]
 801d9c4:	f7ec fe24 	bl	800a610 <lv_obj_get_height>
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	461a      	mov	r2, r3
 801d9cc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d9d0:	1ad4      	subs	r4, r2, r3
 801d9d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d9d4:	f7fe ffe4 	bl	801c9a0 <lv_font_get_line_height>
 801d9d8:	4603      	mov	r3, r0
 801d9da:	1ae3      	subs	r3, r4, r3
 801d9dc:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801d9de:	4b73      	ldr	r3, [pc, #460]	; (801dbac <lv_label_refr_text+0x3bc>)
 801d9e0:	60fb      	str	r3, [r7, #12]

            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801d9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9e4:	8b9b      	ldrh	r3, [r3, #28]
 801d9e6:	69ba      	ldr	r2, [r7, #24]
 801d9e8:	b211      	sxth	r1, r2
 801d9ea:	69fa      	ldr	r2, [r7, #28]
 801d9ec:	b212      	sxth	r2, r2
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	f7f8 fa2e 	bl	8015e50 <lv_anim_speed_to_time>
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801d9f8:	f107 0308 	add.w	r3, r7, #8
 801d9fc:	4618      	mov	r0, r3
 801d9fe:	f7f8 f9af 	bl	8015d60 <lv_anim_create>
 801da02:	e18d      	b.n	801dd20 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801da04:	4969      	ldr	r1, [pc, #420]	; (801dbac <lv_label_refr_text+0x3bc>)
 801da06:	6878      	ldr	r0, [r7, #4]
 801da08:	f7f8 f9ea 	bl	8015de0 <lv_anim_del>
            ext->offset.y = 0;
 801da0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da0e:	2200      	movs	r2, #0
 801da10:	819a      	strh	r2, [r3, #12]
 801da12:	e185      	b.n	801dd20 <lv_label_refr_text+0x530>
        }
#endif
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801da14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da16:	7f9b      	ldrb	r3, [r3, #30]
 801da18:	f003 0307 	and.w	r3, r3, #7
 801da1c:	b2db      	uxtb	r3, r3
 801da1e:	2b04      	cmp	r3, #4
 801da20:	f040 809c 	bne.w	801db5c <lv_label_refr_text+0x36c>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801da28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801da2c:	f043 0302 	orr.w	r3, r3, #2
 801da30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 0;
 801da34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801da38:	f36f 0300 	bfc	r3, #0, #1
 801da3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801da40:	2300      	movs	r3, #0
 801da42:	61bb      	str	r3, [r7, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801da44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da48:	2220      	movs	r2, #32
 801da4a:	2120      	movs	r1, #32
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7f7 fc75 	bl	801533c <lv_font_get_glyph_width>
 801da52:	4603      	mov	r3, r0
 801da54:	461a      	mov	r2, r3
 801da56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da58:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801da5c:	4413      	add	r3, r2
 801da5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801da62:	fb02 f303 	mul.w	r3, r2, r3
                          ext->anim_speed) *
 801da66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801da68:	8b92      	ldrh	r2, [r2, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801da6a:	fb93 f3f2 	sdiv	r3, r3, r2
 801da6e:	b29b      	uxth	r3, r3
 801da70:	461a      	mov	r2, r3
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	1ad3      	subs	r3, r2, r3
 801da76:	b29b      	uxth	r3, r3
 801da78:	b21b      	sxth	r3, r3
 801da7a:	847b      	strh	r3, [r7, #34]	; 0x22
                        LV_LABEL_WAIT_CHAR_COUNT;
        anim.ready_cb       = NULL;
 801da7c:	2300      	movs	r3, #0
 801da7e:	617b      	str	r3, [r7, #20]
        anim.path_cb        = lv_anim_path_linear;
 801da80:	4b48      	ldr	r3, [pc, #288]	; (801dba4 <lv_label_refr_text+0x3b4>)
 801da82:	613b      	str	r3, [r7, #16]
        anim.playback_pause = 0;
 801da84:	2300      	movs	r3, #0
 801da86:	84bb      	strh	r3, [r7, #36]	; 0x24
        anim.repeat_pause   = 0;
 801da88:	2300      	movs	r3, #0
 801da8a:	84fb      	strh	r3, [r7, #38]	; 0x26

        bool hor_anim = false;
 801da8c:	2300      	movs	r3, #0
 801da8e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if(size.x > lv_obj_get_width(label)) {
 801da92:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801da96:	6878      	ldr	r0, [r7, #4]
 801da98:	f7ec fdac 	bl	800a5f4 <lv_obj_get_width>
 801da9c:	4603      	mov	r3, r0
 801da9e:	429c      	cmp	r4, r3
 801daa0:	dd22      	ble.n	801dae8 <lv_label_refr_text+0x2f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801daa2:	2220      	movs	r2, #32
 801daa4:	2120      	movs	r1, #32
 801daa6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801daa8:	f7f7 fc48 	bl	801533c <lv_font_get_glyph_width>
 801daac:	4603      	mov	r3, r0
 801daae:	461a      	mov	r2, r3
 801dab0:	009b      	lsls	r3, r3, #2
 801dab2:	1ad3      	subs	r3, r2, r3
 801dab4:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801dab8:	1a9b      	subs	r3, r3, r2
 801daba:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801dabc:	4b3a      	ldr	r3, [pc, #232]	; (801dba8 <lv_label_refr_text+0x3b8>)
 801dabe:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801dac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dac2:	8b9b      	ldrh	r3, [r3, #28]
 801dac4:	69ba      	ldr	r2, [r7, #24]
 801dac6:	b211      	sxth	r1, r2
 801dac8:	69fa      	ldr	r2, [r7, #28]
 801daca:	b212      	sxth	r2, r2
 801dacc:	4618      	mov	r0, r3
 801dace:	f7f8 f9bf 	bl	8015e50 <lv_anim_speed_to_time>
 801dad2:	4603      	mov	r3, r0
 801dad4:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801dad6:	f107 0308 	add.w	r3, r7, #8
 801dada:	4618      	mov	r0, r3
 801dadc:	f7f8 f940 	bl	8015d60 <lv_anim_create>
            hor_anim = true;
 801dae0:	2301      	movs	r3, #1
 801dae2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801dae6:	e006      	b.n	801daf6 <lv_label_refr_text+0x306>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801dae8:	492f      	ldr	r1, [pc, #188]	; (801dba8 <lv_label_refr_text+0x3b8>)
 801daea:	6878      	ldr	r0, [r7, #4]
 801daec:	f7f8 f978 	bl	8015de0 <lv_anim_del>
            ext->offset.x = 0;
 801daf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801daf2:	2200      	movs	r2, #0
 801daf4:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801daf6:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801dafa:	6878      	ldr	r0, [r7, #4]
 801dafc:	f7ec fd88 	bl	800a610 <lv_obj_get_height>
 801db00:	4603      	mov	r3, r0
 801db02:	429c      	cmp	r4, r3
 801db04:	dd22      	ble.n	801db4c <lv_label_refr_text+0x35c>
 801db06:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801db0a:	f083 0301 	eor.w	r3, r3, #1
 801db0e:	b2db      	uxtb	r3, r3
 801db10:	2b00      	cmp	r3, #0
 801db12:	d01b      	beq.n	801db4c <lv_label_refr_text+0x35c>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 801db14:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801db18:	425c      	negs	r4, r3
 801db1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801db1c:	f7fe ff40 	bl	801c9a0 <lv_font_get_line_height>
 801db20:	4603      	mov	r3, r0
 801db22:	1ae3      	subs	r3, r4, r3
 801db24:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801db26:	4b21      	ldr	r3, [pc, #132]	; (801dbac <lv_label_refr_text+0x3bc>)
 801db28:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801db2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db2c:	8b9b      	ldrh	r3, [r3, #28]
 801db2e:	69ba      	ldr	r2, [r7, #24]
 801db30:	b211      	sxth	r1, r2
 801db32:	69fa      	ldr	r2, [r7, #28]
 801db34:	b212      	sxth	r2, r2
 801db36:	4618      	mov	r0, r3
 801db38:	f7f8 f98a 	bl	8015e50 <lv_anim_speed_to_time>
 801db3c:	4603      	mov	r3, r0
 801db3e:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801db40:	f107 0308 	add.w	r3, r7, #8
 801db44:	4618      	mov	r0, r3
 801db46:	f7f8 f90b 	bl	8015d60 <lv_anim_create>
 801db4a:	e0e9      	b.n	801dd20 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801db4c:	4917      	ldr	r1, [pc, #92]	; (801dbac <lv_label_refr_text+0x3bc>)
 801db4e:	6878      	ldr	r0, [r7, #4]
 801db50:	f7f8 f946 	bl	8015de0 <lv_anim_del>
            ext->offset.y = 0;
 801db54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db56:	2200      	movs	r2, #0
 801db58:	819a      	strh	r2, [r3, #12]
 801db5a:	e0e1      	b.n	801dd20 <lv_label_refr_text+0x530>
        }
#endif
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801db5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db5e:	7f9b      	ldrb	r3, [r3, #30]
 801db60:	f003 0307 	and.w	r3, r3, #7
 801db64:	b2db      	uxtb	r3, r3
 801db66:	2b02      	cmp	r3, #2
 801db68:	f040 80cd 	bne.w	801dd06 <lv_label_refr_text+0x516>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 801db6c:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801db70:	6878      	ldr	r0, [r7, #4]
 801db72:	f7ec fd4d 	bl	800a610 <lv_obj_get_height>
 801db76:	4603      	mov	r3, r0
 801db78:	429c      	cmp	r4, r3
 801db7a:	dc04      	bgt.n	801db86 <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801db7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db82:	811a      	strh	r2, [r3, #8]
 801db84:	e0cc      	b.n	801dd20 <lv_label_refr_text+0x530>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 801db86:	4b0a      	ldr	r3, [pc, #40]	; (801dbb0 <lv_label_refr_text+0x3c0>)
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801db8c:	6812      	ldr	r2, [r2, #0]
 801db8e:	4610      	mov	r0, r2
 801db90:	4798      	blx	r3
 801db92:	4603      	mov	r3, r0
 801db94:	2b03      	cmp	r3, #3
 801db96:	d80d      	bhi.n	801dbb4 <lv_label_refr_text+0x3c4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801db98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db9e:	811a      	strh	r2, [r3, #8]
 801dba0:	e0be      	b.n	801dd20 <lv_label_refr_text+0x530>
 801dba2:	bf00      	nop
 801dba4:	08015eb1 	.word	0x08015eb1
 801dba8:	0801ddf1 	.word	0x0801ddf1
 801dbac:	0801de19 	.word	0x0801de19
 801dbb0:	200027b0 	.word	0x200027b0
        } else {
            lv_point_t p;
            p.x = lv_obj_get_width(label) -
 801dbb4:	6878      	ldr	r0, [r7, #4]
 801dbb6:	f7ec fd1d 	bl	800a5f4 <lv_obj_get_width>
 801dbba:	4603      	mov	r3, r0
 801dbbc:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 801dbbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbc2:	222e      	movs	r2, #46	; 0x2e
 801dbc4:	212e      	movs	r1, #46	; 0x2e
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7f7 fbb8 	bl	801533c <lv_font_get_glyph_width>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	461a      	mov	r2, r3
 801dbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbd2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801dbd6:	4413      	add	r3, r2
            p.x = lv_obj_get_width(label) -
 801dbd8:	b29b      	uxth	r3, r3
 801dbda:	461a      	mov	r2, r3
 801dbdc:	009b      	lsls	r3, r3, #2
 801dbde:	1ad3      	subs	r3, r2, r3
 801dbe0:	b29b      	uxth	r3, r3
 801dbe2:	4423      	add	r3, r4
 801dbe4:	b29b      	uxth	r3, r3
 801dbe6:	b21b      	sxth	r3, r3
 801dbe8:	86bb      	strh	r3, [r7, #52]	; 0x34
                      LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_obj_get_height(label);
 801dbea:	6878      	ldr	r0, [r7, #4]
 801dbec:	f7ec fd10 	bl	800a610 <lv_obj_get_height>
 801dbf0:	4603      	mov	r3, r0
 801dbf2:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= p.y %
 801dbf4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801dbf8:	461c      	mov	r4, r3
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 801dbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbfe:	4618      	mov	r0, r3
 801dc00:	f7fe fece 	bl	801c9a0 <lv_font_get_line_height>
 801dc04:	4603      	mov	r3, r0
 801dc06:	461a      	mov	r2, r3
 801dc08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc0a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801dc0e:	4413      	add	r3, r2
            p.y -= p.y %
 801dc10:	fb94 f2f3 	sdiv	r2, r4, r3
 801dc14:	fb03 f302 	mul.w	r3, r3, r2
 801dc18:	1ae3      	subs	r3, r4, r3
 801dc1a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801dc1e:	b292      	uxth	r2, r2
 801dc20:	b29b      	uxth	r3, r3
 801dc22:	1ad3      	subs	r3, r2, r3
 801dc24:	b29b      	uxth	r3, r3
 801dc26:	b21b      	sxth	r3, r3
 801dc28:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 801dc2a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801dc2e:	b29a      	uxth	r2, r3
 801dc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc32:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801dc36:	b29b      	uxth	r3, r3
 801dc38:	1ad3      	subs	r3, r2, r3
 801dc3a:	b29b      	uxth	r3, r3
 801dc3c:	b21b      	sxth	r3, r3
 801dc3e:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801dc40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801dc44:	4619      	mov	r1, r3
 801dc46:	6878      	ldr	r0, [r7, #4]
 801dc48:	f7ff fa00 	bl	801d04c <lv_label_get_letter_on>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	643b      	str	r3, [r7, #64]	; 0x40

            /*Save letters under the dots and replace them with dots*/
            uint32_t i;
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801dc50:	4b37      	ldr	r3, [pc, #220]	; (801dd30 <lv_label_refr_text+0x540>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dc56:	6812      	ldr	r2, [r2, #0]
 801dc58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801dc5a:	4610      	mov	r0, r2
 801dc5c:	4798      	blx	r3
 801dc5e:	4603      	mov	r3, r0
 801dc60:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t byte_id_ori = byte_id;
 801dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc64:	63fb      	str	r3, [r7, #60]	; 0x3c
            uint8_t len          = 0;
 801dc66:	2300      	movs	r3, #0
 801dc68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	657b      	str	r3, [r7, #84]	; 0x54
 801dc70:	e019      	b.n	801dca6 <lv_label_refr_text+0x4b6>
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801dc72:	4b30      	ldr	r3, [pc, #192]	; (801dd34 <lv_label_refr_text+0x544>)
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dc78:	6811      	ldr	r1, [r2, #0]
 801dc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc7c:	440a      	add	r2, r1
 801dc7e:	4610      	mov	r0, r2
 801dc80:	4798      	blx	r3
 801dc82:	4603      	mov	r3, r0
 801dc84:	461a      	mov	r2, r3
 801dc86:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801dc8a:	4413      	add	r3, r2
 801dc8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                lv_txt_encoded_next(ext->text, &byte_id);
 801dc90:	4b29      	ldr	r3, [pc, #164]	; (801dd38 <lv_label_refr_text+0x548>)
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dc96:	6812      	ldr	r2, [r2, #0]
 801dc98:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801dc9c:	4610      	mov	r0, r2
 801dc9e:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801dca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dca2:	3301      	adds	r3, #1
 801dca4:	657b      	str	r3, [r7, #84]	; 0x54
 801dca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dca8:	2b03      	cmp	r3, #3
 801dcaa:	d9e2      	bls.n	801dc72 <lv_label_refr_text+0x482>
            }

            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 801dcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcae:	681a      	ldr	r2, [r3, #0]
 801dcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcb2:	4413      	add	r3, r2
 801dcb4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801dcb8:	b292      	uxth	r2, r2
 801dcba:	4619      	mov	r1, r3
 801dcbc:	6878      	ldr	r0, [r7, #4]
 801dcbe:	f000 f8bf 	bl	801de40 <lv_label_set_dot_tmp>
 801dcc2:	4603      	mov	r3, r0
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d02b      	beq.n	801dd20 <lv_label_refr_text+0x530>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801dcc8:	2300      	movs	r3, #0
 801dcca:	657b      	str	r3, [r7, #84]	; 0x54
 801dccc:	e00a      	b.n	801dce4 <lv_label_refr_text+0x4f4>
                    ext->text[byte_id_ori + i] = '.';
 801dcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcd0:	681a      	ldr	r2, [r3, #0]
 801dcd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dcd6:	440b      	add	r3, r1
 801dcd8:	4413      	add	r3, r2
 801dcda:	222e      	movs	r2, #46	; 0x2e
 801dcdc:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801dcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dce0:	3301      	adds	r3, #1
 801dce2:	657b      	str	r3, [r7, #84]	; 0x54
 801dce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dce6:	2b02      	cmp	r3, #2
 801dce8:	d9f1      	bls.n	801dcce <lv_label_refr_text+0x4de>
                }
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801dcea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcec:	681a      	ldr	r2, [r3, #0]
 801dcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcf0:	3303      	adds	r3, #3
 801dcf2:	4413      	add	r3, r2
 801dcf4:	2200      	movs	r2, #0
 801dcf6:	701a      	strb	r2, [r3, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801dcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	3303      	adds	r3, #3
 801dcfe:	b29a      	uxth	r2, r3
 801dd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd02:	811a      	strh	r2, [r3, #8]
 801dd04:	e00c      	b.n	801dd20 <lv_label_refr_text+0x530>
            }
        }
    }
    /*In break mode only the height can change*/
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 801dd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd08:	7f9b      	ldrb	r3, [r3, #30]
 801dd0a:	f003 0307 	and.w	r3, r3, #7
 801dd0e:	b2db      	uxtb	r3, r3
 801dd10:	2b01      	cmp	r3, #1
 801dd12:	d105      	bne.n	801dd20 <lv_label_refr_text+0x530>
        lv_obj_set_height(label, size.y);
 801dd14:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801dd18:	4619      	mov	r1, r3
 801dd1a:	6878      	ldr	r0, [r7, #4]
 801dd1c:	f7eb fd6b 	bl	80097f6 <lv_obj_set_height>
    /*Do not set the size in Clip mode*/
    else if(ext->long_mode == LV_LABEL_LONG_CROP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(label);
 801dd20:	6878      	ldr	r0, [r7, #4]
 801dd22:	f7eb fb26 	bl	8009372 <lv_obj_invalidate>
 801dd26:	e000      	b.n	801dd2a <lv_label_refr_text+0x53a>
    if(ext->text == NULL) return;
 801dd28:	bf00      	nop
}
 801dd2a:	3764      	adds	r7, #100	; 0x64
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	bd90      	pop	{r4, r7, pc}
 801dd30:	200027a8 	.word	0x200027a8
 801dd34:	2000279c 	.word	0x2000279c
 801dd38:	200027a0 	.word	0x200027a0

0801dd3c <lv_label_revert_dots>:

static void lv_label_revert_dots(lv_obj_t * label)
{
 801dd3c:	b580      	push	{r7, lr}
 801dd3e:	b088      	sub	sp, #32
 801dd40:	af00      	add	r7, sp, #0
 801dd42:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801dd44:	6878      	ldr	r0, [r7, #4]
 801dd46:	f7ec fd40 	bl	800a7ca <lv_obj_get_ext_attr>
 801dd4a:	61b8      	str	r0, [r7, #24]
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801dd4c:	69bb      	ldr	r3, [r7, #24]
 801dd4e:	7f9b      	ldrb	r3, [r3, #30]
 801dd50:	f003 0307 	and.w	r3, r3, #7
 801dd54:	b2db      	uxtb	r3, r3
 801dd56:	2b02      	cmp	r3, #2
 801dd58:	d142      	bne.n	801dde0 <lv_label_revert_dots+0xa4>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801dd5a:	69bb      	ldr	r3, [r7, #24]
 801dd5c:	891b      	ldrh	r3, [r3, #8]
 801dd5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd62:	4293      	cmp	r3, r2
 801dd64:	d03e      	beq.n	801dde4 <lv_label_revert_dots+0xa8>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 801dd66:	69bb      	ldr	r3, [r7, #24]
 801dd68:	891b      	ldrh	r3, [r3, #8]
 801dd6a:	3b03      	subs	r3, #3
 801dd6c:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801dd6e:	4b1f      	ldr	r3, [pc, #124]	; (801ddec <lv_label_revert_dots+0xb0>)
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	69ba      	ldr	r2, [r7, #24]
 801dd74:	6812      	ldr	r2, [r2, #0]
 801dd76:	6979      	ldr	r1, [r7, #20]
 801dd78:	4610      	mov	r0, r2
 801dd7a:	4798      	blx	r3
 801dd7c:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 801dd7e:	2300      	movs	r3, #0
 801dd80:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(label);
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	f000 f89f 	bl	801dec6 <lv_label_get_dot_tmp>
 801dd88:	60f8      	str	r0, [r7, #12]
    while(ext->text[byte_i + i] != '\0') {
 801dd8a:	e00d      	b.n	801dda8 <lv_label_revert_dots+0x6c>
        ext->text[byte_i + i] = dot_tmp[i];
 801dd8c:	7ffb      	ldrb	r3, [r7, #31]
 801dd8e:	68fa      	ldr	r2, [r7, #12]
 801dd90:	441a      	add	r2, r3
 801dd92:	69bb      	ldr	r3, [r7, #24]
 801dd94:	6819      	ldr	r1, [r3, #0]
 801dd96:	7ff8      	ldrb	r0, [r7, #31]
 801dd98:	693b      	ldr	r3, [r7, #16]
 801dd9a:	4403      	add	r3, r0
 801dd9c:	440b      	add	r3, r1
 801dd9e:	7812      	ldrb	r2, [r2, #0]
 801dda0:	701a      	strb	r2, [r3, #0]
        i++;
 801dda2:	7ffb      	ldrb	r3, [r7, #31]
 801dda4:	3301      	adds	r3, #1
 801dda6:	77fb      	strb	r3, [r7, #31]
    while(ext->text[byte_i + i] != '\0') {
 801dda8:	69bb      	ldr	r3, [r7, #24]
 801ddaa:	681a      	ldr	r2, [r3, #0]
 801ddac:	7ff9      	ldrb	r1, [r7, #31]
 801ddae:	693b      	ldr	r3, [r7, #16]
 801ddb0:	440b      	add	r3, r1
 801ddb2:	4413      	add	r3, r2
 801ddb4:	781b      	ldrb	r3, [r3, #0]
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d1e8      	bne.n	801dd8c <lv_label_revert_dots+0x50>
    }
    ext->text[byte_i + i] = dot_tmp[i];
 801ddba:	7ffb      	ldrb	r3, [r7, #31]
 801ddbc:	68fa      	ldr	r2, [r7, #12]
 801ddbe:	441a      	add	r2, r3
 801ddc0:	69bb      	ldr	r3, [r7, #24]
 801ddc2:	6819      	ldr	r1, [r3, #0]
 801ddc4:	7ff8      	ldrb	r0, [r7, #31]
 801ddc6:	693b      	ldr	r3, [r7, #16]
 801ddc8:	4403      	add	r3, r0
 801ddca:	440b      	add	r3, r1
 801ddcc:	7812      	ldrb	r2, [r2, #0]
 801ddce:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(label);
 801ddd0:	6878      	ldr	r0, [r7, #4]
 801ddd2:	f000 f890 	bl	801def6 <lv_label_dot_tmp_free>

    ext->dot_end = LV_LABEL_DOT_END_INV;
 801ddd6:	69bb      	ldr	r3, [r7, #24]
 801ddd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dddc:	811a      	strh	r2, [r3, #8]
 801ddde:	e002      	b.n	801dde6 <lv_label_revert_dots+0xaa>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801dde0:	bf00      	nop
 801dde2:	e000      	b.n	801dde6 <lv_label_revert_dots+0xaa>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801dde4:	bf00      	nop
}
 801dde6:	3720      	adds	r7, #32
 801dde8:	46bd      	mov	sp, r7
 801ddea:	bd80      	pop	{r7, pc}
 801ddec:	200027a8 	.word	0x200027a8

0801ddf0 <lv_label_set_offset_x>:

#if LV_USE_ANIMATION
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)
{
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	b084      	sub	sp, #16
 801ddf4:	af00      	add	r7, sp, #0
 801ddf6:	6078      	str	r0, [r7, #4]
 801ddf8:	460b      	mov	r3, r1
 801ddfa:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801ddfc:	6878      	ldr	r0, [r7, #4]
 801ddfe:	f7ec fce4 	bl	800a7ca <lv_obj_get_ext_attr>
 801de02:	60f8      	str	r0, [r7, #12]
    ext->offset.x        = x;
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	887a      	ldrh	r2, [r7, #2]
 801de08:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(label);
 801de0a:	6878      	ldr	r0, [r7, #4]
 801de0c:	f7eb fab1 	bl	8009372 <lv_obj_invalidate>
}
 801de10:	bf00      	nop
 801de12:	3710      	adds	r7, #16
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}

0801de18 <lv_label_set_offset_y>:

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b084      	sub	sp, #16
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
 801de20:	460b      	mov	r3, r1
 801de22:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801de24:	6878      	ldr	r0, [r7, #4]
 801de26:	f7ec fcd0 	bl	800a7ca <lv_obj_get_ext_attr>
 801de2a:	60f8      	str	r0, [r7, #12]
    ext->offset.y        = y;
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	887a      	ldrh	r2, [r7, #2]
 801de30:	819a      	strh	r2, [r3, #12]
    lv_obj_invalidate(label);
 801de32:	6878      	ldr	r0, [r7, #4]
 801de34:	f7eb fa9d 	bl	8009372 <lv_obj_invalidate>
}
 801de38:	bf00      	nop
 801de3a:	3710      	adds	r7, #16
 801de3c:	46bd      	mov	sp, r7
 801de3e:	bd80      	pop	{r7, pc}

0801de40 <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint16_t len)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b086      	sub	sp, #24
 801de44:	af00      	add	r7, sp, #0
 801de46:	60f8      	str	r0, [r7, #12]
 801de48:	60b9      	str	r1, [r7, #8]
 801de4a:	4613      	mov	r3, r2
 801de4c:	80fb      	strh	r3, [r7, #6]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801de4e:	68f8      	ldr	r0, [r7, #12]
 801de50:	f7ec fcbb 	bl	800a7ca <lv_obj_get_ext_attr>
 801de54:	6178      	str	r0, [r7, #20]
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801de56:	68f8      	ldr	r0, [r7, #12]
 801de58:	f000 f84d 	bl	801def6 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801de5c:	88fb      	ldrh	r3, [r7, #6]
 801de5e:	2b04      	cmp	r3, #4
 801de60:	d920      	bls.n	801dea4 <lv_label_set_dot_tmp+0x64>
        /* Memory needs to be allocated. Allocates an additional byte
         * for a NULL-terminator so it can be copied. */
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801de62:	88fb      	ldrh	r3, [r7, #6]
 801de64:	3301      	adds	r3, #1
 801de66:	4618      	mov	r0, r3
 801de68:	f7f9 f850 	bl	8016f0c <lv_mem_alloc>
 801de6c:	4602      	mov	r2, r0
 801de6e:	697b      	ldr	r3, [r7, #20]
 801de70:	605a      	str	r2, [r3, #4]
        if(ext->dot.tmp_ptr == NULL) {
 801de72:	697b      	ldr	r3, [r7, #20]
 801de74:	685b      	ldr	r3, [r3, #4]
 801de76:	2b00      	cmp	r3, #0
 801de78:	d101      	bne.n	801de7e <lv_label_set_dot_tmp+0x3e>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 801de7a:	2300      	movs	r3, #0
 801de7c:	e01f      	b.n	801debe <lv_label_set_dot_tmp+0x7e>
        }
        memcpy(ext->dot.tmp_ptr, data, len);
 801de7e:	697b      	ldr	r3, [r7, #20]
 801de80:	685b      	ldr	r3, [r3, #4]
 801de82:	88fa      	ldrh	r2, [r7, #6]
 801de84:	68b9      	ldr	r1, [r7, #8]
 801de86:	4618      	mov	r0, r3
 801de88:	f00d f8c2 	bl	802b010 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 801de8c:	697b      	ldr	r3, [r7, #20]
 801de8e:	685a      	ldr	r2, [r3, #4]
 801de90:	88fb      	ldrh	r3, [r7, #6]
 801de92:	4413      	add	r3, r2
 801de94:	2200      	movs	r2, #0
 801de96:	701a      	strb	r2, [r3, #0]
        ext->dot_tmp_alloc    = true;
 801de98:	697a      	ldr	r2, [r7, #20]
 801de9a:	7fd3      	ldrb	r3, [r2, #31]
 801de9c:	f043 0302 	orr.w	r3, r3, #2
 801dea0:	77d3      	strb	r3, [r2, #31]
 801dea2:	e00b      	b.n	801debc <lv_label_set_dot_tmp+0x7c>
    } else {
        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
 801dea4:	697a      	ldr	r2, [r7, #20]
 801dea6:	7fd3      	ldrb	r3, [r2, #31]
 801dea8:	f36f 0341 	bfc	r3, #1, #1
 801deac:	77d3      	strb	r3, [r2, #31]
        memcpy(ext->dot.tmp, data, len);
 801deae:	697b      	ldr	r3, [r7, #20]
 801deb0:	3304      	adds	r3, #4
 801deb2:	88fa      	ldrh	r2, [r7, #6]
 801deb4:	68b9      	ldr	r1, [r7, #8]
 801deb6:	4618      	mov	r0, r3
 801deb8:	f00d f8aa 	bl	802b010 <memcpy>
    }
    return true;
 801debc:	2301      	movs	r3, #1
}
 801debe:	4618      	mov	r0, r3
 801dec0:	3718      	adds	r7, #24
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd80      	pop	{r7, pc}

0801dec6 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
 801dec6:	b580      	push	{r7, lr}
 801dec8:	b084      	sub	sp, #16
 801deca:	af00      	add	r7, sp, #0
 801decc:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801dece:	6878      	ldr	r0, [r7, #4]
 801ded0:	f7ec fc7b 	bl	800a7ca <lv_obj_get_ext_attr>
 801ded4:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc) {
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	7fdb      	ldrb	r3, [r3, #31]
 801deda:	f003 0302 	and.w	r3, r3, #2
 801dede:	b2db      	uxtb	r3, r3
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d002      	beq.n	801deea <lv_label_get_dot_tmp+0x24>
        return ext->dot.tmp_ptr;
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	e001      	b.n	801deee <lv_label_get_dot_tmp+0x28>
    } else {
        return ext->dot.tmp;
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	3304      	adds	r3, #4
    }
}
 801deee:	4618      	mov	r0, r3
 801def0:	3710      	adds	r7, #16
 801def2:	46bd      	mov	sp, r7
 801def4:	bd80      	pop	{r7, pc}

0801def6 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 801def6:	b580      	push	{r7, lr}
 801def8:	b084      	sub	sp, #16
 801defa:	af00      	add	r7, sp, #0
 801defc:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801defe:	6878      	ldr	r0, [r7, #4]
 801df00:	f7ec fc63 	bl	800a7ca <lv_obj_get_ext_attr>
 801df04:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	7fdb      	ldrb	r3, [r3, #31]
 801df0a:	f003 0302 	and.w	r3, r3, #2
 801df0e:	b2db      	uxtb	r3, r3
 801df10:	2b00      	cmp	r3, #0
 801df12:	d008      	beq.n	801df26 <lv_label_dot_tmp_free+0x30>
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	685b      	ldr	r3, [r3, #4]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d004      	beq.n	801df26 <lv_label_dot_tmp_free+0x30>
        lv_mem_free(ext->dot.tmp_ptr);
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	685b      	ldr	r3, [r3, #4]
 801df20:	4618      	mov	r0, r3
 801df22:	f7f9 f833 	bl	8016f8c <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 801df26:	68fa      	ldr	r2, [r7, #12]
 801df28:	7fd3      	ldrb	r3, [r2, #31]
 801df2a:	f36f 0341 	bfc	r3, #1, #1
 801df2e:	77d3      	strb	r3, [r2, #31]
    ext->dot.tmp_ptr   = NULL;
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	2200      	movs	r2, #0
 801df34:	605a      	str	r2, [r3, #4]
}
 801df36:	bf00      	nop
 801df38:	3710      	adds	r7, #16
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}

0801df3e <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801df3e:	b480      	push	{r7}
 801df40:	b085      	sub	sp, #20
 801df42:	af00      	add	r7, sp, #0
 801df44:	80b8      	strh	r0, [r7, #4]
 801df46:	8039      	strh	r1, [r7, #0]
 801df48:	4613      	mov	r3, r2
 801df4a:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801df4c:	793b      	ldrb	r3, [r7, #4]
 801df4e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801df52:	b2db      	uxtb	r3, r3
 801df54:	b29a      	uxth	r2, r3
 801df56:	78fb      	ldrb	r3, [r7, #3]
 801df58:	b29b      	uxth	r3, r3
 801df5a:	fb12 f303 	smulbb	r3, r2, r3
 801df5e:	b29a      	uxth	r2, r3
 801df60:	783b      	ldrb	r3, [r7, #0]
 801df62:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801df66:	b2db      	uxtb	r3, r3
 801df68:	b299      	uxth	r1, r3
 801df6a:	78fb      	ldrb	r3, [r7, #3]
 801df6c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801df70:	b29b      	uxth	r3, r3
 801df72:	fb11 f303 	smulbb	r3, r1, r3
 801df76:	b29b      	uxth	r3, r3
 801df78:	4413      	add	r3, r2
 801df7a:	b29b      	uxth	r3, r3
 801df7c:	0a1b      	lsrs	r3, r3, #8
 801df7e:	b29b      	uxth	r3, r3
 801df80:	f003 031f 	and.w	r3, r3, #31
 801df84:	b2da      	uxtb	r2, r3
 801df86:	7a3b      	ldrb	r3, [r7, #8]
 801df88:	f362 03c7 	bfi	r3, r2, #3, #5
 801df8c:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 801df8e:	793b      	ldrb	r3, [r7, #4]
 801df90:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801df94:	b2db      	uxtb	r3, r3
 801df96:	b29b      	uxth	r3, r3
 801df98:	00db      	lsls	r3, r3, #3
 801df9a:	b29a      	uxth	r2, r3
 801df9c:	797b      	ldrb	r3, [r7, #5]
 801df9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dfa2:	b2db      	uxtb	r3, r3
 801dfa4:	b29b      	uxth	r3, r3
 801dfa6:	4413      	add	r3, r2
 801dfa8:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 801dfaa:	783b      	ldrb	r3, [r7, #0]
 801dfac:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801dfb0:	b2db      	uxtb	r3, r3
 801dfb2:	b29b      	uxth	r3, r3
 801dfb4:	00db      	lsls	r3, r3, #3
 801dfb6:	b29a      	uxth	r2, r3
 801dfb8:	787b      	ldrb	r3, [r7, #1]
 801dfba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dfbe:	b2db      	uxtb	r3, r3
 801dfc0:	b29b      	uxth	r3, r3
 801dfc2:	4413      	add	r3, r2
 801dfc4:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 801dfc6:	78fb      	ldrb	r3, [r7, #3]
 801dfc8:	b29b      	uxth	r3, r3
 801dfca:	89fa      	ldrh	r2, [r7, #14]
 801dfcc:	fb12 f303 	smulbb	r3, r2, r3
 801dfd0:	b29a      	uxth	r2, r3
 801dfd2:	78fb      	ldrb	r3, [r7, #3]
 801dfd4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801dfd8:	b29b      	uxth	r3, r3
 801dfda:	89b9      	ldrh	r1, [r7, #12]
 801dfdc:	fb11 f303 	smulbb	r3, r1, r3
 801dfe0:	b29b      	uxth	r3, r3
 801dfe2:	4413      	add	r3, r2
 801dfe4:	b29b      	uxth	r3, r3
 801dfe6:	0a1b      	lsrs	r3, r3, #8
 801dfe8:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 801dfea:	897b      	ldrh	r3, [r7, #10]
 801dfec:	08db      	lsrs	r3, r3, #3
 801dfee:	b29b      	uxth	r3, r3
 801dff0:	f003 0307 	and.w	r3, r3, #7
 801dff4:	b2da      	uxtb	r2, r3
 801dff6:	7a3b      	ldrb	r3, [r7, #8]
 801dff8:	f362 0302 	bfi	r3, r2, #0, #3
 801dffc:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 801dffe:	897b      	ldrh	r3, [r7, #10]
 801e000:	f003 0307 	and.w	r3, r3, #7
 801e004:	b2da      	uxtb	r2, r3
 801e006:	7a7b      	ldrb	r3, [r7, #9]
 801e008:	f362 1347 	bfi	r3, r2, #5, #3
 801e00c:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801e00e:	797b      	ldrb	r3, [r7, #5]
 801e010:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801e014:	b2db      	uxtb	r3, r3
 801e016:	b29a      	uxth	r2, r3
 801e018:	78fb      	ldrb	r3, [r7, #3]
 801e01a:	b29b      	uxth	r3, r3
 801e01c:	fb12 f303 	smulbb	r3, r2, r3
 801e020:	b29a      	uxth	r2, r3
 801e022:	787b      	ldrb	r3, [r7, #1]
 801e024:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801e028:	b2db      	uxtb	r3, r3
 801e02a:	b299      	uxth	r1, r3
 801e02c:	78fb      	ldrb	r3, [r7, #3]
 801e02e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e032:	b29b      	uxth	r3, r3
 801e034:	fb11 f303 	smulbb	r3, r1, r3
 801e038:	b29b      	uxth	r3, r3
 801e03a:	4413      	add	r3, r2
 801e03c:	b29b      	uxth	r3, r3
 801e03e:	0a1b      	lsrs	r3, r3, #8
 801e040:	b29b      	uxth	r3, r3
 801e042:	f003 031f 	and.w	r3, r3, #31
 801e046:	b2da      	uxtb	r2, r3
 801e048:	7a7b      	ldrb	r3, [r7, #9]
 801e04a:	f362 0304 	bfi	r3, r2, #0, #5
 801e04e:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801e050:	893b      	ldrh	r3, [r7, #8]
}
 801e052:	4618      	mov	r0, r3
 801e054:	3714      	adds	r7, #20
 801e056:	46bd      	mov	sp, r7
 801e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05c:	4770      	bx	lr

0801e05e <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801e05e:	b580      	push	{r7, lr}
 801e060:	b084      	sub	sp, #16
 801e062:	af00      	add	r7, sp, #0
 801e064:	60f8      	str	r0, [r7, #12]
 801e066:	460b      	mov	r3, r1
 801e068:	607a      	str	r2, [r7, #4]
 801e06a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801e06c:	6879      	ldr	r1, [r7, #4]
 801e06e:	68f8      	ldr	r0, [r7, #12]
 801e070:	f7ec f87b 	bl	800a16a <lv_obj_set_style>
}
 801e074:	bf00      	nop
 801e076:	3710      	adds	r7, #16
 801e078:	46bd      	mov	sp, r7
 801e07a:	bd80      	pop	{r7, pc}

0801e07c <lv_lmeter_get_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be get (can be only `LV_LMETER_STYLE_MAIN`)
 * @return pointer to the line meter's style
 */
static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b082      	sub	sp, #8
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
 801e084:	460b      	mov	r3, r1
 801e086:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(lmeter);
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f7ec fae3 	bl	800a654 <lv_obj_get_style>
 801e08e:	4603      	mov	r3, r0
}
 801e090:	4618      	mov	r0, r3
 801e092:	3708      	adds	r7, #8
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}

0801e098 <lv_lmeter_create>:
 * @param copy pointer to a line meter object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created line meter
 */
lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b086      	sub	sp, #24
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
 801e0a0:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("line meter create started");

    /*Create the ancestor of line meter*/
    lv_obj_t * new_lmeter = lv_obj_create(par, copy);
 801e0a2:	6839      	ldr	r1, [r7, #0]
 801e0a4:	6878      	ldr	r0, [r7, #4]
 801e0a6:	f7ea fe27 	bl	8008cf8 <lv_obj_create>
 801e0aa:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_lmeter);
 801e0ac:	697b      	ldr	r3, [r7, #20]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d100      	bne.n	801e0b4 <lv_lmeter_create+0x1c>
 801e0b2:	e7fe      	b.n	801e0b2 <lv_lmeter_create+0x1a>
    if(new_lmeter == NULL) return NULL;
 801e0b4:	697b      	ldr	r3, [r7, #20]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d101      	bne.n	801e0be <lv_lmeter_create+0x26>
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	e069      	b.n	801e192 <lv_lmeter_create+0xfa>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_lmeter);
 801e0be:	4b37      	ldr	r3, [pc, #220]	; (801e19c <lv_lmeter_create+0x104>)
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d105      	bne.n	801e0d2 <lv_lmeter_create+0x3a>
 801e0c6:	6978      	ldr	r0, [r7, #20]
 801e0c8:	f7ec fb67 	bl	800a79a <lv_obj_get_signal_cb>
 801e0cc:	4602      	mov	r2, r0
 801e0ce:	4b33      	ldr	r3, [pc, #204]	; (801e19c <lv_lmeter_create+0x104>)
 801e0d0:	601a      	str	r2, [r3, #0]

    /*Allocate the line meter type specific extended data*/
    lv_lmeter_ext_t * ext = lv_obj_allocate_ext_attr(new_lmeter, sizeof(lv_lmeter_ext_t));
 801e0d2:	210a      	movs	r1, #10
 801e0d4:	6978      	ldr	r0, [r7, #20]
 801e0d6:	f7ec f9ab 	bl	800a430 <lv_obj_allocate_ext_attr>
 801e0da:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801e0dc:	693b      	ldr	r3, [r7, #16]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d100      	bne.n	801e0e4 <lv_lmeter_create+0x4c>
 801e0e2:	e7fe      	b.n	801e0e2 <lv_lmeter_create+0x4a>
    if(ext == NULL) return NULL;
 801e0e4:	693b      	ldr	r3, [r7, #16]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d101      	bne.n	801e0ee <lv_lmeter_create+0x56>
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	e051      	b.n	801e192 <lv_lmeter_create+0xfa>

    /*Initialize the allocated 'ext' */
    ext->min_value   = 0;
 801e0ee:	693b      	ldr	r3, [r7, #16]
 801e0f0:	2200      	movs	r2, #0
 801e0f2:	80da      	strh	r2, [r3, #6]
    ext->max_value   = 100;
 801e0f4:	693b      	ldr	r3, [r7, #16]
 801e0f6:	2264      	movs	r2, #100	; 0x64
 801e0f8:	811a      	strh	r2, [r3, #8]
    ext->cur_value   = 0;
 801e0fa:	693b      	ldr	r3, [r7, #16]
 801e0fc:	2200      	movs	r2, #0
 801e0fe:	809a      	strh	r2, [r3, #4]
    ext->line_cnt    = 21;  /*Odd scale number looks better*/
 801e100:	693b      	ldr	r3, [r7, #16]
 801e102:	2215      	movs	r2, #21
 801e104:	709a      	strb	r2, [r3, #2]
    ext->scale_angle = 240; /*(scale_num - 1) * N looks better */
 801e106:	693b      	ldr	r3, [r7, #16]
 801e108:	22f0      	movs	r2, #240	; 0xf0
 801e10a:	801a      	strh	r2, [r3, #0]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_lmeter, lv_lmeter_signal);
 801e10c:	4924      	ldr	r1, [pc, #144]	; (801e1a0 <lv_lmeter_create+0x108>)
 801e10e:	6978      	ldr	r0, [r7, #20]
 801e110:	f7ec f972 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_lmeter, lv_lmeter_design);
 801e114:	4923      	ldr	r1, [pc, #140]	; (801e1a4 <lv_lmeter_create+0x10c>)
 801e116:	6978      	ldr	r0, [r7, #20]
 801e118:	f7ec f97c 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new line meter line meter*/
    if(copy == NULL) {
 801e11c:	683b      	ldr	r3, [r7, #0]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d118      	bne.n	801e154 <lv_lmeter_create+0xbc>
        lv_obj_set_size(new_lmeter, LV_DPI, LV_DPI);
 801e122:	2264      	movs	r2, #100	; 0x64
 801e124:	2164      	movs	r1, #100	; 0x64
 801e126:	6978      	ldr	r0, [r7, #20]
 801e128:	f7eb fad7 	bl	80096da <lv_obj_set_size>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801e12c:	f004 f9d0 	bl	80224d0 <lv_theme_get_current>
 801e130:	60b8      	str	r0, [r7, #8]
        if(th) {
 801e132:	68bb      	ldr	r3, [r7, #8]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d007      	beq.n	801e148 <lv_lmeter_create+0xb0>
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, th->style.lmeter);
 801e138:	68bb      	ldr	r3, [r7, #8]
 801e13a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e13c:	461a      	mov	r2, r3
 801e13e:	2100      	movs	r1, #0
 801e140:	6978      	ldr	r0, [r7, #20]
 801e142:	f7ff ff8c 	bl	801e05e <lv_lmeter_set_style>
 801e146:	e023      	b.n	801e190 <lv_lmeter_create+0xf8>
        } else {
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, &lv_style_pretty_color);
 801e148:	4a17      	ldr	r2, [pc, #92]	; (801e1a8 <lv_lmeter_create+0x110>)
 801e14a:	2100      	movs	r1, #0
 801e14c:	6978      	ldr	r0, [r7, #20]
 801e14e:	f7ff ff86 	bl	801e05e <lv_lmeter_set_style>
 801e152:	e01d      	b.n	801e190 <lv_lmeter_create+0xf8>
        }
    }
    /*Copy an existing line meter*/
    else {
        lv_lmeter_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801e154:	6838      	ldr	r0, [r7, #0]
 801e156:	f7ec fb38 	bl	800a7ca <lv_obj_get_ext_attr>
 801e15a:	60f8      	str	r0, [r7, #12]
        ext->scale_angle           = copy_ext->scale_angle;
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	881a      	ldrh	r2, [r3, #0]
 801e160:	693b      	ldr	r3, [r7, #16]
 801e162:	801a      	strh	r2, [r3, #0]
        ext->line_cnt              = copy_ext->line_cnt;
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	789a      	ldrb	r2, [r3, #2]
 801e168:	693b      	ldr	r3, [r7, #16]
 801e16a:	709a      	strb	r2, [r3, #2]
        ext->min_value             = copy_ext->min_value;
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e172:	693b      	ldr	r3, [r7, #16]
 801e174:	80da      	strh	r2, [r3, #6]
        ext->max_value             = copy_ext->max_value;
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e17c:	693b      	ldr	r3, [r7, #16]
 801e17e:	811a      	strh	r2, [r3, #8]
        ext->cur_value             = copy_ext->cur_value;
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e186:	693b      	ldr	r3, [r7, #16]
 801e188:	809a      	strh	r2, [r3, #4]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_lmeter);
 801e18a:	6978      	ldr	r0, [r7, #20]
 801e18c:	f7eb ffff 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("line meter created");

    return new_lmeter;
 801e190:	697b      	ldr	r3, [r7, #20]
}
 801e192:	4618      	mov	r0, r3
 801e194:	3718      	adds	r7, #24
 801e196:	46bd      	mov	sp, r7
 801e198:	bd80      	pop	{r7, pc}
 801e19a:	bf00      	nop
 801e19c:	200177dc 	.word	0x200177dc
 801e1a0:	0801e5d9 	.word	0x0801e5d9
 801e1a4:	0801e2e9 	.word	0x0801e2e9
 801e1a8:	2001b860 	.word	0x2001b860

0801e1ac <lv_lmeter_set_value>:
 * Set a new value on the line meter
 * @param lmeter pointer to a line meter object
 * @param value new value
 */
void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value)
{
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b084      	sub	sp, #16
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	6078      	str	r0, [r7, #4]
 801e1b4:	460b      	mov	r3, r1
 801e1b6:	807b      	strh	r3, [r7, #2]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801e1b8:	6878      	ldr	r0, [r7, #4]
 801e1ba:	f7ec fb06 	bl	800a7ca <lv_obj_get_ext_attr>
 801e1be:	60f8      	str	r0, [r7, #12]
    if(ext->cur_value == value) return;
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e1c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e1ca:	429a      	cmp	r2, r3
 801e1cc:	d01a      	beq.n	801e204 <lv_lmeter_set_value+0x58>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e1d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e1d8:	4293      	cmp	r3, r2
 801e1da:	bfa8      	it	ge
 801e1dc:	4613      	movge	r3, r2
 801e1de:	b21a      	sxth	r2, r3
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	809a      	strh	r2, [r3, #4]
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e1f0:	4293      	cmp	r3, r2
 801e1f2:	bfb8      	it	lt
 801e1f4:	4613      	movlt	r3, r2
 801e1f6:	b21a      	sxth	r2, r3
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	809a      	strh	r2, [r3, #4]
    lv_obj_invalidate(lmeter);
 801e1fc:	6878      	ldr	r0, [r7, #4]
 801e1fe:	f7eb f8b8 	bl	8009372 <lv_obj_invalidate>
 801e202:	e000      	b.n	801e206 <lv_lmeter_set_value+0x5a>
    if(ext->cur_value == value) return;
 801e204:	bf00      	nop
}
 801e206:	3710      	adds	r7, #16
 801e208:	46bd      	mov	sp, r7
 801e20a:	bd80      	pop	{r7, pc}

0801e20c <lv_lmeter_set_range>:
 * @param lmeter pointer to he line meter object
 * @param min minimum value
 * @param max maximum value
 */
void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max)
{
 801e20c:	b580      	push	{r7, lr}
 801e20e:	b084      	sub	sp, #16
 801e210:	af00      	add	r7, sp, #0
 801e212:	6078      	str	r0, [r7, #4]
 801e214:	460b      	mov	r3, r1
 801e216:	807b      	strh	r3, [r7, #2]
 801e218:	4613      	mov	r3, r2
 801e21a:	803b      	strh	r3, [r7, #0]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801e21c:	6878      	ldr	r0, [r7, #4]
 801e21e:	f7ec fad4 	bl	800a7ca <lv_obj_get_ext_attr>
 801e222:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e22a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e22e:	429a      	cmp	r2, r3
 801e230:	d106      	bne.n	801e240 <lv_lmeter_set_range+0x34>
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e238:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e23c:	429a      	cmp	r2, r3
 801e23e:	d02b      	beq.n	801e298 <lv_lmeter_set_range+0x8c>

    ext->max_value = max;
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	883a      	ldrh	r2, [r7, #0]
 801e244:	811a      	strh	r2, [r3, #8]
    ext->min_value = min;
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	887a      	ldrh	r2, [r7, #2]
 801e24a:	80da      	strh	r2, [r3, #6]
    if(ext->cur_value > max) {
 801e24c:	68fb      	ldr	r3, [r7, #12]
 801e24e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e252:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e256:	429a      	cmp	r2, r3
 801e258:	da09      	bge.n	801e26e <lv_lmeter_set_range+0x62>
        ext->cur_value = max;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	883a      	ldrh	r2, [r7, #0]
 801e25e:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e266:	4619      	mov	r1, r3
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f7ff ff9f 	bl	801e1ac <lv_lmeter_set_value>
    }
    if(ext->cur_value < min) {
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e274:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e278:	429a      	cmp	r2, r3
 801e27a:	dd09      	ble.n	801e290 <lv_lmeter_set_range+0x84>
        ext->cur_value = min;
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	887a      	ldrh	r2, [r7, #2]
 801e280:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e288:	4619      	mov	r1, r3
 801e28a:	6878      	ldr	r0, [r7, #4]
 801e28c:	f7ff ff8e 	bl	801e1ac <lv_lmeter_set_value>
    }
    lv_obj_invalidate(lmeter);
 801e290:	6878      	ldr	r0, [r7, #4]
 801e292:	f7eb f86e 	bl	8009372 <lv_obj_invalidate>
 801e296:	e000      	b.n	801e29a <lv_lmeter_set_range+0x8e>
    if(ext->min_value == min && ext->max_value == max) return;
 801e298:	bf00      	nop
}
 801e29a:	3710      	adds	r7, #16
 801e29c:	46bd      	mov	sp, r7
 801e29e:	bd80      	pop	{r7, pc}

0801e2a0 <lv_lmeter_set_scale>:
 * @param lmeter pointer to a line meter object
 * @param angle angle of the scale (0..360)
 * @param line_cnt number of lines
 */
void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint8_t line_cnt)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b084      	sub	sp, #16
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
 801e2a8:	460b      	mov	r3, r1
 801e2aa:	807b      	strh	r3, [r7, #2]
 801e2ac:	4613      	mov	r3, r2
 801e2ae:	707b      	strb	r3, [r7, #1]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f7ec fa8a 	bl	800a7ca <lv_obj_get_ext_attr>
 801e2b6:	60f8      	str	r0, [r7, #12]
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	881b      	ldrh	r3, [r3, #0]
 801e2bc:	887a      	ldrh	r2, [r7, #2]
 801e2be:	429a      	cmp	r2, r3
 801e2c0:	d104      	bne.n	801e2cc <lv_lmeter_set_scale+0x2c>
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	789b      	ldrb	r3, [r3, #2]
 801e2c6:	787a      	ldrb	r2, [r7, #1]
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	d009      	beq.n	801e2e0 <lv_lmeter_set_scale+0x40>

    ext->scale_angle = angle;
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	887a      	ldrh	r2, [r7, #2]
 801e2d0:	801a      	strh	r2, [r3, #0]
    ext->line_cnt    = line_cnt;
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	787a      	ldrb	r2, [r7, #1]
 801e2d6:	709a      	strb	r2, [r3, #2]

    lv_obj_invalidate(lmeter);
 801e2d8:	6878      	ldr	r0, [r7, #4]
 801e2da:	f7eb f84a 	bl	8009372 <lv_obj_invalidate>
 801e2de:	e000      	b.n	801e2e2 <lv_lmeter_set_scale+0x42>
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801e2e0:	bf00      	nop
}
 801e2e2:	3710      	adds	r7, #16
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd80      	pop	{r7, pc}

0801e2e8 <lv_lmeter_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_lmeter_design(lv_obj_t * lmeter, const lv_area_t * mask, lv_design_mode_t mode)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b0a2      	sub	sp, #136	; 0x88
 801e2ec:	af02      	add	r7, sp, #8
 801e2ee:	60f8      	str	r0, [r7, #12]
 801e2f0:	60b9      	str	r1, [r7, #8]
 801e2f2:	4613      	mov	r3, r2
 801e2f4:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801e2f6:	79fb      	ldrb	r3, [r7, #7]
 801e2f8:	2b02      	cmp	r3, #2
 801e2fa:	d101      	bne.n	801e300 <lv_lmeter_design+0x18>
        return false;
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	e167      	b.n	801e5d0 <lv_lmeter_design+0x2e8>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801e300:	79fb      	ldrb	r3, [r7, #7]
 801e302:	2b00      	cmp	r3, #0
 801e304:	f040 8163 	bne.w	801e5ce <lv_lmeter_design+0x2e6>
        lv_lmeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);
 801e308:	68f8      	ldr	r0, [r7, #12]
 801e30a:	f7ec fa5e 	bl	800a7ca <lv_obj_get_ext_attr>
 801e30e:	67b8      	str	r0, [r7, #120]	; 0x78
        const lv_style_t * style = lv_obj_get_style(lmeter);
 801e310:	68f8      	ldr	r0, [r7, #12]
 801e312:	f7ec f99f 	bl	800a654 <lv_obj_get_style>
 801e316:	6778      	str	r0, [r7, #116]	; 0x74
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(lmeter);
 801e318:	68f8      	ldr	r0, [r7, #12]
 801e31a:	f7ec fa08 	bl	800a72e <lv_obj_get_opa_scale>
 801e31e:	4603      	mov	r3, r0
 801e320:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        lv_style_t style_tmp;
        lv_style_copy(&style_tmp, style);
 801e324:	f107 0314 	add.w	r3, r7, #20
 801e328:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7ed fcbc 	bl	800bca8 <lv_style_copy>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(lmeter);
 801e330:	68f8      	ldr	r0, [r7, #12]
 801e332:	f7ec fa56 	bl	800a7e2 <lv_obj_get_group>
 801e336:	66f8      	str	r0, [r7, #108]	; 0x6c
        if(lv_group_get_focused(g) == lmeter) {
 801e338:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801e33a:	f7ea fa34 	bl	80087a6 <lv_group_get_focused>
 801e33e:	4602      	mov	r2, r0
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	4293      	cmp	r3, r2
 801e344:	d107      	bne.n	801e356 <lv_lmeter_design+0x6e>
            style_tmp.line.width += 1;
 801e346:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801e34a:	b29b      	uxth	r3, r3
 801e34c:	3301      	adds	r3, #1
 801e34e:	b29b      	uxth	r3, r3
 801e350:	b21b      	sxth	r3, r3
 801e352:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }
#endif

        lv_coord_t r_out = lv_obj_get_width(lmeter) / 2;
 801e356:	68f8      	ldr	r0, [r7, #12]
 801e358:	f7ec f94c 	bl	800a5f4 <lv_obj_get_width>
 801e35c:	4603      	mov	r3, r0
 801e35e:	0fda      	lsrs	r2, r3, #31
 801e360:	4413      	add	r3, r2
 801e362:	105b      	asrs	r3, r3, #1
 801e364:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t r_in  = r_out - style->body.padding.left;
 801e368:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801e36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e36e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e372:	b29b      	uxth	r3, r3
 801e374:	1ad3      	subs	r3, r2, r3
 801e376:	b29b      	uxth	r3, r3
 801e378:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(r_in < 1) r_in = 1;
 801e37c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e380:	2b00      	cmp	r3, #0
 801e382:	dc02      	bgt.n	801e38a <lv_lmeter_design+0xa2>
 801e384:	2301      	movs	r3, #1
 801e386:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        lv_coord_t x_ofs  = lv_obj_get_width(lmeter) / 2 + lmeter->coords.x1;
 801e38a:	68f8      	ldr	r0, [r7, #12]
 801e38c:	f7ec f932 	bl	800a5f4 <lv_obj_get_width>
 801e390:	4603      	mov	r3, r0
 801e392:	0fda      	lsrs	r2, r3, #31
 801e394:	4413      	add	r3, r2
 801e396:	105b      	asrs	r3, r3, #1
 801e398:	b21b      	sxth	r3, r3
 801e39a:	b29a      	uxth	r2, r3
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e3a2:	b29b      	uxth	r3, r3
 801e3a4:	4413      	add	r3, r2
 801e3a6:	b29b      	uxth	r3, r3
 801e3a8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_coord_t y_ofs  = lv_obj_get_height(lmeter) / 2 + lmeter->coords.y1;
 801e3ac:	68f8      	ldr	r0, [r7, #12]
 801e3ae:	f7ec f92f 	bl	800a610 <lv_obj_get_height>
 801e3b2:	4603      	mov	r3, r0
 801e3b4:	0fda      	lsrs	r2, r3, #31
 801e3b6:	4413      	add	r3, r2
 801e3b8:	105b      	asrs	r3, r3, #1
 801e3ba:	b21b      	sxth	r3, r3
 801e3bc:	b29a      	uxth	r2, r3
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e3c4:	b29b      	uxth	r3, r3
 801e3c6:	4413      	add	r3, r2
 801e3c8:	b29b      	uxth	r3, r3
 801e3ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        int16_t angle_ofs = 90 + (360 - ext->scale_angle) / 2;
 801e3ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e3d0:	881b      	ldrh	r3, [r3, #0]
 801e3d2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801e3d6:	0fda      	lsrs	r2, r3, #31
 801e3d8:	4413      	add	r3, r2
 801e3da:	105b      	asrs	r3, r3, #1
 801e3dc:	b29b      	uxth	r3, r3
 801e3de:	335a      	adds	r3, #90	; 0x5a
 801e3e0:	b29b      	uxth	r3, r3
 801e3e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        int16_t level =
            (int32_t)((int32_t)(ext->cur_value - ext->min_value) * ext->line_cnt) / (ext->max_value - ext->min_value);
 801e3e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e3e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3ec:	461a      	mov	r2, r3
 801e3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e3f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e3f4:	1ad3      	subs	r3, r2, r3
 801e3f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801e3f8:	7892      	ldrb	r2, [r2, #2]
 801e3fa:	fb02 f203 	mul.w	r2, r2, r3
 801e3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e404:	4619      	mov	r1, r3
 801e406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e408:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e40c:	1acb      	subs	r3, r1, r3
 801e40e:	fb92 f3f3 	sdiv	r3, r2, r3
        int16_t level =
 801e412:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        uint8_t i;

        style_tmp.line.color = style->body.main_color;
 801e416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e418:	885b      	ldrh	r3, [r3, #2]
 801e41a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        /*Calculate every coordinate in a bigger size to make rounding later*/
        r_out = r_out << LV_LMETER_LINE_UPSCALE;
 801e41e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e422:	015b      	lsls	r3, r3, #5
 801e424:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        r_in  = r_in << LV_LMETER_LINE_UPSCALE;
 801e428:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e42c:	015b      	lsls	r3, r3, #5
 801e42e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        for(i = 0; i < ext->line_cnt; i++) {
 801e432:	2300      	movs	r3, #0
 801e434:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801e438:	e0c2      	b.n	801e5c0 <lv_lmeter_design+0x2d8>
            /*Calculate the position a scale label*/
            int16_t angle = (i * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs;
 801e43a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801e43e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801e440:	8812      	ldrh	r2, [r2, #0]
 801e442:	fb02 f203 	mul.w	r2, r2, r3
 801e446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e448:	789b      	ldrb	r3, [r3, #2]
 801e44a:	3b01      	subs	r3, #1
 801e44c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e450:	b29a      	uxth	r2, r3
 801e452:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801e456:	4413      	add	r3, r2
 801e458:	b29b      	uxth	r3, r3
 801e45a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            lv_coord_t y_out = (int32_t)((int32_t)lv_trigo_sin(angle) * r_out) >> LV_TRIGO_SHIFT;
 801e45e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801e462:	4618      	mov	r0, r3
 801e464:	f7f8 fcda 	bl	8016e1c <lv_trigo_sin>
 801e468:	4603      	mov	r3, r0
 801e46a:	461a      	mov	r2, r3
 801e46c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e470:	fb03 f302 	mul.w	r3, r3, r2
 801e474:	13db      	asrs	r3, r3, #15
 801e476:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t x_out = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_out) >> LV_TRIGO_SHIFT;
 801e47a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801e47e:	335a      	adds	r3, #90	; 0x5a
 801e480:	b29b      	uxth	r3, r3
 801e482:	b21b      	sxth	r3, r3
 801e484:	4618      	mov	r0, r3
 801e486:	f7f8 fcc9 	bl	8016e1c <lv_trigo_sin>
 801e48a:	4603      	mov	r3, r0
 801e48c:	461a      	mov	r2, r3
 801e48e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e492:	fb03 f302 	mul.w	r3, r3, r2
 801e496:	13db      	asrs	r3, r3, #15
 801e498:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t y_in  = (int32_t)((int32_t)lv_trigo_sin(angle) * r_in) >> LV_TRIGO_SHIFT;
 801e49c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	f7f8 fcbb 	bl	8016e1c <lv_trigo_sin>
 801e4a6:	4603      	mov	r3, r0
 801e4a8:	461a      	mov	r2, r3
 801e4aa:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e4ae:	fb03 f302 	mul.w	r3, r3, r2
 801e4b2:	13db      	asrs	r3, r3, #15
 801e4b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_coord_t x_in  = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_in) >> LV_TRIGO_SHIFT;
 801e4b8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801e4bc:	335a      	adds	r3, #90	; 0x5a
 801e4be:	b29b      	uxth	r3, r3
 801e4c0:	b21b      	sxth	r3, r3
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7f8 fcaa 	bl	8016e1c <lv_trigo_sin>
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	461a      	mov	r2, r3
 801e4cc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e4d0:	fb03 f302 	mul.w	r3, r3, r2
 801e4d4:	13db      	asrs	r3, r3, #15
 801e4d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

            /*Rounding*/
            x_out = lv_lmeter_coord_round(x_out);
 801e4da:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e4de:	4618      	mov	r0, r3
 801e4e0:	f000 f8d2 	bl	801e688 <lv_lmeter_coord_round>
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            x_in  = lv_lmeter_coord_round(x_in);
 801e4ea:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f000 f8ca 	bl	801e688 <lv_lmeter_coord_round>
 801e4f4:	4603      	mov	r3, r0
 801e4f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            y_out = lv_lmeter_coord_round(y_out);
 801e4fa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e4fe:	4618      	mov	r0, r3
 801e500:	f000 f8c2 	bl	801e688 <lv_lmeter_coord_round>
 801e504:	4603      	mov	r3, r0
 801e506:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            y_in  = lv_lmeter_coord_round(y_in);
 801e50a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801e50e:	4618      	mov	r0, r3
 801e510:	f000 f8ba 	bl	801e688 <lv_lmeter_coord_round>
 801e514:	4603      	mov	r3, r0
 801e516:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_point_t p1;
            lv_point_t p2;

            p2.x = x_in + x_ofs;
 801e51a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801e51e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801e522:	4413      	add	r3, r2
 801e524:	b29b      	uxth	r3, r3
 801e526:	b21b      	sxth	r3, r3
 801e528:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            p2.y = y_in + y_ofs;
 801e52c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801e530:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e534:	4413      	add	r3, r2
 801e536:	b29b      	uxth	r3, r3
 801e538:	b21b      	sxth	r3, r3
 801e53a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

            p1.x = x_out + x_ofs;
 801e53e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801e542:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801e546:	4413      	add	r3, r2
 801e548:	b29b      	uxth	r3, r3
 801e54a:	b21b      	sxth	r3, r3
 801e54c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            p1.y = y_out + y_ofs;
 801e550:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801e554:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e558:	4413      	add	r3, r2
 801e55a:	b29b      	uxth	r3, r3
 801e55c:	b21b      	sxth	r3, r3
 801e55e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            if(i >= level)
 801e562:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801e566:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801e56a:	429a      	cmp	r2, r3
 801e56c:	db04      	blt.n	801e578 <lv_lmeter_design+0x290>
                style_tmp.line.color = style->line.color;
 801e56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e570:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801e572:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801e576:	e011      	b.n	801e59c <lv_lmeter_design+0x2b4>
            else {
                style_tmp.line.color =
                    lv_color_mix(style->body.grad_color, style->body.main_color, (255 * i) / ext->line_cnt);
 801e578:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801e57c:	4613      	mov	r3, r2
 801e57e:	021b      	lsls	r3, r3, #8
 801e580:	1a9b      	subs	r3, r3, r2
 801e582:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801e584:	7892      	ldrb	r2, [r2, #2]
 801e586:	fb93 f3f2 	sdiv	r3, r3, r2
 801e58a:	b2da      	uxtb	r2, r3
                style_tmp.line.color =
 801e58c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801e58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e590:	8849      	ldrh	r1, [r1, #2]
 801e592:	8898      	ldrh	r0, [r3, #4]
 801e594:	f7ff fcd3 	bl	801df3e <lv_color_mix>
 801e598:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
            }

            lv_draw_line(&p1, &p2, mask, &style_tmp, opa_scale);
 801e59c:	f107 0214 	add.w	r2, r7, #20
 801e5a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801e5a4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801e5a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801e5ac:	9300      	str	r3, [sp, #0]
 801e5ae:	4613      	mov	r3, r2
 801e5b0:	68ba      	ldr	r2, [r7, #8]
 801e5b2:	f7ef ff0b 	bl	800e3cc <lv_draw_line>
        for(i = 0; i < ext->line_cnt; i++) {
 801e5b6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801e5ba:	3301      	adds	r3, #1
 801e5bc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801e5c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e5c2:	789b      	ldrb	r3, [r3, #2]
 801e5c4:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801e5c8:	429a      	cmp	r2, r3
 801e5ca:	f4ff af36 	bcc.w	801e43a <lv_lmeter_design+0x152>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801e5ce:	2301      	movs	r3, #1
}
 801e5d0:	4618      	mov	r0, r3
 801e5d2:	3780      	adds	r7, #128	; 0x80
 801e5d4:	46bd      	mov	sp, r7
 801e5d6:	bd80      	pop	{r7, pc}

0801e5d8 <lv_lmeter_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_lmeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)
{
 801e5d8:	b580      	push	{r7, lr}
 801e5da:	b088      	sub	sp, #32
 801e5dc:	af00      	add	r7, sp, #0
 801e5de:	60f8      	str	r0, [r7, #12]
 801e5e0:	460b      	mov	r3, r1
 801e5e2:	607a      	str	r2, [r7, #4]
 801e5e4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(lmeter, sign, param);
 801e5e6:	4b26      	ldr	r3, [pc, #152]	; (801e680 <lv_lmeter_signal+0xa8>)
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	7af9      	ldrb	r1, [r7, #11]
 801e5ec:	687a      	ldr	r2, [r7, #4]
 801e5ee:	68f8      	ldr	r0, [r7, #12]
 801e5f0:	4798      	blx	r3
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801e5f6:	7fbb      	ldrb	r3, [r7, #30]
 801e5f8:	2b01      	cmp	r3, #1
 801e5fa:	d001      	beq.n	801e600 <lv_lmeter_signal+0x28>
 801e5fc:	7fbb      	ldrb	r3, [r7, #30]
 801e5fe:	e03a      	b.n	801e676 <lv_lmeter_signal+0x9e>

    if(sign == LV_SIGNAL_CLEANUP) {
 801e600:	7afb      	ldrb	r3, [r7, #11]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d036      	beq.n	801e674 <lv_lmeter_signal+0x9c>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801e606:	7afb      	ldrb	r3, [r7, #11]
 801e608:	2b04      	cmp	r3, #4
 801e60a:	d103      	bne.n	801e614 <lv_lmeter_signal+0x3c>
        lv_obj_refresh_ext_draw_pad(lmeter);
 801e60c:	68f8      	ldr	r0, [r7, #12]
 801e60e:	f7eb ff25 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
 801e612:	e02f      	b.n	801e674 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801e614:	7afb      	ldrb	r3, [r7, #11]
 801e616:	2b05      	cmp	r3, #5
 801e618:	d111      	bne.n	801e63e <lv_lmeter_signal+0x66>
        const lv_style_t * style = lv_lmeter_get_style(lmeter, LV_LMETER_STYLE_MAIN);
 801e61a:	2100      	movs	r1, #0
 801e61c:	68f8      	ldr	r0, [r7, #12]
 801e61e:	f7ff fd2d 	bl	801e07c <lv_lmeter_get_style>
 801e622:	6178      	str	r0, [r7, #20]
        lmeter->ext_draw_pad     = LV_MATH_MAX(lmeter->ext_draw_pad, style->line.width);
 801e624:	697b      	ldr	r3, [r7, #20]
 801e626:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e630:	4293      	cmp	r3, r2
 801e632:	bfb8      	it	lt
 801e634:	4613      	movlt	r3, r2
 801e636:	b21a      	sxth	r2, r3
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	869a      	strh	r2, [r3, #52]	; 0x34
 801e63c:	e01a      	b.n	801e674 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801e63e:	7afb      	ldrb	r3, [r7, #11]
 801e640:	2b06      	cmp	r3, #6
 801e642:	d117      	bne.n	801e674 <lv_lmeter_signal+0x9c>
        lv_obj_type_t * buf = param;
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e648:	2300      	movs	r3, #0
 801e64a:	77fb      	strb	r3, [r7, #31]
 801e64c:	e008      	b.n	801e660 <lv_lmeter_signal+0x88>
            if(buf->type[i] == NULL) break;
 801e64e:	7ffa      	ldrb	r2, [r7, #31]
 801e650:	69bb      	ldr	r3, [r7, #24]
 801e652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d006      	beq.n	801e668 <lv_lmeter_signal+0x90>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e65a:	7ffb      	ldrb	r3, [r7, #31]
 801e65c:	3301      	adds	r3, #1
 801e65e:	77fb      	strb	r3, [r7, #31]
 801e660:	7ffb      	ldrb	r3, [r7, #31]
 801e662:	2b06      	cmp	r3, #6
 801e664:	d9f3      	bls.n	801e64e <lv_lmeter_signal+0x76>
 801e666:	e000      	b.n	801e66a <lv_lmeter_signal+0x92>
            if(buf->type[i] == NULL) break;
 801e668:	bf00      	nop
        }
        buf->type[i] = "lv_lmeter";
 801e66a:	7ffa      	ldrb	r2, [r7, #31]
 801e66c:	69bb      	ldr	r3, [r7, #24]
 801e66e:	4905      	ldr	r1, [pc, #20]	; (801e684 <lv_lmeter_signal+0xac>)
 801e670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801e674:	7fbb      	ldrb	r3, [r7, #30]
}
 801e676:	4618      	mov	r0, r3
 801e678:	3720      	adds	r7, #32
 801e67a:	46bd      	mov	sp, r7
 801e67c:	bd80      	pop	{r7, pc}
 801e67e:	bf00      	nop
 801e680:	200177dc 	.word	0x200177dc
 801e684:	0802d4fc 	.word	0x0802d4fc

0801e688 <lv_lmeter_coord_round>:
 * Round a coordinate which is upscaled  (>=x.5 -> x + 1;   <x.5 -> x)
 * @param x a coordinate which is greater then it should be
 * @return the downscaled and rounded coordinate  (+-1)
 */
static lv_coord_t lv_lmeter_coord_round(int32_t x)
{
 801e688:	b480      	push	{r7}
 801e68a:	b085      	sub	sp, #20
 801e68c:	af00      	add	r7, sp, #0
 801e68e:	6078      	str	r0, [r7, #4]
#if LV_LMETER_LINE_UPSCALE > 0
    bool was_negative = false;
 801e690:	2300      	movs	r3, #0
 801e692:	73fb      	strb	r3, [r7, #15]
    if(x < 0) {
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	2b00      	cmp	r3, #0
 801e698:	da04      	bge.n	801e6a4 <lv_lmeter_coord_round+0x1c>
        was_negative = true;
 801e69a:	2301      	movs	r3, #1
 801e69c:	73fb      	strb	r3, [r7, #15]
        x            = -x;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	425b      	negs	r3, r3
 801e6a2:	607b      	str	r3, [r7, #4]
    }

    x = (x >> LV_LMETER_LINE_UPSCALE) + ((x & LV_LMETER_LINE_UPSCALE_MASK) >> (LV_LMETER_LINE_UPSCALE - 1));
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	115a      	asrs	r2, r3, #5
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	111b      	asrs	r3, r3, #4
 801e6ac:	f003 0301 	and.w	r3, r3, #1
 801e6b0:	4413      	add	r3, r2
 801e6b2:	607b      	str	r3, [r7, #4]

    if(was_negative) x = -x;
 801e6b4:	7bfb      	ldrb	r3, [r7, #15]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d002      	beq.n	801e6c0 <lv_lmeter_coord_round+0x38>
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	425b      	negs	r3, r3
 801e6be:	607b      	str	r3, [r7, #4]

    return x;
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	b21b      	sxth	r3, r3
#else
    return x;
#endif
}
 801e6c4:	4618      	mov	r0, r3
 801e6c6:	3714      	adds	r7, #20
 801e6c8:	46bd      	mov	sp, r7
 801e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ce:	4770      	bx	lr

0801e6d0 <lv_font_get_line_height>:
{
 801e6d0:	b480      	push	{r7}
 801e6d2:	b083      	sub	sp, #12
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	7a1b      	ldrb	r3, [r3, #8]
}
 801e6dc:	4618      	mov	r0, r3
 801e6de:	370c      	adds	r7, #12
 801e6e0:	46bd      	mov	sp, r7
 801e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e6:	4770      	bx	lr

0801e6e8 <lv_area_get_width>:
{
 801e6e8:	b480      	push	{r7}
 801e6ea:	b083      	sub	sp, #12
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e6f6:	b29a      	uxth	r2, r3
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6fe:	b29b      	uxth	r3, r3
 801e700:	1ad3      	subs	r3, r2, r3
 801e702:	b29b      	uxth	r3, r3
 801e704:	3301      	adds	r3, #1
 801e706:	b29b      	uxth	r3, r3
 801e708:	b21b      	sxth	r3, r3
}
 801e70a:	4618      	mov	r0, r3
 801e70c:	370c      	adds	r7, #12
 801e70e:	46bd      	mov	sp, r7
 801e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e714:	4770      	bx	lr

0801e716 <lv_cont_set_fit2>:
{
 801e716:	b580      	push	{r7, lr}
 801e718:	b084      	sub	sp, #16
 801e71a:	af02      	add	r7, sp, #8
 801e71c:	6078      	str	r0, [r7, #4]
 801e71e:	460b      	mov	r3, r1
 801e720:	70fb      	strb	r3, [r7, #3]
 801e722:	4613      	mov	r3, r2
 801e724:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801e726:	78b8      	ldrb	r0, [r7, #2]
 801e728:	78fa      	ldrb	r2, [r7, #3]
 801e72a:	78f9      	ldrb	r1, [r7, #3]
 801e72c:	78bb      	ldrb	r3, [r7, #2]
 801e72e:	9300      	str	r3, [sp, #0]
 801e730:	4603      	mov	r3, r0
 801e732:	6878      	ldr	r0, [r7, #4]
 801e734:	f7fc feb5 	bl	801b4a2 <lv_cont_set_fit4>
}
 801e738:	bf00      	nop
 801e73a:	3708      	adds	r7, #8
 801e73c:	46bd      	mov	sp, r7
 801e73e:	bd80      	pop	{r7, pc}

0801e740 <lv_cont_set_fit>:
{
 801e740:	b580      	push	{r7, lr}
 801e742:	b084      	sub	sp, #16
 801e744:	af02      	add	r7, sp, #8
 801e746:	6078      	str	r0, [r7, #4]
 801e748:	460b      	mov	r3, r1
 801e74a:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801e74c:	78f8      	ldrb	r0, [r7, #3]
 801e74e:	78fa      	ldrb	r2, [r7, #3]
 801e750:	78f9      	ldrb	r1, [r7, #3]
 801e752:	78fb      	ldrb	r3, [r7, #3]
 801e754:	9300      	str	r3, [sp, #0]
 801e756:	4603      	mov	r3, r0
 801e758:	6878      	ldr	r0, [r7, #4]
 801e75a:	f7fc fea2 	bl	801b4a2 <lv_cont_set_fit4>
}
 801e75e:	bf00      	nop
 801e760:	3708      	adds	r7, #8
 801e762:	46bd      	mov	sp, r7
 801e764:	bd80      	pop	{r7, pc}
	...

0801e768 <lv_mbox_create>:
 * @param copy pointer to a message box object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created message box
 */
lv_obj_t * lv_mbox_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801e768:	b580      	push	{r7, lr}
 801e76a:	b088      	sub	sp, #32
 801e76c:	af02      	add	r7, sp, #8
 801e76e:	6078      	str	r0, [r7, #4]
 801e770:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("mesasge box create started");

    /*Create the ancestor message box*/
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 801e772:	6839      	ldr	r1, [r7, #0]
 801e774:	6878      	ldr	r0, [r7, #4]
 801e776:	f7fc fdc3 	bl	801b300 <lv_cont_create>
 801e77a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_mbox);
 801e77c:	697b      	ldr	r3, [r7, #20]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d100      	bne.n	801e784 <lv_mbox_create+0x1c>
 801e782:	e7fe      	b.n	801e782 <lv_mbox_create+0x1a>
    if(new_mbox == NULL) return NULL;
 801e784:	697b      	ldr	r3, [r7, #20]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d101      	bne.n	801e78e <lv_mbox_create+0x26>
 801e78a:	2300      	movs	r3, #0
 801e78c:	e08c      	b.n	801e8a8 <lv_mbox_create+0x140>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_mbox);
 801e78e:	4b48      	ldr	r3, [pc, #288]	; (801e8b0 <lv_mbox_create+0x148>)
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	2b00      	cmp	r3, #0
 801e794:	d105      	bne.n	801e7a2 <lv_mbox_create+0x3a>
 801e796:	6978      	ldr	r0, [r7, #20]
 801e798:	f7eb ffff 	bl	800a79a <lv_obj_get_signal_cb>
 801e79c:	4602      	mov	r2, r0
 801e79e:	4b44      	ldr	r3, [pc, #272]	; (801e8b0 <lv_mbox_create+0x148>)
 801e7a0:	601a      	str	r2, [r3, #0]

    /*Allocate the message box type specific extended data*/
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 801e7a2:	2110      	movs	r1, #16
 801e7a4:	6978      	ldr	r0, [r7, #20]
 801e7a6:	f7eb fe43 	bl	800a430 <lv_obj_allocate_ext_attr>
 801e7aa:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801e7ac:	693b      	ldr	r3, [r7, #16]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d100      	bne.n	801e7b4 <lv_mbox_create+0x4c>
 801e7b2:	e7fe      	b.n	801e7b2 <lv_mbox_create+0x4a>
    if(ext == NULL) return NULL;
 801e7b4:	693b      	ldr	r3, [r7, #16]
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d101      	bne.n	801e7be <lv_mbox_create+0x56>
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	e074      	b.n	801e8a8 <lv_mbox_create+0x140>

    ext->text = NULL;
 801e7be:	693b      	ldr	r3, [r7, #16]
 801e7c0:	2200      	movs	r2, #0
 801e7c2:	605a      	str	r2, [r3, #4]
    ext->btnm = NULL;
 801e7c4:	693b      	ldr	r3, [r7, #16]
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	609a      	str	r2, [r3, #8]
#if LV_USE_ANIMATION
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 801e7ca:	693b      	ldr	r3, [r7, #16]
 801e7cc:	22c8      	movs	r2, #200	; 0xc8
 801e7ce:	819a      	strh	r2, [r3, #12]
#endif

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 801e7d0:	4938      	ldr	r1, [pc, #224]	; (801e8b4 <lv_mbox_create+0x14c>)
 801e7d2:	6978      	ldr	r0, [r7, #20]
 801e7d4:	f7eb fe10 	bl	800a3f8 <lv_obj_set_signal_cb>

    /*Init the new message box message box*/
    if(copy == NULL) {
 801e7d8:	683b      	ldr	r3, [r7, #0]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d146      	bne.n	801e86c <lv_mbox_create+0x104>
        ext->text = lv_label_create(new_mbox, NULL);
 801e7de:	2100      	movs	r1, #0
 801e7e0:	6978      	ldr	r0, [r7, #20]
 801e7e2:	f7fe f935 	bl	801ca50 <lv_label_create>
 801e7e6:	4602      	mov	r2, r0
 801e7e8:	693b      	ldr	r3, [r7, #16]
 801e7ea:	605a      	str	r2, [r3, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801e7ec:	693b      	ldr	r3, [r7, #16]
 801e7ee:	685b      	ldr	r3, [r3, #4]
 801e7f0:	2101      	movs	r1, #1
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7fe fb56 	bl	801cea4 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 801e7f8:	693b      	ldr	r3, [r7, #16]
 801e7fa:	685b      	ldr	r3, [r3, #4]
 801e7fc:	2101      	movs	r1, #1
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7fe faf4 	bl	801cdec <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 801e804:	693b      	ldr	r3, [r7, #16]
 801e806:	685b      	ldr	r3, [r3, #4]
 801e808:	492b      	ldr	r1, [pc, #172]	; (801e8b8 <lv_mbox_create+0x150>)
 801e80a:	4618      	mov	r0, r3
 801e80c:	f7fe fa52 	bl	801ccb4 <lv_label_set_text>

        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 801e810:	2103      	movs	r1, #3
 801e812:	6978      	ldr	r0, [r7, #20]
 801e814:	f7fc fe1e 	bl	801b454 <lv_cont_set_layout>
        lv_cont_set_fit2(new_mbox, LV_FIT_NONE, LV_FIT_TIGHT);
 801e818:	2201      	movs	r2, #1
 801e81a:	2100      	movs	r1, #0
 801e81c:	6978      	ldr	r0, [r7, #20]
 801e81e:	f7ff ff7a 	bl	801e716 <lv_cont_set_fit2>
        lv_obj_set_width(new_mbox, LV_DPI * 2);
 801e822:	21c8      	movs	r1, #200	; 0xc8
 801e824:	6978      	ldr	r0, [r7, #20]
 801e826:	f7ea ffd1 	bl	80097cc <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 801e82a:	2300      	movs	r3, #0
 801e82c:	9300      	str	r3, [sp, #0]
 801e82e:	2300      	movs	r3, #0
 801e830:	2200      	movs	r2, #0
 801e832:	2100      	movs	r1, #0
 801e834:	6978      	ldr	r0, [r7, #20]
 801e836:	f7ea fff3 	bl	8009820 <lv_obj_align>
        lv_obj_set_event_cb(new_mbox, lv_mbox_default_event_cb);
 801e83a:	4920      	ldr	r1, [pc, #128]	; (801e8bc <lv_mbox_create+0x154>)
 801e83c:	6978      	ldr	r0, [r7, #20]
 801e83e:	f7eb fd3c 	bl	800a2ba <lv_obj_set_event_cb>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801e842:	f003 fe45 	bl	80224d0 <lv_theme_get_current>
 801e846:	60b8      	str	r0, [r7, #8]
        if(th) {
 801e848:	68bb      	ldr	r3, [r7, #8]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d008      	beq.n	801e860 <lv_mbox_create+0xf8>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->style.mbox.bg);
 801e84e:	68bb      	ldr	r3, [r7, #8]
 801e850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801e854:	461a      	mov	r2, r3
 801e856:	2100      	movs	r1, #0
 801e858:	6978      	ldr	r0, [r7, #20]
 801e85a:	f000 f921 	bl	801eaa0 <lv_mbox_set_style>
 801e85e:	e022      	b.n	801e8a6 <lv_mbox_create+0x13e>
        } else {
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 801e860:	4a17      	ldr	r2, [pc, #92]	; (801e8c0 <lv_mbox_create+0x158>)
 801e862:	2100      	movs	r1, #0
 801e864:	6978      	ldr	r0, [r7, #20]
 801e866:	f000 f91b 	bl	801eaa0 <lv_mbox_set_style>
 801e86a:	e01c      	b.n	801e8a6 <lv_mbox_create+0x13e>
        }

    }
    /*Copy an existing message box*/
    else {
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801e86c:	6838      	ldr	r0, [r7, #0]
 801e86e:	f7eb ffac 	bl	800a7ca <lv_obj_get_ext_attr>
 801e872:	60f8      	str	r0, [r7, #12]

        ext->text = lv_label_create(new_mbox, copy_ext->text);
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	685b      	ldr	r3, [r3, #4]
 801e878:	4619      	mov	r1, r3
 801e87a:	6978      	ldr	r0, [r7, #20]
 801e87c:	f7fe f8e8 	bl	801ca50 <lv_label_create>
 801e880:	4602      	mov	r2, r0
 801e882:	693b      	ldr	r3, [r7, #16]
 801e884:	605a      	str	r2, [r3, #4]

        /*Copy the buttons and the label on them*/
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 801e886:	68fb      	ldr	r3, [r7, #12]
 801e888:	689b      	ldr	r3, [r3, #8]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d008      	beq.n	801e8a0 <lv_mbox_create+0x138>
 801e88e:	68fb      	ldr	r3, [r7, #12]
 801e890:	689b      	ldr	r3, [r3, #8]
 801e892:	4619      	mov	r1, r3
 801e894:	6978      	ldr	r0, [r7, #20]
 801e896:	f7fa fdcd 	bl	8019434 <lv_btnm_create>
 801e89a:	4602      	mov	r2, r0
 801e89c:	693b      	ldr	r3, [r7, #16]
 801e89e:	609a      	str	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_mbox);
 801e8a0:	6978      	ldr	r0, [r7, #20]
 801e8a2:	f7eb fc74 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("mesasge box created");

    return new_mbox;
 801e8a6:	697b      	ldr	r3, [r7, #20]
}
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	3718      	adds	r7, #24
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	200177e0 	.word	0x200177e0
 801e8b4:	0801ec65 	.word	0x0801ec65
 801e8b8:	0802d508 	.word	0x0802d508
 801e8bc:	0801eeed 	.word	0x0801eeed
 801e8c0:	2001b950 	.word	0x2001b950

0801e8c4 <lv_mbox_add_btns>:
 * @param mbox pointer to message box object
 * @param btn_map button descriptor (button matrix map).
 *                E.g.  a const char *txt[] = {"ok", "close", ""} (Can not be local variable)
 */
void lv_mbox_add_btns(lv_obj_t * mbox, const char ** btn_map)
{
 801e8c4:	b580      	push	{r7, lr}
 801e8c6:	b084      	sub	sp, #16
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	6078      	str	r0, [r7, #4]
 801e8cc:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e8ce:	6878      	ldr	r0, [r7, #4]
 801e8d0:	f7eb ff7b 	bl	800a7ca <lv_obj_get_ext_attr>
 801e8d4:	60f8      	str	r0, [r7, #12]

    /*Create a button matrix if not exists yet*/
    if(ext->btnm == NULL) {
 801e8d6:	68fb      	ldr	r3, [r7, #12]
 801e8d8:	689b      	ldr	r3, [r3, #8]
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d12c      	bne.n	801e938 <lv_mbox_add_btns+0x74>
        ext->btnm = lv_btnm_create(mbox, NULL);
 801e8de:	2100      	movs	r1, #0
 801e8e0:	6878      	ldr	r0, [r7, #4]
 801e8e2:	f7fa fda7 	bl	8019434 <lv_btnm_create>
 801e8e6:	4602      	mov	r2, r0
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	609a      	str	r2, [r3, #8]

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801e8ec:	f003 fdf0 	bl	80224d0 <lv_theme_get_current>
 801e8f0:	60b8      	str	r0, [r7, #8]
        if(th) {
 801e8f2:	68bb      	ldr	r3, [r7, #8]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d018      	beq.n	801e92a <lv_mbox_add_btns+0x66>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->style.mbox.btn.bg);
 801e8f8:	68bb      	ldr	r3, [r7, #8]
 801e8fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801e8fe:	461a      	mov	r2, r3
 801e900:	2101      	movs	r1, #1
 801e902:	6878      	ldr	r0, [r7, #4]
 801e904:	f000 f8cc 	bl	801eaa0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->style.mbox.btn.rel);
 801e908:	68bb      	ldr	r3, [r7, #8]
 801e90a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801e90e:	461a      	mov	r2, r3
 801e910:	2102      	movs	r1, #2
 801e912:	6878      	ldr	r0, [r7, #4]
 801e914:	f000 f8c4 	bl	801eaa0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->style.mbox.btn.pr);
 801e918:	68bb      	ldr	r3, [r7, #8]
 801e91a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801e91e:	461a      	mov	r2, r3
 801e920:	2103      	movs	r1, #3
 801e922:	6878      	ldr	r0, [r7, #4]
 801e924:	f000 f8bc 	bl	801eaa0 <lv_mbox_set_style>
 801e928:	e006      	b.n	801e938 <lv_mbox_add_btns+0x74>
        } else {
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	689b      	ldr	r3, [r3, #8]
 801e92e:	4a0f      	ldr	r2, [pc, #60]	; (801e96c <lv_mbox_add_btns+0xa8>)
 801e930:	2100      	movs	r1, #0
 801e932:	4618      	mov	r0, r3
 801e934:	f7fb f810 	bl	8019958 <lv_btnm_set_style>
        }
    }

    lv_btnm_set_map(ext->btnm, btn_map);
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	689b      	ldr	r3, [r3, #8]
 801e93c:	6839      	ldr	r1, [r7, #0]
 801e93e:	4618      	mov	r0, r3
 801e940:	f7fa fe60 	bl	8019604 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl_all(ext->btnm, LV_BTNM_CTRL_CLICK_TRIG | LV_BTNM_CTRL_NO_REPEAT);
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	689b      	ldr	r3, [r3, #8]
 801e948:	f44f 7188 	mov.w	r1, #272	; 0x110
 801e94c:	4618      	mov	r0, r3
 801e94e:	f7fb f8a6 	bl	8019a9e <lv_btnm_set_btn_ctrl_all>
    lv_obj_set_parent_event(ext->btnm, true);
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	689b      	ldr	r3, [r3, #8]
 801e956:	2101      	movs	r1, #1
 801e958:	4618      	mov	r0, r3
 801e95a:	f7eb fc6d 	bl	800a238 <lv_obj_set_parent_event>

    mbox_realign(mbox);
 801e95e:	6878      	ldr	r0, [r7, #4]
 801e960:	f000 fa52 	bl	801ee08 <mbox_realign>
}
 801e964:	bf00      	nop
 801e966:	3710      	adds	r7, #16
 801e968:	46bd      	mov	sp, r7
 801e96a:	bd80      	pop	{r7, pc}
 801e96c:	2001ba04 	.word	0x2001ba04

0801e970 <lv_mbox_set_text>:
 * Set the text of the message box
 * @param mbox pointer to a message box
 * @param txt a '\0' terminated character string which will be the message box text
 */
void lv_mbox_set_text(lv_obj_t * mbox, const char * txt)
{
 801e970:	b580      	push	{r7, lr}
 801e972:	b084      	sub	sp, #16
 801e974:	af00      	add	r7, sp, #0
 801e976:	6078      	str	r0, [r7, #4]
 801e978:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e97a:	6878      	ldr	r0, [r7, #4]
 801e97c:	f7eb ff25 	bl	800a7ca <lv_obj_get_ext_attr>
 801e980:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->text, txt);
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	685b      	ldr	r3, [r3, #4]
 801e986:	6839      	ldr	r1, [r7, #0]
 801e988:	4618      	mov	r0, r3
 801e98a:	f7fe f993 	bl	801ccb4 <lv_label_set_text>

    mbox_realign(mbox);
 801e98e:	6878      	ldr	r0, [r7, #4]
 801e990:	f000 fa3a 	bl	801ee08 <mbox_realign>
}
 801e994:	bf00      	nop
 801e996:	3710      	adds	r7, #16
 801e998:	46bd      	mov	sp, r7
 801e99a:	bd80      	pop	{r7, pc}

0801e99c <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 801e99c:	b580      	push	{r7, lr}
 801e99e:	b08c      	sub	sp, #48	; 0x30
 801e9a0:	af00      	add	r7, sp, #0
 801e9a2:	6078      	str	r0, [r7, #4]
 801e9a4:	460b      	mov	r3, r1
 801e9a6:	807b      	strh	r3, [r7, #2]
#if LV_USE_ANIMATION
    if(lv_mbox_get_anim_time(mbox) != 0) {
 801e9a8:	6878      	ldr	r0, [r7, #4]
 801e9aa:	f000 f8ee 	bl	801eb8a <lv_mbox_get_anim_time>
 801e9ae:	4603      	mov	r3, r0
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d040      	beq.n	801ea36 <lv_mbox_start_auto_close+0x9a>
        /*Add shrinking animations*/
        lv_anim_t a;
        a.var            = mbox;
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	60bb      	str	r3, [r7, #8]
        a.start          = lv_obj_get_height(mbox);
 801e9b8:	6878      	ldr	r0, [r7, #4]
 801e9ba:	f7eb fe29 	bl	800a610 <lv_obj_get_height>
 801e9be:	4603      	mov	r3, r0
 801e9c0:	61bb      	str	r3, [r7, #24]
        a.end            = 0;
 801e9c2:	2300      	movs	r3, #0
 801e9c4:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_height;
 801e9c6:	4b32      	ldr	r3, [pc, #200]	; (801ea90 <lv_mbox_start_auto_close+0xf4>)
 801e9c8:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801e9ca:	4b32      	ldr	r3, [pc, #200]	; (801ea94 <lv_mbox_start_auto_close+0xf8>)
 801e9cc:	613b      	str	r3, [r7, #16]
        a.ready_cb       = NULL;
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801e9d2:	887b      	ldrh	r3, [r7, #2]
 801e9d4:	425b      	negs	r3, r3
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	b21b      	sxth	r3, r3
 801e9da:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = lv_mbox_get_anim_time(mbox);
 801e9dc:	6878      	ldr	r0, [r7, #4]
 801e9de:	f000 f8d4 	bl	801eb8a <lv_mbox_get_anim_time>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801e9e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e9ea:	f36f 0300 	bfc	r3, #0, #1
 801e9ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801e9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e9fa:	f36f 0341 	bfc	r3, #1, #1
 801e9fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801ea02:	2300      	movs	r3, #0
 801ea04:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801ea06:	f107 0308 	add.w	r3, r7, #8
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f7f7 f9a8 	bl	8015d60 <lv_anim_create>

        a.start    = lv_obj_get_width(mbox);
 801ea10:	6878      	ldr	r0, [r7, #4]
 801ea12:	f7eb fdef 	bl	800a5f4 <lv_obj_get_width>
 801ea16:	4603      	mov	r3, r0
 801ea18:	61bb      	str	r3, [r7, #24]
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 801ea1a:	4b1f      	ldr	r3, [pc, #124]	; (801ea98 <lv_mbox_start_auto_close+0xfc>)
 801ea1c:	60fb      	str	r3, [r7, #12]
        a.ready_cb = lv_mbox_close_ready_cb;
 801ea1e:	4b1f      	ldr	r3, [pc, #124]	; (801ea9c <lv_mbox_start_auto_close+0x100>)
 801ea20:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 801ea22:	f107 0308 	add.w	r3, r7, #8
 801ea26:	4618      	mov	r0, r3
 801ea28:	f7f7 f99a 	bl	8015d60 <lv_anim_create>

        /*Disable fit to let shrinking work*/
        lv_cont_set_fit(mbox, LV_FIT_NONE);
 801ea2c:	2100      	movs	r1, #0
 801ea2e:	6878      	ldr	r0, [r7, #4]
 801ea30:	f7ff fe86 	bl	801e740 <lv_cont_set_fit>
    }
#else
    (void)delay; /*Unused*/
    lv_obj_del(mbox);
#endif
}
 801ea34:	e027      	b.n	801ea86 <lv_mbox_start_auto_close+0xea>
        a.var            = mbox;
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	60bb      	str	r3, [r7, #8]
        a.start          = 0;
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 801ea3e:	2301      	movs	r3, #1
 801ea40:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)NULL;
 801ea42:	2300      	movs	r3, #0
 801ea44:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801ea46:	4b13      	ldr	r3, [pc, #76]	; (801ea94 <lv_mbox_start_auto_close+0xf8>)
 801ea48:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_mbox_close_ready_cb;
 801ea4a:	4b14      	ldr	r3, [pc, #80]	; (801ea9c <lv_mbox_start_auto_close+0x100>)
 801ea4c:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801ea4e:	887b      	ldrh	r3, [r7, #2]
 801ea50:	425b      	negs	r3, r3
 801ea52:	b29b      	uxth	r3, r3
 801ea54:	b21b      	sxth	r3, r3
 801ea56:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = 0;
 801ea58:	2300      	movs	r3, #0
 801ea5a:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801ea5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ea60:	f36f 0300 	bfc	r3, #0, #1
 801ea64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801ea68:	2300      	movs	r3, #0
 801ea6a:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801ea6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ea70:	f36f 0341 	bfc	r3, #1, #1
 801ea74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801ea78:	2300      	movs	r3, #0
 801ea7a:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801ea7c:	f107 0308 	add.w	r3, r7, #8
 801ea80:	4618      	mov	r0, r3
 801ea82:	f7f7 f96d 	bl	8015d60 <lv_anim_create>
}
 801ea86:	bf00      	nop
 801ea88:	3730      	adds	r7, #48	; 0x30
 801ea8a:	46bd      	mov	sp, r7
 801ea8c:	bd80      	pop	{r7, pc}
 801ea8e:	bf00      	nop
 801ea90:	080097f7 	.word	0x080097f7
 801ea94:	08015eb1 	.word	0x08015eb1
 801ea98:	080097cd 	.word	0x080097cd
 801ea9c:	0801eed3 	.word	0x0801eed3

0801eaa0 <lv_mbox_set_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_mbox_set_style(lv_obj_t * mbox, lv_mbox_style_t type, const lv_style_t * style)
{
 801eaa0:	b580      	push	{r7, lr}
 801eaa2:	b086      	sub	sp, #24
 801eaa4:	af00      	add	r7, sp, #0
 801eaa6:	60f8      	str	r0, [r7, #12]
 801eaa8:	460b      	mov	r3, r1
 801eaaa:	607a      	str	r2, [r7, #4]
 801eaac:	72fb      	strb	r3, [r7, #11]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801eaae:	68f8      	ldr	r0, [r7, #12]
 801eab0:	f7eb fe8b 	bl	800a7ca <lv_obj_get_ext_attr>
 801eab4:	6178      	str	r0, [r7, #20]

    switch(type) {
 801eab6:	7afb      	ldrb	r3, [r7, #11]
 801eab8:	2b06      	cmp	r3, #6
 801eaba:	d846      	bhi.n	801eb4a <lv_mbox_set_style+0xaa>
 801eabc:	a201      	add	r2, pc, #4	; (adr r2, 801eac4 <lv_mbox_set_style+0x24>)
 801eabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eac2:	bf00      	nop
 801eac4:	0801eae1 	.word	0x0801eae1
 801eac8:	0801eaeb 	.word	0x0801eaeb
 801eacc:	0801eafb 	.word	0x0801eafb
 801ead0:	0801eb0b 	.word	0x0801eb0b
 801ead4:	0801eb1b 	.word	0x0801eb1b
 801ead8:	0801eb2b 	.word	0x0801eb2b
 801eadc:	0801eb3b 	.word	0x0801eb3b
        case LV_MBOX_STYLE_BG: lv_obj_set_style(mbox, style); break;
 801eae0:	6879      	ldr	r1, [r7, #4]
 801eae2:	68f8      	ldr	r0, [r7, #12]
 801eae4:	f7eb fb41 	bl	800a16a <lv_obj_set_style>
 801eae8:	e02f      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_BG: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style); break;
 801eaea:	697b      	ldr	r3, [r7, #20]
 801eaec:	689b      	ldr	r3, [r3, #8]
 801eaee:	687a      	ldr	r2, [r7, #4]
 801eaf0:	2100      	movs	r1, #0
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7fa ff30 	bl	8019958 <lv_btnm_set_style>
 801eaf8:	e027      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style); break;
 801eafa:	697b      	ldr	r3, [r7, #20]
 801eafc:	689b      	ldr	r3, [r3, #8]
 801eafe:	687a      	ldr	r2, [r7, #4]
 801eb00:	2101      	movs	r1, #1
 801eb02:	4618      	mov	r0, r3
 801eb04:	f7fa ff28 	bl	8019958 <lv_btnm_set_style>
 801eb08:	e01f      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style); break;
 801eb0a:	697b      	ldr	r3, [r7, #20]
 801eb0c:	689b      	ldr	r3, [r3, #8]
 801eb0e:	687a      	ldr	r2, [r7, #4]
 801eb10:	2102      	movs	r1, #2
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7fa ff20 	bl	8019958 <lv_btnm_set_style>
 801eb18:	e017      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 801eb1a:	697b      	ldr	r3, [r7, #20]
 801eb1c:	689b      	ldr	r3, [r3, #8]
 801eb1e:	687a      	ldr	r2, [r7, #4]
 801eb20:	2103      	movs	r1, #3
 801eb22:	4618      	mov	r0, r3
 801eb24:	f7fa ff18 	bl	8019958 <lv_btnm_set_style>
 801eb28:	e00f      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 801eb2a:	697b      	ldr	r3, [r7, #20]
 801eb2c:	689b      	ldr	r3, [r3, #8]
 801eb2e:	687a      	ldr	r2, [r7, #4]
 801eb30:	2104      	movs	r1, #4
 801eb32:	4618      	mov	r0, r3
 801eb34:	f7fa ff10 	bl	8019958 <lv_btnm_set_style>
 801eb38:	e007      	b.n	801eb4a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 801eb3a:	697b      	ldr	r3, [r7, #20]
 801eb3c:	689b      	ldr	r3, [r3, #8]
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	2105      	movs	r1, #5
 801eb42:	4618      	mov	r0, r3
 801eb44:	f7fa ff08 	bl	8019958 <lv_btnm_set_style>
 801eb48:	bf00      	nop
    }

    mbox_realign(mbox);
 801eb4a:	68f8      	ldr	r0, [r7, #12]
 801eb4c:	f000 f95c 	bl	801ee08 <mbox_realign>
}
 801eb50:	bf00      	nop
 801eb52:	3718      	adds	r7, #24
 801eb54:	46bd      	mov	sp, r7
 801eb56:	bd80      	pop	{r7, pc}

0801eb58 <lv_mbox_get_active_btn>:
 * Useful in the the `event_cb`.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_mbox_get_active_btn(lv_obj_t * mbox)
{
 801eb58:	b580      	push	{r7, lr}
 801eb5a:	b084      	sub	sp, #16
 801eb5c:	af00      	add	r7, sp, #0
 801eb5e:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801eb60:	6878      	ldr	r0, [r7, #4]
 801eb62:	f7eb fe32 	bl	800a7ca <lv_obj_get_ext_attr>
 801eb66:	60f8      	str	r0, [r7, #12]
    if(ext->btnm)
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	689b      	ldr	r3, [r3, #8]
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	d006      	beq.n	801eb7e <lv_mbox_get_active_btn+0x26>
        return lv_btnm_get_active_btn(ext->btnm);
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	689b      	ldr	r3, [r3, #8]
 801eb74:	4618      	mov	r0, r3
 801eb76:	f7fa ffde 	bl	8019b36 <lv_btnm_get_active_btn>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	e001      	b.n	801eb82 <lv_mbox_get_active_btn+0x2a>
    else
        return LV_BTNM_BTN_NONE;
 801eb7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801eb82:	4618      	mov	r0, r3
 801eb84:	3710      	adds	r7, #16
 801eb86:	46bd      	mov	sp, r7
 801eb88:	bd80      	pop	{r7, pc}

0801eb8a <lv_mbox_get_anim_time>:
 * Get the animation duration (close animation time)
 * @param mbox pointer to a message box object
 * @return animation length in  milliseconds (0: no animation)
 */
uint16_t lv_mbox_get_anim_time(const lv_obj_t * mbox)
{
 801eb8a:	b580      	push	{r7, lr}
 801eb8c:	b084      	sub	sp, #16
 801eb8e:	af00      	add	r7, sp, #0
 801eb90:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801eb92:	6878      	ldr	r0, [r7, #4]
 801eb94:	f7eb fe19 	bl	800a7ca <lv_obj_get_ext_attr>
 801eb98:	60f8      	str	r0, [r7, #12]
    return ext->anim_time;
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	899b      	ldrh	r3, [r3, #12]
#else
    (void)mbox;
    return 0;
#endif
}
 801eb9e:	4618      	mov	r0, r3
 801eba0:	3710      	adds	r7, #16
 801eba2:	46bd      	mov	sp, r7
 801eba4:	bd80      	pop	{r7, pc}
	...

0801eba8 <lv_mbox_get_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_mbox_get_style(const lv_obj_t * mbox, lv_mbox_style_t type)
{
 801eba8:	b580      	push	{r7, lr}
 801ebaa:	b084      	sub	sp, #16
 801ebac:	af00      	add	r7, sp, #0
 801ebae:	6078      	str	r0, [r7, #4]
 801ebb0:	460b      	mov	r3, r1
 801ebb2:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	60fb      	str	r3, [r7, #12]
    lv_mbox_ext_t * ext      = lv_obj_get_ext_attr(mbox);
 801ebb8:	6878      	ldr	r0, [r7, #4]
 801ebba:	f7eb fe06 	bl	800a7ca <lv_obj_get_ext_attr>
 801ebbe:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801ebc0:	78fb      	ldrb	r3, [r7, #3]
 801ebc2:	2b06      	cmp	r3, #6
 801ebc4:	d845      	bhi.n	801ec52 <lv_mbox_get_style+0xaa>
 801ebc6:	a201      	add	r2, pc, #4	; (adr r2, 801ebcc <lv_mbox_get_style+0x24>)
 801ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ebcc:	0801ebe9 	.word	0x0801ebe9
 801ebd0:	0801ebf3 	.word	0x0801ebf3
 801ebd4:	0801ec03 	.word	0x0801ec03
 801ebd8:	0801ec13 	.word	0x0801ec13
 801ebdc:	0801ec23 	.word	0x0801ec23
 801ebe0:	0801ec33 	.word	0x0801ec33
 801ebe4:	0801ec43 	.word	0x0801ec43
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 801ebe8:	6878      	ldr	r0, [r7, #4]
 801ebea:	f7eb fd33 	bl	800a654 <lv_obj_get_style>
 801ebee:	60f8      	str	r0, [r7, #12]
 801ebf0:	e032      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG); break;
 801ebf2:	68bb      	ldr	r3, [r7, #8]
 801ebf4:	689b      	ldr	r3, [r3, #8]
 801ebf6:	2100      	movs	r1, #0
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	f7fa ffcf 	bl	8019b9c <lv_btnm_get_style>
 801ebfe:	60f8      	str	r0, [r7, #12]
 801ec00:	e02a      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL); break;
 801ec02:	68bb      	ldr	r3, [r7, #8]
 801ec04:	689b      	ldr	r3, [r3, #8]
 801ec06:	2101      	movs	r1, #1
 801ec08:	4618      	mov	r0, r3
 801ec0a:	f7fa ffc7 	bl	8019b9c <lv_btnm_get_style>
 801ec0e:	60f8      	str	r0, [r7, #12]
 801ec10:	e022      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR); break;
 801ec12:	68bb      	ldr	r3, [r7, #8]
 801ec14:	689b      	ldr	r3, [r3, #8]
 801ec16:	2102      	movs	r1, #2
 801ec18:	4618      	mov	r0, r3
 801ec1a:	f7fa ffbf 	bl	8019b9c <lv_btnm_get_style>
 801ec1e:	60f8      	str	r0, [r7, #12]
 801ec20:	e01a      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL); break;
 801ec22:	68bb      	ldr	r3, [r7, #8]
 801ec24:	689b      	ldr	r3, [r3, #8]
 801ec26:	2103      	movs	r1, #3
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f7fa ffb7 	bl	8019b9c <lv_btnm_get_style>
 801ec2e:	60f8      	str	r0, [r7, #12]
 801ec30:	e012      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR); break;
 801ec32:	68bb      	ldr	r3, [r7, #8]
 801ec34:	689b      	ldr	r3, [r3, #8]
 801ec36:	2104      	movs	r1, #4
 801ec38:	4618      	mov	r0, r3
 801ec3a:	f7fa ffaf 	bl	8019b9c <lv_btnm_get_style>
 801ec3e:	60f8      	str	r0, [r7, #12]
 801ec40:	e00a      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 801ec42:	68bb      	ldr	r3, [r7, #8]
 801ec44:	689b      	ldr	r3, [r3, #8]
 801ec46:	2105      	movs	r1, #5
 801ec48:	4618      	mov	r0, r3
 801ec4a:	f7fa ffa7 	bl	8019b9c <lv_btnm_get_style>
 801ec4e:	60f8      	str	r0, [r7, #12]
 801ec50:	e002      	b.n	801ec58 <lv_mbox_get_style+0xb0>
        default: style = NULL; break;
 801ec52:	2300      	movs	r3, #0
 801ec54:	60fb      	str	r3, [r7, #12]
 801ec56:	bf00      	nop
    }

    return style;
 801ec58:	68fb      	ldr	r3, [r7, #12]
}
 801ec5a:	4618      	mov	r0, r3
 801ec5c:	3710      	adds	r7, #16
 801ec5e:	46bd      	mov	sp, r7
 801ec60:	bd80      	pop	{r7, pc}
 801ec62:	bf00      	nop

0801ec64 <lv_mbox_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_mbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)
{
 801ec64:	b590      	push	{r4, r7, lr}
 801ec66:	b08d      	sub	sp, #52	; 0x34
 801ec68:	af00      	add	r7, sp, #0
 801ec6a:	60f8      	str	r0, [r7, #12]
 801ec6c:	460b      	mov	r3, r1
 801ec6e:	607a      	str	r2, [r7, #4]
 801ec70:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /*Translate LV_KEY_UP/DOWN to LV_KEY_LEFT/RIGHT */
    char c_trans = 0;
 801ec72:	2300      	movs	r3, #0
 801ec74:	75fb      	strb	r3, [r7, #23]
    if(sign == LV_SIGNAL_CONTROL) {
 801ec76:	7afb      	ldrb	r3, [r7, #11]
 801ec78:	2b11      	cmp	r3, #17
 801ec7a:	d10f      	bne.n	801ec9c <lv_mbox_signal+0x38>
        c_trans = *((char *)param);
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	781b      	ldrb	r3, [r3, #0]
 801ec80:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 801ec82:	7dfb      	ldrb	r3, [r7, #23]
 801ec84:	2b12      	cmp	r3, #18
 801ec86:	d101      	bne.n	801ec8c <lv_mbox_signal+0x28>
 801ec88:	2314      	movs	r3, #20
 801ec8a:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 801ec8c:	7dfb      	ldrb	r3, [r7, #23]
 801ec8e:	2b11      	cmp	r3, #17
 801ec90:	d101      	bne.n	801ec96 <lv_mbox_signal+0x32>
 801ec92:	2313      	movs	r3, #19
 801ec94:	75fb      	strb	r3, [r7, #23]

        param = &c_trans;
 801ec96:	f107 0317 	add.w	r3, r7, #23
 801ec9a:	607b      	str	r3, [r7, #4]
    }

    /* Include the ancient signal function */
    res = ancestor_signal(mbox, sign, param);
 801ec9c:	4b58      	ldr	r3, [pc, #352]	; (801ee00 <lv_mbox_signal+0x19c>)
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	7af9      	ldrb	r1, [r7, #11]
 801eca2:	687a      	ldr	r2, [r7, #4]
 801eca4:	68f8      	ldr	r0, [r7, #12]
 801eca6:	4798      	blx	r3
 801eca8:	4603      	mov	r3, r0
 801ecaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(res != LV_RES_OK) return res;
 801ecae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ecb2:	2b01      	cmp	r3, #1
 801ecb4:	d002      	beq.n	801ecbc <lv_mbox_signal+0x58>
 801ecb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ecba:	e09c      	b.n	801edf6 <lv_mbox_signal+0x192>

    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801ecbc:	68f8      	ldr	r0, [r7, #12]
 801ecbe:	f7eb fd84 	bl	800a7ca <lv_obj_get_ext_attr>
 801ecc2:	62b8      	str	r0, [r7, #40]	; 0x28
    if(sign == LV_SIGNAL_CORD_CHG) {
 801ecc4:	7afb      	ldrb	r3, [r7, #11]
 801ecc6:	2b02      	cmp	r3, #2
 801ecc8:	d10f      	bne.n	801ecea <lv_mbox_signal+0x86>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 801ecca:	68f8      	ldr	r0, [r7, #12]
 801eccc:	f7eb fc92 	bl	800a5f4 <lv_obj_get_width>
 801ecd0:	4603      	mov	r3, r0
 801ecd2:	461c      	mov	r4, r3
 801ecd4:	6878      	ldr	r0, [r7, #4]
 801ecd6:	f7ff fd07 	bl	801e6e8 <lv_area_get_width>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	429c      	cmp	r4, r3
 801ecde:	f000 8088 	beq.w	801edf2 <lv_mbox_signal+0x18e>
            mbox_realign(mbox);
 801ece2:	68f8      	ldr	r0, [r7, #12]
 801ece4:	f000 f890 	bl	801ee08 <mbox_realign>
 801ece8:	e083      	b.n	801edf2 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801ecea:	7afb      	ldrb	r3, [r7, #11]
 801ecec:	2b04      	cmp	r3, #4
 801ecee:	d103      	bne.n	801ecf8 <lv_mbox_signal+0x94>
        mbox_realign(mbox);
 801ecf0:	68f8      	ldr	r0, [r7, #12]
 801ecf2:	f000 f889 	bl	801ee08 <mbox_realign>
 801ecf6:	e07c      	b.n	801edf2 <lv_mbox_signal+0x18e>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801ecf8:	7afb      	ldrb	r3, [r7, #11]
 801ecfa:	2b0a      	cmp	r3, #10
 801ecfc:	d117      	bne.n	801ed2e <lv_mbox_signal+0xca>
        if(ext->btnm) {
 801ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed00:	689b      	ldr	r3, [r3, #8]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d075      	beq.n	801edf2 <lv_mbox_signal+0x18e>
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 801ed06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed08:	689b      	ldr	r3, [r3, #8]
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	f7fa ff13 	bl	8019b36 <lv_btnm_get_active_btn>
 801ed10:	4603      	mov	r3, r0
 801ed12:	613b      	str	r3, [r7, #16]
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801ed14:	693b      	ldr	r3, [r7, #16]
 801ed16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed1a:	4293      	cmp	r3, r2
 801ed1c:	d069      	beq.n	801edf2 <lv_mbox_signal+0x18e>
 801ed1e:	f107 0310 	add.w	r3, r7, #16
 801ed22:	461a      	mov	r2, r3
 801ed24:	210e      	movs	r1, #14
 801ed26:	68f8      	ldr	r0, [r7, #12]
 801ed28:	f7eb fad5 	bl	800a2d6 <lv_event_send>
 801ed2c:	e061      	b.n	801edf2 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL ||
 801ed2e:	7afb      	ldrb	r3, [r7, #11]
 801ed30:	2b0f      	cmp	r3, #15
 801ed32:	d008      	beq.n	801ed46 <lv_mbox_signal+0xe2>
 801ed34:	7afb      	ldrb	r3, [r7, #11]
 801ed36:	2b10      	cmp	r3, #16
 801ed38:	d005      	beq.n	801ed46 <lv_mbox_signal+0xe2>
 801ed3a:	7afb      	ldrb	r3, [r7, #11]
 801ed3c:	2b11      	cmp	r3, #17
 801ed3e:	d002      	beq.n	801ed46 <lv_mbox_signal+0xe2>
 801ed40:	7afb      	ldrb	r3, [r7, #11]
 801ed42:	2b12      	cmp	r3, #18
 801ed44:	d132      	bne.n	801edac <lv_mbox_signal+0x148>
              sign == LV_SIGNAL_GET_EDITABLE) {
        if(ext->btnm) {
 801ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed48:	689b      	ldr	r3, [r3, #8]
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d007      	beq.n	801ed5e <lv_mbox_signal+0xfa>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 801ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed50:	689b      	ldr	r3, [r3, #8]
 801ed52:	69db      	ldr	r3, [r3, #28]
 801ed54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ed56:	6890      	ldr	r0, [r2, #8]
 801ed58:	7af9      	ldrb	r1, [r7, #11]
 801ed5a:	687a      	ldr	r2, [r7, #4]
 801ed5c:	4798      	blx	r3
        }

        /* The button matrix with ENCODER input supposes it's in a group but in this case it isn't
         * (Only the message box's container) So so some actions here instead*/
        if(sign == LV_SIGNAL_FOCUS) {
 801ed5e:	7afb      	ldrb	r3, [r7, #11]
 801ed60:	2b0f      	cmp	r3, #15
 801ed62:	d145      	bne.n	801edf0 <lv_mbox_signal+0x18c>
#if LV_USE_GROUP
            lv_indev_t * indev         = lv_indev_get_act();
 801ed64:	f7e9 fe7c 	bl	8008a60 <lv_indev_get_act>
 801ed68:	6238      	str	r0, [r7, #32]
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801ed6a:	6a38      	ldr	r0, [r7, #32]
 801ed6c:	f7e9 fe84 	bl	8008a78 <lv_indev_get_type>
 801ed70:	4603      	mov	r3, r0
 801ed72:	77fb      	strb	r3, [r7, #31]
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801ed74:	7ffb      	ldrb	r3, [r7, #31]
 801ed76:	2b04      	cmp	r3, #4
 801ed78:	d13a      	bne.n	801edf0 <lv_mbox_signal+0x18c>
                /*In navigation mode don't select any button but in edit mode select the fist*/
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 801ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed7c:	689b      	ldr	r3, [r3, #8]
 801ed7e:	4618      	mov	r0, r3
 801ed80:	f7eb fd23 	bl	800a7ca <lv_obj_get_ext_attr>
 801ed84:	61b8      	str	r0, [r7, #24]
                if(lv_group_get_editing(lv_obj_get_group(mbox)))
 801ed86:	68f8      	ldr	r0, [r7, #12]
 801ed88:	f7eb fd2b 	bl	800a7e2 <lv_obj_get_group>
 801ed8c:	4603      	mov	r3, r0
 801ed8e:	4618      	mov	r0, r3
 801ed90:	f7e9 fd21 	bl	80087d6 <lv_group_get_editing>
 801ed94:	4603      	mov	r3, r0
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	d003      	beq.n	801eda2 <lv_mbox_signal+0x13e>
                    btnm_ext->btn_id_pr = 0;
 801ed9a:	69bb      	ldr	r3, [r7, #24]
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801eda0:	e026      	b.n	801edf0 <lv_mbox_signal+0x18c>
                else
                    btnm_ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801eda2:	69bb      	ldr	r3, [r7, #24]
 801eda4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eda8:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801edaa:	e021      	b.n	801edf0 <lv_mbox_signal+0x18c>
            }
#endif
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801edac:	7afb      	ldrb	r3, [r7, #11]
 801edae:	2b06      	cmp	r3, #6
 801edb0:	d11f      	bne.n	801edf2 <lv_mbox_signal+0x18e>
        lv_obj_type_t * buf = param;
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801edb6:	2300      	movs	r3, #0
 801edb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801edbc:	e00b      	b.n	801edd6 <lv_mbox_signal+0x172>
            if(buf->type[i] == NULL) break;
 801edbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d009      	beq.n	801ede0 <lv_mbox_signal+0x17c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801edcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801edd0:	3301      	adds	r3, #1
 801edd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801edd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801edda:	2b06      	cmp	r3, #6
 801eddc:	d9ef      	bls.n	801edbe <lv_mbox_signal+0x15a>
 801edde:	e000      	b.n	801ede2 <lv_mbox_signal+0x17e>
            if(buf->type[i] == NULL) break;
 801ede0:	bf00      	nop
        }
        buf->type[i] = "lv_mbox";
 801ede2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801ede6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ede8:	4906      	ldr	r1, [pc, #24]	; (801ee04 <lv_mbox_signal+0x1a0>)
 801edea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801edee:	e000      	b.n	801edf2 <lv_mbox_signal+0x18e>
        if(sign == LV_SIGNAL_FOCUS) {
 801edf0:	bf00      	nop
    }

    return res;
 801edf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 801edf6:	4618      	mov	r0, r3
 801edf8:	3734      	adds	r7, #52	; 0x34
 801edfa:	46bd      	mov	sp, r7
 801edfc:	bd90      	pop	{r4, r7, pc}
 801edfe:	bf00      	nop
 801ee00:	200177e0 	.word	0x200177e0
 801ee04:	0802d510 	.word	0x0802d510

0801ee08 <mbox_realign>:
/**
 * Resize the button holder to fit
 * @param mbox pointer to message box object
 */
static void mbox_realign(lv_obj_t * mbox)
{
 801ee08:	b580      	push	{r7, lr}
 801ee0a:	b088      	sub	sp, #32
 801ee0c:	af00      	add	r7, sp, #0
 801ee0e:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801ee10:	6878      	ldr	r0, [r7, #4]
 801ee12:	f7eb fcda 	bl	800a7ca <lv_obj_get_ext_attr>
 801ee16:	61f8      	str	r0, [r7, #28]

    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 801ee18:	2100      	movs	r1, #0
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	f7ff fec4 	bl	801eba8 <lv_mbox_get_style>
 801ee20:	61b8      	str	r0, [r7, #24]
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 801ee22:	6878      	ldr	r0, [r7, #4]
 801ee24:	f7eb fbe6 	bl	800a5f4 <lv_obj_get_width>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	b29a      	uxth	r2, r3
 801ee2c:	69bb      	ldr	r3, [r7, #24]
 801ee2e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ee32:	b29b      	uxth	r3, r3
 801ee34:	1ad3      	subs	r3, r2, r3
 801ee36:	b29a      	uxth	r2, r3
 801ee38:	69bb      	ldr	r3, [r7, #24]
 801ee3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ee3e:	b29b      	uxth	r3, r3
 801ee40:	1ad3      	subs	r3, r2, r3
 801ee42:	b29b      	uxth	r3, r3
 801ee44:	82fb      	strh	r3, [r7, #22]

    if(ext->text) {
 801ee46:	69fb      	ldr	r3, [r7, #28]
 801ee48:	685b      	ldr	r3, [r3, #4]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d007      	beq.n	801ee5e <mbox_realign+0x56>
        lv_obj_set_width(ext->text, w);
 801ee4e:	69fb      	ldr	r3, [r7, #28]
 801ee50:	685b      	ldr	r3, [r3, #4]
 801ee52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ee56:	4611      	mov	r1, r2
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7ea fcb7 	bl	80097cc <lv_obj_set_width>
    }

    if(ext->btnm) {
 801ee5e:	69fb      	ldr	r3, [r7, #28]
 801ee60:	689b      	ldr	r3, [r3, #8]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d031      	beq.n	801eeca <mbox_realign+0xc2>
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801ee66:	2101      	movs	r1, #1
 801ee68:	6878      	ldr	r0, [r7, #4]
 801ee6a:	f7ff fe9d 	bl	801eba8 <lv_mbox_get_style>
 801ee6e:	6138      	str	r0, [r7, #16]
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 801ee70:	2102      	movs	r1, #2
 801ee72:	6878      	ldr	r0, [r7, #4]
 801ee74:	f7ff fe98 	bl	801eba8 <lv_mbox_get_style>
 801ee78:	60f8      	str	r0, [r7, #12]
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f7ff fc26 	bl	801e6d0 <lv_font_get_line_height>
 801ee84:	4603      	mov	r3, r0
 801ee86:	817b      	strh	r3, [r7, #10]
        lv_obj_set_size(ext->btnm, w,
 801ee88:	69fb      	ldr	r3, [r7, #28]
 801ee8a:	6898      	ldr	r0, [r3, #8]
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ee92:	b29a      	uxth	r2, r3
 801ee94:	897b      	ldrh	r3, [r7, #10]
 801ee96:	4413      	add	r3, r2
 801ee98:	b29a      	uxth	r2, r3
 801ee9a:	68fb      	ldr	r3, [r7, #12]
 801ee9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801eea0:	b29b      	uxth	r3, r3
 801eea2:	4413      	add	r3, r2
 801eea4:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801eea6:	693b      	ldr	r3, [r7, #16]
 801eea8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801eeac:	b29b      	uxth	r3, r3
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801eeae:	4413      	add	r3, r2
 801eeb0:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801eeb2:	693b      	ldr	r3, [r7, #16]
 801eeb4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801eeb8:	b29b      	uxth	r3, r3
 801eeba:	4413      	add	r3, r2
 801eebc:	b29b      	uxth	r3, r3
        lv_obj_set_size(ext->btnm, w,
 801eebe:	b21a      	sxth	r2, r3
 801eec0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801eec4:	4619      	mov	r1, r3
 801eec6:	f7ea fc08 	bl	80096da <lv_obj_set_size>
    }
}
 801eeca:	bf00      	nop
 801eecc:	3720      	adds	r7, #32
 801eece:	46bd      	mov	sp, r7
 801eed0:	bd80      	pop	{r7, pc}

0801eed2 <lv_mbox_close_ready_cb>:

#if LV_USE_ANIMATION
static void lv_mbox_close_ready_cb(lv_anim_t * a)
{
 801eed2:	b580      	push	{r7, lr}
 801eed4:	b082      	sub	sp, #8
 801eed6:	af00      	add	r7, sp, #0
 801eed8:	6078      	str	r0, [r7, #4]
    lv_obj_del(a->var);
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	4618      	mov	r0, r3
 801eee0:	f7ea f992 	bl	8009208 <lv_obj_del>
}
 801eee4:	bf00      	nop
 801eee6:	3708      	adds	r7, #8
 801eee8:	46bd      	mov	sp, r7
 801eeea:	bd80      	pop	{r7, pc}

0801eeec <lv_mbox_default_event_cb>:
#endif

static void lv_mbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
 801eeec:	b580      	push	{r7, lr}
 801eeee:	b084      	sub	sp, #16
 801eef0:	af00      	add	r7, sp, #0
 801eef2:	6078      	str	r0, [r7, #4]
 801eef4:	460b      	mov	r3, r1
 801eef6:	70fb      	strb	r3, [r7, #3]
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801eef8:	78fb      	ldrb	r3, [r7, #3]
 801eefa:	2b0e      	cmp	r3, #14
 801eefc:	d10e      	bne.n	801ef1c <lv_mbox_default_event_cb+0x30>

    uint32_t btn_id = lv_mbox_get_active_btn(mbox);
 801eefe:	6878      	ldr	r0, [r7, #4]
 801ef00:	f7ff fe2a 	bl	801eb58 <lv_mbox_get_active_btn>
 801ef04:	4603      	mov	r3, r0
 801ef06:	60fb      	str	r3, [r7, #12]
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ef0e:	4293      	cmp	r3, r2
 801ef10:	d006      	beq.n	801ef20 <lv_mbox_default_event_cb+0x34>

    lv_mbox_start_auto_close(mbox, 0);
 801ef12:	2100      	movs	r1, #0
 801ef14:	6878      	ldr	r0, [r7, #4]
 801ef16:	f7ff fd41 	bl	801e99c <lv_mbox_start_auto_close>
 801ef1a:	e002      	b.n	801ef22 <lv_mbox_default_event_cb+0x36>
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801ef1c:	bf00      	nop
 801ef1e:	e000      	b.n	801ef22 <lv_mbox_default_event_cb+0x36>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801ef20:	bf00      	nop
}
 801ef22:	3710      	adds	r7, #16
 801ef24:	46bd      	mov	sp, r7
 801ef26:	bd80      	pop	{r7, pc}

0801ef28 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b082      	sub	sp, #8
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	6078      	str	r0, [r7, #4]
 801ef30:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801ef32:	2208      	movs	r2, #8
 801ef34:	6839      	ldr	r1, [r7, #0]
 801ef36:	6878      	ldr	r0, [r7, #4]
 801ef38:	f00c f86a 	bl	802b010 <memcpy>
}
 801ef3c:	bf00      	nop
 801ef3e:	3708      	adds	r7, #8
 801ef40:	46bd      	mov	sp, r7
 801ef42:	bd80      	pop	{r7, pc}

0801ef44 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801ef44:	b480      	push	{r7}
 801ef46:	b083      	sub	sp, #12
 801ef48:	af00      	add	r7, sp, #0
 801ef4a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ef52:	b29a      	uxth	r2, r3
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef5a:	b29b      	uxth	r3, r3
 801ef5c:	1ad3      	subs	r3, r2, r3
 801ef5e:	b29b      	uxth	r3, r3
 801ef60:	3301      	adds	r3, #1
 801ef62:	b29b      	uxth	r3, r3
 801ef64:	b21b      	sxth	r3, r3
}
 801ef66:	4618      	mov	r0, r3
 801ef68:	370c      	adds	r7, #12
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef70:	4770      	bx	lr

0801ef72 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801ef72:	b480      	push	{r7}
 801ef74:	b083      	sub	sp, #12
 801ef76:	af00      	add	r7, sp, #0
 801ef78:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ef80:	b29a      	uxth	r2, r3
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ef88:	b29b      	uxth	r3, r3
 801ef8a:	1ad3      	subs	r3, r2, r3
 801ef8c:	b29b      	uxth	r3, r3
 801ef8e:	3301      	adds	r3, #1
 801ef90:	b29b      	uxth	r3, r3
 801ef92:	b21b      	sxth	r3, r3
}
 801ef94:	4618      	mov	r0, r3
 801ef96:	370c      	adds	r7, #12
 801ef98:	46bd      	mov	sp, r7
 801ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9e:	4770      	bx	lr

0801efa0 <lv_page_get_scrl_width>:
 * Get width of the scrollable part of a page
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
 801efa0:	b580      	push	{r7, lr}
 801efa2:	b082      	sub	sp, #8
 801efa4:	af00      	add	r7, sp, #0
 801efa6:	6078      	str	r0, [r7, #4]
    return lv_obj_get_width(lv_page_get_scrl(page));
 801efa8:	6878      	ldr	r0, [r7, #4]
 801efaa:	f000 fa4d 	bl	801f448 <lv_page_get_scrl>
 801efae:	4603      	mov	r3, r0
 801efb0:	4618      	mov	r0, r3
 801efb2:	f7eb fb1f 	bl	800a5f4 <lv_obj_get_width>
 801efb6:	4603      	mov	r3, r0
}
 801efb8:	4618      	mov	r0, r3
 801efba:	3708      	adds	r7, #8
 801efbc:	46bd      	mov	sp, r7
 801efbe:	bd80      	pop	{r7, pc}

0801efc0 <lv_page_get_scrl_fit_left>:
 * Get the left fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b082      	sub	sp, #8
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 801efc8:	6878      	ldr	r0, [r7, #4]
 801efca:	f000 fa3d 	bl	801f448 <lv_page_get_scrl>
 801efce:	4603      	mov	r3, r0
 801efd0:	4618      	mov	r0, r3
 801efd2:	f7fc fade 	bl	801b592 <lv_cont_get_fit_left>
 801efd6:	4603      	mov	r3, r0
}
 801efd8:	4618      	mov	r0, r3
 801efda:	3708      	adds	r7, #8
 801efdc:	46bd      	mov	sp, r7
 801efde:	bd80      	pop	{r7, pc}

0801efe0 <lv_page_get_scrl_fit_top>:
 * Get the top fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
 801efe0:	b580      	push	{r7, lr}
 801efe2:	b082      	sub	sp, #8
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 801efe8:	6878      	ldr	r0, [r7, #4]
 801efea:	f000 fa2d 	bl	801f448 <lv_page_get_scrl>
 801efee:	4603      	mov	r3, r0
 801eff0:	4618      	mov	r0, r3
 801eff2:	f7fc fadf 	bl	801b5b4 <lv_cont_get_fit_top>
 801eff6:	4603      	mov	r3, r0
}
 801eff8:	4618      	mov	r0, r3
 801effa:	3708      	adds	r7, #8
 801effc:	46bd      	mov	sp, r7
 801effe:	bd80      	pop	{r7, pc}

0801f000 <lv_page_create>:
 * @param par pointer to an object, it will be the parent of the new page
 * @param copy pointer to a page object, if not NULL then the new object will be copied from it
 * @return pointer to the created page
 */
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801f000:	b580      	push	{r7, lr}
 801f002:	b088      	sub	sp, #32
 801f004:	af02      	add	r7, sp, #8
 801f006:	6078      	str	r0, [r7, #4]
 801f008:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("page create started");

    /*Create the ancestor object*/
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801f00a:	6839      	ldr	r1, [r7, #0]
 801f00c:	6878      	ldr	r0, [r7, #4]
 801f00e:	f7fc f977 	bl	801b300 <lv_cont_create>
 801f012:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_page);
 801f014:	697b      	ldr	r3, [r7, #20]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d100      	bne.n	801f01c <lv_page_create+0x1c>
 801f01a:	e7fe      	b.n	801f01a <lv_page_create+0x1a>
    if(new_page == NULL) return NULL;
 801f01c:	697b      	ldr	r3, [r7, #20]
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d101      	bne.n	801f026 <lv_page_create+0x26>
 801f022:	2300      	movs	r3, #0
 801f024:	e143      	b.n	801f2ae <lv_page_create+0x2ae>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 801f026:	4ba4      	ldr	r3, [pc, #656]	; (801f2b8 <lv_page_create+0x2b8>)
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d105      	bne.n	801f03a <lv_page_create+0x3a>
 801f02e:	6978      	ldr	r0, [r7, #20]
 801f030:	f7eb fbb3 	bl	800a79a <lv_obj_get_signal_cb>
 801f034:	4602      	mov	r2, r0
 801f036:	4ba0      	ldr	r3, [pc, #640]	; (801f2b8 <lv_page_create+0x2b8>)
 801f038:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 801f03a:	4ba0      	ldr	r3, [pc, #640]	; (801f2bc <lv_page_create+0x2bc>)
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	2b00      	cmp	r3, #0
 801f040:	d105      	bne.n	801f04e <lv_page_create+0x4e>
 801f042:	6978      	ldr	r0, [r7, #20]
 801f044:	f7eb fbb5 	bl	800a7b2 <lv_obj_get_design_cb>
 801f048:	4602      	mov	r2, r0
 801f04a:	4b9c      	ldr	r3, [pc, #624]	; (801f2bc <lv_page_create+0x2bc>)
 801f04c:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801f04e:	2130      	movs	r1, #48	; 0x30
 801f050:	6978      	ldr	r0, [r7, #20]
 801f052:	f7eb f9ed 	bl	800a430 <lv_obj_allocate_ext_attr>
 801f056:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801f058:	693b      	ldr	r3, [r7, #16]
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d100      	bne.n	801f060 <lv_page_create+0x60>
 801f05e:	e7fe      	b.n	801f05e <lv_page_create+0x5e>
    if(ext == NULL) return NULL;
 801f060:	693b      	ldr	r3, [r7, #16]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d101      	bne.n	801f06a <lv_page_create+0x6a>
 801f066:	2300      	movs	r3, #0
 801f068:	e121      	b.n	801f2ae <lv_page_create+0x2ae>

    ext->scrl        = NULL;
 801f06a:	693b      	ldr	r3, [r7, #16]
 801f06c:	2200      	movs	r2, #0
 801f06e:	605a      	str	r2, [r3, #4]
    ext->sb.hor_draw = 0;
 801f070:	693a      	ldr	r2, [r7, #16]
 801f072:	7f13      	ldrb	r3, [r2, #28]
 801f074:	f36f 0300 	bfc	r3, #0, #1
 801f078:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801f07a:	693a      	ldr	r2, [r7, #16]
 801f07c:	7f13      	ldrb	r3, [r2, #28]
 801f07e:	f36f 0341 	bfc	r3, #1, #1
 801f082:	7713      	strb	r3, [r2, #28]
    ext->sb.style    = &lv_style_pretty;
 801f084:	693b      	ldr	r3, [r7, #16]
 801f086:	4a8e      	ldr	r2, [pc, #568]	; (801f2c0 <lv_page_create+0x2c0>)
 801f088:	609a      	str	r2, [r3, #8]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 801f08a:	693a      	ldr	r2, [r7, #16]
 801f08c:	7f13      	ldrb	r3, [r2, #28]
 801f08e:	2103      	movs	r1, #3
 801f090:	f361 0384 	bfi	r3, r1, #2, #3
 801f094:	7713      	strb	r3, [r2, #28]
#if LV_USE_ANIMATION
    ext->edge_flash.enabled   = 0;
 801f096:	693a      	ldr	r2, [r7, #16]
 801f098:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f09c:	f36f 0300 	bfc	r3, #0, #1
 801f0a0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801f0a4:	693a      	ldr	r2, [r7, #16]
 801f0a6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f0aa:	f36f 0382 	bfc	r3, #2, #1
 801f0ae:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.top_ip    = 0;
 801f0b2:	693a      	ldr	r2, [r7, #16]
 801f0b4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f0b8:	f36f 0341 	bfc	r3, #1, #1
 801f0bc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801f0c0:	693a      	ldr	r2, [r7, #16]
 801f0c2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f0c6:	f36f 1304 	bfc	r3, #4, #1
 801f0ca:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801f0ce:	693a      	ldr	r2, [r7, #16]
 801f0d0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f0d4:	f36f 03c3 	bfc	r3, #3, #1
 801f0d8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.state     = 0;
 801f0dc:	693b      	ldr	r3, [r7, #16]
 801f0de:	2200      	movs	r2, #0
 801f0e0:	841a      	strh	r2, [r3, #32]
    ext->edge_flash.style     = &lv_style_plain_color;
 801f0e2:	693b      	ldr	r3, [r7, #16]
 801f0e4:	4a77      	ldr	r2, [pc, #476]	; (801f2c4 <lv_page_create+0x2c4>)
 801f0e6:	625a      	str	r2, [r3, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f0ee:	859a      	strh	r2, [r3, #44]	; 0x2c
#endif
    ext->scroll_prop    = 0;
 801f0f0:	693a      	ldr	r2, [r7, #16]
 801f0f2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801f0f6:	f36f 0300 	bfc	r3, #0, #1
 801f0fa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    ext->scroll_prop_ip = 0;
 801f0fe:	693a      	ldr	r2, [r7, #16]
 801f100:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801f104:	f36f 0341 	bfc	r3, #1, #1
 801f108:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

    /*Init the new page object*/
    if(copy == NULL) {
 801f10c:	683b      	ldr	r3, [r7, #0]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	f040 8084 	bne.w	801f21c <lv_page_create+0x21c>
        ext->scrl = lv_cont_create(new_page, NULL);
 801f114:	2100      	movs	r1, #0
 801f116:	6978      	ldr	r0, [r7, #20]
 801f118:	f7fc f8f2 	bl	801b300 <lv_cont_create>
 801f11c:	4602      	mov	r2, r0
 801f11e:	693b      	ldr	r3, [r7, #16]
 801f120:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801f122:	693b      	ldr	r3, [r7, #16]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	4968      	ldr	r1, [pc, #416]	; (801f2c8 <lv_page_create+0x2c8>)
 801f128:	4618      	mov	r0, r3
 801f12a:	f7eb f965 	bl	800a3f8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 801f12e:	693b      	ldr	r3, [r7, #16]
 801f130:	685b      	ldr	r3, [r3, #4]
 801f132:	4966      	ldr	r1, [pc, #408]	; (801f2cc <lv_page_create+0x2cc>)
 801f134:	4618      	mov	r0, r3
 801f136:	f7eb f96d 	bl	800a414 <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 801f13a:	693b      	ldr	r3, [r7, #16]
 801f13c:	685b      	ldr	r3, [r3, #4]
 801f13e:	2101      	movs	r1, #1
 801f140:	4618      	mov	r0, r3
 801f142:	f7eb f84c 	bl	800a1de <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 801f146:	693b      	ldr	r3, [r7, #16]
 801f148:	685b      	ldr	r3, [r3, #4]
 801f14a:	2101      	movs	r1, #1
 801f14c:	4618      	mov	r0, r3
 801f14e:	f7eb f85f 	bl	800a210 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801f152:	693b      	ldr	r3, [r7, #16]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	2112      	movs	r1, #18
 801f158:	4618      	mov	r0, r3
 801f15a:	f7eb f881 	bl	800a260 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 801f15e:	693b      	ldr	r3, [r7, #16]
 801f160:	6858      	ldr	r0, [r3, #4]
 801f162:	2303      	movs	r3, #3
 801f164:	9300      	str	r3, [sp, #0]
 801f166:	2303      	movs	r3, #3
 801f168:	2203      	movs	r2, #3
 801f16a:	2103      	movs	r1, #3
 801f16c:	f7fc f999 	bl	801b4a2 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801f170:	693b      	ldr	r3, [r7, #16]
 801f172:	685b      	ldr	r3, [r3, #4]
 801f174:	4956      	ldr	r1, [pc, #344]	; (801f2d0 <lv_page_create+0x2d0>)
 801f176:	4618      	mov	r0, r3
 801f178:	f7eb f89f 	bl	800a2ba <lv_obj_set_event_cb>
                                                              object by default for convenience */

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801f17c:	4955      	ldr	r1, [pc, #340]	; (801f2d4 <lv_page_create+0x2d4>)
 801f17e:	6978      	ldr	r0, [r7, #20]
 801f180:	f7eb f93a 	bl	800a3f8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801f184:	4954      	ldr	r1, [pc, #336]	; (801f2d8 <lv_page_create+0x2d8>)
 801f186:	6978      	ldr	r0, [r7, #20]
 801f188:	f7eb f944 	bl	800a414 <lv_obj_set_design_cb>

        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801f18c:	693b      	ldr	r3, [r7, #16]
 801f18e:	7f1b      	ldrb	r3, [r3, #28]
 801f190:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f194:	b2db      	uxtb	r3, r3
 801f196:	4619      	mov	r1, r3
 801f198:	6978      	ldr	r0, [r7, #20]
 801f19a:	f000 f8a3 	bl	801f2e4 <lv_page_set_sb_mode>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801f19e:	f003 f997 	bl	80224d0 <lv_theme_get_current>
 801f1a2:	60b8      	str	r0, [r7, #8]
        if(th) {
 801f1a4:	68bb      	ldr	r3, [r7, #8]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d028      	beq.n	801f1fc <lv_page_create+0x1fc>
            if(par == NULL) { /*Different styles if it is screen*/
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d10c      	bne.n	801f1ca <lv_page_create+0x1ca>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 801f1b0:	68bb      	ldr	r3, [r7, #8]
 801f1b2:	685b      	ldr	r3, [r3, #4]
 801f1b4:	461a      	mov	r2, r3
 801f1b6:	2100      	movs	r1, #0
 801f1b8:	6978      	ldr	r0, [r7, #20]
 801f1ba:	f000 f8f3 	bl	801f3a4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801f1be:	4a47      	ldr	r2, [pc, #284]	; (801f2dc <lv_page_create+0x2dc>)
 801f1c0:	2101      	movs	r1, #1
 801f1c2:	6978      	ldr	r0, [r7, #20]
 801f1c4:	f000 f8ee 	bl	801f3a4 <lv_page_set_style>
 801f1c8:	e00f      	b.n	801f1ea <lv_page_create+0x1ea>
            } else {
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 801f1ca:	68bb      	ldr	r3, [r7, #8]
 801f1cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801f1d0:	461a      	mov	r2, r3
 801f1d2:	2100      	movs	r1, #0
 801f1d4:	6978      	ldr	r0, [r7, #20]
 801f1d6:	f000 f8e5 	bl	801f3a4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 801f1da:	68bb      	ldr	r3, [r7, #8]
 801f1dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801f1e0:	461a      	mov	r2, r3
 801f1e2:	2101      	movs	r1, #1
 801f1e4:	6978      	ldr	r0, [r7, #20]
 801f1e6:	f000 f8dd 	bl	801f3a4 <lv_page_set_style>
            }
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 801f1ea:	68bb      	ldr	r3, [r7, #8]
 801f1ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801f1f0:	461a      	mov	r2, r3
 801f1f2:	2102      	movs	r1, #2
 801f1f4:	6978      	ldr	r0, [r7, #20]
 801f1f6:	f000 f8d5 	bl	801f3a4 <lv_page_set_style>
 801f1fa:	e054      	b.n	801f2a6 <lv_page_create+0x2a6>
        } else {
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801f1fc:	4a38      	ldr	r2, [pc, #224]	; (801f2e0 <lv_page_create+0x2e0>)
 801f1fe:	2100      	movs	r1, #0
 801f200:	6978      	ldr	r0, [r7, #20]
 801f202:	f000 f8cf 	bl	801f3a4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 801f206:	4a2e      	ldr	r2, [pc, #184]	; (801f2c0 <lv_page_create+0x2c0>)
 801f208:	2101      	movs	r1, #1
 801f20a:	6978      	ldr	r0, [r7, #20]
 801f20c:	f000 f8ca 	bl	801f3a4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801f210:	4a33      	ldr	r2, [pc, #204]	; (801f2e0 <lv_page_create+0x2e0>)
 801f212:	2102      	movs	r1, #2
 801f214:	6978      	ldr	r0, [r7, #20]
 801f216:	f000 f8c5 	bl	801f3a4 <lv_page_set_style>
 801f21a:	e044      	b.n	801f2a6 <lv_page_create+0x2a6>
        }

    } else {
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801f21c:	6838      	ldr	r0, [r7, #0]
 801f21e:	f7eb fad4 	bl	800a7ca <lv_obj_get_ext_attr>
 801f222:	60f8      	str	r0, [r7, #12]
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	685b      	ldr	r3, [r3, #4]
 801f228:	4619      	mov	r1, r3
 801f22a:	6978      	ldr	r0, [r7, #20]
 801f22c:	f7fc f868 	bl	801b300 <lv_cont_create>
 801f230:	4602      	mov	r2, r0
 801f232:	693b      	ldr	r3, [r7, #16]
 801f234:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801f236:	693b      	ldr	r3, [r7, #16]
 801f238:	685b      	ldr	r3, [r3, #4]
 801f23a:	4923      	ldr	r1, [pc, #140]	; (801f2c8 <lv_page_create+0x2c8>)
 801f23c:	4618      	mov	r0, r3
 801f23e:	f7eb f8db 	bl	800a3f8 <lv_obj_set_signal_cb>

        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	7f1b      	ldrb	r3, [r3, #28]
 801f246:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f24a:	b2db      	uxtb	r3, r3
 801f24c:	4619      	mov	r1, r3
 801f24e:	6978      	ldr	r0, [r7, #20]
 801f250:	f000 f848 	bl	801f2e4 <lv_page_set_sb_mode>

        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 801f254:	2100      	movs	r1, #0
 801f256:	6838      	ldr	r0, [r7, #0]
 801f258:	f000 f904 	bl	801f464 <lv_page_get_style>
 801f25c:	4603      	mov	r3, r0
 801f25e:	461a      	mov	r2, r3
 801f260:	2100      	movs	r1, #0
 801f262:	6978      	ldr	r0, [r7, #20]
 801f264:	f000 f89e 	bl	801f3a4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 801f268:	2101      	movs	r1, #1
 801f26a:	6838      	ldr	r0, [r7, #0]
 801f26c:	f000 f8fa 	bl	801f464 <lv_page_get_style>
 801f270:	4603      	mov	r3, r0
 801f272:	461a      	mov	r2, r3
 801f274:	2101      	movs	r1, #1
 801f276:	6978      	ldr	r0, [r7, #20]
 801f278:	f000 f894 	bl	801f3a4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 801f27c:	2102      	movs	r1, #2
 801f27e:	6838      	ldr	r0, [r7, #0]
 801f280:	f000 f8f0 	bl	801f464 <lv_page_get_style>
 801f284:	4603      	mov	r3, r0
 801f286:	461a      	mov	r2, r3
 801f288:	2102      	movs	r1, #2
 801f28a:	6978      	ldr	r0, [r7, #20]
 801f28c:	f000 f88a 	bl	801f3a4 <lv_page_set_style>

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801f290:	4910      	ldr	r1, [pc, #64]	; (801f2d4 <lv_page_create+0x2d4>)
 801f292:	6978      	ldr	r0, [r7, #20]
 801f294:	f7eb f8b0 	bl	800a3f8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801f298:	490f      	ldr	r1, [pc, #60]	; (801f2d8 <lv_page_create+0x2d8>)
 801f29a:	6978      	ldr	r0, [r7, #20]
 801f29c:	f7eb f8ba 	bl	800a414 <lv_obj_set_design_cb>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_page);
 801f2a0:	6978      	ldr	r0, [r7, #20]
 801f2a2:	f7ea ff74 	bl	800a18e <lv_obj_refresh_style>
    }

    lv_page_sb_refresh(new_page);
 801f2a6:	6978      	ldr	r0, [r7, #20]
 801f2a8:	f001 fa60 	bl	802076c <lv_page_sb_refresh>

    LV_LOG_INFO("page created");

    return new_page;
 801f2ac:	697b      	ldr	r3, [r7, #20]
}
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	3718      	adds	r7, #24
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	bd80      	pop	{r7, pc}
 801f2b6:	bf00      	nop
 801f2b8:	200177e8 	.word	0x200177e8
 801f2bc:	200177e4 	.word	0x200177e4
 801f2c0:	2001b950 	.word	0x2001b950
 801f2c4:	2001bb30 	.word	0x2001bb30
 801f2c8:	0801ffdd 	.word	0x0801ffdd
 801f2cc:	0801fb39 	.word	0x0801fb39
 801f2d0:	08020711 	.word	0x08020711
 801f2d4:	0801fc11 	.word	0x0801fc11
 801f2d8:	0801f64d 	.word	0x0801f64d
 801f2dc:	2001b89c 	.word	0x2001b89c
 801f2e0:	2001b860 	.word	0x2001b860

0801f2e4 <lv_page_set_sb_mode>:
 * Set the scroll bar mode on a page
 * @param page pointer to a page object
 * @param sb_mode the new mode from 'lv_page_sb.mode_t' enum
 */
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode)
{
 801f2e4:	b580      	push	{r7, lr}
 801f2e6:	b084      	sub	sp, #16
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	6078      	str	r0, [r7, #4]
 801f2ec:	460b      	mov	r3, r1
 801f2ee:	70fb      	strb	r3, [r7, #3]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f2f0:	6878      	ldr	r0, [r7, #4]
 801f2f2:	f7eb fa6a 	bl	800a7ca <lv_obj_get_ext_attr>
 801f2f6:	60f8      	str	r0, [r7, #12]
    if(ext->sb.mode == sb_mode) return;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	7f1b      	ldrb	r3, [r3, #28]
 801f2fc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f300:	b2db      	uxtb	r3, r3
 801f302:	461a      	mov	r2, r3
 801f304:	78fb      	ldrb	r3, [r7, #3]
 801f306:	429a      	cmp	r2, r3
 801f308:	d048      	beq.n	801f39c <lv_page_set_sb_mode+0xb8>

    if(sb_mode == LV_SB_MODE_HIDE)
 801f30a:	78fb      	ldrb	r3, [r7, #3]
 801f30c:	2b04      	cmp	r3, #4
 801f30e:	d10d      	bne.n	801f32c <lv_page_set_sb_mode+0x48>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801f310:	68fb      	ldr	r3, [r7, #12]
 801f312:	7f1b      	ldrb	r3, [r3, #28]
 801f314:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f318:	b2db      	uxtb	r3, r3
 801f31a:	f043 0304 	orr.w	r3, r3, #4
 801f31e:	b2d9      	uxtb	r1, r3
 801f320:	68fa      	ldr	r2, [r7, #12]
 801f322:	7f13      	ldrb	r3, [r2, #28]
 801f324:	f361 0384 	bfi	r3, r1, #2, #3
 801f328:	7713      	strb	r3, [r2, #28]
 801f32a:	e026      	b.n	801f37a <lv_page_set_sb_mode+0x96>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 801f32c:	78fb      	ldrb	r3, [r7, #3]
 801f32e:	2b05      	cmp	r3, #5
 801f330:	d10d      	bne.n	801f34e <lv_page_set_sb_mode+0x6a>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801f332:	68fb      	ldr	r3, [r7, #12]
 801f334:	7f1b      	ldrb	r3, [r3, #28]
 801f336:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f33a:	b2db      	uxtb	r3, r3
 801f33c:	f003 0303 	and.w	r3, r3, #3
 801f340:	b2d9      	uxtb	r1, r3
 801f342:	68fa      	ldr	r2, [r7, #12]
 801f344:	7f13      	ldrb	r3, [r2, #28]
 801f346:	f361 0384 	bfi	r3, r1, #2, #3
 801f34a:	7713      	strb	r3, [r2, #28]
 801f34c:	e015      	b.n	801f37a <lv_page_set_sb_mode+0x96>
    else {
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801f34e:	68fb      	ldr	r3, [r7, #12]
 801f350:	7f1b      	ldrb	r3, [r3, #28]
 801f352:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f356:	b2db      	uxtb	r3, r3
 801f358:	f003 0304 	and.w	r3, r3, #4
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d003      	beq.n	801f368 <lv_page_set_sb_mode+0x84>
 801f360:	78fb      	ldrb	r3, [r7, #3]
 801f362:	f043 0304 	orr.w	r3, r3, #4
 801f366:	70fb      	strb	r3, [r7, #3]
        ext->sb.mode = sb_mode;
 801f368:	78fb      	ldrb	r3, [r7, #3]
 801f36a:	f003 0307 	and.w	r3, r3, #7
 801f36e:	b2d9      	uxtb	r1, r3
 801f370:	68fa      	ldr	r2, [r7, #12]
 801f372:	7f13      	ldrb	r3, [r2, #28]
 801f374:	f361 0384 	bfi	r3, r1, #2, #3
 801f378:	7713      	strb	r3, [r2, #28]
    }

    ext->sb.hor_draw = 0;
 801f37a:	68fa      	ldr	r2, [r7, #12]
 801f37c:	7f13      	ldrb	r3, [r2, #28]
 801f37e:	f36f 0300 	bfc	r3, #0, #1
 801f382:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801f384:	68fa      	ldr	r2, [r7, #12]
 801f386:	7f13      	ldrb	r3, [r2, #28]
 801f388:	f36f 0341 	bfc	r3, #1, #1
 801f38c:	7713      	strb	r3, [r2, #28]

    lv_page_sb_refresh(page);
 801f38e:	6878      	ldr	r0, [r7, #4]
 801f390:	f001 f9ec 	bl	802076c <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	f7e9 ffec 	bl	8009372 <lv_obj_invalidate>
 801f39a:	e000      	b.n	801f39e <lv_page_set_sb_mode+0xba>
    if(ext->sb.mode == sb_mode) return;
 801f39c:	bf00      	nop
}
 801f39e:	3710      	adds	r7, #16
 801f3a0:	46bd      	mov	sp, r7
 801f3a2:	bd80      	pop	{r7, pc}

0801f3a4 <lv_page_set_style>:
 * @param page pointer to a page object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style)
{
 801f3a4:	b580      	push	{r7, lr}
 801f3a6:	b086      	sub	sp, #24
 801f3a8:	af00      	add	r7, sp, #0
 801f3aa:	60f8      	str	r0, [r7, #12]
 801f3ac:	460b      	mov	r3, r1
 801f3ae:	607a      	str	r2, [r7, #4]
 801f3b0:	72fb      	strb	r3, [r7, #11]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f3b2:	68f8      	ldr	r0, [r7, #12]
 801f3b4:	f7eb fa09 	bl	800a7ca <lv_obj_get_ext_attr>
 801f3b8:	6178      	str	r0, [r7, #20]

    switch(type) {
 801f3ba:	7afb      	ldrb	r3, [r7, #11]
 801f3bc:	2b03      	cmp	r3, #3
 801f3be:	d83e      	bhi.n	801f43e <lv_page_set_style+0x9a>
 801f3c0:	a201      	add	r2, pc, #4	; (adr r2, 801f3c8 <lv_page_set_style+0x24>)
 801f3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3c6:	bf00      	nop
 801f3c8:	0801f3d9 	.word	0x0801f3d9
 801f3cc:	0801f3e3 	.word	0x0801f3e3
 801f3d0:	0801f3f1 	.word	0x0801f3f1
 801f3d4:	0801f437 	.word	0x0801f437
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 801f3d8:	6879      	ldr	r1, [r7, #4]
 801f3da:	68f8      	ldr	r0, [r7, #12]
 801f3dc:	f7ea fec5 	bl	800a16a <lv_obj_set_style>
 801f3e0:	e02d      	b.n	801f43e <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 801f3e2:	697b      	ldr	r3, [r7, #20]
 801f3e4:	685b      	ldr	r3, [r3, #4]
 801f3e6:	6879      	ldr	r1, [r7, #4]
 801f3e8:	4618      	mov	r0, r3
 801f3ea:	f7ea febe 	bl	800a16a <lv_obj_set_style>
 801f3ee:	e026      	b.n	801f43e <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SB:
            ext->sb.style = style;
 801f3f0:	697b      	ldr	r3, [r7, #20]
 801f3f2:	687a      	ldr	r2, [r7, #4]
 801f3f4:	609a      	str	r2, [r3, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801f3f6:	697b      	ldr	r3, [r7, #20]
 801f3f8:	f103 020c 	add.w	r2, r3, #12
 801f3fc:	697b      	ldr	r3, [r7, #20]
 801f3fe:	689b      	ldr	r3, [r3, #8]
 801f400:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801f404:	4619      	mov	r1, r3
 801f406:	4610      	mov	r0, r2
 801f408:	f7f6 ff05 	bl	8016216 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801f40c:	697b      	ldr	r3, [r7, #20]
 801f40e:	f103 0214 	add.w	r2, r3, #20
 801f412:	697b      	ldr	r3, [r7, #20]
 801f414:	689b      	ldr	r3, [r3, #8]
 801f416:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801f41a:	4619      	mov	r1, r3
 801f41c:	4610      	mov	r0, r2
 801f41e:	f7f6 fee2 	bl	80161e6 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801f422:	68f8      	ldr	r0, [r7, #12]
 801f424:	f001 f9a2 	bl	802076c <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 801f428:	68f8      	ldr	r0, [r7, #12]
 801f42a:	f7eb f817 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 801f42e:	68f8      	ldr	r0, [r7, #12]
 801f430:	f7e9 ff9f 	bl	8009372 <lv_obj_invalidate>
            break;
 801f434:	e003      	b.n	801f43e <lv_page_set_style+0x9a>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 801f436:	697b      	ldr	r3, [r7, #20]
 801f438:	687a      	ldr	r2, [r7, #4]
 801f43a:	625a      	str	r2, [r3, #36]	; 0x24
 801f43c:	bf00      	nop
#endif
    }
}
 801f43e:	bf00      	nop
 801f440:	3718      	adds	r7, #24
 801f442:	46bd      	mov	sp, r7
 801f444:	bd80      	pop	{r7, pc}
 801f446:	bf00      	nop

0801f448 <lv_page_get_scrl>:
 * Get the scrollable object of a page
 * @param page pointer to a page object
 * @return pointer to a container which is the scrollable part of the page
 */
lv_obj_t * lv_page_get_scrl(const lv_obj_t * page)
{
 801f448:	b580      	push	{r7, lr}
 801f44a:	b084      	sub	sp, #16
 801f44c:	af00      	add	r7, sp, #0
 801f44e:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f450:	6878      	ldr	r0, [r7, #4]
 801f452:	f7eb f9ba 	bl	800a7ca <lv_obj_get_ext_attr>
 801f456:	60f8      	str	r0, [r7, #12]

    return ext->scrl;
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	685b      	ldr	r3, [r3, #4]
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	3710      	adds	r7, #16
 801f460:	46bd      	mov	sp, r7
 801f462:	bd80      	pop	{r7, pc}

0801f464 <lv_page_get_style>:
 * @param page pointer to page object
 * @param type which style should be get
 * @return style pointer to a style
 *  */
const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type)
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b084      	sub	sp, #16
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
 801f46c:	460b      	mov	r3, r1
 801f46e:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801f470:	2300      	movs	r3, #0
 801f472:	60fb      	str	r3, [r7, #12]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	f7eb f9a8 	bl	800a7ca <lv_obj_get_ext_attr>
 801f47a:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801f47c:	78fb      	ldrb	r3, [r7, #3]
 801f47e:	2b03      	cmp	r3, #3
 801f480:	d81e      	bhi.n	801f4c0 <lv_page_get_style+0x5c>
 801f482:	a201      	add	r2, pc, #4	; (adr r2, 801f488 <lv_page_get_style+0x24>)
 801f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f488:	0801f499 	.word	0x0801f499
 801f48c:	0801f4a3 	.word	0x0801f4a3
 801f490:	0801f4b1 	.word	0x0801f4b1
 801f494:	0801f4b9 	.word	0x0801f4b9
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 801f498:	6878      	ldr	r0, [r7, #4]
 801f49a:	f7eb f8db 	bl	800a654 <lv_obj_get_style>
 801f49e:	60f8      	str	r0, [r7, #12]
 801f4a0:	e011      	b.n	801f4c6 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801f4a2:	68bb      	ldr	r3, [r7, #8]
 801f4a4:	685b      	ldr	r3, [r3, #4]
 801f4a6:	4618      	mov	r0, r3
 801f4a8:	f7eb f8d4 	bl	800a654 <lv_obj_get_style>
 801f4ac:	60f8      	str	r0, [r7, #12]
 801f4ae:	e00a      	b.n	801f4c6 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 801f4b0:	68bb      	ldr	r3, [r7, #8]
 801f4b2:	689b      	ldr	r3, [r3, #8]
 801f4b4:	60fb      	str	r3, [r7, #12]
 801f4b6:	e006      	b.n	801f4c6 <lv_page_get_style+0x62>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801f4b8:	68bb      	ldr	r3, [r7, #8]
 801f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4bc:	60fb      	str	r3, [r7, #12]
 801f4be:	e002      	b.n	801f4c6 <lv_page_get_style+0x62>
#endif
        default: style = NULL; break;
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	60fb      	str	r3, [r7, #12]
 801f4c4:	bf00      	nop
    }

    return style;
 801f4c6:	68fb      	ldr	r3, [r7, #12]
}
 801f4c8:	4618      	mov	r0, r3
 801f4ca:	3710      	adds	r7, #16
 801f4cc:	46bd      	mov	sp, r7
 801f4ce:	bd80      	pop	{r7, pc}

0801f4d0 <lv_page_scroll_hor>:
 * Scroll the page horizontally
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll right; > 0 scroll left)
 */
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)
{
 801f4d0:	b580      	push	{r7, lr}
 801f4d2:	b08e      	sub	sp, #56	; 0x38
 801f4d4:	af00      	add	r7, sp, #0
 801f4d6:	6078      	str	r0, [r7, #4]
 801f4d8:	460b      	mov	r3, r1
 801f4da:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801f4dc:	6878      	ldr	r0, [r7, #4]
 801f4de:	f7ff ffb3 	bl	801f448 <lv_page_get_scrl>
 801f4e2:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f4e6:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_x(scrl);
 801f4e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f4ea:	f7eb f851 	bl	800a590 <lv_obj_get_x>
 801f4ee:	4603      	mov	r3, r0
 801f4f0:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801f4f2:	69fa      	ldr	r2, [r7, #28]
 801f4f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f4f8:	4413      	add	r3, r2
 801f4fa:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801f4fc:	4b11      	ldr	r3, [pc, #68]	; (801f544 <lv_page_scroll_hor+0x74>)
 801f4fe:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801f500:	4b11      	ldr	r3, [pc, #68]	; (801f548 <lv_page_scroll_hor+0x78>)
 801f502:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801f504:	2300      	movs	r3, #0
 801f506:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801f508:	2300      	movs	r3, #0
 801f50a:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801f50c:	23c8      	movs	r3, #200	; 0xc8
 801f50e:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801f510:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f514:	f36f 0300 	bfc	r3, #0, #1
 801f518:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801f51c:	2300      	movs	r3, #0
 801f51e:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801f520:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f524:	f36f 0341 	bfc	r3, #1, #1
 801f528:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801f52c:	2300      	movs	r3, #0
 801f52e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801f530:	f107 030c 	add.w	r3, r7, #12
 801f534:	4618      	mov	r0, r3
 801f536:	f7f6 fc13 	bl	8015d60 <lv_anim_create>
#else
    lv_obj_set_x(scrl, lv_obj_get_x(scrl) + dist);
#endif
}
 801f53a:	bf00      	nop
 801f53c:	3738      	adds	r7, #56	; 0x38
 801f53e:	46bd      	mov	sp, r7
 801f540:	bd80      	pop	{r7, pc}
 801f542:	bf00      	nop
 801f544:	08009687 	.word	0x08009687
 801f548:	08015eb1 	.word	0x08015eb1

0801f54c <lv_page_scroll_ver>:
 * Scroll the page vertically
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll down; > 0 scroll up)
 */
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	b08e      	sub	sp, #56	; 0x38
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
 801f554:	460b      	mov	r3, r1
 801f556:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801f558:	6878      	ldr	r0, [r7, #4]
 801f55a:	f7ff ff75 	bl	801f448 <lv_page_get_scrl>
 801f55e:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801f560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f562:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_y(scrl);
 801f564:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f566:	f7eb f82c 	bl	800a5c2 <lv_obj_get_y>
 801f56a:	4603      	mov	r3, r0
 801f56c:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801f56e:	69fa      	ldr	r2, [r7, #28]
 801f570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f574:	4413      	add	r3, r2
 801f576:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801f578:	4b11      	ldr	r3, [pc, #68]	; (801f5c0 <lv_page_scroll_ver+0x74>)
 801f57a:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801f57c:	4b11      	ldr	r3, [pc, #68]	; (801f5c4 <lv_page_scroll_ver+0x78>)
 801f57e:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801f580:	2300      	movs	r3, #0
 801f582:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801f584:	2300      	movs	r3, #0
 801f586:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801f588:	23c8      	movs	r3, #200	; 0xc8
 801f58a:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801f58c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f590:	f36f 0300 	bfc	r3, #0, #1
 801f594:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801f598:	2300      	movs	r3, #0
 801f59a:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801f59c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f5a0:	f36f 0341 	bfc	r3, #1, #1
 801f5a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801f5ac:	f107 030c 	add.w	r3, r7, #12
 801f5b0:	4618      	mov	r0, r3
 801f5b2:	f7f6 fbd5 	bl	8015d60 <lv_anim_create>
#else
    lv_obj_set_y(scrl, lv_obj_get_y(scrl) + dist);
#endif
}
 801f5b6:	bf00      	nop
 801f5b8:	3738      	adds	r7, #56	; 0x38
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	bd80      	pop	{r7, pc}
 801f5be:	bf00      	nop
 801f5c0:	080096b1 	.word	0x080096b1
 801f5c4:	08015eb1 	.word	0x08015eb1

0801f5c8 <lv_page_start_edge_flash>:
 * Not intended to use directly by the user but by other object types internally.
 * Start an edge flash animation. Exactly one `ext->edge_flash.xxx_ip` should be set
 * @param page
 */
void lv_page_start_edge_flash(lv_obj_t * page)
{
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b08e      	sub	sp, #56	; 0x38
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f5d0:	6878      	ldr	r0, [r7, #4]
 801f5d2:	f7eb f8fa 	bl	800a7ca <lv_obj_get_ext_attr>
 801f5d6:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->edge_flash.enabled) {
 801f5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f5da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f5de:	f003 0301 	and.w	r3, r3, #1
 801f5e2:	b2db      	uxtb	r3, r3
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d026      	beq.n	801f636 <lv_page_start_edge_flash+0x6e>
        lv_anim_t a;
        a.var            = page;
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	60fb      	str	r3, [r7, #12]
        a.start          = 0;
 801f5ec:	2300      	movs	r3, #0
 801f5ee:	61fb      	str	r3, [r7, #28]
        a.end            = LV_PAGE_END_FLASH_SIZE;
 801f5f0:	2319      	movs	r3, #25
 801f5f2:	623b      	str	r3, [r7, #32]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 801f5f4:	4b12      	ldr	r3, [pc, #72]	; (801f640 <lv_page_start_edge_flash+0x78>)
 801f5f6:	613b      	str	r3, [r7, #16]
        a.path_cb        = lv_anim_path_linear;
 801f5f8:	4b12      	ldr	r3, [pc, #72]	; (801f644 <lv_page_start_edge_flash+0x7c>)
 801f5fa:	617b      	str	r3, [r7, #20]
        a.ready_cb       = edge_flash_anim_end;
 801f5fc:	4b12      	ldr	r3, [pc, #72]	; (801f648 <lv_page_start_edge_flash+0x80>)
 801f5fe:	61bb      	str	r3, [r7, #24]
        a.act_time       = 0;
 801f600:	2300      	movs	r3, #0
 801f602:	84fb      	strh	r3, [r7, #38]	; 0x26
        a.time           = LV_PAGE_END_ANIM_TIME;
 801f604:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801f608:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.playback       = 1;
 801f60a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f60e:	f043 0301 	orr.w	r3, r3, #1
 801f612:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801f616:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801f61a:	853b      	strh	r3, [r7, #40]	; 0x28
        a.repeat         = 0;
 801f61c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801f620:	f36f 0341 	bfc	r3, #1, #1
 801f624:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.repeat_pause   = 0;
 801f628:	2300      	movs	r3, #0
 801f62a:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_anim_create(&a);
 801f62c:	f107 030c 	add.w	r3, r7, #12
 801f630:	4618      	mov	r0, r3
 801f632:	f7f6 fb95 	bl	8015d60 <lv_anim_create>
    }
#else
    (void)page; /*Unused*/
#endif
}
 801f636:	bf00      	nop
 801f638:	3738      	adds	r7, #56	; 0x38
 801f63a:	46bd      	mov	sp, r7
 801f63c:	bd80      	pop	{r7, pc}
 801f63e:	bf00      	nop
 801f640:	08020d6b 	.word	0x08020d6b
 801f644:	08015eb1 	.word	0x08015eb1
 801f648:	08020d93 	.word	0x08020d93

0801f64c <lv_page_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_page_design(lv_obj_t * page, const lv_area_t * mask, lv_design_mode_t mode)
{
 801f64c:	b590      	push	{r4, r7, lr}
 801f64e:	b0ab      	sub	sp, #172	; 0xac
 801f650:	af00      	add	r7, sp, #0
 801f652:	60f8      	str	r0, [r7, #12]
 801f654:	60b9      	str	r1, [r7, #8]
 801f656:	4613      	mov	r3, r2
 801f658:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801f65a:	79fb      	ldrb	r3, [r7, #7]
 801f65c:	2b02      	cmp	r3, #2
 801f65e:	d107      	bne.n	801f670 <lv_page_design+0x24>
        return ancestor_design(page, mask, mode);
 801f660:	4ba3      	ldr	r3, [pc, #652]	; (801f8f0 <lv_page_design+0x2a4>)
 801f662:	681b      	ldr	r3, [r3, #0]
 801f664:	79fa      	ldrb	r2, [r7, #7]
 801f666:	68b9      	ldr	r1, [r7, #8]
 801f668:	68f8      	ldr	r0, [r7, #12]
 801f66a:	4798      	blx	r3
 801f66c:	4603      	mov	r3, r0
 801f66e:	e25c      	b.n	801fb2a <lv_page_design+0x4de>
    }
    /*Cache page bg style for temporary modification*/
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801f670:	2100      	movs	r1, #0
 801f672:	68f8      	ldr	r0, [r7, #12]
 801f674:	f7ff fef6 	bl	801f464 <lv_page_get_style>
 801f678:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    lv_style_t style_tmp;
    lv_style_copy(&style_tmp, style);
 801f67c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801f680:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801f684:	4618      	mov	r0, r3
 801f686:	f7ec fb0f 	bl	800bca8 <lv_style_copy>

    if(mode == LV_DESIGN_DRAW_MAIN) {
 801f68a:	79fb      	ldrb	r3, [r7, #7]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d110      	bne.n	801f6b2 <lv_page_design+0x66>
        /*Draw without border*/
        style_tmp.body.border.width = 0;
 801f690:	2300      	movs	r3, #0
 801f692:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	f103 0410 	add.w	r4, r3, #16
 801f69c:	68f8      	ldr	r0, [r7, #12]
 801f69e:	f7eb f846 	bl	800a72e <lv_obj_get_opa_scale>
 801f6a2:	4603      	mov	r3, r0
 801f6a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801f6a8:	68b9      	ldr	r1, [r7, #8]
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	f7f0 fd41 	bl	8010132 <lv_draw_rect>
 801f6b0:	e23a      	b.n	801fb28 <lv_page_design+0x4dc>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 801f6b2:	79fb      	ldrb	r3, [r7, #7]
 801f6b4:	2b01      	cmp	r3, #1
 801f6b6:	f040 8237 	bne.w	801fb28 <lv_page_design+0x4dc>
        /*Draw only a border*/
        style_tmp.body.shadow.width = 0;
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        style_tmp.body.opa          = LV_OPA_TRANSP;
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	f103 0410 	add.w	r4, r3, #16
 801f6cc:	68f8      	ldr	r0, [r7, #12]
 801f6ce:	f7eb f82e 	bl	800a72e <lv_obj_get_opa_scale>
 801f6d2:	4603      	mov	r3, r0
 801f6d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801f6d8:	68b9      	ldr	r1, [r7, #8]
 801f6da:	4620      	mov	r0, r4
 801f6dc:	f7f0 fd29 	bl	8010132 <lv_draw_rect>

        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f6e0:	68f8      	ldr	r0, [r7, #12]
 801f6e2:	f7eb f872 	bl	800a7ca <lv_obj_get_ext_attr>
 801f6e6:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

        /*Draw the scrollbars*/
        lv_area_t sb_area;
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801f6ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f6ee:	7f1b      	ldrb	r3, [r3, #28]
 801f6f0:	f003 0301 	and.w	r3, r3, #1
 801f6f4:	b2db      	uxtb	r3, r3
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d050      	beq.n	801f79c <lv_page_design+0x150>
 801f6fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f6fe:	7f1b      	ldrb	r3, [r3, #28]
 801f700:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f704:	b2db      	uxtb	r3, r3
 801f706:	f003 0304 	and.w	r3, r3, #4
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d146      	bne.n	801f79c <lv_page_design+0x150>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 801f70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f712:	f103 020c 	add.w	r2, r3, #12
 801f716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801f71a:	4611      	mov	r1, r2
 801f71c:	4618      	mov	r0, r3
 801f71e:	f7ff fc03 	bl	801ef28 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801f722:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801f726:	b29a      	uxth	r2, r3
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f72e:	b29b      	uxth	r3, r3
 801f730:	4413      	add	r3, r2
 801f732:	b29b      	uxth	r3, r3
 801f734:	b21b      	sxth	r3, r3
 801f736:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801f73a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801f73e:	b29a      	uxth	r2, r3
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f746:	b29b      	uxth	r3, r3
 801f748:	4413      	add	r3, r2
 801f74a:	b29b      	uxth	r3, r3
 801f74c:	b21b      	sxth	r3, r3
 801f74e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801f752:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801f756:	b29a      	uxth	r2, r3
 801f758:	68fb      	ldr	r3, [r7, #12]
 801f75a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f75e:	b29b      	uxth	r3, r3
 801f760:	4413      	add	r3, r2
 801f762:	b29b      	uxth	r3, r3
 801f764:	b21b      	sxth	r3, r3
 801f766:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801f76a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801f76e:	b29a      	uxth	r2, r3
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f776:	b29b      	uxth	r3, r3
 801f778:	4413      	add	r3, r2
 801f77a:	b29b      	uxth	r3, r3
 801f77c:	b21b      	sxth	r3, r3
 801f77e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801f782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f786:	689c      	ldr	r4, [r3, #8]
 801f788:	68f8      	ldr	r0, [r7, #12]
 801f78a:	f7ea ffd0 	bl	800a72e <lv_obj_get_opa_scale>
 801f78e:	4603      	mov	r3, r0
 801f790:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801f794:	4622      	mov	r2, r4
 801f796:	68b9      	ldr	r1, [r7, #8]
 801f798:	f7f0 fccb 	bl	8010132 <lv_draw_rect>
        }

        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801f79c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f7a0:	7f1b      	ldrb	r3, [r3, #28]
 801f7a2:	f003 0302 	and.w	r3, r3, #2
 801f7a6:	b2db      	uxtb	r3, r3
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d050      	beq.n	801f84e <lv_page_design+0x202>
 801f7ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f7b0:	7f1b      	ldrb	r3, [r3, #28]
 801f7b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801f7b6:	b2db      	uxtb	r3, r3
 801f7b8:	f003 0304 	and.w	r3, r3, #4
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d146      	bne.n	801f84e <lv_page_design+0x202>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 801f7c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f7c4:	f103 0214 	add.w	r2, r3, #20
 801f7c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801f7cc:	4611      	mov	r1, r2
 801f7ce:	4618      	mov	r0, r3
 801f7d0:	f7ff fbaa 	bl	801ef28 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801f7d4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801f7d8:	b29a      	uxth	r2, r3
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f7e0:	b29b      	uxth	r3, r3
 801f7e2:	4413      	add	r3, r2
 801f7e4:	b29b      	uxth	r3, r3
 801f7e6:	b21b      	sxth	r3, r3
 801f7e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801f7ec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801f7f0:	b29a      	uxth	r2, r3
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f7f8:	b29b      	uxth	r3, r3
 801f7fa:	4413      	add	r3, r2
 801f7fc:	b29b      	uxth	r3, r3
 801f7fe:	b21b      	sxth	r3, r3
 801f800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801f804:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801f808:	b29a      	uxth	r2, r3
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f810:	b29b      	uxth	r3, r3
 801f812:	4413      	add	r3, r2
 801f814:	b29b      	uxth	r3, r3
 801f816:	b21b      	sxth	r3, r3
 801f818:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801f81c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801f820:	b29a      	uxth	r2, r3
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f828:	b29b      	uxth	r3, r3
 801f82a:	4413      	add	r3, r2
 801f82c:	b29b      	uxth	r3, r3
 801f82e:	b21b      	sxth	r3, r3
 801f830:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801f834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f838:	689c      	ldr	r4, [r3, #8]
 801f83a:	68f8      	ldr	r0, [r7, #12]
 801f83c:	f7ea ff77 	bl	800a72e <lv_obj_get_opa_scale>
 801f840:	4603      	mov	r3, r0
 801f842:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801f846:	4622      	mov	r2, r4
 801f848:	68b9      	ldr	r1, [r7, #8]
 801f84a:	f7f0 fc72 	bl	8010132 <lv_draw_rect>
        }

#if LV_USE_ANIMATION
        {
            lv_coord_t page_w = lv_obj_get_width(page);
 801f84e:	68f8      	ldr	r0, [r7, #12]
 801f850:	f7ea fed0 	bl	800a5f4 <lv_obj_get_width>
 801f854:	4603      	mov	r3, r0
 801f856:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            lv_coord_t page_h = lv_obj_get_height(page);
 801f85a:	68f8      	ldr	r0, [r7, #12]
 801f85c:	f7ea fed8 	bl	800a610 <lv_obj_get_height>
 801f860:	4603      	mov	r3, r0
 801f862:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

            lv_area_t flash_area;

            if(ext->edge_flash.top_ip) {
 801f866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f86e:	f003 0302 	and.w	r3, r3, #2
 801f872:	b2db      	uxtb	r3, r3
 801f874:	2b00      	cmp	r3, #0
 801f876:	d03d      	beq.n	801f8f4 <lv_page_design+0x2a8>
                flash_area.x1 = page->coords.x1 - page_w;
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f87e:	b29a      	uxth	r2, r3
 801f880:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f884:	1ad3      	subs	r3, r2, r3
 801f886:	b29b      	uxth	r3, r3
 801f888:	b21b      	sxth	r3, r3
 801f88a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f894:	b29a      	uxth	r2, r3
 801f896:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f89a:	4413      	add	r3, r2
 801f89c:	b29b      	uxth	r3, r3
 801f89e:	b21b      	sxth	r3, r3
 801f8a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f8aa:	b29a      	uxth	r2, r3
 801f8ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f8b0:	4619      	mov	r1, r3
 801f8b2:	009b      	lsls	r3, r3, #2
 801f8b4:	1acb      	subs	r3, r1, r3
 801f8b6:	b29b      	uxth	r3, r3
 801f8b8:	4413      	add	r3, r2
 801f8ba:	b29a      	uxth	r2, r3
 801f8bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f8c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f8c4:	b29b      	uxth	r3, r3
 801f8c6:	4413      	add	r3, r2
 801f8c8:	b29b      	uxth	r3, r3
 801f8ca:	b21b      	sxth	r3, r3
 801f8cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801f8d0:	68fb      	ldr	r3, [r7, #12]
 801f8d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f8d6:	b29a      	uxth	r2, r3
 801f8d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f8dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f8e0:	b29b      	uxth	r3, r3
 801f8e2:	4413      	add	r3, r2
 801f8e4:	b29b      	uxth	r3, r3
 801f8e6:	b21b      	sxth	r3, r3
 801f8e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801f8ec:	e0cd      	b.n	801fa8a <lv_page_design+0x43e>
 801f8ee:	bf00      	nop
 801f8f0:	200177e4 	.word	0x200177e4
            } else if(ext->edge_flash.bottom_ip) {
 801f8f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f8fc:	f003 0304 	and.w	r3, r3, #4
 801f900:	b2db      	uxtb	r3, r3
 801f902:	2b00      	cmp	r3, #0
 801f904:	d03a      	beq.n	801f97c <lv_page_design+0x330>
                flash_area.x1 = page->coords.x1 - page_w;
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f90c:	b29a      	uxth	r2, r3
 801f90e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f912:	1ad3      	subs	r3, r2, r3
 801f914:	b29b      	uxth	r3, r3
 801f916:	b21b      	sxth	r3, r3
 801f918:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801f91c:	68fb      	ldr	r3, [r7, #12]
 801f91e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f922:	b29a      	uxth	r2, r3
 801f924:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f928:	4413      	add	r3, r2
 801f92a:	b29b      	uxth	r3, r3
 801f92c:	b21b      	sxth	r3, r3
 801f92e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f938:	b29a      	uxth	r2, r3
 801f93a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f93e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f942:	b29b      	uxth	r3, r3
 801f944:	1ad3      	subs	r3, r2, r3
 801f946:	b29b      	uxth	r3, r3
 801f948:	b21b      	sxth	r3, r3
 801f94a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f954:	b29a      	uxth	r2, r3
 801f956:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801f95a:	4619      	mov	r1, r3
 801f95c:	0049      	lsls	r1, r1, #1
 801f95e:	440b      	add	r3, r1
 801f960:	b29b      	uxth	r3, r3
 801f962:	4413      	add	r3, r2
 801f964:	b29a      	uxth	r2, r3
 801f966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f96a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f96e:	b29b      	uxth	r3, r3
 801f970:	1ad3      	subs	r3, r2, r3
 801f972:	b29b      	uxth	r3, r3
 801f974:	b21b      	sxth	r3, r3
 801f976:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801f97a:	e086      	b.n	801fa8a <lv_page_design+0x43e>
            } else if(ext->edge_flash.right_ip) {
 801f97c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f984:	f003 0308 	and.w	r3, r3, #8
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	d03a      	beq.n	801fa04 <lv_page_design+0x3b8>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801f98e:	68fb      	ldr	r3, [r7, #12]
 801f990:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f994:	b29a      	uxth	r2, r3
 801f996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f99a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f99e:	b29b      	uxth	r3, r3
 801f9a0:	1ad3      	subs	r3, r2, r3
 801f9a2:	b29b      	uxth	r3, r3
 801f9a4:	b21b      	sxth	r3, r3
 801f9a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f9b0:	b29a      	uxth	r2, r3
 801f9b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f9b6:	4619      	mov	r1, r3
 801f9b8:	0049      	lsls	r1, r1, #1
 801f9ba:	440b      	add	r3, r1
 801f9bc:	b29b      	uxth	r3, r3
 801f9be:	4413      	add	r3, r2
 801f9c0:	b29a      	uxth	r2, r3
 801f9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f9c6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f9ca:	b29b      	uxth	r3, r3
 801f9cc:	1ad3      	subs	r3, r2, r3
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	b21b      	sxth	r3, r3
 801f9d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f9dc:	b29a      	uxth	r2, r3
 801f9de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f9e2:	1ad3      	subs	r3, r2, r3
 801f9e4:	b29b      	uxth	r3, r3
 801f9e6:	b21b      	sxth	r3, r3
 801f9e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f9f2:	b29a      	uxth	r2, r3
 801f9f4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f9f8:	4413      	add	r3, r2
 801f9fa:	b29b      	uxth	r3, r3
 801f9fc:	b21b      	sxth	r3, r3
 801f9fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801fa02:	e042      	b.n	801fa8a <lv_page_design+0x43e>
            } else if(ext->edge_flash.left_ip) {
 801fa04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fa08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa0c:	f003 0310 	and.w	r3, r3, #16
 801fa10:	b2db      	uxtb	r3, r3
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d039      	beq.n	801fa8a <lv_page_design+0x43e>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fa1c:	b29a      	uxth	r2, r3
 801fa1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801fa22:	4619      	mov	r1, r3
 801fa24:	009b      	lsls	r3, r3, #2
 801fa26:	1acb      	subs	r3, r1, r3
 801fa28:	b29b      	uxth	r3, r3
 801fa2a:	4413      	add	r3, r2
 801fa2c:	b29a      	uxth	r2, r3
 801fa2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fa32:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	4413      	add	r3, r2
 801fa3a:	b29b      	uxth	r3, r3
 801fa3c:	b21b      	sxth	r3, r3
 801fa3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 801fa42:	68fb      	ldr	r3, [r7, #12]
 801fa44:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fa48:	b29a      	uxth	r2, r3
 801fa4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fa4e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fa52:	b29b      	uxth	r3, r3
 801fa54:	4413      	add	r3, r2
 801fa56:	b29b      	uxth	r3, r3
 801fa58:	b21b      	sxth	r3, r3
 801fa5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fa64:	b29a      	uxth	r2, r3
 801fa66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801fa6a:	1ad3      	subs	r3, r2, r3
 801fa6c:	b29b      	uxth	r3, r3
 801fa6e:	b21b      	sxth	r3, r3
 801fa70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fa7a:	b29a      	uxth	r2, r3
 801fa7c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801fa80:	4413      	add	r3, r2
 801fa82:	b29b      	uxth	r3, r3
 801fa84:	b21b      	sxth	r3, r3
 801fa86:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 801fa8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fa8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa92:	f003 0310 	and.w	r3, r3, #16
 801fa96:	b2db      	uxtb	r3, r3
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d11a      	bne.n	801fad2 <lv_page_design+0x486>
 801fa9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801faa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801faa4:	f003 0308 	and.w	r3, r3, #8
 801faa8:	b2db      	uxtb	r3, r3
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d111      	bne.n	801fad2 <lv_page_design+0x486>
 801faae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fab6:	f003 0302 	and.w	r3, r3, #2
 801faba:	b2db      	uxtb	r3, r3
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d108      	bne.n	801fad2 <lv_page_design+0x486>
 801fac0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fac8:	f003 0304 	and.w	r3, r3, #4
 801facc:	b2db      	uxtb	r3, r3
 801face:	2b00      	cmp	r3, #0
 801fad0:	d02a      	beq.n	801fb28 <lv_page_design+0x4dc>
               ext->edge_flash.bottom_ip) {
                lv_style_t flash_style;
                lv_style_copy(&flash_style, ext->edge_flash.style);
 801fad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801fad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fad8:	f107 0310 	add.w	r3, r7, #16
 801fadc:	4611      	mov	r1, r2
 801fade:	4618      	mov	r0, r3
 801fae0:	f7ec f8e2 	bl	800bca8 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 801fae4:	f647 4318 	movw	r3, #31768	; 0x7c18
 801fae8:	82fb      	strh	r3, [r7, #22]
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801faea:	7e3b      	ldrb	r3, [r7, #24]
 801faec:	461a      	mov	r2, r3
 801faee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801faf2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801faf6:	fb03 f302 	mul.w	r3, r3, r2
 801fafa:	4a0e      	ldr	r2, [pc, #56]	; (801fb34 <lv_page_design+0x4e8>)
 801fafc:	fb82 1203 	smull	r1, r2, r2, r3
 801fb00:	10d2      	asrs	r2, r2, #3
 801fb02:	17db      	asrs	r3, r3, #31
 801fb04:	1ad3      	subs	r3, r2, r3
 801fb06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                flash_style.body.opa    = opa;
 801fb0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	763b      	strb	r3, [r7, #24]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801fb12:	68f8      	ldr	r0, [r7, #12]
 801fb14:	f7ea fe0b 	bl	800a72e <lv_obj_get_opa_scale>
 801fb18:	4603      	mov	r3, r0
 801fb1a:	f107 0210 	add.w	r2, r7, #16
 801fb1e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801fb22:	68b9      	ldr	r1, [r7, #8]
 801fb24:	f7f0 fb05 	bl	8010132 <lv_draw_rect>
            }
        }
#endif
    }

    return true;
 801fb28:	2301      	movs	r3, #1
}
 801fb2a:	4618      	mov	r0, r3
 801fb2c:	37ac      	adds	r7, #172	; 0xac
 801fb2e:	46bd      	mov	sp, r7
 801fb30:	bd90      	pop	{r4, r7, pc}
 801fb32:	bf00      	nop
 801fb34:	51eb851f 	.word	0x51eb851f

0801fb38 <lv_scrl_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 801fb38:	b580      	push	{r7, lr}
 801fb3a:	b08a      	sub	sp, #40	; 0x28
 801fb3c:	af00      	add	r7, sp, #0
 801fb3e:	60f8      	str	r0, [r7, #12]
 801fb40:	60b9      	str	r1, [r7, #8]
 801fb42:	4613      	mov	r3, r2
 801fb44:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801fb46:	79fb      	ldrb	r3, [r7, #7]
 801fb48:	2b02      	cmp	r3, #2
 801fb4a:	d107      	bne.n	801fb5c <lv_scrl_design+0x24>
        return ancestor_design(scrl, mask, mode);
 801fb4c:	4b2f      	ldr	r3, [pc, #188]	; (801fc0c <lv_scrl_design+0xd4>)
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	79fa      	ldrb	r2, [r7, #7]
 801fb52:	68b9      	ldr	r1, [r7, #8]
 801fb54:	68f8      	ldr	r0, [r7, #12]
 801fb56:	4798      	blx	r3
 801fb58:	4603      	mov	r3, r0
 801fb5a:	e052      	b.n	801fc02 <lv_scrl_design+0xca>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801fb5c:	79fb      	ldrb	r3, [r7, #7]
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d145      	bne.n	801fbee <lv_scrl_design+0xb6>
#if LV_USE_GROUP
        /* If the page is focused in a group and
         * the background object is not visible (transparent)
         * then "activate" the style of the scrollable*/
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 801fb62:	68f8      	ldr	r0, [r7, #12]
 801fb64:	f7ea fd76 	bl	800a654 <lv_obj_get_style>
 801fb68:	6238      	str	r0, [r7, #32]
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 801fb6a:	68f8      	ldr	r0, [r7, #12]
 801fb6c:	f7ea fcd8 	bl	800a520 <lv_obj_get_parent>
 801fb70:	61f8      	str	r0, [r7, #28]
        const lv_style_t * style_page     = lv_obj_get_style(page);
 801fb72:	69f8      	ldr	r0, [r7, #28]
 801fb74:	f7ea fd6e 	bl	800a654 <lv_obj_get_style>
 801fb78:	61b8      	str	r0, [r7, #24]
        lv_group_t * g                    = lv_obj_get_group(page);
 801fb7a:	69f8      	ldr	r0, [r7, #28]
 801fb7c:	f7ea fe31 	bl	800a7e2 <lv_obj_get_group>
 801fb80:	6178      	str	r0, [r7, #20]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801fb82:	69bb      	ldr	r3, [r7, #24]
 801fb84:	7a1b      	ldrb	r3, [r3, #8]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	d127      	bne.n	801fbda <lv_scrl_design+0xa2>
           style_page->body.border.width == 0) { /*Is the background visible?*/
 801fb8a:	69bb      	ldr	r3, [r7, #24]
 801fb8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d122      	bne.n	801fbda <lv_scrl_design+0xa2>
            if(lv_group_get_focused(g) == page) {
 801fb94:	6978      	ldr	r0, [r7, #20]
 801fb96:	f7e8 fe06 	bl	80087a6 <lv_group_get_focused>
 801fb9a:	4602      	mov	r2, r0
 801fb9c:	69fb      	ldr	r3, [r7, #28]
 801fb9e:	4293      	cmp	r3, r2
 801fba0:	d11b      	bne.n	801fbda <lv_scrl_design+0xa2>
                lv_style_t * style_mod;
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 801fba2:	6a39      	ldr	r1, [r7, #32]
 801fba4:	6978      	ldr	r0, [r7, #20]
 801fba6:	f7e8 fdce 	bl	8008746 <lv_group_mod_style>
 801fbaa:	6278      	str	r0, [r7, #36]	; 0x24
                /*If still not visible modify the style a littel bit*/
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 801fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbae:	7a1b      	ldrb	r3, [r3, #8]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d10f      	bne.n	801fbd4 <lv_scrl_design+0x9c>
 801fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d10a      	bne.n	801fbd4 <lv_scrl_design+0x9c>
                    style_mod->body.opa          = LV_OPA_50;
 801fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc0:	227f      	movs	r2, #127	; 0x7f
 801fbc2:	721a      	strb	r2, [r3, #8]
                    style_mod->body.border.width = 1;
 801fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc6:	2201      	movs	r2, #1
 801fbc8:	819a      	strh	r2, [r3, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 801fbca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fbcc:	6978      	ldr	r0, [r7, #20]
 801fbce:	f7e8 fdba 	bl	8008746 <lv_group_mod_style>
 801fbd2:	6278      	str	r0, [r7, #36]	; 0x24
                }

                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 801fbd4:	68fb      	ldr	r3, [r7, #12]
 801fbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fbd8:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_design(scrl, mask, mode);
 801fbda:	4b0c      	ldr	r3, [pc, #48]	; (801fc0c <lv_scrl_design+0xd4>)
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	79fa      	ldrb	r2, [r7, #7]
 801fbe0:	68b9      	ldr	r1, [r7, #8]
 801fbe2:	68f8      	ldr	r0, [r7, #12]
 801fbe4:	4798      	blx	r3

#if LV_USE_GROUP
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	6a3a      	ldr	r2, [r7, #32]
 801fbea:	629a      	str	r2, [r3, #40]	; 0x28
 801fbec:	e008      	b.n	801fc00 <lv_scrl_design+0xc8>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801fbee:	79fb      	ldrb	r3, [r7, #7]
 801fbf0:	2b01      	cmp	r3, #1
 801fbf2:	d105      	bne.n	801fc00 <lv_scrl_design+0xc8>
        ancestor_design(scrl, mask, mode);
 801fbf4:	4b05      	ldr	r3, [pc, #20]	; (801fc0c <lv_scrl_design+0xd4>)
 801fbf6:	681b      	ldr	r3, [r3, #0]
 801fbf8:	79fa      	ldrb	r2, [r7, #7]
 801fbfa:	68b9      	ldr	r1, [r7, #8]
 801fbfc:	68f8      	ldr	r0, [r7, #12]
 801fbfe:	4798      	blx	r3
    }

    return true;
 801fc00:	2301      	movs	r3, #1
}
 801fc02:	4618      	mov	r0, r3
 801fc04:	3728      	adds	r7, #40	; 0x28
 801fc06:	46bd      	mov	sp, r7
 801fc08:	bd80      	pop	{r7, pc}
 801fc0a:	bf00      	nop
 801fc0c:	200177e4 	.word	0x200177e4

0801fc10 <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 801fc10:	b590      	push	{r4, r7, lr}
 801fc12:	b08f      	sub	sp, #60	; 0x3c
 801fc14:	af00      	add	r7, sp, #0
 801fc16:	60f8      	str	r0, [r7, #12]
 801fc18:	460b      	mov	r3, r1
 801fc1a:	607a      	str	r2, [r7, #4]
 801fc1c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 801fc1e:	4ba1      	ldr	r3, [pc, #644]	; (801fea4 <lv_page_signal+0x294>)
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	7af9      	ldrb	r1, [r7, #11]
 801fc24:	687a      	ldr	r2, [r7, #4]
 801fc26:	68f8      	ldr	r0, [r7, #12]
 801fc28:	4798      	blx	r3
 801fc2a:	4603      	mov	r3, r0
 801fc2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if(res != LV_RES_OK) return res;
 801fc30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801fc34:	2b01      	cmp	r3, #1
 801fc36:	d002      	beq.n	801fc3e <lv_page_signal+0x2e>
 801fc38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801fc3c:	e1c7      	b.n	801ffce <lv_page_signal+0x3be>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801fc3e:	68f8      	ldr	r0, [r7, #12]
 801fc40:	f7ea fdc3 	bl	800a7ca <lv_obj_get_ext_attr>
 801fc44:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801fc46:	7afb      	ldrb	r3, [r7, #11]
 801fc48:	2b01      	cmp	r3, #1
 801fc4a:	f040 8086 	bne.w	801fd5a <lv_page_signal+0x14a>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801fc4e:	2101      	movs	r1, #1
 801fc50:	68f8      	ldr	r0, [r7, #12]
 801fc52:	f7ff fc07 	bl	801f464 <lv_page_get_style>
 801fc56:	61f8      	str	r0, [r7, #28]
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
 801fc58:	68f8      	ldr	r0, [r7, #12]
 801fc5a:	f7ff f9b1 	bl	801efc0 <lv_page_get_scrl_fit_left>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	76fb      	strb	r3, [r7, #27]
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
 801fc62:	68f8      	ldr	r0, [r7, #12]
 801fc64:	f7ff f9bc 	bl	801efe0 <lv_page_get_scrl_fit_top>
 801fc68:	4603      	mov	r3, r0
 801fc6a:	76bb      	strb	r3, [r7, #26]
        child                    = lv_obj_get_child(page, NULL);
 801fc6c:	2100      	movs	r1, #0
 801fc6e:	68f8      	ldr	r0, [r7, #12]
 801fc70:	f7ea fc62 	bl	800a538 <lv_obj_get_child>
 801fc74:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801fc76:	e06c      	b.n	801fd52 <lv_page_signal+0x142>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801fc78:	2102      	movs	r1, #2
 801fc7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801fc7c:	f7ea fd76 	bl	800a76c <lv_obj_is_protected>
 801fc80:	4603      	mov	r3, r0
 801fc82:	f083 0301 	eor.w	r3, r3, #1
 801fc86:	b2db      	uxtb	r3, r3
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d05d      	beq.n	801fd48 <lv_page_signal+0x138>
                lv_obj_t * tmp = child;
 801fc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fc8e:	617b      	str	r3, [r7, #20]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801fc90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fc92:	68f8      	ldr	r0, [r7, #12]
 801fc94:	f7ea fc50 	bl	800a538 <lv_obj_get_child>
 801fc98:	6378      	str	r0, [r7, #52]	; 0x34

                /* Reposition the child to take padding into account (Only if it's on (0;0) now)
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 801fc9a:	697b      	ldr	r3, [r7, #20]
 801fc9c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fca6:	429a      	cmp	r2, r3
 801fca8:	d11f      	bne.n	801fcea <lv_page_signal+0xda>
 801fcaa:	7efb      	ldrb	r3, [r7, #27]
 801fcac:	2b01      	cmp	r3, #1
 801fcae:	d002      	beq.n	801fcb6 <lv_page_signal+0xa6>
 801fcb0:	7efb      	ldrb	r3, [r7, #27]
 801fcb2:	2b03      	cmp	r3, #3
 801fcb4:	d119      	bne.n	801fcea <lv_page_signal+0xda>
                    tmp->coords.x1 += style->body.padding.left;
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fcbc:	b29a      	uxth	r2, r3
 801fcbe:	69fb      	ldr	r3, [r7, #28]
 801fcc0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801fcc4:	b29b      	uxth	r3, r3
 801fcc6:	4413      	add	r3, r2
 801fcc8:	b29b      	uxth	r3, r3
 801fcca:	b21a      	sxth	r2, r3
 801fccc:	697b      	ldr	r3, [r7, #20]
 801fcce:	821a      	strh	r2, [r3, #16]
                    tmp->coords.x2 += style->body.padding.left;
 801fcd0:	697b      	ldr	r3, [r7, #20]
 801fcd2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801fcd6:	b29a      	uxth	r2, r3
 801fcd8:	69fb      	ldr	r3, [r7, #28]
 801fcda:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801fcde:	b29b      	uxth	r3, r3
 801fce0:	4413      	add	r3, r2
 801fce2:	b29b      	uxth	r3, r3
 801fce4:	b21a      	sxth	r2, r3
 801fce6:	697b      	ldr	r3, [r7, #20]
 801fce8:	829a      	strh	r2, [r3, #20]
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 801fcea:	697b      	ldr	r3, [r7, #20]
 801fcec:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801fcf0:	68fb      	ldr	r3, [r7, #12]
 801fcf2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fcf6:	429a      	cmp	r2, r3
 801fcf8:	d11f      	bne.n	801fd3a <lv_page_signal+0x12a>
 801fcfa:	7ebb      	ldrb	r3, [r7, #26]
 801fcfc:	2b01      	cmp	r3, #1
 801fcfe:	d002      	beq.n	801fd06 <lv_page_signal+0xf6>
 801fd00:	7ebb      	ldrb	r3, [r7, #26]
 801fd02:	2b03      	cmp	r3, #3
 801fd04:	d119      	bne.n	801fd3a <lv_page_signal+0x12a>
                    tmp->coords.y1 += style->body.padding.top;
 801fd06:	697b      	ldr	r3, [r7, #20]
 801fd08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fd0c:	b29a      	uxth	r2, r3
 801fd0e:	69fb      	ldr	r3, [r7, #28]
 801fd10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fd14:	b29b      	uxth	r3, r3
 801fd16:	4413      	add	r3, r2
 801fd18:	b29b      	uxth	r3, r3
 801fd1a:	b21a      	sxth	r2, r3
 801fd1c:	697b      	ldr	r3, [r7, #20]
 801fd1e:	825a      	strh	r2, [r3, #18]
                    tmp->coords.y2 += style->body.padding.top;
 801fd20:	697b      	ldr	r3, [r7, #20]
 801fd22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fd26:	b29a      	uxth	r2, r3
 801fd28:	69fb      	ldr	r3, [r7, #28]
 801fd2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fd2e:	b29b      	uxth	r3, r3
 801fd30:	4413      	add	r3, r2
 801fd32:	b29b      	uxth	r3, r3
 801fd34:	b21a      	sxth	r2, r3
 801fd36:	697b      	ldr	r3, [r7, #20]
 801fd38:	82da      	strh	r2, [r3, #22]
                }
                lv_obj_set_parent(tmp, ext->scrl);
 801fd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd3c:	685b      	ldr	r3, [r3, #4]
 801fd3e:	4619      	mov	r1, r3
 801fd40:	6978      	ldr	r0, [r7, #20]
 801fd42:	f7e9 fba5 	bl	8009490 <lv_obj_set_parent>
 801fd46:	e004      	b.n	801fd52 <lv_page_signal+0x142>
            } else {
                child = lv_obj_get_child(page, child);
 801fd48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fd4a:	68f8      	ldr	r0, [r7, #12]
 801fd4c:	f7ea fbf4 	bl	800a538 <lv_obj_get_child>
 801fd50:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801fd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d18f      	bne.n	801fc78 <lv_page_signal+0x68>
 801fd58:	e137      	b.n	801ffca <lv_page_signal+0x3ba>
            }
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801fd5a:	7afb      	ldrb	r3, [r7, #11]
 801fd5c:	2b04      	cmp	r3, #4
 801fd5e:	d11e      	bne.n	801fd9e <lv_page_signal+0x18e>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd62:	685b      	ldr	r3, [r3, #4]
 801fd64:	69db      	ldr	r3, [r3, #28]
 801fd66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd68:	6850      	ldr	r0, [r2, #4]
 801fd6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd6c:	6852      	ldr	r2, [r2, #4]
 801fd6e:	3210      	adds	r2, #16
 801fd70:	2102      	movs	r1, #2
 801fd72:	4798      	blx	r3

        /*The scrollbars are important only if they are visible now*/
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801fd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd76:	7f1b      	ldrb	r3, [r3, #28]
 801fd78:	f003 0301 	and.w	r3, r3, #1
 801fd7c:	b2db      	uxtb	r3, r3
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d106      	bne.n	801fd90 <lv_page_signal+0x180>
 801fd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd84:	7f1b      	ldrb	r3, [r3, #28]
 801fd86:	f003 0302 	and.w	r3, r3, #2
 801fd8a:	b2db      	uxtb	r3, r3
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d002      	beq.n	801fd96 <lv_page_signal+0x186>
 801fd90:	68f8      	ldr	r0, [r7, #12]
 801fd92:	f000 fceb 	bl	802076c <lv_page_sb_refresh>

        /*Refresh the ext. size because the scrollbars might be positioned out of the page*/
        lv_obj_refresh_ext_draw_pad(page);
 801fd96:	68f8      	ldr	r0, [r7, #12]
 801fd98:	f7ea fb60 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
 801fd9c:	e115      	b.n	801ffca <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801fd9e:	7afb      	ldrb	r3, [r7, #11]
 801fda0:	2b02      	cmp	r3, #2
 801fda2:	d138      	bne.n	801fe16 <lv_page_signal+0x206>
        /*Refresh the scrollbar and notify the scrl if the size is changed*/
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801fda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fda6:	685b      	ldr	r3, [r3, #4]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	f000 810e 	beq.w	801ffca <lv_page_signal+0x3ba>
 801fdae:	68f8      	ldr	r0, [r7, #12]
 801fdb0:	f7ea fc20 	bl	800a5f4 <lv_obj_get_width>
 801fdb4:	4603      	mov	r3, r0
 801fdb6:	461c      	mov	r4, r3
 801fdb8:	6878      	ldr	r0, [r7, #4]
 801fdba:	f7ff f8c3 	bl	801ef44 <lv_area_get_width>
 801fdbe:	4603      	mov	r3, r0
 801fdc0:	429c      	cmp	r4, r3
 801fdc2:	d10b      	bne.n	801fddc <lv_page_signal+0x1cc>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 801fdc4:	68f8      	ldr	r0, [r7, #12]
 801fdc6:	f7ea fc23 	bl	800a610 <lv_obj_get_height>
 801fdca:	4603      	mov	r3, r0
 801fdcc:	461c      	mov	r4, r3
 801fdce:	6878      	ldr	r0, [r7, #4]
 801fdd0:	f7ff f8cf 	bl	801ef72 <lv_area_get_height>
 801fdd4:	4603      	mov	r3, r0
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801fdd6:	429c      	cmp	r4, r3
 801fdd8:	f000 80f7 	beq.w	801ffca <lv_page_signal+0x3ba>
            /*If no hor_fit enabled set the scrollable's width to the page's width*/
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801fddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdde:	685b      	ldr	r3, [r3, #4]
 801fde0:	69db      	ldr	r3, [r3, #28]
 801fde2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fde4:	6850      	ldr	r0, [r2, #4]
 801fde6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fde8:	6852      	ldr	r2, [r2, #4]
 801fdea:	3210      	adds	r2, #16
 801fdec:	2102      	movs	r1, #2
 801fdee:	4798      	blx	r3

            /*The scrollbars are important only if they are visible now*/
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdf2:	7f1b      	ldrb	r3, [r3, #28]
 801fdf4:	f003 0301 	and.w	r3, r3, #1
 801fdf8:	b2db      	uxtb	r3, r3
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d107      	bne.n	801fe0e <lv_page_signal+0x1fe>
 801fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe00:	7f1b      	ldrb	r3, [r3, #28]
 801fe02:	f003 0302 	and.w	r3, r3, #2
 801fe06:	b2db      	uxtb	r3, r3
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	f000 80de 	beq.w	801ffca <lv_page_signal+0x3ba>
 801fe0e:	68f8      	ldr	r0, [r7, #12]
 801fe10:	f000 fcac 	bl	802076c <lv_page_sb_refresh>
 801fe14:	e0d9      	b.n	801ffca <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801fe16:	7afb      	ldrb	r3, [r7, #11]
 801fe18:	2b05      	cmp	r3, #5
 801fe1a:	d12b      	bne.n	801fe74 <lv_page_signal+0x264>
        /*Ensure ext. size for the scrollbars if they are out of the page*/
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801fe22:	461a      	mov	r2, r3
 801fe24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe26:	689b      	ldr	r3, [r3, #8]
 801fe28:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801fe2c:	425b      	negs	r3, r3
 801fe2e:	429a      	cmp	r2, r3
 801fe30:	da09      	bge.n	801fe46 <lv_page_signal+0x236>
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 801fe32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe34:	689b      	ldr	r3, [r3, #8]
 801fe36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801fe3a:	b29b      	uxth	r3, r3
 801fe3c:	425b      	negs	r3, r3
 801fe3e:	b29b      	uxth	r3, r3
 801fe40:	b21a      	sxth	r2, r3
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	869a      	strh	r2, [r3, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801fe4c:	461a      	mov	r2, r3
 801fe4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe50:	689b      	ldr	r3, [r3, #8]
 801fe52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801fe56:	425b      	negs	r3, r3
 801fe58:	429a      	cmp	r2, r3
 801fe5a:	f280 80b6 	bge.w	801ffca <lv_page_signal+0x3ba>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 801fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe60:	689b      	ldr	r3, [r3, #8]
 801fe62:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801fe66:	b29b      	uxth	r3, r3
 801fe68:	425b      	negs	r3, r3
 801fe6a:	b29b      	uxth	r3, r3
 801fe6c:	b21a      	sxth	r2, r3
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	869a      	strh	r2, [r3, #52]	; 0x34
 801fe72:	e0aa      	b.n	801ffca <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801fe74:	7afb      	ldrb	r3, [r7, #11]
 801fe76:	2b11      	cmp	r3, #17
 801fe78:	d17d      	bne.n	801ff76 <lv_page_signal+0x366>
        uint32_t c = *((uint32_t *)param);
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	623b      	str	r3, [r7, #32]

        if(c == LV_KEY_DOWN) {
 801fe80:	6a3b      	ldr	r3, [r7, #32]
 801fe82:	2b12      	cmp	r3, #18
 801fe84:	d110      	bne.n	801fea8 <lv_page_signal+0x298>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801fe86:	68f8      	ldr	r0, [r7, #12]
 801fe88:	f7ea fbc2 	bl	800a610 <lv_obj_get_height>
 801fe8c:	4603      	mov	r3, r0
 801fe8e:	425b      	negs	r3, r3
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	da00      	bge.n	801fe96 <lv_page_signal+0x286>
 801fe94:	3303      	adds	r3, #3
 801fe96:	109b      	asrs	r3, r3, #2
 801fe98:	b21b      	sxth	r3, r3
 801fe9a:	4619      	mov	r1, r3
 801fe9c:	68f8      	ldr	r0, [r7, #12]
 801fe9e:	f7ff fb55 	bl	801f54c <lv_page_scroll_ver>
 801fea2:	e092      	b.n	801ffca <lv_page_signal+0x3ba>
 801fea4:	200177e8 	.word	0x200177e8
        } else if(c == LV_KEY_UP) {
 801fea8:	6a3b      	ldr	r3, [r7, #32]
 801feaa:	2b11      	cmp	r3, #17
 801feac:	d10d      	bne.n	801feca <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801feae:	68f8      	ldr	r0, [r7, #12]
 801feb0:	f7ea fbae 	bl	800a610 <lv_obj_get_height>
 801feb4:	4603      	mov	r3, r0
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	da00      	bge.n	801febc <lv_page_signal+0x2ac>
 801feba:	3303      	adds	r3, #3
 801febc:	109b      	asrs	r3, r3, #2
 801febe:	b21b      	sxth	r3, r3
 801fec0:	4619      	mov	r1, r3
 801fec2:	68f8      	ldr	r0, [r7, #12]
 801fec4:	f7ff fb42 	bl	801f54c <lv_page_scroll_ver>
 801fec8:	e07f      	b.n	801ffca <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_RIGHT) {
 801feca:	6a3b      	ldr	r3, [r7, #32]
 801fecc:	2b13      	cmp	r3, #19
 801fece:	d128      	bne.n	801ff22 <lv_page_signal+0x312>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801fed0:	68f8      	ldr	r0, [r7, #12]
 801fed2:	f7ff f865 	bl	801efa0 <lv_page_get_scrl_width>
 801fed6:	4603      	mov	r3, r0
 801fed8:	461c      	mov	r4, r3
 801feda:	68f8      	ldr	r0, [r7, #12]
 801fedc:	f7ea fb8a 	bl	800a5f4 <lv_obj_get_width>
 801fee0:	4603      	mov	r3, r0
 801fee2:	429c      	cmp	r4, r3
 801fee4:	dc0e      	bgt.n	801ff04 <lv_page_signal+0x2f4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801fee6:	68f8      	ldr	r0, [r7, #12]
 801fee8:	f7ea fb92 	bl	800a610 <lv_obj_get_height>
 801feec:	4603      	mov	r3, r0
 801feee:	425b      	negs	r3, r3
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	da00      	bge.n	801fef6 <lv_page_signal+0x2e6>
 801fef4:	3303      	adds	r3, #3
 801fef6:	109b      	asrs	r3, r3, #2
 801fef8:	b21b      	sxth	r3, r3
 801fefa:	4619      	mov	r1, r3
 801fefc:	68f8      	ldr	r0, [r7, #12]
 801fefe:	f7ff fb25 	bl	801f54c <lv_page_scroll_ver>
 801ff02:	e062      	b.n	801ffca <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 801ff04:	68f8      	ldr	r0, [r7, #12]
 801ff06:	f7ea fb75 	bl	800a5f4 <lv_obj_get_width>
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	425b      	negs	r3, r3
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	da00      	bge.n	801ff14 <lv_page_signal+0x304>
 801ff12:	3303      	adds	r3, #3
 801ff14:	109b      	asrs	r3, r3, #2
 801ff16:	b21b      	sxth	r3, r3
 801ff18:	4619      	mov	r1, r3
 801ff1a:	68f8      	ldr	r0, [r7, #12]
 801ff1c:	f7ff fad8 	bl	801f4d0 <lv_page_scroll_hor>
 801ff20:	e053      	b.n	801ffca <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_LEFT) {
 801ff22:	6a3b      	ldr	r3, [r7, #32]
 801ff24:	2b14      	cmp	r3, #20
 801ff26:	d150      	bne.n	801ffca <lv_page_signal+0x3ba>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801ff28:	68f8      	ldr	r0, [r7, #12]
 801ff2a:	f7ff f839 	bl	801efa0 <lv_page_get_scrl_width>
 801ff2e:	4603      	mov	r3, r0
 801ff30:	461c      	mov	r4, r3
 801ff32:	68f8      	ldr	r0, [r7, #12]
 801ff34:	f7ea fb5e 	bl	800a5f4 <lv_obj_get_width>
 801ff38:	4603      	mov	r3, r0
 801ff3a:	429c      	cmp	r4, r3
 801ff3c:	dc0d      	bgt.n	801ff5a <lv_page_signal+0x34a>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801ff3e:	68f8      	ldr	r0, [r7, #12]
 801ff40:	f7ea fb66 	bl	800a610 <lv_obj_get_height>
 801ff44:	4603      	mov	r3, r0
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	da00      	bge.n	801ff4c <lv_page_signal+0x33c>
 801ff4a:	3303      	adds	r3, #3
 801ff4c:	109b      	asrs	r3, r3, #2
 801ff4e:	b21b      	sxth	r3, r3
 801ff50:	4619      	mov	r1, r3
 801ff52:	68f8      	ldr	r0, [r7, #12]
 801ff54:	f7ff fafa 	bl	801f54c <lv_page_scroll_ver>
 801ff58:	e037      	b.n	801ffca <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 801ff5a:	68f8      	ldr	r0, [r7, #12]
 801ff5c:	f7ea fb4a 	bl	800a5f4 <lv_obj_get_width>
 801ff60:	4603      	mov	r3, r0
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	da00      	bge.n	801ff68 <lv_page_signal+0x358>
 801ff66:	3303      	adds	r3, #3
 801ff68:	109b      	asrs	r3, r3, #2
 801ff6a:	b21b      	sxth	r3, r3
 801ff6c:	4619      	mov	r1, r3
 801ff6e:	68f8      	ldr	r0, [r7, #12]
 801ff70:	f7ff faae 	bl	801f4d0 <lv_page_scroll_hor>
 801ff74:	e029      	b.n	801ffca <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ff76:	7afb      	ldrb	r3, [r7, #11]
 801ff78:	2b12      	cmp	r3, #18
 801ff7a:	d105      	bne.n	801ff88 <lv_page_signal+0x378>
        bool * editable = (bool *)param;
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	627b      	str	r3, [r7, #36]	; 0x24
        *editable       = true;
 801ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff82:	2201      	movs	r2, #1
 801ff84:	701a      	strb	r2, [r3, #0]
 801ff86:	e020      	b.n	801ffca <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801ff88:	7afb      	ldrb	r3, [r7, #11]
 801ff8a:	2b06      	cmp	r3, #6
 801ff8c:	d11d      	bne.n	801ffca <lv_page_signal+0x3ba>
        lv_obj_type_t * buf = param;
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ff92:	2300      	movs	r3, #0
 801ff94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ff98:	e00b      	b.n	801ffb2 <lv_page_signal+0x3a2>
            if(buf->type[i] == NULL) break;
 801ff9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ff9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d009      	beq.n	801ffbc <lv_page_signal+0x3ac>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ffa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ffac:	3301      	adds	r3, #1
 801ffae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ffb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ffb6:	2b06      	cmp	r3, #6
 801ffb8:	d9ef      	bls.n	801ff9a <lv_page_signal+0x38a>
 801ffba:	e000      	b.n	801ffbe <lv_page_signal+0x3ae>
            if(buf->type[i] == NULL) break;
 801ffbc:	bf00      	nop
        }
        buf->type[i] = "lv_page";
 801ffbe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ffc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffc4:	4904      	ldr	r1, [pc, #16]	; (801ffd8 <lv_page_signal+0x3c8>)
 801ffc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ffca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801ffce:	4618      	mov	r0, r3
 801ffd0:	373c      	adds	r7, #60	; 0x3c
 801ffd2:	46bd      	mov	sp, r7
 801ffd4:	bd90      	pop	{r4, r7, pc}
 801ffd6:	bf00      	nop
 801ffd8:	0802d518 	.word	0x0802d518

0801ffdc <lv_page_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 801ffdc:	b590      	push	{r4, r7, lr}
 801ffde:	b097      	sub	sp, #92	; 0x5c
 801ffe0:	af00      	add	r7, sp, #0
 801ffe2:	60f8      	str	r0, [r7, #12]
 801ffe4:	460b      	mov	r3, r1
 801ffe6:	607a      	str	r2, [r7, #4]
 801ffe8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 801ffea:	4bbf      	ldr	r3, [pc, #764]	; (80202e8 <lv_page_scrollable_signal+0x30c>)
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	7af9      	ldrb	r1, [r7, #11]
 801fff0:	687a      	ldr	r2, [r7, #4]
 801fff2:	68f8      	ldr	r0, [r7, #12]
 801fff4:	4798      	blx	r3
 801fff6:	4603      	mov	r3, r0
 801fff8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    if(res != LV_RES_OK) return res;
 801fffc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8020000:	2b01      	cmp	r3, #1
 8020002:	d002      	beq.n	802000a <lv_page_scrollable_signal+0x2e>
 8020004:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8020008:	e37e      	b.n	8020708 <lv_page_scrollable_signal+0x72c>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 802000a:	68f8      	ldr	r0, [r7, #12]
 802000c:	f7ea fa88 	bl	800a520 <lv_obj_get_parent>
 8020010:	64f8      	str	r0, [r7, #76]	; 0x4c
    const lv_style_t * page_style = lv_obj_get_style(page);
 8020012:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020014:	f7ea fb1e 	bl	800a654 <lv_obj_get_style>
 8020018:	64b8      	str	r0, [r7, #72]	; 0x48
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 802001a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802001c:	f7ea fbd5 	bl	800a7ca <lv_obj_get_ext_attr>
 8020020:	6478      	str	r0, [r7, #68]	; 0x44

    if(sign == LV_SIGNAL_CORD_CHG) {
 8020022:	7afb      	ldrb	r3, [r7, #11]
 8020024:	2b02      	cmp	r3, #2
 8020026:	f040 82c8 	bne.w	80205ba <lv_page_scrollable_signal+0x5de>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 802002a:	68f8      	ldr	r0, [r7, #12]
 802002c:	f7ea fab0 	bl	800a590 <lv_obj_get_x>
 8020030:	4603      	mov	r3, r0
 8020032:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8020036:	68f8      	ldr	r0, [r7, #12]
 8020038:	f7ea fac3 	bl	800a5c2 <lv_obj_get_y>
 802003c:	4603      	mov	r3, r0
 802003e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        bool refr_x      = false;
 8020042:	2300      	movs	r3, #0
 8020044:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        bool refr_y      = false;
 8020048:	2300      	movs	r3, #0
 802004a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 802004e:	f107 031c 	add.w	r3, r7, #28
 8020052:	4619      	mov	r1, r3
 8020054:	68f8      	ldr	r0, [r7, #12]
 8020056:	f7ea fa8c 	bl	800a572 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 802005a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802005e:	4619      	mov	r1, r3
 8020060:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020062:	f7ea fa86 	bl	800a572 <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	63fb      	str	r3, [r7, #60]	; 0x3c
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020070:	b29a      	uxth	r2, r3
 8020072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020078:	b29b      	uxth	r3, r3
 802007a:	1ad3      	subs	r3, r2, r3
 802007c:	b29b      	uxth	r3, r3
 802007e:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020086:	b29a      	uxth	r2, r3
 8020088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802008a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802008e:	b29b      	uxth	r3, r3
 8020090:	1ad3      	subs	r3, r2, r3
 8020092:	b29b      	uxth	r3, r3
 8020094:	873b      	strh	r3, [r7, #56]	; 0x38
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8020096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020098:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 802009c:	b29a      	uxth	r2, r3
 802009e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80200a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80200a4:	b29b      	uxth	r3, r3
 80200a6:	4413      	add	r3, r2
 80200a8:	b29b      	uxth	r3, r3
 80200aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 80200ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80200ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80200b2:	b29a      	uxth	r2, r3
 80200b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80200b6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	4413      	add	r3, r2
 80200be:	b29b      	uxth	r3, r3
 80200c0:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 80200c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80200c4:	f7ea fa2c 	bl	800a520 <lv_obj_get_parent>
 80200c8:	6338      	str	r0, [r7, #48]	; 0x30

        lv_indev_t * indev = lv_indev_get_act();
 80200ca:	f7e8 fcc9 	bl	8008a60 <lv_indev_get_act>
 80200ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 80200d0:	f107 0318 	add.w	r3, r7, #24
 80200d4:	4619      	mov	r1, r3
 80200d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80200d8:	f7e8 fd68 	bl	8008bac <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 80200dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80200de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80200e2:	f003 0301 	and.w	r3, r3, #1
 80200e6:	b2db      	uxtb	r3, r3
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d05d      	beq.n	80201a8 <lv_page_scrollable_signal+0x1cc>
 80200ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80200ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80200f2:	f003 0302 	and.w	r3, r3, #2
 80200f6:	b2db      	uxtb	r3, r3
 80200f8:	2b00      	cmp	r3, #0
 80200fa:	d155      	bne.n	80201a8 <lv_page_scrollable_signal+0x1cc>
 80200fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80200fe:	f7e8 fd31 	bl	8008b64 <lv_indev_is_dragging>
 8020102:	4603      	mov	r3, r0
 8020104:	f083 0301 	eor.w	r3, r3, #1
 8020108:	b2db      	uxtb	r3, r3
 802010a:	2b00      	cmp	r3, #0
 802010c:	d04c      	beq.n	80201a8 <lv_page_scrollable_signal+0x1cc>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 802010e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8020112:	2b00      	cmp	r3, #0
 8020114:	dd0b      	ble.n	802012e <lv_page_scrollable_signal+0x152>
 8020116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802011a:	461a      	mov	r2, r3
 802011c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020120:	4619      	mov	r1, r3
 8020122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020124:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8020128:	440b      	add	r3, r1
 802012a:	429a      	cmp	r2, r3
 802012c:	d00f      	beq.n	802014e <lv_page_scrollable_signal+0x172>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 802012e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8020132:	2b00      	cmp	r3, #0
 8020134:	da38      	bge.n	80201a8 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8020136:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802013a:	461a      	mov	r2, r3
 802013c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8020140:	4619      	mov	r1, r3
 8020142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020144:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020148:	1acb      	subs	r3, r1, r3
 802014a:	429a      	cmp	r2, r3
 802014c:	d12c      	bne.n	80201a8 <lv_page_scrollable_signal+0x1cc>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 802014e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8020152:	2b00      	cmp	r3, #0
 8020154:	dd0b      	ble.n	802016e <lv_page_scrollable_signal+0x192>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8020156:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 802015a:	461a      	mov	r2, r3
 802015c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020160:	4619      	mov	r1, r3
 8020162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020164:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8020168:	440b      	add	r3, r1
 802016a:	429a      	cmp	r2, r3
 802016c:	d00f      	beq.n	802018e <lv_page_scrollable_signal+0x1b2>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 802016e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8020172:	2b00      	cmp	r3, #0
 8020174:	da18      	bge.n	80201a8 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8020176:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802017a:	461a      	mov	r2, r3
 802017c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8020180:	4619      	mov	r1, r3
 8020182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020184:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8020188:	1acb      	subs	r3, r1, r3
 802018a:	429a      	cmp	r2, r3
 802018c:	d10c      	bne.n	80201a8 <lv_page_scrollable_signal+0x1cc>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 802018e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020190:	f7ea f9c6 	bl	800a520 <lv_obj_get_parent>
 8020194:	4603      	mov	r3, r0
 8020196:	2b00      	cmp	r3, #0
 8020198:	d006      	beq.n	80201a8 <lv_page_scrollable_signal+0x1cc>
                    page_ext->scroll_prop_ip = 1;
 802019a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802019c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80201a0:	f043 0302 	orr.w	r3, r3, #2
 80201a4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 80201a8:	f107 031c 	add.w	r3, r7, #28
 80201ac:	4618      	mov	r0, r3
 80201ae:	f7fe fec9 	bl	801ef44 <lv_area_get_width>
 80201b2:	4603      	mov	r3, r0
 80201b4:	461a      	mov	r2, r3
 80201b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80201ba:	18d4      	adds	r4, r2, r3
 80201bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201c0:	4618      	mov	r0, r3
 80201c2:	f7fe febf 	bl	801ef44 <lv_area_get_width>
 80201c6:	4603      	mov	r3, r0
 80201c8:	429c      	cmp	r4, r3
 80201ca:	dc14      	bgt.n	80201f6 <lv_page_scrollable_signal+0x21a>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 80201cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80201d0:	461a      	mov	r2, r3
 80201d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80201d6:	4619      	mov	r1, r3
 80201d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80201da:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80201de:	440b      	add	r3, r1
 80201e0:	429a      	cmp	r2, r3
 80201e2:	f000 80c8 	beq.w	8020376 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left;
 80201e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80201e8:	8b5b      	ldrh	r3, [r3, #26]
 80201ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 80201ee:	2301      	movs	r3, #1
 80201f0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80201f4:	e0bf      	b.n	8020376 <lv_page_scrollable_signal+0x39a>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 80201f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80201f8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80201fc:	f003 0302 	and.w	r3, r3, #2
 8020200:	b2db      	uxtb	r3, r3
 8020202:	2b00      	cmp	r3, #0
 8020204:	d015      	beq.n	8020232 <lv_page_scrollable_signal+0x256>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8020206:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802020a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 802020e:	429a      	cmp	r2, r3
 8020210:	f040 80b1 	bne.w	8020376 <lv_page_scrollable_signal+0x39a>
                                               is reverted. Handle only the pos. because of drag*/
                    new_x  = ori_coords->x1 - page_coords.x1;
 8020214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020216:	f9b3 3000 	ldrsh.w	r3, [r3]
 802021a:	b29a      	uxth	r2, r3
 802021c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020220:	b29b      	uxth	r3, r3
 8020222:	1ad3      	subs	r3, r2, r3
 8020224:	b29b      	uxth	r3, r3
 8020226:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    refr_x = true;
 802022a:	2301      	movs	r3, #1
 802022c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8020230:	e0a1      	b.n	8020376 <lv_page_scrollable_signal+0x39a>
                }
            }
            /*The edges of the scrollable can not be in the page (minus hpad) */
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 8020232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020236:	461a      	mov	r2, r3
 8020238:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802023c:	4619      	mov	r1, r3
 802023e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020240:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8020244:	1acb      	subs	r3, r1, r3
 8020246:	429a      	cmp	r2, r3
 8020248:	da50      	bge.n	80202ec <lv_page_scrollable_signal+0x310>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 802024a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802024e:	4618      	mov	r0, r3
 8020250:	f7fe fe78 	bl	801ef44 <lv_area_get_width>
 8020254:	4603      	mov	r3, r0
 8020256:	b29c      	uxth	r4, r3
 8020258:	f107 031c 	add.w	r3, r7, #28
 802025c:	4618      	mov	r0, r3
 802025e:	f7fe fe71 	bl	801ef44 <lv_area_get_width>
 8020262:	4603      	mov	r3, r0
 8020264:	b29b      	uxth	r3, r3
 8020266:	1ae3      	subs	r3, r4, r3
 8020268:	b29a      	uxth	r2, r3
                        page_style->body.padding.right; /* Right align */
 802026a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802026c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8020270:	b29b      	uxth	r3, r3
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8020272:	1ad3      	subs	r3, r2, r3
 8020274:	b29b      	uxth	r3, r3
 8020276:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 802027a:	2301      	movs	r3, #1
 802027c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8020280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020286:	f003 0301 	and.w	r3, r3, #1
 802028a:	b2db      	uxtb	r3, r3
 802028c:	2b00      	cmp	r3, #0
 802028e:	d072      	beq.n	8020376 <lv_page_scrollable_signal+0x39a>
 8020290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020296:	f003 0310 	and.w	r3, r3, #16
 802029a:	b2db      	uxtb	r3, r3
 802029c:	2b00      	cmp	r3, #0
 802029e:	d16a      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80202a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80202a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80202a6:	f003 0308 	and.w	r3, r3, #8
 80202aa:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d162      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80202b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80202b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80202b6:	f003 0302 	and.w	r3, r3, #2
 80202ba:	b2db      	uxtb	r3, r3
 80202bc:	2b00      	cmp	r3, #0
 80202be:	d15a      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 80202c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80202c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80202c6:	f003 0304 	and.w	r3, r3, #4
 80202ca:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d152      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 80202d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80202d2:	f7ff f979 	bl	801f5c8 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 80202d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80202d8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80202dc:	f043 0308 	orr.w	r3, r3, #8
 80202e0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80202e4:	e047      	b.n	8020376 <lv_page_scrollable_signal+0x39a>
 80202e6:	bf00      	nop
 80202e8:	200177e8 	.word	0x200177e8
                }
#endif
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 80202ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80202f0:	461a      	mov	r2, r3
 80202f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80202f6:	4619      	mov	r1, r3
 80202f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80202fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80202fe:	440b      	add	r3, r1
 8020300:	429a      	cmp	r2, r3
 8020302:	dd38      	ble.n	8020376 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left; /*Left align*/
 8020304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020306:	8b5b      	ldrh	r3, [r3, #26]
 8020308:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 802030c:	2301      	movs	r3, #1
 802030e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8020312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020318:	f003 0301 	and.w	r3, r3, #1
 802031c:	b2db      	uxtb	r3, r3
 802031e:	2b00      	cmp	r3, #0
 8020320:	d029      	beq.n	8020376 <lv_page_scrollable_signal+0x39a>
 8020322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020328:	f003 0310 	and.w	r3, r3, #16
 802032c:	b2db      	uxtb	r3, r3
 802032e:	2b00      	cmp	r3, #0
 8020330:	d121      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8020332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020338:	f003 0308 	and.w	r3, r3, #8
 802033c:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 802033e:	2b00      	cmp	r3, #0
 8020340:	d119      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8020342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020348:	f003 0302 	and.w	r3, r3, #2
 802034c:	b2db      	uxtb	r3, r3
 802034e:	2b00      	cmp	r3, #0
 8020350:	d111      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 8020352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020358:	f003 0304 	and.w	r3, r3, #4
 802035c:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 802035e:	2b00      	cmp	r3, #0
 8020360:	d109      	bne.n	8020376 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 8020362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020364:	f7ff f930 	bl	801f5c8 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8020368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802036a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 802036e:	f043 0310 	orr.w	r3, r3, #16
 8020372:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 8020376:	f107 031c 	add.w	r3, r7, #28
 802037a:	4618      	mov	r0, r3
 802037c:	f7fe fdf9 	bl	801ef72 <lv_area_get_height>
 8020380:	4603      	mov	r3, r0
 8020382:	461a      	mov	r2, r3
 8020384:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8020388:	18d4      	adds	r4, r2, r3
 802038a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802038e:	4618      	mov	r0, r3
 8020390:	f7fe fdef 	bl	801ef72 <lv_area_get_height>
 8020394:	4603      	mov	r3, r0
 8020396:	429c      	cmp	r4, r3
 8020398:	dc14      	bgt.n	80203c4 <lv_page_scrollable_signal+0x3e8>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 802039a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802039e:	461a      	mov	r2, r3
 80203a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80203a4:	4619      	mov	r1, r3
 80203a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80203a8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80203ac:	440b      	add	r3, r1
 80203ae:	429a      	cmp	r2, r3
 80203b0:	f000 80c5 	beq.w	802053e <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top;
 80203b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80203b6:	8adb      	ldrh	r3, [r3, #22]
 80203b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 80203bc:	2301      	movs	r3, #1
 80203be:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80203c2:	e0bc      	b.n	802053e <lv_page_scrollable_signal+0x562>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 80203c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80203c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80203ca:	f003 0302 	and.w	r3, r3, #2
 80203ce:	b2db      	uxtb	r3, r3
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d015      	beq.n	8020400 <lv_page_scrollable_signal+0x424>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 80203d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80203d8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80203dc:	429a      	cmp	r2, r3
 80203de:	f040 80ae 	bne.w	802053e <lv_page_scrollable_signal+0x562>
                                               is reverted. Handle only the pos. because of drag*/
                    new_y  = ori_coords->y1 - page_coords.y1;
 80203e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80203e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203e8:	b29a      	uxth	r2, r3
 80203ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80203ee:	b29b      	uxth	r3, r3
 80203f0:	1ad3      	subs	r3, r2, r3
 80203f2:	b29b      	uxth	r3, r3
 80203f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    refr_y = true;
 80203f8:	2301      	movs	r3, #1
 80203fa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80203fe:	e09e      	b.n	802053e <lv_page_scrollable_signal+0x562>
                }
            }
            /*The edges of the scrollable can not be in the page (minus vpad) */
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 8020400:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020404:	461a      	mov	r2, r3
 8020406:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 802040a:	4619      	mov	r1, r3
 802040c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802040e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020412:	1acb      	subs	r3, r1, r3
 8020414:	429a      	cmp	r2, r3
 8020416:	da4d      	bge.n	80204b4 <lv_page_scrollable_signal+0x4d8>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8020418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802041c:	4618      	mov	r0, r3
 802041e:	f7fe fda8 	bl	801ef72 <lv_area_get_height>
 8020422:	4603      	mov	r3, r0
 8020424:	b29c      	uxth	r4, r3
 8020426:	f107 031c 	add.w	r3, r7, #28
 802042a:	4618      	mov	r0, r3
 802042c:	f7fe fda1 	bl	801ef72 <lv_area_get_height>
 8020430:	4603      	mov	r3, r0
 8020432:	b29b      	uxth	r3, r3
 8020434:	1ae3      	subs	r3, r4, r3
 8020436:	b29a      	uxth	r2, r3
                        page_style->body.padding.bottom; /* Bottom align */
 8020438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802043a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802043e:	b29b      	uxth	r3, r3
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8020440:	1ad3      	subs	r3, r2, r3
 8020442:	b29b      	uxth	r3, r3
 8020444:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 8020448:	2301      	movs	r3, #1
 802044a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 802044e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020454:	f003 0301 	and.w	r3, r3, #1
 8020458:	b2db      	uxtb	r3, r3
 802045a:	2b00      	cmp	r3, #0
 802045c:	d06f      	beq.n	802053e <lv_page_scrollable_signal+0x562>
 802045e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020464:	f003 0310 	and.w	r3, r3, #16
 8020468:	b2db      	uxtb	r3, r3
 802046a:	2b00      	cmp	r3, #0
 802046c:	d167      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 802046e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020474:	f003 0308 	and.w	r3, r3, #8
 8020478:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 802047a:	2b00      	cmp	r3, #0
 802047c:	d15f      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 802047e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020484:	f003 0302 	and.w	r3, r3, #2
 8020488:	b2db      	uxtb	r3, r3
 802048a:	2b00      	cmp	r3, #0
 802048c:	d157      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 802048e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020494:	f003 0304 	and.w	r3, r3, #4
 8020498:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 802049a:	2b00      	cmp	r3, #0
 802049c:	d14f      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 802049e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80204a0:	f7ff f892 	bl	801f5c8 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 80204a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80204a6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80204aa:	f043 0304 	orr.w	r3, r3, #4
 80204ae:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80204b2:	e044      	b.n	802053e <lv_page_scrollable_signal+0x562>
                }
#endif
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 80204b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80204b8:	461a      	mov	r2, r3
 80204ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80204be:	4619      	mov	r1, r3
 80204c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80204c2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80204c6:	440b      	add	r3, r1
 80204c8:	429a      	cmp	r2, r3
 80204ca:	dd38      	ble.n	802053e <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top; /*Top align*/
 80204cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80204ce:	8adb      	ldrh	r3, [r3, #22]
 80204d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 80204d4:	2301      	movs	r3, #1
 80204d6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80204da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80204dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80204e0:	f003 0301 	and.w	r3, r3, #1
 80204e4:	b2db      	uxtb	r3, r3
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d029      	beq.n	802053e <lv_page_scrollable_signal+0x562>
 80204ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80204ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80204f0:	f003 0310 	and.w	r3, r3, #16
 80204f4:	b2db      	uxtb	r3, r3
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d121      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80204fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80204fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020500:	f003 0308 	and.w	r3, r3, #8
 8020504:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8020506:	2b00      	cmp	r3, #0
 8020508:	d119      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 802050a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802050c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020510:	f003 0302 	and.w	r3, r3, #2
 8020514:	b2db      	uxtb	r3, r3
 8020516:	2b00      	cmp	r3, #0
 8020518:	d111      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 802051a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802051c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020520:	f003 0304 	and.w	r3, r3, #4
 8020524:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8020526:	2b00      	cmp	r3, #0
 8020528:	d109      	bne.n	802053e <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 802052a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802052c:	f7ff f84c 	bl	801f5c8 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 8020530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020532:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020536:	f043 0302 	orr.w	r3, r3, #2
 802053a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 802053e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8020542:	2b00      	cmp	r3, #0
 8020544:	d103      	bne.n	802054e <lv_page_scrollable_signal+0x572>
 8020546:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 802054a:	2b00      	cmp	r3, #0
 802054c:	d031      	beq.n	80205b2 <lv_page_scrollable_signal+0x5d6>
            lv_obj_set_pos(scrl, new_x, new_y);
 802054e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8020552:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8020556:	4619      	mov	r1, r3
 8020558:	68f8      	ldr	r0, [r7, #12]
 802055a:	f7e9 f809 	bl	8009570 <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 802055e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020560:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8020564:	f003 0302 	and.w	r3, r3, #2
 8020568:	b2db      	uxtb	r3, r3
 802056a:	2b00      	cmp	r3, #0
 802056c:	d021      	beq.n	80205b2 <lv_page_scrollable_signal+0x5d6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 802056e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8020572:	2b00      	cmp	r3, #0
 8020574:	d00c      	beq.n	8020590 <lv_page_scrollable_signal+0x5b4>
 8020576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020578:	f7ea f823 	bl	800a5c2 <lv_obj_get_y>
 802057c:	4603      	mov	r3, r0
 802057e:	b29a      	uxth	r2, r3
 8020580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8020582:	4413      	add	r3, r2
 8020584:	b29b      	uxth	r3, r3
 8020586:	b21b      	sxth	r3, r3
 8020588:	4619      	mov	r1, r3
 802058a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802058c:	f7e9 f890 	bl	80096b0 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8020590:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8020594:	2b00      	cmp	r3, #0
 8020596:	d00c      	beq.n	80205b2 <lv_page_scrollable_signal+0x5d6>
 8020598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802059a:	f7e9 fff9 	bl	800a590 <lv_obj_get_x>
 802059e:	4603      	mov	r3, r0
 80205a0:	b29a      	uxth	r2, r3
 80205a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80205a4:	4413      	add	r3, r2
 80205a6:	b29b      	uxth	r3, r3
 80205a8:	b21b      	sxth	r3, r3
 80205aa:	4619      	mov	r1, r3
 80205ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80205ae:	f7e9 f86a 	bl	8009686 <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 80205b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80205b4:	f000 f8da 	bl	802076c <lv_page_sb_refresh>
 80205b8:	e0a4      	b.n	8020704 <lv_page_scrollable_signal+0x728>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 80205ba:	7afb      	ldrb	r3, [r7, #11]
 80205bc:	2b0e      	cmp	r3, #14
 80205be:	f040 80a1 	bne.w	8020704 <lv_page_scrollable_signal+0x728>

        /*Scroll propagation is finished on drag end*/
        page_ext->scroll_prop_ip = 0;
 80205c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80205c4:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80205c8:	f36f 0341 	bfc	r3, #1, #1
 80205cc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

        /*Hide scrollbars if required*/
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 80205d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80205d2:	7f1b      	ldrb	r3, [r3, #28]
 80205d4:	f003 031c 	and.w	r3, r3, #28
 80205d8:	b2db      	uxtb	r3, r3
 80205da:	2b08      	cmp	r3, #8
 80205dc:	f040 8092 	bne.w	8020704 <lv_page_scrollable_signal+0x728>
            lv_disp_t * disp = lv_obj_get_disp(page);
 80205e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80205e2:	f7e9 ff63 	bl	800a4ac <lv_obj_get_disp>
 80205e6:	6438      	str	r0, [r7, #64]	; 0x40
            lv_area_t sb_area_tmp;
            if(page_ext->sb.hor_draw) {
 80205e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80205ea:	7f1b      	ldrb	r3, [r3, #28]
 80205ec:	f003 0301 	and.w	r3, r3, #1
 80205f0:	b2db      	uxtb	r3, r3
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d03f      	beq.n	8020676 <lv_page_scrollable_signal+0x69a>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 80205f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80205f8:	f103 020c 	add.w	r2, r3, #12
 80205fc:	f107 0310 	add.w	r3, r7, #16
 8020600:	4611      	mov	r1, r2
 8020602:	4618      	mov	r0, r3
 8020604:	f7fe fc90 	bl	801ef28 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8020608:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 802060c:	b29a      	uxth	r2, r3
 802060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020610:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020614:	b29b      	uxth	r3, r3
 8020616:	4413      	add	r3, r2
 8020618:	b29b      	uxth	r3, r3
 802061a:	b21b      	sxth	r3, r3
 802061c:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 802061e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020622:	b29a      	uxth	r2, r3
 8020624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020626:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 802062a:	b29b      	uxth	r3, r3
 802062c:	4413      	add	r3, r2
 802062e:	b29b      	uxth	r3, r3
 8020630:	b21b      	sxth	r3, r3
 8020632:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 8020634:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020638:	b29a      	uxth	r2, r3
 802063a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802063c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020640:	b29b      	uxth	r3, r3
 8020642:	4413      	add	r3, r2
 8020644:	b29b      	uxth	r3, r3
 8020646:	b21b      	sxth	r3, r3
 8020648:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 802064a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802064e:	b29a      	uxth	r2, r3
 8020650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020652:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020656:	b29b      	uxth	r3, r3
 8020658:	4413      	add	r3, r2
 802065a:	b29b      	uxth	r3, r3
 802065c:	b21b      	sxth	r3, r3
 802065e:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 8020660:	f107 0310 	add.w	r3, r7, #16
 8020664:	4619      	mov	r1, r3
 8020666:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8020668:	f7ea fb08 	bl	800ac7c <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 802066c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802066e:	7f13      	ldrb	r3, [r2, #28]
 8020670:	f36f 0300 	bfc	r3, #0, #1
 8020674:	7713      	strb	r3, [r2, #28]
            }
            if(page_ext->sb.ver_draw) {
 8020676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020678:	7f1b      	ldrb	r3, [r3, #28]
 802067a:	f003 0302 	and.w	r3, r3, #2
 802067e:	b2db      	uxtb	r3, r3
 8020680:	2b00      	cmp	r3, #0
 8020682:	d03f      	beq.n	8020704 <lv_page_scrollable_signal+0x728>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8020684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020686:	f103 0214 	add.w	r2, r3, #20
 802068a:	f107 0310 	add.w	r3, r7, #16
 802068e:	4611      	mov	r1, r2
 8020690:	4618      	mov	r0, r3
 8020692:	f7fe fc49 	bl	801ef28 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8020696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 802069a:	b29a      	uxth	r2, r3
 802069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802069e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80206a2:	b29b      	uxth	r3, r3
 80206a4:	4413      	add	r3, r2
 80206a6:	b29b      	uxth	r3, r3
 80206a8:	b21b      	sxth	r3, r3
 80206aa:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 80206ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80206b0:	b29a      	uxth	r2, r3
 80206b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80206b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80206b8:	b29b      	uxth	r3, r3
 80206ba:	4413      	add	r3, r2
 80206bc:	b29b      	uxth	r3, r3
 80206be:	b21b      	sxth	r3, r3
 80206c0:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 80206c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80206c6:	b29a      	uxth	r2, r3
 80206c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80206ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80206ce:	b29b      	uxth	r3, r3
 80206d0:	4413      	add	r3, r2
 80206d2:	b29b      	uxth	r3, r3
 80206d4:	b21b      	sxth	r3, r3
 80206d6:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 80206d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80206dc:	b29a      	uxth	r2, r3
 80206de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80206e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80206e4:	b29b      	uxth	r3, r3
 80206e6:	4413      	add	r3, r2
 80206e8:	b29b      	uxth	r3, r3
 80206ea:	b21b      	sxth	r3, r3
 80206ec:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 80206ee:	f107 0310 	add.w	r3, r7, #16
 80206f2:	4619      	mov	r1, r3
 80206f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80206f6:	f7ea fac1 	bl	800ac7c <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 80206fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80206fc:	7f13      	ldrb	r3, [r2, #28]
 80206fe:	f36f 0341 	bfc	r3, #1, #1
 8020702:	7713      	strb	r3, [r2, #28]
            }
        }
    }

    return res;
 8020704:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
}
 8020708:	4618      	mov	r0, r3
 802070a:	375c      	adds	r7, #92	; 0x5c
 802070c:	46bd      	mov	sp, r7
 802070e:	bd90      	pop	{r4, r7, pc}

08020710 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 8020710:	b580      	push	{r7, lr}
 8020712:	b084      	sub	sp, #16
 8020714:	af00      	add	r7, sp, #0
 8020716:	6078      	str	r0, [r7, #4]
 8020718:	460b      	mov	r3, r1
 802071a:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * page = lv_obj_get_parent(scrl);
 802071c:	6878      	ldr	r0, [r7, #4]
 802071e:	f7e9 feff 	bl	800a520 <lv_obj_get_parent>
 8020722:	60f8      	str	r0, [r7, #12]

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8020724:	78fb      	ldrb	r3, [r7, #3]
 8020726:	2b00      	cmp	r3, #0
 8020728:	d014      	beq.n	8020754 <scrl_def_event_cb+0x44>
 802072a:	78fb      	ldrb	r3, [r7, #3]
 802072c:	2b01      	cmp	r3, #1
 802072e:	d011      	beq.n	8020754 <scrl_def_event_cb+0x44>
 8020730:	78fb      	ldrb	r3, [r7, #3]
 8020732:	2b02      	cmp	r3, #2
 8020734:	d00e      	beq.n	8020754 <scrl_def_event_cb+0x44>
 8020736:	78fb      	ldrb	r3, [r7, #3]
 8020738:	2b07      	cmp	r3, #7
 802073a:	d00b      	beq.n	8020754 <scrl_def_event_cb+0x44>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
 802073c:	78fb      	ldrb	r3, [r7, #3]
 802073e:	2b03      	cmp	r3, #3
 8020740:	d008      	beq.n	8020754 <scrl_def_event_cb+0x44>
 8020742:	78fb      	ldrb	r3, [r7, #3]
 8020744:	2b06      	cmp	r3, #6
 8020746:	d005      	beq.n	8020754 <scrl_def_event_cb+0x44>
 8020748:	78fb      	ldrb	r3, [r7, #3]
 802074a:	2b04      	cmp	r3, #4
 802074c:	d002      	beq.n	8020754 <scrl_def_event_cb+0x44>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
 802074e:	78fb      	ldrb	r3, [r7, #3]
 8020750:	2b05      	cmp	r3, #5
 8020752:	d107      	bne.n	8020764 <scrl_def_event_cb+0x54>
        lv_event_send(page, event, lv_event_get_data());
 8020754:	f7e9 fe44 	bl	800a3e0 <lv_event_get_data>
 8020758:	4602      	mov	r2, r0
 802075a:	78fb      	ldrb	r3, [r7, #3]
 802075c:	4619      	mov	r1, r3
 802075e:	68f8      	ldr	r0, [r7, #12]
 8020760:	f7e9 fdb9 	bl	800a2d6 <lv_event_send>
    }
    /*clang-format on*/
}
 8020764:	bf00      	nop
 8020766:	3710      	adds	r7, #16
 8020768:	46bd      	mov	sp, r7
 802076a:	bd80      	pop	{r7, pc}

0802076c <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 802076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802076e:	b08d      	sub	sp, #52	; 0x34
 8020770:	af00      	add	r7, sp, #0
 8020772:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8020774:	6878      	ldr	r0, [r7, #4]
 8020776:	f7ea f828 	bl	800a7ca <lv_obj_get_ext_attr>
 802077a:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_style_t * style = lv_obj_get_style(page);
 802077c:	6878      	ldr	r0, [r7, #4]
 802077e:	f7e9 ff69 	bl	800a654 <lv_obj_get_style>
 8020782:	6278      	str	r0, [r7, #36]	; 0x24
    lv_obj_t * scrl          = ext->scrl;
 8020784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020786:	685b      	ldr	r3, [r3, #4]
 8020788:	623b      	str	r3, [r7, #32]
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 802078a:	6a38      	ldr	r0, [r7, #32]
 802078c:	f7e9 ff32 	bl	800a5f4 <lv_obj_get_width>
 8020790:	4603      	mov	r3, r0
 8020792:	83fb      	strh	r3, [r7, #30]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 8020794:	6a38      	ldr	r0, [r7, #32]
 8020796:	f7e9 ff3b 	bl	800a610 <lv_obj_get_height>
 802079a:	4603      	mov	r3, r0
 802079c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 802079e:	6878      	ldr	r0, [r7, #4]
 80207a0:	f7e9 ff28 	bl	800a5f4 <lv_obj_get_width>
 80207a4:	4603      	mov	r3, r0
 80207a6:	837b      	strh	r3, [r7, #26]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 80207a8:	6878      	ldr	r0, [r7, #4]
 80207aa:	f7e9 ff31 	bl	800a610 <lv_obj_get_height>
 80207ae:	4603      	mov	r3, r0
 80207b0:	833b      	strh	r3, [r7, #24]

    /*Always let 'scrollbar width' padding above, under, left and right to the scrollbars
     * else:
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 80207b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80207b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207ba:	689b      	ldr	r3, [r3, #8]
 80207bc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80207c0:	4293      	cmp	r3, r2
 80207c2:	bfb8      	it	lt
 80207c4:	4613      	movlt	r3, r2
 80207c6:	82fb      	strh	r3, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80207c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207ca:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80207ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207d0:	689b      	ldr	r3, [r3, #8]
 80207d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80207d6:	4293      	cmp	r3, r2
 80207d8:	bfb8      	it	lt
 80207da:	4613      	movlt	r3, r2
 80207dc:	82bb      	strh	r3, [r7, #20]

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 80207de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207e0:	7f1b      	ldrb	r3, [r3, #28]
 80207e2:	f003 031c 	and.w	r3, r3, #28
 80207e6:	b2db      	uxtb	r3, r3
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	f000 82ba 	beq.w	8020d62 <lv_page_sb_refresh+0x5f6>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 80207ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207f0:	7f1b      	ldrb	r3, [r3, #28]
 80207f2:	f003 031c 	and.w	r3, r3, #28
 80207f6:	b2db      	uxtb	r3, r3
 80207f8:	2b04      	cmp	r3, #4
 80207fa:	d109      	bne.n	8020810 <lv_page_sb_refresh+0xa4>
        ext->sb.hor_draw = 1;
 80207fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80207fe:	7f13      	ldrb	r3, [r2, #28]
 8020800:	f043 0301 	orr.w	r3, r3, #1
 8020804:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 1;
 8020806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020808:	7f13      	ldrb	r3, [r2, #28]
 802080a:	f043 0302 	orr.w	r3, r3, #2
 802080e:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 8020810:	6878      	ldr	r0, [r7, #4]
 8020812:	f7e9 fe4b 	bl	800a4ac <lv_obj_get_disp>
 8020816:	6138      	str	r0, [r7, #16]
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8020818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802081a:	7f1b      	ldrb	r3, [r3, #28]
 802081c:	f003 0301 	and.w	r3, r3, #1
 8020820:	b2db      	uxtb	r3, r3
 8020822:	2b00      	cmp	r3, #0
 8020824:	d03a      	beq.n	802089c <lv_page_sb_refresh+0x130>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8020826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020828:	f103 020c 	add.w	r2, r3, #12
 802082c:	f107 0308 	add.w	r3, r7, #8
 8020830:	4611      	mov	r1, r2
 8020832:	4618      	mov	r0, r3
 8020834:	f7fe fb78 	bl	801ef28 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8020838:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802083c:	b29a      	uxth	r2, r3
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020844:	b29b      	uxth	r3, r3
 8020846:	4413      	add	r3, r2
 8020848:	b29b      	uxth	r3, r3
 802084a:	b21b      	sxth	r3, r3
 802084c:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 802084e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020852:	b29a      	uxth	r2, r3
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 802085a:	b29b      	uxth	r3, r3
 802085c:	4413      	add	r3, r2
 802085e:	b29b      	uxth	r3, r3
 8020860:	b21b      	sxth	r3, r3
 8020862:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8020864:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020868:	b29a      	uxth	r2, r3
 802086a:	687b      	ldr	r3, [r7, #4]
 802086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020870:	b29b      	uxth	r3, r3
 8020872:	4413      	add	r3, r2
 8020874:	b29b      	uxth	r3, r3
 8020876:	b21b      	sxth	r3, r3
 8020878:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 802087a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802087e:	b29a      	uxth	r2, r3
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020886:	b29b      	uxth	r3, r3
 8020888:	4413      	add	r3, r2
 802088a:	b29b      	uxth	r3, r3
 802088c:	b21b      	sxth	r3, r3
 802088e:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8020890:	f107 0308 	add.w	r3, r7, #8
 8020894:	4619      	mov	r1, r3
 8020896:	6938      	ldr	r0, [r7, #16]
 8020898:	f7ea f9f0 	bl	800ac7c <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 802089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802089e:	7f1b      	ldrb	r3, [r3, #28]
 80208a0:	f003 0302 	and.w	r3, r3, #2
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d03a      	beq.n	8020920 <lv_page_sb_refresh+0x1b4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 80208aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208ac:	f103 0214 	add.w	r2, r3, #20
 80208b0:	f107 0308 	add.w	r3, r7, #8
 80208b4:	4611      	mov	r1, r2
 80208b6:	4618      	mov	r0, r3
 80208b8:	f7fe fb36 	bl	801ef28 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80208bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80208c0:	b29a      	uxth	r2, r3
 80208c2:	687b      	ldr	r3, [r7, #4]
 80208c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80208c8:	b29b      	uxth	r3, r3
 80208ca:	4413      	add	r3, r2
 80208cc:	b29b      	uxth	r3, r3
 80208ce:	b21b      	sxth	r3, r3
 80208d0:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 80208d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80208d6:	b29a      	uxth	r2, r3
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80208de:	b29b      	uxth	r3, r3
 80208e0:	4413      	add	r3, r2
 80208e2:	b29b      	uxth	r3, r3
 80208e4:	b21b      	sxth	r3, r3
 80208e6:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 80208e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80208ec:	b29a      	uxth	r2, r3
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80208f4:	b29b      	uxth	r3, r3
 80208f6:	4413      	add	r3, r2
 80208f8:	b29b      	uxth	r3, r3
 80208fa:	b21b      	sxth	r3, r3
 80208fc:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 80208fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020902:	b29a      	uxth	r2, r3
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 802090a:	b29b      	uxth	r3, r3
 802090c:	4413      	add	r3, r2
 802090e:	b29b      	uxth	r3, r3
 8020910:	b21b      	sxth	r3, r3
 8020912:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8020914:	f107 0308 	add.w	r3, r7, #8
 8020918:	4619      	mov	r1, r3
 802091a:	6938      	ldr	r0, [r7, #16]
 802091c:	f7ea f9ae 	bl	800ac7c <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8020920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020922:	7f1b      	ldrb	r3, [r3, #28]
 8020924:	f003 031c 	and.w	r3, r3, #28
 8020928:	b2db      	uxtb	r3, r3
 802092a:	2b08      	cmp	r3, #8
 802092c:	d116      	bne.n	802095c <lv_page_sb_refresh+0x1f0>
 802092e:	f7e8 f897 	bl	8008a60 <lv_indev_get_act>
 8020932:	4603      	mov	r3, r0
 8020934:	4618      	mov	r0, r3
 8020936:	f7e8 f915 	bl	8008b64 <lv_indev_is_dragging>
 802093a:	4603      	mov	r3, r0
 802093c:	f083 0301 	eor.w	r3, r3, #1
 8020940:	b2db      	uxtb	r3, r3
 8020942:	2b00      	cmp	r3, #0
 8020944:	d00a      	beq.n	802095c <lv_page_sb_refresh+0x1f0>
        ext->sb.hor_draw = 0;
 8020946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020948:	7f13      	ldrb	r3, [r2, #28]
 802094a:	f36f 0300 	bfc	r3, #0, #1
 802094e:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 0;
 8020950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020952:	7f13      	ldrb	r3, [r2, #28]
 8020954:	f36f 0341 	bfc	r3, #1, #1
 8020958:	7713      	strb	r3, [r2, #28]
        return;
 802095a:	e203      	b.n	8020d64 <lv_page_sb_refresh+0x5f8>
    }

    /*Full sized horizontal scrollbar*/
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 802095c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8020960:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8020964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020966:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 802096a:	1a5b      	subs	r3, r3, r1
 802096c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802096e:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8020972:	1a5b      	subs	r3, r3, r1
 8020974:	429a      	cmp	r2, r3
 8020976:	dc38      	bgt.n	80209ea <lv_page_sb_refresh+0x27e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8020978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802097a:	f103 000c 	add.w	r0, r3, #12
 802097e:	8b7a      	ldrh	r2, [r7, #26]
 8020980:	8afb      	ldrh	r3, [r7, #22]
 8020982:	005b      	lsls	r3, r3, #1
 8020984:	b29b      	uxth	r3, r3
 8020986:	1ad3      	subs	r3, r2, r3
 8020988:	b29b      	uxth	r3, r3
 802098a:	b21b      	sxth	r3, r3
 802098c:	4619      	mov	r1, r3
 802098e:	f7f5 fc2a 	bl	80161e6 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8020992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020994:	f103 000c 	add.w	r0, r3, #12
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8020998:	8b3a      	ldrh	r2, [r7, #24]
 802099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802099c:	689b      	ldr	r3, [r3, #8]
 802099e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80209a2:	b29b      	uxth	r3, r3
 80209a4:	1ad3      	subs	r3, r2, r3
 80209a6:	b29a      	uxth	r2, r3
 80209a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209aa:	689b      	ldr	r3, [r3, #8]
 80209ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80209b0:	b29b      	uxth	r3, r3
 80209b2:	1ad3      	subs	r3, r2, r3
 80209b4:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 80209b6:	b21a      	sxth	r2, r3
 80209b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80209bc:	4619      	mov	r1, r3
 80209be:	f7f5 fc42 	bl	8016246 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 80209c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209c4:	7f1b      	ldrb	r3, [r3, #28]
 80209c6:	f003 031c 	and.w	r3, r3, #28
 80209ca:	b2db      	uxtb	r3, r3
 80209cc:	2b0c      	cmp	r3, #12
 80209ce:	d006      	beq.n	80209de <lv_page_sb_refresh+0x272>
 80209d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209d2:	7f1b      	ldrb	r3, [r3, #28]
 80209d4:	f003 031c 	and.w	r3, r3, #28
 80209d8:	b2db      	uxtb	r3, r3
 80209da:	2b08      	cmp	r3, #8
 80209dc:	d17c      	bne.n	8020ad8 <lv_page_sb_refresh+0x36c>
 80209de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80209e0:	7f13      	ldrb	r3, [r2, #28]
 80209e2:	f36f 0300 	bfc	r3, #0, #1
 80209e6:	7713      	strb	r3, [r2, #28]
 80209e8:	e076      	b.n	8020ad8 <lv_page_sb_refresh+0x36c>
    }
    /*Smaller horizontal scrollbar*/
    else {
        size_tmp =
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 80209ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80209ee:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80209f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80209f6:	0052      	lsls	r2, r2, #1
 80209f8:	1a8a      	subs	r2, r1, r2
 80209fa:	fb02 f203 	mul.w	r2, r2, r3
 80209fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a04:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8020a08:	440b      	add	r3, r1
 8020a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a0c:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8020a10:	440b      	add	r3, r1
 8020a12:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 8020a16:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 8020a18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020a1c:	2b0b      	cmp	r3, #11
 8020a1e:	dc01      	bgt.n	8020a24 <lv_page_sb_refresh+0x2b8>
 8020a20:	230c      	movs	r3, #12
 8020a22:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 8020a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a26:	330c      	adds	r3, #12
 8020a28:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8020a2c:	4611      	mov	r1, r2
 8020a2e:	4618      	mov	r0, r3
 8020a30:	f7f5 fbd9 	bl	80161e6 <lv_area_set_width>

        lv_area_set_pos(&ext->sb.hor_area,
 8020a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a36:	f103 040c 	add.w	r4, r3, #12
                        sb_hor_pad +
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8020a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a3c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8020a40:	461d      	mov	r5, r3
 8020a42:	6a38      	ldr	r0, [r7, #32]
 8020a44:	f7e9 fda4 	bl	800a590 <lv_obj_get_x>
 8020a48:	4603      	mov	r3, r0
 8020a4a:	1aeb      	subs	r3, r5, r3
 8020a4c:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8020a50:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8020a54:	1a89      	subs	r1, r1, r2
 8020a56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020a5a:	0052      	lsls	r2, r2, #1
 8020a5c:	1a8a      	subs	r2, r1, r2
 8020a5e:	fb02 f203 	mul.w	r2, r2, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 8020a62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a68:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8020a6c:	440b      	add	r3, r1
 8020a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a70:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8020a74:	4419      	add	r1, r3
 8020a76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8020a7a:	1acb      	subs	r3, r1, r3
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8020a7c:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_hor_pad +
 8020a80:	b29a      	uxth	r2, r3
 8020a82:	8afb      	ldrh	r3, [r7, #22]
 8020a84:	4413      	add	r3, r2
 8020a86:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 8020a88:	b219      	sxth	r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8020a8a:	8b3a      	ldrh	r2, [r7, #24]
 8020a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a8e:	689b      	ldr	r3, [r3, #8]
 8020a90:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8020a94:	b29b      	uxth	r3, r3
 8020a96:	1ad3      	subs	r3, r2, r3
 8020a98:	b29a      	uxth	r2, r3
 8020a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a9c:	689b      	ldr	r3, [r3, #8]
 8020a9e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020aa2:	b29b      	uxth	r3, r3
 8020aa4:	1ad3      	subs	r3, r2, r3
 8020aa6:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 8020aa8:	b21b      	sxth	r3, r3
 8020aaa:	461a      	mov	r2, r3
 8020aac:	4620      	mov	r0, r4
 8020aae:	f7f5 fbca 	bl	8016246 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8020ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ab4:	7f1b      	ldrb	r3, [r3, #28]
 8020ab6:	f003 031c 	and.w	r3, r3, #28
 8020aba:	b2db      	uxtb	r3, r3
 8020abc:	2b0c      	cmp	r3, #12
 8020abe:	d006      	beq.n	8020ace <lv_page_sb_refresh+0x362>
 8020ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ac2:	7f1b      	ldrb	r3, [r3, #28]
 8020ac4:	f003 031c 	and.w	r3, r3, #28
 8020ac8:	b2db      	uxtb	r3, r3
 8020aca:	2b08      	cmp	r3, #8
 8020acc:	d104      	bne.n	8020ad8 <lv_page_sb_refresh+0x36c>
 8020ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020ad0:	7f13      	ldrb	r3, [r2, #28]
 8020ad2:	f043 0301 	orr.w	r3, r3, #1
 8020ad6:	7713      	strb	r3, [r2, #28]
    }

    /*Full sized vertical scroll bar*/
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8020ad8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8020adc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020ae2:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8020ae6:	1a5b      	subs	r3, r3, r1
 8020ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020aea:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8020aee:	1a5b      	subs	r3, r3, r1
 8020af0:	429a      	cmp	r2, r3
 8020af2:	dc38      	bgt.n	8020b66 <lv_page_sb_refresh+0x3fa>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 8020af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020af6:	f103 0014 	add.w	r0, r3, #20
 8020afa:	8b3a      	ldrh	r2, [r7, #24]
 8020afc:	8abb      	ldrh	r3, [r7, #20]
 8020afe:	005b      	lsls	r3, r3, #1
 8020b00:	b29b      	uxth	r3, r3
 8020b02:	1ad3      	subs	r3, r2, r3
 8020b04:	b29b      	uxth	r3, r3
 8020b06:	b21b      	sxth	r3, r3
 8020b08:	4619      	mov	r1, r3
 8020b0a:	f7f5 fb84 	bl	8016216 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,
 8020b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b10:	f103 0014 	add.w	r0, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8020b14:	8b7a      	ldrh	r2, [r7, #26]
 8020b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b18:	689b      	ldr	r3, [r3, #8]
 8020b1a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8020b1e:	b29b      	uxth	r3, r3
 8020b20:	1ad3      	subs	r3, r2, r3
 8020b22:	b29a      	uxth	r2, r3
 8020b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b26:	689b      	ldr	r3, [r3, #8]
 8020b28:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8020b2c:	b29b      	uxth	r3, r3
 8020b2e:	1ad3      	subs	r3, r2, r3
 8020b30:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020b32:	b21b      	sxth	r3, r3
 8020b34:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b38:	4619      	mov	r1, r3
 8020b3a:	f7f5 fb84 	bl	8016246 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 8020b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b40:	7f1b      	ldrb	r3, [r3, #28]
 8020b42:	f003 031c 	and.w	r3, r3, #28
 8020b46:	b2db      	uxtb	r3, r3
 8020b48:	2b0c      	cmp	r3, #12
 8020b4a:	d006      	beq.n	8020b5a <lv_page_sb_refresh+0x3ee>
 8020b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b4e:	7f1b      	ldrb	r3, [r3, #28]
 8020b50:	f003 031c 	and.w	r3, r3, #28
 8020b54:	b2db      	uxtb	r3, r3
 8020b56:	2b08      	cmp	r3, #8
 8020b58:	d17e      	bne.n	8020c58 <lv_page_sb_refresh+0x4ec>
 8020b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020b5c:	7f13      	ldrb	r3, [r2, #28]
 8020b5e:	f36f 0341 	bfc	r3, #1, #1
 8020b62:	7713      	strb	r3, [r2, #28]
 8020b64:	e078      	b.n	8020c58 <lv_page_sb_refresh+0x4ec>
    }
    /*Smaller vertical scroll bar*/
    else {
        size_tmp =
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 8020b66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020b6a:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8020b6e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b72:	0052      	lsls	r2, r2, #1
 8020b74:	1a8a      	subs	r2, r1, r2
 8020b76:	fb02 f203 	mul.w	r2, r2, r3
 8020b7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8020b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020b80:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8020b84:	440b      	add	r3, r1
 8020b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020b88:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8020b8c:	440b      	add	r3, r1
 8020b8e:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 8020b92:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 8020b94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020b98:	2b0b      	cmp	r3, #11
 8020b9a:	dc01      	bgt.n	8020ba0 <lv_page_sb_refresh+0x434>
 8020b9c:	230c      	movs	r3, #12
 8020b9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 8020ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ba2:	3314      	adds	r3, #20
 8020ba4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8020ba8:	4611      	mov	r1, r2
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7f5 fb33 	bl	8016216 <lv_area_set_height>

        lv_area_set_pos(&ext->sb.ver_area,
 8020bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bb2:	f103 0414 	add.w	r4, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8020bb6:	8b7a      	ldrh	r2, [r7, #26]
 8020bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bba:	689b      	ldr	r3, [r3, #8]
 8020bbc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8020bc0:	b29b      	uxth	r3, r3
 8020bc2:	1ad3      	subs	r3, r2, r3
 8020bc4:	b29a      	uxth	r2, r3
 8020bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bc8:	689b      	ldr	r3, [r3, #8]
 8020bca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8020bce:	b29b      	uxth	r3, r3
 8020bd0:	1ad3      	subs	r3, r2, r3
 8020bd2:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020bd4:	b21d      	sxth	r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8020bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bd8:	689b      	ldr	r3, [r3, #8]
 8020bda:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020bde:	461e      	mov	r6, r3
 8020be0:	6a38      	ldr	r0, [r7, #32]
 8020be2:	f7e9 fcee 	bl	800a5c2 <lv_obj_get_y>
 8020be6:	4603      	mov	r3, r0
 8020be8:	1af3      	subs	r3, r6, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8020bea:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8020bee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8020bf2:	1a89      	subs	r1, r1, r2
 8020bf4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020bf8:	0052      	lsls	r2, r2, #1
 8020bfa:	1a8a      	subs	r2, r1, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8020bfc:	fb02 f203 	mul.w	r2, r2, r3
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8020c00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8020c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020c06:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8020c0a:	440b      	add	r3, r1
 8020c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020c0e:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8020c12:	4419      	add	r1, r3
 8020c14:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020c18:	1acb      	subs	r3, r1, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8020c1a:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8020c1e:	b29a      	uxth	r2, r3
 8020c20:	8abb      	ldrh	r3, [r7, #20]
 8020c22:	4413      	add	r3, r2
 8020c24:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020c26:	b21b      	sxth	r3, r3
 8020c28:	461a      	mov	r2, r3
 8020c2a:	4629      	mov	r1, r5
 8020c2c:	4620      	mov	r0, r4
 8020c2e:	f7f5 fb0a 	bl	8016246 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8020c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c34:	7f1b      	ldrb	r3, [r3, #28]
 8020c36:	f003 031c 	and.w	r3, r3, #28
 8020c3a:	b2db      	uxtb	r3, r3
 8020c3c:	2b0c      	cmp	r3, #12
 8020c3e:	d006      	beq.n	8020c4e <lv_page_sb_refresh+0x4e2>
 8020c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c42:	7f1b      	ldrb	r3, [r3, #28]
 8020c44:	f003 031c 	and.w	r3, r3, #28
 8020c48:	b2db      	uxtb	r3, r3
 8020c4a:	2b08      	cmp	r3, #8
 8020c4c:	d104      	bne.n	8020c58 <lv_page_sb_refresh+0x4ec>
 8020c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020c50:	7f13      	ldrb	r3, [r2, #28]
 8020c52:	f043 0302 	orr.w	r3, r3, #2
 8020c56:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 8020c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c5a:	7f1b      	ldrb	r3, [r3, #28]
 8020c5c:	f003 0301 	and.w	r3, r3, #1
 8020c60:	b2db      	uxtb	r3, r3
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	d03a      	beq.n	8020cdc <lv_page_sb_refresh+0x570>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8020c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c68:	f103 020c 	add.w	r2, r3, #12
 8020c6c:	f107 0308 	add.w	r3, r7, #8
 8020c70:	4611      	mov	r1, r2
 8020c72:	4618      	mov	r0, r3
 8020c74:	f7fe f958 	bl	801ef28 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8020c78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020c7c:	b29a      	uxth	r2, r3
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020c84:	b29b      	uxth	r3, r3
 8020c86:	4413      	add	r3, r2
 8020c88:	b29b      	uxth	r3, r3
 8020c8a:	b21b      	sxth	r3, r3
 8020c8c:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8020c8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020c92:	b29a      	uxth	r2, r3
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020c9a:	b29b      	uxth	r3, r3
 8020c9c:	4413      	add	r3, r2
 8020c9e:	b29b      	uxth	r3, r3
 8020ca0:	b21b      	sxth	r3, r3
 8020ca2:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8020ca4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020ca8:	b29a      	uxth	r2, r3
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020cb0:	b29b      	uxth	r3, r3
 8020cb2:	4413      	add	r3, r2
 8020cb4:	b29b      	uxth	r3, r3
 8020cb6:	b21b      	sxth	r3, r3
 8020cb8:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 8020cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020cbe:	b29a      	uxth	r2, r3
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020cc6:	b29b      	uxth	r3, r3
 8020cc8:	4413      	add	r3, r2
 8020cca:	b29b      	uxth	r3, r3
 8020ccc:	b21b      	sxth	r3, r3
 8020cce:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8020cd0:	f107 0308 	add.w	r3, r7, #8
 8020cd4:	4619      	mov	r1, r3
 8020cd6:	6938      	ldr	r0, [r7, #16]
 8020cd8:	f7e9 ffd0 	bl	800ac7c <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8020cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cde:	7f1b      	ldrb	r3, [r3, #28]
 8020ce0:	f003 0302 	and.w	r3, r3, #2
 8020ce4:	b2db      	uxtb	r3, r3
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d03c      	beq.n	8020d64 <lv_page_sb_refresh+0x5f8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8020cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cec:	f103 0214 	add.w	r2, r3, #20
 8020cf0:	f107 0308 	add.w	r3, r7, #8
 8020cf4:	4611      	mov	r1, r2
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	f7fe f916 	bl	801ef28 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8020cfc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020d00:	b29a      	uxth	r2, r3
 8020d02:	687b      	ldr	r3, [r7, #4]
 8020d04:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020d08:	b29b      	uxth	r3, r3
 8020d0a:	4413      	add	r3, r2
 8020d0c:	b29b      	uxth	r3, r3
 8020d0e:	b21b      	sxth	r3, r3
 8020d10:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8020d12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020d16:	b29a      	uxth	r2, r3
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020d1e:	b29b      	uxth	r3, r3
 8020d20:	4413      	add	r3, r2
 8020d22:	b29b      	uxth	r3, r3
 8020d24:	b21b      	sxth	r3, r3
 8020d26:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8020d28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020d2c:	b29a      	uxth	r2, r3
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020d34:	b29b      	uxth	r3, r3
 8020d36:	4413      	add	r3, r2
 8020d38:	b29b      	uxth	r3, r3
 8020d3a:	b21b      	sxth	r3, r3
 8020d3c:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 8020d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020d42:	b29a      	uxth	r2, r3
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020d4a:	b29b      	uxth	r3, r3
 8020d4c:	4413      	add	r3, r2
 8020d4e:	b29b      	uxth	r3, r3
 8020d50:	b21b      	sxth	r3, r3
 8020d52:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8020d54:	f107 0308 	add.w	r3, r7, #8
 8020d58:	4619      	mov	r1, r3
 8020d5a:	6938      	ldr	r0, [r7, #16]
 8020d5c:	f7e9 ff8e 	bl	800ac7c <lv_inv_area>
 8020d60:	e000      	b.n	8020d64 <lv_page_sb_refresh+0x5f8>
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8020d62:	bf00      	nop
    }
}
 8020d64:	3734      	adds	r7, #52	; 0x34
 8020d66:	46bd      	mov	sp, r7
 8020d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d6a <edge_flash_anim>:

#if LV_USE_ANIMATION
static void edge_flash_anim(void * page, lv_anim_value_t v)
{
 8020d6a:	b580      	push	{r7, lr}
 8020d6c:	b084      	sub	sp, #16
 8020d6e:	af00      	add	r7, sp, #0
 8020d70:	6078      	str	r0, [r7, #4]
 8020d72:	460b      	mov	r3, r1
 8020d74:	807b      	strh	r3, [r7, #2]
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 8020d76:	6878      	ldr	r0, [r7, #4]
 8020d78:	f7e9 fd27 	bl	800a7ca <lv_obj_get_ext_attr>
 8020d7c:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.state = v;
 8020d7e:	68fb      	ldr	r3, [r7, #12]
 8020d80:	887a      	ldrh	r2, [r7, #2]
 8020d82:	841a      	strh	r2, [r3, #32]
    lv_obj_invalidate(page);
 8020d84:	6878      	ldr	r0, [r7, #4]
 8020d86:	f7e8 faf4 	bl	8009372 <lv_obj_invalidate>
}
 8020d8a:	bf00      	nop
 8020d8c:	3710      	adds	r7, #16
 8020d8e:	46bd      	mov	sp, r7
 8020d90:	bd80      	pop	{r7, pc}

08020d92 <edge_flash_anim_end>:

static void edge_flash_anim_end(lv_anim_t * a)
{
 8020d92:	b580      	push	{r7, lr}
 8020d94:	b084      	sub	sp, #16
 8020d96:	af00      	add	r7, sp, #0
 8020d98:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	4618      	mov	r0, r3
 8020da0:	f7e9 fd13 	bl	800a7ca <lv_obj_get_ext_attr>
 8020da4:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.top_ip    = 0;
 8020da6:	68fa      	ldr	r2, [r7, #12]
 8020da8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020dac:	f36f 0341 	bfc	r3, #1, #1
 8020db0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 8020db4:	68fa      	ldr	r2, [r7, #12]
 8020db6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020dba:	f36f 0382 	bfc	r3, #2, #1
 8020dbe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 8020dc2:	68fa      	ldr	r2, [r7, #12]
 8020dc4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020dc8:	f36f 1304 	bfc	r3, #4, #1
 8020dcc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 8020dd0:	68fa      	ldr	r2, [r7, #12]
 8020dd2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020dd6:	f36f 03c3 	bfc	r3, #3, #1
 8020dda:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lv_obj_invalidate(a->var);
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	4618      	mov	r0, r3
 8020de4:	f7e8 fac5 	bl	8009372 <lv_obj_invalidate>
}
 8020de8:	bf00      	nop
 8020dea:	3710      	adds	r7, #16
 8020dec:	46bd      	mov	sp, r7
 8020dee:	bd80      	pop	{r7, pc}

08020df0 <lv_area_copy>:
{
 8020df0:	b580      	push	{r7, lr}
 8020df2:	b082      	sub	sp, #8
 8020df4:	af00      	add	r7, sp, #0
 8020df6:	6078      	str	r0, [r7, #4]
 8020df8:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8020dfa:	2208      	movs	r2, #8
 8020dfc:	6839      	ldr	r1, [r7, #0]
 8020dfe:	6878      	ldr	r0, [r7, #4]
 8020e00:	f00a f906 	bl	802b010 <memcpy>
}
 8020e04:	bf00      	nop
 8020e06:	3708      	adds	r7, #8
 8020e08:	46bd      	mov	sp, r7
 8020e0a:	bd80      	pop	{r7, pc}

08020e0c <lv_area_get_width>:
{
 8020e0c:	b480      	push	{r7}
 8020e0e:	b083      	sub	sp, #12
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e1a:	b29a      	uxth	r2, r3
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020e22:	b29b      	uxth	r3, r3
 8020e24:	1ad3      	subs	r3, r2, r3
 8020e26:	b29b      	uxth	r3, r3
 8020e28:	3301      	adds	r3, #1
 8020e2a:	b29b      	uxth	r3, r3
 8020e2c:	b21b      	sxth	r3, r3
}
 8020e2e:	4618      	mov	r0, r3
 8020e30:	370c      	adds	r7, #12
 8020e32:	46bd      	mov	sp, r7
 8020e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e38:	4770      	bx	lr

08020e3a <lv_area_get_height>:
{
 8020e3a:	b480      	push	{r7}
 8020e3c:	b083      	sub	sp, #12
 8020e3e:	af00      	add	r7, sp, #0
 8020e40:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020e48:	b29a      	uxth	r2, r3
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020e50:	b29b      	uxth	r3, r3
 8020e52:	1ad3      	subs	r3, r2, r3
 8020e54:	b29b      	uxth	r3, r3
 8020e56:	3301      	adds	r3, #1
 8020e58:	b29b      	uxth	r3, r3
 8020e5a:	b21b      	sxth	r3, r3
}
 8020e5c:	4618      	mov	r0, r3
 8020e5e:	370c      	adds	r7, #12
 8020e60:	46bd      	mov	sp, r7
 8020e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e66:	4770      	bx	lr

08020e68 <lv_slider_set_value>:
 * @param slider pointer to a slider object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b082      	sub	sp, #8
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	6078      	str	r0, [r7, #4]
 8020e70:	460b      	mov	r3, r1
 8020e72:	807b      	strh	r3, [r7, #2]
 8020e74:	4613      	mov	r3, r2
 8020e76:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 8020e78:	787a      	ldrb	r2, [r7, #1]
 8020e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020e7e:	4619      	mov	r1, r3
 8020e80:	6878      	ldr	r0, [r7, #4]
 8020e82:	f7f7 fb59 	bl	8018538 <lv_bar_set_value>
}
 8020e86:	bf00      	nop
 8020e88:	3708      	adds	r7, #8
 8020e8a:	46bd      	mov	sp, r7
 8020e8c:	bd80      	pop	{r7, pc}

08020e8e <lv_slider_get_min_value>:
 * Get the minimum value of a slider
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
 8020e8e:	b580      	push	{r7, lr}
 8020e90:	b082      	sub	sp, #8
 8020e92:	af00      	add	r7, sp, #0
 8020e94:	6078      	str	r0, [r7, #4]
    return lv_bar_get_min_value(slider);
 8020e96:	6878      	ldr	r0, [r7, #4]
 8020e98:	f7f7 fc58 	bl	801874c <lv_bar_get_min_value>
 8020e9c:	4603      	mov	r3, r0
}
 8020e9e:	4618      	mov	r0, r3
 8020ea0:	3708      	adds	r7, #8
 8020ea2:	46bd      	mov	sp, r7
 8020ea4:	bd80      	pop	{r7, pc}

08020ea6 <lv_slider_get_max_value>:
 * Get the maximum value of a slider
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
 8020ea6:	b580      	push	{r7, lr}
 8020ea8:	b082      	sub	sp, #8
 8020eaa:	af00      	add	r7, sp, #0
 8020eac:	6078      	str	r0, [r7, #4]
    return lv_bar_get_max_value(slider);
 8020eae:	6878      	ldr	r0, [r7, #4]
 8020eb0:	f7f7 fc5b 	bl	801876a <lv_bar_get_max_value>
 8020eb4:	4603      	mov	r3, r0
}
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	3708      	adds	r7, #8
 8020eba:	46bd      	mov	sp, r7
 8020ebc:	bd80      	pop	{r7, pc}
	...

08020ec0 <lv_slider_create>:
 * @param par pointer to an object, it will be the parent of the new slider
 * @param copy pointer to a slider object, if not NULL then the new object will be copied from it
 * @return pointer to the created slider
 */
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8020ec0:	b580      	push	{r7, lr}
 8020ec2:	b086      	sub	sp, #24
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	6078      	str	r0, [r7, #4]
 8020ec8:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("slider create started");

    /*Create the ancestor slider*/
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 8020eca:	6839      	ldr	r1, [r7, #0]
 8020ecc:	6878      	ldr	r0, [r7, #4]
 8020ece:	f7f7 fa6d 	bl	80183ac <lv_bar_create>
 8020ed2:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_slider);
 8020ed4:	697b      	ldr	r3, [r7, #20]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d100      	bne.n	8020edc <lv_slider_create+0x1c>
 8020eda:	e7fe      	b.n	8020eda <lv_slider_create+0x1a>
    if(new_slider == NULL) return NULL;
 8020edc:	697b      	ldr	r3, [r7, #20]
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d101      	bne.n	8020ee6 <lv_slider_create+0x26>
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	e07a      	b.n	8020fdc <lv_slider_create+0x11c>

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 8020ee6:	4b3f      	ldr	r3, [pc, #252]	; (8020fe4 <lv_slider_create+0x124>)
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d105      	bne.n	8020efa <lv_slider_create+0x3a>
 8020eee:	6978      	ldr	r0, [r7, #20]
 8020ef0:	f7e9 fc5f 	bl	800a7b2 <lv_obj_get_design_cb>
 8020ef4:	4602      	mov	r2, r0
 8020ef6:	4b3b      	ldr	r3, [pc, #236]	; (8020fe4 <lv_slider_create+0x124>)
 8020ef8:	601a      	str	r2, [r3, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 8020efa:	4b3b      	ldr	r3, [pc, #236]	; (8020fe8 <lv_slider_create+0x128>)
 8020efc:	681b      	ldr	r3, [r3, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d105      	bne.n	8020f0e <lv_slider_create+0x4e>
 8020f02:	6978      	ldr	r0, [r7, #20]
 8020f04:	f7e9 fc49 	bl	800a79a <lv_obj_get_signal_cb>
 8020f08:	4602      	mov	r2, r0
 8020f0a:	4b37      	ldr	r3, [pc, #220]	; (8020fe8 <lv_slider_create+0x128>)
 8020f0c:	601a      	str	r2, [r3, #0]

    /*Allocate the slider type specific extended data*/
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 8020f0e:	211c      	movs	r1, #28
 8020f10:	6978      	ldr	r0, [r7, #20]
 8020f12:	f7e9 fa8d 	bl	800a430 <lv_obj_allocate_ext_attr>
 8020f16:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8020f18:	693b      	ldr	r3, [r7, #16]
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d100      	bne.n	8020f20 <lv_slider_create+0x60>
 8020f1e:	e7fe      	b.n	8020f1e <lv_slider_create+0x5e>
    if(ext == NULL) return NULL;
 8020f20:	693b      	ldr	r3, [r7, #16]
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d101      	bne.n	8020f2a <lv_slider_create+0x6a>
 8020f26:	2300      	movs	r3, #0
 8020f28:	e058      	b.n	8020fdc <lv_slider_create+0x11c>

    /*Initialize the allocated 'ext' */
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8020f2a:	693b      	ldr	r3, [r7, #16]
 8020f2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020f30:	831a      	strh	r2, [r3, #24]
    ext->style_knob = &lv_style_pretty;
 8020f32:	693b      	ldr	r3, [r7, #16]
 8020f34:	4a2d      	ldr	r2, [pc, #180]	; (8020fec <lv_slider_create+0x12c>)
 8020f36:	615a      	str	r2, [r3, #20]
    ext->knob_in    = 0;
 8020f38:	693a      	ldr	r2, [r7, #16]
 8020f3a:	7e93      	ldrb	r3, [r2, #26]
 8020f3c:	f36f 0300 	bfc	r3, #0, #1
 8020f40:	7693      	strb	r3, [r2, #26]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 8020f42:	492b      	ldr	r1, [pc, #172]	; (8020ff0 <lv_slider_create+0x130>)
 8020f44:	6978      	ldr	r0, [r7, #20]
 8020f46:	f7e9 fa57 	bl	800a3f8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 8020f4a:	492a      	ldr	r1, [pc, #168]	; (8020ff4 <lv_slider_create+0x134>)
 8020f4c:	6978      	ldr	r0, [r7, #20]
 8020f4e:	f7e9 fa61 	bl	800a414 <lv_obj_set_design_cb>

    /*Init the new slider slider*/
    if(copy == NULL) {
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d12b      	bne.n	8020fb0 <lv_slider_create+0xf0>
        lv_obj_set_click(new_slider, true);
 8020f58:	2101      	movs	r1, #1
 8020f5a:	6978      	ldr	r0, [r7, #20]
 8020f5c:	f7e9 f92b 	bl	800a1b6 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 8020f60:	2110      	movs	r1, #16
 8020f62:	6978      	ldr	r0, [r7, #20]
 8020f64:	f7e9 f97c 	bl	800a260 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8020f68:	f001 fab2 	bl	80224d0 <lv_theme_get_current>
 8020f6c:	60b8      	str	r0, [r7, #8]
        if(th) {
 8020f6e:	68bb      	ldr	r3, [r7, #8]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d015      	beq.n	8020fa0 <lv_slider_create+0xe0>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 8020f74:	68bb      	ldr	r3, [r7, #8]
 8020f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020f78:	461a      	mov	r2, r3
 8020f7a:	2100      	movs	r1, #0
 8020f7c:	6978      	ldr	r0, [r7, #20]
 8020f7e:	f000 f863 	bl	8021048 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 8020f82:	68bb      	ldr	r3, [r7, #8]
 8020f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020f86:	461a      	mov	r2, r3
 8020f88:	2101      	movs	r1, #1
 8020f8a:	6978      	ldr	r0, [r7, #20]
 8020f8c:	f000 f85c 	bl	8021048 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 8020f90:	68bb      	ldr	r3, [r7, #8]
 8020f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020f94:	461a      	mov	r2, r3
 8020f96:	2102      	movs	r1, #2
 8020f98:	6978      	ldr	r0, [r7, #20]
 8020f9a:	f000 f855 	bl	8021048 <lv_slider_set_style>
 8020f9e:	e01c      	b.n	8020fda <lv_slider_create+0x11a>
        } else {
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 8020fa0:	693b      	ldr	r3, [r7, #16]
 8020fa2:	695b      	ldr	r3, [r3, #20]
 8020fa4:	461a      	mov	r2, r3
 8020fa6:	2102      	movs	r1, #2
 8020fa8:	6978      	ldr	r0, [r7, #20]
 8020faa:	f000 f84d 	bl	8021048 <lv_slider_set_style>
 8020fae:	e014      	b.n	8020fda <lv_slider_create+0x11a>
        }
    }
    /*Copy an existing slider*/
    else {
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8020fb0:	6838      	ldr	r0, [r7, #0]
 8020fb2:	f7e9 fc0a 	bl	800a7ca <lv_obj_get_ext_attr>
 8020fb6:	60f8      	str	r0, [r7, #12]
        ext->style_knob            = copy_ext->style_knob;
 8020fb8:	68fb      	ldr	r3, [r7, #12]
 8020fba:	695a      	ldr	r2, [r3, #20]
 8020fbc:	693b      	ldr	r3, [r7, #16]
 8020fbe:	615a      	str	r2, [r3, #20]
        ext->knob_in               = copy_ext->knob_in;
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	7e9b      	ldrb	r3, [r3, #26]
 8020fc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8020fc8:	b2d9      	uxtb	r1, r3
 8020fca:	693a      	ldr	r2, [r7, #16]
 8020fcc:	7e93      	ldrb	r3, [r2, #26]
 8020fce:	f361 0300 	bfi	r3, r1, #0, #1
 8020fd2:	7693      	strb	r3, [r2, #26]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_slider);
 8020fd4:	6978      	ldr	r0, [r7, #20]
 8020fd6:	f7e9 f8da 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("slider created");

    return new_slider;
 8020fda:	697b      	ldr	r3, [r7, #20]
}
 8020fdc:	4618      	mov	r0, r3
 8020fde:	3718      	adds	r7, #24
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bd80      	pop	{r7, pc}
 8020fe4:	200177ec 	.word	0x200177ec
 8020fe8:	200177f0 	.word	0x200177f0
 8020fec:	2001b950 	.word	0x2001b950
 8020ff0:	080219ed 	.word	0x080219ed
 8020ff4:	08021127 	.word	0x08021127

08020ff8 <lv_slider_set_knob_in>:
 * @param slider pointer to slider object
 * @param in true: the knob is drawn always in the slider;
 *           false: the knob can be out on the edges
 */
void lv_slider_set_knob_in(lv_obj_t * slider, bool in)
{
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b084      	sub	sp, #16
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
 8021000:	460b      	mov	r3, r1
 8021002:	70fb      	strb	r3, [r7, #3]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8021004:	6878      	ldr	r0, [r7, #4]
 8021006:	f7e9 fbe0 	bl	800a7ca <lv_obj_get_ext_attr>
 802100a:	60f8      	str	r0, [r7, #12]
    if(ext->knob_in == in) return;
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	7e9b      	ldrb	r3, [r3, #26]
 8021010:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021014:	b2db      	uxtb	r3, r3
 8021016:	78fa      	ldrb	r2, [r7, #3]
 8021018:	429a      	cmp	r2, r3
 802101a:	d011      	beq.n	8021040 <lv_slider_set_knob_in+0x48>

    ext->knob_in = in == false ? 0 : 1;
 802101c:	78fb      	ldrb	r3, [r7, #3]
 802101e:	f083 0301 	eor.w	r3, r3, #1
 8021022:	b2db      	uxtb	r3, r3
 8021024:	2b00      	cmp	r3, #0
 8021026:	d001      	beq.n	802102c <lv_slider_set_knob_in+0x34>
 8021028:	2100      	movs	r1, #0
 802102a:	e000      	b.n	802102e <lv_slider_set_knob_in+0x36>
 802102c:	2101      	movs	r1, #1
 802102e:	68fa      	ldr	r2, [r7, #12]
 8021030:	7e93      	ldrb	r3, [r2, #26]
 8021032:	f361 0300 	bfi	r3, r1, #0, #1
 8021036:	7693      	strb	r3, [r2, #26]
    lv_obj_invalidate(slider);
 8021038:	6878      	ldr	r0, [r7, #4]
 802103a:	f7e8 f99a 	bl	8009372 <lv_obj_invalidate>
 802103e:	e000      	b.n	8021042 <lv_slider_set_knob_in+0x4a>
    if(ext->knob_in == in) return;
 8021040:	bf00      	nop
}
 8021042:	3710      	adds	r7, #16
 8021044:	46bd      	mov	sp, r7
 8021046:	bd80      	pop	{r7, pc}

08021048 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b086      	sub	sp, #24
 802104c:	af00      	add	r7, sp, #0
 802104e:	60f8      	str	r0, [r7, #12]
 8021050:	460b      	mov	r3, r1
 8021052:	607a      	str	r2, [r7, #4]
 8021054:	72fb      	strb	r3, [r7, #11]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8021056:	68f8      	ldr	r0, [r7, #12]
 8021058:	f7e9 fbb7 	bl	800a7ca <lv_obj_get_ext_attr>
 802105c:	6178      	str	r0, [r7, #20]

    switch(type) {
 802105e:	7afb      	ldrb	r3, [r7, #11]
 8021060:	2b01      	cmp	r3, #1
 8021062:	d00a      	beq.n	802107a <lv_slider_set_style+0x32>
 8021064:	2b02      	cmp	r3, #2
 8021066:	d00e      	beq.n	8021086 <lv_slider_set_style+0x3e>
 8021068:	2b00      	cmp	r3, #0
 802106a:	d000      	beq.n	802106e <lv_slider_set_style+0x26>
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
 802106c:	e012      	b.n	8021094 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 802106e:	687a      	ldr	r2, [r7, #4]
 8021070:	2100      	movs	r1, #0
 8021072:	68f8      	ldr	r0, [r7, #12]
 8021074:	f7f7 fb30 	bl	80186d8 <lv_bar_set_style>
 8021078:	e00c      	b.n	8021094 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 802107a:	687a      	ldr	r2, [r7, #4]
 802107c:	2101      	movs	r1, #1
 802107e:	68f8      	ldr	r0, [r7, #12]
 8021080:	f7f7 fb2a 	bl	80186d8 <lv_bar_set_style>
 8021084:	e006      	b.n	8021094 <lv_slider_set_style+0x4c>
            ext->style_knob = style;
 8021086:	697b      	ldr	r3, [r7, #20]
 8021088:	687a      	ldr	r2, [r7, #4]
 802108a:	615a      	str	r2, [r3, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 802108c:	68f8      	ldr	r0, [r7, #12]
 802108e:	f7e9 f9e5 	bl	800a45c <lv_obj_refresh_ext_draw_pad>
            break;
 8021092:	bf00      	nop
}
 8021094:	bf00      	nop
 8021096:	3718      	adds	r7, #24
 8021098:	46bd      	mov	sp, r7
 802109a:	bd80      	pop	{r7, pc}

0802109c <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 802109c:	b580      	push	{r7, lr}
 802109e:	b084      	sub	sp, #16
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 80210a4:	6878      	ldr	r0, [r7, #4]
 80210a6:	f7e9 fb90 	bl	800a7ca <lv_obj_get_ext_attr>
 80210aa:	60f8      	str	r0, [r7, #12]

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80210b2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80210b6:	d003      	beq.n	80210c0 <lv_slider_get_value+0x24>
        return ext->drag_value;
 80210b8:	68fb      	ldr	r3, [r7, #12]
 80210ba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80210be:	e003      	b.n	80210c8 <lv_slider_get_value+0x2c>
    else
        return lv_bar_get_value(slider);
 80210c0:	6878      	ldr	r0, [r7, #4]
 80210c2:	f7f7 fb2a 	bl	801871a <lv_bar_get_value>
 80210c6:	4603      	mov	r3, r0
}
 80210c8:	4618      	mov	r0, r3
 80210ca:	3710      	adds	r7, #16
 80210cc:	46bd      	mov	sp, r7
 80210ce:	bd80      	pop	{r7, pc}

080210d0 <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b084      	sub	sp, #16
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]
 80210d8:	460b      	mov	r3, r1
 80210da:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 80210dc:	2300      	movs	r3, #0
 80210de:	60fb      	str	r3, [r7, #12]
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f7e9 fb72 	bl	800a7ca <lv_obj_get_ext_attr>
 80210e6:	60b8      	str	r0, [r7, #8]

    switch(type) {
 80210e8:	78fb      	ldrb	r3, [r7, #3]
 80210ea:	2b01      	cmp	r3, #1
 80210ec:	d009      	beq.n	8021102 <lv_slider_get_style+0x32>
 80210ee:	2b02      	cmp	r3, #2
 80210f0:	d00d      	beq.n	802110e <lv_slider_get_style+0x3e>
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d10f      	bne.n	8021116 <lv_slider_get_style+0x46>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
 80210f6:	2100      	movs	r1, #0
 80210f8:	6878      	ldr	r0, [r7, #4]
 80210fa:	f7f7 fb45 	bl	8018788 <lv_bar_get_style>
 80210fe:	60f8      	str	r0, [r7, #12]
 8021100:	e00c      	b.n	802111c <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 8021102:	2101      	movs	r1, #1
 8021104:	6878      	ldr	r0, [r7, #4]
 8021106:	f7f7 fb3f 	bl	8018788 <lv_bar_get_style>
 802110a:	60f8      	str	r0, [r7, #12]
 802110c:	e006      	b.n	802111c <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 802110e:	68bb      	ldr	r3, [r7, #8]
 8021110:	695b      	ldr	r3, [r3, #20]
 8021112:	60fb      	str	r3, [r7, #12]
 8021114:	e002      	b.n	802111c <lv_slider_get_style+0x4c>
        default: style = NULL; break;
 8021116:	2300      	movs	r3, #0
 8021118:	60fb      	str	r3, [r7, #12]
 802111a:	bf00      	nop
    }

    return style;
 802111c:	68fb      	ldr	r3, [r7, #12]
}
 802111e:	4618      	mov	r0, r3
 8021120:	3710      	adds	r7, #16
 8021122:	46bd      	mov	sp, r7
 8021124:	bd80      	pop	{r7, pc}

08021126 <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
 8021126:	b590      	push	{r4, r7, lr}
 8021128:	b0ad      	sub	sp, #180	; 0xb4
 802112a:	af00      	add	r7, sp, #0
 802112c:	60f8      	str	r0, [r7, #12]
 802112e:	60b9      	str	r1, [r7, #8]
 8021130:	4613      	mov	r3, r2
 8021132:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8021134:	79fb      	ldrb	r3, [r7, #7]
 8021136:	2b02      	cmp	r3, #2
 8021138:	d102      	bne.n	8021140 <lv_slider_design+0x1a>
        return false;
 802113a:	2300      	movs	r3, #0
 802113c:	f000 bc52 	b.w	80219e4 <lv_slider_design+0x8be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8021140:	79fb      	ldrb	r3, [r7, #7]
 8021142:	2b00      	cmp	r3, #0
 8021144:	f040 844d 	bne.w	80219e2 <lv_slider_design+0x8bc>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8021148:	68f8      	ldr	r0, [r7, #12]
 802114a:	f7e9 fb3e 	bl	800a7ca <lv_obj_get_ext_attr>
 802114e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8021152:	2100      	movs	r1, #0
 8021154:	68f8      	ldr	r0, [r7, #12]
 8021156:	f7ff ffbb 	bl	80210d0 <lv_slider_get_style>
 802115a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 802115e:	2102      	movs	r1, #2
 8021160:	68f8      	ldr	r0, [r7, #12]
 8021162:	f7ff ffb5 	bl	80210d0 <lv_slider_get_style>
 8021166:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 802116a:	2101      	movs	r1, #1
 802116c:	68f8      	ldr	r0, [r7, #12]
 802116e:	f7ff ffaf 	bl	80210d0 <lv_slider_get_style>
 8021172:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 8021176:	68f8      	ldr	r0, [r7, #12]
 8021178:	f7e9 fad9 	bl	800a72e <lv_obj_get_opa_scale>
 802117c:	4603      	mov	r3, r0
 802117e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	3310      	adds	r3, #16
 8021186:	4618      	mov	r0, r3
 8021188:	f7ff fe40 	bl	8020e0c <lv_area_get_width>
 802118c:	4603      	mov	r3, r0
 802118e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	3310      	adds	r3, #16
 8021196:	4618      	mov	r0, r3
 8021198:	f7ff fe4f 	bl	8020e3a <lv_area_get_height>
 802119c:	4603      	mov	r3, r0
 802119e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
 80211a2:	68fb      	ldr	r3, [r7, #12]
 80211a4:	f103 0210 	add.w	r2, r3, #16
 80211a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80211ac:	4611      	mov	r1, r2
 80211ae:	4618      	mov	r0, r3
 80211b0:	f7ff fe1e 	bl	8020df0 <lv_area_copy>

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 80211b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80211b8:	8adb      	ldrh	r3, [r3, #22]
 80211ba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 80211be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80211c2:	8b1b      	ldrh	r3, [r3, #24]
 80211c4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 80211c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80211cc:	8b5b      	ldrh	r3, [r3, #26]
 80211ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 80211d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80211d6:	8b9b      	ldrh	r3, [r3, #28]
 80211d8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 80211dc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80211e0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80211e4:	4413      	add	r3, r2
 80211e6:	1d1c      	adds	r4, r3, #4
 80211e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80211ec:	4618      	mov	r0, r3
 80211ee:	f7ff fe24 	bl	8020e3a <lv_area_get_height>
 80211f2:	4603      	mov	r3, r0
 80211f4:	429c      	cmp	r4, r3
 80211f6:	dd0d      	ble.n	8021214 <lv_slider_design+0xee>
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 80211f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80211fc:	4618      	mov	r0, r3
 80211fe:	f7ff fe1c 	bl	8020e3a <lv_area_get_height>
 8021202:	4603      	mov	r3, r0
 8021204:	3b04      	subs	r3, #4
 8021206:	105b      	asrs	r3, r3, #1
 8021208:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            pad_bottom_bg = pad_top_bg;
 802120c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8021210:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8021214:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8021218:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 802121c:	4413      	add	r3, r2
 802121e:	1d1c      	adds	r4, r3, #4
 8021220:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021224:	4618      	mov	r0, r3
 8021226:	f7ff fdf1 	bl	8020e0c <lv_area_get_width>
 802122a:	4603      	mov	r3, r0
 802122c:	429c      	cmp	r4, r3
 802122e:	dd13      	ble.n	8021258 <lv_slider_design+0x132>
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8021230:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021234:	4618      	mov	r0, r3
 8021236:	f7ff fde9 	bl	8020e0c <lv_area_get_width>
 802123a:	4603      	mov	r3, r0
 802123c:	3b04      	subs	r3, #4
 802123e:	105b      	asrs	r3, r3, #1
 8021240:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8021244:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021248:	4618      	mov	r0, r3
 802124a:	f7ff fddf 	bl	8020e0c <lv_area_get_width>
 802124e:	4603      	mov	r3, r0
 8021250:	3b04      	subs	r3, #4
 8021252:	105b      	asrs	r3, r3, #1
 8021254:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 8021258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802125c:	7e9b      	ldrb	r3, [r3, #26]
 802125e:	f003 0301 	and.w	r3, r3, #1
 8021262:	b2db      	uxtb	r3, r3
 8021264:	2b00      	cmp	r3, #0
 8021266:	d028      	beq.n	80212ba <lv_slider_design+0x194>
            area_bg.x1 += pad_left_bg;
 8021268:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 802126c:	b29a      	uxth	r2, r3
 802126e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8021272:	4413      	add	r3, r2
 8021274:	b29b      	uxth	r3, r3
 8021276:	b21b      	sxth	r3, r3
 8021278:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= pad_right_bg;
 802127c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8021280:	b29a      	uxth	r2, r3
 8021282:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8021286:	1ad3      	subs	r3, r2, r3
 8021288:	b29b      	uxth	r3, r3
 802128a:	b21b      	sxth	r3, r3
 802128c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += pad_top_bg;
 8021290:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8021294:	b29a      	uxth	r2, r3
 8021296:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 802129a:	4413      	add	r3, r2
 802129c:	b29b      	uxth	r3, r3
 802129e:	b21b      	sxth	r3, r3
 80212a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= pad_bottom_bg;
 80212a4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80212a8:	b29a      	uxth	r2, r3
 80212aa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80212ae:	1ad3      	subs	r3, r2, r3
 80212b0:	b29b      	uxth	r3, r3
 80212b2:	b21b      	sxth	r3, r3
 80212b4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80212b8:	e047      	b.n	802134a <lv_slider_design+0x224>
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 80212ba:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80212be:	b29a      	uxth	r2, r3
 80212c0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 80212c4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80212c8:	4299      	cmp	r1, r3
 80212ca:	da02      	bge.n	80212d2 <lv_slider_design+0x1ac>
 80212cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80212d0:	e000      	b.n	80212d4 <lv_slider_design+0x1ae>
 80212d2:	2300      	movs	r3, #0
 80212d4:	4413      	add	r3, r2
 80212d6:	b29b      	uxth	r3, r3
 80212d8:	b21b      	sxth	r3, r3
 80212da:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 80212de:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80212e2:	b29a      	uxth	r2, r3
 80212e4:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 80212e8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80212ec:	4299      	cmp	r1, r3
 80212ee:	da02      	bge.n	80212f6 <lv_slider_design+0x1d0>
 80212f0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80212f4:	e000      	b.n	80212f8 <lv_slider_design+0x1d2>
 80212f6:	2300      	movs	r3, #0
 80212f8:	1ad3      	subs	r3, r2, r3
 80212fa:	b29b      	uxth	r3, r3
 80212fc:	b21b      	sxth	r3, r3
 80212fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 8021302:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8021306:	b29a      	uxth	r2, r3
 8021308:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 802130c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8021310:	4299      	cmp	r1, r3
 8021312:	dd02      	ble.n	802131a <lv_slider_design+0x1f4>
 8021314:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8021318:	e000      	b.n	802131c <lv_slider_design+0x1f6>
 802131a:	2300      	movs	r3, #0
 802131c:	4413      	add	r3, r2
 802131e:	b29b      	uxth	r3, r3
 8021320:	b21b      	sxth	r3, r3
 8021322:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 8021326:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 802132a:	b29a      	uxth	r2, r3
 802132c:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 8021330:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8021334:	4299      	cmp	r1, r3
 8021336:	dd02      	ble.n	802133e <lv_slider_design+0x218>
 8021338:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 802133c:	e000      	b.n	8021340 <lv_slider_design+0x21a>
 802133e:	2300      	movs	r3, #0
 8021340:	1ad3      	subs	r3, r2, r3
 8021342:	b29b      	uxth	r3, r3
 8021344:	b21b      	sxth	r3, r3
 8021346:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the slider is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 802134a:	68f8      	ldr	r0, [r7, #12]
 802134c:	f7e9 fa55 	bl	800a7fa <lv_obj_is_focused>
 8021350:	4603      	mov	r3, r0
 8021352:	2b00      	cmp	r3, #0
 8021354:	d012      	beq.n	802137c <lv_slider_design+0x256>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8021356:	f107 0314 	add.w	r3, r7, #20
 802135a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802135e:	4618      	mov	r0, r3
 8021360:	f7ea fca2 	bl	800bca8 <lv_style_copy>
            style_tmp.body.border.width = 0;
 8021364:	2300      	movs	r3, #0
 8021366:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8021368:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 802136c:	f107 0214 	add.w	r2, r7, #20
 8021370:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8021374:	68b9      	ldr	r1, [r7, #8]
 8021376:	f7ee fedc 	bl	8010132 <lv_draw_rect>
 802137a:	e008      	b.n	802138e <lv_slider_design+0x268>
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 802137c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8021380:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8021384:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021388:	68b9      	ldr	r1, [r7, #8]
 802138a:	f7ee fed2 	bl	8010132 <lv_draw_rect>
        }
#endif

        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);
 802138e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8021392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021396:	4611      	mov	r1, r2
 8021398:	4618      	mov	r0, r3
 802139a:	f7ff fd29 	bl	8020df0 <lv_area_copy>

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 802139e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80213a2:	8adb      	ldrh	r3, [r3, #22]
 80213a4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 80213a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80213ac:	8b1b      	ldrh	r3, [r3, #24]
 80213ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 80213b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80213b6:	8b5b      	ldrh	r3, [r3, #26]
 80213b8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 80213bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80213c0:	8b9b      	ldrh	r3, [r3, #28]
 80213c2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 80213c6:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 80213ca:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80213ce:	4413      	add	r3, r2
 80213d0:	1d1c      	adds	r4, r3, #4
 80213d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80213d6:	4618      	mov	r0, r3
 80213d8:	f7ff fd2f 	bl	8020e3a <lv_area_get_height>
 80213dc:	4603      	mov	r3, r0
 80213de:	429c      	cmp	r4, r3
 80213e0:	dd0d      	ble.n	80213fe <lv_slider_design+0x2d8>
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 80213e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80213e6:	4618      	mov	r0, r3
 80213e8:	f7ff fd27 	bl	8020e3a <lv_area_get_height>
 80213ec:	4603      	mov	r3, r0
 80213ee:	3b04      	subs	r3, #4
 80213f0:	105b      	asrs	r3, r3, #1
 80213f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
            pad_bottom_indic = pad_top_indic;
 80213f6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80213fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 80213fe:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 8021402:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8021406:	4413      	add	r3, r2
 8021408:	1d1c      	adds	r4, r3, #4
 802140a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802140e:	4618      	mov	r0, r3
 8021410:	f7ff fcfc 	bl	8020e0c <lv_area_get_width>
 8021414:	4603      	mov	r3, r0
 8021416:	429c      	cmp	r4, r3
 8021418:	dd0d      	ble.n	8021436 <lv_slider_design+0x310>
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 802141a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802141e:	4618      	mov	r0, r3
 8021420:	f7ff fcf4 	bl	8020e0c <lv_area_get_width>
 8021424:	4603      	mov	r3, r0
 8021426:	3b04      	subs	r3, #4
 8021428:	105b      	asrs	r3, r3, #1
 802142a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            pad_right_indic = pad_left_indic;
 802142e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8021432:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        }

        area_indic.x1 += pad_left_indic;
 8021436:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 802143a:	b29a      	uxth	r2, r3
 802143c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8021440:	4413      	add	r3, r2
 8021442:	b29b      	uxth	r3, r3
 8021444:	b21b      	sxth	r3, r3
 8021446:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        area_indic.x2 -= pad_right_indic;
 802144a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 802144e:	b29a      	uxth	r2, r3
 8021450:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8021454:	1ad3      	subs	r3, r2, r3
 8021456:	b29b      	uxth	r3, r3
 8021458:	b21b      	sxth	r3, r3
 802145a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        area_indic.y1 += pad_top_indic;
 802145e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8021462:	b29a      	uxth	r2, r3
 8021464:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8021468:	4413      	add	r3, r2
 802146a:	b29b      	uxth	r3, r3
 802146c:	b21b      	sxth	r3, r3
 802146e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        area_indic.y2 -= pad_bottom_indic;
 8021472:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021476:	b29a      	uxth	r2, r3
 8021478:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 802147c:	1ad3      	subs	r3, r2, r3
 802147e:	b29b      	uxth	r3, r3
 8021480:	b21b      	sxth	r3, r3
 8021482:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        lv_coord_t cur_value = lv_slider_get_value(slider);
 8021486:	68f8      	ldr	r0, [r7, #12]
 8021488:	f7ff fe08 	bl	802109c <lv_slider_get_value>
 802148c:	4603      	mov	r3, r0
 802148e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_coord_t min_value = lv_slider_get_min_value(slider);
 8021492:	68f8      	ldr	r0, [r7, #12]
 8021494:	f7ff fcfb 	bl	8020e8e <lv_slider_get_min_value>
 8021498:	4603      	mov	r3, r0
 802149a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t max_value = lv_slider_get_max_value(slider);
 802149e:	68f8      	ldr	r0, [r7, #12]
 80214a0:	f7ff fd01 	bl	8020ea6 <lv_slider_get_max_value>
 80214a4:	4603      	mov	r3, r0
 80214a6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 80214aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80214ae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80214b2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80214b6:	d004      	beq.n	80214c2 <lv_slider_design+0x39c>
 80214b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80214bc:	8b1b      	ldrh	r3, [r3, #24]
 80214be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        if(slider_w >= slider_h) {
 80214c2:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 80214c6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80214ca:	429a      	cmp	r2, r3
 80214cc:	db7e      	blt.n	80215cc <lv_slider_design+0x4a6>
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
 80214ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80214d2:	4618      	mov	r0, r3
 80214d4:	f7ff fc9a 	bl	8020e0c <lv_area_get_width>
 80214d8:	4603      	mov	r3, r0
 80214da:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80214de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80214e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80214e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214ea:	d03e      	beq.n	802156a <lv_slider_design+0x444>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 80214ec:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80214f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80214f4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80214f8:	4611      	mov	r1, r2
 80214fa:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80214fe:	1a8a      	subs	r2, r1, r2
 8021500:	fb02 f203 	mul.w	r2, r2, r3
 8021504:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021508:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 802150c:	1acb      	subs	r3, r1, r3
 802150e:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_x =
 8021512:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8021516:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 802151a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802151e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021522:	4611      	mov	r1, r2
 8021524:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021528:	1a8a      	subs	r2, r1, r2
 802152a:	fb02 f203 	mul.w	r2, r2, r3
 802152e:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021532:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021536:	1acb      	subs	r3, r1, r3
 8021538:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_x =
 802153c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8021540:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8021544:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8021548:	1ad3      	subs	r3, r2, r3
 802154a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802154e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8021552:	fb02 f303 	mul.w	r3, r2, r3
 8021556:	121b      	asrs	r3, r3, #8
 8021558:	b29a      	uxth	r2, r3
 802155a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 802155e:	4413      	add	r3, r2
 8021560:	b29b      	uxth	r3, r3
 8021562:	b21b      	sxth	r3, r3
 8021564:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8021568:	e012      	b.n	8021590 <lv_slider_design+0x46a>
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 802156a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 802156e:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8021572:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021576:	1a8a      	subs	r2, r1, r2
 8021578:	fb02 f203 	mul.w	r2, r2, r3
 802157c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021580:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021584:	1acb      	subs	r3, r1, r3
 8021586:	fb92 f3f3 	sdiv	r3, r2, r3
 802158a:	b21b      	sxth	r3, r3
 802158c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8021590:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8021594:	b29a      	uxth	r2, r3
 8021596:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 802159a:	b29b      	uxth	r3, r3
 802159c:	4413      	add	r3, r2
 802159e:	b29b      	uxth	r3, r3
 80215a0:	3b01      	subs	r3, #1
 80215a2:	b29b      	uxth	r3, r3
 80215a4:	b21b      	sxth	r3, r3
 80215a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

            /*Draw the indicator but don't draw an ugly 1px wide rectangle on the left on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 80215aa:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 80215ae:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80215b2:	429a      	cmp	r2, r3
 80215b4:	f000 8087 	beq.w	80216c6 <lv_slider_design+0x5a0>
 80215b8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80215bc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80215c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80215c4:	68b9      	ldr	r1, [r7, #8]
 80215c6:	f7ee fdb4 	bl	8010132 <lv_draw_rect>
 80215ca:	e07c      	b.n	80216c6 <lv_slider_design+0x5a0>

        } else {
            lv_coord_t indic_h = lv_area_get_height(&area_indic);
 80215cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80215d0:	4618      	mov	r0, r3
 80215d2:	f7ff fc32 	bl	8020e3a <lv_area_get_height>
 80215d6:	4603      	mov	r3, r0
 80215d8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80215dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80215e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80215e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215e8:	d03e      	beq.n	8021668 <lv_slider_design+0x542>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 80215ea:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80215ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80215f2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80215f6:	4611      	mov	r1, r2
 80215f8:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80215fc:	1a8a      	subs	r2, r1, r2
 80215fe:	fb02 f203 	mul.w	r2, r2, r3
 8021602:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021606:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 802160a:	1acb      	subs	r3, r1, r3
 802160c:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_y =
 8021610:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                lv_coord_t anim_end_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8021614:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8021618:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802161c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021620:	4611      	mov	r1, r2
 8021622:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021626:	1a8a      	subs	r2, r1, r2
 8021628:	fb02 f203 	mul.w	r2, r2, r3
 802162c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021630:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021634:	1acb      	subs	r3, r1, r3
 8021636:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_y =
 802163a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 802163e:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 8021642:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8021646:	1ad3      	subs	r3, r2, r3
 8021648:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802164c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8021650:	fb02 f303 	mul.w	r3, r2, r3
 8021654:	121b      	asrs	r3, r3, #8
 8021656:	b29a      	uxth	r2, r3
 8021658:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 802165c:	4413      	add	r3, r2
 802165e:	b29b      	uxth	r3, r3
 8021660:	b21b      	sxth	r3, r3
 8021662:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8021666:	e012      	b.n	802168e <lv_slider_design+0x568>
            } else
#endif
            {
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 8021668:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 802166c:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8021670:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021674:	1a8a      	subs	r2, r1, r2
 8021676:	fb02 f203 	mul.w	r2, r2, r3
 802167a:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 802167e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021682:	1acb      	subs	r3, r1, r3
 8021684:	fb92 f3f3 	sdiv	r3, r2, r3
 8021688:	b21b      	sxth	r3, r3
 802168a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 802168e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021692:	b29a      	uxth	r2, r3
 8021694:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8021698:	b29b      	uxth	r3, r3
 802169a:	1ad3      	subs	r3, r2, r3
 802169c:	b29b      	uxth	r3, r3
 802169e:	3301      	adds	r3, #1
 80216a0:	b29b      	uxth	r3, r3
 80216a2:	b21b      	sxth	r3, r3
 80216a4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 80216a8:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 80216ac:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80216b0:	429a      	cmp	r2, r3
 80216b2:	d008      	beq.n	80216c6 <lv_slider_design+0x5a0>
 80216b4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80216b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80216bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80216c0:	68b9      	ldr	r1, [r7, #8]
 80216c2:	f7ee fd36 	bl	8010132 <lv_draw_rect>
        /*Before the knob add the border if required*/
#if LV_USE_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 80216c6:	68f8      	ldr	r0, [r7, #12]
 80216c8:	f7e9 f897 	bl	800a7fa <lv_obj_is_focused>
 80216cc:	4603      	mov	r3, r0
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d013      	beq.n	80216fa <lv_slider_design+0x5d4>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80216d2:	f107 0314 	add.w	r3, r7, #20
 80216d6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80216da:	4618      	mov	r0, r3
 80216dc:	f7ea fae4 	bl	800bca8 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 80216e0:	2300      	movs	r3, #0
 80216e2:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 80216e4:	2300      	movs	r3, #0
 80216e6:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 80216e8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80216ec:	f107 0214 	add.w	r2, r7, #20
 80216f0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80216f4:	68b9      	ldr	r1, [r7, #8]
 80216f6:	f7ee fd1c 	bl	8010132 <lv_draw_rect>
        }
#endif

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	f103 0210 	add.w	r2, r3, #16
 8021700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8021704:	4611      	mov	r1, r2
 8021706:	4618      	mov	r0, r3
 8021708:	f7ff fb72 	bl	8020df0 <lv_area_copy>

        if(slider_w >= slider_h) {
 802170c:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8021710:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8021714:	429a      	cmp	r2, r3
 8021716:	f2c0 80ae 	blt.w	8021876 <lv_slider_design+0x750>
            if(ext->knob_in == 0) {
 802171a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802171e:	7e9b      	ldrb	r3, [r3, #26]
 8021720:	f003 0301 	and.w	r3, r3, #1
 8021724:	b2db      	uxtb	r3, r3
 8021726:	2b00      	cmp	r3, #0
 8021728:	d11b      	bne.n	8021762 <lv_slider_design+0x63c>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 802172a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 802172e:	b29a      	uxth	r2, r3
 8021730:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8021734:	0fd9      	lsrs	r1, r3, #31
 8021736:	440b      	add	r3, r1
 8021738:	105b      	asrs	r3, r3, #1
 802173a:	b21b      	sxth	r3, r3
 802173c:	b29b      	uxth	r3, r3
 802173e:	1ad3      	subs	r3, r2, r3
 8021740:	b29b      	uxth	r3, r3
 8021742:	b21b      	sxth	r3, r3
 8021744:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8021748:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 802174c:	b29a      	uxth	r2, r3
 802174e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8021752:	4413      	add	r3, r2
 8021754:	b29b      	uxth	r3, r3
 8021756:	3b01      	subs	r3, #1
 8021758:	b29b      	uxth	r3, r3
 802175a:	b21b      	sxth	r3, r3
 802175c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8021760:	e07e      	b.n	8021860 <lv_slider_design+0x73a>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 8021762:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021766:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802176a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802176e:	d048      	beq.n	8021802 <lv_slider_design+0x6dc>
                    lv_coord_t w = slider_w - slider_h - 1;
 8021770:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8021774:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8021778:	1ad3      	subs	r3, r2, r3
 802177a:	b29b      	uxth	r3, r3
 802177c:	3b01      	subs	r3, #1
 802177e:	b29b      	uxth	r3, r3
 8021780:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8021784:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8021788:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802178c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8021790:	4611      	mov	r1, r2
 8021792:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021796:	1a8a      	subs	r2, r1, r2
 8021798:	fb02 f203 	mul.w	r2, r2, r3
 802179c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80217a0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80217a4:	1acb      	subs	r3, r1, r3
 80217a6:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 80217aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 80217ae:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80217b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80217b6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80217ba:	4611      	mov	r1, r2
 80217bc:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80217c0:	1a8a      	subs	r2, r1, r2
 80217c2:	fb02 f203 	mul.w	r2, r2, r3
 80217c6:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80217ca:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80217ce:	1acb      	subs	r3, r1, r3
 80217d0:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 80217d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 80217d8:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80217dc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80217e0:	1ad3      	subs	r3, r2, r3
 80217e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80217e6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80217ea:	fb02 f303 	mul.w	r3, r2, r3
 80217ee:	121b      	asrs	r3, r3, #8
 80217f0:	b29a      	uxth	r2, r3
 80217f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80217f6:	4413      	add	r3, r2
 80217f8:	b29b      	uxth	r3, r3
 80217fa:	b21b      	sxth	r3, r3
 80217fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8021800:	e016      	b.n	8021830 <lv_slider_design+0x70a>
                } else
#endif
                {
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 8021802:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8021806:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 802180a:	1ad3      	subs	r3, r2, r3
 802180c:	3b01      	subs	r3, #1
 802180e:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8021812:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021816:	1a8a      	subs	r2, r1, r2
 8021818:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 802181c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021820:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021824:	1acb      	subs	r3, r1, r3
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 8021826:	fb92 f3f3 	sdiv	r3, r2, r3
 802182a:	b21b      	sxth	r3, r3
 802182c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                }

                knob_area.x1 += slider->coords.x1;
 8021830:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8021834:	b29a      	uxth	r2, r3
 8021836:	68fb      	ldr	r3, [r7, #12]
 8021838:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 802183c:	b29b      	uxth	r3, r3
 802183e:	4413      	add	r3, r2
 8021840:	b29b      	uxth	r3, r3
 8021842:	b21b      	sxth	r3, r3
 8021844:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8021848:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 802184c:	b29a      	uxth	r2, r3
 802184e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8021852:	4413      	add	r3, r2
 8021854:	b29b      	uxth	r3, r3
 8021856:	3b01      	subs	r3, #1
 8021858:	b29b      	uxth	r3, r3
 802185a:	b21b      	sxth	r3, r3
 802185c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            }

            knob_area.y1 = slider->coords.y1;
 8021860:	68fb      	ldr	r3, [r7, #12]
 8021862:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8021866:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            knob_area.y2 = slider->coords.y2;
 802186a:	68fb      	ldr	r3, [r7, #12]
 802186c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8021870:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8021874:	e0ac      	b.n	80219d0 <lv_slider_design+0x8aa>
        } else {
            if(ext->knob_in == 0) {
 8021876:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802187a:	7e9b      	ldrb	r3, [r3, #26]
 802187c:	f003 0301 	and.w	r3, r3, #1
 8021880:	b2db      	uxtb	r3, r3
 8021882:	2b00      	cmp	r3, #0
 8021884:	d11b      	bne.n	80218be <lv_slider_design+0x798>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8021886:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 802188a:	b29a      	uxth	r2, r3
 802188c:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8021890:	0fd9      	lsrs	r1, r3, #31
 8021892:	440b      	add	r3, r1
 8021894:	105b      	asrs	r3, r3, #1
 8021896:	b21b      	sxth	r3, r3
 8021898:	b29b      	uxth	r3, r3
 802189a:	1ad3      	subs	r3, r2, r3
 802189c:	b29b      	uxth	r3, r3
 802189e:	b21b      	sxth	r3, r3
 80218a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 80218a4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80218a8:	b29a      	uxth	r2, r3
 80218aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80218ae:	4413      	add	r3, r2
 80218b0:	b29b      	uxth	r3, r3
 80218b2:	3b01      	subs	r3, #1
 80218b4:	b29b      	uxth	r3, r3
 80218b6:	b21b      	sxth	r3, r3
 80218b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80218bc:	e07e      	b.n	80219bc <lv_slider_design+0x896>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80218be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80218c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80218c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218ca:	d048      	beq.n	802195e <lv_slider_design+0x838>
                    lv_coord_t h = slider_h - slider_w - 1;
 80218cc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80218d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80218d4:	1ad3      	subs	r3, r2, r3
 80218d6:	b29b      	uxth	r3, r3
 80218d8:	3b01      	subs	r3, #1
 80218da:	b29b      	uxth	r3, r3
 80218dc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 80218e0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80218e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80218e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80218ec:	4611      	mov	r1, r2
 80218ee:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80218f2:	1a8a      	subs	r2, r1, r2
 80218f4:	fb02 f203 	mul.w	r2, r2, r3
 80218f8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80218fc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021900:	1acb      	subs	r3, r1, r3
 8021902:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8021906:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 802190a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 802190e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021912:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021916:	4611      	mov	r1, r2
 8021918:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 802191c:	1a8a      	subs	r2, r1, r2
 802191e:	fb02 f203 	mul.w	r2, r2, r3
 8021922:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8021926:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 802192a:	1acb      	subs	r3, r1, r3
 802192c:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8021930:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8021934:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8021938:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 802193c:	1ad3      	subs	r3, r2, r3
 802193e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021942:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8021946:	fb02 f303 	mul.w	r3, r2, r3
 802194a:	121b      	asrs	r3, r3, #8
 802194c:	b29a      	uxth	r2, r3
 802194e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8021952:	4413      	add	r3, r2
 8021954:	b29b      	uxth	r3, r3
 8021956:	b21b      	sxth	r3, r3
 8021958:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 802195c:	e016      	b.n	802198c <lv_slider_design+0x866>
                } else
#endif
                {
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 802195e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8021962:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8021966:	1ad3      	subs	r3, r2, r3
 8021968:	3b01      	subs	r3, #1
 802196a:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 802196e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8021972:	1a8a      	subs	r2, r1, r2
 8021974:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 8021978:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 802197c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8021980:	1acb      	subs	r3, r1, r3
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 8021982:	fb92 f3f3 	sdiv	r3, r2, r3
 8021986:	b21b      	sxth	r3, r3
 8021988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                }

                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 802198c:	68fb      	ldr	r3, [r7, #12]
 802198e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8021992:	b29a      	uxth	r2, r3
 8021994:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8021998:	b29b      	uxth	r3, r3
 802199a:	1ad3      	subs	r3, r2, r3
 802199c:	b29b      	uxth	r3, r3
 802199e:	b21b      	sxth	r3, r3
 80219a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 80219a4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80219a8:	b29a      	uxth	r2, r3
 80219aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80219ae:	1ad3      	subs	r3, r2, r3
 80219b0:	b29b      	uxth	r3, r3
 80219b2:	3b01      	subs	r3, #1
 80219b4:	b29b      	uxth	r3, r3
 80219b6:	b21b      	sxth	r3, r3
 80219b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }
            knob_area.x1 = slider->coords.x1;
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80219c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            knob_area.x2 = slider->coords.x2;
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80219cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 80219d0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80219d4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80219d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80219dc:	68b9      	ldr	r1, [r7, #8]
 80219de:	f7ee fba8 	bl	8010132 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 80219e2:	2301      	movs	r3, #1
}
 80219e4:	4618      	mov	r0, r3
 80219e6:	37b4      	adds	r7, #180	; 0xb4
 80219e8:	46bd      	mov	sp, r7
 80219ea:	bd90      	pop	{r4, r7, pc}

080219ec <lv_slider_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
 80219ec:	b590      	push	{r4, r7, lr}
 80219ee:	b093      	sub	sp, #76	; 0x4c
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	60f8      	str	r0, [r7, #12]
 80219f4:	460b      	mov	r3, r1
 80219f6:	607a      	str	r2, [r7, #4]
 80219f8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 80219fa:	4bba      	ldr	r3, [pc, #744]	; (8021ce4 <lv_slider_signal+0x2f8>)
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	7af9      	ldrb	r1, [r7, #11]
 8021a00:	687a      	ldr	r2, [r7, #4]
 8021a02:	68f8      	ldr	r0, [r7, #12]
 8021a04:	4798      	blx	r3
 8021a06:	4603      	mov	r3, r0
 8021a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(res != LV_RES_OK) return res;
 8021a0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021a10:	2b01      	cmp	r3, #1
 8021a12:	d002      	beq.n	8021a1a <lv_slider_signal+0x2e>
 8021a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021a18:	e233      	b.n	8021e82 <lv_slider_signal+0x496>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8021a1a:	68f8      	ldr	r0, [r7, #12]
 8021a1c:	f7e8 fed5 	bl	800a7ca <lv_obj_get_ext_attr>
 8021a20:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 8021a22:	68f8      	ldr	r0, [r7, #12]
 8021a24:	f7e8 fde6 	bl	800a5f4 <lv_obj_get_width>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t h = lv_obj_get_height(slider);
 8021a2c:	68f8      	ldr	r0, [r7, #12]
 8021a2e:	f7e8 fdef 	bl	800a610 <lv_obj_get_height>
 8021a32:	4603      	mov	r3, r0
 8021a34:	873b      	strh	r3, [r7, #56]	; 0x38

    if(sign == LV_SIGNAL_PRESSED) {
 8021a36:	7afb      	ldrb	r3, [r7, #11]
 8021a38:	2b07      	cmp	r3, #7
 8021a3a:	d107      	bne.n	8021a4c <lv_slider_signal+0x60>
        ext->drag_value = lv_slider_get_value(slider);
 8021a3c:	68f8      	ldr	r0, [r7, #12]
 8021a3e:	f7ff fb2d 	bl	802109c <lv_slider_get_value>
 8021a42:	4603      	mov	r3, r0
 8021a44:	461a      	mov	r2, r3
 8021a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a48:	831a      	strh	r2, [r3, #24]
 8021a4a:	e218      	b.n	8021e7e <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8021a4c:	7afb      	ldrb	r3, [r7, #11]
 8021a4e:	2b08      	cmp	r3, #8
 8021a50:	f040 80b4 	bne.w	8021bbc <lv_slider_signal+0x1d0>
        lv_indev_get_point(param, &p);
 8021a54:	f107 0310 	add.w	r3, r7, #16
 8021a58:	4619      	mov	r1, r3
 8021a5a:	6878      	ldr	r0, [r7, #4]
 8021a5c:	f7e7 f85c 	bl	8008b18 <lv_indev_get_point>
        int16_t tmp = 0;
 8021a60:	2300      	movs	r3, #0
 8021a62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(w > h) {
 8021a66:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8021a6a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8021a6e:	429a      	cmp	r2, r3
 8021a70:	dd37      	ble.n	8021ae2 <lv_slider_signal+0xf6>
            lv_coord_t knob_w = h;
 8021a72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8021a74:	82fb      	strh	r3, [r7, #22]
            p.x -=
 8021a76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021a7a:	b29a      	uxth	r2, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 8021a7c:	68fb      	ldr	r3, [r7, #12]
 8021a7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8021a82:	b299      	uxth	r1, r3
 8021a84:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8021a88:	0fd8      	lsrs	r0, r3, #31
 8021a8a:	4403      	add	r3, r0
 8021a8c:	105b      	asrs	r3, r3, #1
 8021a8e:	b21b      	sxth	r3, r3
 8021a90:	b29b      	uxth	r3, r3
 8021a92:	440b      	add	r3, r1
 8021a94:	b29b      	uxth	r3, r3
            p.x -=
 8021a96:	1ad3      	subs	r3, r2, r3
 8021a98:	b29b      	uxth	r3, r3
 8021a9a:	b21b      	sxth	r3, r3
 8021a9c:	823b      	strh	r3, [r7, #16]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 8021a9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021aa2:	461a      	mov	r2, r3
 8021aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021aa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021aaa:	4619      	mov	r1, r3
 8021aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021ab2:	1acb      	subs	r3, r1, r3
 8021ab4:	3301      	adds	r3, #1
 8021ab6:	fb03 f202 	mul.w	r2, r3, r2
 8021aba:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8021abe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021ac2:	1acb      	subs	r3, r1, r3
 8021ac4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ac8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp += ext->bar.min_value;
 8021acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021ace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021ad2:	b29a      	uxth	r2, r3
 8021ad4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021ad8:	4413      	add	r3, r2
 8021ada:	b29b      	uxth	r3, r3
 8021adc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8021ae0:	e036      	b.n	8021b50 <lv_slider_signal+0x164>
        } else {
            lv_coord_t knob_h = w;
 8021ae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021ae4:	833b      	strh	r3, [r7, #24]
            p.y -=
 8021ae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021aea:	b29a      	uxth	r2, r3
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 8021aec:	68fb      	ldr	r3, [r7, #12]
 8021aee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8021af2:	b299      	uxth	r1, r3
 8021af4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8021af8:	0fd8      	lsrs	r0, r3, #31
 8021afa:	4403      	add	r3, r0
 8021afc:	105b      	asrs	r3, r3, #1
 8021afe:	b21b      	sxth	r3, r3
 8021b00:	b29b      	uxth	r3, r3
 8021b02:	440b      	add	r3, r1
 8021b04:	b29b      	uxth	r3, r3
            p.y -=
 8021b06:	1ad3      	subs	r3, r2, r3
 8021b08:	b29b      	uxth	r3, r3
 8021b0a:	b21b      	sxth	r3, r3
 8021b0c:	827b      	strh	r3, [r7, #18]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8021b0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021b12:	461a      	mov	r2, r3
 8021b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021b1a:	4619      	mov	r1, r3
 8021b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021b22:	1acb      	subs	r3, r1, r3
 8021b24:	3301      	adds	r3, #1
 8021b26:	fb03 f202 	mul.w	r2, r3, r2
 8021b2a:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8021b2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8021b32:	1acb      	subs	r3, r1, r3
 8021b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 8021b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021b42:	b29a      	uxth	r2, r3
 8021b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021b48:	1ad3      	subs	r3, r2, r3
 8021b4a:	b29b      	uxth	r3, r3
 8021b4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        if(tmp < ext->bar.min_value)
 8021b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021b56:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8021b5a:	429a      	cmp	r2, r3
 8021b5c:	da04      	bge.n	8021b68 <lv_slider_signal+0x17c>
            tmp = ext->bar.min_value;
 8021b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b60:	885b      	ldrh	r3, [r3, #2]
 8021b62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8021b66:	e00a      	b.n	8021b7e <lv_slider_signal+0x192>
        else if(tmp > ext->bar.max_value)
 8021b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021b6e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8021b72:	429a      	cmp	r2, r3
 8021b74:	dd03      	ble.n	8021b7e <lv_slider_signal+0x192>
            tmp = ext->bar.max_value;
 8021b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b78:	889b      	ldrh	r3, [r3, #4]
 8021b7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if(tmp != ext->drag_value) {
 8021b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b80:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021b84:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	f000 8178 	beq.w	8021e7e <lv_slider_signal+0x492>
            ext->drag_value = tmp;
 8021b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021b90:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021b94:	831a      	strh	r2, [r3, #24]
            lv_obj_invalidate(slider);
 8021b96:	68f8      	ldr	r0, [r7, #12]
 8021b98:	f7e7 fbeb 	bl	8009372 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	210e      	movs	r1, #14
 8021ba0:	68f8      	ldr	r0, [r7, #12]
 8021ba2:	f7e8 fb98 	bl	800a2d6 <lv_event_send>
 8021ba6:	4603      	mov	r3, r0
 8021ba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 8021bac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021bb0:	2b01      	cmp	r3, #1
 8021bb2:	f000 8164 	beq.w	8021e7e <lv_slider_signal+0x492>
 8021bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021bba:	e162      	b.n	8021e82 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8021bbc:	7afb      	ldrb	r3, [r7, #11]
 8021bbe:	2b0a      	cmp	r3, #10
 8021bc0:	d002      	beq.n	8021bc8 <lv_slider_signal+0x1dc>
 8021bc2:	7afb      	ldrb	r3, [r7, #11]
 8021bc4:	2b09      	cmp	r3, #9
 8021bc6:	d12f      	bne.n	8021c28 <lv_slider_signal+0x23c>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 8021bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021bca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021bce:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8021bd2:	d007      	beq.n	8021be4 <lv_slider_signal+0x1f8>
 8021bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021bd6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021bda:	2200      	movs	r2, #0
 8021bdc:	4619      	mov	r1, r3
 8021bde:	68f8      	ldr	r0, [r7, #12]
 8021be0:	f7ff f942 	bl	8020e68 <lv_slider_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8021be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021be6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8021bea:	831a      	strh	r2, [r3, #24]

#if LV_USE_GROUP
        /*Leave edit mode if released. (No need to wait for LONG_PRESS) */
        lv_group_t * g             = lv_obj_get_group(slider);
 8021bec:	68f8      	ldr	r0, [r7, #12]
 8021bee:	f7e8 fdf8 	bl	800a7e2 <lv_obj_get_group>
 8021bf2:	61f8      	str	r0, [r7, #28]
        bool editing               = lv_group_get_editing(g);
 8021bf4:	69f8      	ldr	r0, [r7, #28]
 8021bf6:	f7e6 fdee 	bl	80087d6 <lv_group_get_editing>
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	76fb      	strb	r3, [r7, #27]
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8021bfe:	f7e6 ff2f 	bl	8008a60 <lv_indev_get_act>
 8021c02:	4603      	mov	r3, r0
 8021c04:	4618      	mov	r0, r3
 8021c06:	f7e6 ff37 	bl	8008a78 <lv_indev_get_type>
 8021c0a:	4603      	mov	r3, r0
 8021c0c:	76bb      	strb	r3, [r7, #26]
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8021c0e:	7ebb      	ldrb	r3, [r7, #26]
 8021c10:	2b04      	cmp	r3, #4
 8021c12:	f040 8133 	bne.w	8021e7c <lv_slider_signal+0x490>
            if(editing) lv_group_set_editing(g, false);
 8021c16:	7efb      	ldrb	r3, [r7, #27]
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	f000 812f 	beq.w	8021e7c <lv_slider_signal+0x490>
 8021c1e:	2100      	movs	r1, #0
 8021c20:	69f8      	ldr	r0, [r7, #28]
 8021c22:	f7e6 fd4f 	bl	80086c4 <lv_group_set_editing>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8021c26:	e129      	b.n	8021e7c <lv_slider_signal+0x490>
        }
#endif

    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8021c28:	7afb      	ldrb	r3, [r7, #11]
 8021c2a:	2b02      	cmp	r3, #2
 8021c2c:	d11d      	bne.n	8021c6a <lv_slider_signal+0x27e>
        /* The knob size depends on slider size.
         * During the drawing method the ext. size is used by the knob so refresh the ext. size.*/
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8021c2e:	68f8      	ldr	r0, [r7, #12]
 8021c30:	f7e8 fce0 	bl	800a5f4 <lv_obj_get_width>
 8021c34:	4603      	mov	r3, r0
 8021c36:	461c      	mov	r4, r3
 8021c38:	6878      	ldr	r0, [r7, #4]
 8021c3a:	f7ff f8e7 	bl	8020e0c <lv_area_get_width>
 8021c3e:	4603      	mov	r3, r0
 8021c40:	429c      	cmp	r4, r3
 8021c42:	d10b      	bne.n	8021c5c <lv_slider_signal+0x270>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 8021c44:	68f8      	ldr	r0, [r7, #12]
 8021c46:	f7e8 fce3 	bl	800a610 <lv_obj_get_height>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	461c      	mov	r4, r3
 8021c4e:	6878      	ldr	r0, [r7, #4]
 8021c50:	f7ff f8f3 	bl	8020e3a <lv_area_get_height>
 8021c54:	4603      	mov	r3, r0
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8021c56:	429c      	cmp	r4, r3
 8021c58:	f000 8111 	beq.w	8021e7e <lv_slider_signal+0x492>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8021c5c:	68fb      	ldr	r3, [r7, #12]
 8021c5e:	69db      	ldr	r3, [r3, #28]
 8021c60:	2200      	movs	r2, #0
 8021c62:	2105      	movs	r1, #5
 8021c64:	68f8      	ldr	r0, [r7, #12]
 8021c66:	4798      	blx	r3
 8021c68:	e109      	b.n	8021e7e <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8021c6a:	7afb      	ldrb	r3, [r7, #11]
 8021c6c:	2b05      	cmp	r3, #5
 8021c6e:	f040 8087 	bne.w	8021d80 <lv_slider_signal+0x394>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8021c72:	2100      	movs	r1, #0
 8021c74:	68f8      	ldr	r0, [r7, #12]
 8021c76:	f7ff fa2b 	bl	80210d0 <lv_slider_get_style>
 8021c7a:	62b8      	str	r0, [r7, #40]	; 0x28
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 8021c7c:	2102      	movs	r1, #2
 8021c7e:	68f8      	ldr	r0, [r7, #12]
 8021c80:	f7ff fa26 	bl	80210d0 <lv_slider_get_style>
 8021c84:	6278      	str	r0, [r7, #36]	; 0x24

        lv_coord_t shadow_w = knob_style->body.shadow.width;
 8021c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c88:	8a5b      	ldrh	r3, [r3, #18]
 8021c8a:	847b      	strh	r3, [r7, #34]	; 0x22
        if(ext->knob_in == 0) {
 8021c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021c8e:	7e9b      	ldrb	r3, [r3, #26]
 8021c90:	f003 0301 	and.w	r3, r3, #1
 8021c94:	b2db      	uxtb	r3, r3
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d126      	bne.n	8021ce8 <lv_slider_signal+0x2fc>
            /* The smaller size is the knob diameter*/
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 8021c9a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8021c9e:	0fda      	lsrs	r2, r3, #31
 8021ca0:	4413      	add	r3, r2
 8021ca2:	105b      	asrs	r3, r3, #1
 8021ca4:	b21b      	sxth	r3, r3
 8021ca6:	1c5a      	adds	r2, r3, #1
 8021ca8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021cac:	441a      	add	r2, r3
 8021cae:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8021cb2:	0fd9      	lsrs	r1, r3, #31
 8021cb4:	440b      	add	r3, r1
 8021cb6:	105b      	asrs	r3, r3, #1
 8021cb8:	b21b      	sxth	r3, r3
 8021cba:	1c59      	adds	r1, r3, #1
 8021cbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021cc0:	440b      	add	r3, r1
 8021cc2:	4293      	cmp	r3, r2
 8021cc4:	bfa8      	it	ge
 8021cc6:	4613      	movge	r3, r2
 8021cc8:	843b      	strh	r3, [r7, #32]
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8021cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021cd4:	429a      	cmp	r2, r3
 8021cd6:	f340 80d2 	ble.w	8021e7e <lv_slider_signal+0x492>
 8021cda:	68fb      	ldr	r3, [r7, #12]
 8021cdc:	8c3a      	ldrh	r2, [r7, #32]
 8021cde:	869a      	strh	r2, [r3, #52]	; 0x34
 8021ce0:	e0cd      	b.n	8021e7e <lv_slider_signal+0x492>
 8021ce2:	bf00      	nop
 8021ce4:	200177f0 	.word	0x200177f0
        } else {
            lv_coord_t pad = 0;
 8021ce8:	2300      	movs	r3, #0
 8021cea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.top);
 8021cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cf0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8021cf4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021cf8:	4293      	cmp	r3, r2
 8021cfa:	bfa8      	it	ge
 8021cfc:	4613      	movge	r3, r2
 8021cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 8021d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021d08:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021d0c:	4293      	cmp	r3, r2
 8021d0e:	bfa8      	it	ge
 8021d10:	4613      	movge	r3, r2
 8021d12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 8021d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d18:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8021d1c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021d20:	4293      	cmp	r3, r2
 8021d22:	bfa8      	it	ge
 8021d24:	4613      	movge	r3, r2
 8021d26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 8021d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d2c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8021d30:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021d34:	4293      	cmp	r3, r2
 8021d36:	bfa8      	it	ge
 8021d38:	4613      	movge	r3, r2
 8021d3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(pad < 0) pad = -pad;
 8021d3e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	da05      	bge.n	8021d52 <lv_slider_signal+0x366>
 8021d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021d4a:	425b      	negs	r3, r3
 8021d4c:	b29b      	uxth	r3, r3
 8021d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 8021d52:	68fb      	ldr	r3, [r7, #12]
 8021d54:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8021d58:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021d5c:	429a      	cmp	r2, r3
 8021d5e:	dd03      	ble.n	8021d68 <lv_slider_signal+0x37c>
 8021d60:	68fb      	ldr	r3, [r7, #12]
 8021d62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021d66:	869a      	strh	r2, [r3, #52]	; 0x34

            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8021d6e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8021d72:	429a      	cmp	r2, r3
 8021d74:	f340 8083 	ble.w	8021e7e <lv_slider_signal+0x492>
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021d7c:	869a      	strh	r2, [r3, #52]	; 0x34
 8021d7e:	e07e      	b.n	8021e7e <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 8021d80:	7afb      	ldrb	r3, [r7, #11]
 8021d82:	2b11      	cmp	r3, #17
 8021d84:	d14f      	bne.n	8021e26 <lv_slider_signal+0x43a>
        char c = *((char *)param);
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	781b      	ldrb	r3, [r3, #0]
 8021d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8021d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021d90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8021d94:	831a      	strh	r2, [r3, #24]

        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8021d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021d9a:	2b13      	cmp	r3, #19
 8021d9c:	d003      	beq.n	8021da6 <lv_slider_signal+0x3ba>
 8021d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021da2:	2b11      	cmp	r3, #17
 8021da4:	d11b      	bne.n	8021dde <lv_slider_signal+0x3f2>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 8021da6:	68f8      	ldr	r0, [r7, #12]
 8021da8:	f7ff f978 	bl	802109c <lv_slider_get_value>
 8021dac:	4603      	mov	r3, r0
 8021dae:	b29b      	uxth	r3, r3
 8021db0:	3301      	adds	r3, #1
 8021db2:	b29b      	uxth	r3, r3
 8021db4:	b21b      	sxth	r3, r3
 8021db6:	2201      	movs	r2, #1
 8021db8:	4619      	mov	r1, r3
 8021dba:	68f8      	ldr	r0, [r7, #12]
 8021dbc:	f7ff f854 	bl	8020e68 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	210e      	movs	r1, #14
 8021dc4:	68f8      	ldr	r0, [r7, #12]
 8021dc6:	f7e8 fa86 	bl	800a2d6 <lv_event_send>
 8021dca:	4603      	mov	r3, r0
 8021dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 8021dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021dd4:	2b01      	cmp	r3, #1
 8021dd6:	d052      	beq.n	8021e7e <lv_slider_signal+0x492>
 8021dd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021ddc:	e051      	b.n	8021e82 <lv_slider_signal+0x496>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8021dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021de2:	2b14      	cmp	r3, #20
 8021de4:	d003      	beq.n	8021dee <lv_slider_signal+0x402>
 8021de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021dea:	2b12      	cmp	r3, #18
 8021dec:	d147      	bne.n	8021e7e <lv_slider_signal+0x492>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 8021dee:	68f8      	ldr	r0, [r7, #12]
 8021df0:	f7ff f954 	bl	802109c <lv_slider_get_value>
 8021df4:	4603      	mov	r3, r0
 8021df6:	b29b      	uxth	r3, r3
 8021df8:	3b01      	subs	r3, #1
 8021dfa:	b29b      	uxth	r3, r3
 8021dfc:	b21b      	sxth	r3, r3
 8021dfe:	2201      	movs	r2, #1
 8021e00:	4619      	mov	r1, r3
 8021e02:	68f8      	ldr	r0, [r7, #12]
 8021e04:	f7ff f830 	bl	8020e68 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8021e08:	2200      	movs	r2, #0
 8021e0a:	210e      	movs	r1, #14
 8021e0c:	68f8      	ldr	r0, [r7, #12]
 8021e0e:	f7e8 fa62 	bl	800a2d6 <lv_event_send>
 8021e12:	4603      	mov	r3, r0
 8021e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 8021e18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021e1c:	2b01      	cmp	r3, #1
 8021e1e:	d02e      	beq.n	8021e7e <lv_slider_signal+0x492>
 8021e20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021e24:	e02d      	b.n	8021e82 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8021e26:	7afb      	ldrb	r3, [r7, #11]
 8021e28:	2b12      	cmp	r3, #18
 8021e2a:	d105      	bne.n	8021e38 <lv_slider_signal+0x44c>
        bool * editable = (bool *)param;
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	633b      	str	r3, [r7, #48]	; 0x30
        *editable       = true;
 8021e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e32:	2201      	movs	r2, #1
 8021e34:	701a      	strb	r2, [r3, #0]
 8021e36:	e022      	b.n	8021e7e <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8021e38:	7afb      	ldrb	r3, [r7, #11]
 8021e3a:	2b06      	cmp	r3, #6
 8021e3c:	d11f      	bne.n	8021e7e <lv_slider_signal+0x492>
        lv_obj_type_t * buf = param;
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8021e42:	2300      	movs	r3, #0
 8021e44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8021e48:	e00b      	b.n	8021e62 <lv_slider_signal+0x476>
            if(buf->type[i] == NULL) break;
 8021e4a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8021e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d009      	beq.n	8021e6c <lv_slider_signal+0x480>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8021e58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8021e62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8021e66:	2b06      	cmp	r3, #6
 8021e68:	d9ef      	bls.n	8021e4a <lv_slider_signal+0x45e>
 8021e6a:	e000      	b.n	8021e6e <lv_slider_signal+0x482>
            if(buf->type[i] == NULL) break;
 8021e6c:	bf00      	nop
        }
        buf->type[i] = "lv_slider";
 8021e6e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8021e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e74:	4905      	ldr	r1, [pc, #20]	; (8021e8c <lv_slider_signal+0x4a0>)
 8021e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8021e7a:	e000      	b.n	8021e7e <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8021e7c:	bf00      	nop
    }

    return res;
 8021e7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8021e82:	4618      	mov	r0, r3
 8021e84:	374c      	adds	r7, #76	; 0x4c
 8021e86:	46bd      	mov	sp, r7
 8021e88:	bd90      	pop	{r4, r7, pc}
 8021e8a:	bf00      	nop
 8021e8c:	0802d520 	.word	0x0802d520

08021e90 <lv_slider_set_value>:
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
 8021e98:	460b      	mov	r3, r1
 8021e9a:	807b      	strh	r3, [r7, #2]
 8021e9c:	4613      	mov	r3, r2
 8021e9e:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 8021ea0:	787a      	ldrb	r2, [r7, #1]
 8021ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021ea6:	4619      	mov	r1, r3
 8021ea8:	6878      	ldr	r0, [r7, #4]
 8021eaa:	f7f6 fb45 	bl	8018538 <lv_bar_set_value>
}
 8021eae:	bf00      	nop
 8021eb0:	3708      	adds	r7, #8
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	bd80      	pop	{r7, pc}

08021eb6 <lv_slider_set_range>:
{
 8021eb6:	b580      	push	{r7, lr}
 8021eb8:	b082      	sub	sp, #8
 8021eba:	af00      	add	r7, sp, #0
 8021ebc:	6078      	str	r0, [r7, #4]
 8021ebe:	460b      	mov	r3, r1
 8021ec0:	807b      	strh	r3, [r7, #2]
 8021ec2:	4613      	mov	r3, r2
 8021ec4:	803b      	strh	r3, [r7, #0]
    lv_bar_set_range(slider, min, max);
 8021ec6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8021eca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021ece:	4619      	mov	r1, r3
 8021ed0:	6878      	ldr	r0, [r7, #4]
 8021ed2:	f7f6 fbb5 	bl	8018640 <lv_bar_set_range>
}
 8021ed6:	bf00      	nop
 8021ed8:	3708      	adds	r7, #8
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bd80      	pop	{r7, pc}

08021ede <lv_sw_get_state>:
 * Get the state of a switch
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_sw_get_state(const lv_obj_t * sw)
{
 8021ede:	b580      	push	{r7, lr}
 8021ee0:	b082      	sub	sp, #8
 8021ee2:	af00      	add	r7, sp, #0
 8021ee4:	6078      	str	r0, [r7, #4]
    return lv_bar_get_value(sw) < LV_SW_MAX_VALUE / 2 ? false : true;
 8021ee6:	6878      	ldr	r0, [r7, #4]
 8021ee8:	f7f6 fc17 	bl	801871a <lv_bar_get_value>
 8021eec:	4603      	mov	r3, r0
 8021eee:	2b31      	cmp	r3, #49	; 0x31
 8021ef0:	bfcc      	ite	gt
 8021ef2:	2301      	movgt	r3, #1
 8021ef4:	2300      	movle	r3, #0
 8021ef6:	b2db      	uxtb	r3, r3
}
 8021ef8:	4618      	mov	r0, r3
 8021efa:	3708      	adds	r7, #8
 8021efc:	46bd      	mov	sp, r7
 8021efe:	bd80      	pop	{r7, pc}

08021f00 <lv_sw_create>:
 * @param par pointer to an object, it will be the parent of the new switch
 * @param copy pointer to a switch object, if not NULL then the new object will be copied from it
 * @return pointer to the created switch
 */
lv_obj_t * lv_sw_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8021f00:	b580      	push	{r7, lr}
 8021f02:	b086      	sub	sp, #24
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
 8021f08:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("switch create started");

    /*Create the ancestor of switch*/
    lv_obj_t * new_sw = lv_slider_create(par, copy);
 8021f0a:	6839      	ldr	r1, [r7, #0]
 8021f0c:	6878      	ldr	r0, [r7, #4]
 8021f0e:	f7fe ffd7 	bl	8020ec0 <lv_slider_create>
 8021f12:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_sw);
 8021f14:	697b      	ldr	r3, [r7, #20]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d100      	bne.n	8021f1c <lv_sw_create+0x1c>
 8021f1a:	e7fe      	b.n	8021f1a <lv_sw_create+0x1a>
    if(new_sw == NULL) return NULL;
 8021f1c:	697b      	ldr	r3, [r7, #20]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d101      	bne.n	8021f26 <lv_sw_create+0x26>
 8021f22:	2300      	movs	r3, #0
 8021f24:	e08b      	b.n	802203e <lv_sw_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_sw);
 8021f26:	4b48      	ldr	r3, [pc, #288]	; (8022048 <lv_sw_create+0x148>)
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d105      	bne.n	8021f3a <lv_sw_create+0x3a>
 8021f2e:	6978      	ldr	r0, [r7, #20]
 8021f30:	f7e8 fc33 	bl	800a79a <lv_obj_get_signal_cb>
 8021f34:	4602      	mov	r2, r0
 8021f36:	4b44      	ldr	r3, [pc, #272]	; (8022048 <lv_sw_create+0x148>)
 8021f38:	601a      	str	r2, [r3, #0]

    /*Allocate the switch type specific extended data*/
    lv_sw_ext_t * ext = lv_obj_allocate_ext_attr(new_sw, sizeof(lv_sw_ext_t));
 8021f3a:	212c      	movs	r1, #44	; 0x2c
 8021f3c:	6978      	ldr	r0, [r7, #20]
 8021f3e:	f7e8 fa77 	bl	800a430 <lv_obj_allocate_ext_attr>
 8021f42:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8021f44:	693b      	ldr	r3, [r7, #16]
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d100      	bne.n	8021f4c <lv_sw_create+0x4c>
 8021f4a:	e7fe      	b.n	8021f4a <lv_sw_create+0x4a>
    if(ext == NULL) return NULL;
 8021f4c:	693b      	ldr	r3, [r7, #16]
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d101      	bne.n	8021f56 <lv_sw_create+0x56>
 8021f52:	2300      	movs	r3, #0
 8021f54:	e073      	b.n	802203e <lv_sw_create+0x13e>

    /*Initialize the allocated 'ext' */
    ext->changed = 0;
 8021f56:	693a      	ldr	r2, [r7, #16]
 8021f58:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8021f5c:	f36f 0300 	bfc	r3, #0, #1
 8021f60:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
#if LV_USE_ANIMATION
    ext->anim_time = 0;
 8021f64:	693b      	ldr	r3, [r7, #16]
 8021f66:	2200      	movs	r2, #0
 8021f68:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    ext->style_knob_off = ext->slider.style_knob;
 8021f6a:	693b      	ldr	r3, [r7, #16]
 8021f6c:	695a      	ldr	r2, [r3, #20]
 8021f6e:	693b      	ldr	r3, [r7, #16]
 8021f70:	61da      	str	r2, [r3, #28]
    ext->style_knob_on  = ext->slider.style_knob;
 8021f72:	693b      	ldr	r3, [r7, #16]
 8021f74:	695a      	ldr	r2, [r3, #20]
 8021f76:	693b      	ldr	r3, [r7, #16]
 8021f78:	621a      	str	r2, [r3, #32]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_sw, lv_sw_signal);
 8021f7a:	4934      	ldr	r1, [pc, #208]	; (802204c <lv_sw_create+0x14c>)
 8021f7c:	6978      	ldr	r0, [r7, #20]
 8021f7e:	f7e8 fa3b 	bl	800a3f8 <lv_obj_set_signal_cb>

    /*Init the new switch switch*/
    if(copy == NULL) {
 8021f82:	683b      	ldr	r3, [r7, #0]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d131      	bne.n	8021fec <lv_sw_create+0xec>
        lv_obj_set_size(new_sw, 2 * LV_DPI / 3, LV_DPI / 3);
 8021f88:	2221      	movs	r2, #33	; 0x21
 8021f8a:	2142      	movs	r1, #66	; 0x42
 8021f8c:	6978      	ldr	r0, [r7, #20]
 8021f8e:	f7e7 fba4 	bl	80096da <lv_obj_set_size>
        lv_slider_set_knob_in(new_sw, true);
 8021f92:	2101      	movs	r1, #1
 8021f94:	6978      	ldr	r0, [r7, #20]
 8021f96:	f7ff f82f 	bl	8020ff8 <lv_slider_set_knob_in>
        lv_slider_set_range(new_sw, 0, LV_SW_MAX_VALUE);
 8021f9a:	2264      	movs	r2, #100	; 0x64
 8021f9c:	2100      	movs	r1, #0
 8021f9e:	6978      	ldr	r0, [r7, #20]
 8021fa0:	f7ff ff89 	bl	8021eb6 <lv_slider_set_range>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8021fa4:	f000 fa94 	bl	80224d0 <lv_theme_get_current>
 8021fa8:	60b8      	str	r0, [r7, #8]
        if(th) {
 8021faa:	68bb      	ldr	r3, [r7, #8]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d045      	beq.n	802203c <lv_sw_create+0x13c>
            lv_sw_set_style(new_sw, LV_SW_STYLE_BG, th->style.sw.bg);
 8021fb0:	68bb      	ldr	r3, [r7, #8]
 8021fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021fb4:	461a      	mov	r2, r3
 8021fb6:	2100      	movs	r1, #0
 8021fb8:	6978      	ldr	r0, [r7, #20]
 8021fba:	f000 f87f 	bl	80220bc <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_INDIC, th->style.sw.indic);
 8021fbe:	68bb      	ldr	r3, [r7, #8]
 8021fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021fc2:	461a      	mov	r2, r3
 8021fc4:	2101      	movs	r1, #1
 8021fc6:	6978      	ldr	r0, [r7, #20]
 8021fc8:	f000 f878 	bl	80220bc <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_OFF, th->style.sw.knob_off);
 8021fcc:	68bb      	ldr	r3, [r7, #8]
 8021fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8021fd0:	461a      	mov	r2, r3
 8021fd2:	2102      	movs	r1, #2
 8021fd4:	6978      	ldr	r0, [r7, #20]
 8021fd6:	f000 f871 	bl	80220bc <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_ON, th->style.sw.knob_on);
 8021fda:	68bb      	ldr	r3, [r7, #8]
 8021fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021fe0:	461a      	mov	r2, r3
 8021fe2:	2103      	movs	r1, #3
 8021fe4:	6978      	ldr	r0, [r7, #20]
 8021fe6:	f000 f869 	bl	80220bc <lv_sw_set_style>
 8021fea:	e027      	b.n	802203c <lv_sw_create+0x13c>
        }

    }
    /*Copy an existing switch*/
    else {
        lv_sw_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8021fec:	6838      	ldr	r0, [r7, #0]
 8021fee:	f7e8 fbec 	bl	800a7ca <lv_obj_get_ext_attr>
 8021ff2:	60f8      	str	r0, [r7, #12]
        ext->style_knob_off    = copy_ext->style_knob_off;
 8021ff4:	68fb      	ldr	r3, [r7, #12]
 8021ff6:	69da      	ldr	r2, [r3, #28]
 8021ff8:	693b      	ldr	r3, [r7, #16]
 8021ffa:	61da      	str	r2, [r3, #28]
        ext->style_knob_on     = copy_ext->style_knob_on;
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	6a1a      	ldr	r2, [r3, #32]
 8022000:	693b      	ldr	r3, [r7, #16]
 8022002:	621a      	str	r2, [r3, #32]
#if LV_USE_ANIMATION
        ext->anim_time = copy_ext->anim_time;
 8022004:	68fb      	ldr	r3, [r7, #12]
 8022006:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022008:	693b      	ldr	r3, [r7, #16]
 802200a:	851a      	strh	r2, [r3, #40]	; 0x28
#endif

        if(lv_sw_get_state(new_sw))
 802200c:	6978      	ldr	r0, [r7, #20]
 802200e:	f7ff ff66 	bl	8021ede <lv_sw_get_state>
 8022012:	4603      	mov	r3, r0
 8022014:	2b00      	cmp	r3, #0
 8022016:	d007      	beq.n	8022028 <lv_sw_create+0x128>
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 8022018:	693b      	ldr	r3, [r7, #16]
 802201a:	6a1b      	ldr	r3, [r3, #32]
 802201c:	461a      	mov	r2, r3
 802201e:	2102      	movs	r1, #2
 8022020:	6978      	ldr	r0, [r7, #20]
 8022022:	f7ff f811 	bl	8021048 <lv_slider_set_style>
 8022026:	e006      	b.n	8022036 <lv_sw_create+0x136>
        else
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 8022028:	693b      	ldr	r3, [r7, #16]
 802202a:	69db      	ldr	r3, [r3, #28]
 802202c:	461a      	mov	r2, r3
 802202e:	2102      	movs	r1, #2
 8022030:	6978      	ldr	r0, [r7, #20]
 8022032:	f7ff f809 	bl	8021048 <lv_slider_set_style>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_sw);
 8022036:	6978      	ldr	r0, [r7, #20]
 8022038:	f7e8 f8a9 	bl	800a18e <lv_obj_refresh_style>
    }

    LV_LOG_INFO("switch created");

    return new_sw;
 802203c:	697b      	ldr	r3, [r7, #20]
}
 802203e:	4618      	mov	r0, r3
 8022040:	3718      	adds	r7, #24
 8022042:	46bd      	mov	sp, r7
 8022044:	bd80      	pop	{r7, pc}
 8022046:	bf00      	nop
 8022048:	200177f4 	.word	0x200177f4
 802204c:	08022159 	.word	0x08022159

08022050 <lv_sw_on>:
 * Turn ON the switch
 * @param sw pointer to a switch objec
 * @param anim LV_ANOM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_on(lv_obj_t * sw, lv_anim_enable_t anim)
{
 8022050:	b580      	push	{r7, lr}
 8022052:	b084      	sub	sp, #16
 8022054:	af00      	add	r7, sp, #0
 8022056:	6078      	str	r0, [r7, #4]
 8022058:	460b      	mov	r3, r1
 802205a:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 802205c:	6878      	ldr	r0, [r7, #4]
 802205e:	f7e8 fbb4 	bl	800a7ca <lv_obj_get_ext_attr>
 8022062:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, LV_SW_MAX_VALUE, anim);
 8022064:	78fb      	ldrb	r3, [r7, #3]
 8022066:	461a      	mov	r2, r3
 8022068:	2164      	movs	r1, #100	; 0x64
 802206a:	6878      	ldr	r0, [r7, #4]
 802206c:	f7ff ff10 	bl	8021e90 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	6a1b      	ldr	r3, [r3, #32]
 8022074:	461a      	mov	r2, r3
 8022076:	2102      	movs	r1, #2
 8022078:	6878      	ldr	r0, [r7, #4]
 802207a:	f7fe ffe5 	bl	8021048 <lv_slider_set_style>
}
 802207e:	bf00      	nop
 8022080:	3710      	adds	r7, #16
 8022082:	46bd      	mov	sp, r7
 8022084:	bd80      	pop	{r7, pc}

08022086 <lv_sw_off>:
 * Turn OFF the switch
 * @param sw pointer to a switch object
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_off(lv_obj_t * sw, lv_anim_enable_t anim)
{
 8022086:	b580      	push	{r7, lr}
 8022088:	b084      	sub	sp, #16
 802208a:	af00      	add	r7, sp, #0
 802208c:	6078      	str	r0, [r7, #4]
 802208e:	460b      	mov	r3, r1
 8022090:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 8022092:	6878      	ldr	r0, [r7, #4]
 8022094:	f7e8 fb99 	bl	800a7ca <lv_obj_get_ext_attr>
 8022098:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, 0, anim);
 802209a:	78fb      	ldrb	r3, [r7, #3]
 802209c:	461a      	mov	r2, r3
 802209e:	2100      	movs	r1, #0
 80220a0:	6878      	ldr	r0, [r7, #4]
 80220a2:	f7ff fef5 	bl	8021e90 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	69db      	ldr	r3, [r3, #28]
 80220aa:	461a      	mov	r2, r3
 80220ac:	2102      	movs	r1, #2
 80220ae:	6878      	ldr	r0, [r7, #4]
 80220b0:	f7fe ffca 	bl	8021048 <lv_slider_set_style>
}
 80220b4:	bf00      	nop
 80220b6:	3710      	adds	r7, #16
 80220b8:	46bd      	mov	sp, r7
 80220ba:	bd80      	pop	{r7, pc}

080220bc <lv_sw_set_style>:
 * @param sw pointer to a switch object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_sw_set_style(lv_obj_t * sw, lv_sw_style_t type, const lv_style_t * style)
{
 80220bc:	b580      	push	{r7, lr}
 80220be:	b086      	sub	sp, #24
 80220c0:	af00      	add	r7, sp, #0
 80220c2:	60f8      	str	r0, [r7, #12]
 80220c4:	460b      	mov	r3, r1
 80220c6:	607a      	str	r2, [r7, #4]
 80220c8:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 80220ca:	68f8      	ldr	r0, [r7, #12]
 80220cc:	f7e8 fb7d 	bl	800a7ca <lv_obj_get_ext_attr>
 80220d0:	6178      	str	r0, [r7, #20]

    switch(type) {
 80220d2:	7afb      	ldrb	r3, [r7, #11]
 80220d4:	2b03      	cmp	r3, #3
 80220d6:	d83b      	bhi.n	8022150 <lv_sw_set_style+0x94>
 80220d8:	a201      	add	r2, pc, #4	; (adr r2, 80220e0 <lv_sw_set_style+0x24>)
 80220da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80220de:	bf00      	nop
 80220e0:	080220f1 	.word	0x080220f1
 80220e4:	080220fd 	.word	0x080220fd
 80220e8:	08022109 	.word	0x08022109
 80220ec:	0802212d 	.word	0x0802212d
        case LV_SLIDER_STYLE_BG: lv_slider_set_style(sw, LV_SLIDER_STYLE_BG, style); break;
 80220f0:	687a      	ldr	r2, [r7, #4]
 80220f2:	2100      	movs	r1, #0
 80220f4:	68f8      	ldr	r0, [r7, #12]
 80220f6:	f7fe ffa7 	bl	8021048 <lv_slider_set_style>
 80220fa:	e029      	b.n	8022150 <lv_sw_set_style+0x94>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(sw, LV_SLIDER_STYLE_INDIC, style); break;
 80220fc:	687a      	ldr	r2, [r7, #4]
 80220fe:	2101      	movs	r1, #1
 8022100:	68f8      	ldr	r0, [r7, #12]
 8022102:	f7f6 fae9 	bl	80186d8 <lv_bar_set_style>
 8022106:	e023      	b.n	8022150 <lv_sw_set_style+0x94>
        case LV_SW_STYLE_KNOB_OFF:
            ext->style_knob_off = style;
 8022108:	697b      	ldr	r3, [r7, #20]
 802210a:	687a      	ldr	r2, [r7, #4]
 802210c:	61da      	str	r2, [r3, #28]
            if(lv_sw_get_state(sw) == 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 802210e:	68f8      	ldr	r0, [r7, #12]
 8022110:	f7ff fee5 	bl	8021ede <lv_sw_get_state>
 8022114:	4603      	mov	r3, r0
 8022116:	f083 0301 	eor.w	r3, r3, #1
 802211a:	b2db      	uxtb	r3, r3
 802211c:	2b00      	cmp	r3, #0
 802211e:	d014      	beq.n	802214a <lv_sw_set_style+0x8e>
 8022120:	687a      	ldr	r2, [r7, #4]
 8022122:	2102      	movs	r1, #2
 8022124:	68f8      	ldr	r0, [r7, #12]
 8022126:	f7fe ff8f 	bl	8021048 <lv_slider_set_style>
            break;
 802212a:	e00e      	b.n	802214a <lv_sw_set_style+0x8e>
        case LV_SW_STYLE_KNOB_ON:
            ext->style_knob_on = style;
 802212c:	697b      	ldr	r3, [r7, #20]
 802212e:	687a      	ldr	r2, [r7, #4]
 8022130:	621a      	str	r2, [r3, #32]
            if(lv_sw_get_state(sw) != 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 8022132:	68f8      	ldr	r0, [r7, #12]
 8022134:	f7ff fed3 	bl	8021ede <lv_sw_get_state>
 8022138:	4603      	mov	r3, r0
 802213a:	2b00      	cmp	r3, #0
 802213c:	d007      	beq.n	802214e <lv_sw_set_style+0x92>
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	2102      	movs	r1, #2
 8022142:	68f8      	ldr	r0, [r7, #12]
 8022144:	f7fe ff80 	bl	8021048 <lv_slider_set_style>
            break;
 8022148:	e001      	b.n	802214e <lv_sw_set_style+0x92>
            break;
 802214a:	bf00      	nop
 802214c:	e000      	b.n	8022150 <lv_sw_set_style+0x94>
            break;
 802214e:	bf00      	nop
    }
}
 8022150:	bf00      	nop
 8022152:	3718      	adds	r7, #24
 8022154:	46bd      	mov	sp, r7
 8022156:	bd80      	pop	{r7, pc}

08022158 <lv_sw_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_sw_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b092      	sub	sp, #72	; 0x48
 802215c:	af00      	add	r7, sp, #0
 802215e:	60f8      	str	r0, [r7, #12]
 8022160:	460b      	mov	r3, r1
 8022162:	607a      	str	r2, [r7, #4]
 8022164:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 8022166:	68f8      	ldr	r0, [r7, #12]
 8022168:	f7e8 fb2f 	bl	800a7ca <lv_obj_get_ext_attr>
 802216c:	6438      	str	r0, [r7, #64]	; 0x40

    /*Save the current (old) value before slider signal modifies it. It will be required in the
     * later calculations*/
    int16_t old_val;
    if(sign == LV_SIGNAL_PRESSING)
 802216e:	7afb      	ldrb	r3, [r7, #11]
 8022170:	2b08      	cmp	r3, #8
 8022172:	d104      	bne.n	802217e <lv_sw_signal+0x26>
        old_val = ext->slider.drag_value;
 8022174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022176:	8b1b      	ldrh	r3, [r3, #24]
 8022178:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 802217c:	e005      	b.n	802218a <lv_sw_signal+0x32>
    else
        old_val = lv_slider_get_value(sw);
 802217e:	68f8      	ldr	r0, [r7, #12]
 8022180:	f7fe ff8c 	bl	802109c <lv_slider_get_value>
 8022184:	4603      	mov	r3, r0
 8022186:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    /*Don't let the slider to call the action. Switch handles it differently*/
    lv_event_cb_t event_cb = sw->event_cb;
 802218a:	68fb      	ldr	r3, [r7, #12]
 802218c:	699b      	ldr	r3, [r3, #24]
 802218e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sw->event_cb           = NULL;
 8022190:	68fb      	ldr	r3, [r7, #12]
 8022192:	2200      	movs	r2, #0
 8022194:	619a      	str	r2, [r3, #24]

    lv_res_t res;
    /* Include the ancient signal function */

    res = ancestor_signal(sw, sign, param);
 8022196:	4bbd      	ldr	r3, [pc, #756]	; (802248c <lv_sw_signal+0x334>)
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	7af9      	ldrb	r1, [r7, #11]
 802219c:	687a      	ldr	r2, [r7, #4]
 802219e:	68f8      	ldr	r0, [r7, #12]
 80221a0:	4798      	blx	r3
 80221a2:	4603      	mov	r3, r0
 80221a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(res != LV_RES_OK) return res;
 80221a8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80221ac:	2b01      	cmp	r3, #1
 80221ae:	d002      	beq.n	80221b6 <lv_sw_signal+0x5e>
 80221b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80221b4:	e186      	b.n	80224c4 <lv_sw_signal+0x36c>

    sw->event_cb = event_cb;
 80221b6:	68fb      	ldr	r3, [r7, #12]
 80221b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80221ba:	619a      	str	r2, [r3, #24]

    if(sign == LV_SIGNAL_CLEANUP) {
 80221bc:	7afb      	ldrb	r3, [r7, #11]
 80221be:	2b00      	cmp	r3, #0
 80221c0:	f000 817e 	beq.w	80224c0 <lv_sw_signal+0x368>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_PRESSED) {
 80221c4:	7afb      	ldrb	r3, [r7, #11]
 80221c6:	2b07      	cmp	r3, #7
 80221c8:	d11e      	bne.n	8022208 <lv_sw_signal+0xb0>

        /*Save the x coordinate of the pressed point to see if the switch was slid*/
        lv_indev_t * indev = lv_indev_get_act();
 80221ca:	f7e6 fc49 	bl	8008a60 <lv_indev_get_act>
 80221ce:	6278      	str	r0, [r7, #36]	; 0x24
        if(indev) {
 80221d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d009      	beq.n	80221ea <lv_sw_signal+0x92>
            lv_point_t p;
            lv_indev_get_point(indev, &p);
 80221d6:	f107 0320 	add.w	r3, r7, #32
 80221da:	4619      	mov	r1, r3
 80221dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221de:	f7e6 fc9b 	bl	8008b18 <lv_indev_get_point>
            ext->start_x = p.x;
 80221e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80221e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80221e8:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        ext->slided  = 0;
 80221ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80221ec:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80221f0:	f36f 0341 	bfc	r3, #1, #1
 80221f4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        ext->changed = 0;
 80221f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80221fa:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80221fe:	f36f 0300 	bfc	r3, #0, #1
 8022202:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 8022206:	e15b      	b.n	80224c0 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8022208:	7afb      	ldrb	r3, [r7, #11]
 802220a:	2b08      	cmp	r3, #8
 802220c:	d15d      	bne.n	80222ca <lv_sw_signal+0x172>
        /*See if the switch was slid (moved at least a little)*/
        lv_indev_t * indev = lv_indev_get_act();
 802220e:	f7e6 fc27 	bl	8008a60 <lv_indev_get_act>
 8022212:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(indev) {
 8022214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022216:	2b00      	cmp	r3, #0
 8022218:	d01c      	beq.n	8022254 <lv_sw_signal+0xfc>
            lv_point_t p = {0, 0};
 802221a:	2300      	movs	r3, #0
 802221c:	83bb      	strh	r3, [r7, #28]
 802221e:	2300      	movs	r3, #0
 8022220:	83fb      	strh	r3, [r7, #30]
            lv_indev_get_point(indev, &p);
 8022222:	f107 031c 	add.w	r3, r7, #28
 8022226:	4619      	mov	r1, r3
 8022228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802222a:	f7e6 fc75 	bl	8008b18 <lv_indev_get_point>
            if(LV_MATH_ABS(p.x - ext->start_x) > LV_INDEV_DEF_DRAG_LIMIT) ext->slided = 1;
 802222e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8022232:	461a      	mov	r2, r3
 8022234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022236:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 802223a:	1ad3      	subs	r3, r2, r3
 802223c:	2b00      	cmp	r3, #0
 802223e:	bfb8      	it	lt
 8022240:	425b      	neglt	r3, r3
 8022242:	2b0a      	cmp	r3, #10
 8022244:	dd06      	ble.n	8022254 <lv_sw_signal+0xfc>
 8022246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022248:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 802224c:	f043 0302 	orr.w	r3, r3, #2
 8022250:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        }

        /*If didn't slide then revert the min/max value. So click without slide won't move the
         * switch as a slider*/
        if(ext->slided == 0) {
 8022254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022256:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802225a:	f003 0302 	and.w	r3, r3, #2
 802225e:	b2db      	uxtb	r3, r3
 8022260:	2b00      	cmp	r3, #0
 8022262:	d10c      	bne.n	802227e <lv_sw_signal+0x126>
            if(lv_sw_get_state(sw))
 8022264:	68f8      	ldr	r0, [r7, #12]
 8022266:	f7ff fe3a 	bl	8021ede <lv_sw_get_state>
 802226a:	4603      	mov	r3, r0
 802226c:	2b00      	cmp	r3, #0
 802226e:	d003      	beq.n	8022278 <lv_sw_signal+0x120>
                ext->slider.drag_value = LV_SW_MAX_VALUE;
 8022270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022272:	2264      	movs	r2, #100	; 0x64
 8022274:	831a      	strh	r2, [r3, #24]
 8022276:	e002      	b.n	802227e <lv_sw_signal+0x126>
            else
                ext->slider.drag_value = 0;
 8022278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802227a:	2200      	movs	r2, #0
 802227c:	831a      	strh	r2, [r3, #24]
        }

        /*If explicitly changed (by slide) don't need to be toggled on release*/
        int16_t threshold = LV_SW_MAX_VALUE / 2;
 802227e:	2332      	movs	r3, #50	; 0x32
 8022280:	857b      	strh	r3, [r7, #42]	; 0x2a
        if((old_val < threshold && ext->slider.drag_value > threshold) ||
 8022282:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8022286:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 802228a:	429a      	cmp	r2, r3
 802228c:	da06      	bge.n	802229c <lv_sw_signal+0x144>
 802228e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022290:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8022294:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8022298:	429a      	cmp	r2, r3
 802229a:	db0e      	blt.n	80222ba <lv_sw_signal+0x162>
 802229c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80222a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80222a4:	429a      	cmp	r2, r3
 80222a6:	f340 810b 	ble.w	80224c0 <lv_sw_signal+0x368>
           (old_val > threshold && ext->slider.drag_value < threshold)) {
 80222aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80222ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80222b0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80222b4:	429a      	cmp	r2, r3
 80222b6:	f340 8103 	ble.w	80224c0 <lv_sw_signal+0x368>
            ext->changed = 1;
 80222ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80222bc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80222c0:	f043 0301 	orr.w	r3, r3, #1
 80222c4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 80222c8:	e0fa      	b.n	80224c0 <lv_sw_signal+0x368>
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 80222ca:	7afb      	ldrb	r3, [r7, #11]
 80222cc:	2b09      	cmp	r3, #9
 80222ce:	d12d      	bne.n	802232c <lv_sw_signal+0x1d4>
        if(lv_sw_get_state(sw)) {
 80222d0:	68f8      	ldr	r0, [r7, #12]
 80222d2:	f7ff fe04 	bl	8021ede <lv_sw_get_state>
 80222d6:	4603      	mov	r3, r0
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d013      	beq.n	8022304 <lv_sw_signal+0x1ac>
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 80222dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80222de:	6a1b      	ldr	r3, [r3, #32]
 80222e0:	461a      	mov	r2, r3
 80222e2:	2102      	movs	r1, #2
 80222e4:	68f8      	ldr	r0, [r7, #12]
 80222e6:	f7fe feaf 	bl	8021048 <lv_slider_set_style>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, LV_ANIM_ON);
 80222ea:	2201      	movs	r2, #1
 80222ec:	2164      	movs	r1, #100	; 0x64
 80222ee:	68f8      	ldr	r0, [r7, #12]
 80222f0:	f7ff fdce 	bl	8021e90 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 80222f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80222f8:	2b01      	cmp	r3, #1
 80222fa:	f000 80e1 	beq.w	80224c0 <lv_sw_signal+0x368>
 80222fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8022302:	e0df      	b.n	80224c4 <lv_sw_signal+0x36c>
        } else {
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 8022304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022306:	69db      	ldr	r3, [r3, #28]
 8022308:	461a      	mov	r2, r3
 802230a:	2102      	movs	r1, #2
 802230c:	68f8      	ldr	r0, [r7, #12]
 802230e:	f7fe fe9b 	bl	8021048 <lv_slider_set_style>
            lv_slider_set_value(sw, 0, LV_ANIM_ON);
 8022312:	2201      	movs	r2, #1
 8022314:	2100      	movs	r1, #0
 8022316:	68f8      	ldr	r0, [r7, #12]
 8022318:	f7ff fdba 	bl	8021e90 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 802231c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8022320:	2b01      	cmp	r3, #1
 8022322:	f000 80cd 	beq.w	80224c0 <lv_sw_signal+0x368>
 8022326:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802232a:	e0cb      	b.n	80224c4 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 802232c:	7afb      	ldrb	r3, [r7, #11]
 802232e:	2b0a      	cmp	r3, #10
 8022330:	d153      	bne.n	80223da <lv_sw_signal+0x282>
        /*If not dragged then toggle the switch*/
        if(ext->changed == 0) {
 8022332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022334:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8022338:	f003 0301 	and.w	r3, r3, #1
 802233c:	b2db      	uxtb	r3, r3
 802233e:	2b00      	cmp	r3, #0
 8022340:	d124      	bne.n	802238c <lv_sw_signal+0x234>
            int32_t state;
            if(lv_sw_get_state(sw)) {
 8022342:	68f8      	ldr	r0, [r7, #12]
 8022344:	f7ff fdcb 	bl	8021ede <lv_sw_get_state>
 8022348:	4603      	mov	r3, r0
 802234a:	2b00      	cmp	r3, #0
 802234c:	d006      	beq.n	802235c <lv_sw_signal+0x204>
                lv_sw_off(sw, LV_ANIM_ON);
 802234e:	2101      	movs	r1, #1
 8022350:	68f8      	ldr	r0, [r7, #12]
 8022352:	f7ff fe98 	bl	8022086 <lv_sw_off>
                state = 0;
 8022356:	2300      	movs	r3, #0
 8022358:	61bb      	str	r3, [r7, #24]
 802235a:	e005      	b.n	8022368 <lv_sw_signal+0x210>
            } else {
                lv_sw_on(sw, LV_ANIM_ON);
 802235c:	2101      	movs	r1, #1
 802235e:	68f8      	ldr	r0, [r7, #12]
 8022360:	f7ff fe76 	bl	8022050 <lv_sw_on>
                state = 1;
 8022364:	2301      	movs	r3, #1
 8022366:	61bb      	str	r3, [r7, #24]
            }

            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8022368:	f107 0318 	add.w	r3, r7, #24
 802236c:	461a      	mov	r2, r3
 802236e:	210e      	movs	r1, #14
 8022370:	68f8      	ldr	r0, [r7, #12]
 8022372:	f7e7 ffb0 	bl	800a2d6 <lv_event_send>
 8022376:	4603      	mov	r3, r0
 8022378:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 802237c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8022380:	2b01      	cmp	r3, #1
 8022382:	f000 809d 	beq.w	80224c0 <lv_sw_signal+0x368>
 8022386:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802238a:	e09b      	b.n	80224c4 <lv_sw_signal+0x36c>
        }
        /*If the switch was dragged then calculate the new state based on the current position*/
        else {
            int16_t v = lv_slider_get_value(sw);
 802238c:	68f8      	ldr	r0, [r7, #12]
 802238e:	f7fe fe85 	bl	802109c <lv_slider_get_value>
 8022392:	4603      	mov	r3, r0
 8022394:	863b      	strh	r3, [r7, #48]	; 0x30
            int32_t state;
            if(v > LV_SW_MAX_VALUE / 2) {
 8022396:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 802239a:	2b32      	cmp	r3, #50	; 0x32
 802239c:	dd06      	ble.n	80223ac <lv_sw_signal+0x254>
                lv_sw_on(sw, LV_ANIM_ON);
 802239e:	2101      	movs	r1, #1
 80223a0:	68f8      	ldr	r0, [r7, #12]
 80223a2:	f7ff fe55 	bl	8022050 <lv_sw_on>
                state = 1;
 80223a6:	2301      	movs	r3, #1
 80223a8:	617b      	str	r3, [r7, #20]
 80223aa:	e005      	b.n	80223b8 <lv_sw_signal+0x260>
            } else {
                lv_sw_off(sw, LV_ANIM_ON);
 80223ac:	2101      	movs	r1, #1
 80223ae:	68f8      	ldr	r0, [r7, #12]
 80223b0:	f7ff fe69 	bl	8022086 <lv_sw_off>
                state = 0;
 80223b4:	2300      	movs	r3, #0
 80223b6:	617b      	str	r3, [r7, #20]
            }
            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 80223b8:	f107 0314 	add.w	r3, r7, #20
 80223bc:	461a      	mov	r2, r3
 80223be:	210e      	movs	r1, #14
 80223c0:	68f8      	ldr	r0, [r7, #12]
 80223c2:	f7e7 ff88 	bl	800a2d6 <lv_event_send>
 80223c6:	4603      	mov	r3, r0
 80223c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 80223cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80223d0:	2b01      	cmp	r3, #1
 80223d2:	d075      	beq.n	80224c0 <lv_sw_signal+0x368>
 80223d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80223d8:	e074      	b.n	80224c4 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 80223da:	7afb      	ldrb	r3, [r7, #11]
 80223dc:	2b11      	cmp	r3, #17
 80223de:	d143      	bne.n	8022468 <lv_sw_signal+0x310>
        char c = *((char *)param);
 80223e0:	687b      	ldr	r3, [r7, #4]
 80223e2:	781b      	ldrb	r3, [r3, #0]
 80223e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint32_t state;
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80223e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80223ec:	2b13      	cmp	r3, #19
 80223ee:	d003      	beq.n	80223f8 <lv_sw_signal+0x2a0>
 80223f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80223f4:	2b11      	cmp	r3, #17
 80223f6:	d117      	bne.n	8022428 <lv_sw_signal+0x2d0>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, true);
 80223f8:	2201      	movs	r2, #1
 80223fa:	2164      	movs	r1, #100	; 0x64
 80223fc:	68f8      	ldr	r0, [r7, #12]
 80223fe:	f7ff fd47 	bl	8021e90 <lv_slider_set_value>
            state = 1;
 8022402:	2301      	movs	r3, #1
 8022404:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8022406:	f107 0310 	add.w	r3, r7, #16
 802240a:	461a      	mov	r2, r3
 802240c:	210e      	movs	r1, #14
 802240e:	68f8      	ldr	r0, [r7, #12]
 8022410:	f7e7 ff61 	bl	800a2d6 <lv_event_send>
 8022414:	4603      	mov	r3, r0
 8022416:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 802241a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802241e:	2b01      	cmp	r3, #1
 8022420:	d04e      	beq.n	80224c0 <lv_sw_signal+0x368>
 8022422:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8022426:	e04d      	b.n	80224c4 <lv_sw_signal+0x36c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8022428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802242c:	2b14      	cmp	r3, #20
 802242e:	d003      	beq.n	8022438 <lv_sw_signal+0x2e0>
 8022430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8022434:	2b12      	cmp	r3, #18
 8022436:	d143      	bne.n	80224c0 <lv_sw_signal+0x368>
            lv_slider_set_value(sw, 0, true);
 8022438:	2201      	movs	r2, #1
 802243a:	2100      	movs	r1, #0
 802243c:	68f8      	ldr	r0, [r7, #12]
 802243e:	f7ff fd27 	bl	8021e90 <lv_slider_set_value>
            state = 0;
 8022442:	2300      	movs	r3, #0
 8022444:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8022446:	f107 0310 	add.w	r3, r7, #16
 802244a:	461a      	mov	r2, r3
 802244c:	210e      	movs	r1, #14
 802244e:	68f8      	ldr	r0, [r7, #12]
 8022450:	f7e7 ff41 	bl	800a2d6 <lv_event_send>
 8022454:	4603      	mov	r3, r0
 8022456:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 802245a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802245e:	2b01      	cmp	r3, #1
 8022460:	d02e      	beq.n	80224c0 <lv_sw_signal+0x368>
 8022462:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8022466:	e02d      	b.n	80224c4 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8022468:	7afb      	ldrb	r3, [r7, #11]
 802246a:	2b12      	cmp	r3, #18
 802246c:	d105      	bne.n	802247a <lv_sw_signal+0x322>
        bool * editable = (bool *)param;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	637b      	str	r3, [r7, #52]	; 0x34
        *editable       = false; /*The ancestor slider is editable the switch is not*/
 8022472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022474:	2200      	movs	r2, #0
 8022476:	701a      	strb	r2, [r3, #0]
 8022478:	e022      	b.n	80224c0 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 802247a:	7afb      	ldrb	r3, [r7, #11]
 802247c:	2b06      	cmp	r3, #6
 802247e:	d11f      	bne.n	80224c0 <lv_sw_signal+0x368>
        lv_obj_type_t * buf = param;
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8022484:	2300      	movs	r3, #0
 8022486:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 802248a:	e00d      	b.n	80224a8 <lv_sw_signal+0x350>
 802248c:	200177f4 	.word	0x200177f4
            if(buf->type[i] == NULL) break;
 8022490:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8022494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d009      	beq.n	80224b2 <lv_sw_signal+0x35a>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 802249e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80224a2:	3301      	adds	r3, #1
 80224a4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80224a8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80224ac:	2b06      	cmp	r3, #6
 80224ae:	d9ef      	bls.n	8022490 <lv_sw_signal+0x338>
 80224b0:	e000      	b.n	80224b4 <lv_sw_signal+0x35c>
            if(buf->type[i] == NULL) break;
 80224b2:	bf00      	nop
        }
        buf->type[i] = "lv_sw";
 80224b4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80224b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80224ba:	4904      	ldr	r1, [pc, #16]	; (80224cc <lv_sw_signal+0x374>)
 80224bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80224c0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}
 80224c4:	4618      	mov	r0, r3
 80224c6:	3748      	adds	r7, #72	; 0x48
 80224c8:	46bd      	mov	sp, r7
 80224ca:	bd80      	pop	{r7, pc}
 80224cc:	0802d52c 	.word	0x0802d52c

080224d0 <lv_theme_get_current>:
/**
 * Get the current system theme.
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
 80224d0:	b480      	push	{r7}
 80224d2:	af00      	add	r7, sp, #0
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited)
 80224d4:	4b07      	ldr	r3, [pc, #28]	; (80224f4 <lv_theme_get_current+0x24>)
 80224d6:	781b      	ldrb	r3, [r3, #0]
 80224d8:	f083 0301 	eor.w	r3, r3, #1
 80224dc:	b2db      	uxtb	r3, r3
 80224de:	2b00      	cmp	r3, #0
 80224e0:	d001      	beq.n	80224e6 <lv_theme_get_current+0x16>
        return NULL;
 80224e2:	2300      	movs	r3, #0
 80224e4:	e000      	b.n	80224e8 <lv_theme_get_current+0x18>
    else
        return &current_theme;
 80224e6:	4b04      	ldr	r3, [pc, #16]	; (80224f8 <lv_theme_get_current+0x28>)
#endif
}
 80224e8:	4618      	mov	r0, r3
 80224ea:	46bd      	mov	sp, r7
 80224ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f0:	4770      	bx	lr
 80224f2:	bf00      	nop
 80224f4:	200177f8 	.word	0x200177f8
 80224f8:	200177fc 	.word	0x200177fc

080224fc <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b082      	sub	sp, #8
 8022500:	af00      	add	r7, sp, #0
 8022502:	4603      	mov	r3, r0
 8022504:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8022506:	2200      	movs	r2, #0
 8022508:	2104      	movs	r1, #4
 802250a:	4806      	ldr	r0, [pc, #24]	; (8022524 <ST7789_WriteCommand+0x28>)
 802250c:	f7df fdd0 	bl	80020b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), 1);
 8022510:	1df9      	adds	r1, r7, #7
 8022512:	2301      	movs	r3, #1
 8022514:	2201      	movs	r2, #1
 8022516:	4804      	ldr	r0, [pc, #16]	; (8022528 <ST7789_WriteCommand+0x2c>)
 8022518:	f7e1 fea4 	bl	8004264 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &cmd, sizeof(cmd));
}
 802251c:	bf00      	nop
 802251e:	3708      	adds	r7, #8
 8022520:	46bd      	mov	sp, r7
 8022522:	bd80      	pop	{r7, pc}
 8022524:	40020000 	.word	0x40020000
 8022528:	2001b70c 	.word	0x2001b70c

0802252c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 802252c:	b580      	push	{r7, lr}
 802252e:	b084      	sub	sp, #16
 8022530:	af00      	add	r7, sp, #0
 8022532:	6078      	str	r0, [r7, #4]
 8022534:	6039      	str	r1, [r7, #0]
	ST7789_DC_Set();
 8022536:	2201      	movs	r2, #1
 8022538:	2104      	movs	r1, #4
 802253a:	4810      	ldr	r0, [pc, #64]	; (802257c <ST7789_WriteData+0x50>)
 802253c:	f7df fdb8 	bl	80020b0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8022540:	e014      	b.n	802256c <ST7789_WriteData+0x40>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8022542:	683b      	ldr	r3, [r7, #0]
 8022544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022548:	4293      	cmp	r3, r2
 802254a:	bf28      	it	cs
 802254c:	4613      	movcs	r3, r2
 802254e:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, 10);
 8022550:	89fa      	ldrh	r2, [r7, #14]
 8022552:	230a      	movs	r3, #10
 8022554:	6879      	ldr	r1, [r7, #4]
 8022556:	480a      	ldr	r0, [pc, #40]	; (8022580 <ST7789_WriteData+0x54>)
 8022558:	f7e1 fe84 	bl	8004264 <HAL_SPI_Transmit>
		//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
		buff += chunk_size;
 802255c:	89fb      	ldrh	r3, [r7, #14]
 802255e:	687a      	ldr	r2, [r7, #4]
 8022560:	4413      	add	r3, r2
 8022562:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8022564:	89fb      	ldrh	r3, [r7, #14]
 8022566:	683a      	ldr	r2, [r7, #0]
 8022568:	1ad3      	subs	r3, r2, r3
 802256a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 802256c:	683b      	ldr	r3, [r7, #0]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d1e7      	bne.n	8022542 <ST7789_WriteData+0x16>
	}

}
 8022572:	bf00      	nop
 8022574:	3710      	adds	r7, #16
 8022576:	46bd      	mov	sp, r7
 8022578:	bd80      	pop	{r7, pc}
 802257a:	bf00      	nop
 802257c:	40020000 	.word	0x40020000
 8022580:	2001b70c 	.word	0x2001b70c

08022584 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8022584:	b580      	push	{r7, lr}
 8022586:	b082      	sub	sp, #8
 8022588:	af00      	add	r7, sp, #0
 802258a:	4603      	mov	r3, r0
 802258c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 802258e:	2201      	movs	r2, #1
 8022590:	2104      	movs	r1, #4
 8022592:	4806      	ldr	r0, [pc, #24]	; (80225ac <ST7789_WriteSmallData+0x28>)
 8022594:	f7df fd8c 	bl	80020b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), 1);
 8022598:	1df9      	adds	r1, r7, #7
 802259a:	2301      	movs	r3, #1
 802259c:	2201      	movs	r2, #1
 802259e:	4804      	ldr	r0, [pc, #16]	; (80225b0 <ST7789_WriteSmallData+0x2c>)
 80225a0:	f7e1 fe60 	bl	8004264 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &data, sizeof(data));
}
 80225a4:	bf00      	nop
 80225a6:	3708      	adds	r7, #8
 80225a8:	46bd      	mov	sp, r7
 80225aa:	bd80      	pop	{r7, pc}
 80225ac:	40020000 	.word	0x40020000
 80225b0:	2001b70c 	.word	0x2001b70c

080225b4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80225b4:	b580      	push	{r7, lr}
 80225b6:	b082      	sub	sp, #8
 80225b8:	af00      	add	r7, sp, #0
 80225ba:	4603      	mov	r3, r0
 80225bc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80225be:	2036      	movs	r0, #54	; 0x36
 80225c0:	f7ff ff9c 	bl	80224fc <ST7789_WriteCommand>
	switch (m) {
 80225c4:	79fb      	ldrb	r3, [r7, #7]
 80225c6:	2b03      	cmp	r3, #3
 80225c8:	d81a      	bhi.n	8022600 <ST7789_SetRotation+0x4c>
 80225ca:	a201      	add	r2, pc, #4	; (adr r2, 80225d0 <ST7789_SetRotation+0x1c>)
 80225cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80225d0:	080225e1 	.word	0x080225e1
 80225d4:	080225e9 	.word	0x080225e9
 80225d8:	080225f1 	.word	0x080225f1
 80225dc:	080225f9 	.word	0x080225f9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80225e0:	20c0      	movs	r0, #192	; 0xc0
 80225e2:	f7ff ffcf 	bl	8022584 <ST7789_WriteSmallData>
		break;
 80225e6:	e00c      	b.n	8022602 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80225e8:	20a0      	movs	r0, #160	; 0xa0
 80225ea:	f7ff ffcb 	bl	8022584 <ST7789_WriteSmallData>
		break;
 80225ee:	e008      	b.n	8022602 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80225f0:	2000      	movs	r0, #0
 80225f2:	f7ff ffc7 	bl	8022584 <ST7789_WriteSmallData>
		break;
 80225f6:	e004      	b.n	8022602 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80225f8:	2060      	movs	r0, #96	; 0x60
 80225fa:	f7ff ffc3 	bl	8022584 <ST7789_WriteSmallData>
		break;
 80225fe:	e000      	b.n	8022602 <ST7789_SetRotation+0x4e>
	default:
		break;
 8022600:	bf00      	nop
	}
}
 8022602:	bf00      	nop
 8022604:	3708      	adds	r7, #8
 8022606:	46bd      	mov	sp, r7
 8022608:	bd80      	pop	{r7, pc}
 802260a:	bf00      	nop

0802260c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 802260c:	b590      	push	{r4, r7, lr}
 802260e:	b087      	sub	sp, #28
 8022610:	af00      	add	r7, sp, #0
 8022612:	4604      	mov	r4, r0
 8022614:	4608      	mov	r0, r1
 8022616:	4611      	mov	r1, r2
 8022618:	461a      	mov	r2, r3
 802261a:	4623      	mov	r3, r4
 802261c:	80fb      	strh	r3, [r7, #6]
 802261e:	4603      	mov	r3, r0
 8022620:	80bb      	strh	r3, [r7, #4]
 8022622:	460b      	mov	r3, r1
 8022624:	807b      	strh	r3, [r7, #2]
 8022626:	4613      	mov	r3, r2
 8022628:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 802262a:	88fb      	ldrh	r3, [r7, #6]
 802262c:	82fb      	strh	r3, [r7, #22]
 802262e:	887b      	ldrh	r3, [r7, #2]
 8022630:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8022632:	88bb      	ldrh	r3, [r7, #4]
 8022634:	827b      	strh	r3, [r7, #18]
 8022636:	883b      	ldrh	r3, [r7, #0]
 8022638:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 802263a:	202a      	movs	r0, #42	; 0x2a
 802263c:	f7ff ff5e 	bl	80224fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8022640:	8afb      	ldrh	r3, [r7, #22]
 8022642:	0a1b      	lsrs	r3, r3, #8
 8022644:	b29b      	uxth	r3, r3
 8022646:	b2db      	uxtb	r3, r3
 8022648:	733b      	strb	r3, [r7, #12]
 802264a:	8afb      	ldrh	r3, [r7, #22]
 802264c:	b2db      	uxtb	r3, r3
 802264e:	737b      	strb	r3, [r7, #13]
 8022650:	8abb      	ldrh	r3, [r7, #20]
 8022652:	0a1b      	lsrs	r3, r3, #8
 8022654:	b29b      	uxth	r3, r3
 8022656:	b2db      	uxtb	r3, r3
 8022658:	73bb      	strb	r3, [r7, #14]
 802265a:	8abb      	ldrh	r3, [r7, #20]
 802265c:	b2db      	uxtb	r3, r3
 802265e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8022660:	f107 030c 	add.w	r3, r7, #12
 8022664:	2104      	movs	r1, #4
 8022666:	4618      	mov	r0, r3
 8022668:	f7ff ff60 	bl	802252c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 802266c:	202b      	movs	r0, #43	; 0x2b
 802266e:	f7ff ff45 	bl	80224fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8022672:	8a7b      	ldrh	r3, [r7, #18]
 8022674:	0a1b      	lsrs	r3, r3, #8
 8022676:	b29b      	uxth	r3, r3
 8022678:	b2db      	uxtb	r3, r3
 802267a:	723b      	strb	r3, [r7, #8]
 802267c:	8a7b      	ldrh	r3, [r7, #18]
 802267e:	b2db      	uxtb	r3, r3
 8022680:	727b      	strb	r3, [r7, #9]
 8022682:	8a3b      	ldrh	r3, [r7, #16]
 8022684:	0a1b      	lsrs	r3, r3, #8
 8022686:	b29b      	uxth	r3, r3
 8022688:	b2db      	uxtb	r3, r3
 802268a:	72bb      	strb	r3, [r7, #10]
 802268c:	8a3b      	ldrh	r3, [r7, #16]
 802268e:	b2db      	uxtb	r3, r3
 8022690:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8022692:	f107 0308 	add.w	r3, r7, #8
 8022696:	2104      	movs	r1, #4
 8022698:	4618      	mov	r0, r3
 802269a:	f7ff ff47 	bl	802252c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 802269e:	202c      	movs	r0, #44	; 0x2c
 80226a0:	f7ff ff2c 	bl	80224fc <ST7789_WriteCommand>
}
 80226a4:	bf00      	nop
 80226a6:	371c      	adds	r7, #28
 80226a8:	46bd      	mov	sp, r7
 80226aa:	bd90      	pop	{r4, r7, pc}

080226ac <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80226ac:	b590      	push	{r4, r7, lr}
 80226ae:	b08b      	sub	sp, #44	; 0x2c
 80226b0:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 80226b2:	2019      	movs	r0, #25
 80226b4:	f7df fa46 	bl	8001b44 <HAL_Delay>
    ST7789_RST_Clr();
 80226b8:	2200      	movs	r2, #0
 80226ba:	2102      	movs	r1, #2
 80226bc:	4846      	ldr	r0, [pc, #280]	; (80227d8 <ST7789_Init+0x12c>)
 80226be:	f7df fcf7 	bl	80020b0 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80226c2:	2019      	movs	r0, #25
 80226c4:	f7df fa3e 	bl	8001b44 <HAL_Delay>
    ST7789_RST_Set();
 80226c8:	2201      	movs	r2, #1
 80226ca:	2102      	movs	r1, #2
 80226cc:	4842      	ldr	r0, [pc, #264]	; (80227d8 <ST7789_Init+0x12c>)
 80226ce:	f7df fcef 	bl	80020b0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80226d2:	2032      	movs	r0, #50	; 0x32
 80226d4:	f7df fa36 	bl	8001b44 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80226d8:	203a      	movs	r0, #58	; 0x3a
 80226da:	f7ff ff0f 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80226de:	2055      	movs	r0, #85	; 0x55
 80226e0:	f7ff ff50 	bl	8022584 <ST7789_WriteSmallData>

    ST7789_WriteCommand(0xB2);				//	Porch control
 80226e4:	20b2      	movs	r0, #178	; 0xb2
 80226e6:	f7ff ff09 	bl	80224fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80226ea:	4a3c      	ldr	r2, [pc, #240]	; (80227dc <ST7789_Init+0x130>)
 80226ec:	f107 0320 	add.w	r3, r7, #32
 80226f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80226f4:	6018      	str	r0, [r3, #0]
 80226f6:	3304      	adds	r3, #4
 80226f8:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80226fa:	f107 0320 	add.w	r3, r7, #32
 80226fe:	2105      	movs	r1, #5
 8022700:	4618      	mov	r0, r3
 8022702:	f7ff ff13 	bl	802252c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8022706:	2002      	movs	r0, #2
 8022708:	f7ff ff54 	bl	80225b4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 802270c:	20b7      	movs	r0, #183	; 0xb7
 802270e:	f7ff fef5 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8022712:	2035      	movs	r0, #53	; 0x35
 8022714:	f7ff ff36 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8022718:	20bb      	movs	r0, #187	; 0xbb
 802271a:	f7ff feef 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 802271e:	2019      	movs	r0, #25
 8022720:	f7ff ff30 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8022724:	20c0      	movs	r0, #192	; 0xc0
 8022726:	f7ff fee9 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 802272a:	202c      	movs	r0, #44	; 0x2c
 802272c:	f7ff ff2a 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8022730:	20c2      	movs	r0, #194	; 0xc2
 8022732:	f7ff fee3 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8022736:	2001      	movs	r0, #1
 8022738:	f7ff ff24 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 802273c:	20c3      	movs	r0, #195	; 0xc3
 802273e:	f7ff fedd 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8022742:	2012      	movs	r0, #18
 8022744:	f7ff ff1e 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8022748:	20c4      	movs	r0, #196	; 0xc4
 802274a:	f7ff fed7 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 802274e:	2020      	movs	r0, #32
 8022750:	f7ff ff18 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8022754:	20c6      	movs	r0, #198	; 0xc6
 8022756:	f7ff fed1 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 802275a:	200f      	movs	r0, #15
 802275c:	f7ff ff12 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8022760:	20d0      	movs	r0, #208	; 0xd0
 8022762:	f7ff fecb 	bl	80224fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8022766:	20a4      	movs	r0, #164	; 0xa4
 8022768:	f7ff ff0c 	bl	8022584 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 802276c:	20a1      	movs	r0, #161	; 0xa1
 802276e:	f7ff ff09 	bl	8022584 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8022772:	20e0      	movs	r0, #224	; 0xe0
 8022774:	f7ff fec2 	bl	80224fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8022778:	4b19      	ldr	r3, [pc, #100]	; (80227e0 <ST7789_Init+0x134>)
 802277a:	f107 0410 	add.w	r4, r7, #16
 802277e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022780:	c407      	stmia	r4!, {r0, r1, r2}
 8022782:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8022784:	f107 0310 	add.w	r3, r7, #16
 8022788:	210e      	movs	r1, #14
 802278a:	4618      	mov	r0, r3
 802278c:	f7ff fece 	bl	802252c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8022790:	20e1      	movs	r0, #225	; 0xe1
 8022792:	f7ff feb3 	bl	80224fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8022796:	4b13      	ldr	r3, [pc, #76]	; (80227e4 <ST7789_Init+0x138>)
 8022798:	463c      	mov	r4, r7
 802279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802279c:	c407      	stmia	r4!, {r0, r1, r2}
 802279e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80227a0:	463b      	mov	r3, r7
 80227a2:	210e      	movs	r1, #14
 80227a4:	4618      	mov	r0, r3
 80227a6:	f7ff fec1 	bl	802252c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80227aa:	2021      	movs	r0, #33	; 0x21
 80227ac:	f7ff fea6 	bl	80224fc <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80227b0:	2011      	movs	r0, #17
 80227b2:	f7ff fea3 	bl	80224fc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80227b6:	2013      	movs	r0, #19
 80227b8:	f7ff fea0 	bl	80224fc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80227bc:	2029      	movs	r0, #41	; 0x29
 80227be:	f7ff fe9d 	bl	80224fc <ST7789_WriteCommand>

	HAL_Delay(50);
 80227c2:	2032      	movs	r0, #50	; 0x32
 80227c4:	f7df f9be 	bl	8001b44 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80227c8:	2000      	movs	r0, #0
 80227ca:	f000 f80d 	bl	80227e8 <ST7789_Fill_Color>
}
 80227ce:	bf00      	nop
 80227d0:	372c      	adds	r7, #44	; 0x2c
 80227d2:	46bd      	mov	sp, r7
 80227d4:	bd90      	pop	{r4, r7, pc}
 80227d6:	bf00      	nop
 80227d8:	40020000 	.word	0x40020000
 80227dc:	0802d534 	.word	0x0802d534
 80227e0:	0802d53c 	.word	0x0802d53c
 80227e4:	0802d54c 	.word	0x0802d54c

080227e8 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80227e8:	b580      	push	{r7, lr}
 80227ea:	b084      	sub	sp, #16
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	4603      	mov	r3, r0
 80227f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80227f2:	23ef      	movs	r3, #239	; 0xef
 80227f4:	22ef      	movs	r2, #239	; 0xef
 80227f6:	2100      	movs	r1, #0
 80227f8:	2000      	movs	r0, #0
 80227fa:	f7ff ff07 	bl	802260c <ST7789_SetAddressWindow>
	for (i = 0; i < ST7789_WIDTH; i++)
 80227fe:	2300      	movs	r3, #0
 8022800:	81fb      	strh	r3, [r7, #14]
 8022802:	e019      	b.n	8022838 <ST7789_Fill_Color+0x50>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8022804:	2300      	movs	r3, #0
 8022806:	81bb      	strh	r3, [r7, #12]
 8022808:	e010      	b.n	802282c <ST7789_Fill_Color+0x44>
			uint8_t data[] = {color >> 8, color & 0xFF};
 802280a:	88fb      	ldrh	r3, [r7, #6]
 802280c:	0a1b      	lsrs	r3, r3, #8
 802280e:	b29b      	uxth	r3, r3
 8022810:	b2db      	uxtb	r3, r3
 8022812:	723b      	strb	r3, [r7, #8]
 8022814:	88fb      	ldrh	r3, [r7, #6]
 8022816:	b2db      	uxtb	r3, r3
 8022818:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 802281a:	f107 0308 	add.w	r3, r7, #8
 802281e:	2102      	movs	r1, #2
 8022820:	4618      	mov	r0, r3
 8022822:	f7ff fe83 	bl	802252c <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8022826:	89bb      	ldrh	r3, [r7, #12]
 8022828:	3301      	adds	r3, #1
 802282a:	81bb      	strh	r3, [r7, #12]
 802282c:	89bb      	ldrh	r3, [r7, #12]
 802282e:	2bef      	cmp	r3, #239	; 0xef
 8022830:	d9eb      	bls.n	802280a <ST7789_Fill_Color+0x22>
	for (i = 0; i < ST7789_WIDTH; i++)
 8022832:	89fb      	ldrh	r3, [r7, #14]
 8022834:	3301      	adds	r3, #1
 8022836:	81fb      	strh	r3, [r7, #14]
 8022838:	89fb      	ldrh	r3, [r7, #14]
 802283a:	2bef      	cmp	r3, #239	; 0xef
 802283c:	d9e2      	bls.n	8022804 <ST7789_Fill_Color+0x1c>
		}
}
 802283e:	bf00      	nop
 8022840:	3710      	adds	r7, #16
 8022842:	46bd      	mov	sp, r7
 8022844:	bd80      	pop	{r7, pc}
	...

08022848 <ST7789_SPI_Send>:
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
}

static void ST7789_SPI_Send(uint8_t *data, uint16_t size)
{
 8022848:	b580      	push	{r7, lr}
 802284a:	b082      	sub	sp, #8
 802284c:	af00      	add	r7, sp, #0
 802284e:	6078      	str	r0, [r7, #4]
 8022850:	460b      	mov	r3, r1
 8022852:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&ST7789_SPI_PORT,data,size,1);
 8022854:	887a      	ldrh	r2, [r7, #2]
 8022856:	2301      	movs	r3, #1
 8022858:	6879      	ldr	r1, [r7, #4]
 802285a:	4803      	ldr	r0, [pc, #12]	; (8022868 <ST7789_SPI_Send+0x20>)
 802285c:	f7e1 fd02 	bl	8004264 <HAL_SPI_Transmit>
}
 8022860:	bf00      	nop
 8022862:	3708      	adds	r7, #8
 8022864:	46bd      	mov	sp, r7
 8022866:	bd80      	pop	{r7, pc}
 8022868:	2001b70c 	.word	0x2001b70c

0802286c <ST7789_Send_Data>:

void ST7789_Send_Data(uint16_t x, uint16_t y, uint16_t x_end, uint16_t y_end, uint8_t *p){
 802286c:	b590      	push	{r4, r7, lr}
 802286e:	b083      	sub	sp, #12
 8022870:	af00      	add	r7, sp, #0
 8022872:	4604      	mov	r4, r0
 8022874:	4608      	mov	r0, r1
 8022876:	4611      	mov	r1, r2
 8022878:	461a      	mov	r2, r3
 802287a:	4623      	mov	r3, r4
 802287c:	80fb      	strh	r3, [r7, #6]
 802287e:	4603      	mov	r3, r0
 8022880:	80bb      	strh	r3, [r7, #4]
 8022882:	460b      	mov	r3, r1
 8022884:	807b      	strh	r3, [r7, #2]
 8022886:	4613      	mov	r3, r2
 8022888:	803b      	strh	r3, [r7, #0]
	ST7789_SetAddressWindow(x, y, x_end, y_end);
 802288a:	883b      	ldrh	r3, [r7, #0]
 802288c:	887a      	ldrh	r2, [r7, #2]
 802288e:	88b9      	ldrh	r1, [r7, #4]
 8022890:	88f8      	ldrh	r0, [r7, #6]
 8022892:	f7ff febb 	bl	802260c <ST7789_SetAddressWindow>
	ST7789_DC_Set();
 8022896:	2201      	movs	r2, #1
 8022898:	2104      	movs	r1, #4
 802289a:	480d      	ldr	r0, [pc, #52]	; (80228d0 <ST7789_Send_Data+0x64>)
 802289c:	f7df fc08 	bl	80020b0 <HAL_GPIO_WritePin>
	ST7789_SPI_Send(p,(x_end - x + 1) * (y_end - y + 1) * 2);
 80228a0:	887a      	ldrh	r2, [r7, #2]
 80228a2:	88fb      	ldrh	r3, [r7, #6]
 80228a4:	1ad3      	subs	r3, r2, r3
 80228a6:	3301      	adds	r3, #1
 80228a8:	b29a      	uxth	r2, r3
 80228aa:	8839      	ldrh	r1, [r7, #0]
 80228ac:	88bb      	ldrh	r3, [r7, #4]
 80228ae:	1acb      	subs	r3, r1, r3
 80228b0:	3301      	adds	r3, #1
 80228b2:	b29b      	uxth	r3, r3
 80228b4:	fb12 f303 	smulbb	r3, r2, r3
 80228b8:	b29b      	uxth	r3, r3
 80228ba:	005b      	lsls	r3, r3, #1
 80228bc:	b29b      	uxth	r3, r3
 80228be:	4619      	mov	r1, r3
 80228c0:	69b8      	ldr	r0, [r7, #24]
 80228c2:	f7ff ffc1 	bl	8022848 <ST7789_SPI_Send>
}
 80228c6:	bf00      	nop
 80228c8:	370c      	adds	r7, #12
 80228ca:	46bd      	mov	sp, r7
 80228cc:	bd90      	pop	{r4, r7, pc}
 80228ce:	bf00      	nop
 80228d0:	40020000 	.word	0x40020000

080228d4 <tos_Tft_init>:
#if DMA_ACTIVE
static lv_disp_drv_t * st7789disp_p;
#endif

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);
void tos_Tft_init(void){
 80228d4:	b580      	push	{r7, lr}
 80228d6:	b08a      	sub	sp, #40	; 0x28
 80228d8:	af00      	add	r7, sp, #0
	  ST7789_Init();
 80228da:	f7ff fee7 	bl	80226ac <ST7789_Init>
	  lv_init();
 80228de:	f7e6 f9db 	bl	8008c98 <lv_init>

	 static lv_disp_buf_t disp_buf;
	 static lv_color_t buf[LV_HOR_RES_MAX * LV_VER_RES_MAX / 10];
	 lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX / 10);
 80228e2:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 80228e6:	2200      	movs	r2, #0
 80228e8:	4909      	ldr	r1, [pc, #36]	; (8022910 <tos_Tft_init+0x3c>)
 80228ea:	480a      	ldr	r0, [pc, #40]	; (8022914 <tos_Tft_init+0x40>)
 80228ec:	f7f3 f84c 	bl	8015988 <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 80228f0:	1d3b      	adds	r3, r7, #4
 80228f2:	4618      	mov	r0, r3
 80228f4:	f7f3 f80b 	bl	801590e <lv_disp_drv_init>
	  disp_drv.buffer = &disp_buf;
 80228f8:	4b06      	ldr	r3, [pc, #24]	; (8022914 <tos_Tft_init+0x40>)
 80228fa:	60bb      	str	r3, [r7, #8]
	  disp_drv.flush_cb = st7789_flush_cb;
 80228fc:	4b06      	ldr	r3, [pc, #24]	; (8022918 <tos_Tft_init+0x44>)
 80228fe:	613b      	str	r3, [r7, #16]
	  lv_disp_drv_register(&disp_drv);
 8022900:	1d3b      	adds	r3, r7, #4
 8022902:	4618      	mov	r0, r3
 8022904:	f7f3 f85e 	bl	80159c4 <lv_disp_drv_register>

}
 8022908:	bf00      	nop
 802290a:	3728      	adds	r7, #40	; 0x28
 802290c:	46bd      	mov	sp, r7
 802290e:	bd80      	pop	{r7, pc}
 8022910:	200179c4 	.word	0x200179c4
 8022914:	200179a8 	.word	0x200179a8
 8022918:	0802291d 	.word	0x0802291d

0802291c <st7789_flush_cb>:

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 802291c:	b590      	push	{r4, r7, lr}
 802291e:	b087      	sub	sp, #28
 8022920:	af02      	add	r7, sp, #8
 8022922:	60f8      	str	r0, [r7, #12]
 8022924:	60b9      	str	r1, [r7, #8]
 8022926:	607a      	str	r2, [r7, #4]
	 	if(area->x2 < 0) return;
 8022928:	68bb      	ldr	r3, [r7, #8]
 802292a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802292e:	2b00      	cmp	r3, #0
 8022930:	db27      	blt.n	8022982 <st7789_flush_cb+0x66>
	    if(area->y2 < 0) return;
 8022932:	68bb      	ldr	r3, [r7, #8]
 8022934:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022938:	2b00      	cmp	r3, #0
 802293a:	db24      	blt.n	8022986 <st7789_flush_cb+0x6a>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 802293c:	68bb      	ldr	r3, [r7, #8]
 802293e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022942:	2bef      	cmp	r3, #239	; 0xef
 8022944:	dc21      	bgt.n	802298a <st7789_flush_cb+0x6e>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 8022946:	68bb      	ldr	r3, [r7, #8]
 8022948:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802294c:	2bef      	cmp	r3, #239	; 0xef
 802294e:	dc1e      	bgt.n	802298e <st7789_flush_cb+0x72>

#if DMA_ACTIVE
	      ST7789_Send_Data_DMA(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
	      st7789disp_p=disp_drv;
#else
	ST7789_Send_Data(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
 8022950:	68bb      	ldr	r3, [r7, #8]
 8022952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022956:	b298      	uxth	r0, r3
 8022958:	68bb      	ldr	r3, [r7, #8]
 802295a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802295e:	b299      	uxth	r1, r3
 8022960:	68bb      	ldr	r3, [r7, #8]
 8022962:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022966:	b29a      	uxth	r2, r3
 8022968:	68bb      	ldr	r3, [r7, #8]
 802296a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802296e:	b29c      	uxth	r4, r3
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	9300      	str	r3, [sp, #0]
 8022974:	4623      	mov	r3, r4
 8022976:	f7ff ff79 	bl	802286c <ST7789_Send_Data>
    lv_disp_flush_ready(disp_drv);
 802297a:	68f8      	ldr	r0, [r7, #12]
 802297c:	f7f3 f91c 	bl	8015bb8 <lv_disp_flush_ready>
 8022980:	e006      	b.n	8022990 <st7789_flush_cb+0x74>
	 	if(area->x2 < 0) return;
 8022982:	bf00      	nop
 8022984:	e004      	b.n	8022990 <st7789_flush_cb+0x74>
	    if(area->y2 < 0) return;
 8022986:	bf00      	nop
 8022988:	e002      	b.n	8022990 <st7789_flush_cb+0x74>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 802298a:	bf00      	nop
 802298c:	e000      	b.n	8022990 <st7789_flush_cb+0x74>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 802298e:	bf00      	nop
#endif
}
 8022990:	3714      	adds	r7, #20
 8022992:	46bd      	mov	sp, r7
 8022994:	bd90      	pop	{r4, r7, pc}

08022996 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8022996:	b580      	push	{r7, lr}
 8022998:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802299a:	f7f3 f8a3 	bl	8015ae4 <lv_disp_get_default>
 802299e:	4603      	mov	r3, r0
 80229a0:	4618      	mov	r0, r3
 80229a2:	f7e5 fd6b 	bl	800847c <lv_disp_get_scr_act>
 80229a6:	4603      	mov	r3, r0
}
 80229a8:	4618      	mov	r0, r3
 80229aa:	bd80      	pop	{r7, pc}

080229ac <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80229ac:	b580      	push	{r7, lr}
 80229ae:	b084      	sub	sp, #16
 80229b0:	af00      	add	r7, sp, #0
 80229b2:	60f8      	str	r0, [r7, #12]
 80229b4:	460b      	mov	r3, r1
 80229b6:	607a      	str	r2, [r7, #4]
 80229b8:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80229ba:	6879      	ldr	r1, [r7, #4]
 80229bc:	68f8      	ldr	r0, [r7, #12]
 80229be:	f7e7 fbd4 	bl	800a16a <lv_obj_set_style>
}
 80229c2:	bf00      	nop
 80229c4:	3710      	adds	r7, #16
 80229c6:	46bd      	mov	sp, r7
 80229c8:	bd80      	pop	{r7, pc}

080229ca <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 80229ca:	b580      	push	{r7, lr}
 80229cc:	b084      	sub	sp, #16
 80229ce:	af00      	add	r7, sp, #0
 80229d0:	60f8      	str	r0, [r7, #12]
 80229d2:	460b      	mov	r3, r1
 80229d4:	607a      	str	r2, [r7, #4]
 80229d6:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 80229d8:	6879      	ldr	r1, [r7, #4]
 80229da:	68f8      	ldr	r0, [r7, #12]
 80229dc:	f7e7 fbc5 	bl	800a16a <lv_obj_set_style>
}
 80229e0:	bf00      	nop
 80229e2:	3710      	adds	r7, #16
 80229e4:	46bd      	mov	sp, r7
 80229e6:	bd80      	pop	{r7, pc}

080229e8 <tos_MainScreen_Init>:

@param theme:
false ->Light Theme
true ->Dark Theme
*/
void tos_MainScreen_Init(uint8_t screenType,bool theme) {
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b082      	sub	sp, #8
 80229ec:	af00      	add	r7, sp, #0
 80229ee:	4603      	mov	r3, r0
 80229f0:	460a      	mov	r2, r1
 80229f2:	71fb      	strb	r3, [r7, #7]
 80229f4:	4613      	mov	r3, r2
 80229f6:	71bb      	strb	r3, [r7, #6]
		    weekDayStr="Gun";
 80229f8:	4b3d      	ldr	r3, [pc, #244]	; (8022af0 <tos_MainScreen_Init+0x108>)
 80229fa:	4a3e      	ldr	r2, [pc, #248]	; (8022af4 <tos_MainScreen_Init+0x10c>)
 80229fc:	601a      	str	r2, [r3, #0]
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 80229fe:	493e      	ldr	r1, [pc, #248]	; (8022af8 <tos_MainScreen_Init+0x110>)
 8022a00:	483e      	ldr	r0, [pc, #248]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a02:	f7e9 f951 	bl	800bca8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 8022a06:	4a3d      	ldr	r2, [pc, #244]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a08:	4b3d      	ldr	r3, [pc, #244]	; (8022b00 <tos_MainScreen_Init+0x118>)
 8022a0a:	881b      	ldrh	r3, [r3, #0]
 8022a0c:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 8022a0e:	4a3b      	ldr	r2, [pc, #236]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a10:	4b3b      	ldr	r3, [pc, #236]	; (8022b00 <tos_MainScreen_Init+0x118>)
 8022a12:	881b      	ldrh	r3, [r3, #0]
 8022a14:	8093      	strh	r3, [r2, #4]
	if(theme){
 8022a16:	79bb      	ldrb	r3, [r7, #6]
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	d009      	beq.n	8022a30 <tos_MainScreen_Init+0x48>
		lv_style_copy(&style_screen, &lv_style_plain);
 8022a1c:	4936      	ldr	r1, [pc, #216]	; (8022af8 <tos_MainScreen_Init+0x110>)
 8022a1e:	4837      	ldr	r0, [pc, #220]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a20:	f7e9 f942 	bl	800bca8 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8022a24:	4b35      	ldr	r3, [pc, #212]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a26:	2200      	movs	r2, #0
 8022a28:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8022a2a:	4b34      	ldr	r3, [pc, #208]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a2c:	2200      	movs	r2, #0
 8022a2e:	809a      	strh	r2, [r3, #4]
	}
	lv_obj_set_style(lv_scr_act(), &style_screen);
 8022a30:	f7ff ffb1 	bl	8022996 <lv_scr_act>
 8022a34:	4603      	mov	r3, r0
 8022a36:	4931      	ldr	r1, [pc, #196]	; (8022afc <tos_MainScreen_Init+0x114>)
 8022a38:	4618      	mov	r0, r3
 8022a3a:	f7e7 fb96 	bl	800a16a <lv_obj_set_style>

	MainScreenType= screenType;
 8022a3e:	4a31      	ldr	r2, [pc, #196]	; (8022b04 <tos_MainScreen_Init+0x11c>)
 8022a40:	79fb      	ldrb	r3, [r7, #7]
 8022a42:	7013      	strb	r3, [r2, #0]
	MS_taskController=true;
 8022a44:	4b30      	ldr	r3, [pc, #192]	; (8022b08 <tos_MainScreen_Init+0x120>)
 8022a46:	2201      	movs	r2, #1
 8022a48:	701a      	strb	r2, [r3, #0]
	switch(screenType){
 8022a4a:	79fb      	ldrb	r3, [r7, #7]
 8022a4c:	2b01      	cmp	r3, #1
 8022a4e:	d010      	beq.n	8022a72 <tos_MainScreen_Init+0x8a>
 8022a50:	2b02      	cmp	r3, #2
 8022a52:	d01b      	beq.n	8022a8c <tos_MainScreen_Init+0xa4>
 8022a54:	2b00      	cmp	r3, #0
 8022a56:	d125      	bne.n	8022aa4 <tos_MainScreen_Init+0xbc>
	case tos_mainScreen_Type1: tos_DigitalType_Init(0,theme);
 8022a58:	79bb      	ldrb	r3, [r7, #6]
 8022a5a:	4619      	mov	r1, r3
 8022a5c:	2000      	movs	r0, #0
 8022a5e:	f000 fc2f 	bl	80232c0 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 8022a62:	2300      	movs	r3, #0
 8022a64:	2201      	movs	r2, #1
 8022a66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022a6a:	4828      	ldr	r0, [pc, #160]	; (8022b0c <tos_MainScreen_Init+0x124>)
 8022a6c:	f7f4 fc7e 	bl	801736c <lv_task_create>
 8022a70:	e01d      	b.n	8022aae <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type2: tos_DigitalType_Init(1,theme);
 8022a72:	79bb      	ldrb	r3, [r7, #6]
 8022a74:	4619      	mov	r1, r3
 8022a76:	2001      	movs	r0, #1
 8022a78:	f000 fc22 	bl	80232c0 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	2201      	movs	r2, #1
 8022a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022a84:	4821      	ldr	r0, [pc, #132]	; (8022b0c <tos_MainScreen_Init+0x124>)
 8022a86:	f7f4 fc71 	bl	801736c <lv_task_create>
 8022a8a:	e010      	b.n	8022aae <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type3: tos_AnalogueType_Init(theme);
 8022a8c:	79bb      	ldrb	r3, [r7, #6]
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f000 f848 	bl	8022b24 <tos_AnalogueType_Init>
	lv_task_create(analogueDataPrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 8022a94:	2300      	movs	r3, #0
 8022a96:	2201      	movs	r2, #1
 8022a98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022a9c:	481c      	ldr	r0, [pc, #112]	; (8022b10 <tos_MainScreen_Init+0x128>)
 8022a9e:	f7f4 fc65 	bl	801736c <lv_task_create>
 8022aa2:	e004      	b.n	8022aae <tos_MainScreen_Init+0xc6>
	default: tos_DigitalType_Init(0,theme);
 8022aa4:	79bb      	ldrb	r3, [r7, #6]
 8022aa6:	4619      	mov	r1, r3
 8022aa8:	2000      	movs	r0, #0
 8022aaa:	f000 fc09 	bl	80232c0 <tos_DigitalType_Init>
	}
	lv_task_create(batteryValueUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022aae:	2300      	movs	r3, #0
 8022ab0:	2201      	movs	r2, #1
 8022ab2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022ab6:	4817      	ldr	r0, [pc, #92]	; (8022b14 <tos_MainScreen_Init+0x12c>)
 8022ab8:	f7f4 fc58 	bl	801736c <lv_task_create>
	lv_task_create(bluetoothStatusUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022abc:	2300      	movs	r3, #0
 8022abe:	2201      	movs	r2, #1
 8022ac0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022ac4:	4814      	ldr	r0, [pc, #80]	; (8022b18 <tos_MainScreen_Init+0x130>)
 8022ac6:	f7f4 fc51 	bl	801736c <lv_task_create>
	lv_task_create(steps_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022aca:	2300      	movs	r3, #0
 8022acc:	2201      	movs	r2, #1
 8022ace:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022ad2:	4812      	ldr	r0, [pc, #72]	; (8022b1c <tos_MainScreen_Init+0x134>)
 8022ad4:	f7f4 fc4a 	bl	801736c <lv_task_create>
	lv_task_create(kCals_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022ad8:	2300      	movs	r3, #0
 8022ada:	2201      	movs	r2, #1
 8022adc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022ae0:	480f      	ldr	r0, [pc, #60]	; (8022b20 <tos_MainScreen_Init+0x138>)
 8022ae2:	f7f4 fc43 	bl	801736c <lv_task_create>



}
 8022ae6:	bf00      	nop
 8022ae8:	3708      	adds	r7, #8
 8022aea:	46bd      	mov	sp, r7
 8022aec:	bd80      	pop	{r7, pc}
 8022aee:	bf00      	nop
 8022af0:	2001bc3c 	.word	0x2001bc3c
 8022af4:	0802d55c 	.word	0x0802d55c
 8022af8:	2001ba40 	.word	0x2001ba40
 8022afc:	2001a6c4 	.word	0x2001a6c4
 8022b00:	0802d560 	.word	0x0802d560
 8022b04:	2001bbe0 	.word	0x2001bbe0
 8022b08:	2001bc59 	.word	0x2001bc59
 8022b0c:	08024361 	.word	0x08024361
 8022b10:	080244a9 	.word	0x080244a9
 8022b14:	08023fd5 	.word	0x08023fd5
 8022b18:	08024035 	.word	0x08024035
 8022b1c:	08024561 	.word	0x08024561
 8022b20:	080246a9 	.word	0x080246a9

08022b24 <tos_AnalogueType_Init>:

//Analogue Type
void tos_AnalogueType_Init(bool theme){
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b084      	sub	sp, #16
 8022b28:	af02      	add	r7, sp, #8
 8022b2a:	4603      	mov	r3, r0
 8022b2c:	71fb      	strb	r3, [r7, #7]

	static lv_style_t dDate_style,weekD_style;
    lv_style_copy(&dDate_style, &lv_style_plain);
 8022b2e:	49b9      	ldr	r1, [pc, #740]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022b30:	48b9      	ldr	r0, [pc, #740]	; (8022e18 <tos_AnalogueType_Init+0x2f4>)
 8022b32:	f7e9 f8b9 	bl	800bca8 <lv_style_copy>
    dDate_style.text.font =&digital_font_for_number_30;
 8022b36:	4bb8      	ldr	r3, [pc, #736]	; (8022e18 <tos_AnalogueType_Init+0x2f4>)
 8022b38:	4ab8      	ldr	r2, [pc, #736]	; (8022e1c <tos_AnalogueType_Init+0x2f8>)
 8022b3a:	625a      	str	r2, [r3, #36]	; 0x24
	lv_style_copy(&weekD_style, &lv_style_plain);
 8022b3c:	49b5      	ldr	r1, [pc, #724]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022b3e:	48b8      	ldr	r0, [pc, #736]	; (8022e20 <tos_AnalogueType_Init+0x2fc>)
 8022b40:	f7e9 f8b2 	bl	800bca8 <lv_style_copy>
	weekD_style.text.font =&lv_font_roboto_22;
 8022b44:	4bb6      	ldr	r3, [pc, #728]	; (8022e20 <tos_AnalogueType_Init+0x2fc>)
 8022b46:	4ab7      	ldr	r2, [pc, #732]	; (8022e24 <tos_AnalogueType_Init+0x300>)
 8022b48:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 8022b4a:	79fb      	ldrb	r3, [r7, #7]
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	d007      	beq.n	8022b60 <tos_AnalogueType_Init+0x3c>
    	dDate_style.text.color = LV_COLOR_SILVER;
 8022b50:	4ab1      	ldr	r2, [pc, #708]	; (8022e18 <tos_AnalogueType_Init+0x2f4>)
 8022b52:	4bb5      	ldr	r3, [pc, #724]	; (8022e28 <tos_AnalogueType_Init+0x304>)
 8022b54:	881b      	ldrh	r3, [r3, #0]
 8022b56:	8413      	strh	r3, [r2, #32]
    	weekD_style.text.color = LV_COLOR_SILVER;
 8022b58:	4ab1      	ldr	r2, [pc, #708]	; (8022e20 <tos_AnalogueType_Init+0x2fc>)
 8022b5a:	4bb3      	ldr	r3, [pc, #716]	; (8022e28 <tos_AnalogueType_Init+0x304>)
 8022b5c:	881b      	ldrh	r3, [r3, #0]
 8022b5e:	8413      	strh	r3, [r2, #32]
    }

    if(theme){
    }
    //Battery
    	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 8022b60:	f7ff ff19 	bl	8022996 <lv_scr_act>
 8022b64:	4603      	mov	r3, r0
 8022b66:	2100      	movs	r1, #0
 8022b68:	4618      	mov	r0, r3
 8022b6a:	f7f9 ff71 	bl	801ca50 <lv_label_create>
 8022b6e:	4602      	mov	r2, r0
 8022b70:	4bae      	ldr	r3, [pc, #696]	; (8022e2c <tos_AnalogueType_Init+0x308>)
 8022b72:	601a      	str	r2, [r3, #0]
    	lv_style_copy(&battery_style, &lv_style_plain);
 8022b74:	49a7      	ldr	r1, [pc, #668]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022b76:	48ae      	ldr	r0, [pc, #696]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022b78:	f7e9 f896 	bl	800bca8 <lv_style_copy>
    	battery_style.text.color = LV_COLOR_GREEN;
 8022b7c:	4aac      	ldr	r2, [pc, #688]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022b7e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022b82:	2104      	movs	r1, #4
 8022b84:	f361 0302 	bfi	r3, r1, #0, #3
 8022b88:	f882 3020 	strb.w	r3, [r2, #32]
 8022b8c:	4aa8      	ldr	r2, [pc, #672]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022b8e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022b92:	f36f 03c7 	bfc	r3, #3, #5
 8022b96:	f882 3020 	strb.w	r3, [r2, #32]
 8022b9a:	4aa5      	ldr	r2, [pc, #660]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022b9c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022ba0:	f36f 0304 	bfc	r3, #0, #5
 8022ba4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8022ba8:	4aa1      	ldr	r2, [pc, #644]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022baa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022bae:	f36f 1347 	bfc	r3, #5, #3
 8022bb2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 8022bb6:	4b9d      	ldr	r3, [pc, #628]	; (8022e2c <tos_AnalogueType_Init+0x308>)
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	4a9d      	ldr	r2, [pc, #628]	; (8022e30 <tos_AnalogueType_Init+0x30c>)
 8022bbc:	2100      	movs	r1, #0
 8022bbe:	4618      	mov	r0, r3
 8022bc0:	f7ff fef4 	bl	80229ac <lv_label_set_style>
    	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 8022bc4:	4b99      	ldr	r3, [pc, #612]	; (8022e2c <tos_AnalogueType_Init+0x308>)
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	499a      	ldr	r1, [pc, #616]	; (8022e34 <tos_AnalogueType_Init+0x310>)
 8022bca:	4618      	mov	r0, r3
 8022bcc:	f7fa f872 	bl	801ccb4 <lv_label_set_text>
    	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8022bd0:	4b96      	ldr	r3, [pc, #600]	; (8022e2c <tos_AnalogueType_Init+0x308>)
 8022bd2:	6818      	ldr	r0, [r3, #0]
 8022bd4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022bd8:	9300      	str	r3, [sp, #0]
 8022bda:	2364      	movs	r3, #100	; 0x64
 8022bdc:	2200      	movs	r2, #0
 8022bde:	2100      	movs	r1, #0
 8022be0:	f7e6 fe1e 	bl	8009820 <lv_obj_align>

    	//Bluetooth
    	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 8022be4:	f7ff fed7 	bl	8022996 <lv_scr_act>
 8022be8:	4603      	mov	r3, r0
 8022bea:	2100      	movs	r1, #0
 8022bec:	4618      	mov	r0, r3
 8022bee:	f7f9 ff2f 	bl	801ca50 <lv_label_create>
 8022bf2:	4602      	mov	r2, r0
 8022bf4:	4b90      	ldr	r3, [pc, #576]	; (8022e38 <tos_AnalogueType_Init+0x314>)
 8022bf6:	601a      	str	r2, [r3, #0]
        lv_style_copy(&bluetooth_style, &lv_style_plain);
 8022bf8:	4986      	ldr	r1, [pc, #536]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022bfa:	4890      	ldr	r0, [pc, #576]	; (8022e3c <tos_AnalogueType_Init+0x318>)
 8022bfc:	f7e9 f854 	bl	800bca8 <lv_style_copy>
    	bluetooth_style.text.color = LV_COLOR_WHITE;
 8022c00:	4a8e      	ldr	r2, [pc, #568]	; (8022e3c <tos_AnalogueType_Init+0x318>)
 8022c02:	4b8f      	ldr	r3, [pc, #572]	; (8022e40 <tos_AnalogueType_Init+0x31c>)
 8022c04:	881b      	ldrh	r3, [r3, #0]
 8022c06:	8413      	strh	r3, [r2, #32]
    	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 8022c08:	4b8b      	ldr	r3, [pc, #556]	; (8022e38 <tos_AnalogueType_Init+0x314>)
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	4a8b      	ldr	r2, [pc, #556]	; (8022e3c <tos_AnalogueType_Init+0x318>)
 8022c0e:	2100      	movs	r1, #0
 8022c10:	4618      	mov	r0, r3
 8022c12:	f7ff fecb 	bl	80229ac <lv_label_set_style>
    	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8022c16:	4b88      	ldr	r3, [pc, #544]	; (8022e38 <tos_AnalogueType_Init+0x314>)
 8022c18:	681b      	ldr	r3, [r3, #0]
 8022c1a:	498a      	ldr	r1, [pc, #552]	; (8022e44 <tos_AnalogueType_Init+0x320>)
 8022c1c:	4618      	mov	r0, r3
 8022c1e:	f7fa f849 	bl	801ccb4 <lv_label_set_text>
    	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8022c22:	4b85      	ldr	r3, [pc, #532]	; (8022e38 <tos_AnalogueType_Init+0x314>)
 8022c24:	6818      	ldr	r0, [r3, #0]
 8022c26:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022c2a:	9300      	str	r3, [sp, #0]
 8022c2c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022c30:	2200      	movs	r2, #0
 8022c32:	2100      	movs	r1, #0
 8022c34:	f7e6 fdf4 	bl	8009820 <lv_obj_align>
    	//

      //Analogue Quadran
    	static lv_style_t analogue_quadran_style;
       lv_style_copy(&analogue_quadran_style, &lv_style_pretty_color);
 8022c38:	4983      	ldr	r1, [pc, #524]	; (8022e48 <tos_AnalogueType_Init+0x324>)
 8022c3a:	4884      	ldr	r0, [pc, #528]	; (8022e4c <tos_AnalogueType_Init+0x328>)
 8022c3c:	f7e9 f834 	bl	800bca8 <lv_style_copy>
       analogue_quadran_style.line.width = 2;
 8022c40:	4b82      	ldr	r3, [pc, #520]	; (8022e4c <tos_AnalogueType_Init+0x328>)
 8022c42:	2202      	movs	r2, #2
 8022c44:	86da      	strh	r2, [r3, #54]	; 0x36
       analogue_quadran_style.line.color = LV_COLOR_SILVER;
 8022c46:	4a81      	ldr	r2, [pc, #516]	; (8022e4c <tos_AnalogueType_Init+0x328>)
 8022c48:	4b77      	ldr	r3, [pc, #476]	; (8022e28 <tos_AnalogueType_Init+0x304>)
 8022c4a:	881b      	ldrh	r3, [r3, #0]
 8022c4c:	8693      	strh	r3, [r2, #52]	; 0x34
       analogue_quadran_style.body.padding.left = 20;
 8022c4e:	4b7f      	ldr	r3, [pc, #508]	; (8022e4c <tos_AnalogueType_Init+0x328>)
 8022c50:	2214      	movs	r2, #20
 8022c52:	835a      	strh	r2, [r3, #26]


       analogueQuadran = lv_lmeter_create(lv_scr_act(), NULL);
 8022c54:	f7ff fe9f 	bl	8022996 <lv_scr_act>
 8022c58:	4603      	mov	r3, r0
 8022c5a:	2100      	movs	r1, #0
 8022c5c:	4618      	mov	r0, r3
 8022c5e:	f7fb fa1b 	bl	801e098 <lv_lmeter_create>
 8022c62:	4602      	mov	r2, r0
 8022c64:	4b7a      	ldr	r3, [pc, #488]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022c66:	601a      	str	r2, [r3, #0]
       lv_lmeter_set_range(analogueQuadran, 0, 59);
 8022c68:	4b79      	ldr	r3, [pc, #484]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022c6a:	681b      	ldr	r3, [r3, #0]
 8022c6c:	223b      	movs	r2, #59	; 0x3b
 8022c6e:	2100      	movs	r1, #0
 8022c70:	4618      	mov	r0, r3
 8022c72:	f7fb facb 	bl	801e20c <lv_lmeter_set_range>
       lv_lmeter_set_scale(analogueQuadran, 360, 60);
 8022c76:	4b76      	ldr	r3, [pc, #472]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022c78:	681b      	ldr	r3, [r3, #0]
 8022c7a:	223c      	movs	r2, #60	; 0x3c
 8022c7c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8022c80:	4618      	mov	r0, r3
 8022c82:	f7fb fb0d 	bl	801e2a0 <lv_lmeter_set_scale>
       lv_lmeter_set_style(analogueQuadran, LV_LMETER_STYLE_MAIN, &analogue_quadran_style);
 8022c86:	4b72      	ldr	r3, [pc, #456]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	4a70      	ldr	r2, [pc, #448]	; (8022e4c <tos_AnalogueType_Init+0x328>)
 8022c8c:	2100      	movs	r1, #0
 8022c8e:	4618      	mov	r0, r3
 8022c90:	f7ff fe9b 	bl	80229ca <lv_lmeter_set_style>
       lv_obj_set_size(analogueQuadran, 240, 240);
 8022c94:	4b6e      	ldr	r3, [pc, #440]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	22f0      	movs	r2, #240	; 0xf0
 8022c9a:	21f0      	movs	r1, #240	; 0xf0
 8022c9c:	4618      	mov	r0, r3
 8022c9e:	f7e6 fd1c 	bl	80096da <lv_obj_set_size>
       lv_obj_align(analogueQuadran, NULL, LV_ALIGN_CENTER, 0, 0);
 8022ca2:	4b6b      	ldr	r3, [pc, #428]	; (8022e50 <tos_AnalogueType_Init+0x32c>)
 8022ca4:	6818      	ldr	r0, [r3, #0]
 8022ca6:	2300      	movs	r3, #0
 8022ca8:	9300      	str	r3, [sp, #0]
 8022caa:	2300      	movs	r3, #0
 8022cac:	2200      	movs	r2, #0
 8022cae:	2100      	movs	r1, #0
 8022cb0:	f7e6 fdb6 	bl	8009820 <lv_obj_align>

       //Hours
       static lv_style_t hours_Style;
       	  lv_style_copy(&hours_Style, &lv_style_plain);
 8022cb4:	4957      	ldr	r1, [pc, #348]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022cb6:	4867      	ldr	r0, [pc, #412]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022cb8:	f7e8 fff6 	bl	800bca8 <lv_style_copy>
       	  hours_Style.line.color = LV_COLOR_MAGENTA;
 8022cbc:	4a65      	ldr	r2, [pc, #404]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022cbe:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022cc2:	f36f 0302 	bfc	r3, #0, #3
 8022cc6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022cca:	4a62      	ldr	r2, [pc, #392]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022ccc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022cd0:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022cd4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022cd8:	4a5e      	ldr	r2, [pc, #376]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022cda:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022cde:	f043 031f 	orr.w	r3, r3, #31
 8022ce2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022ce6:	4a5b      	ldr	r2, [pc, #364]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022ce8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022cec:	f36f 1347 	bfc	r3, #5, #3
 8022cf0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       	  hours_Style.line.width = 3;
 8022cf4:	4b57      	ldr	r3, [pc, #348]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022cf6:	2203      	movs	r2, #3
 8022cf8:	86da      	strh	r2, [r3, #54]	; 0x36

       	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 8022cfa:	f7ff fe4c 	bl	8022996 <lv_scr_act>
 8022cfe:	4603      	mov	r3, r0
 8022d00:	2100      	movs	r1, #0
 8022d02:	4618      	mov	r0, r3
 8022d04:	f7f5 f8a2 	bl	8017e4c <lv_arc_create>
 8022d08:	4602      	mov	r2, r0
 8022d0a:	4b53      	ldr	r3, [pc, #332]	; (8022e58 <tos_AnalogueType_Init+0x334>)
 8022d0c:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(hoursArc, 240, 240);
 8022d0e:	4b52      	ldr	r3, [pc, #328]	; (8022e58 <tos_AnalogueType_Init+0x334>)
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	22f0      	movs	r2, #240	; 0xf0
 8022d14:	21f0      	movs	r1, #240	; 0xf0
 8022d16:	4618      	mov	r0, r3
 8022d18:	f7e6 fcdf 	bl	80096da <lv_obj_set_size>
       	  lv_arc_set_angles(hoursArc, 180, 180);
 8022d1c:	4b4e      	ldr	r3, [pc, #312]	; (8022e58 <tos_AnalogueType_Init+0x334>)
 8022d1e:	681b      	ldr	r3, [r3, #0]
 8022d20:	22b4      	movs	r2, #180	; 0xb4
 8022d22:	21b4      	movs	r1, #180	; 0xb4
 8022d24:	4618      	mov	r0, r3
 8022d26:	f7f5 f90d 	bl	8017f44 <lv_arc_set_angles>
       	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 8022d2a:	4b4b      	ldr	r3, [pc, #300]	; (8022e58 <tos_AnalogueType_Init+0x334>)
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	4a49      	ldr	r2, [pc, #292]	; (8022e54 <tos_AnalogueType_Init+0x330>)
 8022d30:	2100      	movs	r1, #0
 8022d32:	4618      	mov	r0, r3
 8022d34:	f7f5 f92f 	bl	8017f96 <lv_arc_set_style>
       	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022d38:	4b47      	ldr	r3, [pc, #284]	; (8022e58 <tos_AnalogueType_Init+0x334>)
 8022d3a:	6818      	ldr	r0, [r3, #0]
 8022d3c:	2300      	movs	r3, #0
 8022d3e:	9300      	str	r3, [sp, #0]
 8022d40:	2300      	movs	r3, #0
 8022d42:	2200      	movs	r2, #0
 8022d44:	2100      	movs	r1, #0
 8022d46:	f7e6 fd6b 	bl	8009820 <lv_obj_align>

       	  //Minutes
       	static lv_style_t minutes_Style;
       	  lv_style_copy(&minutes_Style, &lv_style_plain);
 8022d4a:	4932      	ldr	r1, [pc, #200]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022d4c:	4843      	ldr	r0, [pc, #268]	; (8022e5c <tos_AnalogueType_Init+0x338>)
 8022d4e:	f7e8 ffab 	bl	800bca8 <lv_style_copy>
       	  minutes_Style.line.color = LV_COLOR_AQUA;
 8022d52:	4a42      	ldr	r2, [pc, #264]	; (8022e5c <tos_AnalogueType_Init+0x338>)
 8022d54:	4b42      	ldr	r3, [pc, #264]	; (8022e60 <tos_AnalogueType_Init+0x33c>)
 8022d56:	881b      	ldrh	r3, [r3, #0]
 8022d58:	8693      	strh	r3, [r2, #52]	; 0x34
       	  minutes_Style.line.width = 3;
 8022d5a:	4b40      	ldr	r3, [pc, #256]	; (8022e5c <tos_AnalogueType_Init+0x338>)
 8022d5c:	2203      	movs	r2, #3
 8022d5e:	86da      	strh	r2, [r3, #54]	; 0x36

       	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 8022d60:	f7ff fe19 	bl	8022996 <lv_scr_act>
 8022d64:	4603      	mov	r3, r0
 8022d66:	2100      	movs	r1, #0
 8022d68:	4618      	mov	r0, r3
 8022d6a:	f7f5 f86f 	bl	8017e4c <lv_arc_create>
 8022d6e:	4602      	mov	r2, r0
 8022d70:	4b3c      	ldr	r3, [pc, #240]	; (8022e64 <tos_AnalogueType_Init+0x340>)
 8022d72:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(minutesArc, 225, 225);
 8022d74:	4b3b      	ldr	r3, [pc, #236]	; (8022e64 <tos_AnalogueType_Init+0x340>)
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	22e1      	movs	r2, #225	; 0xe1
 8022d7a:	21e1      	movs	r1, #225	; 0xe1
 8022d7c:	4618      	mov	r0, r3
 8022d7e:	f7e6 fcac 	bl	80096da <lv_obj_set_size>
       	  lv_arc_set_angles(minutesArc, 180, 180);
 8022d82:	4b38      	ldr	r3, [pc, #224]	; (8022e64 <tos_AnalogueType_Init+0x340>)
 8022d84:	681b      	ldr	r3, [r3, #0]
 8022d86:	22b4      	movs	r2, #180	; 0xb4
 8022d88:	21b4      	movs	r1, #180	; 0xb4
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	f7f5 f8da 	bl	8017f44 <lv_arc_set_angles>
       	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 8022d90:	4b34      	ldr	r3, [pc, #208]	; (8022e64 <tos_AnalogueType_Init+0x340>)
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4a31      	ldr	r2, [pc, #196]	; (8022e5c <tos_AnalogueType_Init+0x338>)
 8022d96:	2100      	movs	r1, #0
 8022d98:	4618      	mov	r0, r3
 8022d9a:	f7f5 f8fc 	bl	8017f96 <lv_arc_set_style>
       	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022d9e:	4b31      	ldr	r3, [pc, #196]	; (8022e64 <tos_AnalogueType_Init+0x340>)
 8022da0:	6818      	ldr	r0, [r3, #0]
 8022da2:	2300      	movs	r3, #0
 8022da4:	9300      	str	r3, [sp, #0]
 8022da6:	2300      	movs	r3, #0
 8022da8:	2200      	movs	r2, #0
 8022daa:	2100      	movs	r1, #0
 8022dac:	f7e6 fd38 	bl	8009820 <lv_obj_align>

       	  //Seconds
       	static lv_style_t seconds_Style;
       	  lv_style_copy(&seconds_Style, &lv_style_plain);
 8022db0:	4918      	ldr	r1, [pc, #96]	; (8022e14 <tos_AnalogueType_Init+0x2f0>)
 8022db2:	482d      	ldr	r0, [pc, #180]	; (8022e68 <tos_AnalogueType_Init+0x344>)
 8022db4:	f7e8 ff78 	bl	800bca8 <lv_style_copy>
       	  seconds_Style.line.color = LV_COLOR_ORANGE;
 8022db8:	4a2b      	ldr	r2, [pc, #172]	; (8022e68 <tos_AnalogueType_Init+0x344>)
 8022dba:	4b2c      	ldr	r3, [pc, #176]	; (8022e6c <tos_AnalogueType_Init+0x348>)
 8022dbc:	881b      	ldrh	r3, [r3, #0]
 8022dbe:	8693      	strh	r3, [r2, #52]	; 0x34
       	  seconds_Style.line.width = 3;
 8022dc0:	4b29      	ldr	r3, [pc, #164]	; (8022e68 <tos_AnalogueType_Init+0x344>)
 8022dc2:	2203      	movs	r2, #3
 8022dc4:	86da      	strh	r2, [r3, #54]	; 0x36

       	  secondsArc = lv_arc_create(lv_scr_act(), NULL);
 8022dc6:	f7ff fde6 	bl	8022996 <lv_scr_act>
 8022dca:	4603      	mov	r3, r0
 8022dcc:	2100      	movs	r1, #0
 8022dce:	4618      	mov	r0, r3
 8022dd0:	f7f5 f83c 	bl	8017e4c <lv_arc_create>
 8022dd4:	4602      	mov	r2, r0
 8022dd6:	4b26      	ldr	r3, [pc, #152]	; (8022e70 <tos_AnalogueType_Init+0x34c>)
 8022dd8:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(secondsArc, 205, 205);
 8022dda:	4b25      	ldr	r3, [pc, #148]	; (8022e70 <tos_AnalogueType_Init+0x34c>)
 8022ddc:	681b      	ldr	r3, [r3, #0]
 8022dde:	22cd      	movs	r2, #205	; 0xcd
 8022de0:	21cd      	movs	r1, #205	; 0xcd
 8022de2:	4618      	mov	r0, r3
 8022de4:	f7e6 fc79 	bl	80096da <lv_obj_set_size>
       	  lv_arc_set_angles(secondsArc, 180, 180);
 8022de8:	4b21      	ldr	r3, [pc, #132]	; (8022e70 <tos_AnalogueType_Init+0x34c>)
 8022dea:	681b      	ldr	r3, [r3, #0]
 8022dec:	22b4      	movs	r2, #180	; 0xb4
 8022dee:	21b4      	movs	r1, #180	; 0xb4
 8022df0:	4618      	mov	r0, r3
 8022df2:	f7f5 f8a7 	bl	8017f44 <lv_arc_set_angles>
       	  lv_arc_set_style(secondsArc, LV_ARC_STYLE_MAIN, &seconds_Style);
 8022df6:	4b1e      	ldr	r3, [pc, #120]	; (8022e70 <tos_AnalogueType_Init+0x34c>)
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	4a1b      	ldr	r2, [pc, #108]	; (8022e68 <tos_AnalogueType_Init+0x344>)
 8022dfc:	2100      	movs	r1, #0
 8022dfe:	4618      	mov	r0, r3
 8022e00:	f7f5 f8c9 	bl	8017f96 <lv_arc_set_style>
       	  lv_obj_align(secondsArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022e04:	4b1a      	ldr	r3, [pc, #104]	; (8022e70 <tos_AnalogueType_Init+0x34c>)
 8022e06:	6818      	ldr	r0, [r3, #0]
 8022e08:	2300      	movs	r3, #0
 8022e0a:	9300      	str	r3, [sp, #0]
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	2200      	movs	r2, #0
 8022e10:	2100      	movs	r1, #0
 8022e12:	e02f      	b.n	8022e74 <tos_AnalogueType_Init+0x350>
 8022e14:	2001ba40 	.word	0x2001ba40
 8022e18:	2001a700 	.word	0x2001a700
 8022e1c:	200027ec 	.word	0x200027ec
 8022e20:	2001a73c 	.word	0x2001a73c
 8022e24:	200017c4 	.word	0x200017c4
 8022e28:	0802d594 	.word	0x0802d594
 8022e2c:	2001bca8 	.word	0x2001bca8
 8022e30:	2001bc60 	.word	0x2001bc60
 8022e34:	0802d564 	.word	0x0802d564
 8022e38:	2001bc44 	.word	0x2001bc44
 8022e3c:	2001bbfc 	.word	0x2001bbfc
 8022e40:	0802d560 	.word	0x0802d560
 8022e44:	0802d568 	.word	0x0802d568
 8022e48:	2001b860 	.word	0x2001b860
 8022e4c:	2001a778 	.word	0x2001a778
 8022e50:	2001bca0 	.word	0x2001bca0
 8022e54:	2001a7b4 	.word	0x2001a7b4
 8022e58:	2001bbf8 	.word	0x2001bbf8
 8022e5c:	2001a7f0 	.word	0x2001a7f0
 8022e60:	0802d598 	.word	0x0802d598
 8022e64:	2001bc38 	.word	0x2001bc38
 8022e68:	2001a82c 	.word	0x2001a82c
 8022e6c:	0802d59c 	.word	0x0802d59c
 8022e70:	2001bbe8 	.word	0x2001bbe8
 8022e74:	f7e6 fcd4 	bl	8009820 <lv_obj_align>

       	 //Steps
       	static lv_style_t steps_Style,description_Style;
       			   		  lv_style_copy(&steps_Style, &lv_style_plain);
 8022e78:	49c0      	ldr	r1, [pc, #768]	; (802317c <tos_AnalogueType_Init+0x658>)
 8022e7a:	48c1      	ldr	r0, [pc, #772]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022e7c:	f7e8 ff14 	bl	800bca8 <lv_style_copy>
       			   		  steps_Style.line.color = LV_COLOR_GREEN;
 8022e80:	4abf      	ldr	r2, [pc, #764]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022e82:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022e86:	2104      	movs	r1, #4
 8022e88:	f361 0302 	bfi	r3, r1, #0, #3
 8022e8c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022e90:	4abb      	ldr	r2, [pc, #748]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022e92:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022e96:	f36f 03c7 	bfc	r3, #3, #5
 8022e9a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022e9e:	4ab8      	ldr	r2, [pc, #736]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ea0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022ea4:	f36f 0304 	bfc	r3, #0, #5
 8022ea8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022eac:	4ab4      	ldr	r2, [pc, #720]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022eae:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022eb2:	f36f 1347 	bfc	r3, #5, #3
 8022eb6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  steps_Style.line.width = 5;
 8022eba:	4bb1      	ldr	r3, [pc, #708]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ebc:	2205      	movs	r2, #5
 8022ebe:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  steps_Style.text.color = LV_COLOR_GREEN;
 8022ec0:	4aaf      	ldr	r2, [pc, #700]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ec2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022ec6:	2104      	movs	r1, #4
 8022ec8:	f361 0302 	bfi	r3, r1, #0, #3
 8022ecc:	f882 3020 	strb.w	r3, [r2, #32]
 8022ed0:	4aab      	ldr	r2, [pc, #684]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ed2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022ed6:	f36f 03c7 	bfc	r3, #3, #5
 8022eda:	f882 3020 	strb.w	r3, [r2, #32]
 8022ede:	4aa8      	ldr	r2, [pc, #672]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ee0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022ee4:	f36f 0304 	bfc	r3, #0, #5
 8022ee8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8022eec:	4aa4      	ldr	r2, [pc, #656]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022eee:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022ef2:	f36f 1347 	bfc	r3, #5, #3
 8022ef6:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  steps_Style.text.font = &lv_font_roboto_22;
 8022efa:	4ba1      	ldr	r3, [pc, #644]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022efc:	4aa1      	ldr	r2, [pc, #644]	; (8023184 <tos_AnalogueType_Init+0x660>)
 8022efe:	625a      	str	r2, [r3, #36]	; 0x24

       			   		  lv_style_copy(&description_Style, &lv_style_plain);
 8022f00:	499e      	ldr	r1, [pc, #632]	; (802317c <tos_AnalogueType_Init+0x658>)
 8022f02:	48a1      	ldr	r0, [pc, #644]	; (8023188 <tos_AnalogueType_Init+0x664>)
 8022f04:	f7e8 fed0 	bl	800bca8 <lv_style_copy>
       			   		  description_Style.text.font = &lv_font_unscii_8;
 8022f08:	4b9f      	ldr	r3, [pc, #636]	; (8023188 <tos_AnalogueType_Init+0x664>)
 8022f0a:	4aa0      	ldr	r2, [pc, #640]	; (802318c <tos_AnalogueType_Init+0x668>)
 8022f0c:	625a      	str	r2, [r3, #36]	; 0x24
       			   		  description_Style.text.color = LV_COLOR_GRAY;
 8022f0e:	4a9e      	ldr	r2, [pc, #632]	; (8023188 <tos_AnalogueType_Init+0x664>)
 8022f10:	4b9f      	ldr	r3, [pc, #636]	; (8023190 <tos_AnalogueType_Init+0x66c>)
 8022f12:	881b      	ldrh	r3, [r3, #0]
 8022f14:	8413      	strh	r3, [r2, #32]
       			   		    if(theme){
 8022f16:	79fb      	ldrb	r3, [r7, #7]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d003      	beq.n	8022f24 <tos_AnalogueType_Init+0x400>
       			   		    	description_Style.text.color = LV_COLOR_WHITE;
 8022f1c:	4a9a      	ldr	r2, [pc, #616]	; (8023188 <tos_AnalogueType_Init+0x664>)
 8022f1e:	4b9d      	ldr	r3, [pc, #628]	; (8023194 <tos_AnalogueType_Init+0x670>)
 8022f20:	881b      	ldrh	r3, [r3, #0]
 8022f22:	8413      	strh	r3, [r2, #32]
       			   		    }

       			   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8022f24:	f7ff fd37 	bl	8022996 <lv_scr_act>
 8022f28:	4603      	mov	r3, r0
 8022f2a:	2100      	movs	r1, #0
 8022f2c:	4618      	mov	r0, r3
 8022f2e:	f7f9 fd8f 	bl	801ca50 <lv_label_create>
 8022f32:	4602      	mov	r2, r0
 8022f34:	4b98      	ldr	r3, [pc, #608]	; (8023198 <tos_AnalogueType_Init+0x674>)
 8022f36:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(stepsLbl, 150);
 8022f38:	4b97      	ldr	r3, [pc, #604]	; (8023198 <tos_AnalogueType_Init+0x674>)
 8022f3a:	681b      	ldr	r3, [r3, #0]
 8022f3c:	2196      	movs	r1, #150	; 0x96
 8022f3e:	4618      	mov	r0, r3
 8022f40:	f7e6 fc44 	bl	80097cc <lv_obj_set_width>
       			   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8022f44:	4b94      	ldr	r3, [pc, #592]	; (8023198 <tos_AnalogueType_Init+0x674>)
 8022f46:	681b      	ldr	r3, [r3, #0]
 8022f48:	4a8d      	ldr	r2, [pc, #564]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022f4a:	2100      	movs	r1, #0
 8022f4c:	4618      	mov	r0, r3
 8022f4e:	f7ff fd2d 	bl	80229ac <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", steps);
 8022f52:	4b92      	ldr	r3, [pc, #584]	; (802319c <tos_AnalogueType_Init+0x678>)
 8022f54:	881b      	ldrh	r3, [r3, #0]
 8022f56:	4a92      	ldr	r2, [pc, #584]	; (80231a0 <tos_AnalogueType_Init+0x67c>)
 8022f58:	2108      	movs	r1, #8
 8022f5a:	4892      	ldr	r0, [pc, #584]	; (80231a4 <tos_AnalogueType_Init+0x680>)
 8022f5c:	f008 f924 	bl	802b1a8 <sniprintf>
       			   		 lv_label_set_text(stepsLbl, buffer);
 8022f60:	4b8d      	ldr	r3, [pc, #564]	; (8023198 <tos_AnalogueType_Init+0x674>)
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	498f      	ldr	r1, [pc, #572]	; (80231a4 <tos_AnalogueType_Init+0x680>)
 8022f66:	4618      	mov	r0, r3
 8022f68:	f7f9 fea4 	bl	801ccb4 <lv_label_set_text>
       			   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 8022f6c:	4b8a      	ldr	r3, [pc, #552]	; (8023198 <tos_AnalogueType_Init+0x674>)
 8022f6e:	6818      	ldr	r0, [r3, #0]
 8022f70:	2328      	movs	r3, #40	; 0x28
 8022f72:	9300      	str	r3, [sp, #0]
 8022f74:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8022f78:	2200      	movs	r2, #0
 8022f7a:	2100      	movs	r1, #0
 8022f7c:	f7e6 fc50 	bl	8009820 <lv_obj_align>

       			         stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022f80:	f7ff fd09 	bl	8022996 <lv_scr_act>
 8022f84:	4603      	mov	r3, r0
 8022f86:	2100      	movs	r1, #0
 8022f88:	4618      	mov	r0, r3
 8022f8a:	f7f9 fd61 	bl	801ca50 <lv_label_create>
 8022f8e:	4602      	mov	r2, r0
 8022f90:	4b85      	ldr	r3, [pc, #532]	; (80231a8 <tos_AnalogueType_Init+0x684>)
 8022f92:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022f94:	4b84      	ldr	r3, [pc, #528]	; (80231a8 <tos_AnalogueType_Init+0x684>)
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	4a7b      	ldr	r2, [pc, #492]	; (8023188 <tos_AnalogueType_Init+0x664>)
 8022f9a:	2100      	movs	r1, #0
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	f7ff fd05 	bl	80229ac <lv_label_set_style>
       			   		 lv_label_set_text(stepsDescLbl, "steps");
 8022fa2:	4b81      	ldr	r3, [pc, #516]	; (80231a8 <tos_AnalogueType_Init+0x684>)
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4981      	ldr	r1, [pc, #516]	; (80231ac <tos_AnalogueType_Init+0x688>)
 8022fa8:	4618      	mov	r0, r3
 8022faa:	f7f9 fe83 	bl	801ccb4 <lv_label_set_text>
       			   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -40, 55);
 8022fae:	4b7e      	ldr	r3, [pc, #504]	; (80231a8 <tos_AnalogueType_Init+0x684>)
 8022fb0:	6818      	ldr	r0, [r3, #0]
 8022fb2:	2337      	movs	r3, #55	; 0x37
 8022fb4:	9300      	str	r3, [sp, #0]
 8022fb6:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8022fba:	2200      	movs	r2, #0
 8022fbc:	2100      	movs	r1, #0
 8022fbe:	f7e6 fc2f 	bl	8009820 <lv_obj_align>

       			   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8022fc2:	f7ff fce8 	bl	8022996 <lv_scr_act>
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	2100      	movs	r1, #0
 8022fca:	4618      	mov	r0, r3
 8022fcc:	f7f4 ff3e 	bl	8017e4c <lv_arc_create>
 8022fd0:	4602      	mov	r2, r0
 8022fd2:	4b77      	ldr	r3, [pc, #476]	; (80231b0 <tos_AnalogueType_Init+0x68c>)
 8022fd4:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(stepsArc, 65, 65);
 8022fd6:	4b76      	ldr	r3, [pc, #472]	; (80231b0 <tos_AnalogueType_Init+0x68c>)
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	2241      	movs	r2, #65	; 0x41
 8022fdc:	2141      	movs	r1, #65	; 0x41
 8022fde:	4618      	mov	r0, r3
 8022fe0:	f7e6 fb7b 	bl	80096da <lv_obj_set_size>
       			   		  lv_arc_set_angles(stepsArc, 0, 360);
 8022fe4:	4b72      	ldr	r3, [pc, #456]	; (80231b0 <tos_AnalogueType_Init+0x68c>)
 8022fe6:	681b      	ldr	r3, [r3, #0]
 8022fe8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022fec:	2100      	movs	r1, #0
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f7f4 ffa8 	bl	8017f44 <lv_arc_set_angles>
       			   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8022ff4:	4b6e      	ldr	r3, [pc, #440]	; (80231b0 <tos_AnalogueType_Init+0x68c>)
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	4a61      	ldr	r2, [pc, #388]	; (8023180 <tos_AnalogueType_Init+0x65c>)
 8022ffa:	2100      	movs	r1, #0
 8022ffc:	4618      	mov	r0, r3
 8022ffe:	f7f4 ffca 	bl	8017f96 <lv_arc_set_style>
       			   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -40, 40);
 8023002:	4b6b      	ldr	r3, [pc, #428]	; (80231b0 <tos_AnalogueType_Init+0x68c>)
 8023004:	6818      	ldr	r0, [r3, #0]
 8023006:	2328      	movs	r3, #40	; 0x28
 8023008:	9300      	str	r3, [sp, #0]
 802300a:	f06f 0327 	mvn.w	r3, #39	; 0x27
 802300e:	2200      	movs	r2, #0
 8023010:	2100      	movs	r1, #0
 8023012:	f7e6 fc05 	bl	8009820 <lv_obj_align>

       			   		  //Kcal
       			   	static lv_style_t kCals_Style;
       			   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8023016:	4959      	ldr	r1, [pc, #356]	; (802317c <tos_AnalogueType_Init+0x658>)
 8023018:	4866      	ldr	r0, [pc, #408]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802301a:	f7e8 fe45 	bl	800bca8 <lv_style_copy>
       			   		  kCals_Style.line.color = LV_COLOR_RED;
 802301e:	4a65      	ldr	r2, [pc, #404]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 8023020:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023024:	f36f 0302 	bfc	r3, #0, #3
 8023028:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802302c:	4a61      	ldr	r2, [pc, #388]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802302e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023032:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023036:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802303a:	4a5e      	ldr	r2, [pc, #376]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802303c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023040:	f36f 0304 	bfc	r3, #0, #5
 8023044:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8023048:	4a5a      	ldr	r2, [pc, #360]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802304a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802304e:	f36f 1347 	bfc	r3, #5, #3
 8023052:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  kCals_Style.line.width = 3;
 8023056:	4b57      	ldr	r3, [pc, #348]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 8023058:	2203      	movs	r2, #3
 802305a:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  kCals_Style.text.color = LV_COLOR_RED;
 802305c:	4a55      	ldr	r2, [pc, #340]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802305e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023062:	f36f 0302 	bfc	r3, #0, #3
 8023066:	f882 3020 	strb.w	r3, [r2, #32]
 802306a:	4a52      	ldr	r2, [pc, #328]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802306c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023070:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023074:	f882 3020 	strb.w	r3, [r2, #32]
 8023078:	4a4e      	ldr	r2, [pc, #312]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802307a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802307e:	f36f 0304 	bfc	r3, #0, #5
 8023082:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8023086:	4a4b      	ldr	r2, [pc, #300]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 8023088:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802308c:	f36f 1347 	bfc	r3, #5, #3
 8023090:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  kCals_Style.text.font = &lv_font_roboto_22;
 8023094:	4b47      	ldr	r3, [pc, #284]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 8023096:	4a3b      	ldr	r2, [pc, #236]	; (8023184 <tos_AnalogueType_Init+0x660>)
 8023098:	625a      	str	r2, [r3, #36]	; 0x24

       			   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 802309a:	f7ff fc7c 	bl	8022996 <lv_scr_act>
 802309e:	4603      	mov	r3, r0
 80230a0:	2100      	movs	r1, #0
 80230a2:	4618      	mov	r0, r3
 80230a4:	f7f9 fcd4 	bl	801ca50 <lv_label_create>
 80230a8:	4602      	mov	r2, r0
 80230aa:	4b43      	ldr	r3, [pc, #268]	; (80231b8 <tos_AnalogueType_Init+0x694>)
 80230ac:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(kCalsLbl, 150);
 80230ae:	4b42      	ldr	r3, [pc, #264]	; (80231b8 <tos_AnalogueType_Init+0x694>)
 80230b0:	681b      	ldr	r3, [r3, #0]
 80230b2:	2196      	movs	r1, #150	; 0x96
 80230b4:	4618      	mov	r0, r3
 80230b6:	f7e6 fb89 	bl	80097cc <lv_obj_set_width>
       			   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80230ba:	4b3f      	ldr	r3, [pc, #252]	; (80231b8 <tos_AnalogueType_Init+0x694>)
 80230bc:	681b      	ldr	r3, [r3, #0]
 80230be:	4a3d      	ldr	r2, [pc, #244]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 80230c0:	2100      	movs	r1, #0
 80230c2:	4618      	mov	r0, r3
 80230c4:	f7ff fc72 	bl	80229ac <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", kCals);
 80230c8:	4b3c      	ldr	r3, [pc, #240]	; (80231bc <tos_AnalogueType_Init+0x698>)
 80230ca:	881b      	ldrh	r3, [r3, #0]
 80230cc:	4a34      	ldr	r2, [pc, #208]	; (80231a0 <tos_AnalogueType_Init+0x67c>)
 80230ce:	2108      	movs	r1, #8
 80230d0:	4834      	ldr	r0, [pc, #208]	; (80231a4 <tos_AnalogueType_Init+0x680>)
 80230d2:	f008 f869 	bl	802b1a8 <sniprintf>
       			   		 lv_label_set_text(kCalsLbl, buffer);
 80230d6:	4b38      	ldr	r3, [pc, #224]	; (80231b8 <tos_AnalogueType_Init+0x694>)
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	4932      	ldr	r1, [pc, #200]	; (80231a4 <tos_AnalogueType_Init+0x680>)
 80230dc:	4618      	mov	r0, r3
 80230de:	f7f9 fde9 	bl	801ccb4 <lv_label_set_text>
       			   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 80230e2:	4b35      	ldr	r3, [pc, #212]	; (80231b8 <tos_AnalogueType_Init+0x694>)
 80230e4:	6818      	ldr	r0, [r3, #0]
 80230e6:	2328      	movs	r3, #40	; 0x28
 80230e8:	9300      	str	r3, [sp, #0]
 80230ea:	2328      	movs	r3, #40	; 0x28
 80230ec:	2200      	movs	r2, #0
 80230ee:	2100      	movs	r1, #0
 80230f0:	f7e6 fb96 	bl	8009820 <lv_obj_align>

       			   		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 80230f4:	f7ff fc4f 	bl	8022996 <lv_scr_act>
 80230f8:	4603      	mov	r3, r0
 80230fa:	2100      	movs	r1, #0
 80230fc:	4618      	mov	r0, r3
 80230fe:	f7f9 fca7 	bl	801ca50 <lv_label_create>
 8023102:	4602      	mov	r2, r0
 8023104:	4b2e      	ldr	r3, [pc, #184]	; (80231c0 <tos_AnalogueType_Init+0x69c>)
 8023106:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023108:	4b2d      	ldr	r3, [pc, #180]	; (80231c0 <tos_AnalogueType_Init+0x69c>)
 802310a:	681b      	ldr	r3, [r3, #0]
 802310c:	4a1e      	ldr	r2, [pc, #120]	; (8023188 <tos_AnalogueType_Init+0x664>)
 802310e:	2100      	movs	r1, #0
 8023110:	4618      	mov	r0, r3
 8023112:	f7ff fc4b 	bl	80229ac <lv_label_set_style>
       			   		 lv_label_set_text(kCalsDescLbl, "kCals");
 8023116:	4b2a      	ldr	r3, [pc, #168]	; (80231c0 <tos_AnalogueType_Init+0x69c>)
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	492a      	ldr	r1, [pc, #168]	; (80231c4 <tos_AnalogueType_Init+0x6a0>)
 802311c:	4618      	mov	r0, r3
 802311e:	f7f9 fdc9 	bl	801ccb4 <lv_label_set_text>
       			   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 40, 55);
 8023122:	4b27      	ldr	r3, [pc, #156]	; (80231c0 <tos_AnalogueType_Init+0x69c>)
 8023124:	6818      	ldr	r0, [r3, #0]
 8023126:	2337      	movs	r3, #55	; 0x37
 8023128:	9300      	str	r3, [sp, #0]
 802312a:	2328      	movs	r3, #40	; 0x28
 802312c:	2200      	movs	r2, #0
 802312e:	2100      	movs	r1, #0
 8023130:	f7e6 fb76 	bl	8009820 <lv_obj_align>

       			   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8023134:	f7ff fc2f 	bl	8022996 <lv_scr_act>
 8023138:	4603      	mov	r3, r0
 802313a:	2100      	movs	r1, #0
 802313c:	4618      	mov	r0, r3
 802313e:	f7f4 fe85 	bl	8017e4c <lv_arc_create>
 8023142:	4602      	mov	r2, r0
 8023144:	4b20      	ldr	r3, [pc, #128]	; (80231c8 <tos_AnalogueType_Init+0x6a4>)
 8023146:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(kCalsArc, 65, 65);
 8023148:	4b1f      	ldr	r3, [pc, #124]	; (80231c8 <tos_AnalogueType_Init+0x6a4>)
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	2241      	movs	r2, #65	; 0x41
 802314e:	2141      	movs	r1, #65	; 0x41
 8023150:	4618      	mov	r0, r3
 8023152:	f7e6 fac2 	bl	80096da <lv_obj_set_size>
       			   		  lv_arc_set_angles(kCalsArc, 0, 360);
 8023156:	4b1c      	ldr	r3, [pc, #112]	; (80231c8 <tos_AnalogueType_Init+0x6a4>)
 8023158:	681b      	ldr	r3, [r3, #0]
 802315a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802315e:	2100      	movs	r1, #0
 8023160:	4618      	mov	r0, r3
 8023162:	f7f4 feef 	bl	8017f44 <lv_arc_set_angles>
       			   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8023166:	4b18      	ldr	r3, [pc, #96]	; (80231c8 <tos_AnalogueType_Init+0x6a4>)
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	4a12      	ldr	r2, [pc, #72]	; (80231b4 <tos_AnalogueType_Init+0x690>)
 802316c:	2100      	movs	r1, #0
 802316e:	4618      	mov	r0, r3
 8023170:	f7f4 ff11 	bl	8017f96 <lv_arc_set_style>
       			   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 40, 40);
 8023174:	4b14      	ldr	r3, [pc, #80]	; (80231c8 <tos_AnalogueType_Init+0x6a4>)
 8023176:	6818      	ldr	r0, [r3, #0]
 8023178:	e028      	b.n	80231cc <tos_AnalogueType_Init+0x6a8>
 802317a:	bf00      	nop
 802317c:	2001ba40 	.word	0x2001ba40
 8023180:	2001a868 	.word	0x2001a868
 8023184:	200017c4 	.word	0x200017c4
 8023188:	2001a8a4 	.word	0x2001a8a4
 802318c:	200026d0 	.word	0x200026d0
 8023190:	0802d5a0 	.word	0x0802d5a0
 8023194:	0802d560 	.word	0x0802d560
 8023198:	2001bc5c 	.word	0x2001bc5c
 802319c:	2001b5cc 	.word	0x2001b5cc
 80231a0:	0802d56c 	.word	0x0802d56c
 80231a4:	2001bc48 	.word	0x2001bc48
 80231a8:	2001bbf4 	.word	0x2001bbf4
 80231ac:	0802d574 	.word	0x0802d574
 80231b0:	2001bc40 	.word	0x2001bc40
 80231b4:	2001a8e0 	.word	0x2001a8e0
 80231b8:	2001bcb8 	.word	0x2001bcb8
 80231bc:	2001bbe2 	.word	0x2001bbe2
 80231c0:	2001bca4 	.word	0x2001bca4
 80231c4:	0802d57c 	.word	0x0802d57c
 80231c8:	2001bcc0 	.word	0x2001bcc0
 80231cc:	2328      	movs	r3, #40	; 0x28
 80231ce:	9300      	str	r3, [sp, #0]
 80231d0:	2328      	movs	r3, #40	; 0x28
 80231d2:	2200      	movs	r2, #0
 80231d4:	2100      	movs	r1, #0
 80231d6:	f7e6 fb23 	bl	8009820 <lv_obj_align>

       			       //Digital Date
       			   		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 80231da:	f7ff fbdc 	bl	8022996 <lv_scr_act>
 80231de:	4603      	mov	r3, r0
 80231e0:	2100      	movs	r1, #0
 80231e2:	4618      	mov	r0, r3
 80231e4:	f7f9 fc34 	bl	801ca50 <lv_label_create>
 80231e8:	4602      	mov	r2, r0
 80231ea:	4b2b      	ldr	r3, [pc, #172]	; (8023298 <tos_AnalogueType_Init+0x774>)
 80231ec:	601a      	str	r2, [r3, #0]
       			   		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 80231ee:	4b2a      	ldr	r3, [pc, #168]	; (8023298 <tos_AnalogueType_Init+0x774>)
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	4a2a      	ldr	r2, [pc, #168]	; (802329c <tos_AnalogueType_Init+0x778>)
 80231f4:	2100      	movs	r1, #0
 80231f6:	4618      	mov	r0, r3
 80231f8:	f7ff fbd8 	bl	80229ac <lv_label_set_style>
       			     	    snprintf(buffer, 9, "%02d:%02d:%04d", date,month,year);
 80231fc:	4b28      	ldr	r3, [pc, #160]	; (80232a0 <tos_AnalogueType_Init+0x77c>)
 80231fe:	781b      	ldrb	r3, [r3, #0]
 8023200:	4619      	mov	r1, r3
 8023202:	4b28      	ldr	r3, [pc, #160]	; (80232a4 <tos_AnalogueType_Init+0x780>)
 8023204:	781b      	ldrb	r3, [r3, #0]
 8023206:	461a      	mov	r2, r3
 8023208:	4b27      	ldr	r3, [pc, #156]	; (80232a8 <tos_AnalogueType_Init+0x784>)
 802320a:	881b      	ldrh	r3, [r3, #0]
 802320c:	9301      	str	r3, [sp, #4]
 802320e:	9200      	str	r2, [sp, #0]
 8023210:	460b      	mov	r3, r1
 8023212:	4a26      	ldr	r2, [pc, #152]	; (80232ac <tos_AnalogueType_Init+0x788>)
 8023214:	2109      	movs	r1, #9
 8023216:	4826      	ldr	r0, [pc, #152]	; (80232b0 <tos_AnalogueType_Init+0x78c>)
 8023218:	f007 ffc6 	bl	802b1a8 <sniprintf>
       			 		    lv_label_set_text(digitalDate, buffer);
 802321c:	4b1e      	ldr	r3, [pc, #120]	; (8023298 <tos_AnalogueType_Init+0x774>)
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	4923      	ldr	r1, [pc, #140]	; (80232b0 <tos_AnalogueType_Init+0x78c>)
 8023222:	4618      	mov	r0, r3
 8023224:	f7f9 fd46 	bl	801ccb4 <lv_label_set_text>
       			   		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8023228:	4b1b      	ldr	r3, [pc, #108]	; (8023298 <tos_AnalogueType_Init+0x774>)
 802322a:	6818      	ldr	r0, [r3, #0]
 802322c:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8023230:	9300      	str	r3, [sp, #0]
 8023232:	2300      	movs	r3, #0
 8023234:	2200      	movs	r2, #0
 8023236:	2100      	movs	r1, #0
 8023238:	f7e6 faf2 	bl	8009820 <lv_obj_align>

       			   		    //Week Day
       			   		    weekDay = lv_label_create(lv_scr_act(), NULL);
 802323c:	f7ff fbab 	bl	8022996 <lv_scr_act>
 8023240:	4603      	mov	r3, r0
 8023242:	2100      	movs	r1, #0
 8023244:	4618      	mov	r0, r3
 8023246:	f7f9 fc03 	bl	801ca50 <lv_label_create>
 802324a:	4602      	mov	r2, r0
 802324c:	4b19      	ldr	r3, [pc, #100]	; (80232b4 <tos_AnalogueType_Init+0x790>)
 802324e:	601a      	str	r2, [r3, #0]
       			   		    lv_obj_set_width(weekDay, 150);
 8023250:	4b18      	ldr	r3, [pc, #96]	; (80232b4 <tos_AnalogueType_Init+0x790>)
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	2196      	movs	r1, #150	; 0x96
 8023256:	4618      	mov	r0, r3
 8023258:	f7e6 fab8 	bl	80097cc <lv_obj_set_width>
       			   		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 802325c:	4b15      	ldr	r3, [pc, #84]	; (80232b4 <tos_AnalogueType_Init+0x790>)
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	4a15      	ldr	r2, [pc, #84]	; (80232b8 <tos_AnalogueType_Init+0x794>)
 8023262:	2100      	movs	r1, #0
 8023264:	4618      	mov	r0, r3
 8023266:	f7ff fba1 	bl	80229ac <lv_label_set_style>
       			   		    lv_label_set_text(weekDay,weekDayStr);
 802326a:	4b12      	ldr	r3, [pc, #72]	; (80232b4 <tos_AnalogueType_Init+0x790>)
 802326c:	681a      	ldr	r2, [r3, #0]
 802326e:	4b13      	ldr	r3, [pc, #76]	; (80232bc <tos_AnalogueType_Init+0x798>)
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	4619      	mov	r1, r3
 8023274:	4610      	mov	r0, r2
 8023276:	f7f9 fd1d 	bl	801ccb4 <lv_label_set_text>
       			   		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 802327a:	4b0e      	ldr	r3, [pc, #56]	; (80232b4 <tos_AnalogueType_Init+0x790>)
 802327c:	6818      	ldr	r0, [r3, #0]
 802327e:	f06f 0309 	mvn.w	r3, #9
 8023282:	9300      	str	r3, [sp, #0]
 8023284:	2300      	movs	r3, #0
 8023286:	2200      	movs	r2, #0
 8023288:	2100      	movs	r1, #0
 802328a:	f7e6 fac9 	bl	8009820 <lv_obj_align>
}
 802328e:	bf00      	nop
 8023290:	3708      	adds	r7, #8
 8023292:	46bd      	mov	sp, r7
 8023294:	bd80      	pop	{r7, pc}
 8023296:	bf00      	nop
 8023298:	2001bbe4 	.word	0x2001bbe4
 802329c:	2001a700 	.word	0x2001a700
 80232a0:	2001bcbc 	.word	0x2001bcbc
 80232a4:	2001bbf0 	.word	0x2001bbf0
 80232a8:	2001bcae 	.word	0x2001bcae
 80232ac:	0802d584 	.word	0x0802d584
 80232b0:	2001bc48 	.word	0x2001bc48
 80232b4:	2001bbdc 	.word	0x2001bbdc
 80232b8:	2001a73c 	.word	0x2001a73c
 80232bc:	2001bc3c 	.word	0x2001bc3c

080232c0 <tos_DigitalType_Init>:
void dType1_Clock_Init(bool theme);
void dType2_Clock_Init(bool theme);

/*
*/
void tos_DigitalType_Init(uint8_t clockType,bool theme) {
 80232c0:	b580      	push	{r7, lr}
 80232c2:	b084      	sub	sp, #16
 80232c4:	af02      	add	r7, sp, #8
 80232c6:	4603      	mov	r3, r0
 80232c8:	460a      	mov	r2, r1
 80232ca:	71fb      	strb	r3, [r7, #7]
 80232cc:	4613      	mov	r3, r2
 80232ce:	71bb      	strb	r3, [r7, #6]
	switch(clockType){
 80232d0:	79fb      	ldrb	r3, [r7, #7]
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	d002      	beq.n	80232dc <tos_DigitalType_Init+0x1c>
 80232d6:	2b01      	cmp	r3, #1
 80232d8:	d005      	beq.n	80232e6 <tos_DigitalType_Init+0x26>
 80232da:	e009      	b.n	80232f0 <tos_DigitalType_Init+0x30>
	case 0: dType1_Clock_Init(theme); break;
 80232dc:	79bb      	ldrb	r3, [r7, #6]
 80232de:	4618      	mov	r0, r3
 80232e0:	f000 f886 	bl	80233f0 <dType1_Clock_Init>
 80232e4:	e004      	b.n	80232f0 <tos_DigitalType_Init+0x30>
	case 1: dType2_Clock_Init(theme); break;
 80232e6:	79bb      	ldrb	r3, [r7, #6]
 80232e8:	4618      	mov	r0, r3
 80232ea:	f000 fbb1 	bl	8023a50 <dType2_Clock_Init>
 80232ee:	bf00      	nop
	}
	//Battery
	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 80232f0:	f7ff fb51 	bl	8022996 <lv_scr_act>
 80232f4:	4603      	mov	r3, r0
 80232f6:	2100      	movs	r1, #0
 80232f8:	4618      	mov	r0, r3
 80232fa:	f7f9 fba9 	bl	801ca50 <lv_label_create>
 80232fe:	4602      	mov	r2, r0
 8023300:	4b33      	ldr	r3, [pc, #204]	; (80233d0 <tos_DigitalType_Init+0x110>)
 8023302:	601a      	str	r2, [r3, #0]
	lv_style_copy(&battery_style, &lv_style_plain);
 8023304:	4933      	ldr	r1, [pc, #204]	; (80233d4 <tos_DigitalType_Init+0x114>)
 8023306:	4834      	ldr	r0, [pc, #208]	; (80233d8 <tos_DigitalType_Init+0x118>)
 8023308:	f7e8 fcce 	bl	800bca8 <lv_style_copy>
	battery_style.text.color = LV_COLOR_GREEN;
 802330c:	4a32      	ldr	r2, [pc, #200]	; (80233d8 <tos_DigitalType_Init+0x118>)
 802330e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023312:	2104      	movs	r1, #4
 8023314:	f361 0302 	bfi	r3, r1, #0, #3
 8023318:	f882 3020 	strb.w	r3, [r2, #32]
 802331c:	4a2e      	ldr	r2, [pc, #184]	; (80233d8 <tos_DigitalType_Init+0x118>)
 802331e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023322:	f36f 03c7 	bfc	r3, #3, #5
 8023326:	f882 3020 	strb.w	r3, [r2, #32]
 802332a:	4a2b      	ldr	r2, [pc, #172]	; (80233d8 <tos_DigitalType_Init+0x118>)
 802332c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023330:	f36f 0304 	bfc	r3, #0, #5
 8023334:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8023338:	4a27      	ldr	r2, [pc, #156]	; (80233d8 <tos_DigitalType_Init+0x118>)
 802333a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802333e:	f36f 1347 	bfc	r3, #5, #3
 8023342:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 8023346:	4b22      	ldr	r3, [pc, #136]	; (80233d0 <tos_DigitalType_Init+0x110>)
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	4a23      	ldr	r2, [pc, #140]	; (80233d8 <tos_DigitalType_Init+0x118>)
 802334c:	2100      	movs	r1, #0
 802334e:	4618      	mov	r0, r3
 8023350:	f7ff fb2c 	bl	80229ac <lv_label_set_style>
	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 8023354:	4b1e      	ldr	r3, [pc, #120]	; (80233d0 <tos_DigitalType_Init+0x110>)
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	4920      	ldr	r1, [pc, #128]	; (80233dc <tos_DigitalType_Init+0x11c>)
 802335a:	4618      	mov	r0, r3
 802335c:	f7f9 fcaa 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8023360:	4b1b      	ldr	r3, [pc, #108]	; (80233d0 <tos_DigitalType_Init+0x110>)
 8023362:	6818      	ldr	r0, [r3, #0]
 8023364:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8023368:	9300      	str	r3, [sp, #0]
 802336a:	2364      	movs	r3, #100	; 0x64
 802336c:	2200      	movs	r2, #0
 802336e:	2100      	movs	r1, #0
 8023370:	f7e6 fa56 	bl	8009820 <lv_obj_align>

	//Bluetooth
	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 8023374:	f7ff fb0f 	bl	8022996 <lv_scr_act>
 8023378:	4603      	mov	r3, r0
 802337a:	2100      	movs	r1, #0
 802337c:	4618      	mov	r0, r3
 802337e:	f7f9 fb67 	bl	801ca50 <lv_label_create>
 8023382:	4602      	mov	r2, r0
 8023384:	4b16      	ldr	r3, [pc, #88]	; (80233e0 <tos_DigitalType_Init+0x120>)
 8023386:	601a      	str	r2, [r3, #0]
    lv_style_copy(&bluetooth_style, &lv_style_plain);
 8023388:	4912      	ldr	r1, [pc, #72]	; (80233d4 <tos_DigitalType_Init+0x114>)
 802338a:	4816      	ldr	r0, [pc, #88]	; (80233e4 <tos_DigitalType_Init+0x124>)
 802338c:	f7e8 fc8c 	bl	800bca8 <lv_style_copy>
	bluetooth_style.text.color = LV_COLOR_WHITE;
 8023390:	4a14      	ldr	r2, [pc, #80]	; (80233e4 <tos_DigitalType_Init+0x124>)
 8023392:	4b15      	ldr	r3, [pc, #84]	; (80233e8 <tos_DigitalType_Init+0x128>)
 8023394:	881b      	ldrh	r3, [r3, #0]
 8023396:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 8023398:	4b11      	ldr	r3, [pc, #68]	; (80233e0 <tos_DigitalType_Init+0x120>)
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	4a11      	ldr	r2, [pc, #68]	; (80233e4 <tos_DigitalType_Init+0x124>)
 802339e:	2100      	movs	r1, #0
 80233a0:	4618      	mov	r0, r3
 80233a2:	f7ff fb03 	bl	80229ac <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 80233a6:	4b0e      	ldr	r3, [pc, #56]	; (80233e0 <tos_DigitalType_Init+0x120>)
 80233a8:	681b      	ldr	r3, [r3, #0]
 80233aa:	4910      	ldr	r1, [pc, #64]	; (80233ec <tos_DigitalType_Init+0x12c>)
 80233ac:	4618      	mov	r0, r3
 80233ae:	f7f9 fc81 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 80233b2:	4b0b      	ldr	r3, [pc, #44]	; (80233e0 <tos_DigitalType_Init+0x120>)
 80233b4:	6818      	ldr	r0, [r3, #0]
 80233b6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80233ba:	9300      	str	r3, [sp, #0]
 80233bc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80233c0:	2200      	movs	r2, #0
 80233c2:	2100      	movs	r1, #0
 80233c4:	f7e6 fa2c 	bl	8009820 <lv_obj_align>
}
 80233c8:	bf00      	nop
 80233ca:	3708      	adds	r7, #8
 80233cc:	46bd      	mov	sp, r7
 80233ce:	bd80      	pop	{r7, pc}
 80233d0:	2001bca8 	.word	0x2001bca8
 80233d4:	2001ba40 	.word	0x2001ba40
 80233d8:	2001bc60 	.word	0x2001bc60
 80233dc:	0802d564 	.word	0x0802d564
 80233e0:	2001bc44 	.word	0x2001bc44
 80233e4:	2001bbfc 	.word	0x2001bbfc
 80233e8:	0802d560 	.word	0x0802d560
 80233ec:	0802d568 	.word	0x0802d568

080233f0 <dType1_Clock_Init>:



/*Analogue and digital Type*/
void dType1_Clock_Init(bool theme) {
 80233f0:	b580      	push	{r7, lr}
 80233f2:	b084      	sub	sp, #16
 80233f4:	af02      	add	r7, sp, #8
 80233f6:	4603      	mov	r3, r0
 80233f8:	71fb      	strb	r3, [r7, #7]

	  //Digital Clock
	static lv_style_t dClock_style,dDate_style;
		lv_style_copy(&dClock_style, &lv_style_plain);
 80233fa:	49bd      	ldr	r1, [pc, #756]	; (80236f0 <dType1_Clock_Init+0x300>)
 80233fc:	48bd      	ldr	r0, [pc, #756]	; (80236f4 <dType1_Clock_Init+0x304>)
 80233fe:	f7e8 fc53 	bl	800bca8 <lv_style_copy>
	    dClock_style.text.font =&lv_font_roboto_22;
 8023402:	4bbc      	ldr	r3, [pc, #752]	; (80236f4 <dType1_Clock_Init+0x304>)
 8023404:	4abc      	ldr	r2, [pc, #752]	; (80236f8 <dType1_Clock_Init+0x308>)
 8023406:	625a      	str	r2, [r3, #36]	; 0x24
	    lv_style_copy(&dDate_style, &lv_style_plain);
 8023408:	49b9      	ldr	r1, [pc, #740]	; (80236f0 <dType1_Clock_Init+0x300>)
 802340a:	48bc      	ldr	r0, [pc, #752]	; (80236fc <dType1_Clock_Init+0x30c>)
 802340c:	f7e8 fc4c 	bl	800bca8 <lv_style_copy>
	    dDate_style.text.font =&lv_font_roboto_16;
 8023410:	4bba      	ldr	r3, [pc, #744]	; (80236fc <dType1_Clock_Init+0x30c>)
 8023412:	4abb      	ldr	r2, [pc, #748]	; (8023700 <dType1_Clock_Init+0x310>)
 8023414:	625a      	str	r2, [r3, #36]	; 0x24
	    if(theme){
 8023416:	79fb      	ldrb	r3, [r7, #7]
 8023418:	2b00      	cmp	r3, #0
 802341a:	d007      	beq.n	802342c <dType1_Clock_Init+0x3c>
	    	dClock_style.text.color = LV_COLOR_WHITE;
 802341c:	4ab5      	ldr	r2, [pc, #724]	; (80236f4 <dType1_Clock_Init+0x304>)
 802341e:	4bb9      	ldr	r3, [pc, #740]	; (8023704 <dType1_Clock_Init+0x314>)
 8023420:	881b      	ldrh	r3, [r3, #0]
 8023422:	8413      	strh	r3, [r2, #32]
	    	dDate_style.text.color = LV_COLOR_WHITE;
 8023424:	4ab5      	ldr	r2, [pc, #724]	; (80236fc <dType1_Clock_Init+0x30c>)
 8023426:	4bb7      	ldr	r3, [pc, #732]	; (8023704 <dType1_Clock_Init+0x314>)
 8023428:	881b      	ldrh	r3, [r3, #0]
 802342a:	8413      	strh	r3, [r2, #32]
	    }

	    digitalClock = lv_label_create(lv_scr_act(), NULL);
 802342c:	f7ff fab3 	bl	8022996 <lv_scr_act>
 8023430:	4603      	mov	r3, r0
 8023432:	2100      	movs	r1, #0
 8023434:	4618      	mov	r0, r3
 8023436:	f7f9 fb0b 	bl	801ca50 <lv_label_create>
 802343a:	4602      	mov	r2, r0
 802343c:	4bb2      	ldr	r3, [pc, #712]	; (8023708 <dType1_Clock_Init+0x318>)
 802343e:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalClock, 150);
 8023440:	4bb1      	ldr	r3, [pc, #708]	; (8023708 <dType1_Clock_Init+0x318>)
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	2196      	movs	r1, #150	; 0x96
 8023446:	4618      	mov	r0, r3
 8023448:	f7e6 f9c0 	bl	80097cc <lv_obj_set_width>
	    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 802344c:	4bae      	ldr	r3, [pc, #696]	; (8023708 <dType1_Clock_Init+0x318>)
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	4aa8      	ldr	r2, [pc, #672]	; (80236f4 <dType1_Clock_Init+0x304>)
 8023452:	2100      	movs	r1, #0
 8023454:	4618      	mov	r0, r3
 8023456:	f7ff faa9 	bl	80229ac <lv_label_set_style>
	    snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 802345a:	4bac      	ldr	r3, [pc, #688]	; (802370c <dType1_Clock_Init+0x31c>)
 802345c:	781b      	ldrb	r3, [r3, #0]
 802345e:	4619      	mov	r1, r3
 8023460:	4bab      	ldr	r3, [pc, #684]	; (8023710 <dType1_Clock_Init+0x320>)
 8023462:	781b      	ldrb	r3, [r3, #0]
 8023464:	461a      	mov	r2, r3
 8023466:	4bab      	ldr	r3, [pc, #684]	; (8023714 <dType1_Clock_Init+0x324>)
 8023468:	781b      	ldrb	r3, [r3, #0]
 802346a:	9301      	str	r3, [sp, #4]
 802346c:	9200      	str	r2, [sp, #0]
 802346e:	460b      	mov	r3, r1
 8023470:	4aa9      	ldr	r2, [pc, #676]	; (8023718 <dType1_Clock_Init+0x328>)
 8023472:	2109      	movs	r1, #9
 8023474:	48a9      	ldr	r0, [pc, #676]	; (802371c <dType1_Clock_Init+0x32c>)
 8023476:	f007 fe97 	bl	802b1a8 <sniprintf>
	    lv_label_set_text(digitalClock, buffer);
 802347a:	4ba3      	ldr	r3, [pc, #652]	; (8023708 <dType1_Clock_Init+0x318>)
 802347c:	681b      	ldr	r3, [r3, #0]
 802347e:	49a7      	ldr	r1, [pc, #668]	; (802371c <dType1_Clock_Init+0x32c>)
 8023480:	4618      	mov	r0, r3
 8023482:	f7f9 fc17 	bl	801ccb4 <lv_label_set_text>
	    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8023486:	4ba0      	ldr	r3, [pc, #640]	; (8023708 <dType1_Clock_Init+0x318>)
 8023488:	6818      	ldr	r0, [r3, #0]
 802348a:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 802348e:	9300      	str	r3, [sp, #0]
 8023490:	2300      	movs	r3, #0
 8023492:	2200      	movs	r2, #0
 8023494:	2100      	movs	r1, #0
 8023496:	f7e6 f9c3 	bl	8009820 <lv_obj_align>

	    //Digital Date
	    digitalDate = lv_label_create(lv_scr_act(), NULL);
 802349a:	f7ff fa7c 	bl	8022996 <lv_scr_act>
 802349e:	4603      	mov	r3, r0
 80234a0:	2100      	movs	r1, #0
 80234a2:	4618      	mov	r0, r3
 80234a4:	f7f9 fad4 	bl	801ca50 <lv_label_create>
 80234a8:	4602      	mov	r2, r0
 80234aa:	4b9d      	ldr	r3, [pc, #628]	; (8023720 <dType1_Clock_Init+0x330>)
 80234ac:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalDate, 150);
 80234ae:	4b9c      	ldr	r3, [pc, #624]	; (8023720 <dType1_Clock_Init+0x330>)
 80234b0:	681b      	ldr	r3, [r3, #0]
 80234b2:	2196      	movs	r1, #150	; 0x96
 80234b4:	4618      	mov	r0, r3
 80234b6:	f7e6 f989 	bl	80097cc <lv_obj_set_width>
	    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 80234ba:	4b99      	ldr	r3, [pc, #612]	; (8023720 <dType1_Clock_Init+0x330>)
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	4a8f      	ldr	r2, [pc, #572]	; (80236fc <dType1_Clock_Init+0x30c>)
 80234c0:	2100      	movs	r1, #0
 80234c2:	4618      	mov	r0, r3
 80234c4:	f7ff fa72 	bl	80229ac <lv_label_set_style>
    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 80234c8:	4b96      	ldr	r3, [pc, #600]	; (8023724 <dType1_Clock_Init+0x334>)
 80234ca:	781b      	ldrb	r3, [r3, #0]
 80234cc:	4619      	mov	r1, r3
 80234ce:	4b96      	ldr	r3, [pc, #600]	; (8023728 <dType1_Clock_Init+0x338>)
 80234d0:	781b      	ldrb	r3, [r3, #0]
 80234d2:	461a      	mov	r2, r3
 80234d4:	4b95      	ldr	r3, [pc, #596]	; (802372c <dType1_Clock_Init+0x33c>)
 80234d6:	881b      	ldrh	r3, [r3, #0]
 80234d8:	9301      	str	r3, [sp, #4]
 80234da:	9200      	str	r2, [sp, #0]
 80234dc:	460b      	mov	r3, r1
 80234de:	4a94      	ldr	r2, [pc, #592]	; (8023730 <dType1_Clock_Init+0x340>)
 80234e0:	2110      	movs	r1, #16
 80234e2:	488e      	ldr	r0, [pc, #568]	; (802371c <dType1_Clock_Init+0x32c>)
 80234e4:	f007 fe60 	bl	802b1a8 <sniprintf>
		lv_label_set_text(digitalDate, buffer);
 80234e8:	4b8d      	ldr	r3, [pc, #564]	; (8023720 <dType1_Clock_Init+0x330>)
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	498b      	ldr	r1, [pc, #556]	; (802371c <dType1_Clock_Init+0x32c>)
 80234ee:	4618      	mov	r0, r3
 80234f0:	f7f9 fbe0 	bl	801ccb4 <lv_label_set_text>
	    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 80234f4:	4b8a      	ldr	r3, [pc, #552]	; (8023720 <dType1_Clock_Init+0x330>)
 80234f6:	6818      	ldr	r0, [r3, #0]
 80234f8:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80234fc:	9300      	str	r3, [sp, #0]
 80234fe:	2300      	movs	r3, #0
 8023500:	2200      	movs	r2, #0
 8023502:	2100      	movs	r1, #0
 8023504:	f7e6 f98c 	bl	8009820 <lv_obj_align>

	    //Week Day
	    weekDay = lv_label_create(lv_scr_act(), NULL);
 8023508:	f7ff fa45 	bl	8022996 <lv_scr_act>
 802350c:	4603      	mov	r3, r0
 802350e:	2100      	movs	r1, #0
 8023510:	4618      	mov	r0, r3
 8023512:	f7f9 fa9d 	bl	801ca50 <lv_label_create>
 8023516:	4602      	mov	r2, r0
 8023518:	4b86      	ldr	r3, [pc, #536]	; (8023734 <dType1_Clock_Init+0x344>)
 802351a:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(weekDay, 150);
 802351c:	4b85      	ldr	r3, [pc, #532]	; (8023734 <dType1_Clock_Init+0x344>)
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	2196      	movs	r1, #150	; 0x96
 8023522:	4618      	mov	r0, r3
 8023524:	f7e6 f952 	bl	80097cc <lv_obj_set_width>
	    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &dClock_style);
 8023528:	4b82      	ldr	r3, [pc, #520]	; (8023734 <dType1_Clock_Init+0x344>)
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	4a71      	ldr	r2, [pc, #452]	; (80236f4 <dType1_Clock_Init+0x304>)
 802352e:	2100      	movs	r1, #0
 8023530:	4618      	mov	r0, r3
 8023532:	f7ff fa3b 	bl	80229ac <lv_label_set_style>
	    lv_label_set_text(weekDay,weekDayStr);
 8023536:	4b7f      	ldr	r3, [pc, #508]	; (8023734 <dType1_Clock_Init+0x344>)
 8023538:	681a      	ldr	r2, [r3, #0]
 802353a:	4b7f      	ldr	r3, [pc, #508]	; (8023738 <dType1_Clock_Init+0x348>)
 802353c:	681b      	ldr	r3, [r3, #0]
 802353e:	4619      	mov	r1, r3
 8023540:	4610      	mov	r0, r2
 8023542:	f7f9 fbb7 	bl	801ccb4 <lv_label_set_text>
	    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8023546:	4b7b      	ldr	r3, [pc, #492]	; (8023734 <dType1_Clock_Init+0x344>)
 8023548:	6818      	ldr	r0, [r3, #0]
 802354a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 802354e:	9300      	str	r3, [sp, #0]
 8023550:	2300      	movs	r3, #0
 8023552:	2200      	movs	r2, #0
 8023554:	2100      	movs	r1, #0
 8023556:	f7e6 f963 	bl	8009820 <lv_obj_align>

	  //Analog
	  //Hours
	    static lv_style_t hours_Style;
	  lv_style_copy(&hours_Style, &lv_style_plain);
 802355a:	4965      	ldr	r1, [pc, #404]	; (80236f0 <dType1_Clock_Init+0x300>)
 802355c:	4877      	ldr	r0, [pc, #476]	; (802373c <dType1_Clock_Init+0x34c>)
 802355e:	f7e8 fba3 	bl	800bca8 <lv_style_copy>
	  hours_Style.line.color = LV_COLOR_RED;
 8023562:	4a76      	ldr	r2, [pc, #472]	; (802373c <dType1_Clock_Init+0x34c>)
 8023564:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023568:	f36f 0302 	bfc	r3, #0, #3
 802356c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023570:	4a72      	ldr	r2, [pc, #456]	; (802373c <dType1_Clock_Init+0x34c>)
 8023572:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023576:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 802357a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802357e:	4a6f      	ldr	r2, [pc, #444]	; (802373c <dType1_Clock_Init+0x34c>)
 8023580:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023584:	f36f 0304 	bfc	r3, #0, #5
 8023588:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 802358c:	4a6b      	ldr	r2, [pc, #428]	; (802373c <dType1_Clock_Init+0x34c>)
 802358e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023592:	f36f 1347 	bfc	r3, #5, #3
 8023596:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  hours_Style.line.width = 6;
 802359a:	4b68      	ldr	r3, [pc, #416]	; (802373c <dType1_Clock_Init+0x34c>)
 802359c:	2206      	movs	r2, #6
 802359e:	86da      	strh	r2, [r3, #54]	; 0x36

	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 80235a0:	f7ff f9f9 	bl	8022996 <lv_scr_act>
 80235a4:	4603      	mov	r3, r0
 80235a6:	2100      	movs	r1, #0
 80235a8:	4618      	mov	r0, r3
 80235aa:	f7f4 fc4f 	bl	8017e4c <lv_arc_create>
 80235ae:	4602      	mov	r2, r0
 80235b0:	4b63      	ldr	r3, [pc, #396]	; (8023740 <dType1_Clock_Init+0x350>)
 80235b2:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(hoursArc, 215, 215);
 80235b4:	4b62      	ldr	r3, [pc, #392]	; (8023740 <dType1_Clock_Init+0x350>)
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	22d7      	movs	r2, #215	; 0xd7
 80235ba:	21d7      	movs	r1, #215	; 0xd7
 80235bc:	4618      	mov	r0, r3
 80235be:	f7e6 f88c 	bl	80096da <lv_obj_set_size>
	  lv_arc_set_angles(hoursArc, 180, 180);
 80235c2:	4b5f      	ldr	r3, [pc, #380]	; (8023740 <dType1_Clock_Init+0x350>)
 80235c4:	681b      	ldr	r3, [r3, #0]
 80235c6:	22b4      	movs	r2, #180	; 0xb4
 80235c8:	21b4      	movs	r1, #180	; 0xb4
 80235ca:	4618      	mov	r0, r3
 80235cc:	f7f4 fcba 	bl	8017f44 <lv_arc_set_angles>
	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 80235d0:	4b5b      	ldr	r3, [pc, #364]	; (8023740 <dType1_Clock_Init+0x350>)
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	4a59      	ldr	r2, [pc, #356]	; (802373c <dType1_Clock_Init+0x34c>)
 80235d6:	2100      	movs	r1, #0
 80235d8:	4618      	mov	r0, r3
 80235da:	f7f4 fcdc 	bl	8017f96 <lv_arc_set_style>
	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 80235de:	4b58      	ldr	r3, [pc, #352]	; (8023740 <dType1_Clock_Init+0x350>)
 80235e0:	6818      	ldr	r0, [r3, #0]
 80235e2:	2300      	movs	r3, #0
 80235e4:	9300      	str	r3, [sp, #0]
 80235e6:	2300      	movs	r3, #0
 80235e8:	2200      	movs	r2, #0
 80235ea:	2100      	movs	r1, #0
 80235ec:	f7e6 f918 	bl	8009820 <lv_obj_align>

	  //Minutes
	  static lv_style_t minutes_Style;
	  lv_style_copy(&minutes_Style, &lv_style_plain);
 80235f0:	493f      	ldr	r1, [pc, #252]	; (80236f0 <dType1_Clock_Init+0x300>)
 80235f2:	4854      	ldr	r0, [pc, #336]	; (8023744 <dType1_Clock_Init+0x354>)
 80235f4:	f7e8 fb58 	bl	800bca8 <lv_style_copy>
	  minutes_Style.line.color = LV_COLOR_BLUE;
 80235f8:	4a52      	ldr	r2, [pc, #328]	; (8023744 <dType1_Clock_Init+0x354>)
 80235fa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80235fe:	f36f 0302 	bfc	r3, #0, #3
 8023602:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023606:	4a4f      	ldr	r2, [pc, #316]	; (8023744 <dType1_Clock_Init+0x354>)
 8023608:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802360c:	f36f 03c7 	bfc	r3, #3, #5
 8023610:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023614:	4a4b      	ldr	r2, [pc, #300]	; (8023744 <dType1_Clock_Init+0x354>)
 8023616:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802361a:	f043 031f 	orr.w	r3, r3, #31
 802361e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8023622:	4a48      	ldr	r2, [pc, #288]	; (8023744 <dType1_Clock_Init+0x354>)
 8023624:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023628:	f36f 1347 	bfc	r3, #5, #3
 802362c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  minutes_Style.line.width = 5;
 8023630:	4b44      	ldr	r3, [pc, #272]	; (8023744 <dType1_Clock_Init+0x354>)
 8023632:	2205      	movs	r2, #5
 8023634:	86da      	strh	r2, [r3, #54]	; 0x36

	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 8023636:	f7ff f9ae 	bl	8022996 <lv_scr_act>
 802363a:	4603      	mov	r3, r0
 802363c:	2100      	movs	r1, #0
 802363e:	4618      	mov	r0, r3
 8023640:	f7f4 fc04 	bl	8017e4c <lv_arc_create>
 8023644:	4602      	mov	r2, r0
 8023646:	4b40      	ldr	r3, [pc, #256]	; (8023748 <dType1_Clock_Init+0x358>)
 8023648:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(minutesArc, 230, 230);
 802364a:	4b3f      	ldr	r3, [pc, #252]	; (8023748 <dType1_Clock_Init+0x358>)
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	22e6      	movs	r2, #230	; 0xe6
 8023650:	21e6      	movs	r1, #230	; 0xe6
 8023652:	4618      	mov	r0, r3
 8023654:	f7e6 f841 	bl	80096da <lv_obj_set_size>
	  lv_arc_set_angles(minutesArc, 180, 180);
 8023658:	4b3b      	ldr	r3, [pc, #236]	; (8023748 <dType1_Clock_Init+0x358>)
 802365a:	681b      	ldr	r3, [r3, #0]
 802365c:	22b4      	movs	r2, #180	; 0xb4
 802365e:	21b4      	movs	r1, #180	; 0xb4
 8023660:	4618      	mov	r0, r3
 8023662:	f7f4 fc6f 	bl	8017f44 <lv_arc_set_angles>
	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 8023666:	4b38      	ldr	r3, [pc, #224]	; (8023748 <dType1_Clock_Init+0x358>)
 8023668:	681b      	ldr	r3, [r3, #0]
 802366a:	4a36      	ldr	r2, [pc, #216]	; (8023744 <dType1_Clock_Init+0x354>)
 802366c:	2100      	movs	r1, #0
 802366e:	4618      	mov	r0, r3
 8023670:	f7f4 fc91 	bl	8017f96 <lv_arc_set_style>
	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8023674:	4b34      	ldr	r3, [pc, #208]	; (8023748 <dType1_Clock_Init+0x358>)
 8023676:	6818      	ldr	r0, [r3, #0]
 8023678:	2300      	movs	r3, #0
 802367a:	9300      	str	r3, [sp, #0]
 802367c:	2300      	movs	r3, #0
 802367e:	2200      	movs	r2, #0
 8023680:	2100      	movs	r1, #0
 8023682:	f7e6 f8cd 	bl	8009820 <lv_obj_align>

	  //Steps
	  static  lv_style_t steps_Style,description_Style;
	 		  lv_style_copy(&steps_Style, &lv_style_plain);
 8023686:	491a      	ldr	r1, [pc, #104]	; (80236f0 <dType1_Clock_Init+0x300>)
 8023688:	4830      	ldr	r0, [pc, #192]	; (802374c <dType1_Clock_Init+0x35c>)
 802368a:	f7e8 fb0d 	bl	800bca8 <lv_style_copy>
	 		  steps_Style.line.color = LV_COLOR_GREEN;
 802368e:	4a2f      	ldr	r2, [pc, #188]	; (802374c <dType1_Clock_Init+0x35c>)
 8023690:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023694:	2104      	movs	r1, #4
 8023696:	f361 0302 	bfi	r3, r1, #0, #3
 802369a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802369e:	4a2b      	ldr	r2, [pc, #172]	; (802374c <dType1_Clock_Init+0x35c>)
 80236a0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80236a4:	f36f 03c7 	bfc	r3, #3, #5
 80236a8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80236ac:	4a27      	ldr	r2, [pc, #156]	; (802374c <dType1_Clock_Init+0x35c>)
 80236ae:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80236b2:	f36f 0304 	bfc	r3, #0, #5
 80236b6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80236ba:	4a24      	ldr	r2, [pc, #144]	; (802374c <dType1_Clock_Init+0x35c>)
 80236bc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80236c0:	f36f 1347 	bfc	r3, #5, #3
 80236c4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  steps_Style.line.width = 5;
 80236c8:	4b20      	ldr	r3, [pc, #128]	; (802374c <dType1_Clock_Init+0x35c>)
 80236ca:	2205      	movs	r2, #5
 80236cc:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  steps_Style.text.color = LV_COLOR_GREEN;
 80236ce:	4a1f      	ldr	r2, [pc, #124]	; (802374c <dType1_Clock_Init+0x35c>)
 80236d0:	f892 3020 	ldrb.w	r3, [r2, #32]
 80236d4:	2104      	movs	r1, #4
 80236d6:	f361 0302 	bfi	r3, r1, #0, #3
 80236da:	f882 3020 	strb.w	r3, [r2, #32]
 80236de:	4a1b      	ldr	r2, [pc, #108]	; (802374c <dType1_Clock_Init+0x35c>)
 80236e0:	f892 3020 	ldrb.w	r3, [r2, #32]
 80236e4:	f36f 03c7 	bfc	r3, #3, #5
 80236e8:	f882 3020 	strb.w	r3, [r2, #32]
 80236ec:	e030      	b.n	8023750 <dType1_Clock_Init+0x360>
 80236ee:	bf00      	nop
 80236f0:	2001ba40 	.word	0x2001ba40
 80236f4:	2001a91c 	.word	0x2001a91c
 80236f8:	200017c4 	.word	0x200017c4
 80236fc:	2001a958 	.word	0x2001a958
 8023700:	20000bf0 	.word	0x20000bf0
 8023704:	0802d560 	.word	0x0802d560
 8023708:	2001bbec 	.word	0x2001bbec
 802370c:	2001bcbe 	.word	0x2001bcbe
 8023710:	2001bcbd 	.word	0x2001bcbd
 8023714:	2001bcac 	.word	0x2001bcac
 8023718:	0802d5a4 	.word	0x0802d5a4
 802371c:	2001bc48 	.word	0x2001bc48
 8023720:	2001bbe4 	.word	0x2001bbe4
 8023724:	2001bcbc 	.word	0x2001bcbc
 8023728:	2001bbf0 	.word	0x2001bbf0
 802372c:	2001bcae 	.word	0x2001bcae
 8023730:	0802d584 	.word	0x0802d584
 8023734:	2001bbdc 	.word	0x2001bbdc
 8023738:	2001bc3c 	.word	0x2001bc3c
 802373c:	2001a994 	.word	0x2001a994
 8023740:	2001bbf8 	.word	0x2001bbf8
 8023744:	2001a9d0 	.word	0x2001a9d0
 8023748:	2001bc38 	.word	0x2001bc38
 802374c:	2001aa0c 	.word	0x2001aa0c
 8023750:	4aab      	ldr	r2, [pc, #684]	; (8023a00 <dType1_Clock_Init+0x610>)
 8023752:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023756:	f36f 0304 	bfc	r3, #0, #5
 802375a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 802375e:	4aa8      	ldr	r2, [pc, #672]	; (8023a00 <dType1_Clock_Init+0x610>)
 8023760:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023764:	f36f 1347 	bfc	r3, #5, #3
 8023768:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  steps_Style.text.font = &lv_font_roboto_22;
 802376c:	4ba4      	ldr	r3, [pc, #656]	; (8023a00 <dType1_Clock_Init+0x610>)
 802376e:	4aa5      	ldr	r2, [pc, #660]	; (8023a04 <dType1_Clock_Init+0x614>)
 8023770:	625a      	str	r2, [r3, #36]	; 0x24

	 		  lv_style_copy(&description_Style, &lv_style_plain);
 8023772:	49a5      	ldr	r1, [pc, #660]	; (8023a08 <dType1_Clock_Init+0x618>)
 8023774:	48a5      	ldr	r0, [pc, #660]	; (8023a0c <dType1_Clock_Init+0x61c>)
 8023776:	f7e8 fa97 	bl	800bca8 <lv_style_copy>
	 		  description_Style.text.font = &lv_font_unscii_8;
 802377a:	4ba4      	ldr	r3, [pc, #656]	; (8023a0c <dType1_Clock_Init+0x61c>)
 802377c:	4aa4      	ldr	r2, [pc, #656]	; (8023a10 <dType1_Clock_Init+0x620>)
 802377e:	625a      	str	r2, [r3, #36]	; 0x24
	 		  description_Style.text.color = LV_COLOR_GRAY;
 8023780:	4aa2      	ldr	r2, [pc, #648]	; (8023a0c <dType1_Clock_Init+0x61c>)
 8023782:	4ba4      	ldr	r3, [pc, #656]	; (8023a14 <dType1_Clock_Init+0x624>)
 8023784:	881b      	ldrh	r3, [r3, #0]
 8023786:	8413      	strh	r3, [r2, #32]
	 		    if(theme){
 8023788:	79fb      	ldrb	r3, [r7, #7]
 802378a:	2b00      	cmp	r3, #0
 802378c:	d003      	beq.n	8023796 <dType1_Clock_Init+0x3a6>
	 		    	description_Style.text.color = LV_COLOR_WHITE;
 802378e:	4a9f      	ldr	r2, [pc, #636]	; (8023a0c <dType1_Clock_Init+0x61c>)
 8023790:	4ba1      	ldr	r3, [pc, #644]	; (8023a18 <dType1_Clock_Init+0x628>)
 8023792:	881b      	ldrh	r3, [r3, #0]
 8023794:	8413      	strh	r3, [r2, #32]
	 		    }

	 		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8023796:	f7ff f8fe 	bl	8022996 <lv_scr_act>
 802379a:	4603      	mov	r3, r0
 802379c:	2100      	movs	r1, #0
 802379e:	4618      	mov	r0, r3
 80237a0:	f7f9 f956 	bl	801ca50 <lv_label_create>
 80237a4:	4602      	mov	r2, r0
 80237a6:	4b9d      	ldr	r3, [pc, #628]	; (8023a1c <dType1_Clock_Init+0x62c>)
 80237a8:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(stepsLbl, 150);
 80237aa:	4b9c      	ldr	r3, [pc, #624]	; (8023a1c <dType1_Clock_Init+0x62c>)
 80237ac:	681b      	ldr	r3, [r3, #0]
 80237ae:	2196      	movs	r1, #150	; 0x96
 80237b0:	4618      	mov	r0, r3
 80237b2:	f7e6 f80b 	bl	80097cc <lv_obj_set_width>
	 		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 80237b6:	4b99      	ldr	r3, [pc, #612]	; (8023a1c <dType1_Clock_Init+0x62c>)
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	4a91      	ldr	r2, [pc, #580]	; (8023a00 <dType1_Clock_Init+0x610>)
 80237bc:	2100      	movs	r1, #0
 80237be:	4618      	mov	r0, r3
 80237c0:	f7ff f8f4 	bl	80229ac <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", steps);
 80237c4:	4b96      	ldr	r3, [pc, #600]	; (8023a20 <dType1_Clock_Init+0x630>)
 80237c6:	881b      	ldrh	r3, [r3, #0]
 80237c8:	4a96      	ldr	r2, [pc, #600]	; (8023a24 <dType1_Clock_Init+0x634>)
 80237ca:	2108      	movs	r1, #8
 80237cc:	4896      	ldr	r0, [pc, #600]	; (8023a28 <dType1_Clock_Init+0x638>)
 80237ce:	f007 fceb 	bl	802b1a8 <sniprintf>
	 		 lv_label_set_text(stepsLbl, buffer);
 80237d2:	4b92      	ldr	r3, [pc, #584]	; (8023a1c <dType1_Clock_Init+0x62c>)
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	4994      	ldr	r1, [pc, #592]	; (8023a28 <dType1_Clock_Init+0x638>)
 80237d8:	4618      	mov	r0, r3
 80237da:	f7f9 fa6b 	bl	801ccb4 <lv_label_set_text>
	 		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 80237de:	4b8f      	ldr	r3, [pc, #572]	; (8023a1c <dType1_Clock_Init+0x62c>)
 80237e0:	6818      	ldr	r0, [r3, #0]
 80237e2:	2328      	movs	r3, #40	; 0x28
 80237e4:	9300      	str	r3, [sp, #0]
 80237e6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80237ea:	2200      	movs	r2, #0
 80237ec:	2100      	movs	r1, #0
 80237ee:	f7e6 f817 	bl	8009820 <lv_obj_align>

	 		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 80237f2:	f7ff f8d0 	bl	8022996 <lv_scr_act>
 80237f6:	4603      	mov	r3, r0
 80237f8:	2100      	movs	r1, #0
 80237fa:	4618      	mov	r0, r3
 80237fc:	f7f9 f928 	bl	801ca50 <lv_label_create>
 8023800:	4602      	mov	r2, r0
 8023802:	4b8a      	ldr	r3, [pc, #552]	; (8023a2c <dType1_Clock_Init+0x63c>)
 8023804:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023806:	4b89      	ldr	r3, [pc, #548]	; (8023a2c <dType1_Clock_Init+0x63c>)
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	4a80      	ldr	r2, [pc, #512]	; (8023a0c <dType1_Clock_Init+0x61c>)
 802380c:	2100      	movs	r1, #0
 802380e:	4618      	mov	r0, r3
 8023810:	f7ff f8cc 	bl	80229ac <lv_label_set_style>
	 		 lv_label_set_text(stepsDescLbl, "steps");
 8023814:	4b85      	ldr	r3, [pc, #532]	; (8023a2c <dType1_Clock_Init+0x63c>)
 8023816:	681b      	ldr	r3, [r3, #0]
 8023818:	4985      	ldr	r1, [pc, #532]	; (8023a30 <dType1_Clock_Init+0x640>)
 802381a:	4618      	mov	r0, r3
 802381c:	f7f9 fa4a 	bl	801ccb4 <lv_label_set_text>
	 		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 8023820:	4b82      	ldr	r3, [pc, #520]	; (8023a2c <dType1_Clock_Init+0x63c>)
 8023822:	6818      	ldr	r0, [r3, #0]
 8023824:	2337      	movs	r3, #55	; 0x37
 8023826:	9300      	str	r3, [sp, #0]
 8023828:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802382c:	2200      	movs	r2, #0
 802382e:	2100      	movs	r1, #0
 8023830:	f7e5 fff6 	bl	8009820 <lv_obj_align>

	 		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8023834:	f7ff f8af 	bl	8022996 <lv_scr_act>
 8023838:	4603      	mov	r3, r0
 802383a:	2100      	movs	r1, #0
 802383c:	4618      	mov	r0, r3
 802383e:	f7f4 fb05 	bl	8017e4c <lv_arc_create>
 8023842:	4602      	mov	r2, r0
 8023844:	4b7b      	ldr	r3, [pc, #492]	; (8023a34 <dType1_Clock_Init+0x644>)
 8023846:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(stepsArc, 40, 40);
 8023848:	4b7a      	ldr	r3, [pc, #488]	; (8023a34 <dType1_Clock_Init+0x644>)
 802384a:	681b      	ldr	r3, [r3, #0]
 802384c:	2228      	movs	r2, #40	; 0x28
 802384e:	2128      	movs	r1, #40	; 0x28
 8023850:	4618      	mov	r0, r3
 8023852:	f7e5 ff42 	bl	80096da <lv_obj_set_size>
	 		  lv_arc_set_angles(stepsArc, 0, 360);
 8023856:	4b77      	ldr	r3, [pc, #476]	; (8023a34 <dType1_Clock_Init+0x644>)
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802385e:	2100      	movs	r1, #0
 8023860:	4618      	mov	r0, r3
 8023862:	f7f4 fb6f 	bl	8017f44 <lv_arc_set_angles>
	 		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8023866:	4b73      	ldr	r3, [pc, #460]	; (8023a34 <dType1_Clock_Init+0x644>)
 8023868:	681b      	ldr	r3, [r3, #0]
 802386a:	4a65      	ldr	r2, [pc, #404]	; (8023a00 <dType1_Clock_Init+0x610>)
 802386c:	2100      	movs	r1, #0
 802386e:	4618      	mov	r0, r3
 8023870:	f7f4 fb91 	bl	8017f96 <lv_arc_set_style>
	 		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 0);
 8023874:	4b6f      	ldr	r3, [pc, #444]	; (8023a34 <dType1_Clock_Init+0x644>)
 8023876:	6818      	ldr	r0, [r3, #0]
 8023878:	2300      	movs	r3, #0
 802387a:	9300      	str	r3, [sp, #0]
 802387c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023880:	2200      	movs	r2, #0
 8023882:	2100      	movs	r1, #0
 8023884:	f7e5 ffcc 	bl	8009820 <lv_obj_align>

	 		  //Kcal
	 		 static lv_style_t kCals_Style;
	 		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8023888:	495f      	ldr	r1, [pc, #380]	; (8023a08 <dType1_Clock_Init+0x618>)
 802388a:	486b      	ldr	r0, [pc, #428]	; (8023a38 <dType1_Clock_Init+0x648>)
 802388c:	f7e8 fa0c 	bl	800bca8 <lv_style_copy>
	 		  kCals_Style.line.color = LV_COLOR_RED;
 8023890:	4a69      	ldr	r2, [pc, #420]	; (8023a38 <dType1_Clock_Init+0x648>)
 8023892:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023896:	f36f 0302 	bfc	r3, #0, #3
 802389a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802389e:	4a66      	ldr	r2, [pc, #408]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238a0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80238a4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80238a8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80238ac:	4a62      	ldr	r2, [pc, #392]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238ae:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80238b2:	f36f 0304 	bfc	r3, #0, #5
 80238b6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80238ba:	4a5f      	ldr	r2, [pc, #380]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238bc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80238c0:	f36f 1347 	bfc	r3, #5, #3
 80238c4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  kCals_Style.line.width = 5;
 80238c8:	4b5b      	ldr	r3, [pc, #364]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238ca:	2205      	movs	r2, #5
 80238cc:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  kCals_Style.text.color = LV_COLOR_RED;
 80238ce:	4a5a      	ldr	r2, [pc, #360]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238d0:	f892 3020 	ldrb.w	r3, [r2, #32]
 80238d4:	f36f 0302 	bfc	r3, #0, #3
 80238d8:	f882 3020 	strb.w	r3, [r2, #32]
 80238dc:	4a56      	ldr	r2, [pc, #344]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80238e2:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80238e6:	f882 3020 	strb.w	r3, [r2, #32]
 80238ea:	4a53      	ldr	r2, [pc, #332]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238ec:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80238f0:	f36f 0304 	bfc	r3, #0, #5
 80238f4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80238f8:	4a4f      	ldr	r2, [pc, #316]	; (8023a38 <dType1_Clock_Init+0x648>)
 80238fa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80238fe:	f36f 1347 	bfc	r3, #5, #3
 8023902:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  kCals_Style.text.font = &lv_font_roboto_22;
 8023906:	4b4c      	ldr	r3, [pc, #304]	; (8023a38 <dType1_Clock_Init+0x648>)
 8023908:	4a3e      	ldr	r2, [pc, #248]	; (8023a04 <dType1_Clock_Init+0x614>)
 802390a:	625a      	str	r2, [r3, #36]	; 0x24

	 		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 802390c:	f7ff f843 	bl	8022996 <lv_scr_act>
 8023910:	4603      	mov	r3, r0
 8023912:	2100      	movs	r1, #0
 8023914:	4618      	mov	r0, r3
 8023916:	f7f9 f89b 	bl	801ca50 <lv_label_create>
 802391a:	4602      	mov	r2, r0
 802391c:	4b47      	ldr	r3, [pc, #284]	; (8023a3c <dType1_Clock_Init+0x64c>)
 802391e:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(kCalsLbl, 150);
 8023920:	4b46      	ldr	r3, [pc, #280]	; (8023a3c <dType1_Clock_Init+0x64c>)
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	2196      	movs	r1, #150	; 0x96
 8023926:	4618      	mov	r0, r3
 8023928:	f7e5 ff50 	bl	80097cc <lv_obj_set_width>
	 		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 802392c:	4b43      	ldr	r3, [pc, #268]	; (8023a3c <dType1_Clock_Init+0x64c>)
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	4a41      	ldr	r2, [pc, #260]	; (8023a38 <dType1_Clock_Init+0x648>)
 8023932:	2100      	movs	r1, #0
 8023934:	4618      	mov	r0, r3
 8023936:	f7ff f839 	bl	80229ac <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", kCals);
 802393a:	4b41      	ldr	r3, [pc, #260]	; (8023a40 <dType1_Clock_Init+0x650>)
 802393c:	881b      	ldrh	r3, [r3, #0]
 802393e:	4a39      	ldr	r2, [pc, #228]	; (8023a24 <dType1_Clock_Init+0x634>)
 8023940:	2108      	movs	r1, #8
 8023942:	4839      	ldr	r0, [pc, #228]	; (8023a28 <dType1_Clock_Init+0x638>)
 8023944:	f007 fc30 	bl	802b1a8 <sniprintf>
	 		 lv_label_set_text(kCalsLbl, buffer);
 8023948:	4b3c      	ldr	r3, [pc, #240]	; (8023a3c <dType1_Clock_Init+0x64c>)
 802394a:	681b      	ldr	r3, [r3, #0]
 802394c:	4936      	ldr	r1, [pc, #216]	; (8023a28 <dType1_Clock_Init+0x638>)
 802394e:	4618      	mov	r0, r3
 8023950:	f7f9 f9b0 	bl	801ccb4 <lv_label_set_text>
	 		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8023954:	4b39      	ldr	r3, [pc, #228]	; (8023a3c <dType1_Clock_Init+0x64c>)
 8023956:	6818      	ldr	r0, [r3, #0]
 8023958:	2328      	movs	r3, #40	; 0x28
 802395a:	9300      	str	r3, [sp, #0]
 802395c:	233c      	movs	r3, #60	; 0x3c
 802395e:	2200      	movs	r2, #0
 8023960:	2100      	movs	r1, #0
 8023962:	f7e5 ff5d 	bl	8009820 <lv_obj_align>


	 		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8023966:	f7ff f816 	bl	8022996 <lv_scr_act>
 802396a:	4603      	mov	r3, r0
 802396c:	2100      	movs	r1, #0
 802396e:	4618      	mov	r0, r3
 8023970:	f7f9 f86e 	bl	801ca50 <lv_label_create>
 8023974:	4602      	mov	r2, r0
 8023976:	4b33      	ldr	r3, [pc, #204]	; (8023a44 <dType1_Clock_Init+0x654>)
 8023978:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802397a:	4b32      	ldr	r3, [pc, #200]	; (8023a44 <dType1_Clock_Init+0x654>)
 802397c:	681b      	ldr	r3, [r3, #0]
 802397e:	4a23      	ldr	r2, [pc, #140]	; (8023a0c <dType1_Clock_Init+0x61c>)
 8023980:	2100      	movs	r1, #0
 8023982:	4618      	mov	r0, r3
 8023984:	f7ff f812 	bl	80229ac <lv_label_set_style>
	 		 lv_label_set_text(kCalsDescLbl, "kCals");
 8023988:	4b2e      	ldr	r3, [pc, #184]	; (8023a44 <dType1_Clock_Init+0x654>)
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	492e      	ldr	r1, [pc, #184]	; (8023a48 <dType1_Clock_Init+0x658>)
 802398e:	4618      	mov	r0, r3
 8023990:	f7f9 f990 	bl	801ccb4 <lv_label_set_text>
	 		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8023994:	4b2b      	ldr	r3, [pc, #172]	; (8023a44 <dType1_Clock_Init+0x654>)
 8023996:	6818      	ldr	r0, [r3, #0]
 8023998:	2337      	movs	r3, #55	; 0x37
 802399a:	9300      	str	r3, [sp, #0]
 802399c:	233c      	movs	r3, #60	; 0x3c
 802399e:	2200      	movs	r2, #0
 80239a0:	2100      	movs	r1, #0
 80239a2:	f7e5 ff3d 	bl	8009820 <lv_obj_align>

	 		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 80239a6:	f7fe fff6 	bl	8022996 <lv_scr_act>
 80239aa:	4603      	mov	r3, r0
 80239ac:	2100      	movs	r1, #0
 80239ae:	4618      	mov	r0, r3
 80239b0:	f7f4 fa4c 	bl	8017e4c <lv_arc_create>
 80239b4:	4602      	mov	r2, r0
 80239b6:	4b25      	ldr	r3, [pc, #148]	; (8023a4c <dType1_Clock_Init+0x65c>)
 80239b8:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(kCalsArc, 40, 40);
 80239ba:	4b24      	ldr	r3, [pc, #144]	; (8023a4c <dType1_Clock_Init+0x65c>)
 80239bc:	681b      	ldr	r3, [r3, #0]
 80239be:	2228      	movs	r2, #40	; 0x28
 80239c0:	2128      	movs	r1, #40	; 0x28
 80239c2:	4618      	mov	r0, r3
 80239c4:	f7e5 fe89 	bl	80096da <lv_obj_set_size>
	 		  lv_arc_set_angles(kCalsArc, 0, 360);
 80239c8:	4b20      	ldr	r3, [pc, #128]	; (8023a4c <dType1_Clock_Init+0x65c>)
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80239d0:	2100      	movs	r1, #0
 80239d2:	4618      	mov	r0, r3
 80239d4:	f7f4 fab6 	bl	8017f44 <lv_arc_set_angles>
	 		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 80239d8:	4b1c      	ldr	r3, [pc, #112]	; (8023a4c <dType1_Clock_Init+0x65c>)
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	4a16      	ldr	r2, [pc, #88]	; (8023a38 <dType1_Clock_Init+0x648>)
 80239de:	2100      	movs	r1, #0
 80239e0:	4618      	mov	r0, r3
 80239e2:	f7f4 fad8 	bl	8017f96 <lv_arc_set_style>
	 		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 0);
 80239e6:	4b19      	ldr	r3, [pc, #100]	; (8023a4c <dType1_Clock_Init+0x65c>)
 80239e8:	6818      	ldr	r0, [r3, #0]
 80239ea:	2300      	movs	r3, #0
 80239ec:	9300      	str	r3, [sp, #0]
 80239ee:	233c      	movs	r3, #60	; 0x3c
 80239f0:	2200      	movs	r2, #0
 80239f2:	2100      	movs	r1, #0
 80239f4:	f7e5 ff14 	bl	8009820 <lv_obj_align>
}
 80239f8:	bf00      	nop
 80239fa:	3708      	adds	r7, #8
 80239fc:	46bd      	mov	sp, r7
 80239fe:	bd80      	pop	{r7, pc}
 8023a00:	2001aa0c 	.word	0x2001aa0c
 8023a04:	200017c4 	.word	0x200017c4
 8023a08:	2001ba40 	.word	0x2001ba40
 8023a0c:	2001aa48 	.word	0x2001aa48
 8023a10:	200026d0 	.word	0x200026d0
 8023a14:	0802d5a0 	.word	0x0802d5a0
 8023a18:	0802d560 	.word	0x0802d560
 8023a1c:	2001bc5c 	.word	0x2001bc5c
 8023a20:	2001b5cc 	.word	0x2001b5cc
 8023a24:	0802d56c 	.word	0x0802d56c
 8023a28:	2001bc48 	.word	0x2001bc48
 8023a2c:	2001bbf4 	.word	0x2001bbf4
 8023a30:	0802d574 	.word	0x0802d574
 8023a34:	2001bc40 	.word	0x2001bc40
 8023a38:	2001aa84 	.word	0x2001aa84
 8023a3c:	2001bcb8 	.word	0x2001bcb8
 8023a40:	2001bbe2 	.word	0x2001bbe2
 8023a44:	2001bca4 	.word	0x2001bca4
 8023a48:	0802d57c 	.word	0x0802d57c
 8023a4c:	2001bcc0 	.word	0x2001bcc0

08023a50 <dType2_Clock_Init>:
/*Only digital Type*/
void dType2_Clock_Init(bool theme) {
 8023a50:	b580      	push	{r7, lr}
 8023a52:	b084      	sub	sp, #16
 8023a54:	af02      	add	r7, sp, #8
 8023a56:	4603      	mov	r3, r0
 8023a58:	71fb      	strb	r3, [r7, #7]
	//Digital Clock
	static lv_style_t dClock_style,dDate_style,weekD_style;
			lv_style_copy(&dClock_style, &lv_style_plain);
 8023a5a:	49b4      	ldr	r1, [pc, #720]	; (8023d2c <dType2_Clock_Init+0x2dc>)
 8023a5c:	48b4      	ldr	r0, [pc, #720]	; (8023d30 <dType2_Clock_Init+0x2e0>)
 8023a5e:	f7e8 f923 	bl	800bca8 <lv_style_copy>
		    dClock_style.text.font =&digital_font_for_number_65;
 8023a62:	4bb3      	ldr	r3, [pc, #716]	; (8023d30 <dType2_Clock_Init+0x2e0>)
 8023a64:	4ab3      	ldr	r2, [pc, #716]	; (8023d34 <dType2_Clock_Init+0x2e4>)
 8023a66:	625a      	str	r2, [r3, #36]	; 0x24
		    lv_style_copy(&dDate_style, &lv_style_plain);
 8023a68:	49b0      	ldr	r1, [pc, #704]	; (8023d2c <dType2_Clock_Init+0x2dc>)
 8023a6a:	48b3      	ldr	r0, [pc, #716]	; (8023d38 <dType2_Clock_Init+0x2e8>)
 8023a6c:	f7e8 f91c 	bl	800bca8 <lv_style_copy>
		    dDate_style.text.font =&digital_font_for_number_30;
 8023a70:	4bb1      	ldr	r3, [pc, #708]	; (8023d38 <dType2_Clock_Init+0x2e8>)
 8023a72:	4ab2      	ldr	r2, [pc, #712]	; (8023d3c <dType2_Clock_Init+0x2ec>)
 8023a74:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&weekD_style, &lv_style_plain);
 8023a76:	49ad      	ldr	r1, [pc, #692]	; (8023d2c <dType2_Clock_Init+0x2dc>)
 8023a78:	48b1      	ldr	r0, [pc, #708]	; (8023d40 <dType2_Clock_Init+0x2f0>)
 8023a7a:	f7e8 f915 	bl	800bca8 <lv_style_copy>
			weekD_style.text.font =&lv_font_roboto_22;
 8023a7e:	4bb0      	ldr	r3, [pc, #704]	; (8023d40 <dType2_Clock_Init+0x2f0>)
 8023a80:	4ab0      	ldr	r2, [pc, #704]	; (8023d44 <dType2_Clock_Init+0x2f4>)
 8023a82:	625a      	str	r2, [r3, #36]	; 0x24
		    if(theme){
 8023a84:	79fb      	ldrb	r3, [r7, #7]
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d00b      	beq.n	8023aa2 <dType2_Clock_Init+0x52>
		    	dClock_style.text.color = LV_COLOR_WHITE;
 8023a8a:	4aa9      	ldr	r2, [pc, #676]	; (8023d30 <dType2_Clock_Init+0x2e0>)
 8023a8c:	4bae      	ldr	r3, [pc, #696]	; (8023d48 <dType2_Clock_Init+0x2f8>)
 8023a8e:	881b      	ldrh	r3, [r3, #0]
 8023a90:	8413      	strh	r3, [r2, #32]
		    	dDate_style.text.color = LV_COLOR_WHITE;
 8023a92:	4aa9      	ldr	r2, [pc, #676]	; (8023d38 <dType2_Clock_Init+0x2e8>)
 8023a94:	4bac      	ldr	r3, [pc, #688]	; (8023d48 <dType2_Clock_Init+0x2f8>)
 8023a96:	881b      	ldrh	r3, [r3, #0]
 8023a98:	8413      	strh	r3, [r2, #32]
		    	weekD_style.text.color = LV_COLOR_WHITE;
 8023a9a:	4aa9      	ldr	r2, [pc, #676]	; (8023d40 <dType2_Clock_Init+0x2f0>)
 8023a9c:	4baa      	ldr	r3, [pc, #680]	; (8023d48 <dType2_Clock_Init+0x2f8>)
 8023a9e:	881b      	ldrh	r3, [r3, #0]
 8023aa0:	8413      	strh	r3, [r2, #32]
		    }

		    digitalClock = lv_label_create(lv_scr_act(), NULL);
 8023aa2:	f7fe ff78 	bl	8022996 <lv_scr_act>
 8023aa6:	4603      	mov	r3, r0
 8023aa8:	2100      	movs	r1, #0
 8023aaa:	4618      	mov	r0, r3
 8023aac:	f7f8 ffd0 	bl	801ca50 <lv_label_create>
 8023ab0:	4602      	mov	r2, r0
 8023ab2:	4ba6      	ldr	r3, [pc, #664]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023ab4:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 8023ab6:	4ba5      	ldr	r3, [pc, #660]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	4a9d      	ldr	r2, [pc, #628]	; (8023d30 <dType2_Clock_Init+0x2e0>)
 8023abc:	2100      	movs	r1, #0
 8023abe:	4618      	mov	r0, r3
 8023ac0:	f7fe ff74 	bl	80229ac <lv_label_set_style>
		    lv_obj_set_width(digitalClock, 200);
 8023ac4:	4ba1      	ldr	r3, [pc, #644]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	21c8      	movs	r1, #200	; 0xc8
 8023aca:	4618      	mov	r0, r3
 8023acc:	f7e5 fe7e 	bl	80097cc <lv_obj_set_width>
		    snprintf(buffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 8023ad0:	4b9f      	ldr	r3, [pc, #636]	; (8023d50 <dType2_Clock_Init+0x300>)
 8023ad2:	781b      	ldrb	r3, [r3, #0]
 8023ad4:	4619      	mov	r1, r3
 8023ad6:	4b9f      	ldr	r3, [pc, #636]	; (8023d54 <dType2_Clock_Init+0x304>)
 8023ad8:	781b      	ldrb	r3, [r3, #0]
 8023ada:	461a      	mov	r2, r3
 8023adc:	4b9e      	ldr	r3, [pc, #632]	; (8023d58 <dType2_Clock_Init+0x308>)
 8023ade:	781b      	ldrb	r3, [r3, #0]
 8023ae0:	9301      	str	r3, [sp, #4]
 8023ae2:	9200      	str	r2, [sp, #0]
 8023ae4:	460b      	mov	r3, r1
 8023ae6:	4a9d      	ldr	r2, [pc, #628]	; (8023d5c <dType2_Clock_Init+0x30c>)
 8023ae8:	2110      	movs	r1, #16
 8023aea:	489d      	ldr	r0, [pc, #628]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023aec:	f007 fb5c 	bl	802b1a8 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 8023af0:	4b96      	ldr	r3, [pc, #600]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023af2:	681b      	ldr	r3, [r3, #0]
 8023af4:	499a      	ldr	r1, [pc, #616]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023af6:	4618      	mov	r0, r3
 8023af8:	f7f9 f8dc 	bl	801ccb4 <lv_label_set_text>
		    lv_label_set_align(digitalClock, LV_LABEL_ALIGN_CENTER);
 8023afc:	4b93      	ldr	r3, [pc, #588]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	2101      	movs	r1, #1
 8023b02:	4618      	mov	r0, r3
 8023b04:	f7f9 f9ce 	bl	801cea4 <lv_label_set_align>
		    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8023b08:	4b90      	ldr	r3, [pc, #576]	; (8023d4c <dType2_Clock_Init+0x2fc>)
 8023b0a:	6818      	ldr	r0, [r3, #0]
 8023b0c:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8023b10:	9300      	str	r3, [sp, #0]
 8023b12:	2300      	movs	r3, #0
 8023b14:	2200      	movs	r2, #0
 8023b16:	2100      	movs	r1, #0
 8023b18:	f7e5 fe82 	bl	8009820 <lv_obj_align>

		    //Digital Date
		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 8023b1c:	f7fe ff3b 	bl	8022996 <lv_scr_act>
 8023b20:	4603      	mov	r3, r0
 8023b22:	2100      	movs	r1, #0
 8023b24:	4618      	mov	r0, r3
 8023b26:	f7f8 ff93 	bl	801ca50 <lv_label_create>
 8023b2a:	4602      	mov	r2, r0
 8023b2c:	4b8d      	ldr	r3, [pc, #564]	; (8023d64 <dType2_Clock_Init+0x314>)
 8023b2e:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 8023b30:	4b8c      	ldr	r3, [pc, #560]	; (8023d64 <dType2_Clock_Init+0x314>)
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	4a80      	ldr	r2, [pc, #512]	; (8023d38 <dType2_Clock_Init+0x2e8>)
 8023b36:	2100      	movs	r1, #0
 8023b38:	4618      	mov	r0, r3
 8023b3a:	f7fe ff37 	bl	80229ac <lv_label_set_style>
	    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8023b3e:	4b8a      	ldr	r3, [pc, #552]	; (8023d68 <dType2_Clock_Init+0x318>)
 8023b40:	781b      	ldrb	r3, [r3, #0]
 8023b42:	4619      	mov	r1, r3
 8023b44:	4b89      	ldr	r3, [pc, #548]	; (8023d6c <dType2_Clock_Init+0x31c>)
 8023b46:	781b      	ldrb	r3, [r3, #0]
 8023b48:	461a      	mov	r2, r3
 8023b4a:	4b89      	ldr	r3, [pc, #548]	; (8023d70 <dType2_Clock_Init+0x320>)
 8023b4c:	881b      	ldrh	r3, [r3, #0]
 8023b4e:	9301      	str	r3, [sp, #4]
 8023b50:	9200      	str	r2, [sp, #0]
 8023b52:	460b      	mov	r3, r1
 8023b54:	4a87      	ldr	r2, [pc, #540]	; (8023d74 <dType2_Clock_Init+0x324>)
 8023b56:	2110      	movs	r1, #16
 8023b58:	4881      	ldr	r0, [pc, #516]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023b5a:	f007 fb25 	bl	802b1a8 <sniprintf>
			lv_label_set_text(digitalDate, buffer);
 8023b5e:	4b81      	ldr	r3, [pc, #516]	; (8023d64 <dType2_Clock_Init+0x314>)
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	497f      	ldr	r1, [pc, #508]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023b64:	4618      	mov	r0, r3
 8023b66:	f7f9 f8a5 	bl	801ccb4 <lv_label_set_text>
		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8023b6a:	4b7e      	ldr	r3, [pc, #504]	; (8023d64 <dType2_Clock_Init+0x314>)
 8023b6c:	6818      	ldr	r0, [r3, #0]
 8023b6e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8023b72:	9300      	str	r3, [sp, #0]
 8023b74:	2300      	movs	r3, #0
 8023b76:	2200      	movs	r2, #0
 8023b78:	2100      	movs	r1, #0
 8023b7a:	f7e5 fe51 	bl	8009820 <lv_obj_align>

		    //Week Day
		    weekDay = lv_label_create(lv_scr_act(), NULL);
 8023b7e:	f7fe ff0a 	bl	8022996 <lv_scr_act>
 8023b82:	4603      	mov	r3, r0
 8023b84:	2100      	movs	r1, #0
 8023b86:	4618      	mov	r0, r3
 8023b88:	f7f8 ff62 	bl	801ca50 <lv_label_create>
 8023b8c:	4602      	mov	r2, r0
 8023b8e:	4b7a      	ldr	r3, [pc, #488]	; (8023d78 <dType2_Clock_Init+0x328>)
 8023b90:	601a      	str	r2, [r3, #0]
		    lv_obj_set_width(weekDay, 150);
 8023b92:	4b79      	ldr	r3, [pc, #484]	; (8023d78 <dType2_Clock_Init+0x328>)
 8023b94:	681b      	ldr	r3, [r3, #0]
 8023b96:	2196      	movs	r1, #150	; 0x96
 8023b98:	4618      	mov	r0, r3
 8023b9a:	f7e5 fe17 	bl	80097cc <lv_obj_set_width>
		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 8023b9e:	4b76      	ldr	r3, [pc, #472]	; (8023d78 <dType2_Clock_Init+0x328>)
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	4a67      	ldr	r2, [pc, #412]	; (8023d40 <dType2_Clock_Init+0x2f0>)
 8023ba4:	2100      	movs	r1, #0
 8023ba6:	4618      	mov	r0, r3
 8023ba8:	f7fe ff00 	bl	80229ac <lv_label_set_style>
		    lv_label_set_text(weekDay,weekDayStr);
 8023bac:	4b72      	ldr	r3, [pc, #456]	; (8023d78 <dType2_Clock_Init+0x328>)
 8023bae:	681a      	ldr	r2, [r3, #0]
 8023bb0:	4b72      	ldr	r3, [pc, #456]	; (8023d7c <dType2_Clock_Init+0x32c>)
 8023bb2:	681b      	ldr	r3, [r3, #0]
 8023bb4:	4619      	mov	r1, r3
 8023bb6:	4610      	mov	r0, r2
 8023bb8:	f7f9 f87c 	bl	801ccb4 <lv_label_set_text>
		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8023bbc:	4b6e      	ldr	r3, [pc, #440]	; (8023d78 <dType2_Clock_Init+0x328>)
 8023bbe:	6818      	ldr	r0, [r3, #0]
 8023bc0:	f06f 0309 	mvn.w	r3, #9
 8023bc4:	9300      	str	r3, [sp, #0]
 8023bc6:	2300      	movs	r3, #0
 8023bc8:	2200      	movs	r2, #0
 8023bca:	2100      	movs	r1, #0
 8023bcc:	f7e5 fe28 	bl	8009820 <lv_obj_align>

		    //Steps
		    static lv_style_t steps_Style,description_Style;
		   		  lv_style_copy(&steps_Style, &lv_style_plain);
 8023bd0:	4956      	ldr	r1, [pc, #344]	; (8023d2c <dType2_Clock_Init+0x2dc>)
 8023bd2:	486b      	ldr	r0, [pc, #428]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023bd4:	f7e8 f868 	bl	800bca8 <lv_style_copy>
		   		  steps_Style.line.color = LV_COLOR_GREEN;
 8023bd8:	4a69      	ldr	r2, [pc, #420]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023bda:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023bde:	2104      	movs	r1, #4
 8023be0:	f361 0302 	bfi	r3, r1, #0, #3
 8023be4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023be8:	4a65      	ldr	r2, [pc, #404]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023bea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023bee:	f36f 03c7 	bfc	r3, #3, #5
 8023bf2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023bf6:	4a62      	ldr	r2, [pc, #392]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023bf8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023bfc:	f36f 0304 	bfc	r3, #0, #5
 8023c00:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8023c04:	4a5e      	ldr	r2, [pc, #376]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c06:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023c0a:	f36f 1347 	bfc	r3, #5, #3
 8023c0e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  steps_Style.line.width = 5;
 8023c12:	4b5b      	ldr	r3, [pc, #364]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c14:	2205      	movs	r2, #5
 8023c16:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  steps_Style.text.color = LV_COLOR_GREEN;
 8023c18:	4a59      	ldr	r2, [pc, #356]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c1a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023c1e:	2104      	movs	r1, #4
 8023c20:	f361 0302 	bfi	r3, r1, #0, #3
 8023c24:	f882 3020 	strb.w	r3, [r2, #32]
 8023c28:	4a55      	ldr	r2, [pc, #340]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c2a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023c2e:	f36f 03c7 	bfc	r3, #3, #5
 8023c32:	f882 3020 	strb.w	r3, [r2, #32]
 8023c36:	4a52      	ldr	r2, [pc, #328]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c38:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023c3c:	f36f 0304 	bfc	r3, #0, #5
 8023c40:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8023c44:	4a4e      	ldr	r2, [pc, #312]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c46:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023c4a:	f36f 1347 	bfc	r3, #5, #3
 8023c4e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  steps_Style.text.font = &lv_font_roboto_22;
 8023c52:	4b4b      	ldr	r3, [pc, #300]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023c54:	4a3b      	ldr	r2, [pc, #236]	; (8023d44 <dType2_Clock_Init+0x2f4>)
 8023c56:	625a      	str	r2, [r3, #36]	; 0x24

		   		  lv_style_copy(&description_Style, &lv_style_plain);
 8023c58:	4934      	ldr	r1, [pc, #208]	; (8023d2c <dType2_Clock_Init+0x2dc>)
 8023c5a:	484a      	ldr	r0, [pc, #296]	; (8023d84 <dType2_Clock_Init+0x334>)
 8023c5c:	f7e8 f824 	bl	800bca8 <lv_style_copy>
		   		  description_Style.text.font = &lv_font_unscii_8;
 8023c60:	4b48      	ldr	r3, [pc, #288]	; (8023d84 <dType2_Clock_Init+0x334>)
 8023c62:	4a49      	ldr	r2, [pc, #292]	; (8023d88 <dType2_Clock_Init+0x338>)
 8023c64:	625a      	str	r2, [r3, #36]	; 0x24
		   		  description_Style.text.color = LV_COLOR_GRAY;
 8023c66:	4a47      	ldr	r2, [pc, #284]	; (8023d84 <dType2_Clock_Init+0x334>)
 8023c68:	4b48      	ldr	r3, [pc, #288]	; (8023d8c <dType2_Clock_Init+0x33c>)
 8023c6a:	881b      	ldrh	r3, [r3, #0]
 8023c6c:	8413      	strh	r3, [r2, #32]
		   		    if(theme){
 8023c6e:	79fb      	ldrb	r3, [r7, #7]
 8023c70:	2b00      	cmp	r3, #0
 8023c72:	d003      	beq.n	8023c7c <dType2_Clock_Init+0x22c>
		   		    	description_Style.text.color = LV_COLOR_WHITE;
 8023c74:	4a43      	ldr	r2, [pc, #268]	; (8023d84 <dType2_Clock_Init+0x334>)
 8023c76:	4b34      	ldr	r3, [pc, #208]	; (8023d48 <dType2_Clock_Init+0x2f8>)
 8023c78:	881b      	ldrh	r3, [r3, #0]
 8023c7a:	8413      	strh	r3, [r2, #32]
		   		    }

		   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8023c7c:	f7fe fe8b 	bl	8022996 <lv_scr_act>
 8023c80:	4603      	mov	r3, r0
 8023c82:	2100      	movs	r1, #0
 8023c84:	4618      	mov	r0, r3
 8023c86:	f7f8 fee3 	bl	801ca50 <lv_label_create>
 8023c8a:	4602      	mov	r2, r0
 8023c8c:	4b40      	ldr	r3, [pc, #256]	; (8023d90 <dType2_Clock_Init+0x340>)
 8023c8e:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(stepsLbl, 150);
 8023c90:	4b3f      	ldr	r3, [pc, #252]	; (8023d90 <dType2_Clock_Init+0x340>)
 8023c92:	681b      	ldr	r3, [r3, #0]
 8023c94:	2196      	movs	r1, #150	; 0x96
 8023c96:	4618      	mov	r0, r3
 8023c98:	f7e5 fd98 	bl	80097cc <lv_obj_set_width>
		   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8023c9c:	4b3c      	ldr	r3, [pc, #240]	; (8023d90 <dType2_Clock_Init+0x340>)
 8023c9e:	681b      	ldr	r3, [r3, #0]
 8023ca0:	4a37      	ldr	r2, [pc, #220]	; (8023d80 <dType2_Clock_Init+0x330>)
 8023ca2:	2100      	movs	r1, #0
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	f7fe fe81 	bl	80229ac <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", steps);
 8023caa:	4b3a      	ldr	r3, [pc, #232]	; (8023d94 <dType2_Clock_Init+0x344>)
 8023cac:	881b      	ldrh	r3, [r3, #0]
 8023cae:	4a3a      	ldr	r2, [pc, #232]	; (8023d98 <dType2_Clock_Init+0x348>)
 8023cb0:	2108      	movs	r1, #8
 8023cb2:	482b      	ldr	r0, [pc, #172]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023cb4:	f007 fa78 	bl	802b1a8 <sniprintf>
		   		 lv_label_set_text(stepsLbl, buffer);
 8023cb8:	4b35      	ldr	r3, [pc, #212]	; (8023d90 <dType2_Clock_Init+0x340>)
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	4928      	ldr	r1, [pc, #160]	; (8023d60 <dType2_Clock_Init+0x310>)
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	f7f8 fff8 	bl	801ccb4 <lv_label_set_text>
		   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8023cc4:	4b32      	ldr	r3, [pc, #200]	; (8023d90 <dType2_Clock_Init+0x340>)
 8023cc6:	6818      	ldr	r0, [r3, #0]
 8023cc8:	2328      	movs	r3, #40	; 0x28
 8023cca:	9300      	str	r3, [sp, #0]
 8023ccc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023cd0:	2200      	movs	r2, #0
 8023cd2:	2100      	movs	r1, #0
 8023cd4:	f7e5 fda4 	bl	8009820 <lv_obj_align>

		   		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8023cd8:	f7fe fe5d 	bl	8022996 <lv_scr_act>
 8023cdc:	4603      	mov	r3, r0
 8023cde:	2100      	movs	r1, #0
 8023ce0:	4618      	mov	r0, r3
 8023ce2:	f7f8 feb5 	bl	801ca50 <lv_label_create>
 8023ce6:	4602      	mov	r2, r0
 8023ce8:	4b2c      	ldr	r3, [pc, #176]	; (8023d9c <dType2_Clock_Init+0x34c>)
 8023cea:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023cec:	4b2b      	ldr	r3, [pc, #172]	; (8023d9c <dType2_Clock_Init+0x34c>)
 8023cee:	681b      	ldr	r3, [r3, #0]
 8023cf0:	4a24      	ldr	r2, [pc, #144]	; (8023d84 <dType2_Clock_Init+0x334>)
 8023cf2:	2100      	movs	r1, #0
 8023cf4:	4618      	mov	r0, r3
 8023cf6:	f7fe fe59 	bl	80229ac <lv_label_set_style>
		   		 lv_label_set_text(stepsDescLbl, "steps");
 8023cfa:	4b28      	ldr	r3, [pc, #160]	; (8023d9c <dType2_Clock_Init+0x34c>)
 8023cfc:	681b      	ldr	r3, [r3, #0]
 8023cfe:	4928      	ldr	r1, [pc, #160]	; (8023da0 <dType2_Clock_Init+0x350>)
 8023d00:	4618      	mov	r0, r3
 8023d02:	f7f8 ffd7 	bl	801ccb4 <lv_label_set_text>
		   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 8023d06:	4b25      	ldr	r3, [pc, #148]	; (8023d9c <dType2_Clock_Init+0x34c>)
 8023d08:	6818      	ldr	r0, [r3, #0]
 8023d0a:	2337      	movs	r3, #55	; 0x37
 8023d0c:	9300      	str	r3, [sp, #0]
 8023d0e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023d12:	2200      	movs	r2, #0
 8023d14:	2100      	movs	r1, #0
 8023d16:	f7e5 fd83 	bl	8009820 <lv_obj_align>

		   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8023d1a:	f7fe fe3c 	bl	8022996 <lv_scr_act>
 8023d1e:	4603      	mov	r3, r0
 8023d20:	2100      	movs	r1, #0
 8023d22:	4618      	mov	r0, r3
 8023d24:	f7f4 f892 	bl	8017e4c <lv_arc_create>
 8023d28:	4602      	mov	r2, r0
 8023d2a:	e03b      	b.n	8023da4 <dType2_Clock_Init+0x354>
 8023d2c:	2001ba40 	.word	0x2001ba40
 8023d30:	2001aac0 	.word	0x2001aac0
 8023d34:	2000281c 	.word	0x2000281c
 8023d38:	2001aafc 	.word	0x2001aafc
 8023d3c:	200027ec 	.word	0x200027ec
 8023d40:	2001ab38 	.word	0x2001ab38
 8023d44:	200017c4 	.word	0x200017c4
 8023d48:	0802d560 	.word	0x0802d560
 8023d4c:	2001bbec 	.word	0x2001bbec
 8023d50:	2001bcbe 	.word	0x2001bcbe
 8023d54:	2001bcbd 	.word	0x2001bcbd
 8023d58:	2001bcac 	.word	0x2001bcac
 8023d5c:	0802d5a4 	.word	0x0802d5a4
 8023d60:	2001bc48 	.word	0x2001bc48
 8023d64:	2001bbe4 	.word	0x2001bbe4
 8023d68:	2001bcbc 	.word	0x2001bcbc
 8023d6c:	2001bbf0 	.word	0x2001bbf0
 8023d70:	2001bcae 	.word	0x2001bcae
 8023d74:	0802d584 	.word	0x0802d584
 8023d78:	2001bbdc 	.word	0x2001bbdc
 8023d7c:	2001bc3c 	.word	0x2001bc3c
 8023d80:	2001ab74 	.word	0x2001ab74
 8023d84:	2001abb0 	.word	0x2001abb0
 8023d88:	200026d0 	.word	0x200026d0
 8023d8c:	0802d5a0 	.word	0x0802d5a0
 8023d90:	2001bc5c 	.word	0x2001bc5c
 8023d94:	2001b5cc 	.word	0x2001b5cc
 8023d98:	0802d56c 	.word	0x0802d56c
 8023d9c:	2001bbf4 	.word	0x2001bbf4
 8023da0:	0802d574 	.word	0x0802d574
 8023da4:	4b6e      	ldr	r3, [pc, #440]	; (8023f60 <dType2_Clock_Init+0x510>)
 8023da6:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(stepsArc, 80, 80);
 8023da8:	4b6d      	ldr	r3, [pc, #436]	; (8023f60 <dType2_Clock_Init+0x510>)
 8023daa:	681b      	ldr	r3, [r3, #0]
 8023dac:	2250      	movs	r2, #80	; 0x50
 8023dae:	2150      	movs	r1, #80	; 0x50
 8023db0:	4618      	mov	r0, r3
 8023db2:	f7e5 fc92 	bl	80096da <lv_obj_set_size>
		   		  lv_arc_set_angles(stepsArc, 0, 360);
 8023db6:	4b6a      	ldr	r3, [pc, #424]	; (8023f60 <dType2_Clock_Init+0x510>)
 8023db8:	681b      	ldr	r3, [r3, #0]
 8023dba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023dbe:	2100      	movs	r1, #0
 8023dc0:	4618      	mov	r0, r3
 8023dc2:	f7f4 f8bf 	bl	8017f44 <lv_arc_set_angles>
		   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8023dc6:	4b66      	ldr	r3, [pc, #408]	; (8023f60 <dType2_Clock_Init+0x510>)
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	4a66      	ldr	r2, [pc, #408]	; (8023f64 <dType2_Clock_Init+0x514>)
 8023dcc:	2100      	movs	r1, #0
 8023dce:	4618      	mov	r0, r3
 8023dd0:	f7f4 f8e1 	bl	8017f96 <lv_arc_set_style>
		   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 40);
 8023dd4:	4b62      	ldr	r3, [pc, #392]	; (8023f60 <dType2_Clock_Init+0x510>)
 8023dd6:	6818      	ldr	r0, [r3, #0]
 8023dd8:	2328      	movs	r3, #40	; 0x28
 8023dda:	9300      	str	r3, [sp, #0]
 8023ddc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023de0:	2200      	movs	r2, #0
 8023de2:	2100      	movs	r1, #0
 8023de4:	f7e5 fd1c 	bl	8009820 <lv_obj_align>

		   		  //Kcal
		   		static lv_style_t kCals_Style;
		   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8023de8:	495f      	ldr	r1, [pc, #380]	; (8023f68 <dType2_Clock_Init+0x518>)
 8023dea:	4860      	ldr	r0, [pc, #384]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023dec:	f7e7 ff5c 	bl	800bca8 <lv_style_copy>
		   		  kCals_Style.line.color = LV_COLOR_RED;
 8023df0:	4a5e      	ldr	r2, [pc, #376]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023df2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023df6:	f36f 0302 	bfc	r3, #0, #3
 8023dfa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023dfe:	4a5b      	ldr	r2, [pc, #364]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e00:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023e04:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023e08:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023e0c:	4a57      	ldr	r2, [pc, #348]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e0e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023e12:	f36f 0304 	bfc	r3, #0, #5
 8023e16:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8023e1a:	4a54      	ldr	r2, [pc, #336]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e1c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023e20:	f36f 1347 	bfc	r3, #5, #3
 8023e24:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  kCals_Style.line.width = 5;
 8023e28:	4b50      	ldr	r3, [pc, #320]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e2a:	2205      	movs	r2, #5
 8023e2c:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  kCals_Style.text.color = LV_COLOR_RED;
 8023e2e:	4a4f      	ldr	r2, [pc, #316]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e30:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023e34:	f36f 0302 	bfc	r3, #0, #3
 8023e38:	f882 3020 	strb.w	r3, [r2, #32]
 8023e3c:	4a4b      	ldr	r2, [pc, #300]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e3e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023e42:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023e46:	f882 3020 	strb.w	r3, [r2, #32]
 8023e4a:	4a48      	ldr	r2, [pc, #288]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e4c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023e50:	f36f 0304 	bfc	r3, #0, #5
 8023e54:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8023e58:	4a44      	ldr	r2, [pc, #272]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e5a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8023e5e:	f36f 1347 	bfc	r3, #5, #3
 8023e62:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  kCals_Style.text.font = &lv_font_roboto_22;
 8023e66:	4b41      	ldr	r3, [pc, #260]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e68:	4a41      	ldr	r2, [pc, #260]	; (8023f70 <dType2_Clock_Init+0x520>)
 8023e6a:	625a      	str	r2, [r3, #36]	; 0x24

		   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8023e6c:	f7fe fd93 	bl	8022996 <lv_scr_act>
 8023e70:	4603      	mov	r3, r0
 8023e72:	2100      	movs	r1, #0
 8023e74:	4618      	mov	r0, r3
 8023e76:	f7f8 fdeb 	bl	801ca50 <lv_label_create>
 8023e7a:	4602      	mov	r2, r0
 8023e7c:	4b3d      	ldr	r3, [pc, #244]	; (8023f74 <dType2_Clock_Init+0x524>)
 8023e7e:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(kCalsLbl, 150);
 8023e80:	4b3c      	ldr	r3, [pc, #240]	; (8023f74 <dType2_Clock_Init+0x524>)
 8023e82:	681b      	ldr	r3, [r3, #0]
 8023e84:	2196      	movs	r1, #150	; 0x96
 8023e86:	4618      	mov	r0, r3
 8023e88:	f7e5 fca0 	bl	80097cc <lv_obj_set_width>
		   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8023e8c:	4b39      	ldr	r3, [pc, #228]	; (8023f74 <dType2_Clock_Init+0x524>)
 8023e8e:	681b      	ldr	r3, [r3, #0]
 8023e90:	4a36      	ldr	r2, [pc, #216]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023e92:	2100      	movs	r1, #0
 8023e94:	4618      	mov	r0, r3
 8023e96:	f7fe fd89 	bl	80229ac <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", kCals);
 8023e9a:	4b37      	ldr	r3, [pc, #220]	; (8023f78 <dType2_Clock_Init+0x528>)
 8023e9c:	881b      	ldrh	r3, [r3, #0]
 8023e9e:	4a37      	ldr	r2, [pc, #220]	; (8023f7c <dType2_Clock_Init+0x52c>)
 8023ea0:	2108      	movs	r1, #8
 8023ea2:	4837      	ldr	r0, [pc, #220]	; (8023f80 <dType2_Clock_Init+0x530>)
 8023ea4:	f007 f980 	bl	802b1a8 <sniprintf>
		   		 lv_label_set_text(kCalsLbl, buffer);
 8023ea8:	4b32      	ldr	r3, [pc, #200]	; (8023f74 <dType2_Clock_Init+0x524>)
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	4934      	ldr	r1, [pc, #208]	; (8023f80 <dType2_Clock_Init+0x530>)
 8023eae:	4618      	mov	r0, r3
 8023eb0:	f7f8 ff00 	bl	801ccb4 <lv_label_set_text>
		   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8023eb4:	4b2f      	ldr	r3, [pc, #188]	; (8023f74 <dType2_Clock_Init+0x524>)
 8023eb6:	6818      	ldr	r0, [r3, #0]
 8023eb8:	2328      	movs	r3, #40	; 0x28
 8023eba:	9300      	str	r3, [sp, #0]
 8023ebc:	233c      	movs	r3, #60	; 0x3c
 8023ebe:	2200      	movs	r2, #0
 8023ec0:	2100      	movs	r1, #0
 8023ec2:	f7e5 fcad 	bl	8009820 <lv_obj_align>

		   		 kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8023ec6:	f7fe fd66 	bl	8022996 <lv_scr_act>
 8023eca:	4603      	mov	r3, r0
 8023ecc:	2100      	movs	r1, #0
 8023ece:	4618      	mov	r0, r3
 8023ed0:	f7f8 fdbe 	bl	801ca50 <lv_label_create>
 8023ed4:	4602      	mov	r2, r0
 8023ed6:	4b2b      	ldr	r3, [pc, #172]	; (8023f84 <dType2_Clock_Init+0x534>)
 8023ed8:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023eda:	4b2a      	ldr	r3, [pc, #168]	; (8023f84 <dType2_Clock_Init+0x534>)
 8023edc:	681b      	ldr	r3, [r3, #0]
 8023ede:	4a2a      	ldr	r2, [pc, #168]	; (8023f88 <dType2_Clock_Init+0x538>)
 8023ee0:	2100      	movs	r1, #0
 8023ee2:	4618      	mov	r0, r3
 8023ee4:	f7fe fd62 	bl	80229ac <lv_label_set_style>
		   		 lv_label_set_text(kCalsDescLbl, "kCals");
 8023ee8:	4b26      	ldr	r3, [pc, #152]	; (8023f84 <dType2_Clock_Init+0x534>)
 8023eea:	681b      	ldr	r3, [r3, #0]
 8023eec:	4927      	ldr	r1, [pc, #156]	; (8023f8c <dType2_Clock_Init+0x53c>)
 8023eee:	4618      	mov	r0, r3
 8023ef0:	f7f8 fee0 	bl	801ccb4 <lv_label_set_text>
		   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8023ef4:	4b23      	ldr	r3, [pc, #140]	; (8023f84 <dType2_Clock_Init+0x534>)
 8023ef6:	6818      	ldr	r0, [r3, #0]
 8023ef8:	2337      	movs	r3, #55	; 0x37
 8023efa:	9300      	str	r3, [sp, #0]
 8023efc:	233c      	movs	r3, #60	; 0x3c
 8023efe:	2200      	movs	r2, #0
 8023f00:	2100      	movs	r1, #0
 8023f02:	f7e5 fc8d 	bl	8009820 <lv_obj_align>

		   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8023f06:	f7fe fd46 	bl	8022996 <lv_scr_act>
 8023f0a:	4603      	mov	r3, r0
 8023f0c:	2100      	movs	r1, #0
 8023f0e:	4618      	mov	r0, r3
 8023f10:	f7f3 ff9c 	bl	8017e4c <lv_arc_create>
 8023f14:	4602      	mov	r2, r0
 8023f16:	4b1e      	ldr	r3, [pc, #120]	; (8023f90 <dType2_Clock_Init+0x540>)
 8023f18:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(kCalsArc, 80, 80);
 8023f1a:	4b1d      	ldr	r3, [pc, #116]	; (8023f90 <dType2_Clock_Init+0x540>)
 8023f1c:	681b      	ldr	r3, [r3, #0]
 8023f1e:	2250      	movs	r2, #80	; 0x50
 8023f20:	2150      	movs	r1, #80	; 0x50
 8023f22:	4618      	mov	r0, r3
 8023f24:	f7e5 fbd9 	bl	80096da <lv_obj_set_size>
		   		  lv_arc_set_angles(kCalsArc, 0, 360);
 8023f28:	4b19      	ldr	r3, [pc, #100]	; (8023f90 <dType2_Clock_Init+0x540>)
 8023f2a:	681b      	ldr	r3, [r3, #0]
 8023f2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023f30:	2100      	movs	r1, #0
 8023f32:	4618      	mov	r0, r3
 8023f34:	f7f4 f806 	bl	8017f44 <lv_arc_set_angles>
		   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8023f38:	4b15      	ldr	r3, [pc, #84]	; (8023f90 <dType2_Clock_Init+0x540>)
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	4a0b      	ldr	r2, [pc, #44]	; (8023f6c <dType2_Clock_Init+0x51c>)
 8023f3e:	2100      	movs	r1, #0
 8023f40:	4618      	mov	r0, r3
 8023f42:	f7f4 f828 	bl	8017f96 <lv_arc_set_style>
		   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 40);
 8023f46:	4b12      	ldr	r3, [pc, #72]	; (8023f90 <dType2_Clock_Init+0x540>)
 8023f48:	6818      	ldr	r0, [r3, #0]
 8023f4a:	2328      	movs	r3, #40	; 0x28
 8023f4c:	9300      	str	r3, [sp, #0]
 8023f4e:	233c      	movs	r3, #60	; 0x3c
 8023f50:	2200      	movs	r2, #0
 8023f52:	2100      	movs	r1, #0
 8023f54:	f7e5 fc64 	bl	8009820 <lv_obj_align>
}
 8023f58:	bf00      	nop
 8023f5a:	3708      	adds	r7, #8
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	bd80      	pop	{r7, pc}
 8023f60:	2001bc40 	.word	0x2001bc40
 8023f64:	2001ab74 	.word	0x2001ab74
 8023f68:	2001ba40 	.word	0x2001ba40
 8023f6c:	2001abec 	.word	0x2001abec
 8023f70:	200017c4 	.word	0x200017c4
 8023f74:	2001bcb8 	.word	0x2001bcb8
 8023f78:	2001bbe2 	.word	0x2001bbe2
 8023f7c:	0802d56c 	.word	0x0802d56c
 8023f80:	2001bc48 	.word	0x2001bc48
 8023f84:	2001bca4 	.word	0x2001bca4
 8023f88:	2001abb0 	.word	0x2001abb0
 8023f8c:	0802d57c 	.word	0x0802d57c
 8023f90:	2001bcc0 	.word	0x2001bcc0

08023f94 <MainScreen_Updater>:
/*This function using for update values*/
void MainScreen_Updater(void){
 8023f94:	b580      	push	{r7, lr}
 8023f96:	af00      	add	r7, sp, #0
	if(MS_taskController){
 8023f98:	4b0c      	ldr	r3, [pc, #48]	; (8023fcc <MainScreen_Updater+0x38>)
 8023f9a:	781b      	ldrb	r3, [r3, #0]
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d012      	beq.n	8023fc6 <MainScreen_Updater+0x32>
	switch(MainScreenType){
 8023fa0:	4b0b      	ldr	r3, [pc, #44]	; (8023fd0 <MainScreen_Updater+0x3c>)
 8023fa2:	781b      	ldrb	r3, [r3, #0]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d002      	beq.n	8023fae <MainScreen_Updater+0x1a>
 8023fa8:	2b02      	cmp	r3, #2
 8023faa:	d005      	beq.n	8023fb8 <MainScreen_Updater+0x24>
	case tos_mainScreen_Type3:
		seconds_angle_loader();
		minutes_angle_loader();
		hours_angle_loader();
		break;
	default: break;
 8023fac:	e00c      	b.n	8023fc8 <MainScreen_Updater+0x34>
		minutes_angle_loader();
 8023fae:	f000 f903 	bl	80241b8 <minutes_angle_loader>
		hours_angle_loader();
 8023fb2:	f000 f87d 	bl	80240b0 <hours_angle_loader>
		break;
 8023fb6:	e007      	b.n	8023fc8 <MainScreen_Updater+0x34>
		seconds_angle_loader();
 8023fb8:	f000 f96a 	bl	8024290 <seconds_angle_loader>
		minutes_angle_loader();
 8023fbc:	f000 f8fc 	bl	80241b8 <minutes_angle_loader>
		hours_angle_loader();
 8023fc0:	f000 f876 	bl	80240b0 <hours_angle_loader>
		break;
 8023fc4:	e000      	b.n	8023fc8 <MainScreen_Updater+0x34>
	}
	}
 8023fc6:	bf00      	nop
}
 8023fc8:	bf00      	nop
 8023fca:	bd80      	pop	{r7, pc}
 8023fcc:	2001bc59 	.word	0x2001bc59
 8023fd0:	2001bbe0 	.word	0x2001bbe0

08023fd4 <batteryValueUpdater>:



/* This function using for battery value update
*/
void batteryValueUpdater(lv_task_t *t){
 8023fd4:	b580      	push	{r7, lr}
 8023fd6:	b084      	sub	sp, #16
 8023fd8:	af02      	add	r7, sp, #8
 8023fda:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8023fdc:	4b10      	ldr	r3, [pc, #64]	; (8024020 <batteryValueUpdater+0x4c>)
 8023fde:	781b      	ldrb	r3, [r3, #0]
 8023fe0:	2b00      	cmp	r3, #0
 8023fe2:	d016      	beq.n	8024012 <batteryValueUpdater+0x3e>
		  lv_label_set_text(batteryLbl, batteryVal);
 8023fe4:	4b0f      	ldr	r3, [pc, #60]	; (8024024 <batteryValueUpdater+0x50>)
 8023fe6:	681a      	ldr	r2, [r3, #0]
 8023fe8:	4b0f      	ldr	r3, [pc, #60]	; (8024028 <batteryValueUpdater+0x54>)
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	4619      	mov	r1, r3
 8023fee:	4610      	mov	r0, r2
 8023ff0:	f7f8 fe60 	bl	801ccb4 <lv_label_set_text>
		  battery_style.text.color = batteryColor;
 8023ff4:	4a0d      	ldr	r2, [pc, #52]	; (802402c <batteryValueUpdater+0x58>)
 8023ff6:	4b0e      	ldr	r3, [pc, #56]	; (8024030 <batteryValueUpdater+0x5c>)
 8023ff8:	881b      	ldrh	r3, [r3, #0]
 8023ffa:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8023ffc:	4b09      	ldr	r3, [pc, #36]	; (8024024 <batteryValueUpdater+0x50>)
 8023ffe:	6818      	ldr	r0, [r3, #0]
 8024000:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024004:	9300      	str	r3, [sp, #0]
 8024006:	2364      	movs	r3, #100	; 0x64
 8024008:	2200      	movs	r2, #0
 802400a:	2100      	movs	r1, #0
 802400c:	f7e5 fc08 	bl	8009820 <lv_obj_align>
}else lv_task_del(t);}
 8024010:	e002      	b.n	8024018 <batteryValueUpdater+0x44>
 8024012:	6878      	ldr	r0, [r7, #4]
 8024014:	f7f3 f9e2 	bl	80173dc <lv_task_del>
 8024018:	bf00      	nop
 802401a:	3708      	adds	r7, #8
 802401c:	46bd      	mov	sp, r7
 802401e:	bd80      	pop	{r7, pc}
 8024020:	2001bc59 	.word	0x2001bc59
 8024024:	2001bca8 	.word	0x2001bca8
 8024028:	2001bcb4 	.word	0x2001bcb4
 802402c:	2001bc60 	.word	0x2001bc60
 8024030:	2001bcb0 	.word	0x2001bcb0

08024034 <bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void bluetoothStatusUpdater(lv_task_t *t){
 8024034:	b580      	push	{r7, lr}
 8024036:	b084      	sub	sp, #16
 8024038:	af02      	add	r7, sp, #8
 802403a:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 802403c:	4b15      	ldr	r3, [pc, #84]	; (8024094 <bluetoothStatusUpdater+0x60>)
 802403e:	781b      	ldrb	r3, [r3, #0]
 8024040:	2b00      	cmp	r3, #0
 8024042:	d020      	beq.n	8024086 <bluetoothStatusUpdater+0x52>
		if(bluetoothStatus){
 8024044:	4b14      	ldr	r3, [pc, #80]	; (8024098 <bluetoothStatusUpdater+0x64>)
 8024046:	781b      	ldrb	r3, [r3, #0]
 8024048:	2b00      	cmp	r3, #0
 802404a:	d015      	beq.n	8024078 <bluetoothStatusUpdater+0x44>
		      bluetooth_style.text.color = bluetoothColor;
 802404c:	4a13      	ldr	r2, [pc, #76]	; (802409c <bluetoothStatusUpdater+0x68>)
 802404e:	4b14      	ldr	r3, [pc, #80]	; (80240a0 <bluetoothStatusUpdater+0x6c>)
 8024050:	881b      	ldrh	r3, [r3, #0]
 8024052:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8024054:	4b13      	ldr	r3, [pc, #76]	; (80240a4 <bluetoothStatusUpdater+0x70>)
 8024056:	681b      	ldr	r3, [r3, #0]
 8024058:	4913      	ldr	r1, [pc, #76]	; (80240a8 <bluetoothStatusUpdater+0x74>)
 802405a:	4618      	mov	r0, r3
 802405c:	f7f8 fe2a 	bl	801ccb4 <lv_label_set_text>
			  lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8024060:	4b10      	ldr	r3, [pc, #64]	; (80240a4 <bluetoothStatusUpdater+0x70>)
 8024062:	6818      	ldr	r0, [r3, #0]
 8024064:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024068:	9300      	str	r3, [sp, #0]
 802406a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802406e:	2200      	movs	r2, #0
 8024070:	2100      	movs	r1, #0
 8024072:	f7e5 fbd5 	bl	8009820 <lv_obj_align>
		}
		else lv_label_set_text(bluetoothLbl, " ");
	}else lv_task_del(t);
}
 8024076:	e009      	b.n	802408c <bluetoothStatusUpdater+0x58>
		else lv_label_set_text(bluetoothLbl, " ");
 8024078:	4b0a      	ldr	r3, [pc, #40]	; (80240a4 <bluetoothStatusUpdater+0x70>)
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	490b      	ldr	r1, [pc, #44]	; (80240ac <bluetoothStatusUpdater+0x78>)
 802407e:	4618      	mov	r0, r3
 8024080:	f7f8 fe18 	bl	801ccb4 <lv_label_set_text>
}
 8024084:	e002      	b.n	802408c <bluetoothStatusUpdater+0x58>
	}else lv_task_del(t);
 8024086:	6878      	ldr	r0, [r7, #4]
 8024088:	f7f3 f9a8 	bl	80173dc <lv_task_del>
}
 802408c:	bf00      	nop
 802408e:	3708      	adds	r7, #8
 8024090:	46bd      	mov	sp, r7
 8024092:	bd80      	pop	{r7, pc}
 8024094:	2001bc59 	.word	0x2001bc59
 8024098:	2001bc58 	.word	0x2001bc58
 802409c:	2001bbfc 	.word	0x2001bbfc
 80240a0:	2001bc9c 	.word	0x2001bc9c
 80240a4:	2001bc44 	.word	0x2001bc44
 80240a8:	0802d568 	.word	0x0802d568
 80240ac:	0802d5b4 	.word	0x0802d5b4

080240b0 <hours_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set hours 
*/
void hours_angle_loader(void)
{	/*saat 12 veya 0 olduğunda saat çubuğu ilerlemiyor çöz*/
 80240b0:	b590      	push	{r4, r7, lr}
 80240b2:	b085      	sub	sp, #20
 80240b4:	af00      	add	r7, sp, #0
		uint8_t hoursTmpVal=hours;
 80240b6:	4b3a      	ldr	r3, [pc, #232]	; (80241a0 <hours_angle_loader+0xf0>)
 80240b8:	781b      	ldrb	r3, [r3, #0]
 80240ba:	73fb      	strb	r3, [r7, #15]
		if(hours>=12)hoursTmpVal=hours%12;
 80240bc:	4b38      	ldr	r3, [pc, #224]	; (80241a0 <hours_angle_loader+0xf0>)
 80240be:	781b      	ldrb	r3, [r3, #0]
 80240c0:	2b0b      	cmp	r3, #11
 80240c2:	d90b      	bls.n	80240dc <hours_angle_loader+0x2c>
 80240c4:	4b36      	ldr	r3, [pc, #216]	; (80241a0 <hours_angle_loader+0xf0>)
 80240c6:	781a      	ldrb	r2, [r3, #0]
 80240c8:	4b36      	ldr	r3, [pc, #216]	; (80241a4 <hours_angle_loader+0xf4>)
 80240ca:	fba3 1302 	umull	r1, r3, r3, r2
 80240ce:	08d9      	lsrs	r1, r3, #3
 80240d0:	460b      	mov	r3, r1
 80240d2:	005b      	lsls	r3, r3, #1
 80240d4:	440b      	add	r3, r1
 80240d6:	009b      	lsls	r3, r3, #2
 80240d8:	1ad3      	subs	r3, r2, r3
 80240da:	73fb      	strb	r3, [r7, #15]
		double hoursTemp = tos_Ratio(hoursTmpVal*60, 0, 11*60,0, 359);
 80240dc:	7bfa      	ldrb	r2, [r7, #15]
 80240de:	4613      	mov	r3, r2
 80240e0:	011b      	lsls	r3, r3, #4
 80240e2:	1a9b      	subs	r3, r3, r2
 80240e4:	009b      	lsls	r3, r3, #2
 80240e6:	4618      	mov	r0, r3
 80240e8:	f7dc fa2c 	bl	8000544 <__aeabi_i2d>
 80240ec:	4603      	mov	r3, r0
 80240ee:	460c      	mov	r4, r1
 80240f0:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8024188 <hours_angle_loader+0xd8>
 80240f4:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8024190 <hours_angle_loader+0xe0>
 80240f8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8024198 <hours_angle_loader+0xe8>
 80240fc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8024190 <hours_angle_loader+0xe0>
 8024100:	ec44 3b10 	vmov	d0, r3, r4
 8024104:	f006 f87c 	bl	802a200 <tos_Ratio>
 8024108:	ed87 0b00 	vstr	d0, [r7]
		if(hoursTemp < 180) lv_arc_set_angles(hoursArc, 180-hoursTemp ,180);
 802410c:	f04f 0200 	mov.w	r2, #0
 8024110:	4b25      	ldr	r3, [pc, #148]	; (80241a8 <hours_angle_loader+0xf8>)
 8024112:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024116:	f7dc fcf1 	bl	8000afc <__aeabi_dcmplt>
 802411a:	4603      	mov	r3, r0
 802411c:	2b00      	cmp	r3, #0
 802411e:	d016      	beq.n	802414e <hours_angle_loader+0x9e>
 8024120:	4b22      	ldr	r3, [pc, #136]	; (80241ac <hours_angle_loader+0xfc>)
 8024122:	681c      	ldr	r4, [r3, #0]
 8024124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024128:	f04f 0000 	mov.w	r0, #0
 802412c:	491e      	ldr	r1, [pc, #120]	; (80241a8 <hours_angle_loader+0xf8>)
 802412e:	f7dc f8bb 	bl	80002a8 <__aeabi_dsub>
 8024132:	4602      	mov	r2, r0
 8024134:	460b      	mov	r3, r1
 8024136:	4610      	mov	r0, r2
 8024138:	4619      	mov	r1, r3
 802413a:	f7dc fd1d 	bl	8000b78 <__aeabi_d2uiz>
 802413e:	4603      	mov	r3, r0
 8024140:	b29b      	uxth	r3, r3
 8024142:	22b4      	movs	r2, #180	; 0xb4
 8024144:	4619      	mov	r1, r3
 8024146:	4620      	mov	r0, r4
 8024148:	f7f3 fefc 	bl	8017f44 <lv_arc_set_angles>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
}
 802414c:	e015      	b.n	802417a <hours_angle_loader+0xca>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
 802414e:	4b17      	ldr	r3, [pc, #92]	; (80241ac <hours_angle_loader+0xfc>)
 8024150:	681c      	ldr	r4, [r3, #0]
 8024152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024156:	f04f 0000 	mov.w	r0, #0
 802415a:	4915      	ldr	r1, [pc, #84]	; (80241b0 <hours_angle_loader+0x100>)
 802415c:	f7dc f8a4 	bl	80002a8 <__aeabi_dsub>
 8024160:	4602      	mov	r2, r0
 8024162:	460b      	mov	r3, r1
 8024164:	4610      	mov	r0, r2
 8024166:	4619      	mov	r1, r3
 8024168:	f7dc fd06 	bl	8000b78 <__aeabi_d2uiz>
 802416c:	4603      	mov	r3, r0
 802416e:	b29b      	uxth	r3, r3
 8024170:	22b4      	movs	r2, #180	; 0xb4
 8024172:	4619      	mov	r1, r3
 8024174:	4620      	mov	r0, r4
 8024176:	f7f3 fee5 	bl	8017f44 <lv_arc_set_angles>
}
 802417a:	bf00      	nop
 802417c:	3714      	adds	r7, #20
 802417e:	46bd      	mov	sp, r7
 8024180:	bd90      	pop	{r4, r7, pc}
 8024182:	bf00      	nop
 8024184:	f3af 8000 	nop.w
 8024188:	00000000 	.word	0x00000000
 802418c:	40767000 	.word	0x40767000
	...
 802419c:	4084a000 	.word	0x4084a000
 80241a0:	2001bcbe 	.word	0x2001bcbe
 80241a4:	aaaaaaab 	.word	0xaaaaaaab
 80241a8:	40668000 	.word	0x40668000
 80241ac:	2001bbf8 	.word	0x2001bbf8
 80241b0:	4080e000 	.word	0x4080e000
 80241b4:	00000000 	.word	0x00000000

080241b8 <minutes_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set minutes
*/
void minutes_angle_loader(void)
{
 80241b8:	b590      	push	{r4, r7, lr}
 80241ba:	b083      	sub	sp, #12
 80241bc:	af00      	add	r7, sp, #0
	double minutesTemp = tos_Ratio(minutes*60, 0, 59*60, 0, 359);
 80241be:	4b30      	ldr	r3, [pc, #192]	; (8024280 <minutes_angle_loader+0xc8>)
 80241c0:	781b      	ldrb	r3, [r3, #0]
 80241c2:	461a      	mov	r2, r3
 80241c4:	4613      	mov	r3, r2
 80241c6:	011b      	lsls	r3, r3, #4
 80241c8:	1a9b      	subs	r3, r3, r2
 80241ca:	009b      	lsls	r3, r3, #2
 80241cc:	4618      	mov	r0, r3
 80241ce:	f7dc f9b9 	bl	8000544 <__aeabi_i2d>
 80241d2:	4603      	mov	r3, r0
 80241d4:	460c      	mov	r4, r1
 80241d6:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8024268 <minutes_angle_loader+0xb0>
 80241da:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8024270 <minutes_angle_loader+0xb8>
 80241de:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8024278 <minutes_angle_loader+0xc0>
 80241e2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8024270 <minutes_angle_loader+0xb8>
 80241e6:	ec44 3b10 	vmov	d0, r3, r4
 80241ea:	f006 f809 	bl	802a200 <tos_Ratio>
 80241ee:	ed87 0b00 	vstr	d0, [r7]
		if(minutesTemp < 180) lv_arc_set_angles(minutesArc, 180-minutesTemp ,180);
 80241f2:	f04f 0200 	mov.w	r2, #0
 80241f6:	4b23      	ldr	r3, [pc, #140]	; (8024284 <minutes_angle_loader+0xcc>)
 80241f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80241fc:	f7dc fc7e 	bl	8000afc <__aeabi_dcmplt>
 8024200:	4603      	mov	r3, r0
 8024202:	2b00      	cmp	r3, #0
 8024204:	d016      	beq.n	8024234 <minutes_angle_loader+0x7c>
 8024206:	4b20      	ldr	r3, [pc, #128]	; (8024288 <minutes_angle_loader+0xd0>)
 8024208:	681c      	ldr	r4, [r3, #0]
 802420a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802420e:	f04f 0000 	mov.w	r0, #0
 8024212:	491c      	ldr	r1, [pc, #112]	; (8024284 <minutes_angle_loader+0xcc>)
 8024214:	f7dc f848 	bl	80002a8 <__aeabi_dsub>
 8024218:	4602      	mov	r2, r0
 802421a:	460b      	mov	r3, r1
 802421c:	4610      	mov	r0, r2
 802421e:	4619      	mov	r1, r3
 8024220:	f7dc fcaa 	bl	8000b78 <__aeabi_d2uiz>
 8024224:	4603      	mov	r3, r0
 8024226:	b29b      	uxth	r3, r3
 8024228:	22b4      	movs	r2, #180	; 0xb4
 802422a:	4619      	mov	r1, r3
 802422c:	4620      	mov	r0, r4
 802422e:	f7f3 fe89 	bl	8017f44 <lv_arc_set_angles>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);

}
 8024232:	e015      	b.n	8024260 <minutes_angle_loader+0xa8>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);
 8024234:	4b14      	ldr	r3, [pc, #80]	; (8024288 <minutes_angle_loader+0xd0>)
 8024236:	681c      	ldr	r4, [r3, #0]
 8024238:	e9d7 2300 	ldrd	r2, r3, [r7]
 802423c:	f04f 0000 	mov.w	r0, #0
 8024240:	4912      	ldr	r1, [pc, #72]	; (802428c <minutes_angle_loader+0xd4>)
 8024242:	f7dc f831 	bl	80002a8 <__aeabi_dsub>
 8024246:	4602      	mov	r2, r0
 8024248:	460b      	mov	r3, r1
 802424a:	4610      	mov	r0, r2
 802424c:	4619      	mov	r1, r3
 802424e:	f7dc fc93 	bl	8000b78 <__aeabi_d2uiz>
 8024252:	4603      	mov	r3, r0
 8024254:	b29b      	uxth	r3, r3
 8024256:	22b4      	movs	r2, #180	; 0xb4
 8024258:	4619      	mov	r1, r3
 802425a:	4620      	mov	r0, r4
 802425c:	f7f3 fe72 	bl	8017f44 <lv_arc_set_angles>
}
 8024260:	bf00      	nop
 8024262:	370c      	adds	r7, #12
 8024264:	46bd      	mov	sp, r7
 8024266:	bd90      	pop	{r4, r7, pc}
 8024268:	00000000 	.word	0x00000000
 802426c:	40767000 	.word	0x40767000
	...
 802427c:	40aba800 	.word	0x40aba800
 8024280:	2001bcbd 	.word	0x2001bcbd
 8024284:	40668000 	.word	0x40668000
 8024288:	2001bc38 	.word	0x2001bc38
 802428c:	4080e000 	.word	0x4080e000

08024290 <seconds_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set Seconds
*/
void seconds_angle_loader(void)
{
 8024290:	b590      	push	{r4, r7, lr}
 8024292:	b083      	sub	sp, #12
 8024294:	af00      	add	r7, sp, #0
	double secondsTemp = tos_Ratio(seconds, 0, 59, 0, 359);
 8024296:	4b2e      	ldr	r3, [pc, #184]	; (8024350 <seconds_angle_loader+0xc0>)
 8024298:	781b      	ldrb	r3, [r3, #0]
 802429a:	4618      	mov	r0, r3
 802429c:	f7dc f942 	bl	8000524 <__aeabi_ui2d>
 80242a0:	4603      	mov	r3, r0
 80242a2:	460c      	mov	r4, r1
 80242a4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8024338 <seconds_angle_loader+0xa8>
 80242a8:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8024340 <seconds_angle_loader+0xb0>
 80242ac:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8024348 <seconds_angle_loader+0xb8>
 80242b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8024340 <seconds_angle_loader+0xb0>
 80242b4:	ec44 3b10 	vmov	d0, r3, r4
 80242b8:	f005 ffa2 	bl	802a200 <tos_Ratio>
 80242bc:	ed87 0b00 	vstr	d0, [r7]
		if(secondsTemp < 180) lv_arc_set_angles(secondsArc, 180-secondsTemp ,180);
 80242c0:	f04f 0200 	mov.w	r2, #0
 80242c4:	4b23      	ldr	r3, [pc, #140]	; (8024354 <seconds_angle_loader+0xc4>)
 80242c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80242ca:	f7dc fc17 	bl	8000afc <__aeabi_dcmplt>
 80242ce:	4603      	mov	r3, r0
 80242d0:	2b00      	cmp	r3, #0
 80242d2:	d016      	beq.n	8024302 <seconds_angle_loader+0x72>
 80242d4:	4b20      	ldr	r3, [pc, #128]	; (8024358 <seconds_angle_loader+0xc8>)
 80242d6:	681c      	ldr	r4, [r3, #0]
 80242d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80242dc:	f04f 0000 	mov.w	r0, #0
 80242e0:	491c      	ldr	r1, [pc, #112]	; (8024354 <seconds_angle_loader+0xc4>)
 80242e2:	f7db ffe1 	bl	80002a8 <__aeabi_dsub>
 80242e6:	4602      	mov	r2, r0
 80242e8:	460b      	mov	r3, r1
 80242ea:	4610      	mov	r0, r2
 80242ec:	4619      	mov	r1, r3
 80242ee:	f7dc fc43 	bl	8000b78 <__aeabi_d2uiz>
 80242f2:	4603      	mov	r3, r0
 80242f4:	b29b      	uxth	r3, r3
 80242f6:	22b4      	movs	r2, #180	; 0xb4
 80242f8:	4619      	mov	r1, r3
 80242fa:	4620      	mov	r0, r4
 80242fc:	f7f3 fe22 	bl	8017f44 <lv_arc_set_angles>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);

}
 8024300:	e015      	b.n	802432e <seconds_angle_loader+0x9e>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);
 8024302:	4b15      	ldr	r3, [pc, #84]	; (8024358 <seconds_angle_loader+0xc8>)
 8024304:	681c      	ldr	r4, [r3, #0]
 8024306:	e9d7 2300 	ldrd	r2, r3, [r7]
 802430a:	f04f 0000 	mov.w	r0, #0
 802430e:	4913      	ldr	r1, [pc, #76]	; (802435c <seconds_angle_loader+0xcc>)
 8024310:	f7db ffca 	bl	80002a8 <__aeabi_dsub>
 8024314:	4602      	mov	r2, r0
 8024316:	460b      	mov	r3, r1
 8024318:	4610      	mov	r0, r2
 802431a:	4619      	mov	r1, r3
 802431c:	f7dc fc2c 	bl	8000b78 <__aeabi_d2uiz>
 8024320:	4603      	mov	r3, r0
 8024322:	b29b      	uxth	r3, r3
 8024324:	22b4      	movs	r2, #180	; 0xb4
 8024326:	4619      	mov	r1, r3
 8024328:	4620      	mov	r0, r4
 802432a:	f7f3 fe0b 	bl	8017f44 <lv_arc_set_angles>
}
 802432e:	bf00      	nop
 8024330:	370c      	adds	r7, #12
 8024332:	46bd      	mov	sp, r7
 8024334:	bd90      	pop	{r4, r7, pc}
 8024336:	bf00      	nop
 8024338:	00000000 	.word	0x00000000
 802433c:	40767000 	.word	0x40767000
	...
 802434c:	404d8000 	.word	0x404d8000
 8024350:	2001bcac 	.word	0x2001bcac
 8024354:	40668000 	.word	0x40668000
 8024358:	2001bbe8 	.word	0x2001bbe8
 802435c:	4080e000 	.word	0x4080e000

08024360 <digitalTimePrintTheScreen>:

/* This function using for digital clock print to screen*/
void digitalTimePrintTheScreen(lv_task_t *t){
 8024360:	b580      	push	{r7, lr}
 8024362:	b084      	sub	sp, #16
 8024364:	af02      	add	r7, sp, #8
 8024366:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8024368:	4b3f      	ldr	r3, [pc, #252]	; (8024468 <digitalTimePrintTheScreen+0x108>)
 802436a:	781b      	ldrb	r3, [r3, #0]
 802436c:	2b00      	cmp	r3, #0
 802436e:	d073      	beq.n	8024458 <digitalTimePrintTheScreen+0xf8>
		snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 8024370:	4b3e      	ldr	r3, [pc, #248]	; (802446c <digitalTimePrintTheScreen+0x10c>)
 8024372:	781b      	ldrb	r3, [r3, #0]
 8024374:	4619      	mov	r1, r3
 8024376:	4b3e      	ldr	r3, [pc, #248]	; (8024470 <digitalTimePrintTheScreen+0x110>)
 8024378:	781b      	ldrb	r3, [r3, #0]
 802437a:	461a      	mov	r2, r3
 802437c:	4b3d      	ldr	r3, [pc, #244]	; (8024474 <digitalTimePrintTheScreen+0x114>)
 802437e:	781b      	ldrb	r3, [r3, #0]
 8024380:	9301      	str	r3, [sp, #4]
 8024382:	9200      	str	r2, [sp, #0]
 8024384:	460b      	mov	r3, r1
 8024386:	4a3c      	ldr	r2, [pc, #240]	; (8024478 <digitalTimePrintTheScreen+0x118>)
 8024388:	2109      	movs	r1, #9
 802438a:	483c      	ldr	r0, [pc, #240]	; (802447c <digitalTimePrintTheScreen+0x11c>)
 802438c:	f006 ff0c 	bl	802b1a8 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 8024390:	4b3b      	ldr	r3, [pc, #236]	; (8024480 <digitalTimePrintTheScreen+0x120>)
 8024392:	681b      	ldr	r3, [r3, #0]
 8024394:	4939      	ldr	r1, [pc, #228]	; (802447c <digitalTimePrintTheScreen+0x11c>)
 8024396:	4618      	mov	r0, r3
 8024398:	f7f8 fc8c 	bl	801ccb4 <lv_label_set_text>
			lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 802439c:	4b38      	ldr	r3, [pc, #224]	; (8024480 <digitalTimePrintTheScreen+0x120>)
 802439e:	6818      	ldr	r0, [r3, #0]
 80243a0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80243a4:	9300      	str	r3, [sp, #0]
 80243a6:	2300      	movs	r3, #0
 80243a8:	2200      	movs	r2, #0
 80243aa:	2100      	movs	r1, #0
 80243ac:	f7e5 fa38 	bl	8009820 <lv_obj_align>
			        //Digital Date
			    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 80243b0:	4b34      	ldr	r3, [pc, #208]	; (8024484 <digitalTimePrintTheScreen+0x124>)
 80243b2:	781b      	ldrb	r3, [r3, #0]
 80243b4:	4619      	mov	r1, r3
 80243b6:	4b34      	ldr	r3, [pc, #208]	; (8024488 <digitalTimePrintTheScreen+0x128>)
 80243b8:	781b      	ldrb	r3, [r3, #0]
 80243ba:	461a      	mov	r2, r3
 80243bc:	4b33      	ldr	r3, [pc, #204]	; (802448c <digitalTimePrintTheScreen+0x12c>)
 80243be:	881b      	ldrh	r3, [r3, #0]
 80243c0:	9301      	str	r3, [sp, #4]
 80243c2:	9200      	str	r2, [sp, #0]
 80243c4:	460b      	mov	r3, r1
 80243c6:	4a32      	ldr	r2, [pc, #200]	; (8024490 <digitalTimePrintTheScreen+0x130>)
 80243c8:	2110      	movs	r1, #16
 80243ca:	482c      	ldr	r0, [pc, #176]	; (802447c <digitalTimePrintTheScreen+0x11c>)
 80243cc:	f006 feec 	bl	802b1a8 <sniprintf>
					lv_label_set_text(digitalDate, buffer);
 80243d0:	4b30      	ldr	r3, [pc, #192]	; (8024494 <digitalTimePrintTheScreen+0x134>)
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	4929      	ldr	r1, [pc, #164]	; (802447c <digitalTimePrintTheScreen+0x11c>)
 80243d6:	4618      	mov	r0, r3
 80243d8:	f7f8 fc6c 	bl	801ccb4 <lv_label_set_text>
			    	//Week Day
			    	lv_label_set_text(weekDay, weekDayStr);
 80243dc:	4b2e      	ldr	r3, [pc, #184]	; (8024498 <digitalTimePrintTheScreen+0x138>)
 80243de:	681a      	ldr	r2, [r3, #0]
 80243e0:	4b2e      	ldr	r3, [pc, #184]	; (802449c <digitalTimePrintTheScreen+0x13c>)
 80243e2:	681b      	ldr	r3, [r3, #0]
 80243e4:	4619      	mov	r1, r3
 80243e6:	4610      	mov	r0, r2
 80243e8:	f7f8 fc64 	bl	801ccb4 <lv_label_set_text>
			    	dateTmp=date;
 80243ec:	4b25      	ldr	r3, [pc, #148]	; (8024484 <digitalTimePrintTheScreen+0x124>)
 80243ee:	781a      	ldrb	r2, [r3, #0]
 80243f0:	4b2b      	ldr	r3, [pc, #172]	; (80244a0 <digitalTimePrintTheScreen+0x140>)
 80243f2:	701a      	strb	r2, [r3, #0]

					switch(MainScreenType){
 80243f4:	4b2b      	ldr	r3, [pc, #172]	; (80244a4 <digitalTimePrintTheScreen+0x144>)
 80243f6:	781b      	ldrb	r3, [r3, #0]
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d002      	beq.n	8024402 <digitalTimePrintTheScreen+0xa2>
 80243fc:	2b01      	cmp	r3, #1
 80243fe:	d015      	beq.n	802442c <digitalTimePrintTheScreen+0xcc>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
					break;
					}
	}else lv_task_del(t);
}
 8024400:	e02e      	b.n	8024460 <digitalTimePrintTheScreen+0x100>
					case 0: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 8024402:	4b24      	ldr	r3, [pc, #144]	; (8024494 <digitalTimePrintTheScreen+0x134>)
 8024404:	6818      	ldr	r0, [r3, #0]
 8024406:	f06f 0336 	mvn.w	r3, #54	; 0x36
 802440a:	9300      	str	r3, [sp, #0]
 802440c:	2300      	movs	r3, #0
 802440e:	2200      	movs	r2, #0
 8024410:	2100      	movs	r1, #0
 8024412:	f7e5 fa05 	bl	8009820 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8024416:	4b20      	ldr	r3, [pc, #128]	; (8024498 <digitalTimePrintTheScreen+0x138>)
 8024418:	6818      	ldr	r0, [r3, #0]
 802441a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 802441e:	9300      	str	r3, [sp, #0]
 8024420:	2300      	movs	r3, #0
 8024422:	2200      	movs	r2, #0
 8024424:	2100      	movs	r1, #0
 8024426:	f7e5 f9fb 	bl	8009820 <lv_obj_align>
					break;
 802442a:	e019      	b.n	8024460 <digitalTimePrintTheScreen+0x100>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 802442c:	4b19      	ldr	r3, [pc, #100]	; (8024494 <digitalTimePrintTheScreen+0x134>)
 802442e:	6818      	ldr	r0, [r3, #0]
 8024430:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024434:	9300      	str	r3, [sp, #0]
 8024436:	2300      	movs	r3, #0
 8024438:	2200      	movs	r2, #0
 802443a:	2100      	movs	r1, #0
 802443c:	f7e5 f9f0 	bl	8009820 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8024440:	4b15      	ldr	r3, [pc, #84]	; (8024498 <digitalTimePrintTheScreen+0x138>)
 8024442:	6818      	ldr	r0, [r3, #0]
 8024444:	f06f 0309 	mvn.w	r3, #9
 8024448:	9300      	str	r3, [sp, #0]
 802444a:	2300      	movs	r3, #0
 802444c:	2200      	movs	r2, #0
 802444e:	2100      	movs	r1, #0
 8024450:	f7e5 f9e6 	bl	8009820 <lv_obj_align>
					break;
 8024454:	bf00      	nop
 8024456:	e003      	b.n	8024460 <digitalTimePrintTheScreen+0x100>
	}else lv_task_del(t);
 8024458:	6878      	ldr	r0, [r7, #4]
 802445a:	f7f2 ffbf 	bl	80173dc <lv_task_del>
}
 802445e:	e7ff      	b.n	8024460 <digitalTimePrintTheScreen+0x100>
 8024460:	bf00      	nop
 8024462:	3708      	adds	r7, #8
 8024464:	46bd      	mov	sp, r7
 8024466:	bd80      	pop	{r7, pc}
 8024468:	2001bc59 	.word	0x2001bc59
 802446c:	2001bcbe 	.word	0x2001bcbe
 8024470:	2001bcbd 	.word	0x2001bcbd
 8024474:	2001bcac 	.word	0x2001bcac
 8024478:	0802d5a4 	.word	0x0802d5a4
 802447c:	2001bc48 	.word	0x2001bc48
 8024480:	2001bbec 	.word	0x2001bbec
 8024484:	2001bcbc 	.word	0x2001bcbc
 8024488:	2001bbf0 	.word	0x2001bbf0
 802448c:	2001bcae 	.word	0x2001bcae
 8024490:	0802d584 	.word	0x0802d584
 8024494:	2001bbe4 	.word	0x2001bbe4
 8024498:	2001bbdc 	.word	0x2001bbdc
 802449c:	2001bc3c 	.word	0x2001bc3c
 80244a0:	2001bbd8 	.word	0x2001bbd8
 80244a4:	2001bbe0 	.word	0x2001bbe0

080244a8 <analogueDataPrintTheScreen>:
/*This function using for date and week day print to screen on analogue clock*/
void analogueDataPrintTheScreen(lv_task_t *t){
 80244a8:	b580      	push	{r7, lr}
 80244aa:	b084      	sub	sp, #16
 80244ac:	af02      	add	r7, sp, #8
 80244ae:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 80244b0:	4b20      	ldr	r3, [pc, #128]	; (8024534 <analogueDataPrintTheScreen+0x8c>)
 80244b2:	781b      	ldrb	r3, [r3, #0]
 80244b4:	2b00      	cmp	r3, #0
 80244b6:	d036      	beq.n	8024526 <analogueDataPrintTheScreen+0x7e>
		 //Digital Date
			snprintf(buffer, 16, " "); //For cleaning buff
 80244b8:	4a1f      	ldr	r2, [pc, #124]	; (8024538 <analogueDataPrintTheScreen+0x90>)
 80244ba:	4b20      	ldr	r3, [pc, #128]	; (802453c <analogueDataPrintTheScreen+0x94>)
 80244bc:	881b      	ldrh	r3, [r3, #0]
 80244be:	8013      	strh	r3, [r2, #0]
		    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 80244c0:	4b1f      	ldr	r3, [pc, #124]	; (8024540 <analogueDataPrintTheScreen+0x98>)
 80244c2:	781b      	ldrb	r3, [r3, #0]
 80244c4:	4619      	mov	r1, r3
 80244c6:	4b1f      	ldr	r3, [pc, #124]	; (8024544 <analogueDataPrintTheScreen+0x9c>)
 80244c8:	781b      	ldrb	r3, [r3, #0]
 80244ca:	461a      	mov	r2, r3
 80244cc:	4b1e      	ldr	r3, [pc, #120]	; (8024548 <analogueDataPrintTheScreen+0xa0>)
 80244ce:	881b      	ldrh	r3, [r3, #0]
 80244d0:	9301      	str	r3, [sp, #4]
 80244d2:	9200      	str	r2, [sp, #0]
 80244d4:	460b      	mov	r3, r1
 80244d6:	4a1d      	ldr	r2, [pc, #116]	; (802454c <analogueDataPrintTheScreen+0xa4>)
 80244d8:	2110      	movs	r1, #16
 80244da:	4817      	ldr	r0, [pc, #92]	; (8024538 <analogueDataPrintTheScreen+0x90>)
 80244dc:	f006 fe64 	bl	802b1a8 <sniprintf>
				lv_label_set_text(digitalDate, buffer);
 80244e0:	4b1b      	ldr	r3, [pc, #108]	; (8024550 <analogueDataPrintTheScreen+0xa8>)
 80244e2:	681b      	ldr	r3, [r3, #0]
 80244e4:	4914      	ldr	r1, [pc, #80]	; (8024538 <analogueDataPrintTheScreen+0x90>)
 80244e6:	4618      	mov	r0, r3
 80244e8:	f7f8 fbe4 	bl	801ccb4 <lv_label_set_text>
		    	//Week Day
		    	lv_label_set_text(weekDay, weekDayStr);
 80244ec:	4b19      	ldr	r3, [pc, #100]	; (8024554 <analogueDataPrintTheScreen+0xac>)
 80244ee:	681a      	ldr	r2, [r3, #0]
 80244f0:	4b19      	ldr	r3, [pc, #100]	; (8024558 <analogueDataPrintTheScreen+0xb0>)
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	4619      	mov	r1, r3
 80244f6:	4610      	mov	r0, r2
 80244f8:	f7f8 fbdc 	bl	801ccb4 <lv_label_set_text>
		    	lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 80244fc:	4b14      	ldr	r3, [pc, #80]	; (8024550 <analogueDataPrintTheScreen+0xa8>)
 80244fe:	6818      	ldr	r0, [r3, #0]
 8024500:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024504:	9300      	str	r3, [sp, #0]
 8024506:	2300      	movs	r3, #0
 8024508:	2200      	movs	r2, #0
 802450a:	2100      	movs	r1, #0
 802450c:	f7e5 f988 	bl	8009820 <lv_obj_align>
		    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8024510:	4b10      	ldr	r3, [pc, #64]	; (8024554 <analogueDataPrintTheScreen+0xac>)
 8024512:	6818      	ldr	r0, [r3, #0]
 8024514:	f06f 0309 	mvn.w	r3, #9
 8024518:	9300      	str	r3, [sp, #0]
 802451a:	2300      	movs	r3, #0
 802451c:	2200      	movs	r2, #0
 802451e:	2100      	movs	r1, #0
 8024520:	f7e5 f97e 	bl	8009820 <lv_obj_align>
	}else lv_task_del(t);
}
 8024524:	e002      	b.n	802452c <analogueDataPrintTheScreen+0x84>
	}else lv_task_del(t);
 8024526:	6878      	ldr	r0, [r7, #4]
 8024528:	f7f2 ff58 	bl	80173dc <lv_task_del>
}
 802452c:	bf00      	nop
 802452e:	3708      	adds	r7, #8
 8024530:	46bd      	mov	sp, r7
 8024532:	bd80      	pop	{r7, pc}
 8024534:	2001bc59 	.word	0x2001bc59
 8024538:	2001bc48 	.word	0x2001bc48
 802453c:	0802d5b4 	.word	0x0802d5b4
 8024540:	2001bcbc 	.word	0x2001bcbc
 8024544:	2001bbf0 	.word	0x2001bbf0
 8024548:	2001bcae 	.word	0x2001bcae
 802454c:	0802d584 	.word	0x0802d584
 8024550:	2001bbe4 	.word	0x2001bbe4
 8024554:	2001bbdc 	.word	0x2001bbdc
 8024558:	2001bc3c 	.word	0x2001bc3c
 802455c:	00000000 	.word	0x00000000

08024560 <steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void steps_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8024560:	b590      	push	{r4, r7, lr}
 8024562:	b087      	sub	sp, #28
 8024564:	af02      	add	r7, sp, #8
 8024566:	6078      	str	r0, [r7, #4]
 8024568:	4b45      	ldr	r3, [pc, #276]	; (8024680 <steps_angle_loader+0x120>)
 802456a:	781b      	ldrb	r3, [r3, #0]
 802456c:	2b00      	cmp	r3, #0
 802456e:	d072      	beq.n	8024656 <steps_angle_loader+0xf6>
	snprintf(buffer, 8, "%04d", steps);
 8024570:	4b44      	ldr	r3, [pc, #272]	; (8024684 <steps_angle_loader+0x124>)
 8024572:	881b      	ldrh	r3, [r3, #0]
 8024574:	4a44      	ldr	r2, [pc, #272]	; (8024688 <steps_angle_loader+0x128>)
 8024576:	2108      	movs	r1, #8
 8024578:	4844      	ldr	r0, [pc, #272]	; (802468c <steps_angle_loader+0x12c>)
 802457a:	f006 fe15 	bl	802b1a8 <sniprintf>
		 lv_label_set_text(stepsLbl, buffer);
 802457e:	4b44      	ldr	r3, [pc, #272]	; (8024690 <steps_angle_loader+0x130>)
 8024580:	681b      	ldr	r3, [r3, #0]
 8024582:	4942      	ldr	r1, [pc, #264]	; (802468c <steps_angle_loader+0x12c>)
 8024584:	4618      	mov	r0, r3
 8024586:	f7f8 fb95 	bl	801ccb4 <lv_label_set_text>
		 if(MainScreenType ==tos_mainScreen_Type3)lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 802458a:	4b42      	ldr	r3, [pc, #264]	; (8024694 <steps_angle_loader+0x134>)
 802458c:	781b      	ldrb	r3, [r3, #0]
 802458e:	2b02      	cmp	r3, #2
 8024590:	d10a      	bne.n	80245a8 <steps_angle_loader+0x48>
 8024592:	4b3f      	ldr	r3, [pc, #252]	; (8024690 <steps_angle_loader+0x130>)
 8024594:	6818      	ldr	r0, [r3, #0]
 8024596:	2328      	movs	r3, #40	; 0x28
 8024598:	9300      	str	r3, [sp, #0]
 802459a:	f06f 0327 	mvn.w	r3, #39	; 0x27
 802459e:	2200      	movs	r2, #0
 80245a0:	2100      	movs	r1, #0
 80245a2:	f7e5 f93d 	bl	8009820 <lv_obj_align>
 80245a6:	e009      	b.n	80245bc <steps_angle_loader+0x5c>
		 else lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 80245a8:	4b39      	ldr	r3, [pc, #228]	; (8024690 <steps_angle_loader+0x130>)
 80245aa:	6818      	ldr	r0, [r3, #0]
 80245ac:	2328      	movs	r3, #40	; 0x28
 80245ae:	9300      	str	r3, [sp, #0]
 80245b0:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80245b4:	2200      	movs	r2, #0
 80245b6:	2100      	movs	r1, #0
 80245b8:	f7e5 f932 	bl	8009820 <lv_obj_align>

		double stepsTemp = tos_Ratio(steps, 0, 10000, 0, 359);
 80245bc:	4b31      	ldr	r3, [pc, #196]	; (8024684 <steps_angle_loader+0x124>)
 80245be:	881b      	ldrh	r3, [r3, #0]
 80245c0:	4618      	mov	r0, r3
 80245c2:	f7db ffaf 	bl	8000524 <__aeabi_ui2d>
 80245c6:	4603      	mov	r3, r0
 80245c8:	460c      	mov	r4, r1
 80245ca:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8024668 <steps_angle_loader+0x108>
 80245ce:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8024670 <steps_angle_loader+0x110>
 80245d2:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8024678 <steps_angle_loader+0x118>
 80245d6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8024670 <steps_angle_loader+0x110>
 80245da:	ec44 3b10 	vmov	d0, r3, r4
 80245de:	f005 fe0f 	bl	802a200 <tos_Ratio>
 80245e2:	ed87 0b02 	vstr	d0, [r7, #8]
		if(stepsTemp < 180) lv_arc_set_angles(stepsArc, 180-stepsTemp ,180);
 80245e6:	f04f 0200 	mov.w	r2, #0
 80245ea:	4b2b      	ldr	r3, [pc, #172]	; (8024698 <steps_angle_loader+0x138>)
 80245ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80245f0:	f7dc fa84 	bl	8000afc <__aeabi_dcmplt>
 80245f4:	4603      	mov	r3, r0
 80245f6:	2b00      	cmp	r3, #0
 80245f8:	d016      	beq.n	8024628 <steps_angle_loader+0xc8>
 80245fa:	4b28      	ldr	r3, [pc, #160]	; (802469c <steps_angle_loader+0x13c>)
 80245fc:	681c      	ldr	r4, [r3, #0]
 80245fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024602:	f04f 0000 	mov.w	r0, #0
 8024606:	4924      	ldr	r1, [pc, #144]	; (8024698 <steps_angle_loader+0x138>)
 8024608:	f7db fe4e 	bl	80002a8 <__aeabi_dsub>
 802460c:	4602      	mov	r2, r0
 802460e:	460b      	mov	r3, r1
 8024610:	4610      	mov	r0, r2
 8024612:	4619      	mov	r1, r3
 8024614:	f7dc fab0 	bl	8000b78 <__aeabi_d2uiz>
 8024618:	4603      	mov	r3, r0
 802461a:	b29b      	uxth	r3, r3
 802461c:	22b4      	movs	r2, #180	; 0xb4
 802461e:	4619      	mov	r1, r3
 8024620:	4620      	mov	r0, r4
 8024622:	f7f3 fc8f 	bl	8017f44 <lv_arc_set_angles>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
}else lv_task_del(t);
}
 8024626:	e019      	b.n	802465c <steps_angle_loader+0xfc>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
 8024628:	4b1c      	ldr	r3, [pc, #112]	; (802469c <steps_angle_loader+0x13c>)
 802462a:	681c      	ldr	r4, [r3, #0]
 802462c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024630:	f04f 0000 	mov.w	r0, #0
 8024634:	491a      	ldr	r1, [pc, #104]	; (80246a0 <steps_angle_loader+0x140>)
 8024636:	f7db fe37 	bl	80002a8 <__aeabi_dsub>
 802463a:	4602      	mov	r2, r0
 802463c:	460b      	mov	r3, r1
 802463e:	4610      	mov	r0, r2
 8024640:	4619      	mov	r1, r3
 8024642:	f7dc fa99 	bl	8000b78 <__aeabi_d2uiz>
 8024646:	4603      	mov	r3, r0
 8024648:	b29b      	uxth	r3, r3
 802464a:	22b4      	movs	r2, #180	; 0xb4
 802464c:	4619      	mov	r1, r3
 802464e:	4620      	mov	r0, r4
 8024650:	f7f3 fc78 	bl	8017f44 <lv_arc_set_angles>
}
 8024654:	e002      	b.n	802465c <steps_angle_loader+0xfc>
}else lv_task_del(t);
 8024656:	6878      	ldr	r0, [r7, #4]
 8024658:	f7f2 fec0 	bl	80173dc <lv_task_del>
}
 802465c:	bf00      	nop
 802465e:	3714      	adds	r7, #20
 8024660:	46bd      	mov	sp, r7
 8024662:	bd90      	pop	{r4, r7, pc}
 8024664:	f3af 8000 	nop.w
 8024668:	00000000 	.word	0x00000000
 802466c:	40767000 	.word	0x40767000
	...
 802467c:	40c38800 	.word	0x40c38800
 8024680:	2001bc59 	.word	0x2001bc59
 8024684:	2001b5cc 	.word	0x2001b5cc
 8024688:	0802d56c 	.word	0x0802d56c
 802468c:	2001bc48 	.word	0x2001bc48
 8024690:	2001bc5c 	.word	0x2001bc5c
 8024694:	2001bbe0 	.word	0x2001bbe0
 8024698:	40668000 	.word	0x40668000
 802469c:	2001bc40 	.word	0x2001bc40
 80246a0:	4080e000 	.word	0x4080e000
 80246a4:	00000000 	.word	0x00000000

080246a8 <kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCals
*/
void kCals_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 80246a8:	b590      	push	{r4, r7, lr}
 80246aa:	b087      	sub	sp, #28
 80246ac:	af02      	add	r7, sp, #8
 80246ae:	6078      	str	r0, [r7, #4]
 80246b0:	4b43      	ldr	r3, [pc, #268]	; (80247c0 <kCals_angle_loader+0x118>)
 80246b2:	781b      	ldrb	r3, [r3, #0]
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	d070      	beq.n	802479a <kCals_angle_loader+0xf2>
	 	 	 snprintf(buffer, 8, "%04d", kCals);
 80246b8:	4b42      	ldr	r3, [pc, #264]	; (80247c4 <kCals_angle_loader+0x11c>)
 80246ba:	881b      	ldrh	r3, [r3, #0]
 80246bc:	4a42      	ldr	r2, [pc, #264]	; (80247c8 <kCals_angle_loader+0x120>)
 80246be:	2108      	movs	r1, #8
 80246c0:	4842      	ldr	r0, [pc, #264]	; (80247cc <kCals_angle_loader+0x124>)
 80246c2:	f006 fd71 	bl	802b1a8 <sniprintf>
			 lv_label_set_text(kCalsLbl, buffer);
 80246c6:	4b42      	ldr	r3, [pc, #264]	; (80247d0 <kCals_angle_loader+0x128>)
 80246c8:	681b      	ldr	r3, [r3, #0]
 80246ca:	4940      	ldr	r1, [pc, #256]	; (80247cc <kCals_angle_loader+0x124>)
 80246cc:	4618      	mov	r0, r3
 80246ce:	f7f8 faf1 	bl	801ccb4 <lv_label_set_text>
			 if(MainScreenType ==tos_mainScreen_Type3) lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 80246d2:	4b40      	ldr	r3, [pc, #256]	; (80247d4 <kCals_angle_loader+0x12c>)
 80246d4:	781b      	ldrb	r3, [r3, #0]
 80246d6:	2b02      	cmp	r3, #2
 80246d8:	d109      	bne.n	80246ee <kCals_angle_loader+0x46>
 80246da:	4b3d      	ldr	r3, [pc, #244]	; (80247d0 <kCals_angle_loader+0x128>)
 80246dc:	6818      	ldr	r0, [r3, #0]
 80246de:	2328      	movs	r3, #40	; 0x28
 80246e0:	9300      	str	r3, [sp, #0]
 80246e2:	2328      	movs	r3, #40	; 0x28
 80246e4:	2200      	movs	r2, #0
 80246e6:	2100      	movs	r1, #0
 80246e8:	f7e5 f89a 	bl	8009820 <lv_obj_align>
 80246ec:	e008      	b.n	8024700 <kCals_angle_loader+0x58>
			 else lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 80246ee:	4b38      	ldr	r3, [pc, #224]	; (80247d0 <kCals_angle_loader+0x128>)
 80246f0:	6818      	ldr	r0, [r3, #0]
 80246f2:	2328      	movs	r3, #40	; 0x28
 80246f4:	9300      	str	r3, [sp, #0]
 80246f6:	233c      	movs	r3, #60	; 0x3c
 80246f8:	2200      	movs	r2, #0
 80246fa:	2100      	movs	r1, #0
 80246fc:	f7e5 f890 	bl	8009820 <lv_obj_align>

		double kCalsTemp = tos_Ratio(kCals, 0, 10000, 0, 359);
 8024700:	4b30      	ldr	r3, [pc, #192]	; (80247c4 <kCals_angle_loader+0x11c>)
 8024702:	881b      	ldrh	r3, [r3, #0]
 8024704:	4618      	mov	r0, r3
 8024706:	f7db ff0d 	bl	8000524 <__aeabi_ui2d>
 802470a:	4603      	mov	r3, r0
 802470c:	460c      	mov	r4, r1
 802470e:	ed9f 4b26 	vldr	d4, [pc, #152]	; 80247a8 <kCals_angle_loader+0x100>
 8024712:	ed9f 3b27 	vldr	d3, [pc, #156]	; 80247b0 <kCals_angle_loader+0x108>
 8024716:	ed9f 2b28 	vldr	d2, [pc, #160]	; 80247b8 <kCals_angle_loader+0x110>
 802471a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80247b0 <kCals_angle_loader+0x108>
 802471e:	ec44 3b10 	vmov	d0, r3, r4
 8024722:	f005 fd6d 	bl	802a200 <tos_Ratio>
 8024726:	ed87 0b02 	vstr	d0, [r7, #8]
		if(kCalsTemp < 180) lv_arc_set_angles(kCalsArc, 180-kCalsTemp ,180);
 802472a:	f04f 0200 	mov.w	r2, #0
 802472e:	4b2a      	ldr	r3, [pc, #168]	; (80247d8 <kCals_angle_loader+0x130>)
 8024730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024734:	f7dc f9e2 	bl	8000afc <__aeabi_dcmplt>
 8024738:	4603      	mov	r3, r0
 802473a:	2b00      	cmp	r3, #0
 802473c:	d016      	beq.n	802476c <kCals_angle_loader+0xc4>
 802473e:	4b27      	ldr	r3, [pc, #156]	; (80247dc <kCals_angle_loader+0x134>)
 8024740:	681c      	ldr	r4, [r3, #0]
 8024742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024746:	f04f 0000 	mov.w	r0, #0
 802474a:	4923      	ldr	r1, [pc, #140]	; (80247d8 <kCals_angle_loader+0x130>)
 802474c:	f7db fdac 	bl	80002a8 <__aeabi_dsub>
 8024750:	4602      	mov	r2, r0
 8024752:	460b      	mov	r3, r1
 8024754:	4610      	mov	r0, r2
 8024756:	4619      	mov	r1, r3
 8024758:	f7dc fa0e 	bl	8000b78 <__aeabi_d2uiz>
 802475c:	4603      	mov	r3, r0
 802475e:	b29b      	uxth	r3, r3
 8024760:	22b4      	movs	r2, #180	; 0xb4
 8024762:	4619      	mov	r1, r3
 8024764:	4620      	mov	r0, r4
 8024766:	f7f3 fbed 	bl	8017f44 <lv_arc_set_angles>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
}else lv_task_del(t);
}
 802476a:	e019      	b.n	80247a0 <kCals_angle_loader+0xf8>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
 802476c:	4b1b      	ldr	r3, [pc, #108]	; (80247dc <kCals_angle_loader+0x134>)
 802476e:	681c      	ldr	r4, [r3, #0]
 8024770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024774:	f04f 0000 	mov.w	r0, #0
 8024778:	4919      	ldr	r1, [pc, #100]	; (80247e0 <kCals_angle_loader+0x138>)
 802477a:	f7db fd95 	bl	80002a8 <__aeabi_dsub>
 802477e:	4602      	mov	r2, r0
 8024780:	460b      	mov	r3, r1
 8024782:	4610      	mov	r0, r2
 8024784:	4619      	mov	r1, r3
 8024786:	f7dc f9f7 	bl	8000b78 <__aeabi_d2uiz>
 802478a:	4603      	mov	r3, r0
 802478c:	b29b      	uxth	r3, r3
 802478e:	22b4      	movs	r2, #180	; 0xb4
 8024790:	4619      	mov	r1, r3
 8024792:	4620      	mov	r0, r4
 8024794:	f7f3 fbd6 	bl	8017f44 <lv_arc_set_angles>
}
 8024798:	e002      	b.n	80247a0 <kCals_angle_loader+0xf8>
}else lv_task_del(t);
 802479a:	6878      	ldr	r0, [r7, #4]
 802479c:	f7f2 fe1e 	bl	80173dc <lv_task_del>
}
 80247a0:	bf00      	nop
 80247a2:	3714      	adds	r7, #20
 80247a4:	46bd      	mov	sp, r7
 80247a6:	bd90      	pop	{r4, r7, pc}
 80247a8:	00000000 	.word	0x00000000
 80247ac:	40767000 	.word	0x40767000
	...
 80247bc:	40c38800 	.word	0x40c38800
 80247c0:	2001bc59 	.word	0x2001bc59
 80247c4:	2001bbe2 	.word	0x2001bbe2
 80247c8:	0802d56c 	.word	0x0802d56c
 80247cc:	2001bc48 	.word	0x2001bc48
 80247d0:	2001bcb8 	.word	0x2001bcb8
 80247d4:	2001bbe0 	.word	0x2001bbe0
 80247d8:	40668000 	.word	0x40668000
 80247dc:	2001bcc0 	.word	0x2001bcc0
 80247e0:	4080e000 	.word	0x4080e000

080247e4 <MainScreen_SetTime>:
//Getter and setter functions
void MainScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 80247e4:	b480      	push	{r7}
 80247e6:	b083      	sub	sp, #12
 80247e8:	af00      	add	r7, sp, #0
 80247ea:	4603      	mov	r3, r0
 80247ec:	71fb      	strb	r3, [r7, #7]
 80247ee:	460b      	mov	r3, r1
 80247f0:	71bb      	strb	r3, [r7, #6]
 80247f2:	4613      	mov	r3, r2
 80247f4:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 80247f6:	4a07      	ldr	r2, [pc, #28]	; (8024814 <MainScreen_SetTime+0x30>)
 80247f8:	79fb      	ldrb	r3, [r7, #7]
 80247fa:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 80247fc:	4a06      	ldr	r2, [pc, #24]	; (8024818 <MainScreen_SetTime+0x34>)
 80247fe:	79bb      	ldrb	r3, [r7, #6]
 8024800:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8024802:	4a06      	ldr	r2, [pc, #24]	; (802481c <MainScreen_SetTime+0x38>)
 8024804:	797b      	ldrb	r3, [r7, #5]
 8024806:	7013      	strb	r3, [r2, #0]
}
 8024808:	bf00      	nop
 802480a:	370c      	adds	r7, #12
 802480c:	46bd      	mov	sp, r7
 802480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024812:	4770      	bx	lr
 8024814:	2001bcbe 	.word	0x2001bcbe
 8024818:	2001bcbd 	.word	0x2001bcbd
 802481c:	2001bcac 	.word	0x2001bcac

08024820 <MainScreen_SetDate>:
void MainScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8024820:	b480      	push	{r7}
 8024822:	b083      	sub	sp, #12
 8024824:	af00      	add	r7, sp, #0
 8024826:	603b      	str	r3, [r7, #0]
 8024828:	4603      	mov	r3, r0
 802482a:	71fb      	strb	r3, [r7, #7]
 802482c:	460b      	mov	r3, r1
 802482e:	71bb      	strb	r3, [r7, #6]
 8024830:	4613      	mov	r3, r2
 8024832:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8024834:	79fb      	ldrb	r3, [r7, #7]
 8024836:	b29b      	uxth	r3, r3
 8024838:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 802483c:	b29a      	uxth	r2, r3
 802483e:	4b08      	ldr	r3, [pc, #32]	; (8024860 <MainScreen_SetDate+0x40>)
 8024840:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8024842:	4a08      	ldr	r2, [pc, #32]	; (8024864 <MainScreen_SetDate+0x44>)
 8024844:	79bb      	ldrb	r3, [r7, #6]
 8024846:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8024848:	4a07      	ldr	r2, [pc, #28]	; (8024868 <MainScreen_SetDate+0x48>)
 802484a:	797b      	ldrb	r3, [r7, #5]
 802484c:	7013      	strb	r3, [r2, #0]
	weekDayStr =getWeekDay;
 802484e:	4a07      	ldr	r2, [pc, #28]	; (802486c <MainScreen_SetDate+0x4c>)
 8024850:	683b      	ldr	r3, [r7, #0]
 8024852:	6013      	str	r3, [r2, #0]

}
 8024854:	bf00      	nop
 8024856:	370c      	adds	r7, #12
 8024858:	46bd      	mov	sp, r7
 802485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802485e:	4770      	bx	lr
 8024860:	2001bcae 	.word	0x2001bcae
 8024864:	2001bbf0 	.word	0x2001bbf0
 8024868:	2001bcbc 	.word	0x2001bcbc
 802486c:	2001bc3c 	.word	0x2001bc3c

08024870 <MainScreen_SetStepsAndKcals>:
void MainScreen_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
 8024870:	b480      	push	{r7}
 8024872:	b083      	sub	sp, #12
 8024874:	af00      	add	r7, sp, #0
 8024876:	4603      	mov	r3, r0
 8024878:	460a      	mov	r2, r1
 802487a:	80fb      	strh	r3, [r7, #6]
 802487c:	4613      	mov	r3, r2
 802487e:	80bb      	strh	r3, [r7, #4]
	steps =getSteps;
 8024880:	4a05      	ldr	r2, [pc, #20]	; (8024898 <MainScreen_SetStepsAndKcals+0x28>)
 8024882:	88fb      	ldrh	r3, [r7, #6]
 8024884:	8013      	strh	r3, [r2, #0]
	kCals =getKcals;
 8024886:	4a05      	ldr	r2, [pc, #20]	; (802489c <MainScreen_SetStepsAndKcals+0x2c>)
 8024888:	88bb      	ldrh	r3, [r7, #4]
 802488a:	8013      	strh	r3, [r2, #0]
}
 802488c:	bf00      	nop
 802488e:	370c      	adds	r7, #12
 8024890:	46bd      	mov	sp, r7
 8024892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024896:	4770      	bx	lr
 8024898:	2001b5cc 	.word	0x2001b5cc
 802489c:	2001bbe2 	.word	0x2001bbe2

080248a0 <MainScreen_SetBatteryVal>:
void MainScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 80248a0:	b480      	push	{r7}
 80248a2:	b083      	sub	sp, #12
 80248a4:	af00      	add	r7, sp, #0
 80248a6:	6078      	str	r0, [r7, #4]
 80248a8:	8039      	strh	r1, [r7, #0]
	batteryVal =getBatteryVal;
 80248aa:	4a06      	ldr	r2, [pc, #24]	; (80248c4 <MainScreen_SetBatteryVal+0x24>)
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	6013      	str	r3, [r2, #0]
	batteryColor =getBatteryColor;
 80248b0:	4a05      	ldr	r2, [pc, #20]	; (80248c8 <MainScreen_SetBatteryVal+0x28>)
 80248b2:	883b      	ldrh	r3, [r7, #0]
 80248b4:	8013      	strh	r3, [r2, #0]
}
 80248b6:	bf00      	nop
 80248b8:	370c      	adds	r7, #12
 80248ba:	46bd      	mov	sp, r7
 80248bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248c0:	4770      	bx	lr
 80248c2:	bf00      	nop
 80248c4:	2001bcb4 	.word	0x2001bcb4
 80248c8:	2001bcb0 	.word	0x2001bcb0

080248cc <MainScreen_SetBluetoothStatusVal>:
void MainScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 80248cc:	b480      	push	{r7}
 80248ce:	b083      	sub	sp, #12
 80248d0:	af00      	add	r7, sp, #0
 80248d2:	4603      	mov	r3, r0
 80248d4:	80b9      	strh	r1, [r7, #4]
 80248d6:	71fb      	strb	r3, [r7, #7]
	bluetoothStatus =getBluetoothStatus;
 80248d8:	4a05      	ldr	r2, [pc, #20]	; (80248f0 <MainScreen_SetBluetoothStatusVal+0x24>)
 80248da:	79fb      	ldrb	r3, [r7, #7]
 80248dc:	7013      	strb	r3, [r2, #0]
	bluetoothColor =getBluetoothColor;
 80248de:	4a05      	ldr	r2, [pc, #20]	; (80248f4 <MainScreen_SetBluetoothStatusVal+0x28>)
 80248e0:	88bb      	ldrh	r3, [r7, #4]
 80248e2:	8013      	strh	r3, [r2, #0]
}
 80248e4:	bf00      	nop
 80248e6:	370c      	adds	r7, #12
 80248e8:	46bd      	mov	sp, r7
 80248ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248ee:	4770      	bx	lr
 80248f0:	2001bc58 	.word	0x2001bc58
 80248f4:	2001bc9c 	.word	0x2001bc9c

080248f8 <MainScreen_TaskControllerSet>:
void MainScreen_TaskControllerSet(bool active){
 80248f8:	b480      	push	{r7}
 80248fa:	b083      	sub	sp, #12
 80248fc:	af00      	add	r7, sp, #0
 80248fe:	4603      	mov	r3, r0
 8024900:	71fb      	strb	r3, [r7, #7]
	MS_taskController = active;
 8024902:	4a04      	ldr	r2, [pc, #16]	; (8024914 <MainScreen_TaskControllerSet+0x1c>)
 8024904:	79fb      	ldrb	r3, [r7, #7]
 8024906:	7013      	strb	r3, [r2, #0]
}
 8024908:	bf00      	nop
 802490a:	370c      	adds	r7, #12
 802490c:	46bd      	mov	sp, r7
 802490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024912:	4770      	bx	lr
 8024914:	2001bc59 	.word	0x2001bc59

08024918 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8024918:	b480      	push	{r7}
 802491a:	b085      	sub	sp, #20
 802491c:	af00      	add	r7, sp, #0
 802491e:	4603      	mov	r3, r0
 8024920:	71fb      	strb	r3, [r7, #7]
 8024922:	460b      	mov	r3, r1
 8024924:	71bb      	strb	r3, [r7, #6]
 8024926:	4613      	mov	r3, r2
 8024928:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802492a:	79bb      	ldrb	r3, [r7, #6]
 802492c:	095b      	lsrs	r3, r3, #5
 802492e:	b2db      	uxtb	r3, r3
 8024930:	f003 0307 	and.w	r3, r3, #7
 8024934:	b2da      	uxtb	r2, r3
 8024936:	7b3b      	ldrb	r3, [r7, #12]
 8024938:	f362 0302 	bfi	r3, r2, #0, #3
 802493c:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802493e:	79fb      	ldrb	r3, [r7, #7]
 8024940:	08db      	lsrs	r3, r3, #3
 8024942:	b2db      	uxtb	r3, r3
 8024944:	f003 031f 	and.w	r3, r3, #31
 8024948:	b2da      	uxtb	r2, r3
 802494a:	7b3b      	ldrb	r3, [r7, #12]
 802494c:	f362 03c7 	bfi	r3, r2, #3, #5
 8024950:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8024952:	797b      	ldrb	r3, [r7, #5]
 8024954:	08db      	lsrs	r3, r3, #3
 8024956:	b2db      	uxtb	r3, r3
 8024958:	f003 031f 	and.w	r3, r3, #31
 802495c:	b2da      	uxtb	r2, r3
 802495e:	7b7b      	ldrb	r3, [r7, #13]
 8024960:	f362 0304 	bfi	r3, r2, #0, #5
 8024964:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8024966:	79bb      	ldrb	r3, [r7, #6]
 8024968:	089b      	lsrs	r3, r3, #2
 802496a:	b2db      	uxtb	r3, r3
 802496c:	f003 0307 	and.w	r3, r3, #7
 8024970:	b2da      	uxtb	r2, r3
 8024972:	7b7b      	ldrb	r3, [r7, #13]
 8024974:	f362 1347 	bfi	r3, r2, #5, #3
 8024978:	737b      	strb	r3, [r7, #13]
    return color;
 802497a:	89bb      	ldrh	r3, [r7, #12]
}
 802497c:	4618      	mov	r0, r3
 802497e:	3714      	adds	r7, #20
 8024980:	46bd      	mov	sp, r7
 8024982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024986:	4770      	bx	lr

08024988 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024988:	b580      	push	{r7, lr}
 802498a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802498c:	f7f1 f8aa 	bl	8015ae4 <lv_disp_get_default>
 8024990:	4603      	mov	r3, r0
 8024992:	4618      	mov	r0, r3
 8024994:	f7e3 fd72 	bl	800847c <lv_disp_get_scr_act>
 8024998:	4603      	mov	r3, r0
}
 802499a:	4618      	mov	r0, r3
 802499c:	bd80      	pop	{r7, pc}

0802499e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802499e:	b580      	push	{r7, lr}
 80249a0:	b084      	sub	sp, #16
 80249a2:	af00      	add	r7, sp, #0
 80249a4:	60f8      	str	r0, [r7, #12]
 80249a6:	460b      	mov	r3, r1
 80249a8:	607a      	str	r2, [r7, #4]
 80249aa:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80249ac:	6879      	ldr	r1, [r7, #4]
 80249ae:	68f8      	ldr	r0, [r7, #12]
 80249b0:	f7e5 fbdb 	bl	800a16a <lv_obj_set_style>
}
 80249b4:	bf00      	nop
 80249b6:	3710      	adds	r7, #16
 80249b8:	46bd      	mov	sp, r7
 80249ba:	bd80      	pop	{r7, pc}

080249bc <tos_MenuScreen_Init>:
void MenuScreen_MenuItem(char * itemTitle,const void * itemImg);
void MenuScreen_ItemController(uint8_t item);
void MenuScreen_OpenMenu(uint8_t item);
static uint8_t item=0,befItem=255;

void tos_MenuScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 80249bc:	b590      	push	{r4, r7, lr}
 80249be:	b083      	sub	sp, #12
 80249c0:	af00      	add	r7, sp, #0
 80249c2:	4603      	mov	r3, r0
 80249c4:	6039      	str	r1, [r7, #0]
 80249c6:	71fb      	strb	r3, [r7, #7]
	befItem=255;
 80249c8:	4b1c      	ldr	r3, [pc, #112]	; (8024a3c <tos_MenuScreen_Init+0x80>)
 80249ca:	22ff      	movs	r2, #255	; 0xff
 80249cc:	701a      	strb	r2, [r3, #0]
		lv_style_copy(&style_screen, &lv_style_plain);
 80249ce:	491c      	ldr	r1, [pc, #112]	; (8024a40 <tos_MenuScreen_Init+0x84>)
 80249d0:	481c      	ldr	r0, [pc, #112]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249d2:	f7e7 f969 	bl	800bca8 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_WHITE;
 80249d6:	4a1b      	ldr	r2, [pc, #108]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249d8:	4b1b      	ldr	r3, [pc, #108]	; (8024a48 <tos_MenuScreen_Init+0x8c>)
 80249da:	881b      	ldrh	r3, [r3, #0]
 80249dc:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 80249de:	4a19      	ldr	r2, [pc, #100]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249e0:	4b19      	ldr	r3, [pc, #100]	; (8024a48 <tos_MenuScreen_Init+0x8c>)
 80249e2:	881b      	ldrh	r3, [r3, #0]
 80249e4:	8093      	strh	r3, [r2, #4]
		if(theme){
 80249e6:	79fb      	ldrb	r3, [r7, #7]
 80249e8:	2b00      	cmp	r3, #0
 80249ea:	d005      	beq.n	80249f8 <tos_MenuScreen_Init+0x3c>
			style_screen.body.main_color = LV_COLOR_BLACK;
 80249ec:	4b15      	ldr	r3, [pc, #84]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249ee:	2200      	movs	r2, #0
 80249f0:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 80249f2:	4b14      	ldr	r3, [pc, #80]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249f4:	2200      	movs	r2, #0
 80249f6:	809a      	strh	r2, [r3, #4]
		}
		style_screen.text.color = lv_color_make(68,133,247);
 80249f8:	4c12      	ldr	r4, [pc, #72]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 80249fa:	22f7      	movs	r2, #247	; 0xf7
 80249fc:	2185      	movs	r1, #133	; 0x85
 80249fe:	2044      	movs	r0, #68	; 0x44
 8024a00:	f7ff ff8a 	bl	8024918 <lv_color_make>
 8024a04:	8420      	strh	r0, [r4, #32]
		style_screen.text.font = &lv_font_roboto_28;
 8024a06:	4b0f      	ldr	r3, [pc, #60]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 8024a08:	4a10      	ldr	r2, [pc, #64]	; (8024a4c <tos_MenuScreen_Init+0x90>)
 8024a0a:	625a      	str	r2, [r3, #36]	; 0x24
		lv_obj_set_style(lv_scr_act(), &style_screen);
 8024a0c:	f7ff ffbc 	bl	8024988 <lv_scr_act>
 8024a10:	4603      	mov	r3, r0
 8024a12:	490c      	ldr	r1, [pc, #48]	; (8024a44 <tos_MenuScreen_Init+0x88>)
 8024a14:	4618      	mov	r0, r3
 8024a16:	f7e5 fba8 	bl	800a16a <lv_obj_set_style>
		MenuIsOpen=true;
 8024a1a:	4b0d      	ldr	r3, [pc, #52]	; (8024a50 <tos_MenuScreen_Init+0x94>)
 8024a1c:	2201      	movs	r2, #1
 8024a1e:	701a      	strb	r2, [r3, #0]
		MenuS_TaskController=true;
 8024a20:	4b0c      	ldr	r3, [pc, #48]	; (8024a54 <tos_MenuScreen_Init+0x98>)
 8024a22:	2201      	movs	r2, #1
 8024a24:	701a      	strb	r2, [r3, #0]
		Menutheme=theme;
 8024a26:	4a0c      	ldr	r2, [pc, #48]	; (8024a58 <tos_MenuScreen_Init+0x9c>)
 8024a28:	79fb      	ldrb	r3, [r7, #7]
 8024a2a:	7013      	strb	r3, [r2, #0]
		M_hrtc=hrtc;
 8024a2c:	4a0b      	ldr	r2, [pc, #44]	; (8024a5c <tos_MenuScreen_Init+0xa0>)
 8024a2e:	683b      	ldr	r3, [r7, #0]
 8024a30:	6013      	str	r3, [r2, #0]
}
 8024a32:	bf00      	nop
 8024a34:	370c      	adds	r7, #12
 8024a36:	46bd      	mov	sp, r7
 8024a38:	bd90      	pop	{r4, r7, pc}
 8024a3a:	bf00      	nop
 8024a3c:	20002830 	.word	0x20002830
 8024a40:	2001ba40 	.word	0x2001ba40
 8024a44:	2001ac28 	.word	0x2001ac28
 8024a48:	0802d5b8 	.word	0x0802d5b8
 8024a4c:	20002398 	.word	0x20002398
 8024a50:	2001ac64 	.word	0x2001ac64
 8024a54:	2001bcc8 	.word	0x2001bcc8
 8024a58:	2001bcc9 	.word	0x2001bcc9
 8024a5c:	2001bcc4 	.word	0x2001bcc4

08024a60 <tos_Menu_Controller>:
void tos_Menu_Controller(void){
 8024a60:	b580      	push	{r7, lr}
 8024a62:	af00      	add	r7, sp, #0
	if(MenuS_TaskController){
 8024a64:	4b38      	ldr	r3, [pc, #224]	; (8024b48 <tos_Menu_Controller+0xe8>)
 8024a66:	781b      	ldrb	r3, [r3, #0]
 8024a68:	2b00      	cmp	r3, #0
 8024a6a:	d06a      	beq.n	8024b42 <tos_Menu_Controller+0xe2>
			  if(SettingsScreen_isSettingsOpen())  SettingsScreen_ButtonController();
 8024a6c:	f003 fb56 	bl	802811c <SettingsScreen_isSettingsOpen>
 8024a70:	4603      	mov	r3, r0
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d002      	beq.n	8024a7c <tos_Menu_Controller+0x1c>
 8024a76:	f002 fe8b 	bl	8027790 <SettingsScreen_ButtonController>
				  MenuScreen_ItemController(item);
				  befItem=item;
				}
			  }
	}
}
 8024a7a:	e062      	b.n	8024b42 <tos_Menu_Controller+0xe2>
				  if(1==tos_EnterButton_Listenner_For_MenuControl()) MenuScreen_OpenMenu(item);
 8024a7c:	f005 fb58 	bl	802a130 <tos_EnterButton_Listenner_For_MenuControl>
 8024a80:	4603      	mov	r3, r0
 8024a82:	2b01      	cmp	r3, #1
 8024a84:	d104      	bne.n	8024a90 <tos_Menu_Controller+0x30>
 8024a86:	4b31      	ldr	r3, [pc, #196]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024a88:	781b      	ldrb	r3, [r3, #0]
 8024a8a:	4618      	mov	r0, r3
 8024a8c:	f000 f862 	bl	8024b54 <MenuScreen_OpenMenu>
				  if(StopWatch_TaskControllerGet())  StopWatch_ButtonController();
 8024a90:	f004 fec8 	bl	8029824 <StopWatch_TaskControllerGet>
 8024a94:	4603      	mov	r3, r0
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	d002      	beq.n	8024aa0 <tos_Menu_Controller+0x40>
 8024a9a:	f004 fd5d 	bl	8029558 <StopWatch_ButtonController>
 8024a9e:	e041      	b.n	8024b24 <tos_Menu_Controller+0xc4>
				  else if(RunMode_TaskControllerGet())    RunMode_ButtonController();
 8024aa0:	f002 fa50 	bl	8026f44 <RunMode_TaskControllerGet>
 8024aa4:	4603      	mov	r3, r0
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d002      	beq.n	8024ab0 <tos_Menu_Controller+0x50>
 8024aaa:	f001 ffe3 	bl	8026a74 <RunMode_ButtonController>
 8024aae:	e039      	b.n	8024b24 <tos_Menu_Controller+0xc4>
				  else if(MusicPlayer_TaskControllerGet())   MusicPlayer_ButtonController();
 8024ab0:	f000 fd50 	bl	8025554 <MusicPlayer_TaskControllerGet>
 8024ab4:	4603      	mov	r3, r0
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	d002      	beq.n	8024ac0 <tos_Menu_Controller+0x60>
 8024aba:	f000 fc1f 	bl	80252fc <MusicPlayer_ButtonController>
 8024abe:	e031      	b.n	8024b24 <tos_Menu_Controller+0xc4>
				  else if(NotificationScreen_TaskControllerGet())   NotificationScreen_ButtonController();
 8024ac0:	f001 f91e 	bl	8025d00 <NotificationScreen_TaskControllerGet>
 8024ac4:	4603      	mov	r3, r0
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	d002      	beq.n	8024ad0 <tos_Menu_Controller+0x70>
 8024aca:	f000 fe05 	bl	80256d8 <NotificationScreen_ButtonController>
 8024ace:	e029      	b.n	8024b24 <tos_Menu_Controller+0xc4>
					  if(1==tos_LeftButton_Listenner_For_MenuControl()){
 8024ad0:	f005 fb06 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 8024ad4:	4603      	mov	r3, r0
 8024ad6:	2b01      	cmp	r3, #1
 8024ad8:	d10f      	bne.n	8024afa <tos_Menu_Controller+0x9a>
						  if(item>ITEM_MIN)item--;
 8024ada:	4b1c      	ldr	r3, [pc, #112]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024adc:	781b      	ldrb	r3, [r3, #0]
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	d006      	beq.n	8024af0 <tos_Menu_Controller+0x90>
 8024ae2:	4b1a      	ldr	r3, [pc, #104]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024ae4:	781b      	ldrb	r3, [r3, #0]
 8024ae6:	3b01      	subs	r3, #1
 8024ae8:	b2da      	uxtb	r2, r3
 8024aea:	4b18      	ldr	r3, [pc, #96]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024aec:	701a      	strb	r2, [r3, #0]
 8024aee:	e004      	b.n	8024afa <tos_Menu_Controller+0x9a>
							  	MenuS_TaskController=false;
 8024af0:	4b15      	ldr	r3, [pc, #84]	; (8024b48 <tos_Menu_Controller+0xe8>)
 8024af2:	2200      	movs	r2, #0
 8024af4:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8024af6:	f005 fde5 	bl	802a6c4 <tos_Set_Current_Screen>
					  if(1==tos_RightButton_Listenner_For_MenuControl()){
 8024afa:	f005 fac9 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 8024afe:	4603      	mov	r3, r0
 8024b00:	2b01      	cmp	r3, #1
 8024b02:	d10f      	bne.n	8024b24 <tos_Menu_Controller+0xc4>
						  if(item<ITEM_MAX)item++;
 8024b04:	4b11      	ldr	r3, [pc, #68]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b06:	781b      	ldrb	r3, [r3, #0]
 8024b08:	2b04      	cmp	r3, #4
 8024b0a:	d806      	bhi.n	8024b1a <tos_Menu_Controller+0xba>
 8024b0c:	4b0f      	ldr	r3, [pc, #60]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b0e:	781b      	ldrb	r3, [r3, #0]
 8024b10:	3301      	adds	r3, #1
 8024b12:	b2da      	uxtb	r2, r3
 8024b14:	4b0d      	ldr	r3, [pc, #52]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b16:	701a      	strb	r2, [r3, #0]
 8024b18:	e004      	b.n	8024b24 <tos_Menu_Controller+0xc4>
							  	MenuS_TaskController=false;
 8024b1a:	4b0b      	ldr	r3, [pc, #44]	; (8024b48 <tos_Menu_Controller+0xe8>)
 8024b1c:	2200      	movs	r2, #0
 8024b1e:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8024b20:	f005 fdd0 	bl	802a6c4 <tos_Set_Current_Screen>
				  if(befItem!=item){
 8024b24:	4b0a      	ldr	r3, [pc, #40]	; (8024b50 <tos_Menu_Controller+0xf0>)
 8024b26:	781a      	ldrb	r2, [r3, #0]
 8024b28:	4b08      	ldr	r3, [pc, #32]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b2a:	781b      	ldrb	r3, [r3, #0]
 8024b2c:	429a      	cmp	r2, r3
 8024b2e:	d008      	beq.n	8024b42 <tos_Menu_Controller+0xe2>
				  MenuScreen_ItemController(item);
 8024b30:	4b06      	ldr	r3, [pc, #24]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b32:	781b      	ldrb	r3, [r3, #0]
 8024b34:	4618      	mov	r0, r3
 8024b36:	f000 f88d 	bl	8024c54 <MenuScreen_ItemController>
				  befItem=item;
 8024b3a:	4b04      	ldr	r3, [pc, #16]	; (8024b4c <tos_Menu_Controller+0xec>)
 8024b3c:	781a      	ldrb	r2, [r3, #0]
 8024b3e:	4b04      	ldr	r3, [pc, #16]	; (8024b50 <tos_Menu_Controller+0xf0>)
 8024b40:	701a      	strb	r2, [r3, #0]
}
 8024b42:	bf00      	nop
 8024b44:	bd80      	pop	{r7, pc}
 8024b46:	bf00      	nop
 8024b48:	2001bcc8 	.word	0x2001bcc8
 8024b4c:	2001ac65 	.word	0x2001ac65
 8024b50:	20002830 	.word	0x20002830

08024b54 <MenuScreen_OpenMenu>:

void MenuScreen_OpenMenu(uint8_t item){
 8024b54:	b580      	push	{r7, lr}
 8024b56:	b082      	sub	sp, #8
 8024b58:	af00      	add	r7, sp, #0
 8024b5a:	4603      	mov	r3, r0
 8024b5c:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8024b5e:	f7ff ff13 	bl	8024988 <lv_scr_act>
 8024b62:	4603      	mov	r3, r0
 8024b64:	4618      	mov	r0, r3
 8024b66:	f7e4 fbe9 	bl	800933c <lv_obj_clean>
	StepAndKcal_TaskControllerSet(false);
 8024b6a:	2000      	movs	r0, #0
 8024b6c:	f004 fb8e 	bl	802928c <StepAndKcal_TaskControllerSet>
	StopWatch_TaskControllerSet(false);
 8024b70:	2000      	movs	r0, #0
 8024b72:	f004 fe47 	bl	8029804 <StopWatch_TaskControllerSet>
	RunMode_TaskControllerSet(false);
 8024b76:	2000      	movs	r0, #0
 8024b78:	f002 f9d4 	bl	8026f24 <RunMode_TaskControllerSet>
	MusicPlayer_TaskControllerSet(false);
 8024b7c:	2000      	movs	r0, #0
 8024b7e:	f000 fca9 	bl	80254d4 <MusicPlayer_TaskControllerSet>
	NotificationScreen_TaskControllerSet(false);
 8024b82:	2000      	movs	r0, #0
 8024b84:	f001 f8ac 	bl	8025ce0 <NotificationScreen_TaskControllerSet>

	if(!MenuIsOpen){
 8024b88:	4b2f      	ldr	r3, [pc, #188]	; (8024c48 <MenuScreen_OpenMenu+0xf4>)
 8024b8a:	781b      	ldrb	r3, [r3, #0]
 8024b8c:	f083 0301 	eor.w	r3, r3, #1
 8024b90:	b2db      	uxtb	r3, r3
 8024b92:	2b00      	cmp	r3, #0
 8024b94:	d007      	beq.n	8024ba6 <MenuScreen_OpenMenu+0x52>
		  MenuIsOpen=true;
 8024b96:	4b2c      	ldr	r3, [pc, #176]	; (8024c48 <MenuScreen_OpenMenu+0xf4>)
 8024b98:	2201      	movs	r2, #1
 8024b9a:	701a      	strb	r2, [r3, #0]
		  MenuScreen_ItemController(item);
 8024b9c:	79fb      	ldrb	r3, [r7, #7]
 8024b9e:	4618      	mov	r0, r3
 8024ba0:	f000 f858 	bl	8024c54 <MenuScreen_ItemController>
		  return;
 8024ba4:	e04d      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>
	}

	MenuIsOpen=false;
 8024ba6:	4b28      	ldr	r3, [pc, #160]	; (8024c48 <MenuScreen_OpenMenu+0xf4>)
 8024ba8:	2200      	movs	r2, #0
 8024baa:	701a      	strb	r2, [r3, #0]

	switch(item){
 8024bac:	79fb      	ldrb	r3, [r7, #7]
 8024bae:	2b05      	cmp	r3, #5
 8024bb0:	d846      	bhi.n	8024c40 <MenuScreen_OpenMenu+0xec>
 8024bb2:	a201      	add	r2, pc, #4	; (adr r2, 8024bb8 <MenuScreen_OpenMenu+0x64>)
 8024bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024bb8:	08024bd1 	.word	0x08024bd1
 8024bbc:	08024be5 	.word	0x08024be5
 8024bc0:	08024bf7 	.word	0x08024bf7
 8024bc4:	08024c0b 	.word	0x08024c0b
 8024bc8:	08024c1d 	.word	0x08024c1d
 8024bcc:	08024c2f 	.word	0x08024c2f
	case ITEM0:
	/*Steps And kCals*/
	tos_StepAndKcalScreen_Init(true,Menutheme);
 8024bd0:	4b1e      	ldr	r3, [pc, #120]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024bd2:	781b      	ldrb	r3, [r3, #0]
 8024bd4:	4619      	mov	r1, r3
 8024bd6:	2001      	movs	r0, #1
 8024bd8:	f003 feb6 	bl	8028948 <tos_StepAndKcalScreen_Init>
	StepAndKcal_TaskControllerSet(true);
 8024bdc:	2001      	movs	r0, #1
 8024bde:	f004 fb55 	bl	802928c <StepAndKcal_TaskControllerSet>
	break;
 8024be2:	e02e      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	case ITEM1:
	/*Stopwatch*/
	tos_StopWatchScreen_Init(Menutheme);
 8024be4:	4b19      	ldr	r3, [pc, #100]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024be6:	781b      	ldrb	r3, [r3, #0]
 8024be8:	4618      	mov	r0, r3
 8024bea:	f004 fb79 	bl	80292e0 <tos_StopWatchScreen_Init>
	StopWatch_TaskControllerSet(true);
 8024bee:	2001      	movs	r0, #1
 8024bf0:	f004 fe08 	bl	8029804 <StopWatch_TaskControllerSet>
		break;
 8024bf4:	e025      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	case ITEM2:
	/*Run Mode*/
	tos_RunModeScreen_Init(true,Menutheme); //unit type alma yazılacak
 8024bf6:	4b15      	ldr	r3, [pc, #84]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024bf8:	781b      	ldrb	r3, [r3, #0]
 8024bfa:	4619      	mov	r1, r3
 8024bfc:	2001      	movs	r0, #1
 8024bfe:	f001 f8f3 	bl	8025de8 <tos_RunModeScreen_Init>
	RunMode_TaskControllerSet(true);
 8024c02:	2001      	movs	r0, #1
 8024c04:	f002 f98e 	bl	8026f24 <RunMode_TaskControllerSet>
	break;
 8024c08:	e01b      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	case ITEM3:
	/*Music Player*/
	tos_MusicPlayerScreen_Init(Menutheme);
 8024c0a:	4b10      	ldr	r3, [pc, #64]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024c0c:	781b      	ldrb	r3, [r3, #0]
 8024c0e:	4618      	mov	r0, r3
 8024c10:	f000 f916 	bl	8024e40 <tos_MusicPlayerScreen_Init>
	MusicPlayer_TaskControllerSet(true);
 8024c14:	2001      	movs	r0, #1
 8024c16:	f000 fc5d 	bl	80254d4 <MusicPlayer_TaskControllerSet>
	break;
 8024c1a:	e012      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	case ITEM4:
	/*Notification*/
	tos_NotificationScreen_Init(Menutheme);
 8024c1c:	4b0b      	ldr	r3, [pc, #44]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024c1e:	781b      	ldrb	r3, [r3, #0]
 8024c20:	4618      	mov	r0, r3
 8024c22:	f000 fcf9 	bl	8025618 <tos_NotificationScreen_Init>
	NotificationScreen_TaskControllerSet(true);
 8024c26:	2001      	movs	r0, #1
 8024c28:	f001 f85a 	bl	8025ce0 <NotificationScreen_TaskControllerSet>
	break;
 8024c2c:	e009      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	case ITEM5:
	/*Sys Settings*/
	tos_SettingsScreen_Init(Menutheme,M_hrtc);
 8024c2e:	4b07      	ldr	r3, [pc, #28]	; (8024c4c <MenuScreen_OpenMenu+0xf8>)
 8024c30:	781a      	ldrb	r2, [r3, #0]
 8024c32:	4b07      	ldr	r3, [pc, #28]	; (8024c50 <MenuScreen_OpenMenu+0xfc>)
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	4619      	mov	r1, r3
 8024c38:	4610      	mov	r0, r2
 8024c3a:	f002 f9f5 	bl	8027028 <tos_SettingsScreen_Init>
	//Close a veya save e basınca buraya dönmüyor !!
	break;
 8024c3e:	e000      	b.n	8024c42 <MenuScreen_OpenMenu+0xee>

	default: return;
 8024c40:	bf00      	nop
	}
}
 8024c42:	3708      	adds	r7, #8
 8024c44:	46bd      	mov	sp, r7
 8024c46:	bd80      	pop	{r7, pc}
 8024c48:	2001ac64 	.word	0x2001ac64
 8024c4c:	2001bcc9 	.word	0x2001bcc9
 8024c50:	2001bcc4 	.word	0x2001bcc4

08024c54 <MenuScreen_ItemController>:

void MenuScreen_ItemController(uint8_t item){
 8024c54:	b580      	push	{r7, lr}
 8024c56:	b082      	sub	sp, #8
 8024c58:	af00      	add	r7, sp, #0
 8024c5a:	4603      	mov	r3, r0
 8024c5c:	71fb      	strb	r3, [r7, #7]
		switch(item){
 8024c5e:	79fb      	ldrb	r3, [r7, #7]
 8024c60:	2b05      	cmp	r3, #5
 8024c62:	d82d      	bhi.n	8024cc0 <MenuScreen_ItemController+0x6c>
 8024c64:	a201      	add	r2, pc, #4	; (adr r2, 8024c6c <MenuScreen_ItemController+0x18>)
 8024c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c6a:	bf00      	nop
 8024c6c:	08024c85 	.word	0x08024c85
 8024c70:	08024c8f 	.word	0x08024c8f
 8024c74:	08024c99 	.word	0x08024c99
 8024c78:	08024ca3 	.word	0x08024ca3
 8024c7c:	08024cad 	.word	0x08024cad
 8024c80:	08024cb7 	.word	0x08024cb7
		case ITEM0:	MenuScreen_MenuItem("STEPS AND KCALS", &tos75x75); break;
 8024c84:	4910      	ldr	r1, [pc, #64]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024c86:	4811      	ldr	r0, [pc, #68]	; (8024ccc <MenuScreen_ItemController+0x78>)
 8024c88:	f000 f82c 	bl	8024ce4 <MenuScreen_MenuItem>
 8024c8c:	e019      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		case ITEM1: MenuScreen_MenuItem("STOPWATCH", &tos75x75); break;
 8024c8e:	490e      	ldr	r1, [pc, #56]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024c90:	480f      	ldr	r0, [pc, #60]	; (8024cd0 <MenuScreen_ItemController+0x7c>)
 8024c92:	f000 f827 	bl	8024ce4 <MenuScreen_MenuItem>
 8024c96:	e014      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		case ITEM2: MenuScreen_MenuItem("RUN MODE", &tos75x75); break;
 8024c98:	490b      	ldr	r1, [pc, #44]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024c9a:	480e      	ldr	r0, [pc, #56]	; (8024cd4 <MenuScreen_ItemController+0x80>)
 8024c9c:	f000 f822 	bl	8024ce4 <MenuScreen_MenuItem>
 8024ca0:	e00f      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		case ITEM3: MenuScreen_MenuItem("MUSIC PLAYER", &tos75x75); break;
 8024ca2:	4909      	ldr	r1, [pc, #36]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024ca4:	480c      	ldr	r0, [pc, #48]	; (8024cd8 <MenuScreen_ItemController+0x84>)
 8024ca6:	f000 f81d 	bl	8024ce4 <MenuScreen_MenuItem>
 8024caa:	e00a      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		case ITEM4: MenuScreen_MenuItem("NOTIFICATIONS", &tos75x75); break;
 8024cac:	4906      	ldr	r1, [pc, #24]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024cae:	480b      	ldr	r0, [pc, #44]	; (8024cdc <MenuScreen_ItemController+0x88>)
 8024cb0:	f000 f818 	bl	8024ce4 <MenuScreen_MenuItem>
 8024cb4:	e005      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		case ITEM5: MenuScreen_MenuItem("SYSTEM SETTINGS", &tos75x75); break;
 8024cb6:	4904      	ldr	r1, [pc, #16]	; (8024cc8 <MenuScreen_ItemController+0x74>)
 8024cb8:	4809      	ldr	r0, [pc, #36]	; (8024ce0 <MenuScreen_ItemController+0x8c>)
 8024cba:	f000 f813 	bl	8024ce4 <MenuScreen_MenuItem>
 8024cbe:	e000      	b.n	8024cc2 <MenuScreen_ItemController+0x6e>

		default: return;
 8024cc0:	bf00      	nop
		}
}
 8024cc2:	3708      	adds	r7, #8
 8024cc4:	46bd      	mov	sp, r7
 8024cc6:	bd80      	pop	{r7, pc}
 8024cc8:	080487e4 	.word	0x080487e4
 8024ccc:	0802d5bc 	.word	0x0802d5bc
 8024cd0:	0802d5cc 	.word	0x0802d5cc
 8024cd4:	0802d5d8 	.word	0x0802d5d8
 8024cd8:	0802d5e4 	.word	0x0802d5e4
 8024cdc:	0802d5f4 	.word	0x0802d5f4
 8024ce0:	0802d604 	.word	0x0802d604

08024ce4 <MenuScreen_MenuItem>:

void MenuScreen_MenuItem(char * itemTitle,const void * itemImg){
 8024ce4:	b580      	push	{r7, lr}
 8024ce6:	b086      	sub	sp, #24
 8024ce8:	af02      	add	r7, sp, #8
 8024cea:	6078      	str	r0, [r7, #4]
 8024cec:	6039      	str	r1, [r7, #0]
	lv_obj_clean(lv_scr_act());
 8024cee:	f7ff fe4b 	bl	8024988 <lv_scr_act>
 8024cf2:	4603      	mov	r3, r0
 8024cf4:	4618      	mov	r0, r3
 8024cf6:	f7e4 fb21 	bl	800933c <lv_obj_clean>
		lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8024cfa:	f7ff fe45 	bl	8024988 <lv_scr_act>
 8024cfe:	4603      	mov	r3, r0
 8024d00:	2100      	movs	r1, #0
 8024d02:	4618      	mov	r0, r3
 8024d04:	f7f7 fb18 	bl	801c338 <lv_img_create>
 8024d08:	60f8      	str	r0, [r7, #12]
		lv_img_set_src(img1, itemImg);
 8024d0a:	6839      	ldr	r1, [r7, #0]
 8024d0c:	68f8      	ldr	r0, [r7, #12]
 8024d0e:	f7f7 fbb1 	bl	801c474 <lv_img_set_src>
		lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 8024d12:	f06f 0313 	mvn.w	r3, #19
 8024d16:	9300      	str	r3, [sp, #0]
 8024d18:	2300      	movs	r3, #0
 8024d1a:	2200      	movs	r2, #0
 8024d1c:	2100      	movs	r1, #0
 8024d1e:	68f8      	ldr	r0, [r7, #12]
 8024d20:	f7e4 fd7e 	bl	8009820 <lv_obj_align>

		lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 8024d24:	f7ff fe30 	bl	8024988 <lv_scr_act>
 8024d28:	4603      	mov	r3, r0
 8024d2a:	2100      	movs	r1, #0
 8024d2c:	4618      	mov	r0, r3
 8024d2e:	f7f7 fe8f 	bl	801ca50 <lv_label_create>
 8024d32:	60b8      	str	r0, [r7, #8]
	 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 8024d34:	4a0d      	ldr	r2, [pc, #52]	; (8024d6c <MenuScreen_MenuItem+0x88>)
 8024d36:	2100      	movs	r1, #0
 8024d38:	68b8      	ldr	r0, [r7, #8]
 8024d3a:	f7ff fe30 	bl	802499e <lv_label_set_style>
	   	snprintf(menuBuffer, 20, "%s", itemTitle);
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	4a0b      	ldr	r2, [pc, #44]	; (8024d70 <MenuScreen_MenuItem+0x8c>)
 8024d42:	2114      	movs	r1, #20
 8024d44:	480b      	ldr	r0, [pc, #44]	; (8024d74 <MenuScreen_MenuItem+0x90>)
 8024d46:	f006 fa2f 	bl	802b1a8 <sniprintf>
	 	lv_label_set_text(tosLbl,menuBuffer);
 8024d4a:	490a      	ldr	r1, [pc, #40]	; (8024d74 <MenuScreen_MenuItem+0x90>)
 8024d4c:	68b8      	ldr	r0, [r7, #8]
 8024d4e:	f7f7 ffb1 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8024d52:	2332      	movs	r3, #50	; 0x32
 8024d54:	9300      	str	r3, [sp, #0]
 8024d56:	2300      	movs	r3, #0
 8024d58:	2200      	movs	r2, #0
 8024d5a:	2100      	movs	r1, #0
 8024d5c:	68b8      	ldr	r0, [r7, #8]
 8024d5e:	f7e4 fd5f 	bl	8009820 <lv_obj_align>
}
 8024d62:	bf00      	nop
 8024d64:	3710      	adds	r7, #16
 8024d66:	46bd      	mov	sp, r7
 8024d68:	bd80      	pop	{r7, pc}
 8024d6a:	bf00      	nop
 8024d6c:	2001ac28 	.word	0x2001ac28
 8024d70:	0802d614 	.word	0x0802d614
 8024d74:	2001bccc 	.word	0x2001bccc

08024d78 <MenuScreen_TaskControllerSet>:
//Setter And Getter Functions
bool MenuScreen_TaskControllerGet(void){
	return MenuS_TaskController;
}
void MenuScreen_TaskControllerSet(bool active){
 8024d78:	b480      	push	{r7}
 8024d7a:	b083      	sub	sp, #12
 8024d7c:	af00      	add	r7, sp, #0
 8024d7e:	4603      	mov	r3, r0
 8024d80:	71fb      	strb	r3, [r7, #7]
	MenuS_TaskController=active;
 8024d82:	4a04      	ldr	r2, [pc, #16]	; (8024d94 <MenuScreen_TaskControllerSet+0x1c>)
 8024d84:	79fb      	ldrb	r3, [r7, #7]
 8024d86:	7013      	strb	r3, [r2, #0]
}
 8024d88:	bf00      	nop
 8024d8a:	370c      	adds	r7, #12
 8024d8c:	46bd      	mov	sp, r7
 8024d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d92:	4770      	bx	lr
 8024d94:	2001bcc8 	.word	0x2001bcc8

08024d98 <MenuScreen_SetItem>:
void MenuScreen_SetItem(uint8_t SelectItem){
 8024d98:	b480      	push	{r7}
 8024d9a:	b083      	sub	sp, #12
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	4603      	mov	r3, r0
 8024da0:	71fb      	strb	r3, [r7, #7]
	item=SelectItem;
 8024da2:	4a04      	ldr	r2, [pc, #16]	; (8024db4 <MenuScreen_SetItem+0x1c>)
 8024da4:	79fb      	ldrb	r3, [r7, #7]
 8024da6:	7013      	strb	r3, [r2, #0]
}
 8024da8:	bf00      	nop
 8024daa:	370c      	adds	r7, #12
 8024dac:	46bd      	mov	sp, r7
 8024dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024db2:	4770      	bx	lr
 8024db4:	2001ac65 	.word	0x2001ac65

08024db8 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8024db8:	b480      	push	{r7}
 8024dba:	b085      	sub	sp, #20
 8024dbc:	af00      	add	r7, sp, #0
 8024dbe:	4603      	mov	r3, r0
 8024dc0:	71fb      	strb	r3, [r7, #7]
 8024dc2:	460b      	mov	r3, r1
 8024dc4:	71bb      	strb	r3, [r7, #6]
 8024dc6:	4613      	mov	r3, r2
 8024dc8:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8024dca:	79bb      	ldrb	r3, [r7, #6]
 8024dcc:	095b      	lsrs	r3, r3, #5
 8024dce:	b2db      	uxtb	r3, r3
 8024dd0:	f003 0307 	and.w	r3, r3, #7
 8024dd4:	b2da      	uxtb	r2, r3
 8024dd6:	7b3b      	ldrb	r3, [r7, #12]
 8024dd8:	f362 0302 	bfi	r3, r2, #0, #3
 8024ddc:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8024dde:	79fb      	ldrb	r3, [r7, #7]
 8024de0:	08db      	lsrs	r3, r3, #3
 8024de2:	b2db      	uxtb	r3, r3
 8024de4:	f003 031f 	and.w	r3, r3, #31
 8024de8:	b2da      	uxtb	r2, r3
 8024dea:	7b3b      	ldrb	r3, [r7, #12]
 8024dec:	f362 03c7 	bfi	r3, r2, #3, #5
 8024df0:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8024df2:	797b      	ldrb	r3, [r7, #5]
 8024df4:	08db      	lsrs	r3, r3, #3
 8024df6:	b2db      	uxtb	r3, r3
 8024df8:	f003 031f 	and.w	r3, r3, #31
 8024dfc:	b2da      	uxtb	r2, r3
 8024dfe:	7b7b      	ldrb	r3, [r7, #13]
 8024e00:	f362 0304 	bfi	r3, r2, #0, #5
 8024e04:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8024e06:	79bb      	ldrb	r3, [r7, #6]
 8024e08:	089b      	lsrs	r3, r3, #2
 8024e0a:	b2db      	uxtb	r3, r3
 8024e0c:	f003 0307 	and.w	r3, r3, #7
 8024e10:	b2da      	uxtb	r2, r3
 8024e12:	7b7b      	ldrb	r3, [r7, #13]
 8024e14:	f362 1347 	bfi	r3, r2, #5, #3
 8024e18:	737b      	strb	r3, [r7, #13]
    return color;
 8024e1a:	89bb      	ldrh	r3, [r7, #12]
}
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	3714      	adds	r7, #20
 8024e20:	46bd      	mov	sp, r7
 8024e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e26:	4770      	bx	lr

08024e28 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024e28:	b580      	push	{r7, lr}
 8024e2a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8024e2c:	f7f0 fe5a 	bl	8015ae4 <lv_disp_get_default>
 8024e30:	4603      	mov	r3, r0
 8024e32:	4618      	mov	r0, r3
 8024e34:	f7e3 fb22 	bl	800847c <lv_disp_get_scr_act>
 8024e38:	4603      	mov	r3, r0
}
 8024e3a:	4618      	mov	r0, r3
 8024e3c:	bd80      	pop	{r7, pc}
	...

08024e40 <tos_MusicPlayerScreen_Init>:
void MusicPlayerUpdateVal(void);
void soundVolumeController(bool vol);


/*This function using for initialization Music Player screen*/
void tos_MusicPlayerScreen_Init(bool theme){
 8024e40:	b590      	push	{r4, r7, lr}
 8024e42:	b083      	sub	sp, #12
 8024e44:	af00      	add	r7, sp, #0
 8024e46:	4603      	mov	r3, r0
 8024e48:	71fb      	strb	r3, [r7, #7]

	lv_obj_clean(lv_scr_act());
 8024e4a:	f7ff ffed 	bl	8024e28 <lv_scr_act>
 8024e4e:	4603      	mov	r3, r0
 8024e50:	4618      	mov	r0, r3
 8024e52:	f7e4 fa73 	bl	800933c <lv_obj_clean>
		lv_style_copy(&description_Style, &lv_style_plain);
 8024e56:	492c      	ldr	r1, [pc, #176]	; (8024f08 <tos_MusicPlayerScreen_Init+0xc8>)
 8024e58:	482c      	ldr	r0, [pc, #176]	; (8024f0c <tos_MusicPlayerScreen_Init+0xcc>)
 8024e5a:	f7e6 ff25 	bl	800bca8 <lv_style_copy>
		description_Style.text.font = &lv_font_roboto_22;
 8024e5e:	4b2b      	ldr	r3, [pc, #172]	; (8024f0c <tos_MusicPlayerScreen_Init+0xcc>)
 8024e60:	4a2b      	ldr	r2, [pc, #172]	; (8024f10 <tos_MusicPlayerScreen_Init+0xd0>)
 8024e62:	625a      	str	r2, [r3, #36]	; 0x24
		description_Style.text.color = LV_COLOR_GRAY;
 8024e64:	4a29      	ldr	r2, [pc, #164]	; (8024f0c <tos_MusicPlayerScreen_Init+0xcc>)
 8024e66:	4b2b      	ldr	r3, [pc, #172]	; (8024f14 <tos_MusicPlayerScreen_Init+0xd4>)
 8024e68:	881b      	ldrh	r3, [r3, #0]
 8024e6a:	8413      	strh	r3, [r2, #32]

		lv_style_copy(&style_screen, &lv_style_plain);
 8024e6c:	4926      	ldr	r1, [pc, #152]	; (8024f08 <tos_MusicPlayerScreen_Init+0xc8>)
 8024e6e:	482a      	ldr	r0, [pc, #168]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024e70:	f7e6 ff1a 	bl	800bca8 <lv_style_copy>
		if(theme){
 8024e74:	79fb      	ldrb	r3, [r7, #7]
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	d00d      	beq.n	8024e96 <tos_MusicPlayerScreen_Init+0x56>
			style_screen.body.main_color = LV_COLOR_BLACK;
 8024e7a:	4b27      	ldr	r3, [pc, #156]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024e7c:	2200      	movs	r2, #0
 8024e7e:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 8024e80:	4b25      	ldr	r3, [pc, #148]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024e82:	2200      	movs	r2, #0
 8024e84:	809a      	strh	r2, [r3, #4]
			description_Style.text.color = lv_color_make(0xc0, 0xc0, 0xc0);
 8024e86:	4c21      	ldr	r4, [pc, #132]	; (8024f0c <tos_MusicPlayerScreen_Init+0xcc>)
 8024e88:	22c0      	movs	r2, #192	; 0xc0
 8024e8a:	21c0      	movs	r1, #192	; 0xc0
 8024e8c:	20c0      	movs	r0, #192	; 0xc0
 8024e8e:	f7ff ff93 	bl	8024db8 <lv_color_make>
 8024e92:	8420      	strh	r0, [r4, #32]
 8024e94:	e00e      	b.n	8024eb4 <tos_MusicPlayerScreen_Init+0x74>
		}else{
			style_screen.body.main_color = LV_COLOR_WHITE;
 8024e96:	4a20      	ldr	r2, [pc, #128]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024e98:	4b20      	ldr	r3, [pc, #128]	; (8024f1c <tos_MusicPlayerScreen_Init+0xdc>)
 8024e9a:	881b      	ldrh	r3, [r3, #0]
 8024e9c:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 8024e9e:	4a1e      	ldr	r2, [pc, #120]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024ea0:	4b1e      	ldr	r3, [pc, #120]	; (8024f1c <tos_MusicPlayerScreen_Init+0xdc>)
 8024ea2:	881b      	ldrh	r3, [r3, #0]
 8024ea4:	8093      	strh	r3, [r2, #4]
			description_Style.text.color = lv_color_make(0x37, 0x37, 0x37);
 8024ea6:	4c19      	ldr	r4, [pc, #100]	; (8024f0c <tos_MusicPlayerScreen_Init+0xcc>)
 8024ea8:	2237      	movs	r2, #55	; 0x37
 8024eaa:	2137      	movs	r1, #55	; 0x37
 8024eac:	2037      	movs	r0, #55	; 0x37
 8024eae:	f7ff ff83 	bl	8024db8 <lv_color_make>
 8024eb2:	8420      	strh	r0, [r4, #32]
		}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8024eb4:	f7ff ffb8 	bl	8024e28 <lv_scr_act>
 8024eb8:	4603      	mov	r3, r0
 8024eba:	4917      	ldr	r1, [pc, #92]	; (8024f18 <tos_MusicPlayerScreen_Init+0xd8>)
 8024ebc:	4618      	mov	r0, r3
 8024ebe:	f7e5 f954 	bl	800a16a <lv_obj_set_style>

		MP_theme=theme;
 8024ec2:	4a17      	ldr	r2, [pc, #92]	; (8024f20 <tos_MusicPlayerScreen_Init+0xe0>)
 8024ec4:	79fb      	ldrb	r3, [r7, #7]
 8024ec6:	7013      	strb	r3, [r2, #0]
		MP_isButtonPressed=false;
 8024ec8:	4b16      	ldr	r3, [pc, #88]	; (8024f24 <tos_MusicPlayerScreen_Init+0xe4>)
 8024eca:	2200      	movs	r2, #0
 8024ecc:	701a      	strb	r2, [r3, #0]
		MP_buttonMode=false;
 8024ece:	4b16      	ldr	r3, [pc, #88]	; (8024f28 <tos_MusicPlayerScreen_Init+0xe8>)
 8024ed0:	2200      	movs	r2, #0
 8024ed2:	701a      	strb	r2, [r3, #0]

		MusicPlayerSound_Init(theme);
 8024ed4:	79fb      	ldrb	r3, [r7, #7]
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	f000 f89a 	bl	8025010 <MusicPlayerSound_Init>
		MusicPlayerPlayingVal_Init(theme);
 8024edc:	79fb      	ldrb	r3, [r7, #7]
 8024ede:	4618      	mov	r0, r3
 8024ee0:	f000 f984 	bl	80251ec <MusicPlayerPlayingVal_Init>
		MusicPlayerDescriptionLbl_Init(theme);
 8024ee4:	79fb      	ldrb	r3, [r7, #7]
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	f000 f9a8 	bl	802523c <MusicPlayerDescriptionLbl_Init>

		MP_taskController=true;
 8024eec:	4b0f      	ldr	r3, [pc, #60]	; (8024f2c <tos_MusicPlayerScreen_Init+0xec>)
 8024eee:	2201      	movs	r2, #1
 8024ef0:	701a      	strb	r2, [r3, #0]
		lv_task_create(MusicPlayerScreen_Updater, 750, LV_TASK_PRIO_LOWEST, NULL);
 8024ef2:	2300      	movs	r3, #0
 8024ef4:	2201      	movs	r2, #1
 8024ef6:	f240 21ee 	movw	r1, #750	; 0x2ee
 8024efa:	480d      	ldr	r0, [pc, #52]	; (8024f30 <tos_MusicPlayerScreen_Init+0xf0>)
 8024efc:	f7f2 fa36 	bl	801736c <lv_task_create>
}
 8024f00:	bf00      	nop
 8024f02:	370c      	adds	r7, #12
 8024f04:	46bd      	mov	sp, r7
 8024f06:	bd90      	pop	{r4, r7, pc}
 8024f08:	2001ba40 	.word	0x2001ba40
 8024f0c:	2001aca4 	.word	0x2001aca4
 8024f10:	200017c4 	.word	0x200017c4
 8024f14:	0802d618 	.word	0x0802d618
 8024f18:	2001ac68 	.word	0x2001ac68
 8024f1c:	0802d61c 	.word	0x0802d61c
 8024f20:	2001bd09 	.word	0x2001bd09
 8024f24:	2001bce8 	.word	0x2001bce8
 8024f28:	2001bcf8 	.word	0x2001bcf8
 8024f2c:	2001bcf0 	.word	0x2001bcf0
 8024f30:	08024f35 	.word	0x08024f35

08024f34 <MusicPlayerScreen_Updater>:


/*This function using for update variables*/
void MusicPlayerScreen_Updater(lv_task_t *t){
 8024f34:	b580      	push	{r7, lr}
 8024f36:	b084      	sub	sp, #16
 8024f38:	af02      	add	r7, sp, #8
 8024f3a:	6078      	str	r0, [r7, #4]
	if(MP_taskController){
 8024f3c:	4b2a      	ldr	r3, [pc, #168]	; (8024fe8 <MusicPlayerScreen_Updater+0xb4>)
 8024f3e:	781b      	ldrb	r3, [r3, #0]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d049      	beq.n	8024fd8 <MusicPlayerScreen_Updater+0xa4>
		if(NULL != MP_SongName) 	lv_label_set_text(MP_SongNameLbl, MP_SongName);
 8024f44:	4b29      	ldr	r3, [pc, #164]	; (8024fec <MusicPlayerScreen_Updater+0xb8>)
 8024f46:	681b      	ldr	r3, [r3, #0]
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	d008      	beq.n	8024f5e <MusicPlayerScreen_Updater+0x2a>
 8024f4c:	4b28      	ldr	r3, [pc, #160]	; (8024ff0 <MusicPlayerScreen_Updater+0xbc>)
 8024f4e:	681a      	ldr	r2, [r3, #0]
 8024f50:	4b26      	ldr	r3, [pc, #152]	; (8024fec <MusicPlayerScreen_Updater+0xb8>)
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	4619      	mov	r1, r3
 8024f56:	4610      	mov	r0, r2
 8024f58:	f7f7 feac 	bl	801ccb4 <lv_label_set_text>
 8024f5c:	e005      	b.n	8024f6a <MusicPlayerScreen_Updater+0x36>
		else lv_label_set_text(MP_SongNameLbl, "unknow");
 8024f5e:	4b24      	ldr	r3, [pc, #144]	; (8024ff0 <MusicPlayerScreen_Updater+0xbc>)
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	4924      	ldr	r1, [pc, #144]	; (8024ff4 <MusicPlayerScreen_Updater+0xc0>)
 8024f64:	4618      	mov	r0, r3
 8024f66:	f7f7 fea5 	bl	801ccb4 <lv_label_set_text>
		if(NULL != MP_SongActrist) lv_label_set_text(MP_SingerLbl, MP_SongActrist);
 8024f6a:	4b23      	ldr	r3, [pc, #140]	; (8024ff8 <MusicPlayerScreen_Updater+0xc4>)
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	d008      	beq.n	8024f84 <MusicPlayerScreen_Updater+0x50>
 8024f72:	4b22      	ldr	r3, [pc, #136]	; (8024ffc <MusicPlayerScreen_Updater+0xc8>)
 8024f74:	681a      	ldr	r2, [r3, #0]
 8024f76:	4b20      	ldr	r3, [pc, #128]	; (8024ff8 <MusicPlayerScreen_Updater+0xc4>)
 8024f78:	681b      	ldr	r3, [r3, #0]
 8024f7a:	4619      	mov	r1, r3
 8024f7c:	4610      	mov	r0, r2
 8024f7e:	f7f7 fe99 	bl	801ccb4 <lv_label_set_text>
 8024f82:	e005      	b.n	8024f90 <MusicPlayerScreen_Updater+0x5c>
		else lv_label_set_text(MP_SingerLbl, "unknow");
 8024f84:	4b1d      	ldr	r3, [pc, #116]	; (8024ffc <MusicPlayerScreen_Updater+0xc8>)
 8024f86:	681b      	ldr	r3, [r3, #0]
 8024f88:	491a      	ldr	r1, [pc, #104]	; (8024ff4 <MusicPlayerScreen_Updater+0xc0>)
 8024f8a:	4618      	mov	r0, r3
 8024f8c:	f7f7 fe92 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8024f90:	4b17      	ldr	r3, [pc, #92]	; (8024ff0 <MusicPlayerScreen_Updater+0xbc>)
 8024f92:	6818      	ldr	r0, [r3, #0]
 8024f94:	2332      	movs	r3, #50	; 0x32
 8024f96:	9300      	str	r3, [sp, #0]
 8024f98:	2300      	movs	r3, #0
 8024f9a:	2200      	movs	r2, #0
 8024f9c:	2100      	movs	r1, #0
 8024f9e:	f7e4 fc3f 	bl	8009820 <lv_obj_align>
	 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 8024fa2:	4b16      	ldr	r3, [pc, #88]	; (8024ffc <MusicPlayerScreen_Updater+0xc8>)
 8024fa4:	6818      	ldr	r0, [r3, #0]
 8024fa6:	2355      	movs	r3, #85	; 0x55
 8024fa8:	9300      	str	r3, [sp, #0]
 8024faa:	2300      	movs	r3, #0
 8024fac:	2200      	movs	r2, #0
 8024fae:	2100      	movs	r1, #0
 8024fb0:	f7e4 fc36 	bl	8009820 <lv_obj_align>
	    lv_bar_set_value(MP_soundValBar, MP_SoundVal, LV_ANIM_OFF);
 8024fb4:	4b12      	ldr	r3, [pc, #72]	; (8025000 <MusicPlayerScreen_Updater+0xcc>)
 8024fb6:	6818      	ldr	r0, [r3, #0]
 8024fb8:	4b12      	ldr	r3, [pc, #72]	; (8025004 <MusicPlayerScreen_Updater+0xd0>)
 8024fba:	781b      	ldrb	r3, [r3, #0]
 8024fbc:	b21b      	sxth	r3, r3
 8024fbe:	2200      	movs	r2, #0
 8024fc0:	4619      	mov	r1, r3
 8024fc2:	f7f3 fab9 	bl	8018538 <lv_bar_set_value>
		MusicPlayerImgSet(MP_statu,MP_theme);
 8024fc6:	4b10      	ldr	r3, [pc, #64]	; (8025008 <MusicPlayerScreen_Updater+0xd4>)
 8024fc8:	781a      	ldrb	r2, [r3, #0]
 8024fca:	4b10      	ldr	r3, [pc, #64]	; (802500c <MusicPlayerScreen_Updater+0xd8>)
 8024fcc:	781b      	ldrb	r3, [r3, #0]
 8024fce:	4619      	mov	r1, r3
 8024fd0:	4610      	mov	r0, r2
 8024fd2:	f000 fa2b 	bl	802542c <MusicPlayerImgSet>
	}else lv_task_del(t);
}
 8024fd6:	e002      	b.n	8024fde <MusicPlayerScreen_Updater+0xaa>
	}else lv_task_del(t);
 8024fd8:	6878      	ldr	r0, [r7, #4]
 8024fda:	f7f2 f9ff 	bl	80173dc <lv_task_del>
}
 8024fde:	bf00      	nop
 8024fe0:	3708      	adds	r7, #8
 8024fe2:	46bd      	mov	sp, r7
 8024fe4:	bd80      	pop	{r7, pc}
 8024fe6:	bf00      	nop
 8024fe8:	2001bcf0 	.word	0x2001bcf0
 8024fec:	2001bcec 	.word	0x2001bcec
 8024ff0:	2001bd04 	.word	0x2001bd04
 8024ff4:	0802d620 	.word	0x0802d620
 8024ff8:	2001bcf4 	.word	0x2001bcf4
 8024ffc:	2001bcfc 	.word	0x2001bcfc
 8025000:	2001bce0 	.word	0x2001bce0
 8025004:	2001bd00 	.word	0x2001bd00
 8025008:	2001bd08 	.word	0x2001bd08
 802500c:	2001bd09 	.word	0x2001bd09

08025010 <MusicPlayerSound_Init>:
/**/
void MusicPlayerSound_Init(bool theme){
 8025010:	b590      	push	{r4, r7, lr}
 8025012:	b087      	sub	sp, #28
 8025014:	af02      	add	r7, sp, #8
 8025016:	4603      	mov	r3, r0
 8025018:	71fb      	strb	r3, [r7, #7]

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 802501a:	496b      	ldr	r1, [pc, #428]	; (80251c8 <MusicPlayerSound_Init+0x1b8>)
 802501c:	486b      	ldr	r0, [pc, #428]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 802501e:	f7e6 fe43 	bl	800bca8 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8025022:	4b6a      	ldr	r3, [pc, #424]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025024:	2200      	movs	r2, #0
 8025026:	841a      	strh	r2, [r3, #32]
    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8025028:	79fb      	ldrb	r3, [r7, #7]
 802502a:	2b00      	cmp	r3, #0
 802502c:	d003      	beq.n	8025036 <MusicPlayerSound_Init+0x26>
 802502e:	4a67      	ldr	r2, [pc, #412]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025030:	4b67      	ldr	r3, [pc, #412]	; (80251d0 <MusicPlayerSound_Init+0x1c0>)
 8025032:	881b      	ldrh	r3, [r3, #0]
 8025034:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;	//373737
 8025036:	4b65      	ldr	r3, [pc, #404]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025038:	4a66      	ldr	r2, [pc, #408]	; (80251d4 <MusicPlayerSound_Init+0x1c4>)
 802503a:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 802503c:	79fb      	ldrb	r3, [r7, #7]
 802503e:	2b00      	cmp	r3, #0
 8025040:	d00e      	beq.n	8025060 <MusicPlayerSound_Init+0x50>
        obj_Style.body.main_color   = lv_color_make(0x00, 0x00, 0x00);
 8025042:	4c62      	ldr	r4, [pc, #392]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025044:	2200      	movs	r2, #0
 8025046:	2100      	movs	r1, #0
 8025048:	2000      	movs	r0, #0
 802504a:	f7ff feb5 	bl	8024db8 <lv_color_make>
 802504e:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x00, 0x00, 0x00);
 8025050:	4c5e      	ldr	r4, [pc, #376]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025052:	2200      	movs	r2, #0
 8025054:	2100      	movs	r1, #0
 8025056:	2000      	movs	r0, #0
 8025058:	f7ff feae 	bl	8024db8 <lv_color_make>
 802505c:	80a0      	strh	r0, [r4, #4]
 802505e:	e00d      	b.n	802507c <MusicPlayerSound_Init+0x6c>
    }else {
        obj_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8025060:	4c5a      	ldr	r4, [pc, #360]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025062:	2237      	movs	r2, #55	; 0x37
 8025064:	2137      	movs	r1, #55	; 0x37
 8025066:	2037      	movs	r0, #55	; 0x37
 8025068:	f7ff fea6 	bl	8024db8 <lv_color_make>
 802506c:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 802506e:	4c57      	ldr	r4, [pc, #348]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025070:	2237      	movs	r2, #55	; 0x37
 8025072:	2137      	movs	r1, #55	; 0x37
 8025074:	2037      	movs	r0, #55	; 0x37
 8025076:	f7ff fe9f 	bl	8024db8 <lv_color_make>
 802507a:	80a0      	strh	r0, [r4, #4]
    }
    obj_Style.body.radius= 10;
 802507c:	4b53      	ldr	r3, [pc, #332]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 802507e:	220a      	movs	r2, #10
 8025080:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8025082:	4b52      	ldr	r3, [pc, #328]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 8025084:	22c8      	movs	r2, #200	; 0xc8
 8025086:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 8025088:	4950      	ldr	r1, [pc, #320]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 802508a:	4853      	ldr	r0, [pc, #332]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 802508c:	f7e6 fe0c 	bl	800bca8 <lv_style_copy>
    if(theme){
 8025090:	79fb      	ldrb	r3, [r7, #7]
 8025092:	2b00      	cmp	r3, #0
 8025094:	d00e      	beq.n	80250b4 <MusicPlayerSound_Init+0xa4>
        indic_Style.body.main_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 8025096:	4c50      	ldr	r4, [pc, #320]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 8025098:	22c0      	movs	r2, #192	; 0xc0
 802509a:	21c0      	movs	r1, #192	; 0xc0
 802509c:	20c0      	movs	r0, #192	; 0xc0
 802509e:	f7ff fe8b 	bl	8024db8 <lv_color_make>
 80250a2:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 80250a4:	4c4c      	ldr	r4, [pc, #304]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 80250a6:	22c0      	movs	r2, #192	; 0xc0
 80250a8:	21c0      	movs	r1, #192	; 0xc0
 80250aa:	20c0      	movs	r0, #192	; 0xc0
 80250ac:	f7ff fe84 	bl	8024db8 <lv_color_make>
 80250b0:	80a0      	strh	r0, [r4, #4]
 80250b2:	e00d      	b.n	80250d0 <MusicPlayerSound_Init+0xc0>
    }else {
        indic_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 80250b4:	4c48      	ldr	r4, [pc, #288]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 80250b6:	2237      	movs	r2, #55	; 0x37
 80250b8:	2137      	movs	r1, #55	; 0x37
 80250ba:	2037      	movs	r0, #55	; 0x37
 80250bc:	f7ff fe7c 	bl	8024db8 <lv_color_make>
 80250c0:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 80250c2:	4c45      	ldr	r4, [pc, #276]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 80250c4:	2237      	movs	r2, #55	; 0x37
 80250c6:	2137      	movs	r1, #55	; 0x37
 80250c8:	2037      	movs	r0, #55	; 0x37
 80250ca:	f7ff fe75 	bl	8024db8 <lv_color_make>
 80250ce:	80a0      	strh	r0, [r4, #4]
    }
    indic_Style.body.opa=255;
 80250d0:	4b41      	ldr	r3, [pc, #260]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 80250d2:	22ff      	movs	r2, #255	; 0xff
 80250d4:	721a      	strb	r2, [r3, #8]

    MP_soundValBar = lv_bar_create(lv_scr_act(), NULL);
 80250d6:	f7ff fea7 	bl	8024e28 <lv_scr_act>
 80250da:	4603      	mov	r3, r0
 80250dc:	2100      	movs	r1, #0
 80250de:	4618      	mov	r0, r3
 80250e0:	f7f3 f964 	bl	80183ac <lv_bar_create>
 80250e4:	4602      	mov	r2, r0
 80250e6:	4b3d      	ldr	r3, [pc, #244]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 80250e8:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_BG, &obj_Style);
 80250ea:	4b3c      	ldr	r3, [pc, #240]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	4a37      	ldr	r2, [pc, #220]	; (80251cc <MusicPlayerSound_Init+0x1bc>)
 80250f0:	2100      	movs	r1, #0
 80250f2:	4618      	mov	r0, r3
 80250f4:	f7f3 faf0 	bl	80186d8 <lv_bar_set_style>
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_INDIC, &indic_Style);
 80250f8:	4b38      	ldr	r3, [pc, #224]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 80250fa:	681b      	ldr	r3, [r3, #0]
 80250fc:	4a36      	ldr	r2, [pc, #216]	; (80251d8 <MusicPlayerSound_Init+0x1c8>)
 80250fe:	2101      	movs	r1, #1
 8025100:	4618      	mov	r0, r3
 8025102:	f7f3 fae9 	bl	80186d8 <lv_bar_set_style>
    lv_obj_set_size(MP_soundValBar, 150, 25);
 8025106:	4b35      	ldr	r3, [pc, #212]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 8025108:	681b      	ldr	r3, [r3, #0]
 802510a:	2219      	movs	r2, #25
 802510c:	2196      	movs	r1, #150	; 0x96
 802510e:	4618      	mov	r0, r3
 8025110:	f7e4 fae3 	bl	80096da <lv_obj_set_size>
    lv_obj_align(MP_soundValBar, NULL, LV_ALIGN_CENTER, 0, -100);
 8025114:	4b31      	ldr	r3, [pc, #196]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 8025116:	6818      	ldr	r0, [r3, #0]
 8025118:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802511c:	9300      	str	r3, [sp, #0]
 802511e:	2300      	movs	r3, #0
 8025120:	2200      	movs	r2, #0
 8025122:	2100      	movs	r1, #0
 8025124:	f7e4 fb7c 	bl	8009820 <lv_obj_align>
    lv_bar_set_range(MP_soundValBar,0,100);
 8025128:	4b2c      	ldr	r3, [pc, #176]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	2264      	movs	r2, #100	; 0x64
 802512e:	2100      	movs	r1, #0
 8025130:	4618      	mov	r0, r3
 8025132:	f7f3 fa85 	bl	8018640 <lv_bar_set_range>
    lv_bar_set_value(MP_soundValBar, 0, LV_ANIM_OFF);
 8025136:	4b29      	ldr	r3, [pc, #164]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 8025138:	681b      	ldr	r3, [r3, #0]
 802513a:	2200      	movs	r2, #0
 802513c:	2100      	movs	r1, #0
 802513e:	4618      	mov	r0, r3
 8025140:	f7f3 f9fa 	bl	8018538 <lv_bar_set_value>

    lv_obj_t * plusLbl = lv_label_create(lv_scr_act(), NULL);
 8025144:	f7ff fe70 	bl	8024e28 <lv_scr_act>
 8025148:	4603      	mov	r3, r0
 802514a:	2100      	movs	r1, #0
 802514c:	4618      	mov	r0, r3
 802514e:	f7f7 fc7f 	bl	801ca50 <lv_label_create>
 8025152:	60f8      	str	r0, [r7, #12]
    lv_label_set_recolor(plusLbl, true);
 8025154:	2101      	movs	r1, #1
 8025156:	68f8      	ldr	r0, [r7, #12]
 8025158:	f7f7 fec8 	bl	801ceec <lv_label_set_recolor>
	lv_label_set_text(plusLbl, "#FFFFFF +#");
 802515c:	4920      	ldr	r1, [pc, #128]	; (80251e0 <MusicPlayerSound_Init+0x1d0>)
 802515e:	68f8      	ldr	r0, [r7, #12]
 8025160:	f7f7 fda8 	bl	801ccb4 <lv_label_set_text>
    lv_arc_set_style(plusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8025164:	4a1f      	ldr	r2, [pc, #124]	; (80251e4 <MusicPlayerSound_Init+0x1d4>)
 8025166:	2100      	movs	r1, #0
 8025168:	68f8      	ldr	r0, [r7, #12]
 802516a:	f7f2 ff14 	bl	8017f96 <lv_arc_set_style>
 	lv_obj_align(plusLbl, MP_soundValBar, LV_ALIGN_CENTER, 65, 0);
 802516e:	4b1b      	ldr	r3, [pc, #108]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 8025170:	6819      	ldr	r1, [r3, #0]
 8025172:	2300      	movs	r3, #0
 8025174:	9300      	str	r3, [sp, #0]
 8025176:	2341      	movs	r3, #65	; 0x41
 8025178:	2200      	movs	r2, #0
 802517a:	68f8      	ldr	r0, [r7, #12]
 802517c:	f7e4 fb50 	bl	8009820 <lv_obj_align>

    lv_obj_t * minusLbl = lv_label_create(lv_scr_act(), NULL);
 8025180:	f7ff fe52 	bl	8024e28 <lv_scr_act>
 8025184:	4603      	mov	r3, r0
 8025186:	2100      	movs	r1, #0
 8025188:	4618      	mov	r0, r3
 802518a:	f7f7 fc61 	bl	801ca50 <lv_label_create>
 802518e:	60b8      	str	r0, [r7, #8]
    lv_label_set_recolor(minusLbl, true);
 8025190:	2101      	movs	r1, #1
 8025192:	68b8      	ldr	r0, [r7, #8]
 8025194:	f7f7 feaa 	bl	801ceec <lv_label_set_recolor>
	lv_label_set_text(minusLbl, "#FFFFFF -#");
 8025198:	4913      	ldr	r1, [pc, #76]	; (80251e8 <MusicPlayerSound_Init+0x1d8>)
 802519a:	68b8      	ldr	r0, [r7, #8]
 802519c:	f7f7 fd8a 	bl	801ccb4 <lv_label_set_text>
    lv_arc_set_style(minusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 80251a0:	4a10      	ldr	r2, [pc, #64]	; (80251e4 <MusicPlayerSound_Init+0x1d4>)
 80251a2:	2100      	movs	r1, #0
 80251a4:	68b8      	ldr	r0, [r7, #8]
 80251a6:	f7f2 fef6 	bl	8017f96 <lv_arc_set_style>
 	lv_obj_align(minusLbl, MP_soundValBar, LV_ALIGN_CENTER, -65, 0);
 80251aa:	4b0c      	ldr	r3, [pc, #48]	; (80251dc <MusicPlayerSound_Init+0x1cc>)
 80251ac:	6819      	ldr	r1, [r3, #0]
 80251ae:	2300      	movs	r3, #0
 80251b0:	9300      	str	r3, [sp, #0]
 80251b2:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80251b6:	2200      	movs	r2, #0
 80251b8:	68b8      	ldr	r0, [r7, #8]
 80251ba:	f7e4 fb31 	bl	8009820 <lv_obj_align>

}
 80251be:	bf00      	nop
 80251c0:	3714      	adds	r7, #20
 80251c2:	46bd      	mov	sp, r7
 80251c4:	bd90      	pop	{r4, r7, pc}
 80251c6:	bf00      	nop
 80251c8:	2001ba40 	.word	0x2001ba40
 80251cc:	2001ace4 	.word	0x2001ace4
 80251d0:	0802d640 	.word	0x0802d640
 80251d4:	200027ec 	.word	0x200027ec
 80251d8:	2001ad20 	.word	0x2001ad20
 80251dc:	2001bce0 	.word	0x2001bce0
 80251e0:	0802d628 	.word	0x0802d628
 80251e4:	2001aca4 	.word	0x2001aca4
 80251e8:	0802d634 	.word	0x0802d634

080251ec <MusicPlayerPlayingVal_Init>:
/*his function using for initialization playing statu image obj.*/
void MusicPlayerPlayingVal_Init(bool theme){
 80251ec:	b580      	push	{r7, lr}
 80251ee:	b084      	sub	sp, #16
 80251f0:	af02      	add	r7, sp, #8
 80251f2:	4603      	mov	r3, r0
 80251f4:	71fb      	strb	r3, [r7, #7]

	MP_PlayingVAl_Img = lv_img_create(lv_scr_act(), NULL);
 80251f6:	f7ff fe17 	bl	8024e28 <lv_scr_act>
 80251fa:	4603      	mov	r3, r0
 80251fc:	2100      	movs	r1, #0
 80251fe:	4618      	mov	r0, r3
 8025200:	f7f7 f89a 	bl	801c338 <lv_img_create>
 8025204:	4602      	mov	r2, r0
 8025206:	4b0b      	ldr	r3, [pc, #44]	; (8025234 <MusicPlayerPlayingVal_Init+0x48>)
 8025208:	601a      	str	r2, [r3, #0]
	MusicPlayerImgSet(MP_statu,theme);
 802520a:	4b0b      	ldr	r3, [pc, #44]	; (8025238 <MusicPlayerPlayingVal_Init+0x4c>)
 802520c:	781b      	ldrb	r3, [r3, #0]
 802520e:	79fa      	ldrb	r2, [r7, #7]
 8025210:	4611      	mov	r1, r2
 8025212:	4618      	mov	r0, r3
 8025214:	f000 f90a 	bl	802542c <MusicPlayerImgSet>
	lv_obj_align(MP_PlayingVAl_Img, NULL, LV_ALIGN_CENTER, 0,0);
 8025218:	4b06      	ldr	r3, [pc, #24]	; (8025234 <MusicPlayerPlayingVal_Init+0x48>)
 802521a:	6818      	ldr	r0, [r3, #0]
 802521c:	2300      	movs	r3, #0
 802521e:	9300      	str	r3, [sp, #0]
 8025220:	2300      	movs	r3, #0
 8025222:	2200      	movs	r2, #0
 8025224:	2100      	movs	r1, #0
 8025226:	f7e4 fafb 	bl	8009820 <lv_obj_align>

}
 802522a:	bf00      	nop
 802522c:	3708      	adds	r7, #8
 802522e:	46bd      	mov	sp, r7
 8025230:	bd80      	pop	{r7, pc}
 8025232:	bf00      	nop
 8025234:	2001bce4 	.word	0x2001bce4
 8025238:	2001bd08 	.word	0x2001bd08

0802523c <MusicPlayerDescriptionLbl_Init>:
/*This funct}ion using for initialization description(name & songer) of music */
void MusicPlayerDescriptionLbl_Init(bool theme){
 802523c:	b580      	push	{r7, lr}
 802523e:	b084      	sub	sp, #16
 8025240:	af02      	add	r7, sp, #8
 8025242:	4603      	mov	r3, r0
 8025244:	71fb      	strb	r3, [r7, #7]

 	MP_SongNameLbl = lv_label_create(lv_scr_act(), NULL);
 8025246:	f7ff fdef 	bl	8024e28 <lv_scr_act>
 802524a:	4603      	mov	r3, r0
 802524c:	2100      	movs	r1, #0
 802524e:	4618      	mov	r0, r3
 8025250:	f7f7 fbfe 	bl	801ca50 <lv_label_create>
 8025254:	4602      	mov	r2, r0
 8025256:	4b24      	ldr	r3, [pc, #144]	; (80252e8 <MusicPlayerDescriptionLbl_Init+0xac>)
 8025258:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SongNameLbl, 240);
 802525a:	4b23      	ldr	r3, [pc, #140]	; (80252e8 <MusicPlayerDescriptionLbl_Init+0xac>)
 802525c:	681b      	ldr	r3, [r3, #0]
 802525e:	21f0      	movs	r1, #240	; 0xf0
 8025260:	4618      	mov	r0, r3
 8025262:	f7e4 fab3 	bl	80097cc <lv_obj_set_width>
	lv_label_set_text(MP_SongNameLbl, "song name");
 8025266:	4b20      	ldr	r3, [pc, #128]	; (80252e8 <MusicPlayerDescriptionLbl_Init+0xac>)
 8025268:	681b      	ldr	r3, [r3, #0]
 802526a:	4920      	ldr	r1, [pc, #128]	; (80252ec <MusicPlayerDescriptionLbl_Init+0xb0>)
 802526c:	4618      	mov	r0, r3
 802526e:	f7f7 fd21 	bl	801ccb4 <lv_label_set_text>
    lv_arc_set_style(MP_SongNameLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8025272:	4b1d      	ldr	r3, [pc, #116]	; (80252e8 <MusicPlayerDescriptionLbl_Init+0xac>)
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	4a1e      	ldr	r2, [pc, #120]	; (80252f0 <MusicPlayerDescriptionLbl_Init+0xb4>)
 8025278:	2100      	movs	r1, #0
 802527a:	4618      	mov	r0, r3
 802527c:	f7f2 fe8b 	bl	8017f96 <lv_arc_set_style>
 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8025280:	4b19      	ldr	r3, [pc, #100]	; (80252e8 <MusicPlayerDescriptionLbl_Init+0xac>)
 8025282:	6818      	ldr	r0, [r3, #0]
 8025284:	2332      	movs	r3, #50	; 0x32
 8025286:	9300      	str	r3, [sp, #0]
 8025288:	2300      	movs	r3, #0
 802528a:	2200      	movs	r2, #0
 802528c:	2100      	movs	r1, #0
 802528e:	f7e4 fac7 	bl	8009820 <lv_obj_align>

	MP_SingerLbl = lv_label_create(lv_scr_act(), NULL);
 8025292:	f7ff fdc9 	bl	8024e28 <lv_scr_act>
 8025296:	4603      	mov	r3, r0
 8025298:	2100      	movs	r1, #0
 802529a:	4618      	mov	r0, r3
 802529c:	f7f7 fbd8 	bl	801ca50 <lv_label_create>
 80252a0:	4602      	mov	r2, r0
 80252a2:	4b14      	ldr	r3, [pc, #80]	; (80252f4 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80252a4:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SingerLbl, 240);
 80252a6:	4b13      	ldr	r3, [pc, #76]	; (80252f4 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	21f0      	movs	r1, #240	; 0xf0
 80252ac:	4618      	mov	r0, r3
 80252ae:	f7e4 fa8d 	bl	80097cc <lv_obj_set_width>
	lv_label_set_text(MP_SingerLbl, "song actrist");
 80252b2:	4b10      	ldr	r3, [pc, #64]	; (80252f4 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80252b4:	681b      	ldr	r3, [r3, #0]
 80252b6:	4910      	ldr	r1, [pc, #64]	; (80252f8 <MusicPlayerDescriptionLbl_Init+0xbc>)
 80252b8:	4618      	mov	r0, r3
 80252ba:	f7f7 fcfb 	bl	801ccb4 <lv_label_set_text>
    lv_arc_set_style(MP_SingerLbl, LV_ARC_STYLE_MAIN, &description_Style);
 80252be:	4b0d      	ldr	r3, [pc, #52]	; (80252f4 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	4a0b      	ldr	r2, [pc, #44]	; (80252f0 <MusicPlayerDescriptionLbl_Init+0xb4>)
 80252c4:	2100      	movs	r1, #0
 80252c6:	4618      	mov	r0, r3
 80252c8:	f7f2 fe65 	bl	8017f96 <lv_arc_set_style>
 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 80252cc:	4b09      	ldr	r3, [pc, #36]	; (80252f4 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80252ce:	6818      	ldr	r0, [r3, #0]
 80252d0:	2355      	movs	r3, #85	; 0x55
 80252d2:	9300      	str	r3, [sp, #0]
 80252d4:	2300      	movs	r3, #0
 80252d6:	2200      	movs	r2, #0
 80252d8:	2100      	movs	r1, #0
 80252da:	f7e4 faa1 	bl	8009820 <lv_obj_align>


}
 80252de:	bf00      	nop
 80252e0:	3708      	adds	r7, #8
 80252e2:	46bd      	mov	sp, r7
 80252e4:	bd80      	pop	{r7, pc}
 80252e6:	bf00      	nop
 80252e8:	2001bd04 	.word	0x2001bd04
 80252ec:	0802d644 	.word	0x0802d644
 80252f0:	2001aca4 	.word	0x2001aca4
 80252f4:	2001bcfc 	.word	0x2001bcfc
 80252f8:	0802d650 	.word	0x0802d650

080252fc <MusicPlayer_ButtonController>:
/*This function using for control to buttons*/
void MusicPlayer_ButtonController(void){
 80252fc:	b580      	push	{r7, lr}
 80252fe:	af00      	add	r7, sp, #0
	if(!MP_isButtonPressed){
 8025300:	4b2f      	ldr	r3, [pc, #188]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 8025302:	781b      	ldrb	r3, [r3, #0]
 8025304:	f083 0301 	eor.w	r3, r3, #1
 8025308:	b2db      	uxtb	r3, r3
 802530a:	2b00      	cmp	r3, #0
 802530c:	d056      	beq.n	80253bc <MusicPlayer_ButtonController+0xc0>
		  if(2==MP_leftBtnListen){
 802530e:	4b2d      	ldr	r3, [pc, #180]	; (80253c4 <MusicPlayer_ButtonController+0xc8>)
 8025310:	781b      	ldrb	r3, [r3, #0]
 8025312:	2b02      	cmp	r3, #2
 8025314:	d105      	bne.n	8025322 <MusicPlayer_ButtonController+0x26>
				MP_isButtonPressed=true;
 8025316:	4b2a      	ldr	r3, [pc, #168]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 8025318:	2201      	movs	r2, #1
 802531a:	701a      	strb	r2, [r3, #0]
			   MP_statu=2;
 802531c:	4b2a      	ldr	r3, [pc, #168]	; (80253c8 <MusicPlayer_ButtonController+0xcc>)
 802531e:	2202      	movs	r2, #2
 8025320:	701a      	strb	r2, [r3, #0]
		  }
		if(2==MP_rightBtnListen){
 8025322:	4b2a      	ldr	r3, [pc, #168]	; (80253cc <MusicPlayer_ButtonController+0xd0>)
 8025324:	781b      	ldrb	r3, [r3, #0]
 8025326:	2b02      	cmp	r3, #2
 8025328:	d10d      	bne.n	8025346 <MusicPlayer_ButtonController+0x4a>
				MP_isButtonPressed=true;
 802532a:	4b25      	ldr	r3, [pc, #148]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 802532c:	2201      	movs	r2, #1
 802532e:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode)MP_buttonMode=false;
 8025330:	4b27      	ldr	r3, [pc, #156]	; (80253d0 <MusicPlayer_ButtonController+0xd4>)
 8025332:	781b      	ldrb	r3, [r3, #0]
 8025334:	2b00      	cmp	r3, #0
 8025336:	d003      	beq.n	8025340 <MusicPlayer_ButtonController+0x44>
 8025338:	4b25      	ldr	r3, [pc, #148]	; (80253d0 <MusicPlayer_ButtonController+0xd4>)
 802533a:	2200      	movs	r2, #0
 802533c:	701a      	strb	r2, [r3, #0]
 802533e:	e002      	b.n	8025346 <MusicPlayer_ButtonController+0x4a>
			else MP_buttonMode=true;
 8025340:	4b23      	ldr	r3, [pc, #140]	; (80253d0 <MusicPlayer_ButtonController+0xd4>)
 8025342:	2201      	movs	r2, #1
 8025344:	701a      	strb	r2, [r3, #0]
				  }
	if(1==MP_leftBtnListen) {
 8025346:	4b1f      	ldr	r3, [pc, #124]	; (80253c4 <MusicPlayer_ButtonController+0xc8>)
 8025348:	781b      	ldrb	r3, [r3, #0]
 802534a:	2b01      	cmp	r3, #1
 802534c:	d119      	bne.n	8025382 <MusicPlayer_ButtonController+0x86>
				MP_isButtonPressed=true;
 802534e:	4b1c      	ldr	r3, [pc, #112]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 8025350:	2201      	movs	r2, #1
 8025352:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode) soundVolumeController(false);
 8025354:	4b1e      	ldr	r3, [pc, #120]	; (80253d0 <MusicPlayer_ButtonController+0xd4>)
 8025356:	781b      	ldrb	r3, [r3, #0]
 8025358:	2b00      	cmp	r3, #0
 802535a:	d003      	beq.n	8025364 <MusicPlayer_ButtonController+0x68>
 802535c:	2000      	movs	r0, #0
 802535e:	f000 f839 	bl	80253d4 <soundVolumeController>
 8025362:	e00e      	b.n	8025382 <MusicPlayer_ButtonController+0x86>
			else{
				if((1==MP_statu) || (2==MP_statu)) MP_statu=0;
 8025364:	4b18      	ldr	r3, [pc, #96]	; (80253c8 <MusicPlayer_ButtonController+0xcc>)
 8025366:	781b      	ldrb	r3, [r3, #0]
 8025368:	2b01      	cmp	r3, #1
 802536a:	d003      	beq.n	8025374 <MusicPlayer_ButtonController+0x78>
 802536c:	4b16      	ldr	r3, [pc, #88]	; (80253c8 <MusicPlayer_ButtonController+0xcc>)
 802536e:	781b      	ldrb	r3, [r3, #0]
 8025370:	2b02      	cmp	r3, #2
 8025372:	d103      	bne.n	802537c <MusicPlayer_ButtonController+0x80>
 8025374:	4b14      	ldr	r3, [pc, #80]	; (80253c8 <MusicPlayer_ButtonController+0xcc>)
 8025376:	2200      	movs	r2, #0
 8025378:	701a      	strb	r2, [r3, #0]
 802537a:	e002      	b.n	8025382 <MusicPlayer_ButtonController+0x86>
				else MP_statu=1;
 802537c:	4b12      	ldr	r3, [pc, #72]	; (80253c8 <MusicPlayer_ButtonController+0xcc>)
 802537e:	2201      	movs	r2, #1
 8025380:	701a      	strb	r2, [r3, #0]
				  }
			  }


	if(1==MP_rightBtnListen) {
 8025382:	4b12      	ldr	r3, [pc, #72]	; (80253cc <MusicPlayer_ButtonController+0xd0>)
 8025384:	781b      	ldrb	r3, [r3, #0]
 8025386:	2b01      	cmp	r3, #1
 8025388:	d109      	bne.n	802539e <MusicPlayer_ButtonController+0xa2>
				MP_isButtonPressed=true;
 802538a:	4b0d      	ldr	r3, [pc, #52]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 802538c:	2201      	movs	r2, #1
 802538e:	701a      	strb	r2, [r3, #0]
				if(MP_buttonMode) soundVolumeController(true);
 8025390:	4b0f      	ldr	r3, [pc, #60]	; (80253d0 <MusicPlayer_ButtonController+0xd4>)
 8025392:	781b      	ldrb	r3, [r3, #0]
 8025394:	2b00      	cmp	r3, #0
 8025396:	d002      	beq.n	802539e <MusicPlayer_ButtonController+0xa2>
 8025398:	2001      	movs	r0, #1
 802539a:	f000 f81b 	bl	80253d4 <soundVolumeController>

			  }
				MP_isButtonPressed=false;
 802539e:	4b08      	ldr	r3, [pc, #32]	; (80253c0 <MusicPlayer_ButtonController+0xc4>)
 80253a0:	2200      	movs	r2, #0
 80253a2:	701a      	strb	r2, [r3, #0]
				MP_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 80253a4:	f004 fe74 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 80253a8:	4603      	mov	r3, r0
 80253aa:	461a      	mov	r2, r3
 80253ac:	4b07      	ldr	r3, [pc, #28]	; (80253cc <MusicPlayer_ButtonController+0xd0>)
 80253ae:	701a      	strb	r2, [r3, #0]
				MP_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 80253b0:	f004 fe96 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 80253b4:	4603      	mov	r3, r0
 80253b6:	461a      	mov	r2, r3
 80253b8:	4b02      	ldr	r3, [pc, #8]	; (80253c4 <MusicPlayer_ButtonController+0xc8>)
 80253ba:	701a      	strb	r2, [r3, #0]
	}

}
 80253bc:	bf00      	nop
 80253be:	bd80      	pop	{r7, pc}
 80253c0:	2001bce8 	.word	0x2001bce8
 80253c4:	2001ace1 	.word	0x2001ace1
 80253c8:	2001bd08 	.word	0x2001bd08
 80253cc:	2001ace0 	.word	0x2001ace0
 80253d0:	2001bcf8 	.word	0x2001bcf8

080253d4 <soundVolumeController>:
/*This function using for plus or minus volume
 * @param vol
 * true -> plus
 * false -> minus */
void soundVolumeController(bool vol){
 80253d4:	b480      	push	{r7}
 80253d6:	b083      	sub	sp, #12
 80253d8:	af00      	add	r7, sp, #0
 80253da:	4603      	mov	r3, r0
 80253dc:	71fb      	strb	r3, [r7, #7]
	if(vol && MP_SoundVal<100) MP_SoundVal+=5;
 80253de:	79fb      	ldrb	r3, [r7, #7]
 80253e0:	2b00      	cmp	r3, #0
 80253e2:	d00a      	beq.n	80253fa <soundVolumeController+0x26>
 80253e4:	4b10      	ldr	r3, [pc, #64]	; (8025428 <soundVolumeController+0x54>)
 80253e6:	781b      	ldrb	r3, [r3, #0]
 80253e8:	2b63      	cmp	r3, #99	; 0x63
 80253ea:	d806      	bhi.n	80253fa <soundVolumeController+0x26>
 80253ec:	4b0e      	ldr	r3, [pc, #56]	; (8025428 <soundVolumeController+0x54>)
 80253ee:	781b      	ldrb	r3, [r3, #0]
 80253f0:	3305      	adds	r3, #5
 80253f2:	b2da      	uxtb	r2, r3
 80253f4:	4b0c      	ldr	r3, [pc, #48]	; (8025428 <soundVolumeController+0x54>)
 80253f6:	701a      	strb	r2, [r3, #0]
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
}
 80253f8:	e00f      	b.n	802541a <soundVolumeController+0x46>
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
 80253fa:	79fb      	ldrb	r3, [r7, #7]
 80253fc:	f083 0301 	eor.w	r3, r3, #1
 8025400:	b2db      	uxtb	r3, r3
 8025402:	2b00      	cmp	r3, #0
 8025404:	d009      	beq.n	802541a <soundVolumeController+0x46>
 8025406:	4b08      	ldr	r3, [pc, #32]	; (8025428 <soundVolumeController+0x54>)
 8025408:	781b      	ldrb	r3, [r3, #0]
 802540a:	2b00      	cmp	r3, #0
 802540c:	d005      	beq.n	802541a <soundVolumeController+0x46>
 802540e:	4b06      	ldr	r3, [pc, #24]	; (8025428 <soundVolumeController+0x54>)
 8025410:	781b      	ldrb	r3, [r3, #0]
 8025412:	3b05      	subs	r3, #5
 8025414:	b2da      	uxtb	r2, r3
 8025416:	4b04      	ldr	r3, [pc, #16]	; (8025428 <soundVolumeController+0x54>)
 8025418:	701a      	strb	r2, [r3, #0]
}
 802541a:	bf00      	nop
 802541c:	370c      	adds	r7, #12
 802541e:	46bd      	mov	sp, r7
 8025420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025424:	4770      	bx	lr
 8025426:	bf00      	nop
 8025428:	2001bd00 	.word	0x2001bd00

0802542c <MusicPlayerImgSet>:
 * 1 -> pause
 * 2 -> stop
 * @param theme using for image backgraud select
 * false -> white
 * true -> black*/
void  MusicPlayerImgSet(uint8_t statu,bool theme){
 802542c:	b580      	push	{r7, lr}
 802542e:	b082      	sub	sp, #8
 8025430:	af00      	add	r7, sp, #0
 8025432:	4603      	mov	r3, r0
 8025434:	460a      	mov	r2, r1
 8025436:	71fb      	strb	r3, [r7, #7]
 8025438:	4613      	mov	r3, r2
 802543a:	71bb      	strb	r3, [r7, #6]

	switch(statu){
 802543c:	79fb      	ldrb	r3, [r7, #7]
 802543e:	2b01      	cmp	r3, #1
 8025440:	d015      	beq.n	802546e <MusicPlayerImgSet+0x42>
 8025442:	2b02      	cmp	r3, #2
 8025444:	d024      	beq.n	8025490 <MusicPlayerImgSet+0x64>
 8025446:	2b00      	cmp	r3, #0
 8025448:	d000      	beq.n	802544c <MusicPlayerImgSet+0x20>
		break;
	case 2:
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
		break;
	default: return;
 802544a:	e032      	b.n	80254b2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&playBlack50x50 );
 802544c:	79bb      	ldrb	r3, [r7, #6]
 802544e:	2b00      	cmp	r3, #0
 8025450:	d006      	beq.n	8025460 <MusicPlayerImgSet+0x34>
 8025452:	4b19      	ldr	r3, [pc, #100]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 8025454:	681b      	ldr	r3, [r3, #0]
 8025456:	4919      	ldr	r1, [pc, #100]	; (80254bc <MusicPlayerImgSet+0x90>)
 8025458:	4618      	mov	r0, r3
 802545a:	f7f7 f80b 	bl	801c474 <lv_img_set_src>
		break;
 802545e:	e028      	b.n	80254b2 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&playWhite50x50 );
 8025460:	4b15      	ldr	r3, [pc, #84]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	4916      	ldr	r1, [pc, #88]	; (80254c0 <MusicPlayerImgSet+0x94>)
 8025466:	4618      	mov	r0, r3
 8025468:	f7f7 f804 	bl	801c474 <lv_img_set_src>
		break;
 802546c:	e021      	b.n	80254b2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&pauseBlack50x50 );
 802546e:	79bb      	ldrb	r3, [r7, #6]
 8025470:	2b00      	cmp	r3, #0
 8025472:	d006      	beq.n	8025482 <MusicPlayerImgSet+0x56>
 8025474:	4b10      	ldr	r3, [pc, #64]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 8025476:	681b      	ldr	r3, [r3, #0]
 8025478:	4912      	ldr	r1, [pc, #72]	; (80254c4 <MusicPlayerImgSet+0x98>)
 802547a:	4618      	mov	r0, r3
 802547c:	f7f6 fffa 	bl	801c474 <lv_img_set_src>
		break;
 8025480:	e017      	b.n	80254b2 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&pauseWhite50x50 );
 8025482:	4b0d      	ldr	r3, [pc, #52]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	4910      	ldr	r1, [pc, #64]	; (80254c8 <MusicPlayerImgSet+0x9c>)
 8025488:	4618      	mov	r0, r3
 802548a:	f7f6 fff3 	bl	801c474 <lv_img_set_src>
		break;
 802548e:	e010      	b.n	80254b2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
 8025490:	79bb      	ldrb	r3, [r7, #6]
 8025492:	2b00      	cmp	r3, #0
 8025494:	d006      	beq.n	80254a4 <MusicPlayerImgSet+0x78>
 8025496:	4b08      	ldr	r3, [pc, #32]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 8025498:	681b      	ldr	r3, [r3, #0]
 802549a:	490c      	ldr	r1, [pc, #48]	; (80254cc <MusicPlayerImgSet+0xa0>)
 802549c:	4618      	mov	r0, r3
 802549e:	f7f6 ffe9 	bl	801c474 <lv_img_set_src>
		break;
 80254a2:	e005      	b.n	80254b0 <MusicPlayerImgSet+0x84>
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
 80254a4:	4b04      	ldr	r3, [pc, #16]	; (80254b8 <MusicPlayerImgSet+0x8c>)
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	4909      	ldr	r1, [pc, #36]	; (80254d0 <MusicPlayerImgSet+0xa4>)
 80254aa:	4618      	mov	r0, r3
 80254ac:	f7f6 ffe2 	bl	801c474 <lv_img_set_src>
		break;
 80254b0:	bf00      	nop
	}
}
 80254b2:	3708      	adds	r7, #8
 80254b4:	46bd      	mov	sp, r7
 80254b6:	bd80      	pop	{r7, pc}
 80254b8:	2001bce4 	.word	0x2001bce4
 80254bc:	08040eb0 	.word	0x08040eb0
 80254c0:	08042244 	.word	0x08042244
 80254c4:	0803e788 	.word	0x0803e788
 80254c8:	0803fb1c 	.word	0x0803fb1c
 80254cc:	08044850 	.word	0x08044850
 80254d0:	08045be4 	.word	0x08045be4

080254d4 <MusicPlayer_TaskControllerSet>:
//Setter Getter Functions
void MusicPlayer_TaskControllerSet(bool active){
 80254d4:	b480      	push	{r7}
 80254d6:	b083      	sub	sp, #12
 80254d8:	af00      	add	r7, sp, #0
 80254da:	4603      	mov	r3, r0
 80254dc:	71fb      	strb	r3, [r7, #7]
	MP_taskController = active;
 80254de:	4a04      	ldr	r2, [pc, #16]	; (80254f0 <MusicPlayer_TaskControllerSet+0x1c>)
 80254e0:	79fb      	ldrb	r3, [r7, #7]
 80254e2:	7013      	strb	r3, [r2, #0]
}
 80254e4:	bf00      	nop
 80254e6:	370c      	adds	r7, #12
 80254e8:	46bd      	mov	sp, r7
 80254ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254ee:	4770      	bx	lr
 80254f0:	2001bcf0 	.word	0x2001bcf0

080254f4 <MusicPlayer_SongActristSet>:
void MusicPlayer_SongActristSet(char * actrist){
 80254f4:	b480      	push	{r7}
 80254f6:	b083      	sub	sp, #12
 80254f8:	af00      	add	r7, sp, #0
 80254fa:	6078      	str	r0, [r7, #4]
	MP_SongActrist = actrist;
 80254fc:	4a04      	ldr	r2, [pc, #16]	; (8025510 <MusicPlayer_SongActristSet+0x1c>)
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	6013      	str	r3, [r2, #0]
}
 8025502:	bf00      	nop
 8025504:	370c      	adds	r7, #12
 8025506:	46bd      	mov	sp, r7
 8025508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802550c:	4770      	bx	lr
 802550e:	bf00      	nop
 8025510:	2001bcf4 	.word	0x2001bcf4

08025514 <MusicPlayer_MP_SongNameSet>:
void MusicPlayer_MP_SongNameSet(char * name){
 8025514:	b480      	push	{r7}
 8025516:	b083      	sub	sp, #12
 8025518:	af00      	add	r7, sp, #0
 802551a:	6078      	str	r0, [r7, #4]
	MP_SongName = name;
 802551c:	4a04      	ldr	r2, [pc, #16]	; (8025530 <MusicPlayer_MP_SongNameSet+0x1c>)
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	6013      	str	r3, [r2, #0]
}
 8025522:	bf00      	nop
 8025524:	370c      	adds	r7, #12
 8025526:	46bd      	mov	sp, r7
 8025528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802552c:	4770      	bx	lr
 802552e:	bf00      	nop
 8025530:	2001bcec 	.word	0x2001bcec

08025534 <MusicPlayer_MP_SoundVAlSet>:
void MusicPlayer_MP_SoundVAlSet(uint8_t volume){
 8025534:	b480      	push	{r7}
 8025536:	b083      	sub	sp, #12
 8025538:	af00      	add	r7, sp, #0
 802553a:	4603      	mov	r3, r0
 802553c:	71fb      	strb	r3, [r7, #7]
	MP_SoundVal = volume;
 802553e:	4a04      	ldr	r2, [pc, #16]	; (8025550 <MusicPlayer_MP_SoundVAlSet+0x1c>)
 8025540:	79fb      	ldrb	r3, [r7, #7]
 8025542:	7013      	strb	r3, [r2, #0]
}
 8025544:	bf00      	nop
 8025546:	370c      	adds	r7, #12
 8025548:	46bd      	mov	sp, r7
 802554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802554e:	4770      	bx	lr
 8025550:	2001bd00 	.word	0x2001bd00

08025554 <MusicPlayer_TaskControllerGet>:
bool MusicPlayer_TaskControllerGet(void){
 8025554:	b480      	push	{r7}
 8025556:	af00      	add	r7, sp, #0
	return MP_taskController;
 8025558:	4b03      	ldr	r3, [pc, #12]	; (8025568 <MusicPlayer_TaskControllerGet+0x14>)
 802555a:	781b      	ldrb	r3, [r3, #0]
}
 802555c:	4618      	mov	r0, r3
 802555e:	46bd      	mov	sp, r7
 8025560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025564:	4770      	bx	lr
 8025566:	bf00      	nop
 8025568:	2001bcf0 	.word	0x2001bcf0

0802556c <MusicPlayer_PlayingStatuSet>:
void MusicPlayer_PlayingStatuSet(uint8_t statu){
 802556c:	b480      	push	{r7}
 802556e:	b083      	sub	sp, #12
 8025570:	af00      	add	r7, sp, #0
 8025572:	4603      	mov	r3, r0
 8025574:	71fb      	strb	r3, [r7, #7]
	MP_statu=statu;
 8025576:	4a04      	ldr	r2, [pc, #16]	; (8025588 <MusicPlayer_PlayingStatuSet+0x1c>)
 8025578:	79fb      	ldrb	r3, [r7, #7]
 802557a:	7013      	strb	r3, [r2, #0]
}
 802557c:	bf00      	nop
 802557e:	370c      	adds	r7, #12
 8025580:	46bd      	mov	sp, r7
 8025582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025586:	4770      	bx	lr
 8025588:	2001bd08 	.word	0x2001bd08

0802558c <MusicPlayer_PlayingStatuGet>:
uint8_t MusicPlayer_PlayingStatuGet(void){
 802558c:	b480      	push	{r7}
 802558e:	af00      	add	r7, sp, #0
	return MP_statu;
 8025590:	4b03      	ldr	r3, [pc, #12]	; (80255a0 <MusicPlayer_PlayingStatuGet+0x14>)
 8025592:	781b      	ldrb	r3, [r3, #0]
}
 8025594:	4618      	mov	r0, r3
 8025596:	46bd      	mov	sp, r7
 8025598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802559c:	4770      	bx	lr
 802559e:	bf00      	nop
 80255a0:	2001bd08 	.word	0x2001bd08

080255a4 <MusicPlayer_MP_SoundVAlGet>:
uint8_t MusicPlayer_MP_SoundVAlGet(void){
 80255a4:	b480      	push	{r7}
 80255a6:	af00      	add	r7, sp, #0
	return MP_statu;
 80255a8:	4b03      	ldr	r3, [pc, #12]	; (80255b8 <MusicPlayer_MP_SoundVAlGet+0x14>)
 80255aa:	781b      	ldrb	r3, [r3, #0]
}
 80255ac:	4618      	mov	r0, r3
 80255ae:	46bd      	mov	sp, r7
 80255b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255b4:	4770      	bx	lr
 80255b6:	bf00      	nop
 80255b8:	2001bd08 	.word	0x2001bd08

080255bc <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80255bc:	b580      	push	{r7, lr}
 80255be:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80255c0:	f7f0 fa90 	bl	8015ae4 <lv_disp_get_default>
 80255c4:	4603      	mov	r3, r0
 80255c6:	4618      	mov	r0, r3
 80255c8:	f7e2 ff58 	bl	800847c <lv_disp_get_scr_act>
 80255cc:	4603      	mov	r3, r0
}
 80255ce:	4618      	mov	r0, r3
 80255d0:	bd80      	pop	{r7, pc}

080255d2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80255d2:	b580      	push	{r7, lr}
 80255d4:	b084      	sub	sp, #16
 80255d6:	af00      	add	r7, sp, #0
 80255d8:	60f8      	str	r0, [r7, #12]
 80255da:	460b      	mov	r3, r1
 80255dc:	607a      	str	r2, [r7, #4]
 80255de:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80255e0:	6879      	ldr	r1, [r7, #4]
 80255e2:	68f8      	ldr	r0, [r7, #12]
 80255e4:	f7e4 fdc1 	bl	800a16a <lv_obj_set_style>
}
 80255e8:	bf00      	nop
 80255ea:	3710      	adds	r7, #16
 80255ec:	46bd      	mov	sp, r7
 80255ee:	bd80      	pop	{r7, pc}

080255f0 <lv_cb_set_checked>:
 * Set the state of the check box
 * @param cb pointer to a check box object
 * @param checked true: make the check box checked; false: make it unchecked
 */
static inline void lv_cb_set_checked(lv_obj_t * cb, bool checked)
{
 80255f0:	b580      	push	{r7, lr}
 80255f2:	b082      	sub	sp, #8
 80255f4:	af00      	add	r7, sp, #0
 80255f6:	6078      	str	r0, [r7, #4]
 80255f8:	460b      	mov	r3, r1
 80255fa:	70fb      	strb	r3, [r7, #3]
    lv_btn_set_state(cb, checked ? LV_BTN_STATE_TGL_REL : LV_BTN_STATE_REL);
 80255fc:	78fb      	ldrb	r3, [r7, #3]
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d001      	beq.n	8025606 <lv_cb_set_checked+0x16>
 8025602:	2302      	movs	r3, #2
 8025604:	e000      	b.n	8025608 <lv_cb_set_checked+0x18>
 8025606:	2300      	movs	r3, #0
 8025608:	4619      	mov	r1, r3
 802560a:	6878      	ldr	r0, [r7, #4]
 802560c:	f7f3 fc98 	bl	8018f40 <lv_btn_set_state>
}
 8025610:	bf00      	nop
 8025612:	3708      	adds	r7, #8
 8025614:	46bd      	mov	sp, r7
 8025616:	bd80      	pop	{r7, pc}

08025618 <tos_NotificationScreen_Init>:
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node);
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected);
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex);
void NotificationScreen_NotificationBox(char * appNotification);
/*This function using for initialization notification screen*/
void tos_NotificationScreen_Init(bool theme){
 8025618:	b580      	push	{r7, lr}
 802561a:	b082      	sub	sp, #8
 802561c:	af00      	add	r7, sp, #0
 802561e:	4603      	mov	r3, r0
 8025620:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8025622:	f7ff ffcb 	bl	80255bc <lv_scr_act>
 8025626:	4603      	mov	r3, r0
 8025628:	4618      	mov	r0, r3
 802562a:	f7e3 fe87 	bl	800933c <lv_obj_clean>
	lv_style_copy(&style_screen, &lv_style_plain);
 802562e:	4921      	ldr	r1, [pc, #132]	; (80256b4 <tos_NotificationScreen_Init+0x9c>)
 8025630:	4821      	ldr	r0, [pc, #132]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 8025632:	f7e6 fb39 	bl	800bca8 <lv_style_copy>
	if(theme){
 8025636:	79fb      	ldrb	r3, [r7, #7]
 8025638:	2b00      	cmp	r3, #0
 802563a:	d006      	beq.n	802564a <tos_NotificationScreen_Init+0x32>
		style_screen.body.main_color = LV_COLOR_BLACK;
 802563c:	4b1e      	ldr	r3, [pc, #120]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 802563e:	2200      	movs	r2, #0
 8025640:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8025642:	4b1d      	ldr	r3, [pc, #116]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 8025644:	2200      	movs	r2, #0
 8025646:	809a      	strh	r2, [r3, #4]
 8025648:	e007      	b.n	802565a <tos_NotificationScreen_Init+0x42>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802564a:	4a1b      	ldr	r2, [pc, #108]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 802564c:	4b1b      	ldr	r3, [pc, #108]	; (80256bc <tos_NotificationScreen_Init+0xa4>)
 802564e:	881b      	ldrh	r3, [r3, #0]
 8025650:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8025652:	4a19      	ldr	r2, [pc, #100]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 8025654:	4b19      	ldr	r3, [pc, #100]	; (80256bc <tos_NotificationScreen_Init+0xa4>)
 8025656:	881b      	ldrh	r3, [r3, #0]
 8025658:	8093      	strh	r3, [r2, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 802565a:	f7ff ffaf 	bl	80255bc <lv_scr_act>
 802565e:	4603      	mov	r3, r0
 8025660:	4915      	ldr	r1, [pc, #84]	; (80256b8 <tos_NotificationScreen_Init+0xa0>)
 8025662:	4618      	mov	r0, r3
 8025664:	f7e4 fd81 	bl	800a16a <lv_obj_set_style>
    NotificationScreen_ItemsStyleInit(theme);
 8025668:	79fb      	ldrb	r3, [r7, #7]
 802566a:	4618      	mov	r0, r3
 802566c:	f000 fa5e 	bl	8025b2c <NotificationScreen_ItemsStyleInit>
    myPos=0;
 8025670:	4b13      	ldr	r3, [pc, #76]	; (80256c0 <tos_NotificationScreen_Init+0xa8>)
 8025672:	2200      	movs	r2, #0
 8025674:	701a      	strb	r2, [r3, #0]
    isOpenNotificationBox=false;
 8025676:	4b13      	ldr	r3, [pc, #76]	; (80256c4 <tos_NotificationScreen_Init+0xac>)
 8025678:	2200      	movs	r2, #0
 802567a:	701a      	strb	r2, [r3, #0]
    NS_isBtnPressed=false;
 802567c:	4b12      	ldr	r3, [pc, #72]	; (80256c8 <tos_NotificationScreen_Init+0xb0>)
 802567e:	2200      	movs	r2, #0
 8025680:	701a      	strb	r2, [r3, #0]
    if(NS_Notroot!=NULL && NS_Notnode!=NULL){
 8025682:	4b12      	ldr	r3, [pc, #72]	; (80256cc <tos_NotificationScreen_Init+0xb4>)
 8025684:	681b      	ldr	r3, [r3, #0]
 8025686:	2b00      	cmp	r3, #0
 8025688:	d00d      	beq.n	80256a6 <tos_NotificationScreen_Init+0x8e>
 802568a:	4b11      	ldr	r3, [pc, #68]	; (80256d0 <tos_NotificationScreen_Init+0xb8>)
 802568c:	681b      	ldr	r3, [r3, #0]
 802568e:	2b00      	cmp	r3, #0
 8025690:	d009      	beq.n	80256a6 <tos_NotificationScreen_Init+0x8e>
    	NotificationScreen_SetOnScreenItems(NS_Notroot,NS_Notnode,myPos);
 8025692:	4b0e      	ldr	r3, [pc, #56]	; (80256cc <tos_NotificationScreen_Init+0xb4>)
 8025694:	6818      	ldr	r0, [r3, #0]
 8025696:	4b0e      	ldr	r3, [pc, #56]	; (80256d0 <tos_NotificationScreen_Init+0xb8>)
 8025698:	6819      	ldr	r1, [r3, #0]
 802569a:	4b09      	ldr	r3, [pc, #36]	; (80256c0 <tos_NotificationScreen_Init+0xa8>)
 802569c:	f993 3000 	ldrsb.w	r3, [r3]
 80256a0:	461a      	mov	r2, r3
 80256a2:	f000 f9e3 	bl	8025a6c <NotificationScreen_SetOnScreenItems>
    }
    NS_taskController=true;
 80256a6:	4b0b      	ldr	r3, [pc, #44]	; (80256d4 <tos_NotificationScreen_Init+0xbc>)
 80256a8:	2201      	movs	r2, #1
 80256aa:	701a      	strb	r2, [r3, #0]

}
 80256ac:	bf00      	nop
 80256ae:	3708      	adds	r7, #8
 80256b0:	46bd      	mov	sp, r7
 80256b2:	bd80      	pop	{r7, pc}
 80256b4:	2001ba40 	.word	0x2001ba40
 80256b8:	2001ad5c 	.word	0x2001ad5c
 80256bc:	0802d660 	.word	0x0802d660
 80256c0:	2001bd3c 	.word	0x2001bd3c
 80256c4:	2001bd28 	.word	0x2001bd28
 80256c8:	2001bd18 	.word	0x2001bd18
 80256cc:	2001bd20 	.word	0x2001bd20
 80256d0:	2001bd14 	.word	0x2001bd14
 80256d4:	2001bd10 	.word	0x2001bd10

080256d8 <NotificationScreen_ButtonController>:
/*This function using for control to buttons*/
void NotificationScreen_ButtonController(void){
 80256d8:	b590      	push	{r4, r7, lr}
 80256da:	b083      	sub	sp, #12
 80256dc:	af00      	add	r7, sp, #0
	if(!NS_isBtnPressed){
 80256de:	4b60      	ldr	r3, [pc, #384]	; (8025860 <NotificationScreen_ButtonController+0x188>)
 80256e0:	781b      	ldrb	r3, [r3, #0]
 80256e2:	f083 0301 	eor.w	r3, r3, #1
 80256e6:	b2db      	uxtb	r3, r3
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	f000 80b4 	beq.w	8025856 <NotificationScreen_ButtonController+0x17e>
		NS_isBtnPressed=true;
 80256ee:	4b5c      	ldr	r3, [pc, #368]	; (8025860 <NotificationScreen_ButtonController+0x188>)
 80256f0:	2201      	movs	r2, #1
 80256f2:	701a      	strb	r2, [r3, #0]
		  if(2==NS_rightBtnListen){
 80256f4:	4b5b      	ldr	r3, [pc, #364]	; (8025864 <NotificationScreen_ButtonController+0x18c>)
 80256f6:	781b      	ldrb	r3, [r3, #0]
 80256f8:	2b02      	cmp	r3, #2
 80256fa:	d118      	bne.n	802572e <NotificationScreen_ButtonController+0x56>
			  //open
			  if(!isOpenNotificationBox){
 80256fc:	4b5a      	ldr	r3, [pc, #360]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 80256fe:	781b      	ldrb	r3, [r3, #0]
 8025700:	f083 0301 	eor.w	r3, r3, #1
 8025704:	b2db      	uxtb	r3, r3
 8025706:	2b00      	cmp	r3, #0
 8025708:	d011      	beq.n	802572e <NotificationScreen_ButtonController+0x56>
				  isOpenNotificationBox=true;
 802570a:	4b57      	ldr	r3, [pc, #348]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 802570c:	2201      	movs	r2, #1
 802570e:	701a      	strb	r2, [r3, #0]
				  char * tmp=tos_NotificationGetItem(NS_Notroot,selectedItem)->appNot;
 8025710:	4b56      	ldr	r3, [pc, #344]	; (802586c <NotificationScreen_ButtonController+0x194>)
 8025712:	681a      	ldr	r2, [r3, #0]
 8025714:	4b56      	ldr	r3, [pc, #344]	; (8025870 <NotificationScreen_ButtonController+0x198>)
 8025716:	781b      	ldrb	r3, [r3, #0]
 8025718:	b29b      	uxth	r3, r3
 802571a:	4619      	mov	r1, r3
 802571c:	4610      	mov	r0, r2
 802571e:	f005 f8cc 	bl	802a8ba <tos_NotificationGetItem>
 8025722:	4603      	mov	r3, r0
 8025724:	3314      	adds	r3, #20
 8025726:	607b      	str	r3, [r7, #4]
				    NotificationScreen_NotificationBox(tmp);
 8025728:	6878      	ldr	r0, [r7, #4]
 802572a:	f000 f94d 	bl	80259c8 <NotificationScreen_NotificationBox>
			  }
		  }
		  if(1==NS_rightBtnListen) {
 802572e:	4b4d      	ldr	r3, [pc, #308]	; (8025864 <NotificationScreen_ButtonController+0x18c>)
 8025730:	781b      	ldrb	r3, [r3, #0]
 8025732:	2b01      	cmp	r3, #1
 8025734:	d14d      	bne.n	80257d2 <NotificationScreen_ButtonController+0xfa>
		  			  if(!isOpenNotificationBox){
 8025736:	4b4c      	ldr	r3, [pc, #304]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 8025738:	781b      	ldrb	r3, [r3, #0]
 802573a:	f083 0301 	eor.w	r3, r3, #1
 802573e:	b2db      	uxtb	r3, r3
 8025740:	2b00      	cmp	r3, #0
 8025742:	d026      	beq.n	8025792 <NotificationScreen_ButtonController+0xba>
		  			  //minus
		  				lv_obj_clean(lv_scr_act());
 8025744:	f7ff ff3a 	bl	80255bc <lv_scr_act>
 8025748:	4603      	mov	r3, r0
 802574a:	4618      	mov	r0, r3
 802574c:	f7e3 fdf6 	bl	800933c <lv_obj_clean>
		  				if(myPos>-NotificationScreen_GetMaxScroll(NS_Notnode))myPos--;
 8025750:	4b48      	ldr	r3, [pc, #288]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 8025752:	f993 3000 	ldrsb.w	r3, [r3]
 8025756:	461c      	mov	r4, r3
 8025758:	4b47      	ldr	r3, [pc, #284]	; (8025878 <NotificationScreen_ButtonController+0x1a0>)
 802575a:	681b      	ldr	r3, [r3, #0]
 802575c:	4618      	mov	r0, r3
 802575e:	f000 faa5 	bl	8025cac <NotificationScreen_GetMaxScroll>
 8025762:	4603      	mov	r3, r0
 8025764:	425b      	negs	r3, r3
 8025766:	429c      	cmp	r4, r3
 8025768:	dd08      	ble.n	802577c <NotificationScreen_ButtonController+0xa4>
 802576a:	4b42      	ldr	r3, [pc, #264]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 802576c:	f993 3000 	ldrsb.w	r3, [r3]
 8025770:	b2db      	uxtb	r3, r3
 8025772:	3b01      	subs	r3, #1
 8025774:	b2db      	uxtb	r3, r3
 8025776:	b25a      	sxtb	r2, r3
 8025778:	4b3e      	ldr	r3, [pc, #248]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 802577a:	701a      	strb	r2, [r3, #0]
		  				NotificationScreen_SetOnScreenItems(NS_Notroot,NS_Notnode,myPos);
 802577c:	4b3b      	ldr	r3, [pc, #236]	; (802586c <NotificationScreen_ButtonController+0x194>)
 802577e:	6818      	ldr	r0, [r3, #0]
 8025780:	4b3d      	ldr	r3, [pc, #244]	; (8025878 <NotificationScreen_ButtonController+0x1a0>)
 8025782:	6819      	ldr	r1, [r3, #0]
 8025784:	4b3b      	ldr	r3, [pc, #236]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 8025786:	f993 3000 	ldrsb.w	r3, [r3]
 802578a:	461a      	mov	r2, r3
 802578c:	f000 f96e 	bl	8025a6c <NotificationScreen_SetOnScreenItems>
 8025790:	e01f      	b.n	80257d2 <NotificationScreen_ButtonController+0xfa>
		  			  }else {isOpenNotificationBox=false;
 8025792:	4b35      	ldr	r3, [pc, #212]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 8025794:	2200      	movs	r2, #0
 8025796:	701a      	strb	r2, [r3, #0]
		  			  //remove
		  				lv_obj_clean(lv_scr_act());
 8025798:	f7ff ff10 	bl	80255bc <lv_scr_act>
 802579c:	4603      	mov	r3, r0
 802579e:	4618      	mov	r0, r3
 80257a0:	f7e3 fdcc 	bl	800933c <lv_obj_clean>
		  				notBox = NULL;
 80257a4:	4b35      	ldr	r3, [pc, #212]	; (802587c <NotificationScreen_ButtonController+0x1a4>)
 80257a6:	2200      	movs	r2, #0
 80257a8:	601a      	str	r2, [r3, #0]
		  			    tos_NotificationDelItem(NS_Notroot,NS_Notnode,selectedItem);
 80257aa:	4b30      	ldr	r3, [pc, #192]	; (802586c <NotificationScreen_ButtonController+0x194>)
 80257ac:	6818      	ldr	r0, [r3, #0]
 80257ae:	4b32      	ldr	r3, [pc, #200]	; (8025878 <NotificationScreen_ButtonController+0x1a0>)
 80257b0:	6819      	ldr	r1, [r3, #0]
 80257b2:	4b2f      	ldr	r3, [pc, #188]	; (8025870 <NotificationScreen_ButtonController+0x198>)
 80257b4:	781b      	ldrb	r3, [r3, #0]
 80257b6:	b29b      	uxth	r3, r3
 80257b8:	461a      	mov	r2, r3
 80257ba:	f005 f8d5 	bl	802a968 <tos_NotificationDelItem>
		  				NotificationScreen_SetOnScreenItems(NS_Notroot,NS_Notnode,myPos);
 80257be:	4b2b      	ldr	r3, [pc, #172]	; (802586c <NotificationScreen_ButtonController+0x194>)
 80257c0:	6818      	ldr	r0, [r3, #0]
 80257c2:	4b2d      	ldr	r3, [pc, #180]	; (8025878 <NotificationScreen_ButtonController+0x1a0>)
 80257c4:	6819      	ldr	r1, [r3, #0]
 80257c6:	4b2b      	ldr	r3, [pc, #172]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 80257c8:	f993 3000 	ldrsb.w	r3, [r3]
 80257cc:	461a      	mov	r2, r3
 80257ce:	f000 f94d 	bl	8025a6c <NotificationScreen_SetOnScreenItems>

		  			  }
		  		  }
		  if(1==NS_leftBtnListen) {
 80257d2:	4b2b      	ldr	r3, [pc, #172]	; (8025880 <NotificationScreen_ButtonController+0x1a8>)
 80257d4:	781b      	ldrb	r3, [r3, #0]
 80257d6:	2b01      	cmp	r3, #1
 80257d8:	d12e      	bne.n	8025838 <NotificationScreen_ButtonController+0x160>
			  //plus
			  if(!isOpenNotificationBox){
 80257da:	4b23      	ldr	r3, [pc, #140]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 80257dc:	781b      	ldrb	r3, [r3, #0]
 80257de:	f083 0301 	eor.w	r3, r3, #1
 80257e2:	b2db      	uxtb	r3, r3
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d01e      	beq.n	8025826 <NotificationScreen_ButtonController+0x14e>
				lv_obj_clean(lv_scr_act());
 80257e8:	f7ff fee8 	bl	80255bc <lv_scr_act>
 80257ec:	4603      	mov	r3, r0
 80257ee:	4618      	mov	r0, r3
 80257f0:	f7e3 fda4 	bl	800933c <lv_obj_clean>
				if(myPos<0)myPos++;
 80257f4:	4b1f      	ldr	r3, [pc, #124]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 80257f6:	f993 3000 	ldrsb.w	r3, [r3]
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	da08      	bge.n	8025810 <NotificationScreen_ButtonController+0x138>
 80257fe:	4b1d      	ldr	r3, [pc, #116]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 8025800:	f993 3000 	ldrsb.w	r3, [r3]
 8025804:	b2db      	uxtb	r3, r3
 8025806:	3301      	adds	r3, #1
 8025808:	b2db      	uxtb	r3, r3
 802580a:	b25a      	sxtb	r2, r3
 802580c:	4b19      	ldr	r3, [pc, #100]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 802580e:	701a      	strb	r2, [r3, #0]
				NotificationScreen_SetOnScreenItems(NS_Notroot,NS_Notnode,myPos);
 8025810:	4b16      	ldr	r3, [pc, #88]	; (802586c <NotificationScreen_ButtonController+0x194>)
 8025812:	6818      	ldr	r0, [r3, #0]
 8025814:	4b18      	ldr	r3, [pc, #96]	; (8025878 <NotificationScreen_ButtonController+0x1a0>)
 8025816:	6819      	ldr	r1, [r3, #0]
 8025818:	4b16      	ldr	r3, [pc, #88]	; (8025874 <NotificationScreen_ButtonController+0x19c>)
 802581a:	f993 3000 	ldrsb.w	r3, [r3]
 802581e:	461a      	mov	r2, r3
 8025820:	f000 f924 	bl	8025a6c <NotificationScreen_SetOnScreenItems>
 8025824:	e008      	b.n	8025838 <NotificationScreen_ButtonController+0x160>
			  }else{isOpenNotificationBox=false;
 8025826:	4b10      	ldr	r3, [pc, #64]	; (8025868 <NotificationScreen_ButtonController+0x190>)
 8025828:	2200      	movs	r2, #0
 802582a:	701a      	strb	r2, [r3, #0]
				  lv_mbox_start_auto_close(notBox,0);
 802582c:	4b13      	ldr	r3, [pc, #76]	; (802587c <NotificationScreen_ButtonController+0x1a4>)
 802582e:	681b      	ldr	r3, [r3, #0]
 8025830:	2100      	movs	r1, #0
 8025832:	4618      	mov	r0, r3
 8025834:	f7f9 f8b2 	bl	801e99c <lv_mbox_start_auto_close>
			  }
		  }
		  NS_isBtnPressed=false;
 8025838:	4b09      	ldr	r3, [pc, #36]	; (8025860 <NotificationScreen_ButtonController+0x188>)
 802583a:	2200      	movs	r2, #0
 802583c:	701a      	strb	r2, [r3, #0]
		  NS_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 802583e:	f004 fc27 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 8025842:	4603      	mov	r3, r0
 8025844:	461a      	mov	r2, r3
 8025846:	4b07      	ldr	r3, [pc, #28]	; (8025864 <NotificationScreen_ButtonController+0x18c>)
 8025848:	701a      	strb	r2, [r3, #0]
		  NS_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 802584a:	f004 fc49 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 802584e:	4603      	mov	r3, r0
 8025850:	461a      	mov	r2, r3
 8025852:	4b0b      	ldr	r3, [pc, #44]	; (8025880 <NotificationScreen_ButtonController+0x1a8>)
 8025854:	701a      	strb	r2, [r3, #0]

	}
}
 8025856:	bf00      	nop
 8025858:	370c      	adds	r7, #12
 802585a:	46bd      	mov	sp, r7
 802585c:	bd90      	pop	{r4, r7, pc}
 802585e:	bf00      	nop
 8025860:	2001bd18 	.word	0x2001bd18
 8025864:	2001aec4 	.word	0x2001aec4
 8025868:	2001bd28 	.word	0x2001bd28
 802586c:	2001bd20 	.word	0x2001bd20
 8025870:	2001bd29 	.word	0x2001bd29
 8025874:	2001bd3c 	.word	0x2001bd3c
 8025878:	2001bd14 	.word	0x2001bd14
 802587c:	2001bd1c 	.word	0x2001bd1c
 8025880:	2001aec5 	.word	0x2001aec5

08025884 <NotificationScreen_Items>:
/*This function using for create notification items
 * @param appName using for get app name
 * @param appNotification for get app notification text
 * @param pos set item position
 * @param isSelected get statu (is first item on screen?) */
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected){
 8025884:	b580      	push	{r7, lr}
 8025886:	b08a      	sub	sp, #40	; 0x28
 8025888:	af02      	add	r7, sp, #8
 802588a:	60f8      	str	r0, [r7, #12]
 802588c:	60b9      	str	r1, [r7, #8]
 802588e:	607a      	str	r2, [r7, #4]
 8025890:	70fb      	strb	r3, [r7, #3]
	  lv_obj_t * itemCanvas = lv_page_create(lv_scr_act(), NULL);
 8025892:	f7ff fe93 	bl	80255bc <lv_scr_act>
 8025896:	4603      	mov	r3, r0
 8025898:	2100      	movs	r1, #0
 802589a:	4618      	mov	r0, r3
 802589c:	f7f9 fbb0 	bl	801f000 <lv_page_create>
 80258a0:	61f8      	str	r0, [r7, #28]
	  lv_obj_set_size(itemCanvas, 200, 50);
 80258a2:	2232      	movs	r2, #50	; 0x32
 80258a4:	21c8      	movs	r1, #200	; 0xc8
 80258a6:	69f8      	ldr	r0, [r7, #28]
 80258a8:	f7e3 ff17 	bl	80096da <lv_obj_set_size>
	  lv_page_set_sb_mode(itemCanvas,LV_SB_MODE_OFF);
 80258ac:	2100      	movs	r1, #0
 80258ae:	69f8      	ldr	r0, [r7, #28]
 80258b0:	f7f9 fd18 	bl	801f2e4 <lv_page_set_sb_mode>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_BG, &bg_style);
 80258b4:	4a3b      	ldr	r2, [pc, #236]	; (80259a4 <NotificationScreen_Items+0x120>)
 80258b6:	2100      	movs	r1, #0
 80258b8:	69f8      	ldr	r0, [r7, #28]
 80258ba:	f7f9 fd73 	bl	801f3a4 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SB, &sb_style);
 80258be:	4a3a      	ldr	r2, [pc, #232]	; (80259a8 <NotificationScreen_Items+0x124>)
 80258c0:	2102      	movs	r1, #2
 80258c2:	69f8      	ldr	r0, [r7, #28]
 80258c4:	f7f9 fd6e 	bl	801f3a4 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SCRL, &scrl_style);
 80258c8:	4a38      	ldr	r2, [pc, #224]	; (80259ac <NotificationScreen_Items+0x128>)
 80258ca:	2101      	movs	r1, #1
 80258cc:	69f8      	ldr	r0, [r7, #28]
 80258ce:	f7f9 fd69 	bl	801f3a4 <lv_page_set_style>
	  lv_obj_align(itemCanvas, NULL, LV_ALIGN_CENTER, pos.x, pos.y);
 80258d2:	88bb      	ldrh	r3, [r7, #4]
 80258d4:	b21a      	sxth	r2, r3
 80258d6:	88fb      	ldrh	r3, [r7, #6]
 80258d8:	b21b      	sxth	r3, r3
 80258da:	9300      	str	r3, [sp, #0]
 80258dc:	4613      	mov	r3, r2
 80258de:	2200      	movs	r2, #0
 80258e0:	2100      	movs	r1, #0
 80258e2:	69f8      	ldr	r0, [r7, #28]
 80258e4:	f7e3 ff9c 	bl	8009820 <lv_obj_align>

	  if(strlen(appName)>=12)  {
 80258e8:	68f8      	ldr	r0, [r7, #12]
 80258ea:	f7da fc7b 	bl	80001e4 <strlen>
 80258ee:	4603      	mov	r3, r0
 80258f0:	2b0b      	cmp	r3, #11
 80258f2:	d906      	bls.n	8025902 <NotificationScreen_Items+0x7e>
		snprintf(NS_buffer,14, "%.9s ...",appName);
 80258f4:	68fb      	ldr	r3, [r7, #12]
 80258f6:	4a2e      	ldr	r2, [pc, #184]	; (80259b0 <NotificationScreen_Items+0x12c>)
 80258f8:	210e      	movs	r1, #14
 80258fa:	482e      	ldr	r0, [pc, #184]	; (80259b4 <NotificationScreen_Items+0x130>)
 80258fc:	f005 fc54 	bl	802b1a8 <sniprintf>
 8025900:	e005      	b.n	802590e <NotificationScreen_Items+0x8a>
	  }else snprintf(NS_buffer,14, "%s",appName);
 8025902:	68fb      	ldr	r3, [r7, #12]
 8025904:	4a2c      	ldr	r2, [pc, #176]	; (80259b8 <NotificationScreen_Items+0x134>)
 8025906:	210e      	movs	r1, #14
 8025908:	482a      	ldr	r0, [pc, #168]	; (80259b4 <NotificationScreen_Items+0x130>)
 802590a:	f005 fc4d 	bl	802b1a8 <sniprintf>

	  lv_obj_t * appNameLbl = lv_label_create(itemCanvas, NULL);
 802590e:	2100      	movs	r1, #0
 8025910:	69f8      	ldr	r0, [r7, #28]
 8025912:	f7f7 f89d 	bl	801ca50 <lv_label_create>
 8025916:	61b8      	str	r0, [r7, #24]
	  lv_obj_set_width(appNameLbl, 50);
 8025918:	2132      	movs	r1, #50	; 0x32
 802591a:	69b8      	ldr	r0, [r7, #24]
 802591c:	f7e3 ff56 	bl	80097cc <lv_obj_set_width>
	  lv_label_set_style(appNameLbl, LV_LABEL_STYLE_MAIN, &appName_Style);
 8025920:	4a26      	ldr	r2, [pc, #152]	; (80259bc <NotificationScreen_Items+0x138>)
 8025922:	2100      	movs	r1, #0
 8025924:	69b8      	ldr	r0, [r7, #24]
 8025926:	f7ff fe54 	bl	80255d2 <lv_label_set_style>
	  lv_label_set_text(appNameLbl, NS_buffer);
 802592a:	4922      	ldr	r1, [pc, #136]	; (80259b4 <NotificationScreen_Items+0x130>)
 802592c:	69b8      	ldr	r0, [r7, #24]
 802592e:	f7f7 f9c1 	bl	801ccb4 <lv_label_set_text>
	  lv_obj_align(appNameLbl, itemCanvas, LV_ALIGN_IN_TOP_LEFT, 20, 0);
 8025932:	2300      	movs	r3, #0
 8025934:	9300      	str	r3, [sp, #0]
 8025936:	2314      	movs	r3, #20
 8025938:	2201      	movs	r2, #1
 802593a:	69f9      	ldr	r1, [r7, #28]
 802593c:	69b8      	ldr	r0, [r7, #24]
 802593e:	f7e3 ff6f 	bl	8009820 <lv_obj_align>

	  lv_obj_t * appNotLbl = lv_label_create(itemCanvas, NULL);
 8025942:	2100      	movs	r1, #0
 8025944:	69f8      	ldr	r0, [r7, #28]
 8025946:	f7f7 f883 	bl	801ca50 <lv_label_create>
 802594a:	6178      	str	r0, [r7, #20]
	  lv_label_set_text(appNotLbl, appNotification);
 802594c:	68b9      	ldr	r1, [r7, #8]
 802594e:	6978      	ldr	r0, [r7, #20]
 8025950:	f7f7 f9b0 	bl	801ccb4 <lv_label_set_text>
	  lv_label_set_style(appNotLbl, LV_LABEL_STYLE_MAIN, &notification_Style);
 8025954:	4a1a      	ldr	r2, [pc, #104]	; (80259c0 <NotificationScreen_Items+0x13c>)
 8025956:	2100      	movs	r1, #0
 8025958:	6978      	ldr	r0, [r7, #20]
 802595a:	f7ff fe3a 	bl	80255d2 <lv_label_set_style>
	  lv_obj_align(appNotLbl, itemCanvas, LV_ALIGN_IN_BOTTOM_LEFT, 20, 0);
 802595e:	2300      	movs	r3, #0
 8025960:	9300      	str	r3, [sp, #0]
 8025962:	2314      	movs	r3, #20
 8025964:	2204      	movs	r2, #4
 8025966:	69f9      	ldr	r1, [r7, #28]
 8025968:	6978      	ldr	r0, [r7, #20]
 802596a:	f7e3 ff59 	bl	8009820 <lv_obj_align>

	  lv_obj_t * isSelettedItem = lv_cb_create(itemCanvas, NULL);
 802596e:	2100      	movs	r1, #0
 8025970:	69f8      	ldr	r0, [r7, #28]
 8025972:	f7f5 f9d3 	bl	801ad1c <lv_cb_create>
 8025976:	6138      	str	r0, [r7, #16]
	  lv_obj_align(isSelettedItem, itemCanvas, LV_ALIGN_IN_RIGHT_MID, 80, 0);
 8025978:	2300      	movs	r3, #0
 802597a:	9300      	str	r3, [sp, #0]
 802597c:	2350      	movs	r3, #80	; 0x50
 802597e:	2208      	movs	r2, #8
 8025980:	69f9      	ldr	r1, [r7, #28]
 8025982:	6938      	ldr	r0, [r7, #16]
 8025984:	f7e3 ff4c 	bl	8009820 <lv_obj_align>
	  lv_cb_set_checked(isSelettedItem,isSelected);
 8025988:	78fb      	ldrb	r3, [r7, #3]
 802598a:	4619      	mov	r1, r3
 802598c:	6938      	ldr	r0, [r7, #16]
 802598e:	f7ff fe2f 	bl	80255f0 <lv_cb_set_checked>
	  lv_cb_set_text(isSelettedItem,"");
 8025992:	490c      	ldr	r1, [pc, #48]	; (80259c4 <NotificationScreen_Items+0x140>)
 8025994:	6938      	ldr	r0, [r7, #16]
 8025996:	f7f5 fab3 	bl	801af00 <lv_cb_set_text>
}
 802599a:	bf00      	nop
 802599c:	3720      	adds	r7, #32
 802599e:	46bd      	mov	sp, r7
 80259a0:	bd80      	pop	{r7, pc}
 80259a2:	bf00      	nop
 80259a4:	2001add4 	.word	0x2001add4
 80259a8:	2001ad98 	.word	0x2001ad98
 80259ac:	2001ae10 	.word	0x2001ae10
 80259b0:	0802d664 	.word	0x0802d664
 80259b4:	2001bd2c 	.word	0x2001bd2c
 80259b8:	0802d670 	.word	0x0802d670
 80259bc:	2001ae4c 	.word	0x2001ae4c
 80259c0:	2001ae88 	.word	0x2001ae88
 80259c4:	0802d674 	.word	0x0802d674

080259c8 <NotificationScreen_NotificationBox>:
/*This function using for notification box*/
void NotificationScreen_NotificationBox(char * appNotification){
 80259c8:	b580      	push	{r7, lr}
 80259ca:	b084      	sub	sp, #16
 80259cc:	af02      	add	r7, sp, #8
 80259ce:	6078      	str	r0, [r7, #4]
    static const char * btns[] ={"Okey", "Delete", ""};

    notBox = lv_mbox_create(lv_scr_act(), NULL);
 80259d0:	f7ff fdf4 	bl	80255bc <lv_scr_act>
 80259d4:	4603      	mov	r3, r0
 80259d6:	2100      	movs	r1, #0
 80259d8:	4618      	mov	r0, r3
 80259da:	f7f8 fec5 	bl	801e768 <lv_mbox_create>
 80259de:	4602      	mov	r2, r0
 80259e0:	4b1d      	ldr	r3, [pc, #116]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 80259e2:	601a      	str	r2, [r3, #0]
    lv_mbox_add_btns(notBox, btns);
 80259e4:	4b1c      	ldr	r3, [pc, #112]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 80259e6:	681b      	ldr	r3, [r3, #0]
 80259e8:	491c      	ldr	r1, [pc, #112]	; (8025a5c <NotificationScreen_NotificationBox+0x94>)
 80259ea:	4618      	mov	r0, r3
 80259ec:	f7f8 ff6a 	bl	801e8c4 <lv_mbox_add_btns>
    lv_mbox_set_text(notBox, appNotification);
 80259f0:	4b19      	ldr	r3, [pc, #100]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 80259f2:	681b      	ldr	r3, [r3, #0]
 80259f4:	6879      	ldr	r1, [r7, #4]
 80259f6:	4618      	mov	r0, r3
 80259f8:	f7f8 ffba 	bl	801e970 <lv_mbox_set_text>
    lv_obj_set_width(notBox, 200);
 80259fc:	4b16      	ldr	r3, [pc, #88]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 80259fe:	681b      	ldr	r3, [r3, #0]
 8025a00:	21c8      	movs	r1, #200	; 0xc8
 8025a02:	4618      	mov	r0, r3
 8025a04:	f7e3 fee2 	bl	80097cc <lv_obj_set_width>
    lv_obj_set_height(notBox, 150);
 8025a08:	4b13      	ldr	r3, [pc, #76]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 8025a0a:	681b      	ldr	r3, [r3, #0]
 8025a0c:	2196      	movs	r1, #150	; 0x96
 8025a0e:	4618      	mov	r0, r3
 8025a10:	f7e3 fef1 	bl	80097f6 <lv_obj_set_height>
    lv_obj_align(notBox, NULL, LV_ALIGN_CENTER, 0, 0);
 8025a14:	4b10      	ldr	r3, [pc, #64]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 8025a16:	6818      	ldr	r0, [r3, #0]
 8025a18:	2300      	movs	r3, #0
 8025a1a:	9300      	str	r3, [sp, #0]
 8025a1c:	2300      	movs	r3, #0
 8025a1e:	2200      	movs	r2, #0
 8025a20:	2100      	movs	r1, #0
 8025a22:	f7e3 fefd 	bl	8009820 <lv_obj_align>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BG,  &sb_style);
 8025a26:	4b0c      	ldr	r3, [pc, #48]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 8025a28:	681b      	ldr	r3, [r3, #0]
 8025a2a:	4a0d      	ldr	r2, [pc, #52]	; (8025a60 <NotificationScreen_NotificationBox+0x98>)
 8025a2c:	2100      	movs	r1, #0
 8025a2e:	4618      	mov	r0, r3
 8025a30:	f7f9 f836 	bl	801eaa0 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_REL,  &scrl_style);
 8025a34:	4b08      	ldr	r3, [pc, #32]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 8025a36:	681b      	ldr	r3, [r3, #0]
 8025a38:	4a0a      	ldr	r2, [pc, #40]	; (8025a64 <NotificationScreen_NotificationBox+0x9c>)
 8025a3a:	2102      	movs	r1, #2
 8025a3c:	4618      	mov	r0, r3
 8025a3e:	f7f9 f82f 	bl	801eaa0 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_TGL_PR,  &bg_style);
 8025a42:	4b05      	ldr	r3, [pc, #20]	; (8025a58 <NotificationScreen_NotificationBox+0x90>)
 8025a44:	681b      	ldr	r3, [r3, #0]
 8025a46:	4a08      	ldr	r2, [pc, #32]	; (8025a68 <NotificationScreen_NotificationBox+0xa0>)
 8025a48:	2105      	movs	r1, #5
 8025a4a:	4618      	mov	r0, r3
 8025a4c:	f7f9 f828 	bl	801eaa0 <lv_mbox_set_style>
}
 8025a50:	bf00      	nop
 8025a52:	3708      	adds	r7, #8
 8025a54:	46bd      	mov	sp, r7
 8025a56:	bd80      	pop	{r7, pc}
 8025a58:	2001bd1c 	.word	0x2001bd1c
 8025a5c:	20002834 	.word	0x20002834
 8025a60:	2001ad98 	.word	0x2001ad98
 8025a64:	2001ae10 	.word	0x2001ae10
 8025a68:	2001add4 	.word	0x2001add4

08025a6c <NotificationScreen_SetOnScreenItems>:

/*This function using for notification items set values(app name,app notification,position)
 * @param root using for first node
 * @param node using for all nodes
 * @param posIndex using for set position index*/
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex){
 8025a6c:	b5b0      	push	{r4, r5, r7, lr}
 8025a6e:	b086      	sub	sp, #24
 8025a70:	af00      	add	r7, sp, #0
 8025a72:	60f8      	str	r0, [r7, #12]
 8025a74:	60b9      	str	r1, [r7, #8]
 8025a76:	4613      	mov	r3, r2
 8025a78:	71fb      	strb	r3, [r7, #7]
	bool selected= false; //blNotroot,blNotnode
 8025a7a:	2300      	movs	r3, #0
 8025a7c:	75fb      	strb	r3, [r7, #23]
       for(uint16_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 8025a7e:	2301      	movs	r3, #1
 8025a80:	82bb      	strh	r3, [r7, #20]
 8025a82:	e040      	b.n	8025b06 <NotificationScreen_SetOnScreenItems+0x9a>
    	   	   if(tos_NotificationGetItem(root,i) !=NULL){
 8025a84:	8abb      	ldrh	r3, [r7, #20]
 8025a86:	4619      	mov	r1, r3
 8025a88:	68f8      	ldr	r0, [r7, #12]
 8025a8a:	f004 ff16 	bl	802a8ba <tos_NotificationGetItem>
 8025a8e:	4603      	mov	r3, r0
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d035      	beq.n	8025b00 <NotificationScreen_SetOnScreenItems+0x94>
    	           if(posIndex==0){selectedItem=i; selected=true;}
 8025a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025a98:	2b00      	cmp	r3, #0
 8025a9a:	d106      	bne.n	8025aaa <NotificationScreen_SetOnScreenItems+0x3e>
 8025a9c:	8abb      	ldrh	r3, [r7, #20]
 8025a9e:	b2da      	uxtb	r2, r3
 8025aa0:	4b1f      	ldr	r3, [pc, #124]	; (8025b20 <NotificationScreen_SetOnScreenItems+0xb4>)
 8025aa2:	701a      	strb	r2, [r3, #0]
 8025aa4:	2301      	movs	r3, #1
 8025aa6:	75fb      	strb	r3, [r7, #23]
 8025aa8:	e001      	b.n	8025aae <NotificationScreen_SetOnScreenItems+0x42>
    	           else selected=false;
 8025aaa:	2300      	movs	r3, #0
 8025aac:	75fb      	strb	r3, [r7, #23]
    	          NS_tmpName=tos_NotificationGetItem(root,i)->appName;
 8025aae:	8abb      	ldrh	r3, [r7, #20]
 8025ab0:	4619      	mov	r1, r3
 8025ab2:	68f8      	ldr	r0, [r7, #12]
 8025ab4:	f004 ff01 	bl	802a8ba <tos_NotificationGetItem>
 8025ab8:	4603      	mov	r3, r0
 8025aba:	461a      	mov	r2, r3
 8025abc:	4b19      	ldr	r3, [pc, #100]	; (8025b24 <NotificationScreen_SetOnScreenItems+0xb8>)
 8025abe:	601a      	str	r2, [r3, #0]
    	           NS_tmpNode=tos_NotificationGetItem(root,i)->appNot;
 8025ac0:	8abb      	ldrh	r3, [r7, #20]
 8025ac2:	4619      	mov	r1, r3
 8025ac4:	68f8      	ldr	r0, [r7, #12]
 8025ac6:	f004 fef8 	bl	802a8ba <tos_NotificationGetItem>
 8025aca:	4603      	mov	r3, r0
 8025acc:	3314      	adds	r3, #20
 8025ace:	4a16      	ldr	r2, [pc, #88]	; (8025b28 <NotificationScreen_SetOnScreenItems+0xbc>)
 8025ad0:	6013      	str	r3, [r2, #0]
        NotificationScreen_Items(NS_tmpName,NS_tmpNode,
 8025ad2:	4b14      	ldr	r3, [pc, #80]	; (8025b24 <NotificationScreen_SetOnScreenItems+0xb8>)
 8025ad4:	681c      	ldr	r4, [r3, #0]
 8025ad6:	4b14      	ldr	r3, [pc, #80]	; (8025b28 <NotificationScreen_SetOnScreenItems+0xbc>)
 8025ad8:	681d      	ldr	r5, [r3, #0]
 8025ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025ade:	4618      	mov	r0, r3
 8025ae0:	f000 f8c2 	bl	8025c68 <NotificationScreen_ItemsetPos>
 8025ae4:	4603      	mov	r3, r0
 8025ae6:	613b      	str	r3, [r7, #16]
 8025ae8:	7dfb      	ldrb	r3, [r7, #23]
 8025aea:	693a      	ldr	r2, [r7, #16]
 8025aec:	4629      	mov	r1, r5
 8025aee:	4620      	mov	r0, r4
 8025af0:	f7ff fec8 	bl	8025884 <NotificationScreen_Items>
				NotificationScreen_ItemsetPos(posIndex),selected);
        posIndex++;
 8025af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025af8:	b2db      	uxtb	r3, r3
 8025afa:	3301      	adds	r3, #1
 8025afc:	b2db      	uxtb	r3, r3
 8025afe:	71fb      	strb	r3, [r7, #7]
       for(uint16_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 8025b00:	8abb      	ldrh	r3, [r7, #20]
 8025b02:	3301      	adds	r3, #1
 8025b04:	82bb      	strh	r3, [r7, #20]
 8025b06:	68b8      	ldr	r0, [r7, #8]
 8025b08:	f004 feb7 	bl	802a87a <tos_NotificationGetSize>
 8025b0c:	4603      	mov	r3, r0
 8025b0e:	b29b      	uxth	r3, r3
 8025b10:	8aba      	ldrh	r2, [r7, #20]
 8025b12:	429a      	cmp	r2, r3
 8025b14:	d3b6      	bcc.n	8025a84 <NotificationScreen_SetOnScreenItems+0x18>
    }
    }
}
 8025b16:	bf00      	nop
 8025b18:	3718      	adds	r7, #24
 8025b1a:	46bd      	mov	sp, r7
 8025b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8025b1e:	bf00      	nop
 8025b20:	2001bd29 	.word	0x2001bd29
 8025b24:	2001bd24 	.word	0x2001bd24
 8025b28:	2001bd0c 	.word	0x2001bd0c

08025b2c <NotificationScreen_ItemsStyleInit>:
/*This function using for set notification style init
 * created a style init because when create a notification then be not get again memory
 * @param theme using for select theme
 * true -> dark
 * false -> light*/
void NotificationScreen_ItemsStyleInit(bool theme){
 8025b2c:	b580      	push	{r7, lr}
 8025b2e:	b082      	sub	sp, #8
 8025b30:	af00      	add	r7, sp, #0
 8025b32:	4603      	mov	r3, r0
 8025b34:	71fb      	strb	r3, [r7, #7]
    lv_style_copy(&scrl_style, &lv_style_plain);
 8025b36:	4941      	ldr	r1, [pc, #260]	; (8025c3c <NotificationScreen_ItemsStyleInit+0x110>)
 8025b38:	4841      	ldr	r0, [pc, #260]	; (8025c40 <NotificationScreen_ItemsStyleInit+0x114>)
 8025b3a:	f7e6 f8b5 	bl	800bca8 <lv_style_copy>
    scrl_style.body.main_color = LV_COLOR_SILVER;
 8025b3e:	4a40      	ldr	r2, [pc, #256]	; (8025c40 <NotificationScreen_ItemsStyleInit+0x114>)
 8025b40:	4b40      	ldr	r3, [pc, #256]	; (8025c44 <NotificationScreen_ItemsStyleInit+0x118>)
 8025b42:	881b      	ldrh	r3, [r3, #0]
 8025b44:	8053      	strh	r3, [r2, #2]
    scrl_style.body.grad_color = LV_COLOR_SILVER;
 8025b46:	4a3e      	ldr	r2, [pc, #248]	; (8025c40 <NotificationScreen_ItemsStyleInit+0x114>)
 8025b48:	4b3e      	ldr	r3, [pc, #248]	; (8025c44 <NotificationScreen_ItemsStyleInit+0x118>)
 8025b4a:	881b      	ldrh	r3, [r3, #0]
 8025b4c:	8093      	strh	r3, [r2, #4]
    scrl_style.body.border.color = LV_COLOR_BLACK;
 8025b4e:	4b3c      	ldr	r3, [pc, #240]	; (8025c40 <NotificationScreen_ItemsStyleInit+0x114>)
 8025b50:	2200      	movs	r2, #0
 8025b52:	815a      	strh	r2, [r3, #10]
    scrl_style.body.border.width = 0;
 8025b54:	4b3a      	ldr	r3, [pc, #232]	; (8025c40 <NotificationScreen_ItemsStyleInit+0x114>)
 8025b56:	2200      	movs	r2, #0
 8025b58:	819a      	strh	r2, [r3, #12]

    lv_style_copy(&sb_style, &lv_style_plain);
 8025b5a:	4938      	ldr	r1, [pc, #224]	; (8025c3c <NotificationScreen_ItemsStyleInit+0x110>)
 8025b5c:	483a      	ldr	r0, [pc, #232]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b5e:	f7e6 f8a3 	bl	800bca8 <lv_style_copy>
    sb_style.body.main_color = LV_COLOR_WHITE;
 8025b62:	4a39      	ldr	r2, [pc, #228]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b64:	4b39      	ldr	r3, [pc, #228]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025b66:	881b      	ldrh	r3, [r3, #0]
 8025b68:	8053      	strh	r3, [r2, #2]
    sb_style.body.grad_color = LV_COLOR_WHITE;
 8025b6a:	4a37      	ldr	r2, [pc, #220]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b6c:	4b37      	ldr	r3, [pc, #220]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025b6e:	881b      	ldrh	r3, [r3, #0]
 8025b70:	8093      	strh	r3, [r2, #4]
    sb_style.body.border.color = LV_COLOR_BLACK;
 8025b72:	4b35      	ldr	r3, [pc, #212]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b74:	2200      	movs	r2, #0
 8025b76:	815a      	strh	r2, [r3, #10]
    sb_style.text.color =LV_COLOR_BLACK;
 8025b78:	4b33      	ldr	r3, [pc, #204]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b7a:	2200      	movs	r2, #0
 8025b7c:	841a      	strh	r2, [r3, #32]
    sb_style.body.border.width = 1;
 8025b7e:	4b32      	ldr	r3, [pc, #200]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b80:	2201      	movs	r2, #1
 8025b82:	819a      	strh	r2, [r3, #12]
    sb_style.body.border.opa = LV_OPA_70;
 8025b84:	4b30      	ldr	r3, [pc, #192]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b86:	22b2      	movs	r2, #178	; 0xb2
 8025b88:	73da      	strb	r2, [r3, #15]
    sb_style.body.opa = LV_OPA_70;
 8025b8a:	4b2f      	ldr	r3, [pc, #188]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b8c:	22b2      	movs	r2, #178	; 0xb2
 8025b8e:	721a      	strb	r2, [r3, #8]
    sb_style.body.padding.right = 3;
 8025b90:	4b2d      	ldr	r3, [pc, #180]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b92:	2203      	movs	r2, #3
 8025b94:	839a      	strh	r2, [r3, #28]
    sb_style.body.padding.bottom = 3;
 8025b96:	4b2c      	ldr	r3, [pc, #176]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b98:	2203      	movs	r2, #3
 8025b9a:	831a      	strh	r2, [r3, #24]
    sb_style.body.padding.inner = 8;
 8025b9c:	4b2a      	ldr	r3, [pc, #168]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025b9e:	2208      	movs	r2, #8
 8025ba0:	83da      	strh	r2, [r3, #30]
    lv_style_copy(&bg_style, &lv_style_plain);
 8025ba2:	4926      	ldr	r1, [pc, #152]	; (8025c3c <NotificationScreen_ItemsStyleInit+0x110>)
 8025ba4:	482a      	ldr	r0, [pc, #168]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025ba6:	f7e6 f87f 	bl	800bca8 <lv_style_copy>
    bg_style.body.main_color = LV_COLOR_WHITE;
 8025baa:	4a29      	ldr	r2, [pc, #164]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bac:	4b27      	ldr	r3, [pc, #156]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025bae:	881b      	ldrh	r3, [r3, #0]
 8025bb0:	8053      	strh	r3, [r2, #2]
    bg_style.body.grad_color = LV_COLOR_WHITE;
 8025bb2:	4a27      	ldr	r2, [pc, #156]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bb4:	4b25      	ldr	r3, [pc, #148]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025bb6:	881b      	ldrh	r3, [r3, #0]
 8025bb8:	8093      	strh	r3, [r2, #4]
    bg_style.body.border.color = LV_COLOR_WHITE;
 8025bba:	4a25      	ldr	r2, [pc, #148]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bbc:	4b23      	ldr	r3, [pc, #140]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025bbe:	881b      	ldrh	r3, [r3, #0]
 8025bc0:	8153      	strh	r3, [r2, #10]
    bg_style.body.border.width = 0;
 8025bc2:	4b23      	ldr	r3, [pc, #140]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bc4:	2200      	movs	r2, #0
 8025bc6:	819a      	strh	r2, [r3, #12]
    bg_style.body.border.opa = LV_OPA_70;
 8025bc8:	4b21      	ldr	r3, [pc, #132]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bca:	22b2      	movs	r2, #178	; 0xb2
 8025bcc:	73da      	strb	r2, [r3, #15]
    bg_style.body.opa = LV_OPA_70;
 8025bce:	4b20      	ldr	r3, [pc, #128]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bd0:	22b2      	movs	r2, #178	; 0xb2
 8025bd2:	721a      	strb	r2, [r3, #8]
    if(theme){
 8025bd4:	79fb      	ldrb	r3, [r7, #7]
 8025bd6:	2b00      	cmp	r3, #0
 8025bd8:	d016      	beq.n	8025c08 <NotificationScreen_ItemsStyleInit+0xdc>
    	sb_style.body.main_color = LV_COLOR_BLACK;
 8025bda:	4b1b      	ldr	r3, [pc, #108]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025bdc:	2200      	movs	r2, #0
 8025bde:	805a      	strh	r2, [r3, #2]
        sb_style.body.grad_color = LV_COLOR_BLACK;
 8025be0:	4b19      	ldr	r3, [pc, #100]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025be2:	2200      	movs	r2, #0
 8025be4:	809a      	strh	r2, [r3, #4]
        sb_style.body.border.color = LV_COLOR_WHITE;
 8025be6:	4a18      	ldr	r2, [pc, #96]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025be8:	4b18      	ldr	r3, [pc, #96]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025bea:	881b      	ldrh	r3, [r3, #0]
 8025bec:	8153      	strh	r3, [r2, #10]
        bg_style.body.main_color = LV_COLOR_BLACK;
 8025bee:	4b18      	ldr	r3, [pc, #96]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bf0:	2200      	movs	r2, #0
 8025bf2:	805a      	strh	r2, [r3, #2]
        bg_style.body.grad_color = LV_COLOR_BLACK;
 8025bf4:	4b16      	ldr	r3, [pc, #88]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bf6:	2200      	movs	r2, #0
 8025bf8:	809a      	strh	r2, [r3, #4]
        bg_style.body.border.color = LV_COLOR_BLACK;
 8025bfa:	4b15      	ldr	r3, [pc, #84]	; (8025c50 <NotificationScreen_ItemsStyleInit+0x124>)
 8025bfc:	2200      	movs	r2, #0
 8025bfe:	815a      	strh	r2, [r3, #10]
        sb_style.text.color =LV_COLOR_WHITE;
 8025c00:	4a11      	ldr	r2, [pc, #68]	; (8025c48 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025c02:	4b12      	ldr	r3, [pc, #72]	; (8025c4c <NotificationScreen_ItemsStyleInit+0x120>)
 8025c04:	881b      	ldrh	r3, [r3, #0]
 8025c06:	8413      	strh	r3, [r2, #32]
    }

	lv_style_copy(&appName_Style, &lv_style_plain);
 8025c08:	490c      	ldr	r1, [pc, #48]	; (8025c3c <NotificationScreen_ItemsStyleInit+0x110>)
 8025c0a:	4812      	ldr	r0, [pc, #72]	; (8025c54 <NotificationScreen_ItemsStyleInit+0x128>)
 8025c0c:	f7e6 f84c 	bl	800bca8 <lv_style_copy>
	appName_Style.text.font = &lv_font_roboto_22;
 8025c10:	4b10      	ldr	r3, [pc, #64]	; (8025c54 <NotificationScreen_ItemsStyleInit+0x128>)
 8025c12:	4a11      	ldr	r2, [pc, #68]	; (8025c58 <NotificationScreen_ItemsStyleInit+0x12c>)
 8025c14:	625a      	str	r2, [r3, #36]	; 0x24
	appName_Style.text.color = LV_COLOR_AQUA;
 8025c16:	4a0f      	ldr	r2, [pc, #60]	; (8025c54 <NotificationScreen_ItemsStyleInit+0x128>)
 8025c18:	4b10      	ldr	r3, [pc, #64]	; (8025c5c <NotificationScreen_ItemsStyleInit+0x130>)
 8025c1a:	881b      	ldrh	r3, [r3, #0]
 8025c1c:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&notification_Style, &lv_style_plain);
 8025c1e:	4907      	ldr	r1, [pc, #28]	; (8025c3c <NotificationScreen_ItemsStyleInit+0x110>)
 8025c20:	480f      	ldr	r0, [pc, #60]	; (8025c60 <NotificationScreen_ItemsStyleInit+0x134>)
 8025c22:	f7e6 f841 	bl	800bca8 <lv_style_copy>
	notification_Style.text.font = &lv_font_roboto_16;
 8025c26:	4b0e      	ldr	r3, [pc, #56]	; (8025c60 <NotificationScreen_ItemsStyleInit+0x134>)
 8025c28:	4a0e      	ldr	r2, [pc, #56]	; (8025c64 <NotificationScreen_ItemsStyleInit+0x138>)
 8025c2a:	625a      	str	r2, [r3, #36]	; 0x24
	notification_Style.text.color = LV_COLOR_BLACK;
 8025c2c:	4b0c      	ldr	r3, [pc, #48]	; (8025c60 <NotificationScreen_ItemsStyleInit+0x134>)
 8025c2e:	2200      	movs	r2, #0
 8025c30:	841a      	strh	r2, [r3, #32]
}
 8025c32:	bf00      	nop
 8025c34:	3708      	adds	r7, #8
 8025c36:	46bd      	mov	sp, r7
 8025c38:	bd80      	pop	{r7, pc}
 8025c3a:	bf00      	nop
 8025c3c:	2001ba40 	.word	0x2001ba40
 8025c40:	2001ae10 	.word	0x2001ae10
 8025c44:	0802d678 	.word	0x0802d678
 8025c48:	2001ad98 	.word	0x2001ad98
 8025c4c:	0802d660 	.word	0x0802d660
 8025c50:	2001add4 	.word	0x2001add4
 8025c54:	2001ae4c 	.word	0x2001ae4c
 8025c58:	200017c4 	.word	0x200017c4
 8025c5c:	0802d67c 	.word	0x0802d67c
 8025c60:	2001ae88 	.word	0x2001ae88
 8025c64:	20000bf0 	.word	0x20000bf0

08025c68 <NotificationScreen_ItemsetPos>:
/*This function using for set items position
 * @param index using for set position axis y*/
tos_Position NotificationScreen_ItemsetPos(int8_t index){
 8025c68:	b480      	push	{r7}
 8025c6a:	b085      	sub	sp, #20
 8025c6c:	af00      	add	r7, sp, #0
 8025c6e:	4603      	mov	r3, r0
 8025c70:	71fb      	strb	r3, [r7, #7]
	tos_Position tmp;
	tmp.x=0; tmp.y=(index*55)-90;
 8025c72:	2300      	movs	r3, #0
 8025c74:	813b      	strh	r3, [r7, #8]
 8025c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025c7a:	b29b      	uxth	r3, r3
 8025c7c:	461a      	mov	r2, r3
 8025c7e:	00d2      	lsls	r2, r2, #3
 8025c80:	1ad2      	subs	r2, r2, r3
 8025c82:	00d2      	lsls	r2, r2, #3
 8025c84:	1ad3      	subs	r3, r2, r3
 8025c86:	b29b      	uxth	r3, r3
 8025c88:	3b5a      	subs	r3, #90	; 0x5a
 8025c8a:	b29b      	uxth	r3, r3
 8025c8c:	817b      	strh	r3, [r7, #10]
	return tmp;
 8025c8e:	68bb      	ldr	r3, [r7, #8]
 8025c90:	60fb      	str	r3, [r7, #12]
 8025c92:	2300      	movs	r3, #0
 8025c94:	89ba      	ldrh	r2, [r7, #12]
 8025c96:	f362 030f 	bfi	r3, r2, #0, #16
 8025c9a:	89fa      	ldrh	r2, [r7, #14]
 8025c9c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8025ca0:	4618      	mov	r0, r3
 8025ca2:	3714      	adds	r7, #20
 8025ca4:	46bd      	mov	sp, r7
 8025ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025caa:	4770      	bx	lr

08025cac <NotificationScreen_GetMaxScroll>:
/*This function using for return can get max going scroll value
 * @param node using for get node*/
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node){
 8025cac:	b580      	push	{r7, lr}
 8025cae:	b084      	sub	sp, #16
 8025cb0:	af00      	add	r7, sp, #0
 8025cb2:	6078      	str	r0, [r7, #4]
	if(tos_NotificationGetSize(node)>=5){
 8025cb4:	6878      	ldr	r0, [r7, #4]
 8025cb6:	f004 fde0 	bl	802a87a <tos_NotificationGetSize>
 8025cba:	4603      	mov	r3, r0
 8025cbc:	2b04      	cmp	r3, #4
 8025cbe:	d909      	bls.n	8025cd4 <NotificationScreen_GetMaxScroll+0x28>
		int8_t max=tos_NotificationGetSize(node)-2;
 8025cc0:	6878      	ldr	r0, [r7, #4]
 8025cc2:	f004 fdda 	bl	802a87a <tos_NotificationGetSize>
 8025cc6:	4603      	mov	r3, r0
 8025cc8:	3b02      	subs	r3, #2
 8025cca:	b2db      	uxtb	r3, r3
 8025ccc:	73fb      	strb	r3, [r7, #15]
		return max;
 8025cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8025cd2:	e000      	b.n	8025cd6 <NotificationScreen_GetMaxScroll+0x2a>
	} return 0;
 8025cd4:	2300      	movs	r3, #0
}
 8025cd6:	4618      	mov	r0, r3
 8025cd8:	3710      	adds	r7, #16
 8025cda:	46bd      	mov	sp, r7
 8025cdc:	bd80      	pop	{r7, pc}
	...

08025ce0 <NotificationScreen_TaskControllerSet>:

//Setter Getter Functions
void NotificationScreen_TaskControllerSet(bool active){
 8025ce0:	b480      	push	{r7}
 8025ce2:	b083      	sub	sp, #12
 8025ce4:	af00      	add	r7, sp, #0
 8025ce6:	4603      	mov	r3, r0
 8025ce8:	71fb      	strb	r3, [r7, #7]
	NS_taskController = active;
 8025cea:	4a04      	ldr	r2, [pc, #16]	; (8025cfc <NotificationScreen_TaskControllerSet+0x1c>)
 8025cec:	79fb      	ldrb	r3, [r7, #7]
 8025cee:	7013      	strb	r3, [r2, #0]
}
 8025cf0:	bf00      	nop
 8025cf2:	370c      	adds	r7, #12
 8025cf4:	46bd      	mov	sp, r7
 8025cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cfa:	4770      	bx	lr
 8025cfc:	2001bd10 	.word	0x2001bd10

08025d00 <NotificationScreen_TaskControllerGet>:
bool NotificationScreen_TaskControllerGet(void){
 8025d00:	b480      	push	{r7}
 8025d02:	af00      	add	r7, sp, #0
	return NS_taskController;
 8025d04:	4b03      	ldr	r3, [pc, #12]	; (8025d14 <NotificationScreen_TaskControllerGet+0x14>)
 8025d06:	781b      	ldrb	r3, [r3, #0]
}
 8025d08:	4618      	mov	r0, r3
 8025d0a:	46bd      	mov	sp, r7
 8025d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d10:	4770      	bx	lr
 8025d12:	bf00      	nop
 8025d14:	2001bd10 	.word	0x2001bd10

08025d18 <NotificationScreen_SetNotrootAndnode>:
void NotificationScreen_SetNotrootAndnode(tos_Notification *setRoot,tos_Notification *setNode){
 8025d18:	b480      	push	{r7}
 8025d1a:	b083      	sub	sp, #12
 8025d1c:	af00      	add	r7, sp, #0
 8025d1e:	6078      	str	r0, [r7, #4]
 8025d20:	6039      	str	r1, [r7, #0]
	NS_Notroot=setRoot;
 8025d22:	4a06      	ldr	r2, [pc, #24]	; (8025d3c <NotificationScreen_SetNotrootAndnode+0x24>)
 8025d24:	687b      	ldr	r3, [r7, #4]
 8025d26:	6013      	str	r3, [r2, #0]
	NS_Notnode=setNode;
 8025d28:	4a05      	ldr	r2, [pc, #20]	; (8025d40 <NotificationScreen_SetNotrootAndnode+0x28>)
 8025d2a:	683b      	ldr	r3, [r7, #0]
 8025d2c:	6013      	str	r3, [r2, #0]
}
 8025d2e:	bf00      	nop
 8025d30:	370c      	adds	r7, #12
 8025d32:	46bd      	mov	sp, r7
 8025d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d38:	4770      	bx	lr
 8025d3a:	bf00      	nop
 8025d3c:	2001bd20 	.word	0x2001bd20
 8025d40:	2001bd14 	.word	0x2001bd14

08025d44 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8025d44:	b480      	push	{r7}
 8025d46:	b085      	sub	sp, #20
 8025d48:	af00      	add	r7, sp, #0
 8025d4a:	4603      	mov	r3, r0
 8025d4c:	71fb      	strb	r3, [r7, #7]
 8025d4e:	460b      	mov	r3, r1
 8025d50:	71bb      	strb	r3, [r7, #6]
 8025d52:	4613      	mov	r3, r2
 8025d54:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8025d56:	79bb      	ldrb	r3, [r7, #6]
 8025d58:	095b      	lsrs	r3, r3, #5
 8025d5a:	b2db      	uxtb	r3, r3
 8025d5c:	f003 0307 	and.w	r3, r3, #7
 8025d60:	b2da      	uxtb	r2, r3
 8025d62:	7b3b      	ldrb	r3, [r7, #12]
 8025d64:	f362 0302 	bfi	r3, r2, #0, #3
 8025d68:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8025d6a:	79fb      	ldrb	r3, [r7, #7]
 8025d6c:	08db      	lsrs	r3, r3, #3
 8025d6e:	b2db      	uxtb	r3, r3
 8025d70:	f003 031f 	and.w	r3, r3, #31
 8025d74:	b2da      	uxtb	r2, r3
 8025d76:	7b3b      	ldrb	r3, [r7, #12]
 8025d78:	f362 03c7 	bfi	r3, r2, #3, #5
 8025d7c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8025d7e:	797b      	ldrb	r3, [r7, #5]
 8025d80:	08db      	lsrs	r3, r3, #3
 8025d82:	b2db      	uxtb	r3, r3
 8025d84:	f003 031f 	and.w	r3, r3, #31
 8025d88:	b2da      	uxtb	r2, r3
 8025d8a:	7b7b      	ldrb	r3, [r7, #13]
 8025d8c:	f362 0304 	bfi	r3, r2, #0, #5
 8025d90:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8025d92:	79bb      	ldrb	r3, [r7, #6]
 8025d94:	089b      	lsrs	r3, r3, #2
 8025d96:	b2db      	uxtb	r3, r3
 8025d98:	f003 0307 	and.w	r3, r3, #7
 8025d9c:	b2da      	uxtb	r2, r3
 8025d9e:	7b7b      	ldrb	r3, [r7, #13]
 8025da0:	f362 1347 	bfi	r3, r2, #5, #3
 8025da4:	737b      	strb	r3, [r7, #13]
    return color;
 8025da6:	89bb      	ldrh	r3, [r7, #12]
}
 8025da8:	4618      	mov	r0, r3
 8025daa:	3714      	adds	r7, #20
 8025dac:	46bd      	mov	sp, r7
 8025dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025db2:	4770      	bx	lr

08025db4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025db4:	b580      	push	{r7, lr}
 8025db6:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8025db8:	f7ef fe94 	bl	8015ae4 <lv_disp_get_default>
 8025dbc:	4603      	mov	r3, r0
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	f7e2 fb5c 	bl	800847c <lv_disp_get_scr_act>
 8025dc4:	4603      	mov	r3, r0
}
 8025dc6:	4618      	mov	r0, r3
 8025dc8:	bd80      	pop	{r7, pc}

08025dca <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8025dca:	b580      	push	{r7, lr}
 8025dcc:	b084      	sub	sp, #16
 8025dce:	af00      	add	r7, sp, #0
 8025dd0:	60f8      	str	r0, [r7, #12]
 8025dd2:	460b      	mov	r3, r1
 8025dd4:	607a      	str	r2, [r7, #4]
 8025dd6:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8025dd8:	6879      	ldr	r1, [r7, #4]
 8025dda:	68f8      	ldr	r0, [r7, #12]
 8025ddc:	f7e4 f9c5 	bl	800a16a <lv_obj_set_style>
}
 8025de0:	bf00      	nop
 8025de2:	3710      	adds	r7, #16
 8025de4:	46bd      	mov	sp, r7
 8025de6:	bd80      	pop	{r7, pc}

08025de8 <tos_RunModeScreen_Init>:
void RunMode_steps_angle_loader(void);
void RunMode_kCals_angle_loader(void);
void RunMode_distances_angle_loader(void);

/*This function using for initialization Run Mode screen*/
void tos_RunModeScreen_Init(bool unitType,bool theme){
 8025de8:	b580      	push	{r7, lr}
 8025dea:	b082      	sub	sp, #8
 8025dec:	af00      	add	r7, sp, #0
 8025dee:	4603      	mov	r3, r0
 8025df0:	460a      	mov	r2, r1
 8025df2:	71fb      	strb	r3, [r7, #7]
 8025df4:	4613      	mov	r3, r2
 8025df6:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 8025df8:	f7ff ffdc 	bl	8025db4 <lv_scr_act>
 8025dfc:	4603      	mov	r3, r0
 8025dfe:	4618      	mov	r0, r3
 8025e00:	f7e3 fa9c 	bl	800933c <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 8025e04:	492e      	ldr	r1, [pc, #184]	; (8025ec0 <tos_RunModeScreen_Init+0xd8>)
 8025e06:	482f      	ldr	r0, [pc, #188]	; (8025ec4 <tos_RunModeScreen_Init+0xdc>)
 8025e08:	f7e5 ff4e 	bl	800bca8 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 8025e0c:	4b2d      	ldr	r3, [pc, #180]	; (8025ec4 <tos_RunModeScreen_Init+0xdc>)
 8025e0e:	4a2e      	ldr	r2, [pc, #184]	; (8025ec8 <tos_RunModeScreen_Init+0xe0>)
 8025e10:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 8025e12:	4a2c      	ldr	r2, [pc, #176]	; (8025ec4 <tos_RunModeScreen_Init+0xdc>)
 8025e14:	4b2d      	ldr	r3, [pc, #180]	; (8025ecc <tos_RunModeScreen_Init+0xe4>)
 8025e16:	881b      	ldrh	r3, [r3, #0]
 8025e18:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 8025e1a:	4929      	ldr	r1, [pc, #164]	; (8025ec0 <tos_RunModeScreen_Init+0xd8>)
 8025e1c:	482c      	ldr	r0, [pc, #176]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e1e:	f7e5 ff43 	bl	800bca8 <lv_style_copy>
	if(theme){
 8025e22:	79bb      	ldrb	r3, [r7, #6]
 8025e24:	2b00      	cmp	r3, #0
 8025e26:	d00a      	beq.n	8025e3e <tos_RunModeScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8025e28:	4b29      	ldr	r3, [pc, #164]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e2a:	2200      	movs	r2, #0
 8025e2c:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8025e2e:	4b28      	ldr	r3, [pc, #160]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e30:	2200      	movs	r2, #0
 8025e32:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8025e34:	4a23      	ldr	r2, [pc, #140]	; (8025ec4 <tos_RunModeScreen_Init+0xdc>)
 8025e36:	4b27      	ldr	r3, [pc, #156]	; (8025ed4 <tos_RunModeScreen_Init+0xec>)
 8025e38:	881b      	ldrh	r3, [r3, #0]
 8025e3a:	8413      	strh	r3, [r2, #32]
 8025e3c:	e00b      	b.n	8025e56 <tos_RunModeScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 8025e3e:	4a24      	ldr	r2, [pc, #144]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e40:	4b25      	ldr	r3, [pc, #148]	; (8025ed8 <tos_RunModeScreen_Init+0xf0>)
 8025e42:	881b      	ldrh	r3, [r3, #0]
 8025e44:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8025e46:	4a22      	ldr	r2, [pc, #136]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e48:	4b23      	ldr	r3, [pc, #140]	; (8025ed8 <tos_RunModeScreen_Init+0xf0>)
 8025e4a:	881b      	ldrh	r3, [r3, #0]
 8025e4c:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8025e4e:	4a1d      	ldr	r2, [pc, #116]	; (8025ec4 <tos_RunModeScreen_Init+0xdc>)
 8025e50:	4b20      	ldr	r3, [pc, #128]	; (8025ed4 <tos_RunModeScreen_Init+0xec>)
 8025e52:	881b      	ldrh	r3, [r3, #0]
 8025e54:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025e56:	f7ff ffad 	bl	8025db4 <lv_scr_act>
 8025e5a:	4603      	mov	r3, r0
 8025e5c:	491c      	ldr	r1, [pc, #112]	; (8025ed0 <tos_RunModeScreen_Init+0xe8>)
 8025e5e:	4618      	mov	r0, r3
 8025e60:	f7e4 f983 	bl	800a16a <lv_obj_set_style>

	RMfirstVAl=true;
 8025e64:	4b1d      	ldr	r3, [pc, #116]	; (8025edc <tos_RunModeScreen_Init+0xf4>)
 8025e66:	2201      	movs	r2, #1
 8025e68:	701a      	strb	r2, [r3, #0]
	RMtimeSetVal=0;
 8025e6a:	4b1d      	ldr	r3, [pc, #116]	; (8025ee0 <tos_RunModeScreen_Init+0xf8>)
 8025e6c:	2200      	movs	r2, #0
 8025e6e:	701a      	strb	r2, [r3, #0]
	isStartRun=false;
 8025e70:	4b1c      	ldr	r3, [pc, #112]	; (8025ee4 <tos_RunModeScreen_Init+0xfc>)
 8025e72:	2200      	movs	r2, #0
 8025e74:	701a      	strb	r2, [r3, #0]

	RM_theme=theme;
 8025e76:	4a1c      	ldr	r2, [pc, #112]	; (8025ee8 <tos_RunModeScreen_Init+0x100>)
 8025e78:	79bb      	ldrb	r3, [r7, #6]
 8025e7a:	7013      	strb	r3, [r2, #0]
	RM_unitType=unitType;
 8025e7c:	4a1b      	ldr	r2, [pc, #108]	; (8025eec <tos_RunModeScreen_Init+0x104>)
 8025e7e:	79fb      	ldrb	r3, [r7, #7]
 8025e80:	7013      	strb	r3, [r2, #0]
	RunMode_Obj_Init();
 8025e82:	f000 f839 	bl	8025ef8 <RunMode_Obj_Init>
	RunMode_Steps(theme);
 8025e86:	79bb      	ldrb	r3, [r7, #6]
 8025e88:	4618      	mov	r0, r3
 8025e8a:	f000 f9bd 	bl	8026208 <RunMode_Steps>
	RunMode_kCals(theme);
 8025e8e:	79bb      	ldrb	r3, [r7, #6]
 8025e90:	4618      	mov	r0, r3
 8025e92:	f000 f8ff 	bl	8026094 <RunMode_kCals>
	RunMode_Distances(unitType,theme);
 8025e96:	79ba      	ldrb	r2, [r7, #6]
 8025e98:	79fb      	ldrb	r3, [r7, #7]
 8025e9a:	4611      	mov	r1, r2
 8025e9c:	4618      	mov	r0, r3
 8025e9e:	f000 fa69 	bl	8026374 <RunMode_Distances>
	RM_taskController=true;
 8025ea2:	4b13      	ldr	r3, [pc, #76]	; (8025ef0 <tos_RunModeScreen_Init+0x108>)
 8025ea4:	2201      	movs	r2, #1
 8025ea6:	701a      	strb	r2, [r3, #0]
	lv_task_create(RunModeScreen_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8025ea8:	2300      	movs	r3, #0
 8025eaa:	2201      	movs	r2, #1
 8025eac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8025eb0:	4810      	ldr	r0, [pc, #64]	; (8025ef4 <tos_RunModeScreen_Init+0x10c>)
 8025eb2:	f7f1 fa5b 	bl	801736c <lv_task_create>
}
 8025eb6:	bf00      	nop
 8025eb8:	3708      	adds	r7, #8
 8025eba:	46bd      	mov	sp, r7
 8025ebc:	bd80      	pop	{r7, pc}
 8025ebe:	bf00      	nop
 8025ec0:	2001ba40 	.word	0x2001ba40
 8025ec4:	2001af04 	.word	0x2001af04
 8025ec8:	200026d0 	.word	0x200026d0
 8025ecc:	0802d690 	.word	0x0802d690
 8025ed0:	2001aec8 	.word	0x2001aec8
 8025ed4:	0802d694 	.word	0x0802d694
 8025ed8:	0802d698 	.word	0x0802d698
 8025edc:	2001bdcc 	.word	0x2001bdcc
 8025ee0:	2001bd8c 	.word	0x2001bd8c
 8025ee4:	2001bdc4 	.word	0x2001bdc4
 8025ee8:	2001bd8d 	.word	0x2001bd8d
 8025eec:	2001bd40 	.word	0x2001bd40
 8025ef0:	2001bdb0 	.word	0x2001bdb0
 8025ef4:	080264fd 	.word	0x080264fd

08025ef8 <RunMode_Obj_Init>:


/*This function using for create and set objects on screen*/
void RunMode_Obj_Init(void){
 8025ef8:	b590      	push	{r4, r7, lr}
 8025efa:	b085      	sub	sp, #20
 8025efc:	af04      	add	r7, sp, #16

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 8025efe:	4957      	ldr	r1, [pc, #348]	; (802605c <RunMode_Obj_Init+0x164>)
 8025f00:	4857      	ldr	r0, [pc, #348]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f02:	f7e5 fed1 	bl	800bca8 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8025f06:	4b56      	ldr	r3, [pc, #344]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f08:	2200      	movs	r2, #0
 8025f0a:	841a      	strh	r2, [r3, #32]
    if(RM_theme) obj_Style.text.color = LV_COLOR_SILVER;
 8025f0c:	4b55      	ldr	r3, [pc, #340]	; (8026064 <RunMode_Obj_Init+0x16c>)
 8025f0e:	781b      	ldrb	r3, [r3, #0]
 8025f10:	2b00      	cmp	r3, #0
 8025f12:	d003      	beq.n	8025f1c <RunMode_Obj_Init+0x24>
 8025f14:	4a52      	ldr	r2, [pc, #328]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f16:	4b54      	ldr	r3, [pc, #336]	; (8026068 <RunMode_Obj_Init+0x170>)
 8025f18:	881b      	ldrh	r3, [r3, #0]
 8025f1a:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;
 8025f1c:	4b50      	ldr	r3, [pc, #320]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f1e:	4a53      	ldr	r2, [pc, #332]	; (802606c <RunMode_Obj_Init+0x174>)
 8025f20:	625a      	str	r2, [r3, #36]	; 0x24
    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8025f22:	4c4f      	ldr	r4, [pc, #316]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f24:	2200      	movs	r2, #0
 8025f26:	21a5      	movs	r1, #165	; 0xa5
 8025f28:	20ff      	movs	r0, #255	; 0xff
 8025f2a:	f7ff ff0b 	bl	8025d44 <lv_color_make>
 8025f2e:	8060      	strh	r0, [r4, #2]
    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8025f30:	4c4b      	ldr	r4, [pc, #300]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f32:	2200      	movs	r2, #0
 8025f34:	21a5      	movs	r1, #165	; 0xa5
 8025f36:	20ff      	movs	r0, #255	; 0xff
 8025f38:	f7ff ff04 	bl	8025d44 <lv_color_make>
 8025f3c:	80a0      	strh	r0, [r4, #4]
    obj_Style.body.radius= 10;
 8025f3e:	4b48      	ldr	r3, [pc, #288]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f40:	220a      	movs	r2, #10
 8025f42:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8025f44:	4b46      	ldr	r3, [pc, #280]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f46:	22c8      	movs	r2, #200	; 0xc8
 8025f48:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 8025f4a:	4945      	ldr	r1, [pc, #276]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f4c:	4848      	ldr	r0, [pc, #288]	; (8026070 <RunMode_Obj_Init+0x178>)
 8025f4e:	f7e5 feab 	bl	800bca8 <lv_style_copy>
    indic_Style.body.main_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8025f52:	4c47      	ldr	r4, [pc, #284]	; (8026070 <RunMode_Obj_Init+0x178>)
 8025f54:	22ff      	movs	r2, #255	; 0xff
 8025f56:	21ff      	movs	r1, #255	; 0xff
 8025f58:	2000      	movs	r0, #0
 8025f5a:	f7ff fef3 	bl	8025d44 <lv_color_make>
 8025f5e:	8060      	strh	r0, [r4, #2]
    indic_Style.body.grad_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8025f60:	4c43      	ldr	r4, [pc, #268]	; (8026070 <RunMode_Obj_Init+0x178>)
 8025f62:	22ff      	movs	r2, #255	; 0xff
 8025f64:	21ff      	movs	r1, #255	; 0xff
 8025f66:	2000      	movs	r0, #0
 8025f68:	f7ff feec 	bl	8025d44 <lv_color_make>
 8025f6c:	80a0      	strh	r0, [r4, #4]
    indic_Style.body.opa=255;
 8025f6e:	4b40      	ldr	r3, [pc, #256]	; (8026070 <RunMode_Obj_Init+0x178>)
 8025f70:	22ff      	movs	r2, #255	; 0xff
 8025f72:	721a      	strb	r2, [r3, #8]

    RM_targetTimeBar = lv_bar_create(lv_scr_act(), NULL);
 8025f74:	f7ff ff1e 	bl	8025db4 <lv_scr_act>
 8025f78:	4603      	mov	r3, r0
 8025f7a:	2100      	movs	r1, #0
 8025f7c:	4618      	mov	r0, r3
 8025f7e:	f7f2 fa15 	bl	80183ac <lv_bar_create>
 8025f82:	4602      	mov	r2, r0
 8025f84:	4b3b      	ldr	r3, [pc, #236]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025f86:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_BG, &obj_Style);
 8025f88:	4b3a      	ldr	r3, [pc, #232]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025f8a:	681b      	ldr	r3, [r3, #0]
 8025f8c:	4a34      	ldr	r2, [pc, #208]	; (8026060 <RunMode_Obj_Init+0x168>)
 8025f8e:	2100      	movs	r1, #0
 8025f90:	4618      	mov	r0, r3
 8025f92:	f7f2 fba1 	bl	80186d8 <lv_bar_set_style>
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_INDIC, &indic_Style);
 8025f96:	4b37      	ldr	r3, [pc, #220]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	4a35      	ldr	r2, [pc, #212]	; (8026070 <RunMode_Obj_Init+0x178>)
 8025f9c:	2101      	movs	r1, #1
 8025f9e:	4618      	mov	r0, r3
 8025fa0:	f7f2 fb9a 	bl	80186d8 <lv_bar_set_style>
    lv_obj_set_size(RM_targetTimeBar, 150, 30);
 8025fa4:	4b33      	ldr	r3, [pc, #204]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025fa6:	681b      	ldr	r3, [r3, #0]
 8025fa8:	221e      	movs	r2, #30
 8025faa:	2196      	movs	r1, #150	; 0x96
 8025fac:	4618      	mov	r0, r3
 8025fae:	f7e3 fb94 	bl	80096da <lv_obj_set_size>
    lv_obj_align(RM_targetTimeBar, NULL, LV_ALIGN_CENTER, 0, 80);
 8025fb2:	4b30      	ldr	r3, [pc, #192]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025fb4:	6818      	ldr	r0, [r3, #0]
 8025fb6:	2350      	movs	r3, #80	; 0x50
 8025fb8:	9300      	str	r3, [sp, #0]
 8025fba:	2300      	movs	r3, #0
 8025fbc:	2200      	movs	r2, #0
 8025fbe:	2100      	movs	r1, #0
 8025fc0:	f7e3 fc2e 	bl	8009820 <lv_obj_align>
    lv_bar_set_range(RM_targetTimeBar,0,100);
 8025fc4:	4b2b      	ldr	r3, [pc, #172]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025fc6:	681b      	ldr	r3, [r3, #0]
 8025fc8:	2264      	movs	r2, #100	; 0x64
 8025fca:	2100      	movs	r1, #0
 8025fcc:	4618      	mov	r0, r3
 8025fce:	f7f2 fb37 	bl	8018640 <lv_bar_set_range>
    lv_bar_set_value(RM_targetTimeBar, 0, LV_ANIM_OFF);
 8025fd2:	4b28      	ldr	r3, [pc, #160]	; (8026074 <RunMode_Obj_Init+0x17c>)
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	2200      	movs	r2, #0
 8025fd8:	2100      	movs	r1, #0
 8025fda:	4618      	mov	r0, r3
 8025fdc:	f7f2 faac 	bl	8018538 <lv_bar_set_value>

    //MAGENTA -> FF00FF
   	//AQUA -> 00FFFF
	//ORANGE -> FFA500

    RM_Lbl = lv_label_create(lv_scr_act(), NULL);
 8025fe0:	f7ff fee8 	bl	8025db4 <lv_scr_act>
 8025fe4:	4603      	mov	r3, r0
 8025fe6:	2100      	movs	r1, #0
 8025fe8:	4618      	mov	r0, r3
 8025fea:	f7f6 fd31 	bl	801ca50 <lv_label_create>
 8025fee:	4602      	mov	r2, r0
 8025ff0:	4b21      	ldr	r3, [pc, #132]	; (8026078 <RunMode_Obj_Init+0x180>)
 8025ff2:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(RM_Lbl, true);
 8025ff4:	4b20      	ldr	r3, [pc, #128]	; (8026078 <RunMode_Obj_Init+0x180>)
 8025ff6:	681b      	ldr	r3, [r3, #0]
 8025ff8:	2101      	movs	r1, #1
 8025ffa:	4618      	mov	r0, r3
 8025ffc:	f7f6 ff76 	bl	801ceec <lv_label_set_recolor>
 	lv_label_set_style(RM_Lbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8026000:	4b1d      	ldr	r3, [pc, #116]	; (8026078 <RunMode_Obj_Init+0x180>)
 8026002:	681b      	ldr	r3, [r3, #0]
 8026004:	4a16      	ldr	r2, [pc, #88]	; (8026060 <RunMode_Obj_Init+0x168>)
 8026006:	2100      	movs	r1, #0
 8026008:	4618      	mov	r0, r3
 802600a:	f7ff fede 	bl	8025dca <lv_label_set_style>
	snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802600e:	4b1b      	ldr	r3, [pc, #108]	; (802607c <RunMode_Obj_Init+0x184>)
 8026010:	781b      	ldrb	r3, [r3, #0]
 8026012:	4618      	mov	r0, r3
 8026014:	4b1a      	ldr	r3, [pc, #104]	; (8026080 <RunMode_Obj_Init+0x188>)
 8026016:	781b      	ldrb	r3, [r3, #0]
 8026018:	461a      	mov	r2, r3
 802601a:	4b1a      	ldr	r3, [pc, #104]	; (8026084 <RunMode_Obj_Init+0x18c>)
 802601c:	781b      	ldrb	r3, [r3, #0]
 802601e:	4619      	mov	r1, r3
 8026020:	4b19      	ldr	r3, [pc, #100]	; (8026088 <RunMode_Obj_Init+0x190>)
 8026022:	881b      	ldrh	r3, [r3, #0]
 8026024:	9302      	str	r3, [sp, #8]
 8026026:	9101      	str	r1, [sp, #4]
 8026028:	9200      	str	r2, [sp, #0]
 802602a:	4603      	mov	r3, r0
 802602c:	4a17      	ldr	r2, [pc, #92]	; (802608c <RunMode_Obj_Init+0x194>)
 802602e:	2140      	movs	r1, #64	; 0x40
 8026030:	4817      	ldr	r0, [pc, #92]	; (8026090 <RunMode_Obj_Init+0x198>)
 8026032:	f005 f8b9 	bl	802b1a8 <sniprintf>
			RMhours,RMminutes,RMseconds,RMmilisecs);
	lv_label_set_text(RM_Lbl, runModeBuffer);
 8026036:	4b10      	ldr	r3, [pc, #64]	; (8026078 <RunMode_Obj_Init+0x180>)
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	4915      	ldr	r1, [pc, #84]	; (8026090 <RunMode_Obj_Init+0x198>)
 802603c:	4618      	mov	r0, r3
 802603e:	f7f6 fe39 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8026042:	4b0d      	ldr	r3, [pc, #52]	; (8026078 <RunMode_Obj_Init+0x180>)
 8026044:	6818      	ldr	r0, [r3, #0]
 8026046:	2328      	movs	r3, #40	; 0x28
 8026048:	9300      	str	r3, [sp, #0]
 802604a:	2300      	movs	r3, #0
 802604c:	2200      	movs	r2, #0
 802604e:	2100      	movs	r1, #0
 8026050:	f7e3 fbe6 	bl	8009820 <lv_obj_align>
}
 8026054:	bf00      	nop
 8026056:	3704      	adds	r7, #4
 8026058:	46bd      	mov	sp, r7
 802605a:	bd90      	pop	{r4, r7, pc}
 802605c:	2001ba40 	.word	0x2001ba40
 8026060:	2001af44 	.word	0x2001af44
 8026064:	2001bd8d 	.word	0x2001bd8d
 8026068:	0802d694 	.word	0x0802d694
 802606c:	200027ec 	.word	0x200027ec
 8026070:	2001af80 	.word	0x2001af80
 8026074:	2001bda4 	.word	0x2001bda4
 8026078:	2001bd44 	.word	0x2001bd44
 802607c:	2001bd41 	.word	0x2001bd41
 8026080:	2001bd88 	.word	0x2001bd88
 8026084:	2001bd94 	.word	0x2001bd94
 8026088:	2001bdd0 	.word	0x2001bdd0
 802608c:	0802d69c 	.word	0x0802d69c
 8026090:	2001bd48 	.word	0x2001bd48

08026094 <RunMode_kCals>:
/* This function using for initiation kCAls Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_kCals(bool theme){
 8026094:	b590      	push	{r4, r7, lr}
 8026096:	b087      	sub	sp, #28
 8026098:	af02      	add	r7, sp, #8
 802609a:	4603      	mov	r3, r0
 802609c:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802609e:	f7ff fe89 	bl	8025db4 <lv_scr_act>
 80260a2:	4603      	mov	r3, r0
 80260a4:	2100      	movs	r1, #0
 80260a6:	4618      	mov	r0, r3
 80260a8:	f7f6 f946 	bl	801c338 <lv_img_create>
 80260ac:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 80260ae:	79fb      	ldrb	r3, [r7, #7]
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	d004      	beq.n	80260be <RunMode_kCals+0x2a>
 80260b4:	494a      	ldr	r1, [pc, #296]	; (80261e0 <RunMode_kCals+0x14c>)
 80260b6:	68f8      	ldr	r0, [r7, #12]
 80260b8:	f7f6 f9dc 	bl	801c474 <lv_img_set_src>
 80260bc:	e003      	b.n	80260c6 <RunMode_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 80260be:	4949      	ldr	r1, [pc, #292]	; (80261e4 <RunMode_kCals+0x150>)
 80260c0:	68f8      	ldr	r0, [r7, #12]
 80260c2:	f7f6 f9d7 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -75, -60);
 80260c6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80260ca:	9300      	str	r3, [sp, #0]
 80260cc:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80260d0:	2200      	movs	r2, #0
 80260d2:	2100      	movs	r1, #0
 80260d4:	68f8      	ldr	r0, [r7, #12]
 80260d6:	f7e3 fba3 	bl	8009820 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 80260da:	f7ff fe6b 	bl	8025db4 <lv_scr_act>
 80260de:	4603      	mov	r3, r0
 80260e0:	2100      	movs	r1, #0
 80260e2:	4618      	mov	r0, r3
 80260e4:	f7f6 fcb4 	bl	801ca50 <lv_label_create>
 80260e8:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80260ea:	4a3f      	ldr	r2, [pc, #252]	; (80261e8 <RunMode_kCals+0x154>)
 80260ec:	2100      	movs	r1, #0
 80260ee:	68b8      	ldr	r0, [r7, #8]
 80260f0:	f7ff fe6b 	bl	8025dca <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 80260f4:	493d      	ldr	r1, [pc, #244]	; (80261ec <RunMode_kCals+0x158>)
 80260f6:	68b8      	ldr	r0, [r7, #8]
 80260f8:	f7f6 fddc 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -75, 3);
 80260fc:	2303      	movs	r3, #3
 80260fe:	9300      	str	r3, [sp, #0]
 8026100:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8026104:	2200      	movs	r2, #0
 8026106:	2100      	movs	r1, #0
 8026108:	68b8      	ldr	r0, [r7, #8]
 802610a:	f7e3 fb89 	bl	8009820 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 802610e:	4938      	ldr	r1, [pc, #224]	; (80261f0 <RunMode_kCals+0x15c>)
 8026110:	4838      	ldr	r0, [pc, #224]	; (80261f4 <RunMode_kCals+0x160>)
 8026112:	f7e5 fdc9 	bl	800bca8 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8026116:	4c37      	ldr	r4, [pc, #220]	; (80261f4 <RunMode_kCals+0x160>)
 8026118:	2269      	movs	r2, #105	; 0x69
 802611a:	21cd      	movs	r1, #205	; 0xcd
 802611c:	20ff      	movs	r0, #255	; 0xff
 802611e:	f7ff fe11 	bl	8025d44 <lv_color_make>
 8026122:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 8026124:	4b33      	ldr	r3, [pc, #204]	; (80261f4 <RunMode_kCals+0x160>)
 8026126:	2203      	movs	r2, #3
 8026128:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 802612a:	4c32      	ldr	r4, [pc, #200]	; (80261f4 <RunMode_kCals+0x160>)
 802612c:	2269      	movs	r2, #105	; 0x69
 802612e:	21cd      	movs	r1, #205	; 0xcd
 8026130:	20ff      	movs	r0, #255	; 0xff
 8026132:	f7ff fe07 	bl	8025d44 <lv_color_make>
 8026136:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8026138:	4b2e      	ldr	r3, [pc, #184]	; (80261f4 <RunMode_kCals+0x160>)
 802613a:	4a2f      	ldr	r2, [pc, #188]	; (80261f8 <RunMode_kCals+0x164>)
 802613c:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 802613e:	f7ff fe39 	bl	8025db4 <lv_scr_act>
 8026142:	4603      	mov	r3, r0
 8026144:	2100      	movs	r1, #0
 8026146:	4618      	mov	r0, r3
 8026148:	f7f1 fe80 	bl	8017e4c <lv_arc_create>
 802614c:	4602      	mov	r2, r0
 802614e:	4b2b      	ldr	r3, [pc, #172]	; (80261fc <RunMode_kCals+0x168>)
 8026150:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_kCalsArc, 60, 60);
 8026152:	4b2a      	ldr	r3, [pc, #168]	; (80261fc <RunMode_kCals+0x168>)
 8026154:	681b      	ldr	r3, [r3, #0]
 8026156:	223c      	movs	r2, #60	; 0x3c
 8026158:	213c      	movs	r1, #60	; 0x3c
 802615a:	4618      	mov	r0, r3
 802615c:	f7e3 fabd 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(RM_kCalsArc, 0, 360);
 8026160:	4b26      	ldr	r3, [pc, #152]	; (80261fc <RunMode_kCals+0x168>)
 8026162:	681b      	ldr	r3, [r3, #0]
 8026164:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8026168:	2100      	movs	r1, #0
 802616a:	4618      	mov	r0, r3
 802616c:	f7f1 feea 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(RM_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8026170:	4b22      	ldr	r3, [pc, #136]	; (80261fc <RunMode_kCals+0x168>)
 8026172:	681b      	ldr	r3, [r3, #0]
 8026174:	4a1f      	ldr	r2, [pc, #124]	; (80261f4 <RunMode_kCals+0x160>)
 8026176:	2100      	movs	r1, #0
 8026178:	4618      	mov	r0, r3
 802617a:	f7f1 ff0c 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(RM_kCalsArc, NULL, LV_ALIGN_CENTER, -75, -60);
 802617e:	4b1f      	ldr	r3, [pc, #124]	; (80261fc <RunMode_kCals+0x168>)
 8026180:	6818      	ldr	r0, [r3, #0]
 8026182:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8026186:	9300      	str	r3, [sp, #0]
 8026188:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 802618c:	2200      	movs	r2, #0
 802618e:	2100      	movs	r1, #0
 8026190:	f7e3 fb46 	bl	8009820 <lv_obj_align>

    RM_kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8026194:	f7ff fe0e 	bl	8025db4 <lv_scr_act>
 8026198:	4603      	mov	r3, r0
 802619a:	2100      	movs	r1, #0
 802619c:	4618      	mov	r0, r3
 802619e:	f7f6 fc57 	bl	801ca50 <lv_label_create>
 80261a2:	4602      	mov	r2, r0
 80261a4:	4b16      	ldr	r3, [pc, #88]	; (8026200 <RunMode_kCals+0x16c>)
 80261a6:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80261a8:	4b15      	ldr	r3, [pc, #84]	; (8026200 <RunMode_kCals+0x16c>)
 80261aa:	681b      	ldr	r3, [r3, #0]
 80261ac:	4a11      	ldr	r2, [pc, #68]	; (80261f4 <RunMode_kCals+0x160>)
 80261ae:	2100      	movs	r1, #0
 80261b0:	4618      	mov	r0, r3
 80261b2:	f7ff fe0a 	bl	8025dca <lv_label_set_style>
   	lv_label_set_text(RM_kCalsLbl, "0000");
 80261b6:	4b12      	ldr	r3, [pc, #72]	; (8026200 <RunMode_kCals+0x16c>)
 80261b8:	681b      	ldr	r3, [r3, #0]
 80261ba:	4912      	ldr	r1, [pc, #72]	; (8026204 <RunMode_kCals+0x170>)
 80261bc:	4618      	mov	r0, r3
 80261be:	f7f6 fd79 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 80261c2:	4b0f      	ldr	r3, [pc, #60]	; (8026200 <RunMode_kCals+0x16c>)
 80261c4:	6818      	ldr	r0, [r3, #0]
 80261c6:	f06f 030e 	mvn.w	r3, #14
 80261ca:	9300      	str	r3, [sp, #0]
 80261cc:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80261d0:	2200      	movs	r2, #0
 80261d2:	2100      	movs	r1, #0
 80261d4:	f7e3 fb24 	bl	8009820 <lv_obj_align>

}
 80261d8:	bf00      	nop
 80261da:	3714      	adds	r7, #20
 80261dc:	46bd      	mov	sp, r7
 80261de:	bd90      	pop	{r4, r7, pc}
 80261e0:	0803b840 	.word	0x0803b840
 80261e4:	0803c17c 	.word	0x0803c17c
 80261e8:	2001af04 	.word	0x2001af04
 80261ec:	0802d6cc 	.word	0x0802d6cc
 80261f0:	2001ba40 	.word	0x2001ba40
 80261f4:	2001afbc 	.word	0x2001afbc
 80261f8:	200027ec 	.word	0x200027ec
 80261fc:	2001bdc0 	.word	0x2001bdc0
 8026200:	2001bdb4 	.word	0x2001bdb4
 8026204:	0802d6d4 	.word	0x0802d6d4

08026208 <RunMode_Steps>:
/* This function using for initiation Steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Steps(bool theme){
 8026208:	b590      	push	{r4, r7, lr}
 802620a:	b087      	sub	sp, #28
 802620c:	af02      	add	r7, sp, #8
 802620e:	4603      	mov	r3, r0
 8026210:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8026212:	f7ff fdcf 	bl	8025db4 <lv_scr_act>
 8026216:	4603      	mov	r3, r0
 8026218:	2100      	movs	r1, #0
 802621a:	4618      	mov	r0, r3
 802621c:	f7f6 f88c 	bl	801c338 <lv_img_create>
 8026220:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8026222:	79fb      	ldrb	r3, [r7, #7]
 8026224:	2b00      	cmp	r3, #0
 8026226:	d004      	beq.n	8026232 <RunMode_Steps+0x2a>
 8026228:	4948      	ldr	r1, [pc, #288]	; (802634c <RunMode_Steps+0x144>)
 802622a:	68f8      	ldr	r0, [r7, #12]
 802622c:	f7f6 f922 	bl	801c474 <lv_img_set_src>
 8026230:	e003      	b.n	802623a <RunMode_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8026232:	4947      	ldr	r1, [pc, #284]	; (8026350 <RunMode_Steps+0x148>)
 8026234:	68f8      	ldr	r0, [r7, #12]
 8026236:	f7f6 f91d 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -60);
 802623a:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802623e:	9300      	str	r3, [sp, #0]
 8026240:	2300      	movs	r3, #0
 8026242:	2200      	movs	r2, #0
 8026244:	2100      	movs	r1, #0
 8026246:	68f8      	ldr	r0, [r7, #12]
 8026248:	f7e3 faea 	bl	8009820 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 802624c:	f7ff fdb2 	bl	8025db4 <lv_scr_act>
 8026250:	4603      	mov	r3, r0
 8026252:	2100      	movs	r1, #0
 8026254:	4618      	mov	r0, r3
 8026256:	f7f6 fbfb 	bl	801ca50 <lv_label_create>
 802625a:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802625c:	4a3d      	ldr	r2, [pc, #244]	; (8026354 <RunMode_Steps+0x14c>)
 802625e:	2100      	movs	r1, #0
 8026260:	68b8      	ldr	r0, [r7, #8]
 8026262:	f7ff fdb2 	bl	8025dca <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8026266:	493c      	ldr	r1, [pc, #240]	; (8026358 <RunMode_Steps+0x150>)
 8026268:	68b8      	ldr	r0, [r7, #8]
 802626a:	f7f6 fd23 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, 3);
 802626e:	2303      	movs	r3, #3
 8026270:	9300      	str	r3, [sp, #0]
 8026272:	2300      	movs	r3, #0
 8026274:	2200      	movs	r2, #0
 8026276:	2100      	movs	r1, #0
 8026278:	68b8      	ldr	r0, [r7, #8]
 802627a:	f7e3 fad1 	bl	8009820 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 802627e:	4937      	ldr	r1, [pc, #220]	; (802635c <RunMode_Steps+0x154>)
 8026280:	4837      	ldr	r0, [pc, #220]	; (8026360 <RunMode_Steps+0x158>)
 8026282:	f7e5 fd11 	bl	800bca8 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8026286:	4c36      	ldr	r4, [pc, #216]	; (8026360 <RunMode_Steps+0x158>)
 8026288:	2235      	movs	r2, #53	; 0x35
 802628a:	21cc      	movs	r1, #204	; 0xcc
 802628c:	2065      	movs	r0, #101	; 0x65
 802628e:	f7ff fd59 	bl	8025d44 <lv_color_make>
 8026292:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8026294:	4b32      	ldr	r3, [pc, #200]	; (8026360 <RunMode_Steps+0x158>)
 8026296:	2203      	movs	r2, #3
 8026298:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 802629a:	4c31      	ldr	r4, [pc, #196]	; (8026360 <RunMode_Steps+0x158>)
 802629c:	2235      	movs	r2, #53	; 0x35
 802629e:	21cc      	movs	r1, #204	; 0xcc
 80262a0:	2065      	movs	r0, #101	; 0x65
 80262a2:	f7ff fd4f 	bl	8025d44 <lv_color_make>
 80262a6:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 80262a8:	4b2d      	ldr	r3, [pc, #180]	; (8026360 <RunMode_Steps+0x158>)
 80262aa:	4a2e      	ldr	r2, [pc, #184]	; (8026364 <RunMode_Steps+0x15c>)
 80262ac:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80262ae:	f7ff fd81 	bl	8025db4 <lv_scr_act>
 80262b2:	4603      	mov	r3, r0
 80262b4:	2100      	movs	r1, #0
 80262b6:	4618      	mov	r0, r3
 80262b8:	f7f1 fdc8 	bl	8017e4c <lv_arc_create>
 80262bc:	4602      	mov	r2, r0
 80262be:	4b2a      	ldr	r3, [pc, #168]	; (8026368 <RunMode_Steps+0x160>)
 80262c0:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_stepsArc, 60, 60);
 80262c2:	4b29      	ldr	r3, [pc, #164]	; (8026368 <RunMode_Steps+0x160>)
 80262c4:	681b      	ldr	r3, [r3, #0]
 80262c6:	223c      	movs	r2, #60	; 0x3c
 80262c8:	213c      	movs	r1, #60	; 0x3c
 80262ca:	4618      	mov	r0, r3
 80262cc:	f7e3 fa05 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(RM_stepsArc, 0, 360);
 80262d0:	4b25      	ldr	r3, [pc, #148]	; (8026368 <RunMode_Steps+0x160>)
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80262d8:	2100      	movs	r1, #0
 80262da:	4618      	mov	r0, r3
 80262dc:	f7f1 fe32 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(RM_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 80262e0:	4b21      	ldr	r3, [pc, #132]	; (8026368 <RunMode_Steps+0x160>)
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	4a1e      	ldr	r2, [pc, #120]	; (8026360 <RunMode_Steps+0x158>)
 80262e6:	2100      	movs	r1, #0
 80262e8:	4618      	mov	r0, r3
 80262ea:	f7f1 fe54 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(RM_stepsArc, NULL, LV_ALIGN_CENTER, 0, -60);
 80262ee:	4b1e      	ldr	r3, [pc, #120]	; (8026368 <RunMode_Steps+0x160>)
 80262f0:	6818      	ldr	r0, [r3, #0]
 80262f2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80262f6:	9300      	str	r3, [sp, #0]
 80262f8:	2300      	movs	r3, #0
 80262fa:	2200      	movs	r2, #0
 80262fc:	2100      	movs	r1, #0
 80262fe:	f7e3 fa8f 	bl	8009820 <lv_obj_align>

    RM_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8026302:	f7ff fd57 	bl	8025db4 <lv_scr_act>
 8026306:	4603      	mov	r3, r0
 8026308:	2100      	movs	r1, #0
 802630a:	4618      	mov	r0, r3
 802630c:	f7f6 fba0 	bl	801ca50 <lv_label_create>
 8026310:	4602      	mov	r2, r0
 8026312:	4b16      	ldr	r3, [pc, #88]	; (802636c <RunMode_Steps+0x164>)
 8026314:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8026316:	4b15      	ldr	r3, [pc, #84]	; (802636c <RunMode_Steps+0x164>)
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	4a11      	ldr	r2, [pc, #68]	; (8026360 <RunMode_Steps+0x158>)
 802631c:	2100      	movs	r1, #0
 802631e:	4618      	mov	r0, r3
 8026320:	f7ff fd53 	bl	8025dca <lv_label_set_style>
   	lv_label_set_text(RM_stepsLbl, "00000");
 8026324:	4b11      	ldr	r3, [pc, #68]	; (802636c <RunMode_Steps+0x164>)
 8026326:	681b      	ldr	r3, [r3, #0]
 8026328:	4911      	ldr	r1, [pc, #68]	; (8026370 <RunMode_Steps+0x168>)
 802632a:	4618      	mov	r0, r3
 802632c:	f7f6 fcc2 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8026330:	4b0e      	ldr	r3, [pc, #56]	; (802636c <RunMode_Steps+0x164>)
 8026332:	6818      	ldr	r0, [r3, #0]
 8026334:	f06f 030e 	mvn.w	r3, #14
 8026338:	9300      	str	r3, [sp, #0]
 802633a:	2300      	movs	r3, #0
 802633c:	2200      	movs	r2, #0
 802633e:	2100      	movs	r1, #0
 8026340:	f7e3 fa6e 	bl	8009820 <lv_obj_align>

}
 8026344:	bf00      	nop
 8026346:	3714      	adds	r7, #20
 8026348:	46bd      	mov	sp, r7
 802634a:	bd90      	pop	{r4, r7, pc}
 802634c:	08042b80 	.word	0x08042b80
 8026350:	080434bc 	.word	0x080434bc
 8026354:	2001af04 	.word	0x2001af04
 8026358:	0802d6cc 	.word	0x0802d6cc
 802635c:	2001ba40 	.word	0x2001ba40
 8026360:	2001aff8 	.word	0x2001aff8
 8026364:	200027ec 	.word	0x200027ec
 8026368:	2001bdb8 	.word	0x2001bdb8
 802636c:	2001bd98 	.word	0x2001bd98
 8026370:	0802d6dc 	.word	0x0802d6dc

08026374 <RunMode_Distances>:
/* This function using for initiation Distances Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Distances(bool unitType,bool theme){
 8026374:	b590      	push	{r4, r7, lr}
 8026376:	b087      	sub	sp, #28
 8026378:	af02      	add	r7, sp, #8
 802637a:	4603      	mov	r3, r0
 802637c:	460a      	mov	r2, r1
 802637e:	71fb      	strb	r3, [r7, #7]
 8026380:	4613      	mov	r3, r2
 8026382:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8026384:	f7ff fd16 	bl	8025db4 <lv_scr_act>
 8026388:	4603      	mov	r3, r0
 802638a:	2100      	movs	r1, #0
 802638c:	4618      	mov	r0, r3
 802638e:	f7f5 ffd3 	bl	801c338 <lv_img_create>
 8026392:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 8026394:	79bb      	ldrb	r3, [r7, #6]
 8026396:	2b00      	cmp	r3, #0
 8026398:	d004      	beq.n	80263a4 <RunMode_Distances+0x30>
 802639a:	494d      	ldr	r1, [pc, #308]	; (80264d0 <RunMode_Distances+0x15c>)
 802639c:	68f8      	ldr	r0, [r7, #12]
 802639e:	f7f6 f869 	bl	801c474 <lv_img_set_src>
 80263a2:	e003      	b.n	80263ac <RunMode_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 80263a4:	494b      	ldr	r1, [pc, #300]	; (80264d4 <RunMode_Distances+0x160>)
 80263a6:	68f8      	ldr	r0, [r7, #12]
 80263a8:	f7f6 f864 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 75, -60);
 80263ac:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80263b0:	9300      	str	r3, [sp, #0]
 80263b2:	234b      	movs	r3, #75	; 0x4b
 80263b4:	2200      	movs	r2, #0
 80263b6:	2100      	movs	r1, #0
 80263b8:	68f8      	ldr	r0, [r7, #12]
 80263ba:	f7e3 fa31 	bl	8009820 <lv_obj_align>

 	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 80263be:	f7ff fcf9 	bl	8025db4 <lv_scr_act>
 80263c2:	4603      	mov	r3, r0
 80263c4:	2100      	movs	r1, #0
 80263c6:	4618      	mov	r0, r3
 80263c8:	f7f6 fb42 	bl	801ca50 <lv_label_create>
 80263cc:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80263ce:	4a42      	ldr	r2, [pc, #264]	; (80264d8 <RunMode_Distances+0x164>)
 80263d0:	2100      	movs	r1, #0
 80263d2:	68b8      	ldr	r0, [r7, #8]
 80263d4:	f7ff fcf9 	bl	8025dca <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 80263d8:	79fb      	ldrb	r3, [r7, #7]
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d004      	beq.n	80263e8 <RunMode_Distances+0x74>
 80263de:	493f      	ldr	r1, [pc, #252]	; (80264dc <RunMode_Distances+0x168>)
 80263e0:	68b8      	ldr	r0, [r7, #8]
 80263e2:	f7f6 fc67 	bl	801ccb4 <lv_label_set_text>
 80263e6:	e003      	b.n	80263f0 <RunMode_Distances+0x7c>
 	else lv_label_set_text(distDescLbl, "miles");
 80263e8:	493d      	ldr	r1, [pc, #244]	; (80264e0 <RunMode_Distances+0x16c>)
 80263ea:	68b8      	ldr	r0, [r7, #8]
 80263ec:	f7f6 fc62 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 75, 3);
 80263f0:	2303      	movs	r3, #3
 80263f2:	9300      	str	r3, [sp, #0]
 80263f4:	234b      	movs	r3, #75	; 0x4b
 80263f6:	2200      	movs	r2, #0
 80263f8:	2100      	movs	r1, #0
 80263fa:	68b8      	ldr	r0, [r7, #8]
 80263fc:	f7e3 fa10 	bl	8009820 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8026400:	4938      	ldr	r1, [pc, #224]	; (80264e4 <RunMode_Distances+0x170>)
 8026402:	4839      	ldr	r0, [pc, #228]	; (80264e8 <RunMode_Distances+0x174>)
 8026404:	f7e5 fc50 	bl	800bca8 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8026408:	4c37      	ldr	r4, [pc, #220]	; (80264e8 <RunMode_Distances+0x174>)
 802640a:	2220      	movs	r2, #32
 802640c:	2117      	movs	r1, #23
 802640e:	20d6      	movs	r0, #214	; 0xd6
 8026410:	f7ff fc98 	bl	8025d44 <lv_color_make>
 8026414:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8026416:	4b34      	ldr	r3, [pc, #208]	; (80264e8 <RunMode_Distances+0x174>)
 8026418:	2203      	movs	r2, #3
 802641a:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 802641c:	4c32      	ldr	r4, [pc, #200]	; (80264e8 <RunMode_Distances+0x174>)
 802641e:	2220      	movs	r2, #32
 8026420:	2117      	movs	r1, #23
 8026422:	20d6      	movs	r0, #214	; 0xd6
 8026424:	f7ff fc8e 	bl	8025d44 <lv_color_make>
 8026428:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 802642a:	4b2f      	ldr	r3, [pc, #188]	; (80264e8 <RunMode_Distances+0x174>)
 802642c:	4a2f      	ldr	r2, [pc, #188]	; (80264ec <RunMode_Distances+0x178>)
 802642e:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_distArc = lv_arc_create(lv_scr_act(), NULL);
 8026430:	f7ff fcc0 	bl	8025db4 <lv_scr_act>
 8026434:	4603      	mov	r3, r0
 8026436:	2100      	movs	r1, #0
 8026438:	4618      	mov	r0, r3
 802643a:	f7f1 fd07 	bl	8017e4c <lv_arc_create>
 802643e:	4602      	mov	r2, r0
 8026440:	4b2b      	ldr	r3, [pc, #172]	; (80264f0 <RunMode_Distances+0x17c>)
 8026442:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_distArc, 60, 60);
 8026444:	4b2a      	ldr	r3, [pc, #168]	; (80264f0 <RunMode_Distances+0x17c>)
 8026446:	681b      	ldr	r3, [r3, #0]
 8026448:	223c      	movs	r2, #60	; 0x3c
 802644a:	213c      	movs	r1, #60	; 0x3c
 802644c:	4618      	mov	r0, r3
 802644e:	f7e3 f944 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(RM_distArc, 0, 360);
 8026452:	4b27      	ldr	r3, [pc, #156]	; (80264f0 <RunMode_Distances+0x17c>)
 8026454:	681b      	ldr	r3, [r3, #0]
 8026456:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802645a:	2100      	movs	r1, #0
 802645c:	4618      	mov	r0, r3
 802645e:	f7f1 fd71 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(RM_distArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8026462:	4b23      	ldr	r3, [pc, #140]	; (80264f0 <RunMode_Distances+0x17c>)
 8026464:	681b      	ldr	r3, [r3, #0]
 8026466:	4a20      	ldr	r2, [pc, #128]	; (80264e8 <RunMode_Distances+0x174>)
 8026468:	2100      	movs	r1, #0
 802646a:	4618      	mov	r0, r3
 802646c:	f7f1 fd93 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(RM_distArc, NULL, LV_ALIGN_CENTER, 75, -60);
 8026470:	4b1f      	ldr	r3, [pc, #124]	; (80264f0 <RunMode_Distances+0x17c>)
 8026472:	6818      	ldr	r0, [r3, #0]
 8026474:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8026478:	9300      	str	r3, [sp, #0]
 802647a:	234b      	movs	r3, #75	; 0x4b
 802647c:	2200      	movs	r2, #0
 802647e:	2100      	movs	r1, #0
 8026480:	f7e3 f9ce 	bl	8009820 <lv_obj_align>

    RM_distLbl = lv_label_create(lv_scr_act(), NULL);
 8026484:	f7ff fc96 	bl	8025db4 <lv_scr_act>
 8026488:	4603      	mov	r3, r0
 802648a:	2100      	movs	r1, #0
 802648c:	4618      	mov	r0, r3
 802648e:	f7f6 fadf 	bl	801ca50 <lv_label_create>
 8026492:	4602      	mov	r2, r0
 8026494:	4b17      	ldr	r3, [pc, #92]	; (80264f4 <RunMode_Distances+0x180>)
 8026496:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_distLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 8026498:	4b16      	ldr	r3, [pc, #88]	; (80264f4 <RunMode_Distances+0x180>)
 802649a:	681b      	ldr	r3, [r3, #0]
 802649c:	4a12      	ldr	r2, [pc, #72]	; (80264e8 <RunMode_Distances+0x174>)
 802649e:	2100      	movs	r1, #0
 80264a0:	4618      	mov	r0, r3
 80264a2:	f7ff fc92 	bl	8025dca <lv_label_set_style>
   	lv_label_set_text(RM_distLbl, "00.000");
 80264a6:	4b13      	ldr	r3, [pc, #76]	; (80264f4 <RunMode_Distances+0x180>)
 80264a8:	681b      	ldr	r3, [r3, #0]
 80264aa:	4913      	ldr	r1, [pc, #76]	; (80264f8 <RunMode_Distances+0x184>)
 80264ac:	4618      	mov	r0, r3
 80264ae:	f7f6 fc01 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75, -15);
 80264b2:	4b10      	ldr	r3, [pc, #64]	; (80264f4 <RunMode_Distances+0x180>)
 80264b4:	6818      	ldr	r0, [r3, #0]
 80264b6:	f06f 030e 	mvn.w	r3, #14
 80264ba:	9300      	str	r3, [sp, #0]
 80264bc:	234b      	movs	r3, #75	; 0x4b
 80264be:	2200      	movs	r2, #0
 80264c0:	2100      	movs	r1, #0
 80264c2:	f7e3 f9ad 	bl	8009820 <lv_obj_align>
}
 80264c6:	bf00      	nop
 80264c8:	3714      	adds	r7, #20
 80264ca:	46bd      	mov	sp, r7
 80264cc:	bd90      	pop	{r4, r7, pc}
 80264ce:	bf00      	nop
 80264d0:	0803cab8 	.word	0x0803cab8
 80264d4:	0803d3f4 	.word	0x0803d3f4
 80264d8:	2001af04 	.word	0x2001af04
 80264dc:	0802d6e4 	.word	0x0802d6e4
 80264e0:	0802d6e8 	.word	0x0802d6e8
 80264e4:	2001ba40 	.word	0x2001ba40
 80264e8:	2001b034 	.word	0x2001b034
 80264ec:	200027ec 	.word	0x200027ec
 80264f0:	2001bdc8 	.word	0x2001bdc8
 80264f4:	2001bd90 	.word	0x2001bd90
 80264f8:	0802d6f0 	.word	0x0802d6f0

080264fc <RunModeScreen_Updater>:
/*This function using for update all updater functions*/
void RunModeScreen_Updater(lv_task_t *t){
 80264fc:	b580      	push	{r7, lr}
 80264fe:	b082      	sub	sp, #8
 8026500:	af00      	add	r7, sp, #0
 8026502:	6078      	str	r0, [r7, #4]
	if(RM_taskController){
 8026504:	4b09      	ldr	r3, [pc, #36]	; (802652c <RunModeScreen_Updater+0x30>)
 8026506:	781b      	ldrb	r3, [r3, #0]
 8026508:	2b00      	cmp	r3, #0
 802650a:	d008      	beq.n	802651e <RunModeScreen_Updater+0x22>
		 RunMode_RunMode_Updater();
 802650c:	f000 f810 	bl	8026530 <RunMode_RunMode_Updater>
		 RunMode_steps_angle_loader();
 8026510:	f000 f8ba 	bl	8026688 <RunMode_steps_angle_loader>
		 RunMode_kCals_angle_loader();
 8026514:	f000 f950 	bl	80267b8 <RunMode_kCals_angle_loader>
		 RunMode_distances_angle_loader();
 8026518:	f000 f9ea 	bl	80268f0 <RunMode_distances_angle_loader>
	}else lv_task_del(t);
}
 802651c:	e002      	b.n	8026524 <RunModeScreen_Updater+0x28>
	}else lv_task_del(t);
 802651e:	6878      	ldr	r0, [r7, #4]
 8026520:	f7f0 ff5c 	bl	80173dc <lv_task_del>
}
 8026524:	bf00      	nop
 8026526:	3708      	adds	r7, #8
 8026528:	46bd      	mov	sp, r7
 802652a:	bd80      	pop	{r7, pc}
 802652c:	2001bdb0 	.word	0x2001bdb0

08026530 <RunMode_RunMode_Updater>:
/*This function using for update to current label*/
void RunMode_RunMode_Updater(void){
 8026530:	b5b0      	push	{r4, r5, r7, lr}
 8026532:	b086      	sub	sp, #24
 8026534:	af04      	add	r7, sp, #16
		if(0==RMtimeSetVal){
 8026536:	4b48      	ldr	r3, [pc, #288]	; (8026658 <RunMode_RunMode_Updater+0x128>)
 8026538:	781b      	ldrb	r3, [r3, #0]
 802653a:	2b00      	cmp	r3, #0
 802653c:	d17e      	bne.n	802663c <RunMode_RunMode_Updater+0x10c>
			uint16_t targetValTmp = RMtargetSeconds+(RMtargetMinutes*60)+(RMtargetHours*60*60);
 802653e:	4b47      	ldr	r3, [pc, #284]	; (802665c <RunMode_RunMode_Updater+0x12c>)
 8026540:	781b      	ldrb	r3, [r3, #0]
 8026542:	b29a      	uxth	r2, r3
 8026544:	4b46      	ldr	r3, [pc, #280]	; (8026660 <RunMode_RunMode_Updater+0x130>)
 8026546:	781b      	ldrb	r3, [r3, #0]
 8026548:	b29b      	uxth	r3, r3
 802654a:	4619      	mov	r1, r3
 802654c:	0109      	lsls	r1, r1, #4
 802654e:	1acb      	subs	r3, r1, r3
 8026550:	4619      	mov	r1, r3
 8026552:	0109      	lsls	r1, r1, #4
 8026554:	1acb      	subs	r3, r1, r3
 8026556:	011b      	lsls	r3, r3, #4
 8026558:	b299      	uxth	r1, r3
 802655a:	4b42      	ldr	r3, [pc, #264]	; (8026664 <RunMode_RunMode_Updater+0x134>)
 802655c:	781b      	ldrb	r3, [r3, #0]
 802655e:	b29b      	uxth	r3, r3
 8026560:	4618      	mov	r0, r3
 8026562:	0100      	lsls	r0, r0, #4
 8026564:	1ac3      	subs	r3, r0, r3
 8026566:	009b      	lsls	r3, r3, #2
 8026568:	b29b      	uxth	r3, r3
 802656a:	440b      	add	r3, r1
 802656c:	b29b      	uxth	r3, r3
 802656e:	4413      	add	r3, r2
 8026570:	80fb      	strh	r3, [r7, #6]
			uint16_t nowValTmp = RMseconds+(RMminutes*60)+(RMhours*60*60);
 8026572:	4b3d      	ldr	r3, [pc, #244]	; (8026668 <RunMode_RunMode_Updater+0x138>)
 8026574:	781b      	ldrb	r3, [r3, #0]
 8026576:	b29a      	uxth	r2, r3
 8026578:	4b3c      	ldr	r3, [pc, #240]	; (802666c <RunMode_RunMode_Updater+0x13c>)
 802657a:	781b      	ldrb	r3, [r3, #0]
 802657c:	b29b      	uxth	r3, r3
 802657e:	4619      	mov	r1, r3
 8026580:	0109      	lsls	r1, r1, #4
 8026582:	1acb      	subs	r3, r1, r3
 8026584:	4619      	mov	r1, r3
 8026586:	0109      	lsls	r1, r1, #4
 8026588:	1acb      	subs	r3, r1, r3
 802658a:	011b      	lsls	r3, r3, #4
 802658c:	b299      	uxth	r1, r3
 802658e:	4b38      	ldr	r3, [pc, #224]	; (8026670 <RunMode_RunMode_Updater+0x140>)
 8026590:	781b      	ldrb	r3, [r3, #0]
 8026592:	b29b      	uxth	r3, r3
 8026594:	4618      	mov	r0, r3
 8026596:	0100      	lsls	r0, r0, #4
 8026598:	1ac3      	subs	r3, r0, r3
 802659a:	009b      	lsls	r3, r3, #2
 802659c:	b29b      	uxth	r3, r3
 802659e:	440b      	add	r3, r1
 80265a0:	b29b      	uxth	r3, r3
 80265a2:	4413      	add	r3, r2
 80265a4:	80bb      	strh	r3, [r7, #4]
			uint8_t targetBarTmp = tos_Ratio(nowValTmp, 0,targetValTmp ,0, 100);
 80265a6:	88bb      	ldrh	r3, [r7, #4]
 80265a8:	4618      	mov	r0, r3
 80265aa:	f7d9 ffbb 	bl	8000524 <__aeabi_ui2d>
 80265ae:	4604      	mov	r4, r0
 80265b0:	460d      	mov	r5, r1
 80265b2:	88fb      	ldrh	r3, [r7, #6]
 80265b4:	4618      	mov	r0, r3
 80265b6:	f7d9 ffb5 	bl	8000524 <__aeabi_ui2d>
 80265ba:	4602      	mov	r2, r0
 80265bc:	460b      	mov	r3, r1
 80265be:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8026648 <RunMode_RunMode_Updater+0x118>
 80265c2:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8026650 <RunMode_RunMode_Updater+0x120>
 80265c6:	ec43 2b12 	vmov	d2, r2, r3
 80265ca:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8026650 <RunMode_RunMode_Updater+0x120>
 80265ce:	ec45 4b10 	vmov	d0, r4, r5
 80265d2:	f003 fe15 	bl	802a200 <tos_Ratio>
 80265d6:	ec54 3b10 	vmov	r3, r4, d0
 80265da:	4618      	mov	r0, r3
 80265dc:	4621      	mov	r1, r4
 80265de:	f7da facb 	bl	8000b78 <__aeabi_d2uiz>
 80265e2:	4603      	mov	r3, r0
 80265e4:	70fb      	strb	r3, [r7, #3]
		    lv_bar_set_value(RM_targetTimeBar, targetBarTmp, LV_ANIM_OFF);
 80265e6:	4b23      	ldr	r3, [pc, #140]	; (8026674 <RunMode_RunMode_Updater+0x144>)
 80265e8:	681b      	ldr	r3, [r3, #0]
 80265ea:	78fa      	ldrb	r2, [r7, #3]
 80265ec:	b211      	sxth	r1, r2
 80265ee:	2200      	movs	r2, #0
 80265f0:	4618      	mov	r0, r3
 80265f2:	f7f1 ffa1 	bl	8018538 <lv_bar_set_value>

		snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80265f6:	4b1d      	ldr	r3, [pc, #116]	; (802666c <RunMode_RunMode_Updater+0x13c>)
 80265f8:	781b      	ldrb	r3, [r3, #0]
 80265fa:	4618      	mov	r0, r3
 80265fc:	4b1c      	ldr	r3, [pc, #112]	; (8026670 <RunMode_RunMode_Updater+0x140>)
 80265fe:	781b      	ldrb	r3, [r3, #0]
 8026600:	461a      	mov	r2, r3
 8026602:	4b19      	ldr	r3, [pc, #100]	; (8026668 <RunMode_RunMode_Updater+0x138>)
 8026604:	781b      	ldrb	r3, [r3, #0]
 8026606:	4619      	mov	r1, r3
 8026608:	4b1b      	ldr	r3, [pc, #108]	; (8026678 <RunMode_RunMode_Updater+0x148>)
 802660a:	881b      	ldrh	r3, [r3, #0]
 802660c:	9302      	str	r3, [sp, #8]
 802660e:	9101      	str	r1, [sp, #4]
 8026610:	9200      	str	r2, [sp, #0]
 8026612:	4603      	mov	r3, r0
 8026614:	4a19      	ldr	r2, [pc, #100]	; (802667c <RunMode_RunMode_Updater+0x14c>)
 8026616:	2140      	movs	r1, #64	; 0x40
 8026618:	4819      	ldr	r0, [pc, #100]	; (8026680 <RunMode_RunMode_Updater+0x150>)
 802661a:	f004 fdc5 	bl	802b1a8 <sniprintf>
				RMhours,RMminutes,RMseconds,RMmilisecs);
		lv_label_set_text(RM_Lbl, runModeBuffer);
 802661e:	4b19      	ldr	r3, [pc, #100]	; (8026684 <RunMode_RunMode_Updater+0x154>)
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	4917      	ldr	r1, [pc, #92]	; (8026680 <RunMode_RunMode_Updater+0x150>)
 8026624:	4618      	mov	r0, r3
 8026626:	f7f6 fb45 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 802662a:	4b16      	ldr	r3, [pc, #88]	; (8026684 <RunMode_RunMode_Updater+0x154>)
 802662c:	6818      	ldr	r0, [r3, #0]
 802662e:	2328      	movs	r3, #40	; 0x28
 8026630:	9300      	str	r3, [sp, #0]
 8026632:	2300      	movs	r3, #0
 8026634:	2200      	movs	r2, #0
 8026636:	2100      	movs	r1, #0
 8026638:	f7e3 f8f2 	bl	8009820 <lv_obj_align>
	}
}
 802663c:	bf00      	nop
 802663e:	3708      	adds	r7, #8
 8026640:	46bd      	mov	sp, r7
 8026642:	bdb0      	pop	{r4, r5, r7, pc}
 8026644:	f3af 8000 	nop.w
 8026648:	00000000 	.word	0x00000000
 802664c:	40590000 	.word	0x40590000
	...
 8026658:	2001bd8c 	.word	0x2001bd8c
 802665c:	2001bdbc 	.word	0x2001bdbc
 8026660:	2001bda8 	.word	0x2001bda8
 8026664:	2001bdb1 	.word	0x2001bdb1
 8026668:	2001bd94 	.word	0x2001bd94
 802666c:	2001bd41 	.word	0x2001bd41
 8026670:	2001bd88 	.word	0x2001bd88
 8026674:	2001bda4 	.word	0x2001bda4
 8026678:	2001bdd0 	.word	0x2001bdd0
 802667c:	0802d69c 	.word	0x0802d69c
 8026680:	2001bd48 	.word	0x2001bd48
 8026684:	2001bd44 	.word	0x2001bd44

08026688 <RunMode_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void RunMode_steps_angle_loader(void)
{	    snprintf(runModeBuffer,8, "%05d",(RMsteps-RMstepsBeff));
 8026688:	b590      	push	{r4, r7, lr}
 802668a:	b085      	sub	sp, #20
 802668c:	af02      	add	r7, sp, #8
 802668e:	4b42      	ldr	r3, [pc, #264]	; (8026798 <RunMode_steps_angle_loader+0x110>)
 8026690:	881b      	ldrh	r3, [r3, #0]
 8026692:	461a      	mov	r2, r3
 8026694:	4b41      	ldr	r3, [pc, #260]	; (802679c <RunMode_steps_angle_loader+0x114>)
 8026696:	881b      	ldrh	r3, [r3, #0]
 8026698:	1ad3      	subs	r3, r2, r3
 802669a:	4a41      	ldr	r2, [pc, #260]	; (80267a0 <RunMode_steps_angle_loader+0x118>)
 802669c:	2108      	movs	r1, #8
 802669e:	4841      	ldr	r0, [pc, #260]	; (80267a4 <RunMode_steps_angle_loader+0x11c>)
 80266a0:	f004 fd82 	bl	802b1a8 <sniprintf>
 		lv_label_set_text(RM_stepsLbl, runModeBuffer);
 80266a4:	4b40      	ldr	r3, [pc, #256]	; (80267a8 <RunMode_steps_angle_loader+0x120>)
 80266a6:	681b      	ldr	r3, [r3, #0]
 80266a8:	493e      	ldr	r1, [pc, #248]	; (80267a4 <RunMode_steps_angle_loader+0x11c>)
 80266aa:	4618      	mov	r0, r3
 80266ac:	f7f6 fb02 	bl	801ccb4 <lv_label_set_text>
 		lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 80266b0:	4b3d      	ldr	r3, [pc, #244]	; (80267a8 <RunMode_steps_angle_loader+0x120>)
 80266b2:	6818      	ldr	r0, [r3, #0]
 80266b4:	f06f 030e 	mvn.w	r3, #14
 80266b8:	9300      	str	r3, [sp, #0]
 80266ba:	2300      	movs	r3, #0
 80266bc:	2200      	movs	r2, #0
 80266be:	2100      	movs	r1, #0
 80266c0:	f7e3 f8ae 	bl	8009820 <lv_obj_align>

 		if((RMsteps-RMstepsBeff)<=10000){
 80266c4:	4b34      	ldr	r3, [pc, #208]	; (8026798 <RunMode_steps_angle_loader+0x110>)
 80266c6:	881b      	ldrh	r3, [r3, #0]
 80266c8:	461a      	mov	r2, r3
 80266ca:	4b34      	ldr	r3, [pc, #208]	; (802679c <RunMode_steps_angle_loader+0x114>)
 80266cc:	881b      	ldrh	r3, [r3, #0]
 80266ce:	1ad3      	subs	r3, r2, r3
 80266d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80266d4:	4293      	cmp	r3, r2
 80266d6:	dc4f      	bgt.n	8026778 <RunMode_steps_angle_loader+0xf0>
 			double stepsTemp = tos_Ratio((RMsteps-RMstepsBeff), 0, 10000, 0, 359);
 80266d8:	4b2f      	ldr	r3, [pc, #188]	; (8026798 <RunMode_steps_angle_loader+0x110>)
 80266da:	881b      	ldrh	r3, [r3, #0]
 80266dc:	461a      	mov	r2, r3
 80266de:	4b2f      	ldr	r3, [pc, #188]	; (802679c <RunMode_steps_angle_loader+0x114>)
 80266e0:	881b      	ldrh	r3, [r3, #0]
 80266e2:	1ad3      	subs	r3, r2, r3
 80266e4:	4618      	mov	r0, r3
 80266e6:	f7d9 ff2d 	bl	8000544 <__aeabi_i2d>
 80266ea:	4603      	mov	r3, r0
 80266ec:	460c      	mov	r4, r1
 80266ee:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8026780 <RunMode_steps_angle_loader+0xf8>
 80266f2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8026788 <RunMode_steps_angle_loader+0x100>
 80266f6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8026790 <RunMode_steps_angle_loader+0x108>
 80266fa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8026788 <RunMode_steps_angle_loader+0x100>
 80266fe:	ec44 3b10 	vmov	d0, r3, r4
 8026702:	f003 fd7d 	bl	802a200 <tos_Ratio>
 8026706:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(RM_stepsArc, 180-stepsTemp ,180);
 802670a:	f04f 0200 	mov.w	r2, #0
 802670e:	4b27      	ldr	r3, [pc, #156]	; (80267ac <RunMode_steps_angle_loader+0x124>)
 8026710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8026714:	f7da f9f2 	bl	8000afc <__aeabi_dcmplt>
 8026718:	4603      	mov	r3, r0
 802671a:	2b00      	cmp	r3, #0
 802671c:	d016      	beq.n	802674c <RunMode_steps_angle_loader+0xc4>
 802671e:	4b24      	ldr	r3, [pc, #144]	; (80267b0 <RunMode_steps_angle_loader+0x128>)
 8026720:	681c      	ldr	r4, [r3, #0]
 8026722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026726:	f04f 0000 	mov.w	r0, #0
 802672a:	4920      	ldr	r1, [pc, #128]	; (80267ac <RunMode_steps_angle_loader+0x124>)
 802672c:	f7d9 fdbc 	bl	80002a8 <__aeabi_dsub>
 8026730:	4602      	mov	r2, r0
 8026732:	460b      	mov	r3, r1
 8026734:	4610      	mov	r0, r2
 8026736:	4619      	mov	r1, r3
 8026738:	f7da fa1e 	bl	8000b78 <__aeabi_d2uiz>
 802673c:	4603      	mov	r3, r0
 802673e:	b29b      	uxth	r3, r3
 8026740:	22b4      	movs	r2, #180	; 0xb4
 8026742:	4619      	mov	r1, r3
 8026744:	4620      	mov	r0, r4
 8026746:	f7f1 fbfd 	bl	8017f44 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 		}
}
 802674a:	e015      	b.n	8026778 <RunMode_steps_angle_loader+0xf0>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 802674c:	4b18      	ldr	r3, [pc, #96]	; (80267b0 <RunMode_steps_angle_loader+0x128>)
 802674e:	681c      	ldr	r4, [r3, #0]
 8026750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026754:	f04f 0000 	mov.w	r0, #0
 8026758:	4916      	ldr	r1, [pc, #88]	; (80267b4 <RunMode_steps_angle_loader+0x12c>)
 802675a:	f7d9 fda5 	bl	80002a8 <__aeabi_dsub>
 802675e:	4602      	mov	r2, r0
 8026760:	460b      	mov	r3, r1
 8026762:	4610      	mov	r0, r2
 8026764:	4619      	mov	r1, r3
 8026766:	f7da fa07 	bl	8000b78 <__aeabi_d2uiz>
 802676a:	4603      	mov	r3, r0
 802676c:	b29b      	uxth	r3, r3
 802676e:	22b4      	movs	r2, #180	; 0xb4
 8026770:	4619      	mov	r1, r3
 8026772:	4620      	mov	r0, r4
 8026774:	f7f1 fbe6 	bl	8017f44 <lv_arc_set_angles>
}
 8026778:	bf00      	nop
 802677a:	370c      	adds	r7, #12
 802677c:	46bd      	mov	sp, r7
 802677e:	bd90      	pop	{r4, r7, pc}
 8026780:	00000000 	.word	0x00000000
 8026784:	40767000 	.word	0x40767000
	...
 8026794:	40c38800 	.word	0x40c38800
 8026798:	2001bdce 	.word	0x2001bdce
 802679c:	2001bdc6 	.word	0x2001bdc6
 80267a0:	0802d6f8 	.word	0x0802d6f8
 80267a4:	2001bd48 	.word	0x2001bd48
 80267a8:	2001bd98 	.word	0x2001bd98
 80267ac:	40668000 	.word	0x40668000
 80267b0:	2001bdb8 	.word	0x2001bdb8
 80267b4:	4080e000 	.word	0x4080e000

080267b8 <RunMode_kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_kCals_angle_loader(void)
{ 		snprintf(runModeBuffer,8, "%05d",(RMkCals-RMkCalsBeff));
 80267b8:	b590      	push	{r4, r7, lr}
 80267ba:	b085      	sub	sp, #20
 80267bc:	af02      	add	r7, sp, #8
 80267be:	4b44      	ldr	r3, [pc, #272]	; (80268d0 <RunMode_kCals_angle_loader+0x118>)
 80267c0:	881b      	ldrh	r3, [r3, #0]
 80267c2:	461a      	mov	r2, r3
 80267c4:	4b43      	ldr	r3, [pc, #268]	; (80268d4 <RunMode_kCals_angle_loader+0x11c>)
 80267c6:	881b      	ldrh	r3, [r3, #0]
 80267c8:	1ad3      	subs	r3, r2, r3
 80267ca:	4a43      	ldr	r2, [pc, #268]	; (80268d8 <RunMode_kCals_angle_loader+0x120>)
 80267cc:	2108      	movs	r1, #8
 80267ce:	4843      	ldr	r0, [pc, #268]	; (80268dc <RunMode_kCals_angle_loader+0x124>)
 80267d0:	f004 fcea 	bl	802b1a8 <sniprintf>
 		lv_label_set_text(RM_kCalsLbl, runModeBuffer);
 80267d4:	4b42      	ldr	r3, [pc, #264]	; (80268e0 <RunMode_kCals_angle_loader+0x128>)
 80267d6:	681b      	ldr	r3, [r3, #0]
 80267d8:	4940      	ldr	r1, [pc, #256]	; (80268dc <RunMode_kCals_angle_loader+0x124>)
 80267da:	4618      	mov	r0, r3
 80267dc:	f7f6 fa6a 	bl	801ccb4 <lv_label_set_text>
 	   	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 80267e0:	4b3f      	ldr	r3, [pc, #252]	; (80268e0 <RunMode_kCals_angle_loader+0x128>)
 80267e2:	6818      	ldr	r0, [r3, #0]
 80267e4:	f06f 030e 	mvn.w	r3, #14
 80267e8:	9300      	str	r3, [sp, #0]
 80267ea:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80267ee:	2200      	movs	r2, #0
 80267f0:	2100      	movs	r1, #0
 80267f2:	f7e3 f815 	bl	8009820 <lv_obj_align>

 	   	if((RMkCals-RMkCalsBeff)<=10000){
 80267f6:	4b36      	ldr	r3, [pc, #216]	; (80268d0 <RunMode_kCals_angle_loader+0x118>)
 80267f8:	881b      	ldrh	r3, [r3, #0]
 80267fa:	461a      	mov	r2, r3
 80267fc:	4b35      	ldr	r3, [pc, #212]	; (80268d4 <RunMode_kCals_angle_loader+0x11c>)
 80267fe:	881b      	ldrh	r3, [r3, #0]
 8026800:	1ad3      	subs	r3, r2, r3
 8026802:	f242 7210 	movw	r2, #10000	; 0x2710
 8026806:	4293      	cmp	r3, r2
 8026808:	dc4f      	bgt.n	80268aa <RunMode_kCals_angle_loader+0xf2>
 			double kCalsTemp = tos_Ratio((RMkCals-RMkCalsBeff), 0, 10000, 0, 359);
 802680a:	4b31      	ldr	r3, [pc, #196]	; (80268d0 <RunMode_kCals_angle_loader+0x118>)
 802680c:	881b      	ldrh	r3, [r3, #0]
 802680e:	461a      	mov	r2, r3
 8026810:	4b30      	ldr	r3, [pc, #192]	; (80268d4 <RunMode_kCals_angle_loader+0x11c>)
 8026812:	881b      	ldrh	r3, [r3, #0]
 8026814:	1ad3      	subs	r3, r2, r3
 8026816:	4618      	mov	r0, r3
 8026818:	f7d9 fe94 	bl	8000544 <__aeabi_i2d>
 802681c:	4603      	mov	r3, r0
 802681e:	460c      	mov	r4, r1
 8026820:	ed9f 4b25 	vldr	d4, [pc, #148]	; 80268b8 <RunMode_kCals_angle_loader+0x100>
 8026824:	ed9f 3b26 	vldr	d3, [pc, #152]	; 80268c0 <RunMode_kCals_angle_loader+0x108>
 8026828:	ed9f 2b27 	vldr	d2, [pc, #156]	; 80268c8 <RunMode_kCals_angle_loader+0x110>
 802682c:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80268c0 <RunMode_kCals_angle_loader+0x108>
 8026830:	ec44 3b10 	vmov	d0, r3, r4
 8026834:	f003 fce4 	bl	802a200 <tos_Ratio>
 8026838:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(RM_kCalsArc, 180-kCalsTemp ,180);
 802683c:	f04f 0200 	mov.w	r2, #0
 8026840:	4b28      	ldr	r3, [pc, #160]	; (80268e4 <RunMode_kCals_angle_loader+0x12c>)
 8026842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8026846:	f7da f959 	bl	8000afc <__aeabi_dcmplt>
 802684a:	4603      	mov	r3, r0
 802684c:	2b00      	cmp	r3, #0
 802684e:	d016      	beq.n	802687e <RunMode_kCals_angle_loader+0xc6>
 8026850:	4b25      	ldr	r3, [pc, #148]	; (80268e8 <RunMode_kCals_angle_loader+0x130>)
 8026852:	681c      	ldr	r4, [r3, #0]
 8026854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026858:	f04f 0000 	mov.w	r0, #0
 802685c:	4921      	ldr	r1, [pc, #132]	; (80268e4 <RunMode_kCals_angle_loader+0x12c>)
 802685e:	f7d9 fd23 	bl	80002a8 <__aeabi_dsub>
 8026862:	4602      	mov	r2, r0
 8026864:	460b      	mov	r3, r1
 8026866:	4610      	mov	r0, r2
 8026868:	4619      	mov	r1, r3
 802686a:	f7da f985 	bl	8000b78 <__aeabi_d2uiz>
 802686e:	4603      	mov	r3, r0
 8026870:	b29b      	uxth	r3, r3
 8026872:	22b4      	movs	r2, #180	; 0xb4
 8026874:	4619      	mov	r1, r3
 8026876:	4620      	mov	r0, r4
 8026878:	f7f1 fb64 	bl	8017f44 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 802687c:	e015      	b.n	80268aa <RunMode_kCals_angle_loader+0xf2>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 802687e:	4b1a      	ldr	r3, [pc, #104]	; (80268e8 <RunMode_kCals_angle_loader+0x130>)
 8026880:	681c      	ldr	r4, [r3, #0]
 8026882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026886:	f04f 0000 	mov.w	r0, #0
 802688a:	4918      	ldr	r1, [pc, #96]	; (80268ec <RunMode_kCals_angle_loader+0x134>)
 802688c:	f7d9 fd0c 	bl	80002a8 <__aeabi_dsub>
 8026890:	4602      	mov	r2, r0
 8026892:	460b      	mov	r3, r1
 8026894:	4610      	mov	r0, r2
 8026896:	4619      	mov	r1, r3
 8026898:	f7da f96e 	bl	8000b78 <__aeabi_d2uiz>
 802689c:	4603      	mov	r3, r0
 802689e:	b29b      	uxth	r3, r3
 80268a0:	22b4      	movs	r2, #180	; 0xb4
 80268a2:	4619      	mov	r1, r3
 80268a4:	4620      	mov	r0, r4
 80268a6:	f7f1 fb4d 	bl	8017f44 <lv_arc_set_angles>
}
 80268aa:	bf00      	nop
 80268ac:	370c      	adds	r7, #12
 80268ae:	46bd      	mov	sp, r7
 80268b0:	bd90      	pop	{r4, r7, pc}
 80268b2:	bf00      	nop
 80268b4:	f3af 8000 	nop.w
 80268b8:	00000000 	.word	0x00000000
 80268bc:	40767000 	.word	0x40767000
	...
 80268cc:	40c38800 	.word	0x40c38800
 80268d0:	2001bd8a 	.word	0x2001bd8a
 80268d4:	2001bda0 	.word	0x2001bda0
 80268d8:	0802d6f8 	.word	0x0802d6f8
 80268dc:	2001bd48 	.word	0x2001bd48
 80268e0:	2001bdb4 	.word	0x2001bdb4
 80268e4:	40668000 	.word	0x40668000
 80268e8:	2001bdc0 	.word	0x2001bdc0
 80268ec:	4080e000 	.word	0x4080e000

080268f0 <RunMode_distances_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_distances_angle_loader(void){
 80268f0:	b590      	push	{r4, r7, lr}
 80268f2:	b089      	sub	sp, #36	; 0x24
 80268f4:	af02      	add	r7, sp, #8
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 80268f6:	4b54      	ldr	r3, [pc, #336]	; (8026a48 <RunMode_distances_angle_loader+0x158>)
 80268f8:	781a      	ldrb	r2, [r3, #0]
 80268fa:	4b54      	ldr	r3, [pc, #336]	; (8026a4c <RunMode_distances_angle_loader+0x15c>)
 80268fc:	881b      	ldrh	r3, [r3, #0]
 80268fe:	4619      	mov	r1, r3
 8026900:	4610      	mov	r0, r2
 8026902:	f003 fcf9 	bl	802a2f8 <tos_distance_Calc>
 8026906:	eef0 7a40 	vmov.f32	s15, s0
 802690a:	4b51      	ldr	r3, [pc, #324]	; (8026a50 <RunMode_distances_angle_loader+0x160>)
 802690c:	edc3 7a00 	vstr	s15, [r3]
		float distTmp =RMdistances-RMdistancesBeff;
 8026910:	4b4f      	ldr	r3, [pc, #316]	; (8026a50 <RunMode_distances_angle_loader+0x160>)
 8026912:	ed93 7a00 	vldr	s14, [r3]
 8026916:	4b4f      	ldr	r3, [pc, #316]	; (8026a54 <RunMode_distances_angle_loader+0x164>)
 8026918:	edd3 7a00 	vldr	s15, [r3]
 802691c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026920:	edc7 7a05 	vstr	s15, [r7, #20]
		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 8026924:	edd7 7a05 	vldr	s15, [r7, #20]
 8026928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802692c:	ee17 3a90 	vmov	r3, s15
 8026930:	827b      	strh	r3, [r7, #18]
 8026932:	8a7b      	ldrh	r3, [r7, #18]
 8026934:	ee07 3a90 	vmov	s15, r3
 8026938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802693c:	ed97 7a05 	vldr	s14, [r7, #20]
 8026940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026944:	edc7 7a03 	vstr	s15, [r7, #12]
 8026948:	edd7 7a03 	vldr	s15, [r7, #12]
 802694c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8026a58 <RunMode_distances_angle_loader+0x168>
 8026950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026954:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(runModeBuffer,8, "%02d.%03d",tmp1,(uint16_t)tmp2);
 8026958:	8a7b      	ldrh	r3, [r7, #18]
 802695a:	edd7 7a03 	vldr	s15, [r7, #12]
 802695e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026962:	ee17 2a90 	vmov	r2, s15
 8026966:	b292      	uxth	r2, r2
 8026968:	9200      	str	r2, [sp, #0]
 802696a:	4a3c      	ldr	r2, [pc, #240]	; (8026a5c <RunMode_distances_angle_loader+0x16c>)
 802696c:	2108      	movs	r1, #8
 802696e:	483c      	ldr	r0, [pc, #240]	; (8026a60 <RunMode_distances_angle_loader+0x170>)
 8026970:	f004 fc1a 	bl	802b1a8 <sniprintf>
	 	lv_label_set_text(RM_distLbl, runModeBuffer);
 8026974:	4b3b      	ldr	r3, [pc, #236]	; (8026a64 <RunMode_distances_angle_loader+0x174>)
 8026976:	681b      	ldr	r3, [r3, #0]
 8026978:	4939      	ldr	r1, [pc, #228]	; (8026a60 <RunMode_distances_angle_loader+0x170>)
 802697a:	4618      	mov	r0, r3
 802697c:	f7f6 f99a 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75,-15);
 8026980:	4b38      	ldr	r3, [pc, #224]	; (8026a64 <RunMode_distances_angle_loader+0x174>)
 8026982:	6818      	ldr	r0, [r3, #0]
 8026984:	f06f 030e 	mvn.w	r3, #14
 8026988:	9300      	str	r3, [sp, #0]
 802698a:	234b      	movs	r3, #75	; 0x4b
 802698c:	2200      	movs	r2, #0
 802698e:	2100      	movs	r1, #0
 8026990:	f7e2 ff46 	bl	8009820 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8026994:	6978      	ldr	r0, [r7, #20]
 8026996:	f7d9 fde7 	bl	8000568 <__aeabi_f2d>
 802699a:	4603      	mov	r3, r0
 802699c:	460c      	mov	r4, r1
 802699e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8026a30 <RunMode_distances_angle_loader+0x140>
 80269a2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8026a38 <RunMode_distances_angle_loader+0x148>
 80269a6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8026a40 <RunMode_distances_angle_loader+0x150>
 80269aa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8026a38 <RunMode_distances_angle_loader+0x148>
 80269ae:	ec44 3b10 	vmov	d0, r3, r4
 80269b2:	f003 fc25 	bl	802a200 <tos_Ratio>
 80269b6:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(RM_distArc, 180-distanceTemp ,180);
 80269ba:	f04f 0200 	mov.w	r2, #0
 80269be:	4b2a      	ldr	r3, [pc, #168]	; (8026a68 <RunMode_distances_angle_loader+0x178>)
 80269c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80269c4:	f7da f89a 	bl	8000afc <__aeabi_dcmplt>
 80269c8:	4603      	mov	r3, r0
 80269ca:	2b00      	cmp	r3, #0
 80269cc:	d016      	beq.n	80269fc <RunMode_distances_angle_loader+0x10c>
 80269ce:	4b27      	ldr	r3, [pc, #156]	; (8026a6c <RunMode_distances_angle_loader+0x17c>)
 80269d0:	681c      	ldr	r4, [r3, #0]
 80269d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80269d6:	f04f 0000 	mov.w	r0, #0
 80269da:	4923      	ldr	r1, [pc, #140]	; (8026a68 <RunMode_distances_angle_loader+0x178>)
 80269dc:	f7d9 fc64 	bl	80002a8 <__aeabi_dsub>
 80269e0:	4602      	mov	r2, r0
 80269e2:	460b      	mov	r3, r1
 80269e4:	4610      	mov	r0, r2
 80269e6:	4619      	mov	r1, r3
 80269e8:	f7da f8c6 	bl	8000b78 <__aeabi_d2uiz>
 80269ec:	4603      	mov	r3, r0
 80269ee:	b29b      	uxth	r3, r3
 80269f0:	22b4      	movs	r2, #180	; 0xb4
 80269f2:	4619      	mov	r1, r3
 80269f4:	4620      	mov	r0, r4
 80269f6:	f7f1 faa5 	bl	8017f44 <lv_arc_set_angles>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
}
 80269fa:	e015      	b.n	8026a28 <RunMode_distances_angle_loader+0x138>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
 80269fc:	4b1b      	ldr	r3, [pc, #108]	; (8026a6c <RunMode_distances_angle_loader+0x17c>)
 80269fe:	681c      	ldr	r4, [r3, #0]
 8026a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026a04:	f04f 0000 	mov.w	r0, #0
 8026a08:	4919      	ldr	r1, [pc, #100]	; (8026a70 <RunMode_distances_angle_loader+0x180>)
 8026a0a:	f7d9 fc4d 	bl	80002a8 <__aeabi_dsub>
 8026a0e:	4602      	mov	r2, r0
 8026a10:	460b      	mov	r3, r1
 8026a12:	4610      	mov	r0, r2
 8026a14:	4619      	mov	r1, r3
 8026a16:	f7da f8af 	bl	8000b78 <__aeabi_d2uiz>
 8026a1a:	4603      	mov	r3, r0
 8026a1c:	b29b      	uxth	r3, r3
 8026a1e:	22b4      	movs	r2, #180	; 0xb4
 8026a20:	4619      	mov	r1, r3
 8026a22:	4620      	mov	r0, r4
 8026a24:	f7f1 fa8e 	bl	8017f44 <lv_arc_set_angles>
}
 8026a28:	bf00      	nop
 8026a2a:	371c      	adds	r7, #28
 8026a2c:	46bd      	mov	sp, r7
 8026a2e:	bd90      	pop	{r4, r7, pc}
 8026a30:	00000000 	.word	0x00000000
 8026a34:	40767000 	.word	0x40767000
	...
 8026a44:	408f4000 	.word	0x408f4000
 8026a48:	2001bd40 	.word	0x2001bd40
 8026a4c:	2001bdce 	.word	0x2001bdce
 8026a50:	2001bdac 	.word	0x2001bdac
 8026a54:	2001bd9c 	.word	0x2001bd9c
 8026a58:	447a0000 	.word	0x447a0000
 8026a5c:	0802d700 	.word	0x0802d700
 8026a60:	2001bd48 	.word	0x2001bd48
 8026a64:	2001bd90 	.word	0x2001bd90
 8026a68:	40668000 	.word	0x40668000
 8026a6c:	2001bdc8 	.word	0x2001bdc8
 8026a70:	4080e000 	.word	0x4080e000

08026a74 <RunMode_ButtonController>:
/*This function using for control to buttons*/
void RunMode_ButtonController(void){
 8026a74:	b580      	push	{r7, lr}
 8026a76:	af00      	add	r7, sp, #0
	if(2==Rm_leftBtnListen){
 8026a78:	4b2c      	ldr	r3, [pc, #176]	; (8026b2c <RunMode_ButtonController+0xb8>)
 8026a7a:	781b      	ldrb	r3, [r3, #0]
 8026a7c:	2b02      	cmp	r3, #2
 8026a7e:	d101      	bne.n	8026a84 <RunMode_ButtonController+0x10>
		  //Time Set Open/Close
		  RunMode_RunTimeSetVal();
 8026a80:	f000 f8cc 	bl	8026c1c <RunMode_RunTimeSetVal>
	  }
	  if(2==Rm_rightBtnListen){
 8026a84:	4b2a      	ldr	r3, [pc, #168]	; (8026b30 <RunMode_ButtonController+0xbc>)
 8026a86:	781b      	ldrb	r3, [r3, #0]
 8026a88:	2b02      	cmp	r3, #2
 8026a8a:	d11c      	bne.n	8026ac6 <RunMode_ButtonController+0x52>
		  //Clear and stop
		   RMmilisecs=0; RMfirstVAl=true;
 8026a8c:	4b29      	ldr	r3, [pc, #164]	; (8026b34 <RunMode_ButtonController+0xc0>)
 8026a8e:	2200      	movs	r2, #0
 8026a90:	801a      	strh	r2, [r3, #0]
 8026a92:	4b29      	ldr	r3, [pc, #164]	; (8026b38 <RunMode_ButtonController+0xc4>)
 8026a94:	2201      	movs	r2, #1
 8026a96:	701a      	strb	r2, [r3, #0]
			  RMseconds=0;RMminutes=0;RMhours=0;RMtargetSeconds=0;RMtargetMinutes=0;RMtargetHours=0;
 8026a98:	4b28      	ldr	r3, [pc, #160]	; (8026b3c <RunMode_ButtonController+0xc8>)
 8026a9a:	2200      	movs	r2, #0
 8026a9c:	701a      	strb	r2, [r3, #0]
 8026a9e:	4b28      	ldr	r3, [pc, #160]	; (8026b40 <RunMode_ButtonController+0xcc>)
 8026aa0:	2200      	movs	r2, #0
 8026aa2:	701a      	strb	r2, [r3, #0]
 8026aa4:	4b27      	ldr	r3, [pc, #156]	; (8026b44 <RunMode_ButtonController+0xd0>)
 8026aa6:	2200      	movs	r2, #0
 8026aa8:	701a      	strb	r2, [r3, #0]
 8026aaa:	4b27      	ldr	r3, [pc, #156]	; (8026b48 <RunMode_ButtonController+0xd4>)
 8026aac:	2200      	movs	r2, #0
 8026aae:	701a      	strb	r2, [r3, #0]
 8026ab0:	4b26      	ldr	r3, [pc, #152]	; (8026b4c <RunMode_ButtonController+0xd8>)
 8026ab2:	2200      	movs	r2, #0
 8026ab4:	701a      	strb	r2, [r3, #0]
 8026ab6:	4b26      	ldr	r3, [pc, #152]	; (8026b50 <RunMode_ButtonController+0xdc>)
 8026ab8:	2200      	movs	r2, #0
 8026aba:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8026abc:	4825      	ldr	r0, [pc, #148]	; (8026b54 <RunMode_ButtonController+0xe0>)
 8026abe:	f7dd fe00 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
			  RunMode_RunTimeLblController();
 8026ac2:	f000 f907 	bl	8026cd4 <RunMode_RunTimeLblController>
	  }
	 if(1==Rm_leftBtnListen) {
 8026ac6:	4b19      	ldr	r3, [pc, #100]	; (8026b2c <RunMode_ButtonController+0xb8>)
 8026ac8:	781b      	ldrb	r3, [r3, #0]
 8026aca:	2b01      	cmp	r3, #1
 8026acc:	d101      	bne.n	8026ad2 <RunMode_ButtonController+0x5e>
			  //Time Set
			  RunMode_RunTimeUpdateVal();
 8026ace:	f000 f8bb 	bl	8026c48 <RunMode_RunTimeUpdateVal>
		  }
	 if(1==Rm_rightBtnListen) {
 8026ad2:	4b17      	ldr	r3, [pc, #92]	; (8026b30 <RunMode_ButtonController+0xbc>)
 8026ad4:	781b      	ldrb	r3, [r3, #0]
 8026ad6:	2b01      	cmp	r3, #1
 8026ad8:	d119      	bne.n	8026b0e <RunMode_ButtonController+0x9a>
		  		  //Timer start/stop
		  		  if(0==RMtimeSetVal && !isStartRun){ RunMode_FistValueSet();
 8026ada:	4b1f      	ldr	r3, [pc, #124]	; (8026b58 <RunMode_ButtonController+0xe4>)
 8026adc:	781b      	ldrb	r3, [r3, #0]
 8026ade:	2b00      	cmp	r3, #0
 8026ae0:	d10f      	bne.n	8026b02 <RunMode_ButtonController+0x8e>
 8026ae2:	4b1e      	ldr	r3, [pc, #120]	; (8026b5c <RunMode_ButtonController+0xe8>)
 8026ae4:	781b      	ldrb	r3, [r3, #0]
 8026ae6:	f083 0301 	eor.w	r3, r3, #1
 8026aea:	b2db      	uxtb	r3, r3
 8026aec:	2b00      	cmp	r3, #0
 8026aee:	d008      	beq.n	8026b02 <RunMode_ButtonController+0x8e>
 8026af0:	f000 f9cc 	bl	8026e8c <RunMode_FistValueSet>
		  			  HAL_TIM_Base_Start_IT(&TOS_RUNMODE_TIMER); isStartRun=true;
 8026af4:	4817      	ldr	r0, [pc, #92]	; (8026b54 <RunMode_ButtonController+0xe0>)
 8026af6:	f7dd fdc0 	bl	800467a <HAL_TIM_Base_Start_IT>
 8026afa:	4b18      	ldr	r3, [pc, #96]	; (8026b5c <RunMode_ButtonController+0xe8>)
 8026afc:	2201      	movs	r2, #1
 8026afe:	701a      	strb	r2, [r3, #0]
 8026b00:	e005      	b.n	8026b0e <RunMode_ButtonController+0x9a>
		  		  }
		  		  else { isStartRun=false;
 8026b02:	4b16      	ldr	r3, [pc, #88]	; (8026b5c <RunMode_ButtonController+0xe8>)
 8026b04:	2200      	movs	r2, #0
 8026b06:	701a      	strb	r2, [r3, #0]
		  			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8026b08:	4812      	ldr	r0, [pc, #72]	; (8026b54 <RunMode_ButtonController+0xe0>)
 8026b0a:	f7dd fdda 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
		  		  }
	 }

	 Rm_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 8026b0e:	f003 fabf 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 8026b12:	4603      	mov	r3, r0
 8026b14:	461a      	mov	r2, r3
 8026b16:	4b06      	ldr	r3, [pc, #24]	; (8026b30 <RunMode_ButtonController+0xbc>)
 8026b18:	701a      	strb	r2, [r3, #0]
	 Rm_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8026b1a:	f003 fae1 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 8026b1e:	4603      	mov	r3, r0
 8026b20:	461a      	mov	r2, r3
 8026b22:	4b02      	ldr	r3, [pc, #8]	; (8026b2c <RunMode_ButtonController+0xb8>)
 8026b24:	701a      	strb	r2, [r3, #0]
}
 8026b26:	bf00      	nop
 8026b28:	bd80      	pop	{r7, pc}
 8026b2a:	bf00      	nop
 8026b2c:	2001af41 	.word	0x2001af41
 8026b30:	2001af40 	.word	0x2001af40
 8026b34:	2001bdd0 	.word	0x2001bdd0
 8026b38:	2001bdcc 	.word	0x2001bdcc
 8026b3c:	2001bd94 	.word	0x2001bd94
 8026b40:	2001bd88 	.word	0x2001bd88
 8026b44:	2001bd41 	.word	0x2001bd41
 8026b48:	2001bdbc 	.word	0x2001bdbc
 8026b4c:	2001bdb1 	.word	0x2001bdb1
 8026b50:	2001bda8 	.word	0x2001bda8
 8026b54:	2001b764 	.word	0x2001b764
 8026b58:	2001bd8c 	.word	0x2001bd8c
 8026b5c:	2001bdc4 	.word	0x2001bdc4

08026b60 <RunMode_Update_Time>:
/*This function using for update time
 * this function must be called in timer interupt function*/
void RunMode_Update_Time(void){
 8026b60:	b580      	push	{r7, lr}
 8026b62:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(RM_taskController){
 8026b64:	4b24      	ldr	r3, [pc, #144]	; (8026bf8 <RunMode_Update_Time+0x98>)
 8026b66:	781b      	ldrb	r3, [r3, #0]
 8026b68:	2b00      	cmp	r3, #0
 8026b6a:	d042      	beq.n	8026bf2 <RunMode_Update_Time+0x92>
		if(RMtargetHours==RMhours && RMtargetMinutes ==RMminutes && RMtargetSeconds==RMseconds)
 8026b6c:	4b23      	ldr	r3, [pc, #140]	; (8026bfc <RunMode_Update_Time+0x9c>)
 8026b6e:	781a      	ldrb	r2, [r3, #0]
 8026b70:	4b23      	ldr	r3, [pc, #140]	; (8026c00 <RunMode_Update_Time+0xa0>)
 8026b72:	781b      	ldrb	r3, [r3, #0]
 8026b74:	429a      	cmp	r2, r3
 8026b76:	d10e      	bne.n	8026b96 <RunMode_Update_Time+0x36>
 8026b78:	4b22      	ldr	r3, [pc, #136]	; (8026c04 <RunMode_Update_Time+0xa4>)
 8026b7a:	781a      	ldrb	r2, [r3, #0]
 8026b7c:	4b22      	ldr	r3, [pc, #136]	; (8026c08 <RunMode_Update_Time+0xa8>)
 8026b7e:	781b      	ldrb	r3, [r3, #0]
 8026b80:	429a      	cmp	r2, r3
 8026b82:	d108      	bne.n	8026b96 <RunMode_Update_Time+0x36>
 8026b84:	4b21      	ldr	r3, [pc, #132]	; (8026c0c <RunMode_Update_Time+0xac>)
 8026b86:	781a      	ldrb	r2, [r3, #0]
 8026b88:	4b21      	ldr	r3, [pc, #132]	; (8026c10 <RunMode_Update_Time+0xb0>)
 8026b8a:	781b      	ldrb	r3, [r3, #0]
 8026b8c:	429a      	cmp	r2, r3
 8026b8e:	d102      	bne.n	8026b96 <RunMode_Update_Time+0x36>
		HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8026b90:	4820      	ldr	r0, [pc, #128]	; (8026c14 <RunMode_Update_Time+0xb4>)
 8026b92:	f7dd fd96 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
		RMmilisecs++;
 8026b96:	4b20      	ldr	r3, [pc, #128]	; (8026c18 <RunMode_Update_Time+0xb8>)
 8026b98:	881b      	ldrh	r3, [r3, #0]
 8026b9a:	3301      	adds	r3, #1
 8026b9c:	b29a      	uxth	r2, r3
 8026b9e:	4b1e      	ldr	r3, [pc, #120]	; (8026c18 <RunMode_Update_Time+0xb8>)
 8026ba0:	801a      	strh	r2, [r3, #0]
			if(RMmilisecs==1000){
 8026ba2:	4b1d      	ldr	r3, [pc, #116]	; (8026c18 <RunMode_Update_Time+0xb8>)
 8026ba4:	881b      	ldrh	r3, [r3, #0]
 8026ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026baa:	d122      	bne.n	8026bf2 <RunMode_Update_Time+0x92>
				RMmilisecs=0;
 8026bac:	4b1a      	ldr	r3, [pc, #104]	; (8026c18 <RunMode_Update_Time+0xb8>)
 8026bae:	2200      	movs	r2, #0
 8026bb0:	801a      	strh	r2, [r3, #0]
				RMseconds++;
 8026bb2:	4b17      	ldr	r3, [pc, #92]	; (8026c10 <RunMode_Update_Time+0xb0>)
 8026bb4:	781b      	ldrb	r3, [r3, #0]
 8026bb6:	3301      	adds	r3, #1
 8026bb8:	b2da      	uxtb	r2, r3
 8026bba:	4b15      	ldr	r3, [pc, #84]	; (8026c10 <RunMode_Update_Time+0xb0>)
 8026bbc:	701a      	strb	r2, [r3, #0]
				if(RMseconds==60){
 8026bbe:	4b14      	ldr	r3, [pc, #80]	; (8026c10 <RunMode_Update_Time+0xb0>)
 8026bc0:	781b      	ldrb	r3, [r3, #0]
 8026bc2:	2b3c      	cmp	r3, #60	; 0x3c
 8026bc4:	d115      	bne.n	8026bf2 <RunMode_Update_Time+0x92>
					RMseconds=0;
 8026bc6:	4b12      	ldr	r3, [pc, #72]	; (8026c10 <RunMode_Update_Time+0xb0>)
 8026bc8:	2200      	movs	r2, #0
 8026bca:	701a      	strb	r2, [r3, #0]
					RMminutes++;
 8026bcc:	4b0e      	ldr	r3, [pc, #56]	; (8026c08 <RunMode_Update_Time+0xa8>)
 8026bce:	781b      	ldrb	r3, [r3, #0]
 8026bd0:	3301      	adds	r3, #1
 8026bd2:	b2da      	uxtb	r2, r3
 8026bd4:	4b0c      	ldr	r3, [pc, #48]	; (8026c08 <RunMode_Update_Time+0xa8>)
 8026bd6:	701a      	strb	r2, [r3, #0]
					if(RMminutes==60){
 8026bd8:	4b0b      	ldr	r3, [pc, #44]	; (8026c08 <RunMode_Update_Time+0xa8>)
 8026bda:	781b      	ldrb	r3, [r3, #0]
 8026bdc:	2b3c      	cmp	r3, #60	; 0x3c
 8026bde:	d108      	bne.n	8026bf2 <RunMode_Update_Time+0x92>
						RMminutes=0;
 8026be0:	4b09      	ldr	r3, [pc, #36]	; (8026c08 <RunMode_Update_Time+0xa8>)
 8026be2:	2200      	movs	r2, #0
 8026be4:	701a      	strb	r2, [r3, #0]
						RMhours++;
 8026be6:	4b06      	ldr	r3, [pc, #24]	; (8026c00 <RunMode_Update_Time+0xa0>)
 8026be8:	781b      	ldrb	r3, [r3, #0]
 8026bea:	3301      	adds	r3, #1
 8026bec:	b2da      	uxtb	r2, r3
 8026bee:	4b04      	ldr	r3, [pc, #16]	; (8026c00 <RunMode_Update_Time+0xa0>)
 8026bf0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}

}
 8026bf2:	bf00      	nop
 8026bf4:	bd80      	pop	{r7, pc}
 8026bf6:	bf00      	nop
 8026bf8:	2001bdb0 	.word	0x2001bdb0
 8026bfc:	2001bda8 	.word	0x2001bda8
 8026c00:	2001bd41 	.word	0x2001bd41
 8026c04:	2001bdb1 	.word	0x2001bdb1
 8026c08:	2001bd88 	.word	0x2001bd88
 8026c0c:	2001bdbc 	.word	0x2001bdbc
 8026c10:	2001bd94 	.word	0x2001bd94
 8026c14:	2001b764 	.word	0x2001b764
 8026c18:	2001bdd0 	.word	0x2001bdd0

08026c1c <RunMode_RunTimeSetVal>:
/*This function using for  control the set target values chouser*/
void RunMode_RunTimeSetVal(void){
 8026c1c:	b580      	push	{r7, lr}
 8026c1e:	af00      	add	r7, sp, #0
	RMtimeSetVal++;
 8026c20:	4b08      	ldr	r3, [pc, #32]	; (8026c44 <RunMode_RunTimeSetVal+0x28>)
 8026c22:	781b      	ldrb	r3, [r3, #0]
 8026c24:	3301      	adds	r3, #1
 8026c26:	b2da      	uxtb	r2, r3
 8026c28:	4b06      	ldr	r3, [pc, #24]	; (8026c44 <RunMode_RunTimeSetVal+0x28>)
 8026c2a:	701a      	strb	r2, [r3, #0]
	if(4==RMtimeSetVal)RMtimeSetVal=0;
 8026c2c:	4b05      	ldr	r3, [pc, #20]	; (8026c44 <RunMode_RunTimeSetVal+0x28>)
 8026c2e:	781b      	ldrb	r3, [r3, #0]
 8026c30:	2b04      	cmp	r3, #4
 8026c32:	d102      	bne.n	8026c3a <RunMode_RunTimeSetVal+0x1e>
 8026c34:	4b03      	ldr	r3, [pc, #12]	; (8026c44 <RunMode_RunTimeSetVal+0x28>)
 8026c36:	2200      	movs	r2, #0
 8026c38:	701a      	strb	r2, [r3, #0]
	RunMode_RunTimeLblController();
 8026c3a:	f000 f84b 	bl	8026cd4 <RunMode_RunTimeLblController>
}
 8026c3e:	bf00      	nop
 8026c40:	bd80      	pop	{r7, pc}
 8026c42:	bf00      	nop
 8026c44:	2001bd8c 	.word	0x2001bd8c

08026c48 <RunMode_RunTimeUpdateVal>:

/*This function using for  update and plus the target values*/
void RunMode_RunTimeUpdateVal(void){
 8026c48:	b580      	push	{r7, lr}
 8026c4a:	af00      	add	r7, sp, #0
	switch(RMtimeSetVal){
 8026c4c:	4b1d      	ldr	r3, [pc, #116]	; (8026cc4 <RunMode_RunTimeUpdateVal+0x7c>)
 8026c4e:	781b      	ldrb	r3, [r3, #0]
 8026c50:	2b02      	cmp	r3, #2
 8026c52:	d012      	beq.n	8026c7a <RunMode_RunTimeUpdateVal+0x32>
 8026c54:	2b03      	cmp	r3, #3
 8026c56:	d01e      	beq.n	8026c96 <RunMode_RunTimeUpdateVal+0x4e>
 8026c58:	2b01      	cmp	r3, #1
 8026c5a:	d000      	beq.n	8026c5e <RunMode_RunTimeUpdateVal+0x16>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
	default: break;
 8026c5c:	e02e      	b.n	8026cbc <RunMode_RunTimeUpdateVal+0x74>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 8026c5e:	4b1a      	ldr	r3, [pc, #104]	; (8026cc8 <RunMode_RunTimeUpdateVal+0x80>)
 8026c60:	781b      	ldrb	r3, [r3, #0]
 8026c62:	3301      	adds	r3, #1
 8026c64:	b2da      	uxtb	r2, r3
 8026c66:	4b18      	ldr	r3, [pc, #96]	; (8026cc8 <RunMode_RunTimeUpdateVal+0x80>)
 8026c68:	701a      	strb	r2, [r3, #0]
 8026c6a:	4b17      	ldr	r3, [pc, #92]	; (8026cc8 <RunMode_RunTimeUpdateVal+0x80>)
 8026c6c:	781b      	ldrb	r3, [r3, #0]
 8026c6e:	2b18      	cmp	r3, #24
 8026c70:	d11f      	bne.n	8026cb2 <RunMode_RunTimeUpdateVal+0x6a>
 8026c72:	4b15      	ldr	r3, [pc, #84]	; (8026cc8 <RunMode_RunTimeUpdateVal+0x80>)
 8026c74:	2200      	movs	r2, #0
 8026c76:	701a      	strb	r2, [r3, #0]
 8026c78:	e01b      	b.n	8026cb2 <RunMode_RunTimeUpdateVal+0x6a>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 8026c7a:	4b14      	ldr	r3, [pc, #80]	; (8026ccc <RunMode_RunTimeUpdateVal+0x84>)
 8026c7c:	781b      	ldrb	r3, [r3, #0]
 8026c7e:	3301      	adds	r3, #1
 8026c80:	b2da      	uxtb	r2, r3
 8026c82:	4b12      	ldr	r3, [pc, #72]	; (8026ccc <RunMode_RunTimeUpdateVal+0x84>)
 8026c84:	701a      	strb	r2, [r3, #0]
 8026c86:	4b11      	ldr	r3, [pc, #68]	; (8026ccc <RunMode_RunTimeUpdateVal+0x84>)
 8026c88:	781b      	ldrb	r3, [r3, #0]
 8026c8a:	2b3c      	cmp	r3, #60	; 0x3c
 8026c8c:	d113      	bne.n	8026cb6 <RunMode_RunTimeUpdateVal+0x6e>
 8026c8e:	4b0f      	ldr	r3, [pc, #60]	; (8026ccc <RunMode_RunTimeUpdateVal+0x84>)
 8026c90:	2200      	movs	r2, #0
 8026c92:	701a      	strb	r2, [r3, #0]
 8026c94:	e00f      	b.n	8026cb6 <RunMode_RunTimeUpdateVal+0x6e>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 8026c96:	4b0e      	ldr	r3, [pc, #56]	; (8026cd0 <RunMode_RunTimeUpdateVal+0x88>)
 8026c98:	781b      	ldrb	r3, [r3, #0]
 8026c9a:	3301      	adds	r3, #1
 8026c9c:	b2da      	uxtb	r2, r3
 8026c9e:	4b0c      	ldr	r3, [pc, #48]	; (8026cd0 <RunMode_RunTimeUpdateVal+0x88>)
 8026ca0:	701a      	strb	r2, [r3, #0]
 8026ca2:	4b0b      	ldr	r3, [pc, #44]	; (8026cd0 <RunMode_RunTimeUpdateVal+0x88>)
 8026ca4:	781b      	ldrb	r3, [r3, #0]
 8026ca6:	2b3c      	cmp	r3, #60	; 0x3c
 8026ca8:	d107      	bne.n	8026cba <RunMode_RunTimeUpdateVal+0x72>
 8026caa:	4b09      	ldr	r3, [pc, #36]	; (8026cd0 <RunMode_RunTimeUpdateVal+0x88>)
 8026cac:	2200      	movs	r2, #0
 8026cae:	701a      	strb	r2, [r3, #0]
 8026cb0:	e003      	b.n	8026cba <RunMode_RunTimeUpdateVal+0x72>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 8026cb2:	bf00      	nop
 8026cb4:	e002      	b.n	8026cbc <RunMode_RunTimeUpdateVal+0x74>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 8026cb6:	bf00      	nop
 8026cb8:	e000      	b.n	8026cbc <RunMode_RunTimeUpdateVal+0x74>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 8026cba:	bf00      	nop
	}
	RunMode_RunTimeLblController();
 8026cbc:	f000 f80a 	bl	8026cd4 <RunMode_RunTimeLblController>
}
 8026cc0:	bf00      	nop
 8026cc2:	bd80      	pop	{r7, pc}
 8026cc4:	2001bd8c 	.word	0x2001bd8c
 8026cc8:	2001bda8 	.word	0x2001bda8
 8026ccc:	2001bdb1 	.word	0x2001bdb1
 8026cd0:	2001bdbc 	.word	0x2001bdbc

08026cd4 <RunMode_RunTimeLblController>:

/*This function using for update set time label*/
void RunMode_RunTimeLblController(void){
 8026cd4:	b580      	push	{r7, lr}
 8026cd6:	b084      	sub	sp, #16
 8026cd8:	af04      	add	r7, sp, #16
	switch(RMtimeSetVal){
 8026cda:	4b5d      	ldr	r3, [pc, #372]	; (8026e50 <RunMode_RunTimeLblController+0x17c>)
 8026cdc:	781b      	ldrb	r3, [r3, #0]
 8026cde:	2b02      	cmp	r3, #2
 8026ce0:	d032      	beq.n	8026d48 <RunMode_RunTimeLblController+0x74>
 8026ce2:	2b03      	cmp	r3, #3
 8026ce4:	d05e      	beq.n	8026da4 <RunMode_RunTimeLblController+0xd0>
 8026ce6:	2b01      	cmp	r3, #1
 8026ce8:	f040 808a 	bne.w	8026e00 <RunMode_RunTimeLblController+0x12c>
	case 1:
			if(RM_theme)
 8026cec:	4b59      	ldr	r3, [pc, #356]	; (8026e54 <RunMode_RunTimeLblController+0x180>)
 8026cee:	781b      	ldrb	r3, [r3, #0]
 8026cf0:	2b00      	cmp	r3, #0
 8026cf2:	d014      	beq.n	8026d1e <RunMode_RunTimeLblController+0x4a>
				 snprintf(runModeBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8026cf4:	4b58      	ldr	r3, [pc, #352]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026cf6:	781b      	ldrb	r3, [r3, #0]
 8026cf8:	4618      	mov	r0, r3
 8026cfa:	4b58      	ldr	r3, [pc, #352]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026cfc:	781b      	ldrb	r3, [r3, #0]
 8026cfe:	461a      	mov	r2, r3
 8026d00:	4b57      	ldr	r3, [pc, #348]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026d02:	781b      	ldrb	r3, [r3, #0]
 8026d04:	4619      	mov	r1, r3
 8026d06:	4b57      	ldr	r3, [pc, #348]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026d08:	881b      	ldrh	r3, [r3, #0]
 8026d0a:	9302      	str	r3, [sp, #8]
 8026d0c:	9101      	str	r1, [sp, #4]
 8026d0e:	9200      	str	r2, [sp, #0]
 8026d10:	4603      	mov	r3, r0
 8026d12:	4a55      	ldr	r2, [pc, #340]	; (8026e68 <RunMode_RunTimeLblController+0x194>)
 8026d14:	2140      	movs	r1, #64	; 0x40
 8026d16:	4855      	ldr	r0, [pc, #340]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026d18:	f004 fa46 	bl	802b1a8 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8026d1c:	e085      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8026d1e:	4b4e      	ldr	r3, [pc, #312]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026d20:	781b      	ldrb	r3, [r3, #0]
 8026d22:	4618      	mov	r0, r3
 8026d24:	4b4d      	ldr	r3, [pc, #308]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026d26:	781b      	ldrb	r3, [r3, #0]
 8026d28:	461a      	mov	r2, r3
 8026d2a:	4b4d      	ldr	r3, [pc, #308]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026d2c:	781b      	ldrb	r3, [r3, #0]
 8026d2e:	4619      	mov	r1, r3
 8026d30:	4b4c      	ldr	r3, [pc, #304]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026d32:	881b      	ldrh	r3, [r3, #0]
 8026d34:	9302      	str	r3, [sp, #8]
 8026d36:	9101      	str	r1, [sp, #4]
 8026d38:	9200      	str	r2, [sp, #0]
 8026d3a:	4603      	mov	r3, r0
 8026d3c:	4a4c      	ldr	r2, [pc, #304]	; (8026e70 <RunMode_RunTimeLblController+0x19c>)
 8026d3e:	2140      	movs	r1, #64	; 0x40
 8026d40:	484a      	ldr	r0, [pc, #296]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026d42:	f004 fa31 	bl	802b1a8 <sniprintf>
		break;
 8026d46:	e070      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
	case 2:
			if(RM_theme)
 8026d48:	4b42      	ldr	r3, [pc, #264]	; (8026e54 <RunMode_RunTimeLblController+0x180>)
 8026d4a:	781b      	ldrb	r3, [r3, #0]
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	d014      	beq.n	8026d7a <RunMode_RunTimeLblController+0xa6>
				 snprintf(runModeBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#.%03d",
 8026d50:	4b41      	ldr	r3, [pc, #260]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026d52:	781b      	ldrb	r3, [r3, #0]
 8026d54:	4618      	mov	r0, r3
 8026d56:	4b41      	ldr	r3, [pc, #260]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026d58:	781b      	ldrb	r3, [r3, #0]
 8026d5a:	461a      	mov	r2, r3
 8026d5c:	4b40      	ldr	r3, [pc, #256]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026d5e:	781b      	ldrb	r3, [r3, #0]
 8026d60:	4619      	mov	r1, r3
 8026d62:	4b40      	ldr	r3, [pc, #256]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026d64:	881b      	ldrh	r3, [r3, #0]
 8026d66:	9302      	str	r3, [sp, #8]
 8026d68:	9101      	str	r1, [sp, #4]
 8026d6a:	9200      	str	r2, [sp, #0]
 8026d6c:	4603      	mov	r3, r0
 8026d6e:	4a41      	ldr	r2, [pc, #260]	; (8026e74 <RunMode_RunTimeLblController+0x1a0>)
 8026d70:	2140      	movs	r1, #64	; 0x40
 8026d72:	483e      	ldr	r0, [pc, #248]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026d74:	f004 fa18 	bl	802b1a8 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8026d78:	e057      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
 8026d7a:	4b37      	ldr	r3, [pc, #220]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026d7c:	781b      	ldrb	r3, [r3, #0]
 8026d7e:	4618      	mov	r0, r3
 8026d80:	4b36      	ldr	r3, [pc, #216]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026d82:	781b      	ldrb	r3, [r3, #0]
 8026d84:	461a      	mov	r2, r3
 8026d86:	4b36      	ldr	r3, [pc, #216]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026d88:	781b      	ldrb	r3, [r3, #0]
 8026d8a:	4619      	mov	r1, r3
 8026d8c:	4b35      	ldr	r3, [pc, #212]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026d8e:	881b      	ldrh	r3, [r3, #0]
 8026d90:	9302      	str	r3, [sp, #8]
 8026d92:	9101      	str	r1, [sp, #4]
 8026d94:	9200      	str	r2, [sp, #0]
 8026d96:	4603      	mov	r3, r0
 8026d98:	4a37      	ldr	r2, [pc, #220]	; (8026e78 <RunMode_RunTimeLblController+0x1a4>)
 8026d9a:	2140      	movs	r1, #64	; 0x40
 8026d9c:	4833      	ldr	r0, [pc, #204]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026d9e:	f004 fa03 	bl	802b1a8 <sniprintf>
		break;
 8026da2:	e042      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
	case 3:
		if(RM_theme)
 8026da4:	4b2b      	ldr	r3, [pc, #172]	; (8026e54 <RunMode_RunTimeLblController+0x180>)
 8026da6:	781b      	ldrb	r3, [r3, #0]
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	d014      	beq.n	8026dd6 <RunMode_RunTimeLblController+0x102>
			 snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#.%03d",
 8026dac:	4b2a      	ldr	r3, [pc, #168]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026dae:	781b      	ldrb	r3, [r3, #0]
 8026db0:	4618      	mov	r0, r3
 8026db2:	4b2a      	ldr	r3, [pc, #168]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026db4:	781b      	ldrb	r3, [r3, #0]
 8026db6:	461a      	mov	r2, r3
 8026db8:	4b29      	ldr	r3, [pc, #164]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026dba:	781b      	ldrb	r3, [r3, #0]
 8026dbc:	4619      	mov	r1, r3
 8026dbe:	4b29      	ldr	r3, [pc, #164]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026dc0:	881b      	ldrh	r3, [r3, #0]
 8026dc2:	9302      	str	r3, [sp, #8]
 8026dc4:	9101      	str	r1, [sp, #4]
 8026dc6:	9200      	str	r2, [sp, #0]
 8026dc8:	4603      	mov	r3, r0
 8026dca:	4a2c      	ldr	r2, [pc, #176]	; (8026e7c <RunMode_RunTimeLblController+0x1a8>)
 8026dcc:	2140      	movs	r1, #64	; 0x40
 8026dce:	4827      	ldr	r0, [pc, #156]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026dd0:	f004 f9ea 	bl	802b1a8 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8026dd4:	e029      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
 8026dd6:	4b20      	ldr	r3, [pc, #128]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026dd8:	781b      	ldrb	r3, [r3, #0]
 8026dda:	4618      	mov	r0, r3
 8026ddc:	4b1f      	ldr	r3, [pc, #124]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026dde:	781b      	ldrb	r3, [r3, #0]
 8026de0:	461a      	mov	r2, r3
 8026de2:	4b1f      	ldr	r3, [pc, #124]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026de4:	781b      	ldrb	r3, [r3, #0]
 8026de6:	4619      	mov	r1, r3
 8026de8:	4b1e      	ldr	r3, [pc, #120]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026dea:	881b      	ldrh	r3, [r3, #0]
 8026dec:	9302      	str	r3, [sp, #8]
 8026dee:	9101      	str	r1, [sp, #4]
 8026df0:	9200      	str	r2, [sp, #0]
 8026df2:	4603      	mov	r3, r0
 8026df4:	4a22      	ldr	r2, [pc, #136]	; (8026e80 <RunMode_RunTimeLblController+0x1ac>)
 8026df6:	2140      	movs	r1, #64	; 0x40
 8026df8:	481c      	ldr	r0, [pc, #112]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026dfa:	f004 f9d5 	bl	802b1a8 <sniprintf>
		break;
 8026dfe:	e014      	b.n	8026e2a <RunMode_RunTimeLblController+0x156>
	default: snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8026e00:	4b15      	ldr	r3, [pc, #84]	; (8026e58 <RunMode_RunTimeLblController+0x184>)
 8026e02:	781b      	ldrb	r3, [r3, #0]
 8026e04:	4618      	mov	r0, r3
 8026e06:	4b15      	ldr	r3, [pc, #84]	; (8026e5c <RunMode_RunTimeLblController+0x188>)
 8026e08:	781b      	ldrb	r3, [r3, #0]
 8026e0a:	461a      	mov	r2, r3
 8026e0c:	4b14      	ldr	r3, [pc, #80]	; (8026e60 <RunMode_RunTimeLblController+0x18c>)
 8026e0e:	781b      	ldrb	r3, [r3, #0]
 8026e10:	4619      	mov	r1, r3
 8026e12:	4b14      	ldr	r3, [pc, #80]	; (8026e64 <RunMode_RunTimeLblController+0x190>)
 8026e14:	881b      	ldrh	r3, [r3, #0]
 8026e16:	9302      	str	r3, [sp, #8]
 8026e18:	9101      	str	r1, [sp, #4]
 8026e1a:	9200      	str	r2, [sp, #0]
 8026e1c:	4603      	mov	r3, r0
 8026e1e:	4a19      	ldr	r2, [pc, #100]	; (8026e84 <RunMode_RunTimeLblController+0x1b0>)
 8026e20:	2140      	movs	r1, #64	; 0x40
 8026e22:	4812      	ldr	r0, [pc, #72]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026e24:	f004 f9c0 	bl	802b1a8 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs); break;
 8026e28:	bf00      	nop
	}
	lv_label_set_text(RM_Lbl, runModeBuffer);
 8026e2a:	4b17      	ldr	r3, [pc, #92]	; (8026e88 <RunMode_RunTimeLblController+0x1b4>)
 8026e2c:	681b      	ldr	r3, [r3, #0]
 8026e2e:	490f      	ldr	r1, [pc, #60]	; (8026e6c <RunMode_RunTimeLblController+0x198>)
 8026e30:	4618      	mov	r0, r3
 8026e32:	f7f5 ff3f 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8026e36:	4b14      	ldr	r3, [pc, #80]	; (8026e88 <RunMode_RunTimeLblController+0x1b4>)
 8026e38:	6818      	ldr	r0, [r3, #0]
 8026e3a:	2328      	movs	r3, #40	; 0x28
 8026e3c:	9300      	str	r3, [sp, #0]
 8026e3e:	2300      	movs	r3, #0
 8026e40:	2200      	movs	r2, #0
 8026e42:	2100      	movs	r1, #0
 8026e44:	f7e2 fcec 	bl	8009820 <lv_obj_align>

}
 8026e48:	bf00      	nop
 8026e4a:	46bd      	mov	sp, r7
 8026e4c:	bd80      	pop	{r7, pc}
 8026e4e:	bf00      	nop
 8026e50:	2001bd8c 	.word	0x2001bd8c
 8026e54:	2001bd8d 	.word	0x2001bd8d
 8026e58:	2001bda8 	.word	0x2001bda8
 8026e5c:	2001bdb1 	.word	0x2001bdb1
 8026e60:	2001bdbc 	.word	0x2001bdbc
 8026e64:	2001bdd0 	.word	0x2001bdd0
 8026e68:	0802d70c 	.word	0x0802d70c
 8026e6c:	2001bd48 	.word	0x2001bd48
 8026e70:	0802d73c 	.word	0x0802d73c
 8026e74:	0802d76c 	.word	0x0802d76c
 8026e78:	0802d79c 	.word	0x0802d79c
 8026e7c:	0802d7cc 	.word	0x0802d7cc
 8026e80:	0802d7fc 	.word	0x0802d7fc
 8026e84:	0802d69c 	.word	0x0802d69c
 8026e88:	2001bd44 	.word	0x2001bd44

08026e8c <RunMode_FistValueSet>:
//Setter Getter Functions
void RunMode_FistValueSet(void){
 8026e8c:	b580      	push	{r7, lr}
 8026e8e:	af00      	add	r7, sp, #0
	if(RMfirstVAl){
 8026e90:	4b10      	ldr	r3, [pc, #64]	; (8026ed4 <RunMode_FistValueSet+0x48>)
 8026e92:	781b      	ldrb	r3, [r3, #0]
 8026e94:	2b00      	cmp	r3, #0
 8026e96:	d01b      	beq.n	8026ed0 <RunMode_FistValueSet+0x44>
		RMstepsBeff=RMsteps;
 8026e98:	4b0f      	ldr	r3, [pc, #60]	; (8026ed8 <RunMode_FistValueSet+0x4c>)
 8026e9a:	881a      	ldrh	r2, [r3, #0]
 8026e9c:	4b0f      	ldr	r3, [pc, #60]	; (8026edc <RunMode_FistValueSet+0x50>)
 8026e9e:	801a      	strh	r2, [r3, #0]
		RMkCalsBeff=RMkCals;
 8026ea0:	4b0f      	ldr	r3, [pc, #60]	; (8026ee0 <RunMode_FistValueSet+0x54>)
 8026ea2:	881a      	ldrh	r2, [r3, #0]
 8026ea4:	4b0f      	ldr	r3, [pc, #60]	; (8026ee4 <RunMode_FistValueSet+0x58>)
 8026ea6:	801a      	strh	r2, [r3, #0]
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 8026ea8:	4b0f      	ldr	r3, [pc, #60]	; (8026ee8 <RunMode_FistValueSet+0x5c>)
 8026eaa:	781a      	ldrb	r2, [r3, #0]
 8026eac:	4b0a      	ldr	r3, [pc, #40]	; (8026ed8 <RunMode_FistValueSet+0x4c>)
 8026eae:	881b      	ldrh	r3, [r3, #0]
 8026eb0:	4619      	mov	r1, r3
 8026eb2:	4610      	mov	r0, r2
 8026eb4:	f003 fa20 	bl	802a2f8 <tos_distance_Calc>
 8026eb8:	eef0 7a40 	vmov.f32	s15, s0
 8026ebc:	4b0b      	ldr	r3, [pc, #44]	; (8026eec <RunMode_FistValueSet+0x60>)
 8026ebe:	edc3 7a00 	vstr	s15, [r3]
		RMdistancesBeff=RMdistances;
 8026ec2:	4b0a      	ldr	r3, [pc, #40]	; (8026eec <RunMode_FistValueSet+0x60>)
 8026ec4:	681b      	ldr	r3, [r3, #0]
 8026ec6:	4a0a      	ldr	r2, [pc, #40]	; (8026ef0 <RunMode_FistValueSet+0x64>)
 8026ec8:	6013      	str	r3, [r2, #0]
		RMfirstVAl=false;
 8026eca:	4b02      	ldr	r3, [pc, #8]	; (8026ed4 <RunMode_FistValueSet+0x48>)
 8026ecc:	2200      	movs	r2, #0
 8026ece:	701a      	strb	r2, [r3, #0]
	}

}
 8026ed0:	bf00      	nop
 8026ed2:	bd80      	pop	{r7, pc}
 8026ed4:	2001bdcc 	.word	0x2001bdcc
 8026ed8:	2001bdce 	.word	0x2001bdce
 8026edc:	2001bdc6 	.word	0x2001bdc6
 8026ee0:	2001bd8a 	.word	0x2001bd8a
 8026ee4:	2001bda0 	.word	0x2001bda0
 8026ee8:	2001bd40 	.word	0x2001bd40
 8026eec:	2001bdac 	.word	0x2001bdac
 8026ef0:	2001bd9c 	.word	0x2001bd9c

08026ef4 <RunMode_SetStepsAndKcals>:
void RunMode_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
 8026ef4:	b480      	push	{r7}
 8026ef6:	b083      	sub	sp, #12
 8026ef8:	af00      	add	r7, sp, #0
 8026efa:	4603      	mov	r3, r0
 8026efc:	460a      	mov	r2, r1
 8026efe:	80fb      	strh	r3, [r7, #6]
 8026f00:	4613      	mov	r3, r2
 8026f02:	80bb      	strh	r3, [r7, #4]
	RMsteps =getSteps;
 8026f04:	4a05      	ldr	r2, [pc, #20]	; (8026f1c <RunMode_SetStepsAndKcals+0x28>)
 8026f06:	88fb      	ldrh	r3, [r7, #6]
 8026f08:	8013      	strh	r3, [r2, #0]
	RMkCals =getKcals;
 8026f0a:	4a05      	ldr	r2, [pc, #20]	; (8026f20 <RunMode_SetStepsAndKcals+0x2c>)
 8026f0c:	88bb      	ldrh	r3, [r7, #4]
 8026f0e:	8013      	strh	r3, [r2, #0]
}
 8026f10:	bf00      	nop
 8026f12:	370c      	adds	r7, #12
 8026f14:	46bd      	mov	sp, r7
 8026f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f1a:	4770      	bx	lr
 8026f1c:	2001bdce 	.word	0x2001bdce
 8026f20:	2001bd8a 	.word	0x2001bd8a

08026f24 <RunMode_TaskControllerSet>:
void RunMode_TaskControllerSet(bool active){
 8026f24:	b480      	push	{r7}
 8026f26:	b083      	sub	sp, #12
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	4603      	mov	r3, r0
 8026f2c:	71fb      	strb	r3, [r7, #7]
	RM_taskController = active;
 8026f2e:	4a04      	ldr	r2, [pc, #16]	; (8026f40 <RunMode_TaskControllerSet+0x1c>)
 8026f30:	79fb      	ldrb	r3, [r7, #7]
 8026f32:	7013      	strb	r3, [r2, #0]
}
 8026f34:	bf00      	nop
 8026f36:	370c      	adds	r7, #12
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f3e:	4770      	bx	lr
 8026f40:	2001bdb0 	.word	0x2001bdb0

08026f44 <RunMode_TaskControllerGet>:
bool RunMode_TaskControllerGet(void){
 8026f44:	b480      	push	{r7}
 8026f46:	af00      	add	r7, sp, #0
	return RM_taskController;
 8026f48:	4b03      	ldr	r3, [pc, #12]	; (8026f58 <RunMode_TaskControllerGet+0x14>)
 8026f4a:	781b      	ldrb	r3, [r3, #0]
}
 8026f4c:	4618      	mov	r0, r3
 8026f4e:	46bd      	mov	sp, r7
 8026f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f54:	4770      	bx	lr
 8026f56:	bf00      	nop
 8026f58:	2001bdb0 	.word	0x2001bdb0

08026f5c <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8026f5c:	b480      	push	{r7}
 8026f5e:	b085      	sub	sp, #20
 8026f60:	af00      	add	r7, sp, #0
 8026f62:	4603      	mov	r3, r0
 8026f64:	71fb      	strb	r3, [r7, #7]
 8026f66:	460b      	mov	r3, r1
 8026f68:	71bb      	strb	r3, [r7, #6]
 8026f6a:	4613      	mov	r3, r2
 8026f6c:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8026f6e:	79bb      	ldrb	r3, [r7, #6]
 8026f70:	095b      	lsrs	r3, r3, #5
 8026f72:	b2db      	uxtb	r3, r3
 8026f74:	f003 0307 	and.w	r3, r3, #7
 8026f78:	b2da      	uxtb	r2, r3
 8026f7a:	7b3b      	ldrb	r3, [r7, #12]
 8026f7c:	f362 0302 	bfi	r3, r2, #0, #3
 8026f80:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8026f82:	79fb      	ldrb	r3, [r7, #7]
 8026f84:	08db      	lsrs	r3, r3, #3
 8026f86:	b2db      	uxtb	r3, r3
 8026f88:	f003 031f 	and.w	r3, r3, #31
 8026f8c:	b2da      	uxtb	r2, r3
 8026f8e:	7b3b      	ldrb	r3, [r7, #12]
 8026f90:	f362 03c7 	bfi	r3, r2, #3, #5
 8026f94:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8026f96:	797b      	ldrb	r3, [r7, #5]
 8026f98:	08db      	lsrs	r3, r3, #3
 8026f9a:	b2db      	uxtb	r3, r3
 8026f9c:	f003 031f 	and.w	r3, r3, #31
 8026fa0:	b2da      	uxtb	r2, r3
 8026fa2:	7b7b      	ldrb	r3, [r7, #13]
 8026fa4:	f362 0304 	bfi	r3, r2, #0, #5
 8026fa8:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8026faa:	79bb      	ldrb	r3, [r7, #6]
 8026fac:	089b      	lsrs	r3, r3, #2
 8026fae:	b2db      	uxtb	r3, r3
 8026fb0:	f003 0307 	and.w	r3, r3, #7
 8026fb4:	b2da      	uxtb	r2, r3
 8026fb6:	7b7b      	ldrb	r3, [r7, #13]
 8026fb8:	f362 1347 	bfi	r3, r2, #5, #3
 8026fbc:	737b      	strb	r3, [r7, #13]
    return color;
 8026fbe:	89bb      	ldrh	r3, [r7, #12]
}
 8026fc0:	4618      	mov	r0, r3
 8026fc2:	3714      	adds	r7, #20
 8026fc4:	46bd      	mov	sp, r7
 8026fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fca:	4770      	bx	lr

08026fcc <lv_color_hex>:
    return color;
}
#endif

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8026fcc:	b580      	push	{r7, lr}
 8026fce:	b082      	sub	sp, #8
 8026fd0:	af00      	add	r7, sp, #0
 8026fd2:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	0c1b      	lsrs	r3, r3, #16
 8026fd8:	b2d8      	uxtb	r0, r3
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	0a1b      	lsrs	r3, r3, #8
 8026fde:	b2db      	uxtb	r3, r3
 8026fe0:	687a      	ldr	r2, [r7, #4]
 8026fe2:	b2d2      	uxtb	r2, r2
 8026fe4:	4619      	mov	r1, r3
 8026fe6:	f7ff ffb9 	bl	8026f5c <lv_color_make>
 8026fea:	4603      	mov	r3, r0
}
 8026fec:	4618      	mov	r0, r3
 8026fee:	3708      	adds	r7, #8
 8026ff0:	46bd      	mov	sp, r7
 8026ff2:	bd80      	pop	{r7, pc}

08026ff4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8026ff4:	b580      	push	{r7, lr}
 8026ff6:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8026ff8:	f7ee fd74 	bl	8015ae4 <lv_disp_get_default>
 8026ffc:	4603      	mov	r3, r0
 8026ffe:	4618      	mov	r0, r3
 8027000:	f7e1 fa3c 	bl	800847c <lv_disp_get_scr_act>
 8027004:	4603      	mov	r3, r0
}
 8027006:	4618      	mov	r0, r3
 8027008:	bd80      	pop	{r7, pc}

0802700a <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802700a:	b580      	push	{r7, lr}
 802700c:	b084      	sub	sp, #16
 802700e:	af00      	add	r7, sp, #0
 8027010:	60f8      	str	r0, [r7, #12]
 8027012:	460b      	mov	r3, r1
 8027014:	607a      	str	r2, [r7, #4]
 8027016:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8027018:	6879      	ldr	r1, [r7, #4]
 802701a:	68f8      	ldr	r0, [r7, #12]
 802701c:	f7e3 f8a5 	bl	800a16a <lv_obj_set_style>
}
 8027020:	bf00      	nop
 8027022:	3710      	adds	r7, #16
 8027024:	46bd      	mov	sp, r7
 8027026:	bd80      	pop	{r7, pc}

08027028 <tos_SettingsScreen_Init>:
void SettingsScreen_UnitUpdateVal(bool val);


void SettingsScreen_SetNewValues(void);

void tos_SettingsScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 8027028:	b580      	push	{r7, lr}
 802702a:	b082      	sub	sp, #8
 802702c:	af00      	add	r7, sp, #0
 802702e:	4603      	mov	r3, r0
 8027030:	6039      	str	r1, [r7, #0]
 8027032:	71fb      	strb	r3, [r7, #7]
			lv_obj_clean(lv_scr_act());
 8027034:	f7ff ffde 	bl	8026ff4 <lv_scr_act>
 8027038:	4603      	mov	r3, r0
 802703a:	4618      	mov	r0, r3
 802703c:	f7e2 f97e 	bl	800933c <lv_obj_clean>
    		lv_style_copy(&description_Style, &lv_style_plain);
 8027040:	4928      	ldr	r1, [pc, #160]	; (80270e4 <tos_SettingsScreen_Init+0xbc>)
 8027042:	4829      	ldr	r0, [pc, #164]	; (80270e8 <tos_SettingsScreen_Init+0xc0>)
 8027044:	f7e4 fe30 	bl	800bca8 <lv_style_copy>
    		description_Style.text.font = &lv_font_roboto_28;
 8027048:	4b27      	ldr	r3, [pc, #156]	; (80270e8 <tos_SettingsScreen_Init+0xc0>)
 802704a:	4a28      	ldr	r2, [pc, #160]	; (80270ec <tos_SettingsScreen_Init+0xc4>)
 802704c:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&style_screen, &lv_style_plain);
 802704e:	4925      	ldr	r1, [pc, #148]	; (80270e4 <tos_SettingsScreen_Init+0xbc>)
 8027050:	4827      	ldr	r0, [pc, #156]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 8027052:	f7e4 fe29 	bl	800bca8 <lv_style_copy>
			style_screen.body.main_color = LV_COLOR_WHITE;
 8027056:	4a26      	ldr	r2, [pc, #152]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 8027058:	4b26      	ldr	r3, [pc, #152]	; (80270f4 <tos_SettingsScreen_Init+0xcc>)
 802705a:	881b      	ldrh	r3, [r3, #0]
 802705c:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 802705e:	4a24      	ldr	r2, [pc, #144]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 8027060:	4b24      	ldr	r3, [pc, #144]	; (80270f4 <tos_SettingsScreen_Init+0xcc>)
 8027062:	881b      	ldrh	r3, [r3, #0]
 8027064:	8093      	strh	r3, [r2, #4]
		    description_Style.text.color = LV_COLOR_BLACK;
 8027066:	4b20      	ldr	r3, [pc, #128]	; (80270e8 <tos_SettingsScreen_Init+0xc0>)
 8027068:	2200      	movs	r2, #0
 802706a:	841a      	strh	r2, [r3, #32]
			if(theme){
 802706c:	79fb      	ldrb	r3, [r7, #7]
 802706e:	2b00      	cmp	r3, #0
 8027070:	d009      	beq.n	8027086 <tos_SettingsScreen_Init+0x5e>
				style_screen.body.main_color = LV_COLOR_BLACK;
 8027072:	4b1f      	ldr	r3, [pc, #124]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 8027074:	2200      	movs	r2, #0
 8027076:	805a      	strh	r2, [r3, #2]
				style_screen.body.grad_color = LV_COLOR_BLACK;
 8027078:	4b1d      	ldr	r3, [pc, #116]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 802707a:	2200      	movs	r2, #0
 802707c:	809a      	strh	r2, [r3, #4]
				description_Style.text.color = LV_COLOR_WHITE;
 802707e:	4a1a      	ldr	r2, [pc, #104]	; (80270e8 <tos_SettingsScreen_Init+0xc0>)
 8027080:	4b1c      	ldr	r3, [pc, #112]	; (80270f4 <tos_SettingsScreen_Init+0xcc>)
 8027082:	881b      	ldrh	r3, [r3, #0]
 8027084:	8413      	strh	r3, [r2, #32]
			}lv_obj_set_style(lv_scr_act(), &style_screen);
 8027086:	f7ff ffb5 	bl	8026ff4 <lv_scr_act>
 802708a:	4603      	mov	r3, r0
 802708c:	4918      	ldr	r1, [pc, #96]	; (80270f0 <tos_SettingsScreen_Init+0xc8>)
 802708e:	4618      	mov	r0, r3
 8027090:	f7e3 f86b 	bl	800a16a <lv_obj_set_style>
			Stheme=theme;
 8027094:	4a18      	ldr	r2, [pc, #96]	; (80270f8 <tos_SettingsScreen_Init+0xd0>)
 8027096:	79fb      	ldrb	r3, [r7, #7]
 8027098:	7013      	strb	r3, [r2, #0]
			isMenuOpen=true;
 802709a:	4b18      	ldr	r3, [pc, #96]	; (80270fc <tos_SettingsScreen_Init+0xd4>)
 802709c:	2201      	movs	r2, #1
 802709e:	701a      	strb	r2, [r3, #0]
			S_hrtc=hrtc;
 80270a0:	4a17      	ldr	r2, [pc, #92]	; (8027100 <tos_SettingsScreen_Init+0xd8>)
 80270a2:	683b      	ldr	r3, [r7, #0]
 80270a4:	6013      	str	r3, [r2, #0]

		 	SbluetoothStatu=tos_BluetoothGetEnableVal();
 80270a6:	f002 ffd7 	bl	802a058 <tos_BluetoothGetEnableVal>
 80270aa:	4603      	mov	r3, r0
 80270ac:	461a      	mov	r2, r3
 80270ae:	4b15      	ldr	r3, [pc, #84]	; (8027104 <tos_SettingsScreen_Init+0xdc>)
 80270b0:	701a      	strb	r2, [r3, #0]

			SettingsScreen_clockInit(theme);
 80270b2:	79fb      	ldrb	r3, [r7, #7]
 80270b4:	4618      	mov	r0, r3
 80270b6:	f000 f827 	bl	8027108 <SettingsScreen_clockInit>
			SettingsScreen_dateInit(theme);
 80270ba:	79fb      	ldrb	r3, [r7, #7]
 80270bc:	4618      	mov	r0, r3
 80270be:	f000 f8b9 	bl	8027234 <SettingsScreen_dateInit>
			SettingsScreen_bluetoothInit(theme);
 80270c2:	79fb      	ldrb	r3, [r7, #7]
 80270c4:	4618      	mov	r0, r3
 80270c6:	f000 f94b 	bl	8027360 <SettingsScreen_bluetoothInit>
			SettingsScreen_unitTypeInit(theme);
 80270ca:	79fb      	ldrb	r3, [r7, #7]
 80270cc:	4618      	mov	r0, r3
 80270ce:	f000 f9d1 	bl	8027474 <SettingsScreen_unitTypeInit>
			SettingsScreen_buttonsInit(theme);
 80270d2:	79fb      	ldrb	r3, [r7, #7]
 80270d4:	4618      	mov	r0, r3
 80270d6:	f000 fa7d 	bl	80275d4 <SettingsScreen_buttonsInit>

}
 80270da:	bf00      	nop
 80270dc:	3708      	adds	r7, #8
 80270de:	46bd      	mov	sp, r7
 80270e0:	bd80      	pop	{r7, pc}
 80270e2:	bf00      	nop
 80270e4:	2001ba40 	.word	0x2001ba40
 80270e8:	2001b0ac 	.word	0x2001b0ac
 80270ec:	20002398 	.word	0x20002398
 80270f0:	2001b070 	.word	0x2001b070
 80270f4:	0802d82c 	.word	0x0802d82c
 80270f8:	2001bde3 	.word	0x2001bde3
 80270fc:	2001bdfc 	.word	0x2001bdfc
 8027100:	2001be00 	.word	0x2001be00
 8027104:	2001b160 	.word	0x2001b160

08027108 <SettingsScreen_clockInit>:
/**/
void SettingsScreen_clockInit(bool theme){
 8027108:	b590      	push	{r4, r7, lr}
 802710a:	b087      	sub	sp, #28
 802710c:	af02      	add	r7, sp, #8
 802710e:	4603      	mov	r3, r0
 8027110:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 8027112:	493c      	ldr	r1, [pc, #240]	; (8027204 <SettingsScreen_clockInit+0xfc>)
 8027114:	483c      	ldr	r0, [pc, #240]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027116:	f7e4 fdc7 	bl	800bca8 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 802711a:	4b3b      	ldr	r3, [pc, #236]	; (8027208 <SettingsScreen_clockInit+0x100>)
 802711c:	2200      	movs	r2, #0
 802711e:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8027120:	79fb      	ldrb	r3, [r7, #7]
 8027122:	2b00      	cmp	r3, #0
 8027124:	d003      	beq.n	802712e <SettingsScreen_clockInit+0x26>
 8027126:	4a38      	ldr	r2, [pc, #224]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027128:	4b38      	ldr	r3, [pc, #224]	; (802720c <SettingsScreen_clockInit+0x104>)
 802712a:	881b      	ldrh	r3, [r3, #0]
 802712c:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 802712e:	4b36      	ldr	r3, [pc, #216]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027130:	4a37      	ldr	r2, [pc, #220]	; (8027210 <SettingsScreen_clockInit+0x108>)
 8027132:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8027134:	4c34      	ldr	r4, [pc, #208]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027136:	2200      	movs	r2, #0
 8027138:	21a5      	movs	r1, #165	; 0xa5
 802713a:	20ff      	movs	r0, #255	; 0xff
 802713c:	f7ff ff0e 	bl	8026f5c <lv_color_make>
 8027140:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8027142:	4c31      	ldr	r4, [pc, #196]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027144:	2200      	movs	r2, #0
 8027146:	21a5      	movs	r1, #165	; 0xa5
 8027148:	20ff      	movs	r0, #255	; 0xff
 802714a:	f7ff ff07 	bl	8026f5c <lv_color_make>
 802714e:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8027150:	4b2d      	ldr	r3, [pc, #180]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027152:	220a      	movs	r2, #10
 8027154:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8027156:	4b2c      	ldr	r3, [pc, #176]	; (8027208 <SettingsScreen_clockInit+0x100>)
 8027158:	22c8      	movs	r2, #200	; 0xc8
 802715a:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * clockLbl = lv_label_create(lv_scr_act(), NULL);
 802715c:	f7ff ff4a 	bl	8026ff4 <lv_scr_act>
 8027160:	4603      	mov	r3, r0
 8027162:	2100      	movs	r1, #0
 8027164:	4618      	mov	r0, r3
 8027166:	f7f5 fc73 	bl	801ca50 <lv_label_create>
 802716a:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(clockLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802716c:	4a29      	ldr	r2, [pc, #164]	; (8027214 <SettingsScreen_clockInit+0x10c>)
 802716e:	2100      	movs	r1, #0
 8027170:	68f8      	ldr	r0, [r7, #12]
 8027172:	f7ff ff4a 	bl	802700a <lv_label_set_style>
		lv_label_set_text(clockLbl, "Clock:");
 8027176:	4928      	ldr	r1, [pc, #160]	; (8027218 <SettingsScreen_clockInit+0x110>)
 8027178:	68f8      	ldr	r0, [r7, #12]
 802717a:	f7f5 fd9b 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(clockLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 40);
 802717e:	2328      	movs	r3, #40	; 0x28
 8027180:	9300      	str	r3, [sp, #0]
 8027182:	2314      	movs	r3, #20
 8027184:	2201      	movs	r2, #1
 8027186:	2100      	movs	r1, #0
 8027188:	68f8      	ldr	r0, [r7, #12]
 802718a:	f7e2 fb49 	bl	8009820 <lv_obj_align>

    S_ClockLbl = lv_label_create(lv_scr_act(), NULL);
 802718e:	f7ff ff31 	bl	8026ff4 <lv_scr_act>
 8027192:	4603      	mov	r3, r0
 8027194:	2100      	movs	r1, #0
 8027196:	4618      	mov	r0, r3
 8027198:	f7f5 fc5a 	bl	801ca50 <lv_label_create>
 802719c:	4602      	mov	r2, r0
 802719e:	4b1f      	ldr	r3, [pc, #124]	; (802721c <SettingsScreen_clockInit+0x114>)
 80271a0:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_ClockLbl, true);
 80271a2:	4b1e      	ldr	r3, [pc, #120]	; (802721c <SettingsScreen_clockInit+0x114>)
 80271a4:	681b      	ldr	r3, [r3, #0]
 80271a6:	2101      	movs	r1, #1
 80271a8:	4618      	mov	r0, r3
 80271aa:	f7f5 fe9f 	bl	801ceec <lv_label_set_recolor>
 	lv_label_set_style(S_ClockLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 80271ae:	4b1b      	ldr	r3, [pc, #108]	; (802721c <SettingsScreen_clockInit+0x114>)
 80271b0:	681b      	ldr	r3, [r3, #0]
 80271b2:	4a15      	ldr	r2, [pc, #84]	; (8027208 <SettingsScreen_clockInit+0x100>)
 80271b4:	2100      	movs	r1, #0
 80271b6:	4618      	mov	r0, r3
 80271b8:	f7ff ff27 	bl	802700a <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 80271bc:	4b18      	ldr	r3, [pc, #96]	; (8027220 <SettingsScreen_clockInit+0x118>)
 80271be:	781b      	ldrb	r3, [r3, #0]
 80271c0:	4619      	mov	r1, r3
 80271c2:	4b18      	ldr	r3, [pc, #96]	; (8027224 <SettingsScreen_clockInit+0x11c>)
 80271c4:	781b      	ldrb	r3, [r3, #0]
 80271c6:	461a      	mov	r2, r3
 80271c8:	4b17      	ldr	r3, [pc, #92]	; (8027228 <SettingsScreen_clockInit+0x120>)
 80271ca:	781b      	ldrb	r3, [r3, #0]
 80271cc:	9301      	str	r3, [sp, #4]
 80271ce:	9200      	str	r2, [sp, #0]
 80271d0:	460b      	mov	r3, r1
 80271d2:	4a16      	ldr	r2, [pc, #88]	; (802722c <SettingsScreen_clockInit+0x124>)
 80271d4:	2140      	movs	r1, #64	; 0x40
 80271d6:	4816      	ldr	r0, [pc, #88]	; (8027230 <SettingsScreen_clockInit+0x128>)
 80271d8:	f003 ffe6 	bl	802b1a8 <sniprintf>
			Shours,Sminutes,Sseconds);
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 80271dc:	4b0f      	ldr	r3, [pc, #60]	; (802721c <SettingsScreen_clockInit+0x114>)
 80271de:	681b      	ldr	r3, [r3, #0]
 80271e0:	4913      	ldr	r1, [pc, #76]	; (8027230 <SettingsScreen_clockInit+0x128>)
 80271e2:	4618      	mov	r0, r3
 80271e4:	f7f5 fd66 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 80271e8:	4b0c      	ldr	r3, [pc, #48]	; (802721c <SettingsScreen_clockInit+0x114>)
 80271ea:	6818      	ldr	r0, [r3, #0]
 80271ec:	2328      	movs	r3, #40	; 0x28
 80271ee:	9300      	str	r3, [sp, #0]
 80271f0:	f06f 0313 	mvn.w	r3, #19
 80271f4:	2203      	movs	r2, #3
 80271f6:	2100      	movs	r1, #0
 80271f8:	f7e2 fb12 	bl	8009820 <lv_obj_align>
}
 80271fc:	bf00      	nop
 80271fe:	3714      	adds	r7, #20
 8027200:	46bd      	mov	sp, r7
 8027202:	bd90      	pop	{r4, r7, pc}
 8027204:	2001ba40 	.word	0x2001ba40
 8027208:	2001b164 	.word	0x2001b164
 802720c:	0802d864 	.word	0x0802d864
 8027210:	200027ec 	.word	0x200027ec
 8027214:	2001b0ac 	.word	0x2001b0ac
 8027218:	0802d830 	.word	0x0802d830
 802721c:	2001bde8 	.word	0x2001bde8
 8027220:	2001bde1 	.word	0x2001bde1
 8027224:	2001bdec 	.word	0x2001bdec
 8027228:	2001bdff 	.word	0x2001bdff
 802722c:	0802d838 	.word	0x0802d838
 8027230:	2001be04 	.word	0x2001be04

08027234 <SettingsScreen_dateInit>:
/**/
void SettingsScreen_dateInit(bool theme){
 8027234:	b590      	push	{r4, r7, lr}
 8027236:	b087      	sub	sp, #28
 8027238:	af02      	add	r7, sp, #8
 802723a:	4603      	mov	r3, r0
 802723c:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 802723e:	493c      	ldr	r1, [pc, #240]	; (8027330 <SettingsScreen_dateInit+0xfc>)
 8027240:	483c      	ldr	r0, [pc, #240]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027242:	f7e4 fd31 	bl	800bca8 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8027246:	4b3b      	ldr	r3, [pc, #236]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027248:	2200      	movs	r2, #0
 802724a:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 802724c:	79fb      	ldrb	r3, [r7, #7]
 802724e:	2b00      	cmp	r3, #0
 8027250:	d003      	beq.n	802725a <SettingsScreen_dateInit+0x26>
 8027252:	4a38      	ldr	r2, [pc, #224]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027254:	4b38      	ldr	r3, [pc, #224]	; (8027338 <SettingsScreen_dateInit+0x104>)
 8027256:	881b      	ldrh	r3, [r3, #0]
 8027258:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 802725a:	4b36      	ldr	r3, [pc, #216]	; (8027334 <SettingsScreen_dateInit+0x100>)
 802725c:	4a37      	ldr	r2, [pc, #220]	; (802733c <SettingsScreen_dateInit+0x108>)
 802725e:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8027260:	4c34      	ldr	r4, [pc, #208]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027262:	2200      	movs	r2, #0
 8027264:	21a5      	movs	r1, #165	; 0xa5
 8027266:	20ff      	movs	r0, #255	; 0xff
 8027268:	f7ff fe78 	bl	8026f5c <lv_color_make>
 802726c:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 802726e:	4c31      	ldr	r4, [pc, #196]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027270:	2200      	movs	r2, #0
 8027272:	21a5      	movs	r1, #165	; 0xa5
 8027274:	20ff      	movs	r0, #255	; 0xff
 8027276:	f7ff fe71 	bl	8026f5c <lv_color_make>
 802727a:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 802727c:	4b2d      	ldr	r3, [pc, #180]	; (8027334 <SettingsScreen_dateInit+0x100>)
 802727e:	220a      	movs	r2, #10
 8027280:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8027282:	4b2c      	ldr	r3, [pc, #176]	; (8027334 <SettingsScreen_dateInit+0x100>)
 8027284:	22c8      	movs	r2, #200	; 0xc8
 8027286:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * dateLbl = lv_label_create(lv_scr_act(), NULL);
 8027288:	f7ff feb4 	bl	8026ff4 <lv_scr_act>
 802728c:	4603      	mov	r3, r0
 802728e:	2100      	movs	r1, #0
 8027290:	4618      	mov	r0, r3
 8027292:	f7f5 fbdd 	bl	801ca50 <lv_label_create>
 8027296:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(dateLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8027298:	4a29      	ldr	r2, [pc, #164]	; (8027340 <SettingsScreen_dateInit+0x10c>)
 802729a:	2100      	movs	r1, #0
 802729c:	68f8      	ldr	r0, [r7, #12]
 802729e:	f7ff feb4 	bl	802700a <lv_label_set_style>
		lv_label_set_text(dateLbl, "Date:");
 80272a2:	4928      	ldr	r1, [pc, #160]	; (8027344 <SettingsScreen_dateInit+0x110>)
 80272a4:	68f8      	ldr	r0, [r7, #12]
 80272a6:	f7f5 fd05 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(dateLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 80);
 80272aa:	2350      	movs	r3, #80	; 0x50
 80272ac:	9300      	str	r3, [sp, #0]
 80272ae:	2314      	movs	r3, #20
 80272b0:	2201      	movs	r2, #1
 80272b2:	2100      	movs	r1, #0
 80272b4:	68f8      	ldr	r0, [r7, #12]
 80272b6:	f7e2 fab3 	bl	8009820 <lv_obj_align>

    S_DateLbl = lv_label_create(lv_scr_act(), NULL);
 80272ba:	f7ff fe9b 	bl	8026ff4 <lv_scr_act>
 80272be:	4603      	mov	r3, r0
 80272c0:	2100      	movs	r1, #0
 80272c2:	4618      	mov	r0, r3
 80272c4:	f7f5 fbc4 	bl	801ca50 <lv_label_create>
 80272c8:	4602      	mov	r2, r0
 80272ca:	4b1f      	ldr	r3, [pc, #124]	; (8027348 <SettingsScreen_dateInit+0x114>)
 80272cc:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_DateLbl, true);
 80272ce:	4b1e      	ldr	r3, [pc, #120]	; (8027348 <SettingsScreen_dateInit+0x114>)
 80272d0:	681b      	ldr	r3, [r3, #0]
 80272d2:	2101      	movs	r1, #1
 80272d4:	4618      	mov	r0, r3
 80272d6:	f7f5 fe09 	bl	801ceec <lv_label_set_recolor>
 	lv_label_set_style(S_DateLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 80272da:	4b1b      	ldr	r3, [pc, #108]	; (8027348 <SettingsScreen_dateInit+0x114>)
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	4a15      	ldr	r2, [pc, #84]	; (8027334 <SettingsScreen_dateInit+0x100>)
 80272e0:	2100      	movs	r1, #0
 80272e2:	4618      	mov	r0, r3
 80272e4:	f7ff fe91 	bl	802700a <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 80272e8:	4b18      	ldr	r3, [pc, #96]	; (802734c <SettingsScreen_dateInit+0x118>)
 80272ea:	781b      	ldrb	r3, [r3, #0]
 80272ec:	4619      	mov	r1, r3
 80272ee:	4b18      	ldr	r3, [pc, #96]	; (8027350 <SettingsScreen_dateInit+0x11c>)
 80272f0:	781b      	ldrb	r3, [r3, #0]
 80272f2:	461a      	mov	r2, r3
 80272f4:	4b17      	ldr	r3, [pc, #92]	; (8027354 <SettingsScreen_dateInit+0x120>)
 80272f6:	881b      	ldrh	r3, [r3, #0]
 80272f8:	9301      	str	r3, [sp, #4]
 80272fa:	9200      	str	r2, [sp, #0]
 80272fc:	460b      	mov	r3, r1
 80272fe:	4a16      	ldr	r2, [pc, #88]	; (8027358 <SettingsScreen_dateInit+0x124>)
 8027300:	2140      	movs	r1, #64	; 0x40
 8027302:	4816      	ldr	r0, [pc, #88]	; (802735c <SettingsScreen_dateInit+0x128>)
 8027304:	f003 ff50 	bl	802b1a8 <sniprintf>
			Sdates,Smonths,Syears);
	lv_label_set_text(S_DateLbl, settingsBuffer);
 8027308:	4b0f      	ldr	r3, [pc, #60]	; (8027348 <SettingsScreen_dateInit+0x114>)
 802730a:	681b      	ldr	r3, [r3, #0]
 802730c:	4913      	ldr	r1, [pc, #76]	; (802735c <SettingsScreen_dateInit+0x128>)
 802730e:	4618      	mov	r0, r3
 8027310:	f7f5 fcd0 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8027314:	4b0c      	ldr	r3, [pc, #48]	; (8027348 <SettingsScreen_dateInit+0x114>)
 8027316:	6818      	ldr	r0, [r3, #0]
 8027318:	2350      	movs	r3, #80	; 0x50
 802731a:	9300      	str	r3, [sp, #0]
 802731c:	f06f 0313 	mvn.w	r3, #19
 8027320:	2203      	movs	r2, #3
 8027322:	2100      	movs	r1, #0
 8027324:	f7e2 fa7c 	bl	8009820 <lv_obj_align>
}
 8027328:	bf00      	nop
 802732a:	3714      	adds	r7, #20
 802732c:	46bd      	mov	sp, r7
 802732e:	bd90      	pop	{r4, r7, pc}
 8027330:	2001ba40 	.word	0x2001ba40
 8027334:	2001b1a0 	.word	0x2001b1a0
 8027338:	0802d864 	.word	0x0802d864
 802733c:	200027ec 	.word	0x200027ec
 8027340:	2001b0ac 	.word	0x2001b0ac
 8027344:	0802d868 	.word	0x0802d868
 8027348:	2001bdf8 	.word	0x2001bdf8
 802734c:	2001bde0 	.word	0x2001bde0
 8027350:	2001bdfe 	.word	0x2001bdfe
 8027354:	2001bdf4 	.word	0x2001bdf4
 8027358:	0802d870 	.word	0x0802d870
 802735c:	2001be04 	.word	0x2001be04

08027360 <SettingsScreen_bluetoothInit>:

void SettingsScreen_bluetoothInit(bool theme){
 8027360:	b590      	push	{r4, r7, lr}
 8027362:	b087      	sub	sp, #28
 8027364:	af02      	add	r7, sp, #8
 8027366:	4603      	mov	r3, r0
 8027368:	71fb      	strb	r3, [r7, #7]

    lv_style_copy(&bluetooth_indic_style, &lv_style_pretty_color);
 802736a:	493c      	ldr	r1, [pc, #240]	; (802745c <SettingsScreen_bluetoothInit+0xfc>)
 802736c:	483c      	ldr	r0, [pc, #240]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 802736e:	f7e4 fc9b 	bl	800bca8 <lv_style_copy>
    bluetooth_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8027372:	4b3b      	ldr	r3, [pc, #236]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 8027374:	f647 4218 	movw	r2, #31768	; 0x7c18
 8027378:	80da      	strh	r2, [r3, #6]
    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 802737a:	4c39      	ldr	r4, [pc, #228]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 802737c:	2000      	movs	r0, #0
 802737e:	f7ff fe25 	bl	8026fcc <lv_color_hex>
 8027382:	8060      	strh	r0, [r4, #2]
    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8027384:	4c36      	ldr	r4, [pc, #216]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 8027386:	2000      	movs	r0, #0
 8027388:	f7ff fe20 	bl	8026fcc <lv_color_hex>
 802738c:	80a0      	strh	r0, [r4, #4]
    if(theme){
 802738e:	79fb      	ldrb	r3, [r7, #7]
 8027390:	2b00      	cmp	r3, #0
 8027392:	d00b      	beq.n	80273ac <SettingsScreen_bluetoothInit+0x4c>
    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8027394:	4c32      	ldr	r4, [pc, #200]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 8027396:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802739a:	f7ff fe17 	bl	8026fcc <lv_color_hex>
 802739e:	8060      	strh	r0, [r4, #2]
    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 80273a0:	4c2f      	ldr	r4, [pc, #188]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 80273a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80273a6:	f7ff fe11 	bl	8026fcc <lv_color_hex>
 80273aa:	80a0      	strh	r0, [r4, #4]
    }
    bluetooth_indic_style.body.padding.left = 0;
 80273ac:	4b2c      	ldr	r3, [pc, #176]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 80273ae:	2200      	movs	r2, #0
 80273b0:	835a      	strh	r2, [r3, #26]
    bluetooth_indic_style.body.padding.right = 0;
 80273b2:	4b2b      	ldr	r3, [pc, #172]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 80273b4:	2200      	movs	r2, #0
 80273b6:	839a      	strh	r2, [r3, #28]
    bluetooth_indic_style.body.padding.top = 0;
 80273b8:	4b29      	ldr	r3, [pc, #164]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 80273ba:	2200      	movs	r2, #0
 80273bc:	82da      	strh	r2, [r3, #22]
    bluetooth_indic_style.body.padding.bottom = 0;
 80273be:	4b28      	ldr	r3, [pc, #160]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 80273c0:	2200      	movs	r2, #0
 80273c2:	831a      	strh	r2, [r3, #24]

    lv_obj_t * bluetoothLbl = lv_label_create(lv_scr_act(), NULL);
 80273c4:	f7ff fe16 	bl	8026ff4 <lv_scr_act>
 80273c8:	4603      	mov	r3, r0
 80273ca:	2100      	movs	r1, #0
 80273cc:	4618      	mov	r0, r3
 80273ce:	f7f5 fb3f 	bl	801ca50 <lv_label_create>
 80273d2:	60f8      	str	r0, [r7, #12]
 	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80273d4:	4a23      	ldr	r2, [pc, #140]	; (8027464 <SettingsScreen_bluetoothInit+0x104>)
 80273d6:	2100      	movs	r1, #0
 80273d8:	68f8      	ldr	r0, [r7, #12]
 80273da:	f7ff fe16 	bl	802700a <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH "Statu:");
 80273de:	4922      	ldr	r1, [pc, #136]	; (8027468 <SettingsScreen_bluetoothInit+0x108>)
 80273e0:	68f8      	ldr	r0, [r7, #12]
 80273e2:	f7f5 fc67 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 120);
 80273e6:	2378      	movs	r3, #120	; 0x78
 80273e8:	9300      	str	r3, [sp, #0]
 80273ea:	2314      	movs	r3, #20
 80273ec:	2201      	movs	r2, #1
 80273ee:	2100      	movs	r1, #0
 80273f0:	68f8      	ldr	r0, [r7, #12]
 80273f2:	f7e2 fa15 	bl	8009820 <lv_obj_align>

 	SbluetoothSwitch = lv_sw_create(lv_scr_act(), NULL);
 80273f6:	f7ff fdfd 	bl	8026ff4 <lv_scr_act>
 80273fa:	4603      	mov	r3, r0
 80273fc:	2100      	movs	r1, #0
 80273fe:	4618      	mov	r0, r3
 8027400:	f7fa fd7e 	bl	8021f00 <lv_sw_create>
 8027404:	4602      	mov	r2, r0
 8027406:	4b19      	ldr	r3, [pc, #100]	; (802746c <SettingsScreen_bluetoothInit+0x10c>)
 8027408:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 802740a:	4b18      	ldr	r3, [pc, #96]	; (802746c <SettingsScreen_bluetoothInit+0x10c>)
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	4a14      	ldr	r2, [pc, #80]	; (8027460 <SettingsScreen_bluetoothInit+0x100>)
 8027410:	2101      	movs	r1, #1
 8027412:	4618      	mov	r0, r3
 8027414:	f7fa fe52 	bl	80220bc <lv_sw_set_style>
    if(!SbluetoothStatu)lv_sw_on(SbluetoothSwitch, LV_ANIM_OFF);
 8027418:	4b15      	ldr	r3, [pc, #84]	; (8027470 <SettingsScreen_bluetoothInit+0x110>)
 802741a:	781b      	ldrb	r3, [r3, #0]
 802741c:	f083 0301 	eor.w	r3, r3, #1
 8027420:	b2db      	uxtb	r3, r3
 8027422:	2b00      	cmp	r3, #0
 8027424:	d006      	beq.n	8027434 <SettingsScreen_bluetoothInit+0xd4>
 8027426:	4b11      	ldr	r3, [pc, #68]	; (802746c <SettingsScreen_bluetoothInit+0x10c>)
 8027428:	681b      	ldr	r3, [r3, #0]
 802742a:	2100      	movs	r1, #0
 802742c:	4618      	mov	r0, r3
 802742e:	f7fa fe0f 	bl	8022050 <lv_sw_on>
 8027432:	e005      	b.n	8027440 <SettingsScreen_bluetoothInit+0xe0>
    else     lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8027434:	4b0d      	ldr	r3, [pc, #52]	; (802746c <SettingsScreen_bluetoothInit+0x10c>)
 8027436:	681b      	ldr	r3, [r3, #0]
 8027438:	2101      	movs	r1, #1
 802743a:	4618      	mov	r0, r3
 802743c:	f7fa fe08 	bl	8022050 <lv_sw_on>
    lv_obj_align(SbluetoothSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 120);
 8027440:	4b0a      	ldr	r3, [pc, #40]	; (802746c <SettingsScreen_bluetoothInit+0x10c>)
 8027442:	6818      	ldr	r0, [r3, #0]
 8027444:	2378      	movs	r3, #120	; 0x78
 8027446:	9300      	str	r3, [sp, #0]
 8027448:	f06f 0313 	mvn.w	r3, #19
 802744c:	2203      	movs	r2, #3
 802744e:	2100      	movs	r1, #0
 8027450:	f7e2 f9e6 	bl	8009820 <lv_obj_align>
}
 8027454:	bf00      	nop
 8027456:	3714      	adds	r7, #20
 8027458:	46bd      	mov	sp, r7
 802745a:	bd90      	pop	{r4, r7, pc}
 802745c:	2001b860 	.word	0x2001b860
 8027460:	2001b0e8 	.word	0x2001b0e8
 8027464:	2001b0ac 	.word	0x2001b0ac
 8027468:	0802d89c 	.word	0x0802d89c
 802746c:	2001bde4 	.word	0x2001bde4
 8027470:	2001b160 	.word	0x2001b160

08027474 <SettingsScreen_unitTypeInit>:
/**/
void SettingsScreen_unitTypeInit(bool theme){
 8027474:	b590      	push	{r4, r7, lr}
 8027476:	b087      	sub	sp, #28
 8027478:	af02      	add	r7, sp, #8
 802747a:	4603      	mov	r3, r0
 802747c:	71fb      	strb	r3, [r7, #7]
	static lv_style_t unitDesc_Style;
	lv_style_copy(&unitDesc_Style, &description_Style);
 802747e:	494c      	ldr	r1, [pc, #304]	; (80275b0 <SettingsScreen_unitTypeInit+0x13c>)
 8027480:	484c      	ldr	r0, [pc, #304]	; (80275b4 <SettingsScreen_unitTypeInit+0x140>)
 8027482:	f7e4 fc11 	bl	800bca8 <lv_style_copy>
	unitDesc_Style.text.font = &lv_font_unscii_8;
 8027486:	4b4b      	ldr	r3, [pc, #300]	; (80275b4 <SettingsScreen_unitTypeInit+0x140>)
 8027488:	4a4b      	ldr	r2, [pc, #300]	; (80275b8 <SettingsScreen_unitTypeInit+0x144>)
 802748a:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_copy(&unit_indic_style, &lv_style_pretty_color);
 802748c:	494b      	ldr	r1, [pc, #300]	; (80275bc <SettingsScreen_unitTypeInit+0x148>)
 802748e:	484c      	ldr	r0, [pc, #304]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 8027490:	f7e4 fc0a 	bl	800bca8 <lv_style_copy>
    unit_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8027494:	4b4a      	ldr	r3, [pc, #296]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 8027496:	f647 4218 	movw	r2, #31768	; 0x7c18
 802749a:	80da      	strh	r2, [r3, #6]
    unit_indic_style.body.main_color = lv_color_hex(0x000000);
 802749c:	4c48      	ldr	r4, [pc, #288]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 802749e:	2000      	movs	r0, #0
 80274a0:	f7ff fd94 	bl	8026fcc <lv_color_hex>
 80274a4:	8060      	strh	r0, [r4, #2]
    unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 80274a6:	4c46      	ldr	r4, [pc, #280]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274a8:	2000      	movs	r0, #0
 80274aa:	f7ff fd8f 	bl	8026fcc <lv_color_hex>
 80274ae:	80a0      	strh	r0, [r4, #4]
    if(theme){
 80274b0:	79fb      	ldrb	r3, [r7, #7]
 80274b2:	2b00      	cmp	r3, #0
 80274b4:	d00b      	beq.n	80274ce <SettingsScreen_unitTypeInit+0x5a>
    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 80274b6:	4c42      	ldr	r4, [pc, #264]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80274bc:	f7ff fd86 	bl	8026fcc <lv_color_hex>
 80274c0:	8060      	strh	r0, [r4, #2]
    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 80274c2:	4c3f      	ldr	r4, [pc, #252]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80274c8:	f7ff fd80 	bl	8026fcc <lv_color_hex>
 80274cc:	80a0      	strh	r0, [r4, #4]
    }
    unit_indic_style.body.padding.left = 0;
 80274ce:	4b3c      	ldr	r3, [pc, #240]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274d0:	2200      	movs	r2, #0
 80274d2:	835a      	strh	r2, [r3, #26]
    unit_indic_style.body.padding.right = 0;
 80274d4:	4b3a      	ldr	r3, [pc, #232]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274d6:	2200      	movs	r2, #0
 80274d8:	839a      	strh	r2, [r3, #28]
    unit_indic_style.body.padding.top = 0;
 80274da:	4b39      	ldr	r3, [pc, #228]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274dc:	2200      	movs	r2, #0
 80274de:	82da      	strh	r2, [r3, #22]
    unit_indic_style.body.padding.bottom = 0;
 80274e0:	4b37      	ldr	r3, [pc, #220]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 80274e2:	2200      	movs	r2, #0
 80274e4:	831a      	strh	r2, [r3, #24]

    lv_obj_t * unitLbl = lv_label_create(lv_scr_act(), NULL);
 80274e6:	f7ff fd85 	bl	8026ff4 <lv_scr_act>
 80274ea:	4603      	mov	r3, r0
 80274ec:	2100      	movs	r1, #0
 80274ee:	4618      	mov	r0, r3
 80274f0:	f7f5 faae 	bl	801ca50 <lv_label_create>
 80274f4:	60f8      	str	r0, [r7, #12]
    lv_label_set_style(unitLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80274f6:	4a2e      	ldr	r2, [pc, #184]	; (80275b0 <SettingsScreen_unitTypeInit+0x13c>)
 80274f8:	2100      	movs	r1, #0
 80274fa:	68f8      	ldr	r0, [r7, #12]
 80274fc:	f7ff fd85 	bl	802700a <lv_label_set_style>
	lv_label_set_text(unitLbl, "Unit:");
 8027500:	4930      	ldr	r1, [pc, #192]	; (80275c4 <SettingsScreen_unitTypeInit+0x150>)
 8027502:	68f8      	ldr	r0, [r7, #12]
 8027504:	f7f5 fbd6 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(unitLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 160);
 8027508:	23a0      	movs	r3, #160	; 0xa0
 802750a:	9300      	str	r3, [sp, #0]
 802750c:	2314      	movs	r3, #20
 802750e:	2201      	movs	r2, #1
 8027510:	2100      	movs	r1, #0
 8027512:	68f8      	ldr	r0, [r7, #12]
 8027514:	f7e2 f984 	bl	8009820 <lv_obj_align>

    lv_obj_t * unitDescLbl = lv_label_create(lv_scr_act(), NULL);
 8027518:	f7ff fd6c 	bl	8026ff4 <lv_scr_act>
 802751c:	4603      	mov	r3, r0
 802751e:	2100      	movs	r1, #0
 8027520:	4618      	mov	r0, r3
 8027522:	f7f5 fa95 	bl	801ca50 <lv_label_create>
 8027526:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(unitDescLbl, LV_LABEL_STYLE_MAIN, &unitDesc_Style);
 8027528:	4a22      	ldr	r2, [pc, #136]	; (80275b4 <SettingsScreen_unitTypeInit+0x140>)
 802752a:	2100      	movs	r1, #0
 802752c:	68b8      	ldr	r0, [r7, #8]
 802752e:	f7ff fd6c 	bl	802700a <lv_label_set_style>
 	lv_label_set_align(unitDescLbl, LV_LABEL_ALIGN_CENTER);
 8027532:	2101      	movs	r1, #1
 8027534:	68b8      	ldr	r0, [r7, #8]
 8027536:	f7f5 fcb5 	bl	801cea4 <lv_label_set_align>
	lv_label_set_text(unitDescLbl, "KM\n/\nMILES");
 802753a:	4923      	ldr	r1, [pc, #140]	; (80275c8 <SettingsScreen_unitTypeInit+0x154>)
 802753c:	68b8      	ldr	r0, [r7, #8]
 802753e:	f7f5 fbb9 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(unitDescLbl, NULL, LV_ALIGN_IN_TOP_MID, 0, 160);
 8027542:	23a0      	movs	r3, #160	; 0xa0
 8027544:	9300      	str	r3, [sp, #0]
 8027546:	2300      	movs	r3, #0
 8027548:	2202      	movs	r2, #2
 802754a:	2100      	movs	r1, #0
 802754c:	68b8      	ldr	r0, [r7, #8]
 802754e:	f7e2 f967 	bl	8009820 <lv_obj_align>

    unitTypeSwitch = lv_sw_create(lv_scr_act(), NULL);
 8027552:	f7ff fd4f 	bl	8026ff4 <lv_scr_act>
 8027556:	4603      	mov	r3, r0
 8027558:	2100      	movs	r1, #0
 802755a:	4618      	mov	r0, r3
 802755c:	f7fa fcd0 	bl	8021f00 <lv_sw_create>
 8027560:	4602      	mov	r2, r0
 8027562:	4b1a      	ldr	r3, [pc, #104]	; (80275cc <SettingsScreen_unitTypeInit+0x158>)
 8027564:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 8027566:	4b19      	ldr	r3, [pc, #100]	; (80275cc <SettingsScreen_unitTypeInit+0x158>)
 8027568:	681b      	ldr	r3, [r3, #0]
 802756a:	4a15      	ldr	r2, [pc, #84]	; (80275c0 <SettingsScreen_unitTypeInit+0x14c>)
 802756c:	2101      	movs	r1, #1
 802756e:	4618      	mov	r0, r3
 8027570:	f7fa fda4 	bl	80220bc <lv_sw_set_style>
    lv_sw_on(unitTypeSwitch, LV_ANIM_OFF);
 8027574:	4b15      	ldr	r3, [pc, #84]	; (80275cc <SettingsScreen_unitTypeInit+0x158>)
 8027576:	681b      	ldr	r3, [r3, #0]
 8027578:	2100      	movs	r1, #0
 802757a:	4618      	mov	r0, r3
 802757c:	f7fa fd68 	bl	8022050 <lv_sw_on>
    if(SunitType)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 8027580:	4b13      	ldr	r3, [pc, #76]	; (80275d0 <SettingsScreen_unitTypeInit+0x15c>)
 8027582:	781b      	ldrb	r3, [r3, #0]
 8027584:	2b00      	cmp	r3, #0
 8027586:	d005      	beq.n	8027594 <SettingsScreen_unitTypeInit+0x120>
 8027588:	4b10      	ldr	r3, [pc, #64]	; (80275cc <SettingsScreen_unitTypeInit+0x158>)
 802758a:	681b      	ldr	r3, [r3, #0]
 802758c:	2101      	movs	r1, #1
 802758e:	4618      	mov	r0, r3
 8027590:	f7fa fd5e 	bl	8022050 <lv_sw_on>
    lv_obj_align(unitTypeSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 160);
 8027594:	4b0d      	ldr	r3, [pc, #52]	; (80275cc <SettingsScreen_unitTypeInit+0x158>)
 8027596:	6818      	ldr	r0, [r3, #0]
 8027598:	23a0      	movs	r3, #160	; 0xa0
 802759a:	9300      	str	r3, [sp, #0]
 802759c:	f06f 0313 	mvn.w	r3, #19
 80275a0:	2203      	movs	r2, #3
 80275a2:	2100      	movs	r1, #0
 80275a4:	f7e2 f93c 	bl	8009820 <lv_obj_align>
}
 80275a8:	bf00      	nop
 80275aa:	3714      	adds	r7, #20
 80275ac:	46bd      	mov	sp, r7
 80275ae:	bd90      	pop	{r4, r7, pc}
 80275b0:	2001b0ac 	.word	0x2001b0ac
 80275b4:	2001b1dc 	.word	0x2001b1dc
 80275b8:	200026d0 	.word	0x200026d0
 80275bc:	2001b860 	.word	0x2001b860
 80275c0:	2001b124 	.word	0x2001b124
 80275c4:	0802d8a8 	.word	0x0802d8a8
 80275c8:	0802d8b0 	.word	0x0802d8b0
 80275cc:	2001bddc 	.word	0x2001bddc
 80275d0:	2001be46 	.word	0x2001be46

080275d4 <SettingsScreen_buttonsInit>:
/**/
void SettingsScreen_buttonsInit(bool theme){
 80275d4:	b580      	push	{r7, lr}
 80275d6:	b086      	sub	sp, #24
 80275d8:	af02      	add	r7, sp, #8
 80275da:	4603      	mov	r3, r0
 80275dc:	71fb      	strb	r3, [r7, #7]
	static lv_style_t scrl_style,bg_style;
	lv_style_copy(&scrl_style, &lv_style_plain);
 80275de:	4963      	ldr	r1, [pc, #396]	; (802776c <SettingsScreen_buttonsInit+0x198>)
 80275e0:	4863      	ldr	r0, [pc, #396]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 80275e2:	f7e4 fb61 	bl	800bca8 <lv_style_copy>
	scrl_style.body.main_color = LV_COLOR_SILVER;
 80275e6:	4a62      	ldr	r2, [pc, #392]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 80275e8:	4b62      	ldr	r3, [pc, #392]	; (8027774 <SettingsScreen_buttonsInit+0x1a0>)
 80275ea:	881b      	ldrh	r3, [r3, #0]
 80275ec:	8053      	strh	r3, [r2, #2]
	scrl_style.body.grad_color = LV_COLOR_SILVER;
 80275ee:	4a60      	ldr	r2, [pc, #384]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 80275f0:	4b60      	ldr	r3, [pc, #384]	; (8027774 <SettingsScreen_buttonsInit+0x1a0>)
 80275f2:	881b      	ldrh	r3, [r3, #0]
 80275f4:	8093      	strh	r3, [r2, #4]
	scrl_style.body.border.color = LV_COLOR_BLACK;
 80275f6:	4b5e      	ldr	r3, [pc, #376]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 80275f8:	2200      	movs	r2, #0
 80275fa:	815a      	strh	r2, [r3, #10]
	scrl_style.body.border.width = 0;
 80275fc:	4b5c      	ldr	r3, [pc, #368]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 80275fe:	2200      	movs	r2, #0
 8027600:	819a      	strh	r2, [r3, #12]
	scrl_style.text.color = LV_COLOR_WHITE;
 8027602:	4a5b      	ldr	r2, [pc, #364]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 8027604:	4b5c      	ldr	r3, [pc, #368]	; (8027778 <SettingsScreen_buttonsInit+0x1a4>)
 8027606:	881b      	ldrh	r3, [r3, #0]
 8027608:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&bg_style, &lv_style_plain);
 802760a:	4958      	ldr	r1, [pc, #352]	; (802776c <SettingsScreen_buttonsInit+0x198>)
 802760c:	485b      	ldr	r0, [pc, #364]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 802760e:	f7e4 fb4b 	bl	800bca8 <lv_style_copy>
	bg_style.body.main_color = LV_COLOR_BLACK;
 8027612:	4b5a      	ldr	r3, [pc, #360]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027614:	2200      	movs	r2, #0
 8027616:	805a      	strh	r2, [r3, #2]
	bg_style.body.grad_color = LV_COLOR_BLACK;
 8027618:	4b58      	ldr	r3, [pc, #352]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 802761a:	2200      	movs	r2, #0
 802761c:	809a      	strh	r2, [r3, #4]
	bg_style.body.border.color = LV_COLOR_WHITE;
 802761e:	4a57      	ldr	r2, [pc, #348]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027620:	4b55      	ldr	r3, [pc, #340]	; (8027778 <SettingsScreen_buttonsInit+0x1a4>)
 8027622:	881b      	ldrh	r3, [r3, #0]
 8027624:	8153      	strh	r3, [r2, #10]
	bg_style.body.border.width = 0;
 8027626:	4b55      	ldr	r3, [pc, #340]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027628:	2200      	movs	r2, #0
 802762a:	819a      	strh	r2, [r3, #12]
	bg_style.body.border.opa = LV_OPA_90;
 802762c:	4b53      	ldr	r3, [pc, #332]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 802762e:	22e5      	movs	r2, #229	; 0xe5
 8027630:	73da      	strb	r2, [r3, #15]
	bg_style.body.opa = LV_OPA_90;
 8027632:	4b52      	ldr	r3, [pc, #328]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027634:	22e5      	movs	r2, #229	; 0xe5
 8027636:	721a      	strb	r2, [r3, #8]
	bg_style.text.color = LV_COLOR_WHITE;
 8027638:	4a50      	ldr	r2, [pc, #320]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 802763a:	4b4f      	ldr	r3, [pc, #316]	; (8027778 <SettingsScreen_buttonsInit+0x1a4>)
 802763c:	881b      	ldrh	r3, [r3, #0]
 802763e:	8413      	strh	r3, [r2, #32]
    if(theme){
 8027640:	79fb      	ldrb	r3, [r7, #7]
 8027642:	2b00      	cmp	r3, #0
 8027644:	d010      	beq.n	8027668 <SettingsScreen_buttonsInit+0x94>
		bg_style.body.main_color = LV_COLOR_WHITE;
 8027646:	4a4d      	ldr	r2, [pc, #308]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027648:	4b4b      	ldr	r3, [pc, #300]	; (8027778 <SettingsScreen_buttonsInit+0x1a4>)
 802764a:	881b      	ldrh	r3, [r3, #0]
 802764c:	8053      	strh	r3, [r2, #2]
		bg_style.body.grad_color = LV_COLOR_WHITE;
 802764e:	4a4b      	ldr	r2, [pc, #300]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027650:	4b49      	ldr	r3, [pc, #292]	; (8027778 <SettingsScreen_buttonsInit+0x1a4>)
 8027652:	881b      	ldrh	r3, [r3, #0]
 8027654:	8093      	strh	r3, [r2, #4]
		bg_style.body.border.color = LV_COLOR_BLACK;
 8027656:	4b49      	ldr	r3, [pc, #292]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027658:	2200      	movs	r2, #0
 802765a:	815a      	strh	r2, [r3, #10]
		scrl_style.text.color = LV_COLOR_BLACK;
 802765c:	4b44      	ldr	r3, [pc, #272]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 802765e:	2200      	movs	r2, #0
 8027660:	841a      	strh	r2, [r3, #32]
		bg_style.text.color = LV_COLOR_BLACK;
 8027662:	4b46      	ldr	r3, [pc, #280]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027664:	2200      	movs	r2, #0
 8027666:	841a      	strh	r2, [r3, #32]
	 }

    lv_obj_t * saveBtnLbl;

    S_saveBtn = lv_btn_create(lv_scr_act(), NULL);
 8027668:	f7ff fcc4 	bl	8026ff4 <lv_scr_act>
 802766c:	4603      	mov	r3, r0
 802766e:	2100      	movs	r1, #0
 8027670:	4618      	mov	r0, r3
 8027672:	f7f1 fb81 	bl	8018d78 <lv_btn_create>
 8027676:	4602      	mov	r2, r0
 8027678:	4b41      	ldr	r3, [pc, #260]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 802767a:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_saveBtn,80);
 802767c:	4b40      	ldr	r3, [pc, #256]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 802767e:	681b      	ldr	r3, [r3, #0]
 8027680:	2150      	movs	r1, #80	; 0x50
 8027682:	4618      	mov	r0, r3
 8027684:	f7e2 f8a2 	bl	80097cc <lv_obj_set_width>
    lv_obj_set_height(S_saveBtn,30);
 8027688:	4b3d      	ldr	r3, [pc, #244]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 802768a:	681b      	ldr	r3, [r3, #0]
 802768c:	211e      	movs	r1, #30
 802768e:	4618      	mov	r0, r3
 8027690:	f7e2 f8b1 	bl	80097f6 <lv_obj_set_height>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8027694:	4b3a      	ldr	r3, [pc, #232]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 8027696:	681b      	ldr	r3, [r3, #0]
 8027698:	4a35      	ldr	r2, [pc, #212]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 802769a:	2100      	movs	r1, #0
 802769c:	4618      	mov	r0, r3
 802769e:	f7f1 fc79 	bl	8018f94 <lv_btn_set_style>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 80276a2:	4b37      	ldr	r3, [pc, #220]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 80276a4:	681b      	ldr	r3, [r3, #0]
 80276a6:	4a35      	ldr	r2, [pc, #212]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 80276a8:	2103      	movs	r1, #3
 80276aa:	4618      	mov	r0, r3
 80276ac:	f7f1 fc72 	bl	8018f94 <lv_btn_set_style>
    lv_obj_align(S_saveBtn, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 200);
 80276b0:	4b33      	ldr	r3, [pc, #204]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 80276b2:	6818      	ldr	r0, [r3, #0]
 80276b4:	23c8      	movs	r3, #200	; 0xc8
 80276b6:	9300      	str	r3, [sp, #0]
 80276b8:	f06f 0313 	mvn.w	r3, #19
 80276bc:	2203      	movs	r2, #3
 80276be:	2100      	movs	r1, #0
 80276c0:	f7e2 f8ae 	bl	8009820 <lv_obj_align>
    lv_btn_set_state(S_saveBtn, LV_BTN_STATE_TGL_PR);
 80276c4:	4b2e      	ldr	r3, [pc, #184]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 80276c6:	681b      	ldr	r3, [r3, #0]
 80276c8:	2103      	movs	r1, #3
 80276ca:	4618      	mov	r0, r3
 80276cc:	f7f1 fc38 	bl	8018f40 <lv_btn_set_state>

    saveBtnLbl = lv_label_create(S_saveBtn, NULL);
 80276d0:	4b2b      	ldr	r3, [pc, #172]	; (8027780 <SettingsScreen_buttonsInit+0x1ac>)
 80276d2:	681b      	ldr	r3, [r3, #0]
 80276d4:	2100      	movs	r1, #0
 80276d6:	4618      	mov	r0, r3
 80276d8:	f7f5 f9ba 	bl	801ca50 <lv_label_create>
 80276dc:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(saveBtnLbl, "Save");
 80276de:	4929      	ldr	r1, [pc, #164]	; (8027784 <SettingsScreen_buttonsInit+0x1b0>)
 80276e0:	68f8      	ldr	r0, [r7, #12]
 80276e2:	f7f5 fae7 	bl	801ccb4 <lv_label_set_text>

    lv_obj_t * closeBtnLbl;

    S_closeBtn = lv_btn_create(lv_scr_act(), NULL);
 80276e6:	f7ff fc85 	bl	8026ff4 <lv_scr_act>
 80276ea:	4603      	mov	r3, r0
 80276ec:	2100      	movs	r1, #0
 80276ee:	4618      	mov	r0, r3
 80276f0:	f7f1 fb42 	bl	8018d78 <lv_btn_create>
 80276f4:	4602      	mov	r2, r0
 80276f6:	4b24      	ldr	r3, [pc, #144]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 80276f8:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_closeBtn,80);
 80276fa:	4b23      	ldr	r3, [pc, #140]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 80276fc:	681b      	ldr	r3, [r3, #0]
 80276fe:	2150      	movs	r1, #80	; 0x50
 8027700:	4618      	mov	r0, r3
 8027702:	f7e2 f863 	bl	80097cc <lv_obj_set_width>
    lv_obj_set_height(S_closeBtn,30);
 8027706:	4b20      	ldr	r3, [pc, #128]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 8027708:	681b      	ldr	r3, [r3, #0]
 802770a:	211e      	movs	r1, #30
 802770c:	4618      	mov	r0, r3
 802770e:	f7e2 f872 	bl	80097f6 <lv_obj_set_height>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8027712:	4b1d      	ldr	r3, [pc, #116]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 8027714:	681b      	ldr	r3, [r3, #0]
 8027716:	4a16      	ldr	r2, [pc, #88]	; (8027770 <SettingsScreen_buttonsInit+0x19c>)
 8027718:	2100      	movs	r1, #0
 802771a:	4618      	mov	r0, r3
 802771c:	f7f1 fc3a 	bl	8018f94 <lv_btn_set_style>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8027720:	4b19      	ldr	r3, [pc, #100]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 8027722:	681b      	ldr	r3, [r3, #0]
 8027724:	4a15      	ldr	r2, [pc, #84]	; (802777c <SettingsScreen_buttonsInit+0x1a8>)
 8027726:	2103      	movs	r1, #3
 8027728:	4618      	mov	r0, r3
 802772a:	f7f1 fc33 	bl	8018f94 <lv_btn_set_style>
    lv_obj_align(S_closeBtn, NULL,LV_ALIGN_IN_TOP_LEFT, 20, 200);
 802772e:	4b16      	ldr	r3, [pc, #88]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 8027730:	6818      	ldr	r0, [r3, #0]
 8027732:	23c8      	movs	r3, #200	; 0xc8
 8027734:	9300      	str	r3, [sp, #0]
 8027736:	2314      	movs	r3, #20
 8027738:	2201      	movs	r2, #1
 802773a:	2100      	movs	r1, #0
 802773c:	f7e2 f870 	bl	8009820 <lv_obj_align>
    lv_btn_set_state(S_closeBtn, LV_BTN_STATE_TGL_PR);
 8027740:	4b11      	ldr	r3, [pc, #68]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 8027742:	681b      	ldr	r3, [r3, #0]
 8027744:	2103      	movs	r1, #3
 8027746:	4618      	mov	r0, r3
 8027748:	f7f1 fbfa 	bl	8018f40 <lv_btn_set_state>

    closeBtnLbl = lv_label_create(S_closeBtn, NULL);
 802774c:	4b0e      	ldr	r3, [pc, #56]	; (8027788 <SettingsScreen_buttonsInit+0x1b4>)
 802774e:	681b      	ldr	r3, [r3, #0]
 8027750:	2100      	movs	r1, #0
 8027752:	4618      	mov	r0, r3
 8027754:	f7f5 f97c 	bl	801ca50 <lv_label_create>
 8027758:	60b8      	str	r0, [r7, #8]
    lv_label_set_text(closeBtnLbl, "close");
 802775a:	490c      	ldr	r1, [pc, #48]	; (802778c <SettingsScreen_buttonsInit+0x1b8>)
 802775c:	68b8      	ldr	r0, [r7, #8]
 802775e:	f7f5 faa9 	bl	801ccb4 <lv_label_set_text>
}
 8027762:	bf00      	nop
 8027764:	3710      	adds	r7, #16
 8027766:	46bd      	mov	sp, r7
 8027768:	bd80      	pop	{r7, pc}
 802776a:	bf00      	nop
 802776c:	2001ba40 	.word	0x2001ba40
 8027770:	2001b218 	.word	0x2001b218
 8027774:	0802d864 	.word	0x0802d864
 8027778:	0802d82c 	.word	0x0802d82c
 802777c:	2001b254 	.word	0x2001b254
 8027780:	2001bdf0 	.word	0x2001bdf0
 8027784:	0802d8bc 	.word	0x0802d8bc
 8027788:	2001bdd8 	.word	0x2001bdd8
 802778c:	0802d8c4 	.word	0x0802d8c4

08027790 <SettingsScreen_ButtonController>:

/*This function using for control to buttons*/
void SettingsScreen_ButtonController(void){
 8027790:	b580      	push	{r7, lr}
 8027792:	af00      	add	r7, sp, #0
	  if(1==tos_LeftButton_Listenner_For_MenuControl()) {	SettingsScreen_DateUpdateVal(false);
 8027794:	f002 fca4 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 8027798:	4603      	mov	r3, r0
 802779a:	2b01      	cmp	r3, #1
 802779c:	d134      	bne.n	8027808 <SettingsScreen_ButtonController+0x78>
 802779e:	2000      	movs	r0, #0
 80277a0:	f000 f96c 	bl	8027a7c <SettingsScreen_DateUpdateVal>
		  switch(S_whichItem){
 80277a4:	4b36      	ldr	r3, [pc, #216]	; (8027880 <SettingsScreen_ButtonController+0xf0>)
 80277a6:	781b      	ldrb	r3, [r3, #0]
 80277a8:	2b04      	cmp	r3, #4
 80277aa:	d82d      	bhi.n	8027808 <SettingsScreen_ButtonController+0x78>
 80277ac:	a201      	add	r2, pc, #4	; (adr r2, 80277b4 <SettingsScreen_ButtonController+0x24>)
 80277ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80277b2:	bf00      	nop
 80277b4:	080277c9 	.word	0x080277c9
 80277b8:	080277d1 	.word	0x080277d1
 80277bc:	080277d9 	.word	0x080277d9
 80277c0:	080277e1 	.word	0x080277e1
 80277c4:	080277e9 	.word	0x080277e9
		  case 0: SettingsScreen_TimeUpdateVal(false); break;
 80277c8:	2000      	movs	r0, #0
 80277ca:	f000 f8e1 	bl	8027990 <SettingsScreen_TimeUpdateVal>
 80277ce:	e01b      	b.n	8027808 <SettingsScreen_ButtonController+0x78>
		  case 1: SettingsScreen_DateUpdateVal(false); break;
 80277d0:	2000      	movs	r0, #0
 80277d2:	f000 f953 	bl	8027a7c <SettingsScreen_DateUpdateVal>
 80277d6:	e017      	b.n	8027808 <SettingsScreen_ButtonController+0x78>
		  case 2: SettingsScreen_BluetoothUpdateVal(false); break;
 80277d8:	2000      	movs	r0, #0
 80277da:	f000 f9d9 	bl	8027b90 <SettingsScreen_BluetoothUpdateVal>
 80277de:	e013      	b.n	8027808 <SettingsScreen_ButtonController+0x78>
		  case 3: SettingsScreen_UnitUpdateVal(false); break;
 80277e0:	2000      	movs	r0, #0
 80277e2:	f000 f9fd 	bl	8027be0 <SettingsScreen_UnitUpdateVal>
 80277e6:	e00f      	b.n	8027808 <SettingsScreen_ButtonController+0x78>
		  case 4: lv_btn_set_state(S_closeBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 80277e8:	4b26      	ldr	r3, [pc, #152]	; (8027884 <SettingsScreen_ButtonController+0xf4>)
 80277ea:	681b      	ldr	r3, [r3, #0]
 80277ec:	2100      	movs	r1, #0
 80277ee:	4618      	mov	r0, r3
 80277f0:	f7f1 fba6 	bl	8018f40 <lv_btn_set_state>
 80277f4:	4b24      	ldr	r3, [pc, #144]	; (8027888 <SettingsScreen_ButtonController+0xf8>)
 80277f6:	2200      	movs	r2, #0
 80277f8:	701a      	strb	r2, [r3, #0]
			tos_MenuScreen_Init(true,S_hrtc);
 80277fa:	4b24      	ldr	r3, [pc, #144]	; (802788c <SettingsScreen_ButtonController+0xfc>)
 80277fc:	681b      	ldr	r3, [r3, #0]
 80277fe:	4619      	mov	r1, r3
 8027800:	2001      	movs	r0, #1
 8027802:	f7fd f8db 	bl	80249bc <tos_MenuScreen_Init>
		  break;
 8027806:	bf00      	nop
		  }
	  }
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8027808:	f002 fc42 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 802780c:	4603      	mov	r3, r0
 802780e:	2b01      	cmp	r3, #1
 8027810:	d12c      	bne.n	802786c <SettingsScreen_ButtonController+0xdc>
		  //SettingsScreen_DateUpdateVal(true);
		  switch(S_whichItem){
 8027812:	4b1b      	ldr	r3, [pc, #108]	; (8027880 <SettingsScreen_ButtonController+0xf0>)
 8027814:	781b      	ldrb	r3, [r3, #0]
 8027816:	2b04      	cmp	r3, #4
 8027818:	d828      	bhi.n	802786c <SettingsScreen_ButtonController+0xdc>
 802781a:	a201      	add	r2, pc, #4	; (adr r2, 8027820 <SettingsScreen_ButtonController+0x90>)
 802781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027820:	08027835 	.word	0x08027835
 8027824:	0802783d 	.word	0x0802783d
 8027828:	08027845 	.word	0x08027845
 802782c:	0802784d 	.word	0x0802784d
 8027830:	08027855 	.word	0x08027855
		  case 0: SettingsScreen_TimeUpdateVal(true); break;
 8027834:	2001      	movs	r0, #1
 8027836:	f000 f8ab 	bl	8027990 <SettingsScreen_TimeUpdateVal>
 802783a:	e017      	b.n	802786c <SettingsScreen_ButtonController+0xdc>
		  case 1: SettingsScreen_DateUpdateVal(true); break;
 802783c:	2001      	movs	r0, #1
 802783e:	f000 f91d 	bl	8027a7c <SettingsScreen_DateUpdateVal>
 8027842:	e013      	b.n	802786c <SettingsScreen_ButtonController+0xdc>
		  case 2: SettingsScreen_BluetoothUpdateVal(true); break;
 8027844:	2001      	movs	r0, #1
 8027846:	f000 f9a3 	bl	8027b90 <SettingsScreen_BluetoothUpdateVal>
 802784a:	e00f      	b.n	802786c <SettingsScreen_ButtonController+0xdc>
		  case 3: SettingsScreen_UnitUpdateVal(true); break;
 802784c:	2001      	movs	r0, #1
 802784e:	f000 f9c7 	bl	8027be0 <SettingsScreen_UnitUpdateVal>
 8027852:	e00b      	b.n	802786c <SettingsScreen_ButtonController+0xdc>
		  case 4: lv_btn_set_state(S_saveBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 8027854:	4b0e      	ldr	r3, [pc, #56]	; (8027890 <SettingsScreen_ButtonController+0x100>)
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	2100      	movs	r1, #0
 802785a:	4618      	mov	r0, r3
 802785c:	f7f1 fb70 	bl	8018f40 <lv_btn_set_state>
 8027860:	4b09      	ldr	r3, [pc, #36]	; (8027888 <SettingsScreen_ButtonController+0xf8>)
 8027862:	2200      	movs	r2, #0
 8027864:	701a      	strb	r2, [r3, #0]
		  SettingsScreen_SetNewValues();
 8027866:	f000 fbd5 	bl	8028014 <SettingsScreen_SetNewValues>
		  break;
 802786a:	bf00      	nop
		  }
	  }
	  if(1==tos_EnterButton_Listenner_For_MenuControl()) {
 802786c:	f002 fc60 	bl	802a130 <tos_EnterButton_Listenner_For_MenuControl>
 8027870:	4603      	mov	r3, r0
 8027872:	2b01      	cmp	r3, #1
 8027874:	d101      	bne.n	802787a <SettingsScreen_ButtonController+0xea>
		  SettingsScreen_WhichItemSetVal();
 8027876:	f000 f80d 	bl	8027894 <SettingsScreen_WhichItemSetVal>
		 // SettingsScreen_DateSetVal();
	  }

}
 802787a:	bf00      	nop
 802787c:	bd80      	pop	{r7, pc}
 802787e:	bf00      	nop
 8027880:	2001be45 	.word	0x2001be45
 8027884:	2001bdd8 	.word	0x2001bdd8
 8027888:	2001bdfc 	.word	0x2001bdfc
 802788c:	2001be00 	.word	0x2001be00
 8027890:	2001bdf0 	.word	0x2001bdf0

08027894 <SettingsScreen_WhichItemSetVal>:


/*This function using for  control the set which item chouser*/
void SettingsScreen_WhichItemSetVal(void){	//	"%d -%d \n",StimeSetVal,S_whichItem
 8027894:	b580      	push	{r7, lr}
 8027896:	af00      	add	r7, sp, #0
	if(4==S_whichItem)S_whichItem=0;
 8027898:	4b1c      	ldr	r3, [pc, #112]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 802789a:	781b      	ldrb	r3, [r3, #0]
 802789c:	2b04      	cmp	r3, #4
 802789e:	d102      	bne.n	80278a6 <SettingsScreen_WhichItemSetVal+0x12>
 80278a0:	4b1a      	ldr	r3, [pc, #104]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278a2:	2200      	movs	r2, #0
 80278a4:	701a      	strb	r2, [r3, #0]

	if(0==S_whichItem)SettingsScreen_TimeSetVal();
 80278a6:	4b19      	ldr	r3, [pc, #100]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278a8:	781b      	ldrb	r3, [r3, #0]
 80278aa:	2b00      	cmp	r3, #0
 80278ac:	d102      	bne.n	80278b4 <SettingsScreen_WhichItemSetVal+0x20>
 80278ae:	f000 f833 	bl	8027918 <SettingsScreen_TimeSetVal>
 80278b2:	e00c      	b.n	80278ce <SettingsScreen_WhichItemSetVal+0x3a>
	else if(1==S_whichItem)SettingsScreen_DateSetVal();
 80278b4:	4b15      	ldr	r3, [pc, #84]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278b6:	781b      	ldrb	r3, [r3, #0]
 80278b8:	2b01      	cmp	r3, #1
 80278ba:	d102      	bne.n	80278c2 <SettingsScreen_WhichItemSetVal+0x2e>
 80278bc:	f000 f84a 	bl	8027954 <SettingsScreen_DateSetVal>
 80278c0:	e005      	b.n	80278ce <SettingsScreen_WhichItemSetVal+0x3a>
	else S_whichItem++;
 80278c2:	4b12      	ldr	r3, [pc, #72]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278c4:	781b      	ldrb	r3, [r3, #0]
 80278c6:	3301      	adds	r3, #1
 80278c8:	b2da      	uxtb	r2, r3
 80278ca:	4b10      	ldr	r3, [pc, #64]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278cc:	701a      	strb	r2, [r3, #0]

	SbluetoothSetVal=false;
 80278ce:	4b10      	ldr	r3, [pc, #64]	; (8027910 <SettingsScreen_WhichItemSetVal+0x7c>)
 80278d0:	2200      	movs	r2, #0
 80278d2:	701a      	strb	r2, [r3, #0]
	if(2==S_whichItem)SbluetoothSetVal=true;
 80278d4:	4b0d      	ldr	r3, [pc, #52]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278d6:	781b      	ldrb	r3, [r3, #0]
 80278d8:	2b02      	cmp	r3, #2
 80278da:	d102      	bne.n	80278e2 <SettingsScreen_WhichItemSetVal+0x4e>
 80278dc:	4b0c      	ldr	r3, [pc, #48]	; (8027910 <SettingsScreen_WhichItemSetVal+0x7c>)
 80278de:	2201      	movs	r2, #1
 80278e0:	701a      	strb	r2, [r3, #0]
	SunitSetVal=false;
 80278e2:	4b0c      	ldr	r3, [pc, #48]	; (8027914 <SettingsScreen_WhichItemSetVal+0x80>)
 80278e4:	2200      	movs	r2, #0
 80278e6:	701a      	strb	r2, [r3, #0]
	if(3==S_whichItem)SunitSetVal=true;
 80278e8:	4b08      	ldr	r3, [pc, #32]	; (802790c <SettingsScreen_WhichItemSetVal+0x78>)
 80278ea:	781b      	ldrb	r3, [r3, #0]
 80278ec:	2b03      	cmp	r3, #3
 80278ee:	d102      	bne.n	80278f6 <SettingsScreen_WhichItemSetVal+0x62>
 80278f0:	4b08      	ldr	r3, [pc, #32]	; (8027914 <SettingsScreen_WhichItemSetVal+0x80>)
 80278f2:	2201      	movs	r2, #1
 80278f4:	701a      	strb	r2, [r3, #0]

	SettingsScreen_newTimeLblController();
 80278f6:	f000 f995 	bl	8027c24 <SettingsScreen_newTimeLblController>
	SettingsScreen_newDateLblController();
 80278fa:	f000 fa51 	bl	8027da0 <SettingsScreen_newDateLblController>
	SettingsScreen_newBluetoothValController();
 80278fe:	f000 fb0d 	bl	8027f1c <SettingsScreen_newBluetoothValController>
	SettingsScreen_newUnitTypeController();
 8027902:	f000 fb49 	bl	8027f98 <SettingsScreen_newUnitTypeController>
}
 8027906:	bf00      	nop
 8027908:	bd80      	pop	{r7, pc}
 802790a:	bf00      	nop
 802790c:	2001be45 	.word	0x2001be45
 8027910:	2001be44 	.word	0x2001be44
 8027914:	2001bde2 	.word	0x2001bde2

08027918 <SettingsScreen_TimeSetVal>:
/*This function using for  control the set time values chouser*/
void SettingsScreen_TimeSetVal(void){
 8027918:	b580      	push	{r7, lr}
 802791a:	af00      	add	r7, sp, #0
	StimeSetVal++;
 802791c:	4b0b      	ldr	r3, [pc, #44]	; (802794c <SettingsScreen_TimeSetVal+0x34>)
 802791e:	781b      	ldrb	r3, [r3, #0]
 8027920:	3301      	adds	r3, #1
 8027922:	b2da      	uxtb	r2, r3
 8027924:	4b09      	ldr	r3, [pc, #36]	; (802794c <SettingsScreen_TimeSetVal+0x34>)
 8027926:	701a      	strb	r2, [r3, #0]
	if(4==StimeSetVal){StimeSetVal=0; S_whichItem++;}
 8027928:	4b08      	ldr	r3, [pc, #32]	; (802794c <SettingsScreen_TimeSetVal+0x34>)
 802792a:	781b      	ldrb	r3, [r3, #0]
 802792c:	2b04      	cmp	r3, #4
 802792e:	d108      	bne.n	8027942 <SettingsScreen_TimeSetVal+0x2a>
 8027930:	4b06      	ldr	r3, [pc, #24]	; (802794c <SettingsScreen_TimeSetVal+0x34>)
 8027932:	2200      	movs	r2, #0
 8027934:	701a      	strb	r2, [r3, #0]
 8027936:	4b06      	ldr	r3, [pc, #24]	; (8027950 <SettingsScreen_TimeSetVal+0x38>)
 8027938:	781b      	ldrb	r3, [r3, #0]
 802793a:	3301      	adds	r3, #1
 802793c:	b2da      	uxtb	r2, r3
 802793e:	4b04      	ldr	r3, [pc, #16]	; (8027950 <SettingsScreen_TimeSetVal+0x38>)
 8027940:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newTimeLblController();
 8027942:	f000 f96f 	bl	8027c24 <SettingsScreen_newTimeLblController>
}
 8027946:	bf00      	nop
 8027948:	bd80      	pop	{r7, pc}
 802794a:	bf00      	nop
 802794c:	2001bdfd 	.word	0x2001bdfd
 8027950:	2001be45 	.word	0x2001be45

08027954 <SettingsScreen_DateSetVal>:
/*This function using for  control the set date values chouser*/
void SettingsScreen_DateSetVal(void){
 8027954:	b580      	push	{r7, lr}
 8027956:	af00      	add	r7, sp, #0
	SdateSetVal++;
 8027958:	4b0b      	ldr	r3, [pc, #44]	; (8027988 <SettingsScreen_DateSetVal+0x34>)
 802795a:	781b      	ldrb	r3, [r3, #0]
 802795c:	3301      	adds	r3, #1
 802795e:	b2da      	uxtb	r2, r3
 8027960:	4b09      	ldr	r3, [pc, #36]	; (8027988 <SettingsScreen_DateSetVal+0x34>)
 8027962:	701a      	strb	r2, [r3, #0]
	if(4==SdateSetVal){SdateSetVal=0; S_whichItem++;}
 8027964:	4b08      	ldr	r3, [pc, #32]	; (8027988 <SettingsScreen_DateSetVal+0x34>)
 8027966:	781b      	ldrb	r3, [r3, #0]
 8027968:	2b04      	cmp	r3, #4
 802796a:	d108      	bne.n	802797e <SettingsScreen_DateSetVal+0x2a>
 802796c:	4b06      	ldr	r3, [pc, #24]	; (8027988 <SettingsScreen_DateSetVal+0x34>)
 802796e:	2200      	movs	r2, #0
 8027970:	701a      	strb	r2, [r3, #0]
 8027972:	4b06      	ldr	r3, [pc, #24]	; (802798c <SettingsScreen_DateSetVal+0x38>)
 8027974:	781b      	ldrb	r3, [r3, #0]
 8027976:	3301      	adds	r3, #1
 8027978:	b2da      	uxtb	r2, r3
 802797a:	4b04      	ldr	r3, [pc, #16]	; (802798c <SettingsScreen_DateSetVal+0x38>)
 802797c:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newDateLblController();
 802797e:	f000 fa0f 	bl	8027da0 <SettingsScreen_newDateLblController>
}
 8027982:	bf00      	nop
 8027984:	bd80      	pop	{r7, pc}
 8027986:	bf00      	nop
 8027988:	2001bdd4 	.word	0x2001bdd4
 802798c:	2001be45 	.word	0x2001be45

08027990 <SettingsScreen_TimeUpdateVal>:
/*This function using for update and plus or minus the time values*/
void SettingsScreen_TimeUpdateVal(bool plus){
 8027990:	b580      	push	{r7, lr}
 8027992:	b082      	sub	sp, #8
 8027994:	af00      	add	r7, sp, #0
 8027996:	4603      	mov	r3, r0
 8027998:	71fb      	strb	r3, [r7, #7]
	switch(StimeSetVal){
 802799a:	4b34      	ldr	r3, [pc, #208]	; (8027a6c <SettingsScreen_TimeUpdateVal+0xdc>)
 802799c:	781b      	ldrb	r3, [r3, #0]
 802799e:	2b02      	cmp	r3, #2
 80279a0:	d020      	beq.n	80279e4 <SettingsScreen_TimeUpdateVal+0x54>
 80279a2:	2b03      	cmp	r3, #3
 80279a4:	d03a      	beq.n	8027a1c <SettingsScreen_TimeUpdateVal+0x8c>
 80279a6:	2b01      	cmp	r3, #1
 80279a8:	d000      	beq.n	80279ac <SettingsScreen_TimeUpdateVal+0x1c>
	case 3:
		if(plus){
			Sseconds++; if(60==Sseconds)Sseconds=0;
		}else{if(Sseconds>0)Sseconds--;}
		break;
	default: break;
 80279aa:	e058      	b.n	8027a5e <SettingsScreen_TimeUpdateVal+0xce>
		if(plus){
 80279ac:	79fb      	ldrb	r3, [r7, #7]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d00d      	beq.n	80279ce <SettingsScreen_TimeUpdateVal+0x3e>
			Shours++; if(24==Shours)Shours=0;
 80279b2:	4b2f      	ldr	r3, [pc, #188]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279b4:	781b      	ldrb	r3, [r3, #0]
 80279b6:	3301      	adds	r3, #1
 80279b8:	b2da      	uxtb	r2, r3
 80279ba:	4b2d      	ldr	r3, [pc, #180]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279bc:	701a      	strb	r2, [r3, #0]
 80279be:	4b2c      	ldr	r3, [pc, #176]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279c0:	781b      	ldrb	r3, [r3, #0]
 80279c2:	2b18      	cmp	r3, #24
 80279c4:	d146      	bne.n	8027a54 <SettingsScreen_TimeUpdateVal+0xc4>
 80279c6:	4b2a      	ldr	r3, [pc, #168]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279c8:	2200      	movs	r2, #0
 80279ca:	701a      	strb	r2, [r3, #0]
		break;
 80279cc:	e042      	b.n	8027a54 <SettingsScreen_TimeUpdateVal+0xc4>
		}else{if(Shours>0)Shours--;}
 80279ce:	4b28      	ldr	r3, [pc, #160]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279d0:	781b      	ldrb	r3, [r3, #0]
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	d03e      	beq.n	8027a54 <SettingsScreen_TimeUpdateVal+0xc4>
 80279d6:	4b26      	ldr	r3, [pc, #152]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279d8:	781b      	ldrb	r3, [r3, #0]
 80279da:	3b01      	subs	r3, #1
 80279dc:	b2da      	uxtb	r2, r3
 80279de:	4b24      	ldr	r3, [pc, #144]	; (8027a70 <SettingsScreen_TimeUpdateVal+0xe0>)
 80279e0:	701a      	strb	r2, [r3, #0]
		break;
 80279e2:	e037      	b.n	8027a54 <SettingsScreen_TimeUpdateVal+0xc4>
		if(plus){
 80279e4:	79fb      	ldrb	r3, [r7, #7]
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	d00d      	beq.n	8027a06 <SettingsScreen_TimeUpdateVal+0x76>
			Sminutes++; if(60==Sminutes)Sminutes=0;
 80279ea:	4b22      	ldr	r3, [pc, #136]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 80279ec:	781b      	ldrb	r3, [r3, #0]
 80279ee:	3301      	adds	r3, #1
 80279f0:	b2da      	uxtb	r2, r3
 80279f2:	4b20      	ldr	r3, [pc, #128]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 80279f4:	701a      	strb	r2, [r3, #0]
 80279f6:	4b1f      	ldr	r3, [pc, #124]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 80279f8:	781b      	ldrb	r3, [r3, #0]
 80279fa:	2b3c      	cmp	r3, #60	; 0x3c
 80279fc:	d12c      	bne.n	8027a58 <SettingsScreen_TimeUpdateVal+0xc8>
 80279fe:	4b1d      	ldr	r3, [pc, #116]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 8027a00:	2200      	movs	r2, #0
 8027a02:	701a      	strb	r2, [r3, #0]
		break;
 8027a04:	e028      	b.n	8027a58 <SettingsScreen_TimeUpdateVal+0xc8>
		}else{if(Sminutes>0)Sminutes--;}
 8027a06:	4b1b      	ldr	r3, [pc, #108]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 8027a08:	781b      	ldrb	r3, [r3, #0]
 8027a0a:	2b00      	cmp	r3, #0
 8027a0c:	d024      	beq.n	8027a58 <SettingsScreen_TimeUpdateVal+0xc8>
 8027a0e:	4b19      	ldr	r3, [pc, #100]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 8027a10:	781b      	ldrb	r3, [r3, #0]
 8027a12:	3b01      	subs	r3, #1
 8027a14:	b2da      	uxtb	r2, r3
 8027a16:	4b17      	ldr	r3, [pc, #92]	; (8027a74 <SettingsScreen_TimeUpdateVal+0xe4>)
 8027a18:	701a      	strb	r2, [r3, #0]
		break;
 8027a1a:	e01d      	b.n	8027a58 <SettingsScreen_TimeUpdateVal+0xc8>
		if(plus){
 8027a1c:	79fb      	ldrb	r3, [r7, #7]
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	d00d      	beq.n	8027a3e <SettingsScreen_TimeUpdateVal+0xae>
			Sseconds++; if(60==Sseconds)Sseconds=0;
 8027a22:	4b15      	ldr	r3, [pc, #84]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a24:	781b      	ldrb	r3, [r3, #0]
 8027a26:	3301      	adds	r3, #1
 8027a28:	b2da      	uxtb	r2, r3
 8027a2a:	4b13      	ldr	r3, [pc, #76]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a2c:	701a      	strb	r2, [r3, #0]
 8027a2e:	4b12      	ldr	r3, [pc, #72]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a30:	781b      	ldrb	r3, [r3, #0]
 8027a32:	2b3c      	cmp	r3, #60	; 0x3c
 8027a34:	d112      	bne.n	8027a5c <SettingsScreen_TimeUpdateVal+0xcc>
 8027a36:	4b10      	ldr	r3, [pc, #64]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a38:	2200      	movs	r2, #0
 8027a3a:	701a      	strb	r2, [r3, #0]
		break;
 8027a3c:	e00e      	b.n	8027a5c <SettingsScreen_TimeUpdateVal+0xcc>
		}else{if(Sseconds>0)Sseconds--;}
 8027a3e:	4b0e      	ldr	r3, [pc, #56]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a40:	781b      	ldrb	r3, [r3, #0]
 8027a42:	2b00      	cmp	r3, #0
 8027a44:	d00a      	beq.n	8027a5c <SettingsScreen_TimeUpdateVal+0xcc>
 8027a46:	4b0c      	ldr	r3, [pc, #48]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a48:	781b      	ldrb	r3, [r3, #0]
 8027a4a:	3b01      	subs	r3, #1
 8027a4c:	b2da      	uxtb	r2, r3
 8027a4e:	4b0a      	ldr	r3, [pc, #40]	; (8027a78 <SettingsScreen_TimeUpdateVal+0xe8>)
 8027a50:	701a      	strb	r2, [r3, #0]
		break;
 8027a52:	e003      	b.n	8027a5c <SettingsScreen_TimeUpdateVal+0xcc>
		break;
 8027a54:	bf00      	nop
 8027a56:	e002      	b.n	8027a5e <SettingsScreen_TimeUpdateVal+0xce>
		break;
 8027a58:	bf00      	nop
 8027a5a:	e000      	b.n	8027a5e <SettingsScreen_TimeUpdateVal+0xce>
		break;
 8027a5c:	bf00      	nop
	}
	SettingsScreen_newTimeLblController();
 8027a5e:	f000 f8e1 	bl	8027c24 <SettingsScreen_newTimeLblController>
}
 8027a62:	bf00      	nop
 8027a64:	3708      	adds	r7, #8
 8027a66:	46bd      	mov	sp, r7
 8027a68:	bd80      	pop	{r7, pc}
 8027a6a:	bf00      	nop
 8027a6c:	2001bdfd 	.word	0x2001bdfd
 8027a70:	2001bde1 	.word	0x2001bde1
 8027a74:	2001bdec 	.word	0x2001bdec
 8027a78:	2001bdff 	.word	0x2001bdff

08027a7c <SettingsScreen_DateUpdateVal>:
/*This function using for  update and plus or minus the date values*/
void SettingsScreen_DateUpdateVal(bool plus){
 8027a7c:	b580      	push	{r7, lr}
 8027a7e:	b082      	sub	sp, #8
 8027a80:	af00      	add	r7, sp, #0
 8027a82:	4603      	mov	r3, r0
 8027a84:	71fb      	strb	r3, [r7, #7]
	switch(SdateSetVal){
 8027a86:	4b3d      	ldr	r3, [pc, #244]	; (8027b7c <SettingsScreen_DateUpdateVal+0x100>)
 8027a88:	781b      	ldrb	r3, [r3, #0]
 8027a8a:	2b02      	cmp	r3, #2
 8027a8c:	d03b      	beq.n	8027b06 <SettingsScreen_DateUpdateVal+0x8a>
 8027a8e:	2b03      	cmp	r3, #3
 8027a90:	d052      	beq.n	8027b38 <SettingsScreen_DateUpdateVal+0xbc>
 8027a92:	2b01      	cmp	r3, #1
 8027a94:	d000      	beq.n	8027a98 <SettingsScreen_DateUpdateVal+0x1c>
	case 3:
		if(plus){
			Syears++;
		}else{if(2020<Syears)Syears--;}
		break;
	default: break;
 8027a96:	e06b      	b.n	8027b70 <SettingsScreen_DateUpdateVal+0xf4>
		if(plus){if(0==Syears%4 && (Sdates<daysofmonths[Smonths-1]+1))Sdates++;
 8027a98:	79fb      	ldrb	r3, [r7, #7]
 8027a9a:	2b00      	cmp	r3, #0
 8027a9c:	d028      	beq.n	8027af0 <SettingsScreen_DateUpdateVal+0x74>
 8027a9e:	4b38      	ldr	r3, [pc, #224]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027aa0:	881b      	ldrh	r3, [r3, #0]
 8027aa2:	f003 0303 	and.w	r3, r3, #3
 8027aa6:	b29b      	uxth	r3, r3
 8027aa8:	2b00      	cmp	r3, #0
 8027aaa:	d111      	bne.n	8027ad0 <SettingsScreen_DateUpdateVal+0x54>
 8027aac:	4b35      	ldr	r3, [pc, #212]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027aae:	781b      	ldrb	r3, [r3, #0]
 8027ab0:	4619      	mov	r1, r3
 8027ab2:	4b35      	ldr	r3, [pc, #212]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027ab4:	781b      	ldrb	r3, [r3, #0]
 8027ab6:	3b01      	subs	r3, #1
 8027ab8:	4a34      	ldr	r2, [pc, #208]	; (8027b8c <SettingsScreen_DateUpdateVal+0x110>)
 8027aba:	5cd3      	ldrb	r3, [r2, r3]
 8027abc:	3301      	adds	r3, #1
 8027abe:	4299      	cmp	r1, r3
 8027ac0:	da06      	bge.n	8027ad0 <SettingsScreen_DateUpdateVal+0x54>
 8027ac2:	4b30      	ldr	r3, [pc, #192]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027ac4:	781b      	ldrb	r3, [r3, #0]
 8027ac6:	3301      	adds	r3, #1
 8027ac8:	b2da      	uxtb	r2, r3
 8027aca:	4b2e      	ldr	r3, [pc, #184]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027acc:	701a      	strb	r2, [r3, #0]
		break;
 8027ace:	e04a      	b.n	8027b66 <SettingsScreen_DateUpdateVal+0xea>
		else if(Sdates<daysofmonths[Smonths-1])Sdates++;
 8027ad0:	4b2d      	ldr	r3, [pc, #180]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027ad2:	781b      	ldrb	r3, [r3, #0]
 8027ad4:	3b01      	subs	r3, #1
 8027ad6:	4a2d      	ldr	r2, [pc, #180]	; (8027b8c <SettingsScreen_DateUpdateVal+0x110>)
 8027ad8:	5cd2      	ldrb	r2, [r2, r3]
 8027ada:	4b2a      	ldr	r3, [pc, #168]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027adc:	781b      	ldrb	r3, [r3, #0]
 8027ade:	429a      	cmp	r2, r3
 8027ae0:	d941      	bls.n	8027b66 <SettingsScreen_DateUpdateVal+0xea>
 8027ae2:	4b28      	ldr	r3, [pc, #160]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027ae4:	781b      	ldrb	r3, [r3, #0]
 8027ae6:	3301      	adds	r3, #1
 8027ae8:	b2da      	uxtb	r2, r3
 8027aea:	4b26      	ldr	r3, [pc, #152]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027aec:	701a      	strb	r2, [r3, #0]
		break;
 8027aee:	e03a      	b.n	8027b66 <SettingsScreen_DateUpdateVal+0xea>
		}else{if(1<Sdates)Sdates--;}
 8027af0:	4b24      	ldr	r3, [pc, #144]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027af2:	781b      	ldrb	r3, [r3, #0]
 8027af4:	2b01      	cmp	r3, #1
 8027af6:	d936      	bls.n	8027b66 <SettingsScreen_DateUpdateVal+0xea>
 8027af8:	4b22      	ldr	r3, [pc, #136]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027afa:	781b      	ldrb	r3, [r3, #0]
 8027afc:	3b01      	subs	r3, #1
 8027afe:	b2da      	uxtb	r2, r3
 8027b00:	4b20      	ldr	r3, [pc, #128]	; (8027b84 <SettingsScreen_DateUpdateVal+0x108>)
 8027b02:	701a      	strb	r2, [r3, #0]
		break;
 8027b04:	e02f      	b.n	8027b66 <SettingsScreen_DateUpdateVal+0xea>
		if(plus){
 8027b06:	79fb      	ldrb	r3, [r7, #7]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d00a      	beq.n	8027b22 <SettingsScreen_DateUpdateVal+0xa6>
			if(Smonths<12)Smonths++;
 8027b0c:	4b1e      	ldr	r3, [pc, #120]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b0e:	781b      	ldrb	r3, [r3, #0]
 8027b10:	2b0b      	cmp	r3, #11
 8027b12:	d82a      	bhi.n	8027b6a <SettingsScreen_DateUpdateVal+0xee>
 8027b14:	4b1c      	ldr	r3, [pc, #112]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b16:	781b      	ldrb	r3, [r3, #0]
 8027b18:	3301      	adds	r3, #1
 8027b1a:	b2da      	uxtb	r2, r3
 8027b1c:	4b1a      	ldr	r3, [pc, #104]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b1e:	701a      	strb	r2, [r3, #0]
		break;
 8027b20:	e023      	b.n	8027b6a <SettingsScreen_DateUpdateVal+0xee>
		}else{if(1<Smonths)Smonths--;}
 8027b22:	4b19      	ldr	r3, [pc, #100]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b24:	781b      	ldrb	r3, [r3, #0]
 8027b26:	2b01      	cmp	r3, #1
 8027b28:	d91f      	bls.n	8027b6a <SettingsScreen_DateUpdateVal+0xee>
 8027b2a:	4b17      	ldr	r3, [pc, #92]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b2c:	781b      	ldrb	r3, [r3, #0]
 8027b2e:	3b01      	subs	r3, #1
 8027b30:	b2da      	uxtb	r2, r3
 8027b32:	4b15      	ldr	r3, [pc, #84]	; (8027b88 <SettingsScreen_DateUpdateVal+0x10c>)
 8027b34:	701a      	strb	r2, [r3, #0]
		break;
 8027b36:	e018      	b.n	8027b6a <SettingsScreen_DateUpdateVal+0xee>
		if(plus){
 8027b38:	79fb      	ldrb	r3, [r7, #7]
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	d006      	beq.n	8027b4c <SettingsScreen_DateUpdateVal+0xd0>
			Syears++;
 8027b3e:	4b10      	ldr	r3, [pc, #64]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027b40:	881b      	ldrh	r3, [r3, #0]
 8027b42:	3301      	adds	r3, #1
 8027b44:	b29a      	uxth	r2, r3
 8027b46:	4b0e      	ldr	r3, [pc, #56]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027b48:	801a      	strh	r2, [r3, #0]
		break;
 8027b4a:	e010      	b.n	8027b6e <SettingsScreen_DateUpdateVal+0xf2>
		}else{if(2020<Syears)Syears--;}
 8027b4c:	4b0c      	ldr	r3, [pc, #48]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027b4e:	881b      	ldrh	r3, [r3, #0]
 8027b50:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8027b54:	4293      	cmp	r3, r2
 8027b56:	d90a      	bls.n	8027b6e <SettingsScreen_DateUpdateVal+0xf2>
 8027b58:	4b09      	ldr	r3, [pc, #36]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027b5a:	881b      	ldrh	r3, [r3, #0]
 8027b5c:	3b01      	subs	r3, #1
 8027b5e:	b29a      	uxth	r2, r3
 8027b60:	4b07      	ldr	r3, [pc, #28]	; (8027b80 <SettingsScreen_DateUpdateVal+0x104>)
 8027b62:	801a      	strh	r2, [r3, #0]
		break;
 8027b64:	e003      	b.n	8027b6e <SettingsScreen_DateUpdateVal+0xf2>
		break;
 8027b66:	bf00      	nop
 8027b68:	e002      	b.n	8027b70 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 8027b6a:	bf00      	nop
 8027b6c:	e000      	b.n	8027b70 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 8027b6e:	bf00      	nop
	}
	SettingsScreen_newDateLblController();
 8027b70:	f000 f916 	bl	8027da0 <SettingsScreen_newDateLblController>
}
 8027b74:	bf00      	nop
 8027b76:	3708      	adds	r7, #8
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	bd80      	pop	{r7, pc}
 8027b7c:	2001bdd4 	.word	0x2001bdd4
 8027b80:	2001bdf4 	.word	0x2001bdf4
 8027b84:	2001bde0 	.word	0x2001bde0
 8027b88:	2001bdfe 	.word	0x2001bdfe
 8027b8c:	20002840 	.word	0x20002840

08027b90 <SettingsScreen_BluetoothUpdateVal>:
/**/
void SettingsScreen_BluetoothUpdateVal(bool val){
 8027b90:	b580      	push	{r7, lr}
 8027b92:	b082      	sub	sp, #8
 8027b94:	af00      	add	r7, sp, #0
 8027b96:	4603      	mov	r3, r0
 8027b98:	71fb      	strb	r3, [r7, #7]
	SbluetoothSetVal=true;
 8027b9a:	4b0e      	ldr	r3, [pc, #56]	; (8027bd4 <SettingsScreen_BluetoothUpdateVal+0x44>)
 8027b9c:	2201      	movs	r2, #1
 8027b9e:	701a      	strb	r2, [r3, #0]

    if(val)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8027ba0:	79fb      	ldrb	r3, [r7, #7]
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	d006      	beq.n	8027bb4 <SettingsScreen_BluetoothUpdateVal+0x24>
 8027ba6:	4b0c      	ldr	r3, [pc, #48]	; (8027bd8 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8027ba8:	681b      	ldr	r3, [r3, #0]
 8027baa:	2101      	movs	r1, #1
 8027bac:	4618      	mov	r0, r3
 8027bae:	f7fa fa4f 	bl	8022050 <lv_sw_on>
 8027bb2:	e005      	b.n	8027bc0 <SettingsScreen_BluetoothUpdateVal+0x30>
    else lv_sw_off(SbluetoothSwitch, LV_ANIM_ON);
 8027bb4:	4b08      	ldr	r3, [pc, #32]	; (8027bd8 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8027bb6:	681b      	ldr	r3, [r3, #0]
 8027bb8:	2101      	movs	r1, #1
 8027bba:	4618      	mov	r0, r3
 8027bbc:	f7fa fa63 	bl	8022086 <lv_sw_off>
    SettingsScreen_newBluetoothValController();
 8027bc0:	f000 f9ac 	bl	8027f1c <SettingsScreen_newBluetoothValController>
    SbluetoothStatu =val;
 8027bc4:	4a05      	ldr	r2, [pc, #20]	; (8027bdc <SettingsScreen_BluetoothUpdateVal+0x4c>)
 8027bc6:	79fb      	ldrb	r3, [r7, #7]
 8027bc8:	7013      	strb	r3, [r2, #0]
}
 8027bca:	bf00      	nop
 8027bcc:	3708      	adds	r7, #8
 8027bce:	46bd      	mov	sp, r7
 8027bd0:	bd80      	pop	{r7, pc}
 8027bd2:	bf00      	nop
 8027bd4:	2001be44 	.word	0x2001be44
 8027bd8:	2001bde4 	.word	0x2001bde4
 8027bdc:	2001b160 	.word	0x2001b160

08027be0 <SettingsScreen_UnitUpdateVal>:
/**/
void SettingsScreen_UnitUpdateVal(bool val){
 8027be0:	b580      	push	{r7, lr}
 8027be2:	b082      	sub	sp, #8
 8027be4:	af00      	add	r7, sp, #0
 8027be6:	4603      	mov	r3, r0
 8027be8:	71fb      	strb	r3, [r7, #7]

    if(val)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 8027bea:	79fb      	ldrb	r3, [r7, #7]
 8027bec:	2b00      	cmp	r3, #0
 8027bee:	d006      	beq.n	8027bfe <SettingsScreen_UnitUpdateVal+0x1e>
 8027bf0:	4b0a      	ldr	r3, [pc, #40]	; (8027c1c <SettingsScreen_UnitUpdateVal+0x3c>)
 8027bf2:	681b      	ldr	r3, [r3, #0]
 8027bf4:	2101      	movs	r1, #1
 8027bf6:	4618      	mov	r0, r3
 8027bf8:	f7fa fa2a 	bl	8022050 <lv_sw_on>
 8027bfc:	e005      	b.n	8027c0a <SettingsScreen_UnitUpdateVal+0x2a>
    else lv_sw_off(unitTypeSwitch, LV_ANIM_ON);
 8027bfe:	4b07      	ldr	r3, [pc, #28]	; (8027c1c <SettingsScreen_UnitUpdateVal+0x3c>)
 8027c00:	681b      	ldr	r3, [r3, #0]
 8027c02:	2101      	movs	r1, #1
 8027c04:	4618      	mov	r0, r3
 8027c06:	f7fa fa3e 	bl	8022086 <lv_sw_off>
    SettingsScreen_newUnitTypeController();
 8027c0a:	f000 f9c5 	bl	8027f98 <SettingsScreen_newUnitTypeController>
	SunitType=val;
 8027c0e:	4a04      	ldr	r2, [pc, #16]	; (8027c20 <SettingsScreen_UnitUpdateVal+0x40>)
 8027c10:	79fb      	ldrb	r3, [r7, #7]
 8027c12:	7013      	strb	r3, [r2, #0]
}
 8027c14:	bf00      	nop
 8027c16:	3708      	adds	r7, #8
 8027c18:	46bd      	mov	sp, r7
 8027c1a:	bd80      	pop	{r7, pc}
 8027c1c:	2001bddc 	.word	0x2001bddc
 8027c20:	2001be46 	.word	0x2001be46

08027c24 <SettingsScreen_newTimeLblController>:

/*This function using for update set time label*/
void SettingsScreen_newTimeLblController(void){
 8027c24:	b580      	push	{r7, lr}
 8027c26:	b082      	sub	sp, #8
 8027c28:	af02      	add	r7, sp, #8
	switch(StimeSetVal){
 8027c2a:	4b4f      	ldr	r3, [pc, #316]	; (8027d68 <SettingsScreen_newTimeLblController+0x144>)
 8027c2c:	781b      	ldrb	r3, [r3, #0]
 8027c2e:	2b02      	cmp	r3, #2
 8027c30:	d029      	beq.n	8027c86 <SettingsScreen_newTimeLblController+0x62>
 8027c32:	2b03      	cmp	r3, #3
 8027c34:	d04d      	beq.n	8027cd2 <SettingsScreen_newTimeLblController+0xae>
 8027c36:	2b01      	cmp	r3, #1
 8027c38:	d171      	bne.n	8027d1e <SettingsScreen_newTimeLblController+0xfa>
	case 1:
			if(Stheme)
 8027c3a:	4b4c      	ldr	r3, [pc, #304]	; (8027d6c <SettingsScreen_newTimeLblController+0x148>)
 8027c3c:	781b      	ldrb	r3, [r3, #0]
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	d010      	beq.n	8027c64 <SettingsScreen_newTimeLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8027c42:	4b4b      	ldr	r3, [pc, #300]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027c44:	781b      	ldrb	r3, [r3, #0]
 8027c46:	4619      	mov	r1, r3
 8027c48:	4b4a      	ldr	r3, [pc, #296]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027c4a:	781b      	ldrb	r3, [r3, #0]
 8027c4c:	461a      	mov	r2, r3
 8027c4e:	4b4a      	ldr	r3, [pc, #296]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027c50:	781b      	ldrb	r3, [r3, #0]
 8027c52:	9301      	str	r3, [sp, #4]
 8027c54:	9200      	str	r2, [sp, #0]
 8027c56:	460b      	mov	r3, r1
 8027c58:	4a48      	ldr	r2, [pc, #288]	; (8027d7c <SettingsScreen_newTimeLblController+0x158>)
 8027c5a:	2140      	movs	r1, #64	; 0x40
 8027c5c:	4848      	ldr	r0, [pc, #288]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027c5e:	f003 faa3 	bl	802b1a8 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 8027c62:	e06d      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8027c64:	4b42      	ldr	r3, [pc, #264]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027c66:	781b      	ldrb	r3, [r3, #0]
 8027c68:	4619      	mov	r1, r3
 8027c6a:	4b42      	ldr	r3, [pc, #264]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027c6c:	781b      	ldrb	r3, [r3, #0]
 8027c6e:	461a      	mov	r2, r3
 8027c70:	4b41      	ldr	r3, [pc, #260]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027c72:	781b      	ldrb	r3, [r3, #0]
 8027c74:	9301      	str	r3, [sp, #4]
 8027c76:	9200      	str	r2, [sp, #0]
 8027c78:	460b      	mov	r3, r1
 8027c7a:	4a42      	ldr	r2, [pc, #264]	; (8027d84 <SettingsScreen_newTimeLblController+0x160>)
 8027c7c:	2140      	movs	r1, #64	; 0x40
 8027c7e:	4840      	ldr	r0, [pc, #256]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027c80:	f003 fa92 	bl	802b1a8 <sniprintf>
		break;
 8027c84:	e05c      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
	case 2:
			if(Stheme)
 8027c86:	4b39      	ldr	r3, [pc, #228]	; (8027d6c <SettingsScreen_newTimeLblController+0x148>)
 8027c88:	781b      	ldrb	r3, [r3, #0]
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	d010      	beq.n	8027cb0 <SettingsScreen_newTimeLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#",
 8027c8e:	4b38      	ldr	r3, [pc, #224]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027c90:	781b      	ldrb	r3, [r3, #0]
 8027c92:	4619      	mov	r1, r3
 8027c94:	4b37      	ldr	r3, [pc, #220]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027c96:	781b      	ldrb	r3, [r3, #0]
 8027c98:	461a      	mov	r2, r3
 8027c9a:	4b37      	ldr	r3, [pc, #220]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027c9c:	781b      	ldrb	r3, [r3, #0]
 8027c9e:	9301      	str	r3, [sp, #4]
 8027ca0:	9200      	str	r2, [sp, #0]
 8027ca2:	460b      	mov	r3, r1
 8027ca4:	4a38      	ldr	r2, [pc, #224]	; (8027d88 <SettingsScreen_newTimeLblController+0x164>)
 8027ca6:	2140      	movs	r1, #64	; 0x40
 8027ca8:	4835      	ldr	r0, [pc, #212]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027caa:	f003 fa7d 	bl	802b1a8 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 8027cae:	e047      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
 8027cb0:	4b2f      	ldr	r3, [pc, #188]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027cb2:	781b      	ldrb	r3, [r3, #0]
 8027cb4:	4619      	mov	r1, r3
 8027cb6:	4b2f      	ldr	r3, [pc, #188]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027cb8:	781b      	ldrb	r3, [r3, #0]
 8027cba:	461a      	mov	r2, r3
 8027cbc:	4b2e      	ldr	r3, [pc, #184]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027cbe:	781b      	ldrb	r3, [r3, #0]
 8027cc0:	9301      	str	r3, [sp, #4]
 8027cc2:	9200      	str	r2, [sp, #0]
 8027cc4:	460b      	mov	r3, r1
 8027cc6:	4a31      	ldr	r2, [pc, #196]	; (8027d8c <SettingsScreen_newTimeLblController+0x168>)
 8027cc8:	2140      	movs	r1, #64	; 0x40
 8027cca:	482d      	ldr	r0, [pc, #180]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027ccc:	f003 fa6c 	bl	802b1a8 <sniprintf>
		break;
 8027cd0:	e036      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
	case 3:
		if(Stheme)
 8027cd2:	4b26      	ldr	r3, [pc, #152]	; (8027d6c <SettingsScreen_newTimeLblController+0x148>)
 8027cd4:	781b      	ldrb	r3, [r3, #0]
 8027cd6:	2b00      	cmp	r3, #0
 8027cd8:	d010      	beq.n	8027cfc <SettingsScreen_newTimeLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#",
 8027cda:	4b25      	ldr	r3, [pc, #148]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027cdc:	781b      	ldrb	r3, [r3, #0]
 8027cde:	4619      	mov	r1, r3
 8027ce0:	4b24      	ldr	r3, [pc, #144]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027ce2:	781b      	ldrb	r3, [r3, #0]
 8027ce4:	461a      	mov	r2, r3
 8027ce6:	4b24      	ldr	r3, [pc, #144]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027ce8:	781b      	ldrb	r3, [r3, #0]
 8027cea:	9301      	str	r3, [sp, #4]
 8027cec:	9200      	str	r2, [sp, #0]
 8027cee:	460b      	mov	r3, r1
 8027cf0:	4a27      	ldr	r2, [pc, #156]	; (8027d90 <SettingsScreen_newTimeLblController+0x16c>)
 8027cf2:	2140      	movs	r1, #64	; 0x40
 8027cf4:	4822      	ldr	r0, [pc, #136]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027cf6:	f003 fa57 	bl	802b1a8 <sniprintf>
					Shours,Sminutes,Sseconds);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 8027cfa:	e021      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
 8027cfc:	4b1c      	ldr	r3, [pc, #112]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027cfe:	781b      	ldrb	r3, [r3, #0]
 8027d00:	4619      	mov	r1, r3
 8027d02:	4b1c      	ldr	r3, [pc, #112]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027d04:	781b      	ldrb	r3, [r3, #0]
 8027d06:	461a      	mov	r2, r3
 8027d08:	4b1b      	ldr	r3, [pc, #108]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027d0a:	781b      	ldrb	r3, [r3, #0]
 8027d0c:	9301      	str	r3, [sp, #4]
 8027d0e:	9200      	str	r2, [sp, #0]
 8027d10:	460b      	mov	r3, r1
 8027d12:	4a20      	ldr	r2, [pc, #128]	; (8027d94 <SettingsScreen_newTimeLblController+0x170>)
 8027d14:	2140      	movs	r1, #64	; 0x40
 8027d16:	481a      	ldr	r0, [pc, #104]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027d18:	f003 fa46 	bl	802b1a8 <sniprintf>
		break;
 8027d1c:	e010      	b.n	8027d40 <SettingsScreen_newTimeLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8027d1e:	4b14      	ldr	r3, [pc, #80]	; (8027d70 <SettingsScreen_newTimeLblController+0x14c>)
 8027d20:	781b      	ldrb	r3, [r3, #0]
 8027d22:	4619      	mov	r1, r3
 8027d24:	4b13      	ldr	r3, [pc, #76]	; (8027d74 <SettingsScreen_newTimeLblController+0x150>)
 8027d26:	781b      	ldrb	r3, [r3, #0]
 8027d28:	461a      	mov	r2, r3
 8027d2a:	4b13      	ldr	r3, [pc, #76]	; (8027d78 <SettingsScreen_newTimeLblController+0x154>)
 8027d2c:	781b      	ldrb	r3, [r3, #0]
 8027d2e:	9301      	str	r3, [sp, #4]
 8027d30:	9200      	str	r2, [sp, #0]
 8027d32:	460b      	mov	r3, r1
 8027d34:	4a18      	ldr	r2, [pc, #96]	; (8027d98 <SettingsScreen_newTimeLblController+0x174>)
 8027d36:	2140      	movs	r1, #64	; 0x40
 8027d38:	4811      	ldr	r0, [pc, #68]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027d3a:	f003 fa35 	bl	802b1a8 <sniprintf>
					Shours,Sminutes,Sseconds); break;
 8027d3e:	bf00      	nop
	}
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 8027d40:	4b16      	ldr	r3, [pc, #88]	; (8027d9c <SettingsScreen_newTimeLblController+0x178>)
 8027d42:	681b      	ldr	r3, [r3, #0]
 8027d44:	490e      	ldr	r1, [pc, #56]	; (8027d80 <SettingsScreen_newTimeLblController+0x15c>)
 8027d46:	4618      	mov	r0, r3
 8027d48:	f7f4 ffb4 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 8027d4c:	4b13      	ldr	r3, [pc, #76]	; (8027d9c <SettingsScreen_newTimeLblController+0x178>)
 8027d4e:	6818      	ldr	r0, [r3, #0]
 8027d50:	2328      	movs	r3, #40	; 0x28
 8027d52:	9300      	str	r3, [sp, #0]
 8027d54:	f06f 0313 	mvn.w	r3, #19
 8027d58:	2203      	movs	r2, #3
 8027d5a:	2100      	movs	r1, #0
 8027d5c:	f7e1 fd60 	bl	8009820 <lv_obj_align>

}
 8027d60:	bf00      	nop
 8027d62:	46bd      	mov	sp, r7
 8027d64:	bd80      	pop	{r7, pc}
 8027d66:	bf00      	nop
 8027d68:	2001bdfd 	.word	0x2001bdfd
 8027d6c:	2001bde3 	.word	0x2001bde3
 8027d70:	2001bde1 	.word	0x2001bde1
 8027d74:	2001bdec 	.word	0x2001bdec
 8027d78:	2001bdff 	.word	0x2001bdff
 8027d7c:	0802d8cc 	.word	0x0802d8cc
 8027d80:	2001be04 	.word	0x2001be04
 8027d84:	0802d8f8 	.word	0x0802d8f8
 8027d88:	0802d924 	.word	0x0802d924
 8027d8c:	0802d950 	.word	0x0802d950
 8027d90:	0802d97c 	.word	0x0802d97c
 8027d94:	0802d9a8 	.word	0x0802d9a8
 8027d98:	0802d838 	.word	0x0802d838
 8027d9c:	2001bde8 	.word	0x2001bde8

08027da0 <SettingsScreen_newDateLblController>:
/*This function using for update set date label*/
void SettingsScreen_newDateLblController(void){
 8027da0:	b580      	push	{r7, lr}
 8027da2:	b082      	sub	sp, #8
 8027da4:	af02      	add	r7, sp, #8
	switch(SdateSetVal){
 8027da6:	4b4f      	ldr	r3, [pc, #316]	; (8027ee4 <SettingsScreen_newDateLblController+0x144>)
 8027da8:	781b      	ldrb	r3, [r3, #0]
 8027daa:	2b02      	cmp	r3, #2
 8027dac:	d029      	beq.n	8027e02 <SettingsScreen_newDateLblController+0x62>
 8027dae:	2b03      	cmp	r3, #3
 8027db0:	d04d      	beq.n	8027e4e <SettingsScreen_newDateLblController+0xae>
 8027db2:	2b01      	cmp	r3, #1
 8027db4:	d171      	bne.n	8027e9a <SettingsScreen_newDateLblController+0xfa>
	case 1:
			if(Stheme)
 8027db6:	4b4c      	ldr	r3, [pc, #304]	; (8027ee8 <SettingsScreen_newDateLblController+0x148>)
 8027db8:	781b      	ldrb	r3, [r3, #0]
 8027dba:	2b00      	cmp	r3, #0
 8027dbc:	d010      	beq.n	8027de0 <SettingsScreen_newDateLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8027dbe:	4b4b      	ldr	r3, [pc, #300]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027dc0:	781b      	ldrb	r3, [r3, #0]
 8027dc2:	4619      	mov	r1, r3
 8027dc4:	4b4a      	ldr	r3, [pc, #296]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027dc6:	781b      	ldrb	r3, [r3, #0]
 8027dc8:	461a      	mov	r2, r3
 8027dca:	4b4a      	ldr	r3, [pc, #296]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027dcc:	881b      	ldrh	r3, [r3, #0]
 8027dce:	9301      	str	r3, [sp, #4]
 8027dd0:	9200      	str	r2, [sp, #0]
 8027dd2:	460b      	mov	r3, r1
 8027dd4:	4a48      	ldr	r2, [pc, #288]	; (8027ef8 <SettingsScreen_newDateLblController+0x158>)
 8027dd6:	2140      	movs	r1, #64	; 0x40
 8027dd8:	4848      	ldr	r0, [pc, #288]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027dda:	f003 f9e5 	bl	802b1a8 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 8027dde:	e06d      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8027de0:	4b42      	ldr	r3, [pc, #264]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027de2:	781b      	ldrb	r3, [r3, #0]
 8027de4:	4619      	mov	r1, r3
 8027de6:	4b42      	ldr	r3, [pc, #264]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027de8:	781b      	ldrb	r3, [r3, #0]
 8027dea:	461a      	mov	r2, r3
 8027dec:	4b41      	ldr	r3, [pc, #260]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027dee:	881b      	ldrh	r3, [r3, #0]
 8027df0:	9301      	str	r3, [sp, #4]
 8027df2:	9200      	str	r2, [sp, #0]
 8027df4:	460b      	mov	r3, r1
 8027df6:	4a42      	ldr	r2, [pc, #264]	; (8027f00 <SettingsScreen_newDateLblController+0x160>)
 8027df8:	2140      	movs	r1, #64	; 0x40
 8027dfa:	4840      	ldr	r0, [pc, #256]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027dfc:	f003 f9d4 	bl	802b1a8 <sniprintf>
		break;
 8027e00:	e05c      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
	case 2:
			if(Stheme)
 8027e02:	4b39      	ldr	r3, [pc, #228]	; (8027ee8 <SettingsScreen_newDateLblController+0x148>)
 8027e04:	781b      	ldrb	r3, [r3, #0]
 8027e06:	2b00      	cmp	r3, #0
 8027e08:	d010      	beq.n	8027e2c <SettingsScreen_newDateLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %04d#",
 8027e0a:	4b38      	ldr	r3, [pc, #224]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027e0c:	781b      	ldrb	r3, [r3, #0]
 8027e0e:	4619      	mov	r1, r3
 8027e10:	4b37      	ldr	r3, [pc, #220]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027e12:	781b      	ldrb	r3, [r3, #0]
 8027e14:	461a      	mov	r2, r3
 8027e16:	4b37      	ldr	r3, [pc, #220]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027e18:	881b      	ldrh	r3, [r3, #0]
 8027e1a:	9301      	str	r3, [sp, #4]
 8027e1c:	9200      	str	r2, [sp, #0]
 8027e1e:	460b      	mov	r3, r1
 8027e20:	4a38      	ldr	r2, [pc, #224]	; (8027f04 <SettingsScreen_newDateLblController+0x164>)
 8027e22:	2140      	movs	r1, #64	; 0x40
 8027e24:	4835      	ldr	r0, [pc, #212]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027e26:	f003 f9bf 	bl	802b1a8 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 8027e2a:	e047      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
 8027e2c:	4b2f      	ldr	r3, [pc, #188]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027e2e:	781b      	ldrb	r3, [r3, #0]
 8027e30:	4619      	mov	r1, r3
 8027e32:	4b2f      	ldr	r3, [pc, #188]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027e34:	781b      	ldrb	r3, [r3, #0]
 8027e36:	461a      	mov	r2, r3
 8027e38:	4b2e      	ldr	r3, [pc, #184]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027e3a:	881b      	ldrh	r3, [r3, #0]
 8027e3c:	9301      	str	r3, [sp, #4]
 8027e3e:	9200      	str	r2, [sp, #0]
 8027e40:	460b      	mov	r3, r1
 8027e42:	4a31      	ldr	r2, [pc, #196]	; (8027f08 <SettingsScreen_newDateLblController+0x168>)
 8027e44:	2140      	movs	r1, #64	; 0x40
 8027e46:	482d      	ldr	r0, [pc, #180]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027e48:	f003 f9ae 	bl	802b1a8 <sniprintf>
		break;
 8027e4c:	e036      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
	case 3:
		if(Stheme)
 8027e4e:	4b26      	ldr	r3, [pc, #152]	; (8027ee8 <SettingsScreen_newDateLblController+0x148>)
 8027e50:	781b      	ldrb	r3, [r3, #0]
 8027e52:	2b00      	cmp	r3, #0
 8027e54:	d010      	beq.n	8027e78 <SettingsScreen_newDateLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %04d#",
 8027e56:	4b25      	ldr	r3, [pc, #148]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027e58:	781b      	ldrb	r3, [r3, #0]
 8027e5a:	4619      	mov	r1, r3
 8027e5c:	4b24      	ldr	r3, [pc, #144]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027e5e:	781b      	ldrb	r3, [r3, #0]
 8027e60:	461a      	mov	r2, r3
 8027e62:	4b24      	ldr	r3, [pc, #144]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027e64:	881b      	ldrh	r3, [r3, #0]
 8027e66:	9301      	str	r3, [sp, #4]
 8027e68:	9200      	str	r2, [sp, #0]
 8027e6a:	460b      	mov	r3, r1
 8027e6c:	4a27      	ldr	r2, [pc, #156]	; (8027f0c <SettingsScreen_newDateLblController+0x16c>)
 8027e6e:	2140      	movs	r1, #64	; 0x40
 8027e70:	4822      	ldr	r0, [pc, #136]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027e72:	f003 f999 	bl	802b1a8 <sniprintf>
				Sdates,Smonths,Syears);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
				Sdates,Smonths,Syears);
		break;
 8027e76:	e021      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
 8027e78:	4b1c      	ldr	r3, [pc, #112]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027e7a:	781b      	ldrb	r3, [r3, #0]
 8027e7c:	4619      	mov	r1, r3
 8027e7e:	4b1c      	ldr	r3, [pc, #112]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027e80:	781b      	ldrb	r3, [r3, #0]
 8027e82:	461a      	mov	r2, r3
 8027e84:	4b1b      	ldr	r3, [pc, #108]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027e86:	881b      	ldrh	r3, [r3, #0]
 8027e88:	9301      	str	r3, [sp, #4]
 8027e8a:	9200      	str	r2, [sp, #0]
 8027e8c:	460b      	mov	r3, r1
 8027e8e:	4a20      	ldr	r2, [pc, #128]	; (8027f10 <SettingsScreen_newDateLblController+0x170>)
 8027e90:	2140      	movs	r1, #64	; 0x40
 8027e92:	481a      	ldr	r0, [pc, #104]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027e94:	f003 f988 	bl	802b1a8 <sniprintf>
		break;
 8027e98:	e010      	b.n	8027ebc <SettingsScreen_newDateLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8027e9a:	4b14      	ldr	r3, [pc, #80]	; (8027eec <SettingsScreen_newDateLblController+0x14c>)
 8027e9c:	781b      	ldrb	r3, [r3, #0]
 8027e9e:	4619      	mov	r1, r3
 8027ea0:	4b13      	ldr	r3, [pc, #76]	; (8027ef0 <SettingsScreen_newDateLblController+0x150>)
 8027ea2:	781b      	ldrb	r3, [r3, #0]
 8027ea4:	461a      	mov	r2, r3
 8027ea6:	4b13      	ldr	r3, [pc, #76]	; (8027ef4 <SettingsScreen_newDateLblController+0x154>)
 8027ea8:	881b      	ldrh	r3, [r3, #0]
 8027eaa:	9301      	str	r3, [sp, #4]
 8027eac:	9200      	str	r2, [sp, #0]
 8027eae:	460b      	mov	r3, r1
 8027eb0:	4a18      	ldr	r2, [pc, #96]	; (8027f14 <SettingsScreen_newDateLblController+0x174>)
 8027eb2:	2140      	movs	r1, #64	; 0x40
 8027eb4:	4811      	ldr	r0, [pc, #68]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027eb6:	f003 f977 	bl	802b1a8 <sniprintf>
				Sdates,Smonths,Syears); break;
 8027eba:	bf00      	nop
	}
	lv_label_set_text(S_DateLbl, settingsBuffer);
 8027ebc:	4b16      	ldr	r3, [pc, #88]	; (8027f18 <SettingsScreen_newDateLblController+0x178>)
 8027ebe:	681b      	ldr	r3, [r3, #0]
 8027ec0:	490e      	ldr	r1, [pc, #56]	; (8027efc <SettingsScreen_newDateLblController+0x15c>)
 8027ec2:	4618      	mov	r0, r3
 8027ec4:	f7f4 fef6 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8027ec8:	4b13      	ldr	r3, [pc, #76]	; (8027f18 <SettingsScreen_newDateLblController+0x178>)
 8027eca:	6818      	ldr	r0, [r3, #0]
 8027ecc:	2350      	movs	r3, #80	; 0x50
 8027ece:	9300      	str	r3, [sp, #0]
 8027ed0:	f06f 0313 	mvn.w	r3, #19
 8027ed4:	2203      	movs	r2, #3
 8027ed6:	2100      	movs	r1, #0
 8027ed8:	f7e1 fca2 	bl	8009820 <lv_obj_align>

}
 8027edc:	bf00      	nop
 8027ede:	46bd      	mov	sp, r7
 8027ee0:	bd80      	pop	{r7, pc}
 8027ee2:	bf00      	nop
 8027ee4:	2001bdd4 	.word	0x2001bdd4
 8027ee8:	2001bde3 	.word	0x2001bde3
 8027eec:	2001bde0 	.word	0x2001bde0
 8027ef0:	2001bdfe 	.word	0x2001bdfe
 8027ef4:	2001bdf4 	.word	0x2001bdf4
 8027ef8:	0802d9d4 	.word	0x0802d9d4
 8027efc:	2001be04 	.word	0x2001be04
 8027f00:	0802da00 	.word	0x0802da00
 8027f04:	0802da2c 	.word	0x0802da2c
 8027f08:	0802da58 	.word	0x0802da58
 8027f0c:	0802da84 	.word	0x0802da84
 8027f10:	0802dab0 	.word	0x0802dab0
 8027f14:	0802d870 	.word	0x0802d870
 8027f18:	2001bdf8 	.word	0x2001bdf8

08027f1c <SettingsScreen_newBluetoothValController>:
/*This function using for update set bluetooth switch*/
void SettingsScreen_newBluetoothValController(void){
 8027f1c:	b598      	push	{r3, r4, r7, lr}
 8027f1e:	af00      	add	r7, sp, #0
	if(SbluetoothSetVal){
 8027f20:	4b18      	ldr	r3, [pc, #96]	; (8027f84 <SettingsScreen_newBluetoothValController+0x68>)
 8027f22:	781b      	ldrb	r3, [r3, #0]
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	d00a      	beq.n	8027f3e <SettingsScreen_newBluetoothValController+0x22>
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 8027f28:	4c17      	ldr	r4, [pc, #92]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f2a:	4818      	ldr	r0, [pc, #96]	; (8027f8c <SettingsScreen_newBluetoothValController+0x70>)
 8027f2c:	f7ff f84e 	bl	8026fcc <lv_color_hex>
 8027f30:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 8027f32:	4c15      	ldr	r4, [pc, #84]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f34:	4815      	ldr	r0, [pc, #84]	; (8027f8c <SettingsScreen_newBluetoothValController+0x70>)
 8027f36:	f7ff f849 	bl	8026fcc <lv_color_hex>
 8027f3a:	80a0      	strh	r0, [r4, #4]
 8027f3c:	e019      	b.n	8027f72 <SettingsScreen_newBluetoothValController+0x56>
	}else{
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 8027f3e:	4c12      	ldr	r4, [pc, #72]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f40:	2000      	movs	r0, #0
 8027f42:	f7ff f843 	bl	8026fcc <lv_color_hex>
 8027f46:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8027f48:	4c0f      	ldr	r4, [pc, #60]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f4a:	2000      	movs	r0, #0
 8027f4c:	f7ff f83e 	bl	8026fcc <lv_color_hex>
 8027f50:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 8027f52:	4b0f      	ldr	r3, [pc, #60]	; (8027f90 <SettingsScreen_newBluetoothValController+0x74>)
 8027f54:	781b      	ldrb	r3, [r3, #0]
 8027f56:	2b00      	cmp	r3, #0
 8027f58:	d00b      	beq.n	8027f72 <SettingsScreen_newBluetoothValController+0x56>
	    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8027f5a:	4c0b      	ldr	r4, [pc, #44]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027f60:	f7ff f834 	bl	8026fcc <lv_color_hex>
 8027f64:	8060      	strh	r0, [r4, #2]
	    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8027f66:	4c08      	ldr	r4, [pc, #32]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027f6c:	f7ff f82e 	bl	8026fcc <lv_color_hex>
 8027f70:	80a0      	strh	r0, [r4, #4]
	    }
	}
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 8027f72:	4b08      	ldr	r3, [pc, #32]	; (8027f94 <SettingsScreen_newBluetoothValController+0x78>)
 8027f74:	681b      	ldr	r3, [r3, #0]
 8027f76:	4a04      	ldr	r2, [pc, #16]	; (8027f88 <SettingsScreen_newBluetoothValController+0x6c>)
 8027f78:	2101      	movs	r1, #1
 8027f7a:	4618      	mov	r0, r3
 8027f7c:	f7fa f89e 	bl	80220bc <lv_sw_set_style>
}
 8027f80:	bf00      	nop
 8027f82:	bd98      	pop	{r3, r4, r7, pc}
 8027f84:	2001be44 	.word	0x2001be44
 8027f88:	2001b0e8 	.word	0x2001b0e8
 8027f8c:	009fc8ef 	.word	0x009fc8ef
 8027f90:	2001bde3 	.word	0x2001bde3
 8027f94:	2001bde4 	.word	0x2001bde4

08027f98 <SettingsScreen_newUnitTypeController>:
/*This function using for update set unit switch*/
void SettingsScreen_newUnitTypeController(void){
 8027f98:	b598      	push	{r3, r4, r7, lr}
 8027f9a:	af00      	add	r7, sp, #0
	if(SunitSetVal){
 8027f9c:	4b18      	ldr	r3, [pc, #96]	; (8028000 <SettingsScreen_newUnitTypeController+0x68>)
 8027f9e:	781b      	ldrb	r3, [r3, #0]
 8027fa0:	2b00      	cmp	r3, #0
 8027fa2:	d00a      	beq.n	8027fba <SettingsScreen_newUnitTypeController+0x22>
	    unit_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 8027fa4:	4c17      	ldr	r4, [pc, #92]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fa6:	4818      	ldr	r0, [pc, #96]	; (8028008 <SettingsScreen_newUnitTypeController+0x70>)
 8027fa8:	f7ff f810 	bl	8026fcc <lv_color_hex>
 8027fac:	8060      	strh	r0, [r4, #2]
	    unit_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 8027fae:	4c15      	ldr	r4, [pc, #84]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fb0:	4815      	ldr	r0, [pc, #84]	; (8028008 <SettingsScreen_newUnitTypeController+0x70>)
 8027fb2:	f7ff f80b 	bl	8026fcc <lv_color_hex>
 8027fb6:	80a0      	strh	r0, [r4, #4]
 8027fb8:	e019      	b.n	8027fee <SettingsScreen_newUnitTypeController+0x56>
	}else{
		unit_indic_style.body.main_color = lv_color_hex(0x000000);
 8027fba:	4c12      	ldr	r4, [pc, #72]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fbc:	2000      	movs	r0, #0
 8027fbe:	f7ff f805 	bl	8026fcc <lv_color_hex>
 8027fc2:	8060      	strh	r0, [r4, #2]
		unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 8027fc4:	4c0f      	ldr	r4, [pc, #60]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fc6:	2000      	movs	r0, #0
 8027fc8:	f7ff f800 	bl	8026fcc <lv_color_hex>
 8027fcc:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 8027fce:	4b0f      	ldr	r3, [pc, #60]	; (802800c <SettingsScreen_newUnitTypeController+0x74>)
 8027fd0:	781b      	ldrb	r3, [r3, #0]
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	d00b      	beq.n	8027fee <SettingsScreen_newUnitTypeController+0x56>
	    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8027fd6:	4c0b      	ldr	r4, [pc, #44]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027fdc:	f7fe fff6 	bl	8026fcc <lv_color_hex>
 8027fe0:	8060      	strh	r0, [r4, #2]
	    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8027fe2:	4c08      	ldr	r4, [pc, #32]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027fe4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027fe8:	f7fe fff0 	bl	8026fcc <lv_color_hex>
 8027fec:	80a0      	strh	r0, [r4, #4]
	    }
	}

    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 8027fee:	4b08      	ldr	r3, [pc, #32]	; (8028010 <SettingsScreen_newUnitTypeController+0x78>)
 8027ff0:	681b      	ldr	r3, [r3, #0]
 8027ff2:	4a04      	ldr	r2, [pc, #16]	; (8028004 <SettingsScreen_newUnitTypeController+0x6c>)
 8027ff4:	2101      	movs	r1, #1
 8027ff6:	4618      	mov	r0, r3
 8027ff8:	f7fa f860 	bl	80220bc <lv_sw_set_style>
}
 8027ffc:	bf00      	nop
 8027ffe:	bd98      	pop	{r3, r4, r7, pc}
 8028000:	2001bde2 	.word	0x2001bde2
 8028004:	2001b124 	.word	0x2001b124
 8028008:	009fc8ef 	.word	0x009fc8ef
 802800c:	2001bde3 	.word	0x2001bde3
 8028010:	2001bddc 	.word	0x2001bddc

08028014 <SettingsScreen_SetNewValues>:



//Setter Getter Functions

void SettingsScreen_SetNewValues(void){
 8028014:	b580      	push	{r7, lr}
 8028016:	af00      	add	r7, sp, #0
	  tos_RTC_SetTime(S_hrtc,Shours,Sminutes,Sseconds);
 8028018:	4b0e      	ldr	r3, [pc, #56]	; (8028054 <SettingsScreen_SetNewValues+0x40>)
 802801a:	6818      	ldr	r0, [r3, #0]
 802801c:	4b0e      	ldr	r3, [pc, #56]	; (8028058 <SettingsScreen_SetNewValues+0x44>)
 802801e:	7819      	ldrb	r1, [r3, #0]
 8028020:	4b0e      	ldr	r3, [pc, #56]	; (802805c <SettingsScreen_SetNewValues+0x48>)
 8028022:	781a      	ldrb	r2, [r3, #0]
 8028024:	4b0e      	ldr	r3, [pc, #56]	; (8028060 <SettingsScreen_SetNewValues+0x4c>)
 8028026:	781b      	ldrb	r3, [r3, #0]
 8028028:	f002 fd46 	bl	802aab8 <tos_RTC_SetTime>
	  tos_RTC_SetDate(S_hrtc,(Syears-2000),Smonths,Sdates);
 802802c:	4b09      	ldr	r3, [pc, #36]	; (8028054 <SettingsScreen_SetNewValues+0x40>)
 802802e:	6818      	ldr	r0, [r3, #0]
 8028030:	4b0c      	ldr	r3, [pc, #48]	; (8028064 <SettingsScreen_SetNewValues+0x50>)
 8028032:	881b      	ldrh	r3, [r3, #0]
 8028034:	b2db      	uxtb	r3, r3
 8028036:	3330      	adds	r3, #48	; 0x30
 8028038:	b2d9      	uxtb	r1, r3
 802803a:	4b0b      	ldr	r3, [pc, #44]	; (8028068 <SettingsScreen_SetNewValues+0x54>)
 802803c:	781a      	ldrb	r2, [r3, #0]
 802803e:	4b0b      	ldr	r3, [pc, #44]	; (802806c <SettingsScreen_SetNewValues+0x58>)
 8028040:	781b      	ldrb	r3, [r3, #0]
 8028042:	f002 fd69 	bl	802ab18 <tos_RTC_SetDate>
	  tos_BluetoothSetEnableVal(SbluetoothStatu);
 8028046:	4b0a      	ldr	r3, [pc, #40]	; (8028070 <SettingsScreen_SetNewValues+0x5c>)
 8028048:	781b      	ldrb	r3, [r3, #0]
 802804a:	4618      	mov	r0, r3
 802804c:	f002 f810 	bl	802a070 <tos_BluetoothSetEnableVal>
}
 8028050:	bf00      	nop
 8028052:	bd80      	pop	{r7, pc}
 8028054:	2001be00 	.word	0x2001be00
 8028058:	2001bde1 	.word	0x2001bde1
 802805c:	2001bdec 	.word	0x2001bdec
 8028060:	2001bdff 	.word	0x2001bdff
 8028064:	2001bdf4 	.word	0x2001bdf4
 8028068:	2001bdfe 	.word	0x2001bdfe
 802806c:	2001bde0 	.word	0x2001bde0
 8028070:	2001b160 	.word	0x2001b160

08028074 <SettingsScreen_SetTime>:

void SettingsScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8028074:	b480      	push	{r7}
 8028076:	b083      	sub	sp, #12
 8028078:	af00      	add	r7, sp, #0
 802807a:	4603      	mov	r3, r0
 802807c:	71fb      	strb	r3, [r7, #7]
 802807e:	460b      	mov	r3, r1
 8028080:	71bb      	strb	r3, [r7, #6]
 8028082:	4613      	mov	r3, r2
 8028084:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 8028086:	4b0b      	ldr	r3, [pc, #44]	; (80280b4 <SettingsScreen_SetTime+0x40>)
 8028088:	781b      	ldrb	r3, [r3, #0]
 802808a:	f083 0301 	eor.w	r3, r3, #1
 802808e:	b2db      	uxtb	r3, r3
 8028090:	2b00      	cmp	r3, #0
 8028092:	d008      	beq.n	80280a6 <SettingsScreen_SetTime+0x32>
		Shours = getHours;
 8028094:	4a08      	ldr	r2, [pc, #32]	; (80280b8 <SettingsScreen_SetTime+0x44>)
 8028096:	79fb      	ldrb	r3, [r7, #7]
 8028098:	7013      	strb	r3, [r2, #0]
		Sminutes = getMinutes;
 802809a:	4a08      	ldr	r2, [pc, #32]	; (80280bc <SettingsScreen_SetTime+0x48>)
 802809c:	79bb      	ldrb	r3, [r7, #6]
 802809e:	7013      	strb	r3, [r2, #0]
		Sseconds = getSeconds;
 80280a0:	4a07      	ldr	r2, [pc, #28]	; (80280c0 <SettingsScreen_SetTime+0x4c>)
 80280a2:	797b      	ldrb	r3, [r7, #5]
 80280a4:	7013      	strb	r3, [r2, #0]
	}
}
 80280a6:	bf00      	nop
 80280a8:	370c      	adds	r7, #12
 80280aa:	46bd      	mov	sp, r7
 80280ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280b0:	4770      	bx	lr
 80280b2:	bf00      	nop
 80280b4:	2001bdfc 	.word	0x2001bdfc
 80280b8:	2001bde1 	.word	0x2001bde1
 80280bc:	2001bdec 	.word	0x2001bdec
 80280c0:	2001bdff 	.word	0x2001bdff

080280c4 <SettingsScreen_SetDate>:
void SettingsScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate) {
 80280c4:	b480      	push	{r7}
 80280c6:	b083      	sub	sp, #12
 80280c8:	af00      	add	r7, sp, #0
 80280ca:	4603      	mov	r3, r0
 80280cc:	71fb      	strb	r3, [r7, #7]
 80280ce:	460b      	mov	r3, r1
 80280d0:	71bb      	strb	r3, [r7, #6]
 80280d2:	4613      	mov	r3, r2
 80280d4:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 80280d6:	4b0d      	ldr	r3, [pc, #52]	; (802810c <SettingsScreen_SetDate+0x48>)
 80280d8:	781b      	ldrb	r3, [r3, #0]
 80280da:	f083 0301 	eor.w	r3, r3, #1
 80280de:	b2db      	uxtb	r3, r3
 80280e0:	2b00      	cmp	r3, #0
 80280e2:	d00c      	beq.n	80280fe <SettingsScreen_SetDate+0x3a>
		Syears =getYear+2000;
 80280e4:	79fb      	ldrb	r3, [r7, #7]
 80280e6:	b29b      	uxth	r3, r3
 80280e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80280ec:	b29a      	uxth	r2, r3
 80280ee:	4b08      	ldr	r3, [pc, #32]	; (8028110 <SettingsScreen_SetDate+0x4c>)
 80280f0:	801a      	strh	r2, [r3, #0]
		Smonths = getMonth;
 80280f2:	4a08      	ldr	r2, [pc, #32]	; (8028114 <SettingsScreen_SetDate+0x50>)
 80280f4:	79bb      	ldrb	r3, [r7, #6]
 80280f6:	7013      	strb	r3, [r2, #0]
		Sdates = getDate;
 80280f8:	4a07      	ldr	r2, [pc, #28]	; (8028118 <SettingsScreen_SetDate+0x54>)
 80280fa:	797b      	ldrb	r3, [r7, #5]
 80280fc:	7013      	strb	r3, [r2, #0]
	}
}
 80280fe:	bf00      	nop
 8028100:	370c      	adds	r7, #12
 8028102:	46bd      	mov	sp, r7
 8028104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028108:	4770      	bx	lr
 802810a:	bf00      	nop
 802810c:	2001bdfc 	.word	0x2001bdfc
 8028110:	2001bdf4 	.word	0x2001bdf4
 8028114:	2001bdfe 	.word	0x2001bdfe
 8028118:	2001bde0 	.word	0x2001bde0

0802811c <SettingsScreen_isSettingsOpen>:
void SettingsScreen_SetUnitType(bool val){
	if(!isMenuOpen)SunitType=val;
}
bool SettingsScreen_isSettingsOpen(void){
 802811c:	b480      	push	{r7}
 802811e:	af00      	add	r7, sp, #0
	return isMenuOpen;
 8028120:	4b03      	ldr	r3, [pc, #12]	; (8028130 <SettingsScreen_isSettingsOpen+0x14>)
 8028122:	781b      	ldrb	r3, [r3, #0]
}
 8028124:	4618      	mov	r0, r3
 8028126:	46bd      	mov	sp, r7
 8028128:	f85d 7b04 	ldr.w	r7, [sp], #4
 802812c:	4770      	bx	lr
 802812e:	bf00      	nop
 8028130:	2001bdfc 	.word	0x2001bdfc

08028134 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8028134:	b580      	push	{r7, lr}
 8028136:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8028138:	f7ed fcd4 	bl	8015ae4 <lv_disp_get_default>
 802813c:	4603      	mov	r3, r0
 802813e:	4618      	mov	r0, r3
 8028140:	f7e0 f99c 	bl	800847c <lv_disp_get_scr_act>
 8028144:	4603      	mov	r3, r0
}
 8028146:	4618      	mov	r0, r3
 8028148:	bd80      	pop	{r7, pc}

0802814a <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802814a:	b580      	push	{r7, lr}
 802814c:	b084      	sub	sp, #16
 802814e:	af00      	add	r7, sp, #0
 8028150:	60f8      	str	r0, [r7, #12]
 8028152:	460b      	mov	r3, r1
 8028154:	607a      	str	r2, [r7, #4]
 8028156:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8028158:	6879      	ldr	r1, [r7, #4]
 802815a:	68f8      	ldr	r0, [r7, #12]
 802815c:	f7e2 f805 	bl	800a16a <lv_obj_set_style>
}
 8028160:	bf00      	nop
 8028162:	3710      	adds	r7, #16
 8028164:	46bd      	mov	sp, r7
 8028166:	bd80      	pop	{r7, pc}

08028168 <tos_SleepModeScreen_Init>:
void SMS_digitalTimePrintTheScreen(void);
void SMS_batteryValueUpdater(void);
void SMS_bluetoothStatusUpdater(void);
void SMS_Updater(lv_task_t * t);

void tos_SleepModeScreen_Init(void) {
 8028168:	b580      	push	{r7, lr}
 802816a:	b082      	sub	sp, #8
 802816c:	af02      	add	r7, sp, #8
	slptaskController=true;
 802816e:	4ba1      	ldr	r3, [pc, #644]	; (80283f4 <tos_SleepModeScreen_Init+0x28c>)
 8028170:	2201      	movs	r2, #1
 8028172:	701a      	strb	r2, [r3, #0]
	static lv_style_t slpStyle_screen;
	lv_style_copy(&slpStyle_screen, &lv_style_plain);
 8028174:	49a0      	ldr	r1, [pc, #640]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 8028176:	48a1      	ldr	r0, [pc, #644]	; (80283fc <tos_SleepModeScreen_Init+0x294>)
 8028178:	f7e3 fd96 	bl	800bca8 <lv_style_copy>
	slpStyle_screen.body.main_color = LV_COLOR_BLACK;
 802817c:	4b9f      	ldr	r3, [pc, #636]	; (80283fc <tos_SleepModeScreen_Init+0x294>)
 802817e:	2200      	movs	r2, #0
 8028180:	805a      	strh	r2, [r3, #2]
	slpStyle_screen.body.grad_color = LV_COLOR_BLACK;
 8028182:	4b9e      	ldr	r3, [pc, #632]	; (80283fc <tos_SleepModeScreen_Init+0x294>)
 8028184:	2200      	movs	r2, #0
 8028186:	809a      	strh	r2, [r3, #4]
		lv_obj_set_style(lv_scr_act(), &slpStyle_screen);
 8028188:	f7ff ffd4 	bl	8028134 <lv_scr_act>
 802818c:	4603      	mov	r3, r0
 802818e:	499b      	ldr	r1, [pc, #620]	; (80283fc <tos_SleepModeScreen_Init+0x294>)
 8028190:	4618      	mov	r0, r3
 8028192:	f7e1 ffea 	bl	800a16a <lv_obj_set_style>

	//Battery
	slpbatteryLbl= lv_label_create(lv_scr_act(), NULL);
 8028196:	f7ff ffcd 	bl	8028134 <lv_scr_act>
 802819a:	4603      	mov	r3, r0
 802819c:	2100      	movs	r1, #0
 802819e:	4618      	mov	r0, r3
 80281a0:	f7f4 fc56 	bl	801ca50 <lv_label_create>
 80281a4:	4602      	mov	r2, r0
 80281a6:	4b96      	ldr	r3, [pc, #600]	; (8028400 <tos_SleepModeScreen_Init+0x298>)
 80281a8:	601a      	str	r2, [r3, #0]
	lv_style_copy(&slpbattery_style, &lv_style_plain);
 80281aa:	4993      	ldr	r1, [pc, #588]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 80281ac:	4895      	ldr	r0, [pc, #596]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281ae:	f7e3 fd7b 	bl	800bca8 <lv_style_copy>
	slpbattery_style.text.color = LV_COLOR_GREEN;
 80281b2:	4a94      	ldr	r2, [pc, #592]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281b4:	f892 3020 	ldrb.w	r3, [r2, #32]
 80281b8:	2104      	movs	r1, #4
 80281ba:	f361 0302 	bfi	r3, r1, #0, #3
 80281be:	f882 3020 	strb.w	r3, [r2, #32]
 80281c2:	4a90      	ldr	r2, [pc, #576]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281c4:	f892 3020 	ldrb.w	r3, [r2, #32]
 80281c8:	f36f 03c7 	bfc	r3, #3, #5
 80281cc:	f882 3020 	strb.w	r3, [r2, #32]
 80281d0:	4a8c      	ldr	r2, [pc, #560]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281d2:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80281d6:	f36f 0304 	bfc	r3, #0, #5
 80281da:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80281de:	4a89      	ldr	r2, [pc, #548]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281e0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80281e4:	f36f 1347 	bfc	r3, #5, #3
 80281e8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(slpbatteryLbl, LV_LABEL_STYLE_MAIN, &slpbattery_style);
 80281ec:	4b84      	ldr	r3, [pc, #528]	; (8028400 <tos_SleepModeScreen_Init+0x298>)
 80281ee:	681b      	ldr	r3, [r3, #0]
 80281f0:	4a84      	ldr	r2, [pc, #528]	; (8028404 <tos_SleepModeScreen_Init+0x29c>)
 80281f2:	2100      	movs	r1, #0
 80281f4:	4618      	mov	r0, r3
 80281f6:	f7ff ffa8 	bl	802814a <lv_label_set_style>
	lv_label_set_text(slpbatteryLbl, LV_SYMBOL_BATTERY_FULL);
 80281fa:	4b81      	ldr	r3, [pc, #516]	; (8028400 <tos_SleepModeScreen_Init+0x298>)
 80281fc:	681b      	ldr	r3, [r3, #0]
 80281fe:	4982      	ldr	r1, [pc, #520]	; (8028408 <tos_SleepModeScreen_Init+0x2a0>)
 8028200:	4618      	mov	r0, r3
 8028202:	f7f4 fd57 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8028206:	4b7e      	ldr	r3, [pc, #504]	; (8028400 <tos_SleepModeScreen_Init+0x298>)
 8028208:	6818      	ldr	r0, [r3, #0]
 802820a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802820e:	9300      	str	r3, [sp, #0]
 8028210:	2364      	movs	r3, #100	; 0x64
 8028212:	2200      	movs	r2, #0
 8028214:	2100      	movs	r1, #0
 8028216:	f7e1 fb03 	bl	8009820 <lv_obj_align>

	//Bluetooth
	slpbluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 802821a:	f7ff ff8b 	bl	8028134 <lv_scr_act>
 802821e:	4603      	mov	r3, r0
 8028220:	2100      	movs	r1, #0
 8028222:	4618      	mov	r0, r3
 8028224:	f7f4 fc14 	bl	801ca50 <lv_label_create>
 8028228:	4602      	mov	r2, r0
 802822a:	4b78      	ldr	r3, [pc, #480]	; (802840c <tos_SleepModeScreen_Init+0x2a4>)
 802822c:	601a      	str	r2, [r3, #0]
    lv_style_copy(&slpbluetooth_style, &lv_style_plain);
 802822e:	4972      	ldr	r1, [pc, #456]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 8028230:	4877      	ldr	r0, [pc, #476]	; (8028410 <tos_SleepModeScreen_Init+0x2a8>)
 8028232:	f7e3 fd39 	bl	800bca8 <lv_style_copy>
    slpbluetooth_style.text.color = LV_COLOR_WHITE;
 8028236:	4a76      	ldr	r2, [pc, #472]	; (8028410 <tos_SleepModeScreen_Init+0x2a8>)
 8028238:	4b76      	ldr	r3, [pc, #472]	; (8028414 <tos_SleepModeScreen_Init+0x2ac>)
 802823a:	881b      	ldrh	r3, [r3, #0]
 802823c:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(slpbluetoothLbl, LV_LABEL_STYLE_MAIN, &slpbluetooth_style);
 802823e:	4b73      	ldr	r3, [pc, #460]	; (802840c <tos_SleepModeScreen_Init+0x2a4>)
 8028240:	681b      	ldr	r3, [r3, #0]
 8028242:	4a73      	ldr	r2, [pc, #460]	; (8028410 <tos_SleepModeScreen_Init+0x2a8>)
 8028244:	2100      	movs	r1, #0
 8028246:	4618      	mov	r0, r3
 8028248:	f7ff ff7f 	bl	802814a <lv_label_set_style>
	lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 802824c:	4b6f      	ldr	r3, [pc, #444]	; (802840c <tos_SleepModeScreen_Init+0x2a4>)
 802824e:	681b      	ldr	r3, [r3, #0]
 8028250:	4971      	ldr	r1, [pc, #452]	; (8028418 <tos_SleepModeScreen_Init+0x2b0>)
 8028252:	4618      	mov	r0, r3
 8028254:	f7f4 fd2e 	bl	801ccb4 <lv_label_set_text>
	lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8028258:	4b6c      	ldr	r3, [pc, #432]	; (802840c <tos_SleepModeScreen_Init+0x2a4>)
 802825a:	6818      	ldr	r0, [r3, #0]
 802825c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8028260:	9300      	str	r3, [sp, #0]
 8028262:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8028266:	2200      	movs	r2, #0
 8028268:	2100      	movs	r1, #0
 802826a:	f7e1 fad9 	bl	8009820 <lv_obj_align>

	//Digital Clock
		static lv_style_t slpdClock_style,slpdDate_style,slpweekD_style;
				lv_style_copy(&slpdClock_style, &lv_style_plain);
 802826e:	4962      	ldr	r1, [pc, #392]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 8028270:	486a      	ldr	r0, [pc, #424]	; (802841c <tos_SleepModeScreen_Init+0x2b4>)
 8028272:	f7e3 fd19 	bl	800bca8 <lv_style_copy>
				slpdClock_style.text.font =&digital_font_for_number_65;
 8028276:	4b69      	ldr	r3, [pc, #420]	; (802841c <tos_SleepModeScreen_Init+0x2b4>)
 8028278:	4a69      	ldr	r2, [pc, #420]	; (8028420 <tos_SleepModeScreen_Init+0x2b8>)
 802827a:	625a      	str	r2, [r3, #36]	; 0x24
				slpdClock_style.text.color= LV_COLOR_SILVER;
 802827c:	4a67      	ldr	r2, [pc, #412]	; (802841c <tos_SleepModeScreen_Init+0x2b4>)
 802827e:	4b69      	ldr	r3, [pc, #420]	; (8028424 <tos_SleepModeScreen_Init+0x2bc>)
 8028280:	881b      	ldrh	r3, [r3, #0]
 8028282:	8413      	strh	r3, [r2, #32]
			    lv_style_copy(&slpdDate_style, &lv_style_plain);
 8028284:	495c      	ldr	r1, [pc, #368]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 8028286:	4868      	ldr	r0, [pc, #416]	; (8028428 <tos_SleepModeScreen_Init+0x2c0>)
 8028288:	f7e3 fd0e 	bl	800bca8 <lv_style_copy>
			    slpdDate_style.text.font =&digital_font_for_number_30;
 802828c:	4b66      	ldr	r3, [pc, #408]	; (8028428 <tos_SleepModeScreen_Init+0x2c0>)
 802828e:	4a67      	ldr	r2, [pc, #412]	; (802842c <tos_SleepModeScreen_Init+0x2c4>)
 8028290:	625a      	str	r2, [r3, #36]	; 0x24
			    slpdDate_style.text.color= LV_COLOR_SILVER;
 8028292:	4a65      	ldr	r2, [pc, #404]	; (8028428 <tos_SleepModeScreen_Init+0x2c0>)
 8028294:	4b63      	ldr	r3, [pc, #396]	; (8028424 <tos_SleepModeScreen_Init+0x2bc>)
 8028296:	881b      	ldrh	r3, [r3, #0]
 8028298:	8413      	strh	r3, [r2, #32]
				lv_style_copy(&slpweekD_style, &lv_style_plain);
 802829a:	4957      	ldr	r1, [pc, #348]	; (80283f8 <tos_SleepModeScreen_Init+0x290>)
 802829c:	4864      	ldr	r0, [pc, #400]	; (8028430 <tos_SleepModeScreen_Init+0x2c8>)
 802829e:	f7e3 fd03 	bl	800bca8 <lv_style_copy>
				slpweekD_style.text.font =&lv_font_roboto_22;
 80282a2:	4b63      	ldr	r3, [pc, #396]	; (8028430 <tos_SleepModeScreen_Init+0x2c8>)
 80282a4:	4a63      	ldr	r2, [pc, #396]	; (8028434 <tos_SleepModeScreen_Init+0x2cc>)
 80282a6:	625a      	str	r2, [r3, #36]	; 0x24
				slpweekD_style.text.color= LV_COLOR_SILVER;
 80282a8:	4a61      	ldr	r2, [pc, #388]	; (8028430 <tos_SleepModeScreen_Init+0x2c8>)
 80282aa:	4b5e      	ldr	r3, [pc, #376]	; (8028424 <tos_SleepModeScreen_Init+0x2bc>)
 80282ac:	881b      	ldrh	r3, [r3, #0]
 80282ae:	8413      	strh	r3, [r2, #32]

				slpdigitalClock = lv_label_create(lv_scr_act(), NULL);
 80282b0:	f7ff ff40 	bl	8028134 <lv_scr_act>
 80282b4:	4603      	mov	r3, r0
 80282b6:	2100      	movs	r1, #0
 80282b8:	4618      	mov	r0, r3
 80282ba:	f7f4 fbc9 	bl	801ca50 <lv_label_create>
 80282be:	4602      	mov	r2, r0
 80282c0:	4b5d      	ldr	r3, [pc, #372]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 80282c2:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalClock, LV_LABEL_STYLE_MAIN, &slpdClock_style);
 80282c4:	4b5c      	ldr	r3, [pc, #368]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	4a54      	ldr	r2, [pc, #336]	; (802841c <tos_SleepModeScreen_Init+0x2b4>)
 80282ca:	2100      	movs	r1, #0
 80282cc:	4618      	mov	r0, r3
 80282ce:	f7ff ff3c 	bl	802814a <lv_label_set_style>
			    lv_obj_set_width(slpdigitalClock, 200);
 80282d2:	4b59      	ldr	r3, [pc, #356]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 80282d4:	681b      	ldr	r3, [r3, #0]
 80282d6:	21c8      	movs	r1, #200	; 0xc8
 80282d8:	4618      	mov	r0, r3
 80282da:	f7e1 fa77 	bl	80097cc <lv_obj_set_width>
			    snprintf(slpbuffer, 8, "%02d:%02d:%02d", hours,minutes,seconds);
 80282de:	4b57      	ldr	r3, [pc, #348]	; (802843c <tos_SleepModeScreen_Init+0x2d4>)
 80282e0:	781b      	ldrb	r3, [r3, #0]
 80282e2:	4619      	mov	r1, r3
 80282e4:	4b56      	ldr	r3, [pc, #344]	; (8028440 <tos_SleepModeScreen_Init+0x2d8>)
 80282e6:	781b      	ldrb	r3, [r3, #0]
 80282e8:	461a      	mov	r2, r3
 80282ea:	4b56      	ldr	r3, [pc, #344]	; (8028444 <tos_SleepModeScreen_Init+0x2dc>)
 80282ec:	781b      	ldrb	r3, [r3, #0]
 80282ee:	9301      	str	r3, [sp, #4]
 80282f0:	9200      	str	r2, [sp, #0]
 80282f2:	460b      	mov	r3, r1
 80282f4:	4a54      	ldr	r2, [pc, #336]	; (8028448 <tos_SleepModeScreen_Init+0x2e0>)
 80282f6:	2108      	movs	r1, #8
 80282f8:	4854      	ldr	r0, [pc, #336]	; (802844c <tos_SleepModeScreen_Init+0x2e4>)
 80282fa:	f002 ff55 	bl	802b1a8 <sniprintf>
			    lv_label_set_text(slpdigitalClock, slpbuffer);
 80282fe:	4b4e      	ldr	r3, [pc, #312]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 8028300:	681b      	ldr	r3, [r3, #0]
 8028302:	4952      	ldr	r1, [pc, #328]	; (802844c <tos_SleepModeScreen_Init+0x2e4>)
 8028304:	4618      	mov	r0, r3
 8028306:	f7f4 fcd5 	bl	801ccb4 <lv_label_set_text>
			    lv_label_set_align(slpdigitalClock, LV_LABEL_ALIGN_CENTER);
 802830a:	4b4b      	ldr	r3, [pc, #300]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 802830c:	681b      	ldr	r3, [r3, #0]
 802830e:	2101      	movs	r1, #1
 8028310:	4618      	mov	r0, r3
 8028312:	f7f4 fdc7 	bl	801cea4 <lv_label_set_align>
			    lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 8028316:	4b48      	ldr	r3, [pc, #288]	; (8028438 <tos_SleepModeScreen_Init+0x2d0>)
 8028318:	6818      	ldr	r0, [r3, #0]
 802831a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 802831e:	9300      	str	r3, [sp, #0]
 8028320:	2300      	movs	r3, #0
 8028322:	2200      	movs	r2, #0
 8028324:	2100      	movs	r1, #0
 8028326:	f7e1 fa7b 	bl	8009820 <lv_obj_align>

			   //Digital Date
			    dateTmp=date;
 802832a:	4b49      	ldr	r3, [pc, #292]	; (8028450 <tos_SleepModeScreen_Init+0x2e8>)
 802832c:	781a      	ldrb	r2, [r3, #0]
 802832e:	4b49      	ldr	r3, [pc, #292]	; (8028454 <tos_SleepModeScreen_Init+0x2ec>)
 8028330:	701a      	strb	r2, [r3, #0]
			    slpdigitalDate = lv_label_create(lv_scr_act(), NULL);
 8028332:	f7ff feff 	bl	8028134 <lv_scr_act>
 8028336:	4603      	mov	r3, r0
 8028338:	2100      	movs	r1, #0
 802833a:	4618      	mov	r0, r3
 802833c:	f7f4 fb88 	bl	801ca50 <lv_label_create>
 8028340:	4602      	mov	r2, r0
 8028342:	4b45      	ldr	r3, [pc, #276]	; (8028458 <tos_SleepModeScreen_Init+0x2f0>)
 8028344:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalDate, LV_LABEL_STYLE_MAIN, &slpdDate_style);
 8028346:	4b44      	ldr	r3, [pc, #272]	; (8028458 <tos_SleepModeScreen_Init+0x2f0>)
 8028348:	681b      	ldr	r3, [r3, #0]
 802834a:	4a37      	ldr	r2, [pc, #220]	; (8028428 <tos_SleepModeScreen_Init+0x2c0>)
 802834c:	2100      	movs	r1, #0
 802834e:	4618      	mov	r0, r3
 8028350:	f7ff fefb 	bl	802814a <lv_label_set_style>
		    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8028354:	4b3e      	ldr	r3, [pc, #248]	; (8028450 <tos_SleepModeScreen_Init+0x2e8>)
 8028356:	781b      	ldrb	r3, [r3, #0]
 8028358:	4619      	mov	r1, r3
 802835a:	4b40      	ldr	r3, [pc, #256]	; (802845c <tos_SleepModeScreen_Init+0x2f4>)
 802835c:	781b      	ldrb	r3, [r3, #0]
 802835e:	461a      	mov	r2, r3
 8028360:	4b3f      	ldr	r3, [pc, #252]	; (8028460 <tos_SleepModeScreen_Init+0x2f8>)
 8028362:	881b      	ldrh	r3, [r3, #0]
 8028364:	9301      	str	r3, [sp, #4]
 8028366:	9200      	str	r2, [sp, #0]
 8028368:	460b      	mov	r3, r1
 802836a:	4a3e      	ldr	r2, [pc, #248]	; (8028464 <tos_SleepModeScreen_Init+0x2fc>)
 802836c:	2110      	movs	r1, #16
 802836e:	4837      	ldr	r0, [pc, #220]	; (802844c <tos_SleepModeScreen_Init+0x2e4>)
 8028370:	f002 ff1a 	bl	802b1a8 <sniprintf>
				lv_label_set_text(slpdigitalDate, slpbuffer);
 8028374:	4b38      	ldr	r3, [pc, #224]	; (8028458 <tos_SleepModeScreen_Init+0x2f0>)
 8028376:	681b      	ldr	r3, [r3, #0]
 8028378:	4934      	ldr	r1, [pc, #208]	; (802844c <tos_SleepModeScreen_Init+0x2e4>)
 802837a:	4618      	mov	r0, r3
 802837c:	f7f4 fc9a 	bl	801ccb4 <lv_label_set_text>
			    lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8028380:	4b35      	ldr	r3, [pc, #212]	; (8028458 <tos_SleepModeScreen_Init+0x2f0>)
 8028382:	6818      	ldr	r0, [r3, #0]
 8028384:	230a      	movs	r3, #10
 8028386:	9300      	str	r3, [sp, #0]
 8028388:	2300      	movs	r3, #0
 802838a:	2200      	movs	r2, #0
 802838c:	2100      	movs	r1, #0
 802838e:	f7e1 fa47 	bl	8009820 <lv_obj_align>

			    //Week Day
			    slpweekDay = lv_label_create(lv_scr_act(), NULL);
 8028392:	f7ff fecf 	bl	8028134 <lv_scr_act>
 8028396:	4603      	mov	r3, r0
 8028398:	2100      	movs	r1, #0
 802839a:	4618      	mov	r0, r3
 802839c:	f7f4 fb58 	bl	801ca50 <lv_label_create>
 80283a0:	4602      	mov	r2, r0
 80283a2:	4b31      	ldr	r3, [pc, #196]	; (8028468 <tos_SleepModeScreen_Init+0x300>)
 80283a4:	601a      	str	r2, [r3, #0]
			    lv_obj_set_width(slpweekDay, 150);
 80283a6:	4b30      	ldr	r3, [pc, #192]	; (8028468 <tos_SleepModeScreen_Init+0x300>)
 80283a8:	681b      	ldr	r3, [r3, #0]
 80283aa:	2196      	movs	r1, #150	; 0x96
 80283ac:	4618      	mov	r0, r3
 80283ae:	f7e1 fa0d 	bl	80097cc <lv_obj_set_width>
			    lv_label_set_style(slpweekDay, LV_LABEL_STYLE_MAIN, &slpweekD_style);
 80283b2:	4b2d      	ldr	r3, [pc, #180]	; (8028468 <tos_SleepModeScreen_Init+0x300>)
 80283b4:	681b      	ldr	r3, [r3, #0]
 80283b6:	4a1e      	ldr	r2, [pc, #120]	; (8028430 <tos_SleepModeScreen_Init+0x2c8>)
 80283b8:	2100      	movs	r1, #0
 80283ba:	4618      	mov	r0, r3
 80283bc:	f7ff fec5 	bl	802814a <lv_label_set_style>
			    lv_label_set_text(slpweekDay,slpweekDayStr);
 80283c0:	4b29      	ldr	r3, [pc, #164]	; (8028468 <tos_SleepModeScreen_Init+0x300>)
 80283c2:	681a      	ldr	r2, [r3, #0]
 80283c4:	4b29      	ldr	r3, [pc, #164]	; (802846c <tos_SleepModeScreen_Init+0x304>)
 80283c6:	681b      	ldr	r3, [r3, #0]
 80283c8:	4619      	mov	r1, r3
 80283ca:	4610      	mov	r0, r2
 80283cc:	f7f4 fc72 	bl	801ccb4 <lv_label_set_text>
			    lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 80283d0:	4b25      	ldr	r3, [pc, #148]	; (8028468 <tos_SleepModeScreen_Init+0x300>)
 80283d2:	6818      	ldr	r0, [r3, #0]
 80283d4:	2323      	movs	r3, #35	; 0x23
 80283d6:	9300      	str	r3, [sp, #0]
 80283d8:	2300      	movs	r3, #0
 80283da:	2200      	movs	r2, #0
 80283dc:	2100      	movs	r1, #0
 80283de:	f7e1 fa1f 	bl	8009820 <lv_obj_align>
				lv_task_create(SMS_Updater, 250, _LV_TASK_PRIO_NUM, NULL);
 80283e2:	2300      	movs	r3, #0
 80283e4:	2206      	movs	r2, #6
 80283e6:	21fa      	movs	r1, #250	; 0xfa
 80283e8:	4821      	ldr	r0, [pc, #132]	; (8028470 <tos_SleepModeScreen_Init+0x308>)
 80283ea:	f7ee ffbf 	bl	801736c <lv_task_create>
}
 80283ee:	bf00      	nop
 80283f0:	46bd      	mov	sp, r7
 80283f2:	bd80      	pop	{r7, pc}
 80283f4:	2001bed4 	.word	0x2001bed4
 80283f8:	2001ba40 	.word	0x2001ba40
 80283fc:	2001b290 	.word	0x2001b290
 8028400:	2001bed8 	.word	0x2001bed8
 8028404:	2001be98 	.word	0x2001be98
 8028408:	0802dadc 	.word	0x0802dadc
 802840c:	2001be90 	.word	0x2001be90
 8028410:	2001be54 	.word	0x2001be54
 8028414:	0802db04 	.word	0x0802db04
 8028418:	0802dae0 	.word	0x0802dae0
 802841c:	2001b2cc 	.word	0x2001b2cc
 8028420:	2000281c 	.word	0x2000281c
 8028424:	0802db08 	.word	0x0802db08
 8028428:	2001b308 	.word	0x2001b308
 802842c:	200027ec 	.word	0x200027ec
 8028430:	2001b344 	.word	0x2001b344
 8028434:	200017c4 	.word	0x200017c4
 8028438:	2001be4c 	.word	0x2001be4c
 802843c:	2001bcbe 	.word	0x2001bcbe
 8028440:	2001bcbd 	.word	0x2001bcbd
 8028444:	2001bcac 	.word	0x2001bcac
 8028448:	0802dae4 	.word	0x0802dae4
 802844c:	2001bee4 	.word	0x2001bee4
 8028450:	2001bcbc 	.word	0x2001bcbc
 8028454:	2001bbd8 	.word	0x2001bbd8
 8028458:	2001be48 	.word	0x2001be48
 802845c:	2001bbf0 	.word	0x2001bbf0
 8028460:	2001bcae 	.word	0x2001bcae
 8028464:	0802daf4 	.word	0x0802daf4
 8028468:	2001be94 	.word	0x2001be94
 802846c:	2001bef4 	.word	0x2001bef4
 8028470:	08028475 	.word	0x08028475

08028474 <SMS_Updater>:
/*This function using for update all updater functions*/
void SMS_Updater(lv_task_t *t){
 8028474:	b580      	push	{r7, lr}
 8028476:	b082      	sub	sp, #8
 8028478:	af00      	add	r7, sp, #0
 802847a:	6078      	str	r0, [r7, #4]
	if(slptaskController){
 802847c:	4b08      	ldr	r3, [pc, #32]	; (80284a0 <SMS_Updater+0x2c>)
 802847e:	781b      	ldrb	r3, [r3, #0]
 8028480:	2b00      	cmp	r3, #0
 8028482:	d006      	beq.n	8028492 <SMS_Updater+0x1e>
		SMS_batteryValueUpdater();
 8028484:	f000 f88a 	bl	802859c <SMS_batteryValueUpdater>
		SMS_bluetoothStatusUpdater();
 8028488:	f000 f8ac 	bl	80285e4 <SMS_bluetoothStatusUpdater>
		SMS_digitalTimePrintTheScreen();
 802848c:	f000 f80a 	bl	80284a4 <SMS_digitalTimePrintTheScreen>
	}else lv_task_del(t);
}
 8028490:	e002      	b.n	8028498 <SMS_Updater+0x24>
	}else lv_task_del(t);
 8028492:	6878      	ldr	r0, [r7, #4]
 8028494:	f7ee ffa2 	bl	80173dc <lv_task_del>
}
 8028498:	bf00      	nop
 802849a:	3708      	adds	r7, #8
 802849c:	46bd      	mov	sp, r7
 802849e:	bd80      	pop	{r7, pc}
 80284a0:	2001bed4 	.word	0x2001bed4

080284a4 <SMS_digitalTimePrintTheScreen>:
/* This function using for digital clock print to screen*/
void SMS_digitalTimePrintTheScreen(void){
 80284a4:	b580      	push	{r7, lr}
 80284a6:	b082      	sub	sp, #8
 80284a8:	af02      	add	r7, sp, #8
		snprintf(slpbuffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 80284aa:	4b2e      	ldr	r3, [pc, #184]	; (8028564 <SMS_digitalTimePrintTheScreen+0xc0>)
 80284ac:	781b      	ldrb	r3, [r3, #0]
 80284ae:	4619      	mov	r1, r3
 80284b0:	4b2d      	ldr	r3, [pc, #180]	; (8028568 <SMS_digitalTimePrintTheScreen+0xc4>)
 80284b2:	781b      	ldrb	r3, [r3, #0]
 80284b4:	461a      	mov	r2, r3
 80284b6:	4b2d      	ldr	r3, [pc, #180]	; (802856c <SMS_digitalTimePrintTheScreen+0xc8>)
 80284b8:	781b      	ldrb	r3, [r3, #0]
 80284ba:	9301      	str	r3, [sp, #4]
 80284bc:	9200      	str	r2, [sp, #0]
 80284be:	460b      	mov	r3, r1
 80284c0:	4a2b      	ldr	r2, [pc, #172]	; (8028570 <SMS_digitalTimePrintTheScreen+0xcc>)
 80284c2:	2110      	movs	r1, #16
 80284c4:	482b      	ldr	r0, [pc, #172]	; (8028574 <SMS_digitalTimePrintTheScreen+0xd0>)
 80284c6:	f002 fe6f 	bl	802b1a8 <sniprintf>
		    lv_label_set_text(slpdigitalClock, slpbuffer);
 80284ca:	4b2b      	ldr	r3, [pc, #172]	; (8028578 <SMS_digitalTimePrintTheScreen+0xd4>)
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	4929      	ldr	r1, [pc, #164]	; (8028574 <SMS_digitalTimePrintTheScreen+0xd0>)
 80284d0:	4618      	mov	r0, r3
 80284d2:	f7f4 fbef 	bl	801ccb4 <lv_label_set_text>
			lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 80284d6:	4b28      	ldr	r3, [pc, #160]	; (8028578 <SMS_digitalTimePrintTheScreen+0xd4>)
 80284d8:	6818      	ldr	r0, [r3, #0]
 80284da:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80284de:	9300      	str	r3, [sp, #0]
 80284e0:	2300      	movs	r3, #0
 80284e2:	2200      	movs	r2, #0
 80284e4:	2100      	movs	r1, #0
 80284e6:	f7e1 f99b 	bl	8009820 <lv_obj_align>
				if(dateTmp!=date){
 80284ea:	4b24      	ldr	r3, [pc, #144]	; (802857c <SMS_digitalTimePrintTheScreen+0xd8>)
 80284ec:	781a      	ldrb	r2, [r3, #0]
 80284ee:	4b24      	ldr	r3, [pc, #144]	; (8028580 <SMS_digitalTimePrintTheScreen+0xdc>)
 80284f0:	781b      	ldrb	r3, [r3, #0]
 80284f2:	429a      	cmp	r2, r3
 80284f4:	d033      	beq.n	802855e <SMS_digitalTimePrintTheScreen+0xba>
					 //Digital Date
					    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 80284f6:	4b22      	ldr	r3, [pc, #136]	; (8028580 <SMS_digitalTimePrintTheScreen+0xdc>)
 80284f8:	781b      	ldrb	r3, [r3, #0]
 80284fa:	4619      	mov	r1, r3
 80284fc:	4b21      	ldr	r3, [pc, #132]	; (8028584 <SMS_digitalTimePrintTheScreen+0xe0>)
 80284fe:	781b      	ldrb	r3, [r3, #0]
 8028500:	461a      	mov	r2, r3
 8028502:	4b21      	ldr	r3, [pc, #132]	; (8028588 <SMS_digitalTimePrintTheScreen+0xe4>)
 8028504:	881b      	ldrh	r3, [r3, #0]
 8028506:	9301      	str	r3, [sp, #4]
 8028508:	9200      	str	r2, [sp, #0]
 802850a:	460b      	mov	r3, r1
 802850c:	4a1f      	ldr	r2, [pc, #124]	; (802858c <SMS_digitalTimePrintTheScreen+0xe8>)
 802850e:	2110      	movs	r1, #16
 8028510:	4818      	ldr	r0, [pc, #96]	; (8028574 <SMS_digitalTimePrintTheScreen+0xd0>)
 8028512:	f002 fe49 	bl	802b1a8 <sniprintf>
							lv_label_set_text(slpdigitalDate, slpbuffer);
 8028516:	4b1e      	ldr	r3, [pc, #120]	; (8028590 <SMS_digitalTimePrintTheScreen+0xec>)
 8028518:	681b      	ldr	r3, [r3, #0]
 802851a:	4916      	ldr	r1, [pc, #88]	; (8028574 <SMS_digitalTimePrintTheScreen+0xd0>)
 802851c:	4618      	mov	r0, r3
 802851e:	f7f4 fbc9 	bl	801ccb4 <lv_label_set_text>
					    	//Week Day
					    	lv_label_set_text(slpweekDay, slpweekDayStr);
 8028522:	4b1c      	ldr	r3, [pc, #112]	; (8028594 <SMS_digitalTimePrintTheScreen+0xf0>)
 8028524:	681a      	ldr	r2, [r3, #0]
 8028526:	4b1c      	ldr	r3, [pc, #112]	; (8028598 <SMS_digitalTimePrintTheScreen+0xf4>)
 8028528:	681b      	ldr	r3, [r3, #0]
 802852a:	4619      	mov	r1, r3
 802852c:	4610      	mov	r0, r2
 802852e:	f7f4 fbc1 	bl	801ccb4 <lv_label_set_text>
					    	dateTmp=date;
 8028532:	4b13      	ldr	r3, [pc, #76]	; (8028580 <SMS_digitalTimePrintTheScreen+0xdc>)
 8028534:	781a      	ldrb	r2, [r3, #0]
 8028536:	4b11      	ldr	r3, [pc, #68]	; (802857c <SMS_digitalTimePrintTheScreen+0xd8>)
 8028538:	701a      	strb	r2, [r3, #0]


					    	lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 802853a:	4b15      	ldr	r3, [pc, #84]	; (8028590 <SMS_digitalTimePrintTheScreen+0xec>)
 802853c:	6818      	ldr	r0, [r3, #0]
 802853e:	230a      	movs	r3, #10
 8028540:	9300      	str	r3, [sp, #0]
 8028542:	2300      	movs	r3, #0
 8028544:	2200      	movs	r2, #0
 8028546:	2100      	movs	r1, #0
 8028548:	f7e1 f96a 	bl	8009820 <lv_obj_align>
					    	lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 802854c:	4b11      	ldr	r3, [pc, #68]	; (8028594 <SMS_digitalTimePrintTheScreen+0xf0>)
 802854e:	6818      	ldr	r0, [r3, #0]
 8028550:	2323      	movs	r3, #35	; 0x23
 8028552:	9300      	str	r3, [sp, #0]
 8028554:	2300      	movs	r3, #0
 8028556:	2200      	movs	r2, #0
 8028558:	2100      	movs	r1, #0
 802855a:	f7e1 f961 	bl	8009820 <lv_obj_align>
				}
}
 802855e:	bf00      	nop
 8028560:	46bd      	mov	sp, r7
 8028562:	bd80      	pop	{r7, pc}
 8028564:	2001bcbe 	.word	0x2001bcbe
 8028568:	2001bcbd 	.word	0x2001bcbd
 802856c:	2001bcac 	.word	0x2001bcac
 8028570:	0802dae4 	.word	0x0802dae4
 8028574:	2001bee4 	.word	0x2001bee4
 8028578:	2001be4c 	.word	0x2001be4c
 802857c:	2001bbd8 	.word	0x2001bbd8
 8028580:	2001bcbc 	.word	0x2001bcbc
 8028584:	2001bbf0 	.word	0x2001bbf0
 8028588:	2001bcae 	.word	0x2001bcae
 802858c:	0802daf4 	.word	0x0802daf4
 8028590:	2001be48 	.word	0x2001be48
 8028594:	2001be94 	.word	0x2001be94
 8028598:	2001bef4 	.word	0x2001bef4

0802859c <SMS_batteryValueUpdater>:
/* This function using for battery value update
*/
void SMS_batteryValueUpdater(void){
 802859c:	b580      	push	{r7, lr}
 802859e:	b082      	sub	sp, #8
 80285a0:	af02      	add	r7, sp, #8
		  lv_label_set_text(slpbatteryLbl, slpbatteryVal);
 80285a2:	4b0c      	ldr	r3, [pc, #48]	; (80285d4 <SMS_batteryValueUpdater+0x38>)
 80285a4:	681a      	ldr	r2, [r3, #0]
 80285a6:	4b0c      	ldr	r3, [pc, #48]	; (80285d8 <SMS_batteryValueUpdater+0x3c>)
 80285a8:	681b      	ldr	r3, [r3, #0]
 80285aa:	4619      	mov	r1, r3
 80285ac:	4610      	mov	r0, r2
 80285ae:	f7f4 fb81 	bl	801ccb4 <lv_label_set_text>
		  slpbattery_style.text.color = slpbatteryColor;
 80285b2:	4a0a      	ldr	r2, [pc, #40]	; (80285dc <SMS_batteryValueUpdater+0x40>)
 80285b4:	4b0a      	ldr	r3, [pc, #40]	; (80285e0 <SMS_batteryValueUpdater+0x44>)
 80285b6:	881b      	ldrh	r3, [r3, #0]
 80285b8:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 80285ba:	4b06      	ldr	r3, [pc, #24]	; (80285d4 <SMS_batteryValueUpdater+0x38>)
 80285bc:	6818      	ldr	r0, [r3, #0]
 80285be:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80285c2:	9300      	str	r3, [sp, #0]
 80285c4:	2364      	movs	r3, #100	; 0x64
 80285c6:	2200      	movs	r2, #0
 80285c8:	2100      	movs	r1, #0
 80285ca:	f7e1 f929 	bl	8009820 <lv_obj_align>
}
 80285ce:	bf00      	nop
 80285d0:	46bd      	mov	sp, r7
 80285d2:	bd80      	pop	{r7, pc}
 80285d4:	2001bed8 	.word	0x2001bed8
 80285d8:	2001bee0 	.word	0x2001bee0
 80285dc:	2001be98 	.word	0x2001be98
 80285e0:	2001bedc 	.word	0x2001bedc

080285e4 <SMS_bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void SMS_bluetoothStatusUpdater(void){
 80285e4:	b580      	push	{r7, lr}
 80285e6:	b082      	sub	sp, #8
 80285e8:	af02      	add	r7, sp, #8
		if(slpbluetoothStatus){
 80285ea:	4b11      	ldr	r3, [pc, #68]	; (8028630 <SMS_bluetoothStatusUpdater+0x4c>)
 80285ec:	781b      	ldrb	r3, [r3, #0]
 80285ee:	2b00      	cmp	r3, #0
 80285f0:	d015      	beq.n	802861e <SMS_bluetoothStatusUpdater+0x3a>
			slpbluetooth_style.text.color = slpbluetoothColor;
 80285f2:	4a10      	ldr	r2, [pc, #64]	; (8028634 <SMS_bluetoothStatusUpdater+0x50>)
 80285f4:	4b10      	ldr	r3, [pc, #64]	; (8028638 <SMS_bluetoothStatusUpdater+0x54>)
 80285f6:	881b      	ldrh	r3, [r3, #0]
 80285f8:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 80285fa:	4b10      	ldr	r3, [pc, #64]	; (802863c <SMS_bluetoothStatusUpdater+0x58>)
 80285fc:	681b      	ldr	r3, [r3, #0]
 80285fe:	4910      	ldr	r1, [pc, #64]	; (8028640 <SMS_bluetoothStatusUpdater+0x5c>)
 8028600:	4618      	mov	r0, r3
 8028602:	f7f4 fb57 	bl	801ccb4 <lv_label_set_text>
			  lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8028606:	4b0d      	ldr	r3, [pc, #52]	; (802863c <SMS_bluetoothStatusUpdater+0x58>)
 8028608:	6818      	ldr	r0, [r3, #0]
 802860a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802860e:	9300      	str	r3, [sp, #0]
 8028610:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8028614:	2200      	movs	r2, #0
 8028616:	2100      	movs	r1, #0
 8028618:	f7e1 f902 	bl	8009820 <lv_obj_align>
		}
		else lv_label_set_text(slpbluetoothLbl, " ");
}
 802861c:	e005      	b.n	802862a <SMS_bluetoothStatusUpdater+0x46>
		else lv_label_set_text(slpbluetoothLbl, " ");
 802861e:	4b07      	ldr	r3, [pc, #28]	; (802863c <SMS_bluetoothStatusUpdater+0x58>)
 8028620:	681b      	ldr	r3, [r3, #0]
 8028622:	4908      	ldr	r1, [pc, #32]	; (8028644 <SMS_bluetoothStatusUpdater+0x60>)
 8028624:	4618      	mov	r0, r3
 8028626:	f7f4 fb45 	bl	801ccb4 <lv_label_set_text>
}
 802862a:	bf00      	nop
 802862c:	46bd      	mov	sp, r7
 802862e:	bd80      	pop	{r7, pc}
 8028630:	2001bed5 	.word	0x2001bed5
 8028634:	2001be54 	.word	0x2001be54
 8028638:	2001be50 	.word	0x2001be50
 802863c:	2001be90 	.word	0x2001be90
 8028640:	0802dae0 	.word	0x0802dae0
 8028644:	0802db0c 	.word	0x0802db0c

08028648 <SleepModeScreen_SetTime>:

//Getter and setter functions
void SleepModeScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8028648:	b480      	push	{r7}
 802864a:	b083      	sub	sp, #12
 802864c:	af00      	add	r7, sp, #0
 802864e:	4603      	mov	r3, r0
 8028650:	71fb      	strb	r3, [r7, #7]
 8028652:	460b      	mov	r3, r1
 8028654:	71bb      	strb	r3, [r7, #6]
 8028656:	4613      	mov	r3, r2
 8028658:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 802865a:	4a07      	ldr	r2, [pc, #28]	; (8028678 <SleepModeScreen_SetTime+0x30>)
 802865c:	79fb      	ldrb	r3, [r7, #7]
 802865e:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 8028660:	4a06      	ldr	r2, [pc, #24]	; (802867c <SleepModeScreen_SetTime+0x34>)
 8028662:	79bb      	ldrb	r3, [r7, #6]
 8028664:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8028666:	4a06      	ldr	r2, [pc, #24]	; (8028680 <SleepModeScreen_SetTime+0x38>)
 8028668:	797b      	ldrb	r3, [r7, #5]
 802866a:	7013      	strb	r3, [r2, #0]
}
 802866c:	bf00      	nop
 802866e:	370c      	adds	r7, #12
 8028670:	46bd      	mov	sp, r7
 8028672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028676:	4770      	bx	lr
 8028678:	2001bcbe 	.word	0x2001bcbe
 802867c:	2001bcbd 	.word	0x2001bcbd
 8028680:	2001bcac 	.word	0x2001bcac

08028684 <SleepModeScreen_SetDate>:
void SleepModeScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8028684:	b480      	push	{r7}
 8028686:	b083      	sub	sp, #12
 8028688:	af00      	add	r7, sp, #0
 802868a:	603b      	str	r3, [r7, #0]
 802868c:	4603      	mov	r3, r0
 802868e:	71fb      	strb	r3, [r7, #7]
 8028690:	460b      	mov	r3, r1
 8028692:	71bb      	strb	r3, [r7, #6]
 8028694:	4613      	mov	r3, r2
 8028696:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8028698:	79fb      	ldrb	r3, [r7, #7]
 802869a:	b29b      	uxth	r3, r3
 802869c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80286a0:	b29a      	uxth	r2, r3
 80286a2:	4b08      	ldr	r3, [pc, #32]	; (80286c4 <SleepModeScreen_SetDate+0x40>)
 80286a4:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 80286a6:	4a08      	ldr	r2, [pc, #32]	; (80286c8 <SleepModeScreen_SetDate+0x44>)
 80286a8:	79bb      	ldrb	r3, [r7, #6]
 80286aa:	7013      	strb	r3, [r2, #0]
	date = getDate;
 80286ac:	4a07      	ldr	r2, [pc, #28]	; (80286cc <SleepModeScreen_SetDate+0x48>)
 80286ae:	797b      	ldrb	r3, [r7, #5]
 80286b0:	7013      	strb	r3, [r2, #0]
	slpweekDayStr =getWeekDay;
 80286b2:	4a07      	ldr	r2, [pc, #28]	; (80286d0 <SleepModeScreen_SetDate+0x4c>)
 80286b4:	683b      	ldr	r3, [r7, #0]
 80286b6:	6013      	str	r3, [r2, #0]

}
 80286b8:	bf00      	nop
 80286ba:	370c      	adds	r7, #12
 80286bc:	46bd      	mov	sp, r7
 80286be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286c2:	4770      	bx	lr
 80286c4:	2001bcae 	.word	0x2001bcae
 80286c8:	2001bbf0 	.word	0x2001bbf0
 80286cc:	2001bcbc 	.word	0x2001bcbc
 80286d0:	2001bef4 	.word	0x2001bef4

080286d4 <SleepModeScreen_SetBatteryVal>:
void SleepModeScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 80286d4:	b480      	push	{r7}
 80286d6:	b083      	sub	sp, #12
 80286d8:	af00      	add	r7, sp, #0
 80286da:	6078      	str	r0, [r7, #4]
 80286dc:	8039      	strh	r1, [r7, #0]
	slpbatteryVal =getBatteryVal;
 80286de:	4a06      	ldr	r2, [pc, #24]	; (80286f8 <SleepModeScreen_SetBatteryVal+0x24>)
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	6013      	str	r3, [r2, #0]
	slpbatteryColor =getBatteryColor;
 80286e4:	4a05      	ldr	r2, [pc, #20]	; (80286fc <SleepModeScreen_SetBatteryVal+0x28>)
 80286e6:	883b      	ldrh	r3, [r7, #0]
 80286e8:	8013      	strh	r3, [r2, #0]
}
 80286ea:	bf00      	nop
 80286ec:	370c      	adds	r7, #12
 80286ee:	46bd      	mov	sp, r7
 80286f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286f4:	4770      	bx	lr
 80286f6:	bf00      	nop
 80286f8:	2001bee0 	.word	0x2001bee0
 80286fc:	2001bedc 	.word	0x2001bedc

08028700 <SleepModeScreen_SetBluetoothStatusVal>:
void SleepModeScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 8028700:	b480      	push	{r7}
 8028702:	b083      	sub	sp, #12
 8028704:	af00      	add	r7, sp, #0
 8028706:	4603      	mov	r3, r0
 8028708:	80b9      	strh	r1, [r7, #4]
 802870a:	71fb      	strb	r3, [r7, #7]
	slpbluetoothStatus =getBluetoothStatus;
 802870c:	4a05      	ldr	r2, [pc, #20]	; (8028724 <SleepModeScreen_SetBluetoothStatusVal+0x24>)
 802870e:	79fb      	ldrb	r3, [r7, #7]
 8028710:	7013      	strb	r3, [r2, #0]
	slpbluetoothColor =getBluetoothColor;
 8028712:	4a05      	ldr	r2, [pc, #20]	; (8028728 <SleepModeScreen_SetBluetoothStatusVal+0x28>)
 8028714:	88bb      	ldrh	r3, [r7, #4]
 8028716:	8013      	strh	r3, [r2, #0]
}
 8028718:	bf00      	nop
 802871a:	370c      	adds	r7, #12
 802871c:	46bd      	mov	sp, r7
 802871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028722:	4770      	bx	lr
 8028724:	2001bed5 	.word	0x2001bed5
 8028728:	2001be50 	.word	0x2001be50

0802872c <SleepModeScreen_TaskControllerSet>:
void SleepModeScreen_TaskControllerSet(bool active){
 802872c:	b480      	push	{r7}
 802872e:	b083      	sub	sp, #12
 8028730:	af00      	add	r7, sp, #0
 8028732:	4603      	mov	r3, r0
 8028734:	71fb      	strb	r3, [r7, #7]
	slptaskController = active;
 8028736:	4a04      	ldr	r2, [pc, #16]	; (8028748 <SleepModeScreen_TaskControllerSet+0x1c>)
 8028738:	79fb      	ldrb	r3, [r7, #7]
 802873a:	7013      	strb	r3, [r2, #0]
}
 802873c:	bf00      	nop
 802873e:	370c      	adds	r7, #12
 8028740:	46bd      	mov	sp, r7
 8028742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028746:	4770      	bx	lr
 8028748:	2001bed4 	.word	0x2001bed4

0802874c <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 802874c:	b480      	push	{r7}
 802874e:	b085      	sub	sp, #20
 8028750:	af00      	add	r7, sp, #0
 8028752:	4603      	mov	r3, r0
 8028754:	71fb      	strb	r3, [r7, #7]
 8028756:	460b      	mov	r3, r1
 8028758:	71bb      	strb	r3, [r7, #6]
 802875a:	4613      	mov	r3, r2
 802875c:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802875e:	79bb      	ldrb	r3, [r7, #6]
 8028760:	095b      	lsrs	r3, r3, #5
 8028762:	b2db      	uxtb	r3, r3
 8028764:	f003 0307 	and.w	r3, r3, #7
 8028768:	b2da      	uxtb	r2, r3
 802876a:	7b3b      	ldrb	r3, [r7, #12]
 802876c:	f362 0302 	bfi	r3, r2, #0, #3
 8028770:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8028772:	79fb      	ldrb	r3, [r7, #7]
 8028774:	08db      	lsrs	r3, r3, #3
 8028776:	b2db      	uxtb	r3, r3
 8028778:	f003 031f 	and.w	r3, r3, #31
 802877c:	b2da      	uxtb	r2, r3
 802877e:	7b3b      	ldrb	r3, [r7, #12]
 8028780:	f362 03c7 	bfi	r3, r2, #3, #5
 8028784:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8028786:	797b      	ldrb	r3, [r7, #5]
 8028788:	08db      	lsrs	r3, r3, #3
 802878a:	b2db      	uxtb	r3, r3
 802878c:	f003 031f 	and.w	r3, r3, #31
 8028790:	b2da      	uxtb	r2, r3
 8028792:	7b7b      	ldrb	r3, [r7, #13]
 8028794:	f362 0304 	bfi	r3, r2, #0, #5
 8028798:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 802879a:	79bb      	ldrb	r3, [r7, #6]
 802879c:	089b      	lsrs	r3, r3, #2
 802879e:	b2db      	uxtb	r3, r3
 80287a0:	f003 0307 	and.w	r3, r3, #7
 80287a4:	b2da      	uxtb	r2, r3
 80287a6:	7b7b      	ldrb	r3, [r7, #13]
 80287a8:	f362 1347 	bfi	r3, r2, #5, #3
 80287ac:	737b      	strb	r3, [r7, #13]
    return color;
 80287ae:	89bb      	ldrh	r3, [r7, #12]
}
 80287b0:	4618      	mov	r0, r3
 80287b2:	3714      	adds	r7, #20
 80287b4:	46bd      	mov	sp, r7
 80287b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ba:	4770      	bx	lr

080287bc <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80287bc:	b580      	push	{r7, lr}
 80287be:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80287c0:	f7ed f990 	bl	8015ae4 <lv_disp_get_default>
 80287c4:	4603      	mov	r3, r0
 80287c6:	4618      	mov	r0, r3
 80287c8:	f7df fe58 	bl	800847c <lv_disp_get_scr_act>
 80287cc:	4603      	mov	r3, r0
}
 80287ce:	4618      	mov	r0, r3
 80287d0:	bd80      	pop	{r7, pc}

080287d2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80287d2:	b580      	push	{r7, lr}
 80287d4:	b084      	sub	sp, #16
 80287d6:	af00      	add	r7, sp, #0
 80287d8:	60f8      	str	r0, [r7, #12]
 80287da:	460b      	mov	r3, r1
 80287dc:	607a      	str	r2, [r7, #4]
 80287de:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80287e0:	6879      	ldr	r1, [r7, #4]
 80287e2:	68f8      	ldr	r0, [r7, #12]
 80287e4:	f7e1 fcc1 	bl	800a16a <lv_obj_set_style>
}
 80287e8:	bf00      	nop
 80287ea:	3710      	adds	r7, #16
 80287ec:	46bd      	mov	sp, r7
 80287ee:	bd80      	pop	{r7, pc}

080287f0 <tos_StartScreen_Init>:
#include "StartScreen.h"
#include "../../tOSbaga.h"
#include "stdio.h"


void tos_StartScreen_Init(void) {
 80287f0:	b590      	push	{r4, r7, lr}
 80287f2:	b085      	sub	sp, #20
 80287f4:	af02      	add	r7, sp, #8
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 80287f6:	4926      	ldr	r1, [pc, #152]	; (8028890 <tos_StartScreen_Init+0xa0>)
 80287f8:	4826      	ldr	r0, [pc, #152]	; (8028894 <tos_StartScreen_Init+0xa4>)
 80287fa:	f7e3 fa55 	bl	800bca8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_BLACK;
 80287fe:	4b25      	ldr	r3, [pc, #148]	; (8028894 <tos_StartScreen_Init+0xa4>)
 8028800:	2200      	movs	r2, #0
 8028802:	805a      	strh	r2, [r3, #2]
	style_screen.body.grad_color = LV_COLOR_BLACK;
 8028804:	4b23      	ldr	r3, [pc, #140]	; (8028894 <tos_StartScreen_Init+0xa4>)
 8028806:	2200      	movs	r2, #0
 8028808:	809a      	strh	r2, [r3, #4]
	style_screen.text.color = lv_color_make(68,133,247);
 802880a:	4c22      	ldr	r4, [pc, #136]	; (8028894 <tos_StartScreen_Init+0xa4>)
 802880c:	22f7      	movs	r2, #247	; 0xf7
 802880e:	2185      	movs	r1, #133	; 0x85
 8028810:	2044      	movs	r0, #68	; 0x44
 8028812:	f7ff ff9b 	bl	802874c <lv_color_make>
 8028816:	8420      	strh	r0, [r4, #32]
	style_screen.text.font = &lv_font_roboto_28;
 8028818:	4b1e      	ldr	r3, [pc, #120]	; (8028894 <tos_StartScreen_Init+0xa4>)
 802881a:	4a1f      	ldr	r2, [pc, #124]	; (8028898 <tos_StartScreen_Init+0xa8>)
 802881c:	625a      	str	r2, [r3, #36]	; 0x24
	lv_obj_set_style(lv_scr_act(), &style_screen);
 802881e:	f7ff ffcd 	bl	80287bc <lv_scr_act>
 8028822:	4603      	mov	r3, r0
 8028824:	491b      	ldr	r1, [pc, #108]	; (8028894 <tos_StartScreen_Init+0xa4>)
 8028826:	4618      	mov	r0, r3
 8028828:	f7e1 fc9f 	bl	800a16a <lv_obj_set_style>

	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802882c:	f7ff ffc6 	bl	80287bc <lv_scr_act>
 8028830:	4603      	mov	r3, r0
 8028832:	2100      	movs	r1, #0
 8028834:	4618      	mov	r0, r3
 8028836:	f7f3 fd7f 	bl	801c338 <lv_img_create>
 802883a:	6078      	str	r0, [r7, #4]
	lv_img_set_src(img1, &tos75x75);
 802883c:	4917      	ldr	r1, [pc, #92]	; (802889c <tos_StartScreen_Init+0xac>)
 802883e:	6878      	ldr	r0, [r7, #4]
 8028840:	f7f3 fe18 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 8028844:	f06f 0313 	mvn.w	r3, #19
 8028848:	9300      	str	r3, [sp, #0]
 802884a:	2300      	movs	r3, #0
 802884c:	2200      	movs	r2, #0
 802884e:	2100      	movs	r1, #0
 8028850:	6878      	ldr	r0, [r7, #4]
 8028852:	f7e0 ffe5 	bl	8009820 <lv_obj_align>

	lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 8028856:	f7ff ffb1 	bl	80287bc <lv_scr_act>
 802885a:	4603      	mov	r3, r0
 802885c:	2100      	movs	r1, #0
 802885e:	4618      	mov	r0, r3
 8028860:	f7f4 f8f6 	bl	801ca50 <lv_label_create>
 8028864:	6038      	str	r0, [r7, #0]
 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 8028866:	4a0b      	ldr	r2, [pc, #44]	; (8028894 <tos_StartScreen_Init+0xa4>)
 8028868:	2100      	movs	r1, #0
 802886a:	6838      	ldr	r0, [r7, #0]
 802886c:	f7ff ffb1 	bl	80287d2 <lv_label_set_style>
 	lv_label_set_text(tosLbl, "tOSbaga fsw 1.0");
 8028870:	490b      	ldr	r1, [pc, #44]	; (80288a0 <tos_StartScreen_Init+0xb0>)
 8028872:	6838      	ldr	r0, [r7, #0]
 8028874:	f7f4 fa1e 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8028878:	2332      	movs	r3, #50	; 0x32
 802887a:	9300      	str	r3, [sp, #0]
 802887c:	2300      	movs	r3, #0
 802887e:	2200      	movs	r2, #0
 8028880:	2100      	movs	r1, #0
 8028882:	6838      	ldr	r0, [r7, #0]
 8028884:	f7e0 ffcc 	bl	8009820 <lv_obj_align>
}
 8028888:	bf00      	nop
 802888a:	370c      	adds	r7, #12
 802888c:	46bd      	mov	sp, r7
 802888e:	bd90      	pop	{r4, r7, pc}
 8028890:	2001ba40 	.word	0x2001ba40
 8028894:	2001b380 	.word	0x2001b380
 8028898:	20002398 	.word	0x20002398
 802889c:	080487e4 	.word	0x080487e4
 80288a0:	0802db10 	.word	0x0802db10

080288a4 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80288a4:	b480      	push	{r7}
 80288a6:	b085      	sub	sp, #20
 80288a8:	af00      	add	r7, sp, #0
 80288aa:	4603      	mov	r3, r0
 80288ac:	71fb      	strb	r3, [r7, #7]
 80288ae:	460b      	mov	r3, r1
 80288b0:	71bb      	strb	r3, [r7, #6]
 80288b2:	4613      	mov	r3, r2
 80288b4:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80288b6:	79bb      	ldrb	r3, [r7, #6]
 80288b8:	095b      	lsrs	r3, r3, #5
 80288ba:	b2db      	uxtb	r3, r3
 80288bc:	f003 0307 	and.w	r3, r3, #7
 80288c0:	b2da      	uxtb	r2, r3
 80288c2:	7b3b      	ldrb	r3, [r7, #12]
 80288c4:	f362 0302 	bfi	r3, r2, #0, #3
 80288c8:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80288ca:	79fb      	ldrb	r3, [r7, #7]
 80288cc:	08db      	lsrs	r3, r3, #3
 80288ce:	b2db      	uxtb	r3, r3
 80288d0:	f003 031f 	and.w	r3, r3, #31
 80288d4:	b2da      	uxtb	r2, r3
 80288d6:	7b3b      	ldrb	r3, [r7, #12]
 80288d8:	f362 03c7 	bfi	r3, r2, #3, #5
 80288dc:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80288de:	797b      	ldrb	r3, [r7, #5]
 80288e0:	08db      	lsrs	r3, r3, #3
 80288e2:	b2db      	uxtb	r3, r3
 80288e4:	f003 031f 	and.w	r3, r3, #31
 80288e8:	b2da      	uxtb	r2, r3
 80288ea:	7b7b      	ldrb	r3, [r7, #13]
 80288ec:	f362 0304 	bfi	r3, r2, #0, #5
 80288f0:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80288f2:	79bb      	ldrb	r3, [r7, #6]
 80288f4:	089b      	lsrs	r3, r3, #2
 80288f6:	b2db      	uxtb	r3, r3
 80288f8:	f003 0307 	and.w	r3, r3, #7
 80288fc:	b2da      	uxtb	r2, r3
 80288fe:	7b7b      	ldrb	r3, [r7, #13]
 8028900:	f362 1347 	bfi	r3, r2, #5, #3
 8028904:	737b      	strb	r3, [r7, #13]
    return color;
 8028906:	89bb      	ldrh	r3, [r7, #12]
}
 8028908:	4618      	mov	r0, r3
 802890a:	3714      	adds	r7, #20
 802890c:	46bd      	mov	sp, r7
 802890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028912:	4770      	bx	lr

08028914 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8028914:	b580      	push	{r7, lr}
 8028916:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8028918:	f7ed f8e4 	bl	8015ae4 <lv_disp_get_default>
 802891c:	4603      	mov	r3, r0
 802891e:	4618      	mov	r0, r3
 8028920:	f7df fdac 	bl	800847c <lv_disp_get_scr_act>
 8028924:	4603      	mov	r3, r0
}
 8028926:	4618      	mov	r0, r3
 8028928:	bd80      	pop	{r7, pc}

0802892a <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802892a:	b580      	push	{r7, lr}
 802892c:	b084      	sub	sp, #16
 802892e:	af00      	add	r7, sp, #0
 8028930:	60f8      	str	r0, [r7, #12]
 8028932:	460b      	mov	r3, r1
 8028934:	607a      	str	r2, [r7, #4]
 8028936:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8028938:	6879      	ldr	r1, [r7, #4]
 802893a:	68f8      	ldr	r0, [r7, #12]
 802893c:	f7e1 fc15 	bl	800a16a <lv_obj_set_style>
}
 8028940:	bf00      	nop
 8028942:	3710      	adds	r7, #16
 8028944:	46bd      	mov	sp, r7
 8028946:	bd80      	pop	{r7, pc}

08028948 <tos_StepAndKcalScreen_Init>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void tos_StepAndKcalScreen_Init(bool unitType, bool theme){
 8028948:	b580      	push	{r7, lr}
 802894a:	b082      	sub	sp, #8
 802894c:	af00      	add	r7, sp, #0
 802894e:	4603      	mov	r3, r0
 8028950:	460a      	mov	r2, r1
 8028952:	71fb      	strb	r3, [r7, #7]
 8028954:	4613      	mov	r3, r2
 8028956:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 8028958:	f7ff ffdc 	bl	8028914 <lv_scr_act>
 802895c:	4603      	mov	r3, r0
 802895e:	4618      	mov	r0, r3
 8028960:	f7e0 fcec 	bl	800933c <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 8028964:	4928      	ldr	r1, [pc, #160]	; (8028a08 <tos_StepAndKcalScreen_Init+0xc0>)
 8028966:	4829      	ldr	r0, [pc, #164]	; (8028a0c <tos_StepAndKcalScreen_Init+0xc4>)
 8028968:	f7e3 f99e 	bl	800bca8 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 802896c:	4b27      	ldr	r3, [pc, #156]	; (8028a0c <tos_StepAndKcalScreen_Init+0xc4>)
 802896e:	4a28      	ldr	r2, [pc, #160]	; (8028a10 <tos_StepAndKcalScreen_Init+0xc8>)
 8028970:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 8028972:	4a26      	ldr	r2, [pc, #152]	; (8028a0c <tos_StepAndKcalScreen_Init+0xc4>)
 8028974:	4b27      	ldr	r3, [pc, #156]	; (8028a14 <tos_StepAndKcalScreen_Init+0xcc>)
 8028976:	881b      	ldrh	r3, [r3, #0]
 8028978:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 802897a:	4923      	ldr	r1, [pc, #140]	; (8028a08 <tos_StepAndKcalScreen_Init+0xc0>)
 802897c:	4826      	ldr	r0, [pc, #152]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 802897e:	f7e3 f993 	bl	800bca8 <lv_style_copy>
	if(theme){
 8028982:	79bb      	ldrb	r3, [r7, #6]
 8028984:	2b00      	cmp	r3, #0
 8028986:	d00a      	beq.n	802899e <tos_StepAndKcalScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8028988:	4b23      	ldr	r3, [pc, #140]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 802898a:	2200      	movs	r2, #0
 802898c:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 802898e:	4b22      	ldr	r3, [pc, #136]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 8028990:	2200      	movs	r2, #0
 8028992:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8028994:	4a1d      	ldr	r2, [pc, #116]	; (8028a0c <tos_StepAndKcalScreen_Init+0xc4>)
 8028996:	4b21      	ldr	r3, [pc, #132]	; (8028a1c <tos_StepAndKcalScreen_Init+0xd4>)
 8028998:	881b      	ldrh	r3, [r3, #0]
 802899a:	8413      	strh	r3, [r2, #32]
 802899c:	e00b      	b.n	80289b6 <tos_StepAndKcalScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802899e:	4a1e      	ldr	r2, [pc, #120]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 80289a0:	4b1f      	ldr	r3, [pc, #124]	; (8028a20 <tos_StepAndKcalScreen_Init+0xd8>)
 80289a2:	881b      	ldrh	r3, [r3, #0]
 80289a4:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 80289a6:	4a1c      	ldr	r2, [pc, #112]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 80289a8:	4b1d      	ldr	r3, [pc, #116]	; (8028a20 <tos_StepAndKcalScreen_Init+0xd8>)
 80289aa:	881b      	ldrh	r3, [r3, #0]
 80289ac:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 80289ae:	4a17      	ldr	r2, [pc, #92]	; (8028a0c <tos_StepAndKcalScreen_Init+0xc4>)
 80289b0:	4b1a      	ldr	r3, [pc, #104]	; (8028a1c <tos_StepAndKcalScreen_Init+0xd4>)
 80289b2:	881b      	ldrh	r3, [r3, #0]
 80289b4:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 80289b6:	f7ff ffad 	bl	8028914 <lv_scr_act>
 80289ba:	4603      	mov	r3, r0
 80289bc:	4916      	ldr	r1, [pc, #88]	; (8028a18 <tos_StepAndKcalScreen_Init+0xd0>)
 80289be:	4618      	mov	r0, r3
 80289c0:	f7e1 fbd3 	bl	800a16a <lv_obj_set_style>

	SAK_unitType=unitType;
 80289c4:	4a17      	ldr	r2, [pc, #92]	; (8028a24 <tos_StepAndKcalScreen_Init+0xdc>)
 80289c6:	79fb      	ldrb	r3, [r7, #7]
 80289c8:	7013      	strb	r3, [r2, #0]
	SAK_buffTmp="null";
 80289ca:	4b17      	ldr	r3, [pc, #92]	; (8028a28 <tos_StepAndKcalScreen_Init+0xe0>)
 80289cc:	4a17      	ldr	r2, [pc, #92]	; (8028a2c <tos_StepAndKcalScreen_Init+0xe4>)
 80289ce:	601a      	str	r2, [r3, #0]

	StepAndKcal_Steps(theme);
 80289d0:	79bb      	ldrb	r3, [r7, #6]
 80289d2:	4618      	mov	r0, r3
 80289d4:	f000 f830 	bl	8028a38 <StepAndKcal_Steps>
	StepAndKcal_kCals(theme);
 80289d8:	79bb      	ldrb	r3, [r7, #6]
 80289da:	4618      	mov	r0, r3
 80289dc:	f000 f8e4 	bl	8028ba8 <StepAndKcal_kCals>
	StepAndKcal_Distances(unitType,theme);
 80289e0:	79ba      	ldrb	r2, [r7, #6]
 80289e2:	79fb      	ldrb	r3, [r7, #7]
 80289e4:	4611      	mov	r1, r2
 80289e6:	4618      	mov	r0, r3
 80289e8:	f000 f996 	bl	8028d18 <StepAndKcal_Distances>
	SAk_taskController=true;
 80289ec:	4b10      	ldr	r3, [pc, #64]	; (8028a30 <tos_StepAndKcalScreen_Init+0xe8>)
 80289ee:	2201      	movs	r2, #1
 80289f0:	701a      	strb	r2, [r3, #0]
	lv_task_create(SAK_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 80289f2:	2300      	movs	r3, #0
 80289f4:	2201      	movs	r2, #1
 80289f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80289fa:	480e      	ldr	r0, [pc, #56]	; (8028a34 <tos_StepAndKcalScreen_Init+0xec>)
 80289fc:	f7ee fcb6 	bl	801736c <lv_task_create>
}
 8028a00:	bf00      	nop
 8028a02:	3708      	adds	r7, #8
 8028a04:	46bd      	mov	sp, r7
 8028a06:	bd80      	pop	{r7, pc}
 8028a08:	2001ba40 	.word	0x2001ba40
 8028a0c:	2001b3f8 	.word	0x2001b3f8
 8028a10:	200026d0 	.word	0x200026d0
 8028a14:	0802db28 	.word	0x0802db28
 8028a18:	2001b3bc 	.word	0x2001b3bc
 8028a1c:	0802db2c 	.word	0x0802db2c
 8028a20:	0802db30 	.word	0x0802db30
 8028a24:	2001bf28 	.word	0x2001bf28
 8028a28:	2001befc 	.word	0x2001befc
 8028a2c:	0802db20 	.word	0x0802db20
 8028a30:	2001bf20 	.word	0x2001bf20
 8028a34:	08028e99 	.word	0x08028e99

08028a38 <StepAndKcal_Steps>:
/* This function using for initiation steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Steps(bool theme){
 8028a38:	b590      	push	{r4, r7, lr}
 8028a3a:	b087      	sub	sp, #28
 8028a3c:	af02      	add	r7, sp, #8
 8028a3e:	4603      	mov	r3, r0
 8028a40:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8028a42:	f7ff ff67 	bl	8028914 <lv_scr_act>
 8028a46:	4603      	mov	r3, r0
 8028a48:	2100      	movs	r1, #0
 8028a4a:	4618      	mov	r0, r3
 8028a4c:	f7f3 fc74 	bl	801c338 <lv_img_create>
 8028a50:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8028a52:	79fb      	ldrb	r3, [r7, #7]
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	d004      	beq.n	8028a62 <StepAndKcal_Steps+0x2a>
 8028a58:	4949      	ldr	r1, [pc, #292]	; (8028b80 <StepAndKcal_Steps+0x148>)
 8028a5a:	68f8      	ldr	r0, [r7, #12]
 8028a5c:	f7f3 fd0a 	bl	801c474 <lv_img_set_src>
 8028a60:	e003      	b.n	8028a6a <StepAndKcal_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8028a62:	4948      	ldr	r1, [pc, #288]	; (8028b84 <StepAndKcal_Steps+0x14c>)
 8028a64:	68f8      	ldr	r0, [r7, #12]
 8028a66:	f7f3 fd05 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -83);
 8028a6a:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8028a6e:	9300      	str	r3, [sp, #0]
 8028a70:	2300      	movs	r3, #0
 8028a72:	2200      	movs	r2, #0
 8028a74:	2100      	movs	r1, #0
 8028a76:	68f8      	ldr	r0, [r7, #12]
 8028a78:	f7e0 fed2 	bl	8009820 <lv_obj_align>

   	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8028a7c:	f7ff ff4a 	bl	8028914 <lv_scr_act>
 8028a80:	4603      	mov	r3, r0
 8028a82:	2100      	movs	r1, #0
 8028a84:	4618      	mov	r0, r3
 8028a86:	f7f3 ffe3 	bl	801ca50 <lv_label_create>
 8028a8a:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8028a8c:	4a3e      	ldr	r2, [pc, #248]	; (8028b88 <StepAndKcal_Steps+0x150>)
 8028a8e:	2100      	movs	r1, #0
 8028a90:	68b8      	ldr	r0, [r7, #8]
 8028a92:	f7ff ff4a 	bl	802892a <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8028a96:	493d      	ldr	r1, [pc, #244]	; (8028b8c <StepAndKcal_Steps+0x154>)
 8028a98:	68b8      	ldr	r0, [r7, #8]
 8028a9a:	f7f4 f90b 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, -9);
 8028a9e:	f06f 0308 	mvn.w	r3, #8
 8028aa2:	9300      	str	r3, [sp, #0]
 8028aa4:	2300      	movs	r3, #0
 8028aa6:	2200      	movs	r2, #0
 8028aa8:	2100      	movs	r1, #0
 8028aaa:	68b8      	ldr	r0, [r7, #8]
 8028aac:	f7e0 feb8 	bl	8009820 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 8028ab0:	4937      	ldr	r1, [pc, #220]	; (8028b90 <StepAndKcal_Steps+0x158>)
 8028ab2:	4838      	ldr	r0, [pc, #224]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028ab4:	f7e3 f8f8 	bl	800bca8 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8028ab8:	4c36      	ldr	r4, [pc, #216]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028aba:	2235      	movs	r2, #53	; 0x35
 8028abc:	21cc      	movs	r1, #204	; 0xcc
 8028abe:	2065      	movs	r0, #101	; 0x65
 8028ac0:	f7ff fef0 	bl	80288a4 <lv_color_make>
 8028ac4:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8028ac6:	4b33      	ldr	r3, [pc, #204]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028ac8:	2203      	movs	r2, #3
 8028aca:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8028acc:	4c31      	ldr	r4, [pc, #196]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028ace:	2235      	movs	r2, #53	; 0x35
 8028ad0:	21cc      	movs	r1, #204	; 0xcc
 8028ad2:	2065      	movs	r0, #101	; 0x65
 8028ad4:	f7ff fee6 	bl	80288a4 <lv_color_make>
 8028ad8:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8028ada:	4b2e      	ldr	r3, [pc, #184]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028adc:	4a2e      	ldr	r2, [pc, #184]	; (8028b98 <StepAndKcal_Steps+0x160>)
 8028ade:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    SAK_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8028ae0:	f7ff ff18 	bl	8028914 <lv_scr_act>
 8028ae4:	4603      	mov	r3, r0
 8028ae6:	2100      	movs	r1, #0
 8028ae8:	4618      	mov	r0, r3
 8028aea:	f7ef f9af 	bl	8017e4c <lv_arc_create>
 8028aee:	4602      	mov	r2, r0
 8028af0:	4b2a      	ldr	r3, [pc, #168]	; (8028b9c <StepAndKcal_Steps+0x164>)
 8028af2:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_stepsArc, 65, 65);
 8028af4:	4b29      	ldr	r3, [pc, #164]	; (8028b9c <StepAndKcal_Steps+0x164>)
 8028af6:	681b      	ldr	r3, [r3, #0]
 8028af8:	2241      	movs	r2, #65	; 0x41
 8028afa:	2141      	movs	r1, #65	; 0x41
 8028afc:	4618      	mov	r0, r3
 8028afe:	f7e0 fdec 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(SAK_stepsArc, 0, 360);
 8028b02:	4b26      	ldr	r3, [pc, #152]	; (8028b9c <StepAndKcal_Steps+0x164>)
 8028b04:	681b      	ldr	r3, [r3, #0]
 8028b06:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8028b0a:	2100      	movs	r1, #0
 8028b0c:	4618      	mov	r0, r3
 8028b0e:	f7ef fa19 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(SAK_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8028b12:	4b22      	ldr	r3, [pc, #136]	; (8028b9c <StepAndKcal_Steps+0x164>)
 8028b14:	681b      	ldr	r3, [r3, #0]
 8028b16:	4a1f      	ldr	r2, [pc, #124]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028b18:	2100      	movs	r1, #0
 8028b1a:	4618      	mov	r0, r3
 8028b1c:	f7ef fa3b 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(SAK_stepsArc, NULL, LV_ALIGN_CENTER, 0, -83);
 8028b20:	4b1e      	ldr	r3, [pc, #120]	; (8028b9c <StepAndKcal_Steps+0x164>)
 8028b22:	6818      	ldr	r0, [r3, #0]
 8028b24:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8028b28:	9300      	str	r3, [sp, #0]
 8028b2a:	2300      	movs	r3, #0
 8028b2c:	2200      	movs	r2, #0
 8028b2e:	2100      	movs	r1, #0
 8028b30:	f7e0 fe76 	bl	8009820 <lv_obj_align>

    SAK_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8028b34:	f7ff feee 	bl	8028914 <lv_scr_act>
 8028b38:	4603      	mov	r3, r0
 8028b3a:	2100      	movs	r1, #0
 8028b3c:	4618      	mov	r0, r3
 8028b3e:	f7f3 ff87 	bl	801ca50 <lv_label_create>
 8028b42:	4602      	mov	r2, r0
 8028b44:	4b16      	ldr	r3, [pc, #88]	; (8028ba0 <StepAndKcal_Steps+0x168>)
 8028b46:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(SAK_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8028b48:	4b15      	ldr	r3, [pc, #84]	; (8028ba0 <StepAndKcal_Steps+0x168>)
 8028b4a:	681b      	ldr	r3, [r3, #0]
 8028b4c:	4a11      	ldr	r2, [pc, #68]	; (8028b94 <StepAndKcal_Steps+0x15c>)
 8028b4e:	2100      	movs	r1, #0
 8028b50:	4618      	mov	r0, r3
 8028b52:	f7ff feea 	bl	802892a <lv_label_set_style>
   	lv_label_set_text(SAK_stepsLbl, "0000");
 8028b56:	4b12      	ldr	r3, [pc, #72]	; (8028ba0 <StepAndKcal_Steps+0x168>)
 8028b58:	681b      	ldr	r3, [r3, #0]
 8028b5a:	4912      	ldr	r1, [pc, #72]	; (8028ba4 <StepAndKcal_Steps+0x16c>)
 8028b5c:	4618      	mov	r0, r3
 8028b5e:	f7f4 f8a9 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 8028b62:	4b0f      	ldr	r3, [pc, #60]	; (8028ba0 <StepAndKcal_Steps+0x168>)
 8028b64:	6818      	ldr	r0, [r3, #0]
 8028b66:	f06f 031d 	mvn.w	r3, #29
 8028b6a:	9300      	str	r3, [sp, #0]
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	2200      	movs	r2, #0
 8028b70:	2100      	movs	r1, #0
 8028b72:	f7e0 fe55 	bl	8009820 <lv_obj_align>
}
 8028b76:	bf00      	nop
 8028b78:	3714      	adds	r7, #20
 8028b7a:	46bd      	mov	sp, r7
 8028b7c:	bd90      	pop	{r4, r7, pc}
 8028b7e:	bf00      	nop
 8028b80:	08042b80 	.word	0x08042b80
 8028b84:	080434bc 	.word	0x080434bc
 8028b88:	2001b3f8 	.word	0x2001b3f8
 8028b8c:	0802db34 	.word	0x0802db34
 8028b90:	2001ba40 	.word	0x2001ba40
 8028b94:	2001b434 	.word	0x2001b434
 8028b98:	200027ec 	.word	0x200027ec
 8028b9c:	2001bef8 	.word	0x2001bef8
 8028ba0:	2001bf1c 	.word	0x2001bf1c
 8028ba4:	0802db3c 	.word	0x0802db3c

08028ba8 <StepAndKcal_kCals>:
/* This function using for initiation kCals Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_kCals(bool theme){
 8028ba8:	b590      	push	{r4, r7, lr}
 8028baa:	b087      	sub	sp, #28
 8028bac:	af02      	add	r7, sp, #8
 8028bae:	4603      	mov	r3, r0
 8028bb0:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8028bb2:	f7ff feaf 	bl	8028914 <lv_scr_act>
 8028bb6:	4603      	mov	r3, r0
 8028bb8:	2100      	movs	r1, #0
 8028bba:	4618      	mov	r0, r3
 8028bbc:	f7f3 fbbc 	bl	801c338 <lv_img_create>
 8028bc0:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 8028bc2:	79fb      	ldrb	r3, [r7, #7]
 8028bc4:	2b00      	cmp	r3, #0
 8028bc6:	d004      	beq.n	8028bd2 <StepAndKcal_kCals+0x2a>
 8028bc8:	4949      	ldr	r1, [pc, #292]	; (8028cf0 <StepAndKcal_kCals+0x148>)
 8028bca:	68f8      	ldr	r0, [r7, #12]
 8028bcc:	f7f3 fc52 	bl	801c474 <lv_img_set_src>
 8028bd0:	e003      	b.n	8028bda <StepAndKcal_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 8028bd2:	4948      	ldr	r1, [pc, #288]	; (8028cf4 <StepAndKcal_kCals+0x14c>)
 8028bd4:	68f8      	ldr	r0, [r7, #12]
 8028bd6:	f7f3 fc4d 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -60, 37);
 8028bda:	2325      	movs	r3, #37	; 0x25
 8028bdc:	9300      	str	r3, [sp, #0]
 8028bde:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8028be2:	2200      	movs	r2, #0
 8028be4:	2100      	movs	r1, #0
 8028be6:	68f8      	ldr	r0, [r7, #12]
 8028be8:	f7e0 fe1a 	bl	8009820 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 8028bec:	4942      	ldr	r1, [pc, #264]	; (8028cf8 <StepAndKcal_kCals+0x150>)
 8028bee:	4843      	ldr	r0, [pc, #268]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028bf0:	f7e3 f85a 	bl	800bca8 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8028bf4:	4c41      	ldr	r4, [pc, #260]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028bf6:	2269      	movs	r2, #105	; 0x69
 8028bf8:	21cd      	movs	r1, #205	; 0xcd
 8028bfa:	20ff      	movs	r0, #255	; 0xff
 8028bfc:	f7ff fe52 	bl	80288a4 <lv_color_make>
 8028c00:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 8028c02:	4b3e      	ldr	r3, [pc, #248]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028c04:	2203      	movs	r2, #3
 8028c06:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 8028c08:	4c3c      	ldr	r4, [pc, #240]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028c0a:	2269      	movs	r2, #105	; 0x69
 8028c0c:	21cd      	movs	r1, #205	; 0xcd
 8028c0e:	20ff      	movs	r0, #255	; 0xff
 8028c10:	f7ff fe48 	bl	80288a4 <lv_color_make>
 8028c14:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8028c16:	4b39      	ldr	r3, [pc, #228]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028c18:	4a39      	ldr	r2, [pc, #228]	; (8028d00 <StepAndKcal_kCals+0x158>)
 8028c1a:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8028c1c:	f7ff fe7a 	bl	8028914 <lv_scr_act>
 8028c20:	4603      	mov	r3, r0
 8028c22:	2100      	movs	r1, #0
 8028c24:	4618      	mov	r0, r3
 8028c26:	f7f3 ff13 	bl	801ca50 <lv_label_create>
 8028c2a:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8028c2c:	4a35      	ldr	r2, [pc, #212]	; (8028d04 <StepAndKcal_kCals+0x15c>)
 8028c2e:	2100      	movs	r1, #0
 8028c30:	68b8      	ldr	r0, [r7, #8]
 8028c32:	f7ff fe7a 	bl	802892a <lv_label_set_style>
   	lv_label_set_text(kCalsDescLbl, "kCals");
 8028c36:	4934      	ldr	r1, [pc, #208]	; (8028d08 <StepAndKcal_kCals+0x160>)
 8028c38:	68b8      	ldr	r0, [r7, #8]
 8028c3a:	f7f4 f83b 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, -60, 111);
 8028c3e:	236f      	movs	r3, #111	; 0x6f
 8028c40:	9300      	str	r3, [sp, #0]
 8028c42:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8028c46:	2200      	movs	r2, #0
 8028c48:	2100      	movs	r1, #0
 8028c4a:	68b8      	ldr	r0, [r7, #8]
 8028c4c:	f7e0 fde8 	bl	8009820 <lv_obj_align>

    //Dynamic objs
    SAK_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8028c50:	f7ff fe60 	bl	8028914 <lv_scr_act>
 8028c54:	4603      	mov	r3, r0
 8028c56:	2100      	movs	r1, #0
 8028c58:	4618      	mov	r0, r3
 8028c5a:	f7ef f8f7 	bl	8017e4c <lv_arc_create>
 8028c5e:	4602      	mov	r2, r0
 8028c60:	4b2a      	ldr	r3, [pc, #168]	; (8028d0c <StepAndKcal_kCals+0x164>)
 8028c62:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_kCalsArc, 80, 80);
 8028c64:	4b29      	ldr	r3, [pc, #164]	; (8028d0c <StepAndKcal_kCals+0x164>)
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	2250      	movs	r2, #80	; 0x50
 8028c6a:	2150      	movs	r1, #80	; 0x50
 8028c6c:	4618      	mov	r0, r3
 8028c6e:	f7e0 fd34 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(SAK_kCalsArc, 0, 360);
 8028c72:	4b26      	ldr	r3, [pc, #152]	; (8028d0c <StepAndKcal_kCals+0x164>)
 8028c74:	681b      	ldr	r3, [r3, #0]
 8028c76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8028c7a:	2100      	movs	r1, #0
 8028c7c:	4618      	mov	r0, r3
 8028c7e:	f7ef f961 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(SAK_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8028c82:	4b22      	ldr	r3, [pc, #136]	; (8028d0c <StepAndKcal_kCals+0x164>)
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	4a1d      	ldr	r2, [pc, #116]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028c88:	2100      	movs	r1, #0
 8028c8a:	4618      	mov	r0, r3
 8028c8c:	f7ef f983 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(SAK_kCalsArc, NULL, LV_ALIGN_CENTER,-60, 37);
 8028c90:	4b1e      	ldr	r3, [pc, #120]	; (8028d0c <StepAndKcal_kCals+0x164>)
 8028c92:	6818      	ldr	r0, [r3, #0]
 8028c94:	2325      	movs	r3, #37	; 0x25
 8028c96:	9300      	str	r3, [sp, #0]
 8028c98:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8028c9c:	2200      	movs	r2, #0
 8028c9e:	2100      	movs	r1, #0
 8028ca0:	f7e0 fdbe 	bl	8009820 <lv_obj_align>

    SAK_kcalsLbl = lv_label_create(lv_scr_act(), NULL);
 8028ca4:	f7ff fe36 	bl	8028914 <lv_scr_act>
 8028ca8:	4603      	mov	r3, r0
 8028caa:	2100      	movs	r1, #0
 8028cac:	4618      	mov	r0, r3
 8028cae:	f7f3 fecf 	bl	801ca50 <lv_label_create>
 8028cb2:	4602      	mov	r2, r0
 8028cb4:	4b16      	ldr	r3, [pc, #88]	; (8028d10 <StepAndKcal_kCals+0x168>)
 8028cb6:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_kcalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8028cb8:	4b15      	ldr	r3, [pc, #84]	; (8028d10 <StepAndKcal_kCals+0x168>)
 8028cba:	681b      	ldr	r3, [r3, #0]
 8028cbc:	4a0f      	ldr	r2, [pc, #60]	; (8028cfc <StepAndKcal_kCals+0x154>)
 8028cbe:	2100      	movs	r1, #0
 8028cc0:	4618      	mov	r0, r3
 8028cc2:	f7ff fe32 	bl	802892a <lv_label_set_style>
   	lv_label_set_text(SAK_kcalsLbl, "0000");
 8028cc6:	4b12      	ldr	r3, [pc, #72]	; (8028d10 <StepAndKcal_kCals+0x168>)
 8028cc8:	681b      	ldr	r3, [r3, #0]
 8028cca:	4912      	ldr	r1, [pc, #72]	; (8028d14 <StepAndKcal_kCals+0x16c>)
 8028ccc:	4618      	mov	r0, r3
 8028cce:	f7f3 fff1 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 8028cd2:	4b0f      	ldr	r3, [pc, #60]	; (8028d10 <StepAndKcal_kCals+0x168>)
 8028cd4:	6818      	ldr	r0, [r3, #0]
 8028cd6:	235a      	movs	r3, #90	; 0x5a
 8028cd8:	9300      	str	r3, [sp, #0]
 8028cda:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8028cde:	2200      	movs	r2, #0
 8028ce0:	2100      	movs	r1, #0
 8028ce2:	f7e0 fd9d 	bl	8009820 <lv_obj_align>
}
 8028ce6:	bf00      	nop
 8028ce8:	3714      	adds	r7, #20
 8028cea:	46bd      	mov	sp, r7
 8028cec:	bd90      	pop	{r4, r7, pc}
 8028cee:	bf00      	nop
 8028cf0:	0803b840 	.word	0x0803b840
 8028cf4:	0803c17c 	.word	0x0803c17c
 8028cf8:	2001ba40 	.word	0x2001ba40
 8028cfc:	2001b470 	.word	0x2001b470
 8028d00:	200027ec 	.word	0x200027ec
 8028d04:	2001b3f8 	.word	0x2001b3f8
 8028d08:	0802db44 	.word	0x0802db44
 8028d0c:	2001bf24 	.word	0x2001bf24
 8028d10:	2001bf00 	.word	0x2001bf00
 8028d14:	0802db3c 	.word	0x0802db3c

08028d18 <StepAndKcal_Distances>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Distances(bool unitType,bool theme){
 8028d18:	b590      	push	{r4, r7, lr}
 8028d1a:	b087      	sub	sp, #28
 8028d1c:	af02      	add	r7, sp, #8
 8028d1e:	4603      	mov	r3, r0
 8028d20:	460a      	mov	r2, r1
 8028d22:	71fb      	strb	r3, [r7, #7]
 8028d24:	4613      	mov	r3, r2
 8028d26:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8028d28:	f7ff fdf4 	bl	8028914 <lv_scr_act>
 8028d2c:	4603      	mov	r3, r0
 8028d2e:	2100      	movs	r1, #0
 8028d30:	4618      	mov	r0, r3
 8028d32:	f7f3 fb01 	bl	801c338 <lv_img_create>
 8028d36:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 8028d38:	79bb      	ldrb	r3, [r7, #6]
 8028d3a:	2b00      	cmp	r3, #0
 8028d3c:	d004      	beq.n	8028d48 <StepAndKcal_Distances+0x30>
 8028d3e:	494b      	ldr	r1, [pc, #300]	; (8028e6c <StepAndKcal_Distances+0x154>)
 8028d40:	68f8      	ldr	r0, [r7, #12]
 8028d42:	f7f3 fb97 	bl	801c474 <lv_img_set_src>
 8028d46:	e003      	b.n	8028d50 <StepAndKcal_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 8028d48:	4949      	ldr	r1, [pc, #292]	; (8028e70 <StepAndKcal_Distances+0x158>)
 8028d4a:	68f8      	ldr	r0, [r7, #12]
 8028d4c:	f7f3 fb92 	bl	801c474 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 60, 37);
 8028d50:	2325      	movs	r3, #37	; 0x25
 8028d52:	9300      	str	r3, [sp, #0]
 8028d54:	233c      	movs	r3, #60	; 0x3c
 8028d56:	2200      	movs	r2, #0
 8028d58:	2100      	movs	r1, #0
 8028d5a:	68f8      	ldr	r0, [r7, #12]
 8028d5c:	f7e0 fd60 	bl	8009820 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8028d60:	4944      	ldr	r1, [pc, #272]	; (8028e74 <StepAndKcal_Distances+0x15c>)
 8028d62:	4845      	ldr	r0, [pc, #276]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028d64:	f7e2 ffa0 	bl	800bca8 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8028d68:	4c43      	ldr	r4, [pc, #268]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028d6a:	2220      	movs	r2, #32
 8028d6c:	2117      	movs	r1, #23
 8028d6e:	20d6      	movs	r0, #214	; 0xd6
 8028d70:	f7ff fd98 	bl	80288a4 <lv_color_make>
 8028d74:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8028d76:	4b40      	ldr	r3, [pc, #256]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028d78:	2203      	movs	r2, #3
 8028d7a:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 8028d7c:	4c3e      	ldr	r4, [pc, #248]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028d7e:	2220      	movs	r2, #32
 8028d80:	2117      	movs	r1, #23
 8028d82:	20d6      	movs	r0, #214	; 0xd6
 8028d84:	f7ff fd8e 	bl	80288a4 <lv_color_make>
 8028d88:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 8028d8a:	4b3b      	ldr	r3, [pc, #236]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028d8c:	4a3b      	ldr	r2, [pc, #236]	; (8028e7c <StepAndKcal_Distances+0x164>)
 8028d8e:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 8028d90:	f7ff fdc0 	bl	8028914 <lv_scr_act>
 8028d94:	4603      	mov	r3, r0
 8028d96:	2100      	movs	r1, #0
 8028d98:	4618      	mov	r0, r3
 8028d9a:	f7f3 fe59 	bl	801ca50 <lv_label_create>
 8028d9e:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8028da0:	4a37      	ldr	r2, [pc, #220]	; (8028e80 <StepAndKcal_Distances+0x168>)
 8028da2:	2100      	movs	r1, #0
 8028da4:	68b8      	ldr	r0, [r7, #8]
 8028da6:	f7ff fdc0 	bl	802892a <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 8028daa:	79fb      	ldrb	r3, [r7, #7]
 8028dac:	2b00      	cmp	r3, #0
 8028dae:	d004      	beq.n	8028dba <StepAndKcal_Distances+0xa2>
 8028db0:	4934      	ldr	r1, [pc, #208]	; (8028e84 <StepAndKcal_Distances+0x16c>)
 8028db2:	68b8      	ldr	r0, [r7, #8]
 8028db4:	f7f3 ff7e 	bl	801ccb4 <lv_label_set_text>
 8028db8:	e003      	b.n	8028dc2 <StepAndKcal_Distances+0xaa>
 	else lv_label_set_text(distDescLbl, "miles");
 8028dba:	4933      	ldr	r1, [pc, #204]	; (8028e88 <StepAndKcal_Distances+0x170>)
 8028dbc:	68b8      	ldr	r0, [r7, #8]
 8028dbe:	f7f3 ff79 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 60, 111);
 8028dc2:	236f      	movs	r3, #111	; 0x6f
 8028dc4:	9300      	str	r3, [sp, #0]
 8028dc6:	233c      	movs	r3, #60	; 0x3c
 8028dc8:	2200      	movs	r2, #0
 8028dca:	2100      	movs	r1, #0
 8028dcc:	68b8      	ldr	r0, [r7, #8]
 8028dce:	f7e0 fd27 	bl	8009820 <lv_obj_align>

    //Dynamic objs
    SAK_distancesArc = lv_arc_create(lv_scr_act(), NULL);
 8028dd2:	f7ff fd9f 	bl	8028914 <lv_scr_act>
 8028dd6:	4603      	mov	r3, r0
 8028dd8:	2100      	movs	r1, #0
 8028dda:	4618      	mov	r0, r3
 8028ddc:	f7ef f836 	bl	8017e4c <lv_arc_create>
 8028de0:	4602      	mov	r2, r0
 8028de2:	4b2a      	ldr	r3, [pc, #168]	; (8028e8c <StepAndKcal_Distances+0x174>)
 8028de4:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_distancesArc, 80, 80);
 8028de6:	4b29      	ldr	r3, [pc, #164]	; (8028e8c <StepAndKcal_Distances+0x174>)
 8028de8:	681b      	ldr	r3, [r3, #0]
 8028dea:	2250      	movs	r2, #80	; 0x50
 8028dec:	2150      	movs	r1, #80	; 0x50
 8028dee:	4618      	mov	r0, r3
 8028df0:	f7e0 fc73 	bl	80096da <lv_obj_set_size>
    lv_arc_set_angles(SAK_distancesArc, 0, 360);
 8028df4:	4b25      	ldr	r3, [pc, #148]	; (8028e8c <StepAndKcal_Distances+0x174>)
 8028df6:	681b      	ldr	r3, [r3, #0]
 8028df8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8028dfc:	2100      	movs	r1, #0
 8028dfe:	4618      	mov	r0, r3
 8028e00:	f7ef f8a0 	bl	8017f44 <lv_arc_set_angles>
    lv_arc_set_style(SAK_distancesArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8028e04:	4b21      	ldr	r3, [pc, #132]	; (8028e8c <StepAndKcal_Distances+0x174>)
 8028e06:	681b      	ldr	r3, [r3, #0]
 8028e08:	4a1b      	ldr	r2, [pc, #108]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028e0a:	2100      	movs	r1, #0
 8028e0c:	4618      	mov	r0, r3
 8028e0e:	f7ef f8c2 	bl	8017f96 <lv_arc_set_style>
    lv_obj_align(SAK_distancesArc, NULL, LV_ALIGN_CENTER, 60, 37);
 8028e12:	4b1e      	ldr	r3, [pc, #120]	; (8028e8c <StepAndKcal_Distances+0x174>)
 8028e14:	6818      	ldr	r0, [r3, #0]
 8028e16:	2325      	movs	r3, #37	; 0x25
 8028e18:	9300      	str	r3, [sp, #0]
 8028e1a:	233c      	movs	r3, #60	; 0x3c
 8028e1c:	2200      	movs	r2, #0
 8028e1e:	2100      	movs	r1, #0
 8028e20:	f7e0 fcfe 	bl	8009820 <lv_obj_align>

    SAK_distanceLbl = lv_label_create(lv_scr_act(), NULL);
 8028e24:	f7ff fd76 	bl	8028914 <lv_scr_act>
 8028e28:	4603      	mov	r3, r0
 8028e2a:	2100      	movs	r1, #0
 8028e2c:	4618      	mov	r0, r3
 8028e2e:	f7f3 fe0f 	bl	801ca50 <lv_label_create>
 8028e32:	4602      	mov	r2, r0
 8028e34:	4b16      	ldr	r3, [pc, #88]	; (8028e90 <StepAndKcal_Distances+0x178>)
 8028e36:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_distanceLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 8028e38:	4b15      	ldr	r3, [pc, #84]	; (8028e90 <StepAndKcal_Distances+0x178>)
 8028e3a:	681b      	ldr	r3, [r3, #0]
 8028e3c:	4a0e      	ldr	r2, [pc, #56]	; (8028e78 <StepAndKcal_Distances+0x160>)
 8028e3e:	2100      	movs	r1, #0
 8028e40:	4618      	mov	r0, r3
 8028e42:	f7ff fd72 	bl	802892a <lv_label_set_style>
   	lv_label_set_text(SAK_distanceLbl, "0000.00");
 8028e46:	4b12      	ldr	r3, [pc, #72]	; (8028e90 <StepAndKcal_Distances+0x178>)
 8028e48:	681b      	ldr	r3, [r3, #0]
 8028e4a:	4912      	ldr	r1, [pc, #72]	; (8028e94 <StepAndKcal_Distances+0x17c>)
 8028e4c:	4618      	mov	r0, r3
 8028e4e:	f7f3 ff31 	bl	801ccb4 <lv_label_set_text>
   	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 8028e52:	4b0f      	ldr	r3, [pc, #60]	; (8028e90 <StepAndKcal_Distances+0x178>)
 8028e54:	6818      	ldr	r0, [r3, #0]
 8028e56:	235a      	movs	r3, #90	; 0x5a
 8028e58:	9300      	str	r3, [sp, #0]
 8028e5a:	233c      	movs	r3, #60	; 0x3c
 8028e5c:	2200      	movs	r2, #0
 8028e5e:	2100      	movs	r1, #0
 8028e60:	f7e0 fcde 	bl	8009820 <lv_obj_align>
}
 8028e64:	bf00      	nop
 8028e66:	3714      	adds	r7, #20
 8028e68:	46bd      	mov	sp, r7
 8028e6a:	bd90      	pop	{r4, r7, pc}
 8028e6c:	0803cab8 	.word	0x0803cab8
 8028e70:	0803d3f4 	.word	0x0803d3f4
 8028e74:	2001ba40 	.word	0x2001ba40
 8028e78:	2001b4ac 	.word	0x2001b4ac
 8028e7c:	200027ec 	.word	0x200027ec
 8028e80:	2001b3f8 	.word	0x2001b3f8
 8028e84:	0802db4c 	.word	0x0802db4c
 8028e88:	0802db50 	.word	0x0802db50
 8028e8c:	2001bf18 	.word	0x2001bf18
 8028e90:	2001bf04 	.word	0x2001bf04
 8028e94:	0802db58 	.word	0x0802db58

08028e98 <SAK_Updater>:

//Update Functions
/*This function using for update all update functions*/
void SAK_Updater(lv_task_t *t){
 8028e98:	b580      	push	{r7, lr}
 8028e9a:	b082      	sub	sp, #8
 8028e9c:	af00      	add	r7, sp, #0
 8028e9e:	6078      	str	r0, [r7, #4]
	if(SAk_taskController){
 8028ea0:	4b08      	ldr	r3, [pc, #32]	; (8028ec4 <SAK_Updater+0x2c>)
 8028ea2:	781b      	ldrb	r3, [r3, #0]
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	d005      	beq.n	8028eb4 <SAK_Updater+0x1c>
		SAK_steps_angle_loader();
 8028ea8:	f000 f80e 	bl	8028ec8 <SAK_steps_angle_loader>
		SAK_kCals_angle_loader();
 8028eac:	f000 f898 	bl	8028fe0 <SAK_kCals_angle_loader>
		SAK_distances_angle_loader();
 8028eb0:	f000 f922 	bl	80290f8 <SAK_distances_angle_loader>
	}lv_task_del(t);
 8028eb4:	6878      	ldr	r0, [r7, #4]
 8028eb6:	f7ee fa91 	bl	80173dc <lv_task_del>
}
 8028eba:	bf00      	nop
 8028ebc:	3708      	adds	r7, #8
 8028ebe:	46bd      	mov	sp, r7
 8028ec0:	bd80      	pop	{r7, pc}
 8028ec2:	bf00      	nop
 8028ec4:	2001bf20 	.word	0x2001bf20

08028ec8 <SAK_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void SAK_steps_angle_loader(void)
{
 8028ec8:	b590      	push	{r4, r7, lr}
 8028eca:	b085      	sub	sp, #20
 8028ecc:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_steps);
 8028ece:	4b3c      	ldr	r3, [pc, #240]	; (8028fc0 <SAK_steps_angle_loader+0xf8>)
 8028ed0:	881b      	ldrh	r3, [r3, #0]
 8028ed2:	4a3c      	ldr	r2, [pc, #240]	; (8028fc4 <SAK_steps_angle_loader+0xfc>)
 8028ed4:	2108      	movs	r1, #8
 8028ed6:	483c      	ldr	r0, [pc, #240]	; (8028fc8 <SAK_steps_angle_loader+0x100>)
 8028ed8:	f002 f966 	bl	802b1a8 <sniprintf>
 		lv_label_set_text(SAK_stepsLbl, stepAndKcalBuffer);
 8028edc:	4b3b      	ldr	r3, [pc, #236]	; (8028fcc <SAK_steps_angle_loader+0x104>)
 8028ede:	681b      	ldr	r3, [r3, #0]
 8028ee0:	4939      	ldr	r1, [pc, #228]	; (8028fc8 <SAK_steps_angle_loader+0x100>)
 8028ee2:	4618      	mov	r0, r3
 8028ee4:	f7f3 fee6 	bl	801ccb4 <lv_label_set_text>
 		lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 8028ee8:	4b38      	ldr	r3, [pc, #224]	; (8028fcc <SAK_steps_angle_loader+0x104>)
 8028eea:	6818      	ldr	r0, [r3, #0]
 8028eec:	f06f 031d 	mvn.w	r3, #29
 8028ef0:	9300      	str	r3, [sp, #0]
 8028ef2:	2300      	movs	r3, #0
 8028ef4:	2200      	movs	r2, #0
 8028ef6:	2100      	movs	r1, #0
 8028ef8:	f7e0 fc92 	bl	8009820 <lv_obj_align>

 		if(SAK_steps<=10000){
 8028efc:	4b30      	ldr	r3, [pc, #192]	; (8028fc0 <SAK_steps_angle_loader+0xf8>)
 8028efe:	881b      	ldrh	r3, [r3, #0]
 8028f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8028f04:	4293      	cmp	r3, r2
 8028f06:	d84b      	bhi.n	8028fa0 <SAK_steps_angle_loader+0xd8>
 			double stepsTemp = tos_Ratio(SAK_steps, 0, 10000, 0, 359);
 8028f08:	4b2d      	ldr	r3, [pc, #180]	; (8028fc0 <SAK_steps_angle_loader+0xf8>)
 8028f0a:	881b      	ldrh	r3, [r3, #0]
 8028f0c:	4618      	mov	r0, r3
 8028f0e:	f7d7 fb09 	bl	8000524 <__aeabi_ui2d>
 8028f12:	4603      	mov	r3, r0
 8028f14:	460c      	mov	r4, r1
 8028f16:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8028fa8 <SAK_steps_angle_loader+0xe0>
 8028f1a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8028fb0 <SAK_steps_angle_loader+0xe8>
 8028f1e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8028fb8 <SAK_steps_angle_loader+0xf0>
 8028f22:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8028fb0 <SAK_steps_angle_loader+0xe8>
 8028f26:	ec44 3b10 	vmov	d0, r3, r4
 8028f2a:	f001 f969 	bl	802a200 <tos_Ratio>
 8028f2e:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(SAK_stepsArc, 180-stepsTemp ,180);
 8028f32:	f04f 0200 	mov.w	r2, #0
 8028f36:	4b26      	ldr	r3, [pc, #152]	; (8028fd0 <SAK_steps_angle_loader+0x108>)
 8028f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028f3c:	f7d7 fdde 	bl	8000afc <__aeabi_dcmplt>
 8028f40:	4603      	mov	r3, r0
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	d016      	beq.n	8028f74 <SAK_steps_angle_loader+0xac>
 8028f46:	4b23      	ldr	r3, [pc, #140]	; (8028fd4 <SAK_steps_angle_loader+0x10c>)
 8028f48:	681c      	ldr	r4, [r3, #0]
 8028f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028f4e:	f04f 0000 	mov.w	r0, #0
 8028f52:	491f      	ldr	r1, [pc, #124]	; (8028fd0 <SAK_steps_angle_loader+0x108>)
 8028f54:	f7d7 f9a8 	bl	80002a8 <__aeabi_dsub>
 8028f58:	4602      	mov	r2, r0
 8028f5a:	460b      	mov	r3, r1
 8028f5c:	4610      	mov	r0, r2
 8028f5e:	4619      	mov	r1, r3
 8028f60:	f7d7 fe0a 	bl	8000b78 <__aeabi_d2uiz>
 8028f64:	4603      	mov	r3, r0
 8028f66:	b29b      	uxth	r3, r3
 8028f68:	22b4      	movs	r2, #180	; 0xb4
 8028f6a:	4619      	mov	r1, r3
 8028f6c:	4620      	mov	r0, r4
 8028f6e:	f7ee ffe9 	bl	8017f44 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 		}
}
 8028f72:	e015      	b.n	8028fa0 <SAK_steps_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 8028f74:	4b17      	ldr	r3, [pc, #92]	; (8028fd4 <SAK_steps_angle_loader+0x10c>)
 8028f76:	681c      	ldr	r4, [r3, #0]
 8028f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028f7c:	f04f 0000 	mov.w	r0, #0
 8028f80:	4915      	ldr	r1, [pc, #84]	; (8028fd8 <SAK_steps_angle_loader+0x110>)
 8028f82:	f7d7 f991 	bl	80002a8 <__aeabi_dsub>
 8028f86:	4602      	mov	r2, r0
 8028f88:	460b      	mov	r3, r1
 8028f8a:	4610      	mov	r0, r2
 8028f8c:	4619      	mov	r1, r3
 8028f8e:	f7d7 fdf3 	bl	8000b78 <__aeabi_d2uiz>
 8028f92:	4603      	mov	r3, r0
 8028f94:	b29b      	uxth	r3, r3
 8028f96:	22b4      	movs	r2, #180	; 0xb4
 8028f98:	4619      	mov	r1, r3
 8028f9a:	4620      	mov	r0, r4
 8028f9c:	f7ee ffd2 	bl	8017f44 <lv_arc_set_angles>
}
 8028fa0:	bf00      	nop
 8028fa2:	370c      	adds	r7, #12
 8028fa4:	46bd      	mov	sp, r7
 8028fa6:	bd90      	pop	{r4, r7, pc}
 8028fa8:	00000000 	.word	0x00000000
 8028fac:	40767000 	.word	0x40767000
	...
 8028fbc:	40c38800 	.word	0x40c38800
 8028fc0:	2001bf22 	.word	0x2001bf22
 8028fc4:	0802db60 	.word	0x0802db60
 8028fc8:	2001bf2c 	.word	0x2001bf2c
 8028fcc:	2001bf1c 	.word	0x2001bf1c
 8028fd0:	40668000 	.word	0x40668000
 8028fd4:	2001bef8 	.word	0x2001bef8
 8028fd8:	4080e000 	.word	0x4080e000
 8028fdc:	00000000 	.word	0x00000000

08028fe0 <SAK_kCals_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_kCals_angle_loader(void)
{
 8028fe0:	b590      	push	{r4, r7, lr}
 8028fe2:	b085      	sub	sp, #20
 8028fe4:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_kCals);
 8028fe6:	4b3c      	ldr	r3, [pc, #240]	; (80290d8 <SAK_kCals_angle_loader+0xf8>)
 8028fe8:	881b      	ldrh	r3, [r3, #0]
 8028fea:	4a3c      	ldr	r2, [pc, #240]	; (80290dc <SAK_kCals_angle_loader+0xfc>)
 8028fec:	2108      	movs	r1, #8
 8028fee:	483c      	ldr	r0, [pc, #240]	; (80290e0 <SAK_kCals_angle_loader+0x100>)
 8028ff0:	f002 f8da 	bl	802b1a8 <sniprintf>
 		lv_label_set_text(SAK_kcalsLbl, stepAndKcalBuffer);
 8028ff4:	4b3b      	ldr	r3, [pc, #236]	; (80290e4 <SAK_kCals_angle_loader+0x104>)
 8028ff6:	681b      	ldr	r3, [r3, #0]
 8028ff8:	4939      	ldr	r1, [pc, #228]	; (80290e0 <SAK_kCals_angle_loader+0x100>)
 8028ffa:	4618      	mov	r0, r3
 8028ffc:	f7f3 fe5a 	bl	801ccb4 <lv_label_set_text>
 	   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 8029000:	4b38      	ldr	r3, [pc, #224]	; (80290e4 <SAK_kCals_angle_loader+0x104>)
 8029002:	6818      	ldr	r0, [r3, #0]
 8029004:	235a      	movs	r3, #90	; 0x5a
 8029006:	9300      	str	r3, [sp, #0]
 8029008:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802900c:	2200      	movs	r2, #0
 802900e:	2100      	movs	r1, #0
 8029010:	f7e0 fc06 	bl	8009820 <lv_obj_align>

 	   	if(SAK_kCals<=10000){
 8029014:	4b30      	ldr	r3, [pc, #192]	; (80290d8 <SAK_kCals_angle_loader+0xf8>)
 8029016:	881b      	ldrh	r3, [r3, #0]
 8029018:	f242 7210 	movw	r2, #10000	; 0x2710
 802901c:	4293      	cmp	r3, r2
 802901e:	d84b      	bhi.n	80290b8 <SAK_kCals_angle_loader+0xd8>
 			double kCalsTemp = tos_Ratio(SAK_kCals, 0, 10000, 0, 359);
 8029020:	4b2d      	ldr	r3, [pc, #180]	; (80290d8 <SAK_kCals_angle_loader+0xf8>)
 8029022:	881b      	ldrh	r3, [r3, #0]
 8029024:	4618      	mov	r0, r3
 8029026:	f7d7 fa7d 	bl	8000524 <__aeabi_ui2d>
 802902a:	4603      	mov	r3, r0
 802902c:	460c      	mov	r4, r1
 802902e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80290c0 <SAK_kCals_angle_loader+0xe0>
 8029032:	ed9f 3b25 	vldr	d3, [pc, #148]	; 80290c8 <SAK_kCals_angle_loader+0xe8>
 8029036:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80290d0 <SAK_kCals_angle_loader+0xf0>
 802903a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80290c8 <SAK_kCals_angle_loader+0xe8>
 802903e:	ec44 3b10 	vmov	d0, r3, r4
 8029042:	f001 f8dd 	bl	802a200 <tos_Ratio>
 8029046:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(SAK_kCalsArc, 180-kCalsTemp ,180);
 802904a:	f04f 0200 	mov.w	r2, #0
 802904e:	4b26      	ldr	r3, [pc, #152]	; (80290e8 <SAK_kCals_angle_loader+0x108>)
 8029050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029054:	f7d7 fd52 	bl	8000afc <__aeabi_dcmplt>
 8029058:	4603      	mov	r3, r0
 802905a:	2b00      	cmp	r3, #0
 802905c:	d016      	beq.n	802908c <SAK_kCals_angle_loader+0xac>
 802905e:	4b23      	ldr	r3, [pc, #140]	; (80290ec <SAK_kCals_angle_loader+0x10c>)
 8029060:	681c      	ldr	r4, [r3, #0]
 8029062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029066:	f04f 0000 	mov.w	r0, #0
 802906a:	491f      	ldr	r1, [pc, #124]	; (80290e8 <SAK_kCals_angle_loader+0x108>)
 802906c:	f7d7 f91c 	bl	80002a8 <__aeabi_dsub>
 8029070:	4602      	mov	r2, r0
 8029072:	460b      	mov	r3, r1
 8029074:	4610      	mov	r0, r2
 8029076:	4619      	mov	r1, r3
 8029078:	f7d7 fd7e 	bl	8000b78 <__aeabi_d2uiz>
 802907c:	4603      	mov	r3, r0
 802907e:	b29b      	uxth	r3, r3
 8029080:	22b4      	movs	r2, #180	; 0xb4
 8029082:	4619      	mov	r1, r3
 8029084:	4620      	mov	r0, r4
 8029086:	f7ee ff5d 	bl	8017f44 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 802908a:	e015      	b.n	80290b8 <SAK_kCals_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 802908c:	4b17      	ldr	r3, [pc, #92]	; (80290ec <SAK_kCals_angle_loader+0x10c>)
 802908e:	681c      	ldr	r4, [r3, #0]
 8029090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029094:	f04f 0000 	mov.w	r0, #0
 8029098:	4915      	ldr	r1, [pc, #84]	; (80290f0 <SAK_kCals_angle_loader+0x110>)
 802909a:	f7d7 f905 	bl	80002a8 <__aeabi_dsub>
 802909e:	4602      	mov	r2, r0
 80290a0:	460b      	mov	r3, r1
 80290a2:	4610      	mov	r0, r2
 80290a4:	4619      	mov	r1, r3
 80290a6:	f7d7 fd67 	bl	8000b78 <__aeabi_d2uiz>
 80290aa:	4603      	mov	r3, r0
 80290ac:	b29b      	uxth	r3, r3
 80290ae:	22b4      	movs	r2, #180	; 0xb4
 80290b0:	4619      	mov	r1, r3
 80290b2:	4620      	mov	r0, r4
 80290b4:	f7ee ff46 	bl	8017f44 <lv_arc_set_angles>
}
 80290b8:	bf00      	nop
 80290ba:	370c      	adds	r7, #12
 80290bc:	46bd      	mov	sp, r7
 80290be:	bd90      	pop	{r4, r7, pc}
 80290c0:	00000000 	.word	0x00000000
 80290c4:	40767000 	.word	0x40767000
	...
 80290d4:	40c38800 	.word	0x40c38800
 80290d8:	2001bf08 	.word	0x2001bf08
 80290dc:	0802db60 	.word	0x0802db60
 80290e0:	2001bf2c 	.word	0x2001bf2c
 80290e4:	2001bf00 	.word	0x2001bf00
 80290e8:	40668000 	.word	0x40668000
 80290ec:	2001bf24 	.word	0x2001bf24
 80290f0:	4080e000 	.word	0x4080e000
 80290f4:	00000000 	.word	0x00000000

080290f8 <SAK_distances_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_distances_angle_loader(void){
 80290f8:	b590      	push	{r4, r7, lr}
 80290fa:	b089      	sub	sp, #36	; 0x24
 80290fc:	af02      	add	r7, sp, #8
		float distTmp=(float)tos_distance_Calc(SAK_unitType,SAK_steps);
 80290fe:	4b4e      	ldr	r3, [pc, #312]	; (8029238 <SAK_distances_angle_loader+0x140>)
 8029100:	781a      	ldrb	r2, [r3, #0]
 8029102:	4b4e      	ldr	r3, [pc, #312]	; (802923c <SAK_distances_angle_loader+0x144>)
 8029104:	881b      	ldrh	r3, [r3, #0]
 8029106:	4619      	mov	r1, r3
 8029108:	4610      	mov	r0, r2
 802910a:	f001 f8f5 	bl	802a2f8 <tos_distance_Calc>
 802910e:	ed87 0a05 	vstr	s0, [r7, #20]

		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 8029112:	edd7 7a05 	vldr	s15, [r7, #20]
 8029116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802911a:	ee17 3a90 	vmov	r3, s15
 802911e:	827b      	strh	r3, [r7, #18]
 8029120:	8a7b      	ldrh	r3, [r7, #18]
 8029122:	ee07 3a90 	vmov	s15, r3
 8029126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802912a:	ed97 7a05 	vldr	s14, [r7, #20]
 802912e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8029132:	edc7 7a03 	vstr	s15, [r7, #12]
 8029136:	edd7 7a03 	vldr	s15, [r7, #12]
 802913a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8029240 <SAK_distances_angle_loader+0x148>
 802913e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8029142:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(stepAndKcalBuffer,8, "%03d.%03d",tmp1,(uint16_t)tmp2);
 8029146:	8a7b      	ldrh	r3, [r7, #18]
 8029148:	edd7 7a03 	vldr	s15, [r7, #12]
 802914c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8029150:	ee17 2a90 	vmov	r2, s15
 8029154:	b292      	uxth	r2, r2
 8029156:	9200      	str	r2, [sp, #0]
 8029158:	4a3a      	ldr	r2, [pc, #232]	; (8029244 <SAK_distances_angle_loader+0x14c>)
 802915a:	2108      	movs	r1, #8
 802915c:	483a      	ldr	r0, [pc, #232]	; (8029248 <SAK_distances_angle_loader+0x150>)
 802915e:	f002 f823 	bl	802b1a8 <sniprintf>
	 	lv_label_set_text(SAK_distanceLbl, stepAndKcalBuffer);
 8029162:	4b3a      	ldr	r3, [pc, #232]	; (802924c <SAK_distances_angle_loader+0x154>)
 8029164:	681b      	ldr	r3, [r3, #0]
 8029166:	4938      	ldr	r1, [pc, #224]	; (8029248 <SAK_distances_angle_loader+0x150>)
 8029168:	4618      	mov	r0, r3
 802916a:	f7f3 fda3 	bl	801ccb4 <lv_label_set_text>
	 	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 802916e:	4b37      	ldr	r3, [pc, #220]	; (802924c <SAK_distances_angle_loader+0x154>)
 8029170:	6818      	ldr	r0, [r3, #0]
 8029172:	235a      	movs	r3, #90	; 0x5a
 8029174:	9300      	str	r3, [sp, #0]
 8029176:	233c      	movs	r3, #60	; 0x3c
 8029178:	2200      	movs	r2, #0
 802917a:	2100      	movs	r1, #0
 802917c:	f7e0 fb50 	bl	8009820 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8029180:	6978      	ldr	r0, [r7, #20]
 8029182:	f7d7 f9f1 	bl	8000568 <__aeabi_f2d>
 8029186:	4603      	mov	r3, r0
 8029188:	460c      	mov	r4, r1
 802918a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8029220 <SAK_distances_angle_loader+0x128>
 802918e:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8029228 <SAK_distances_angle_loader+0x130>
 8029192:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8029230 <SAK_distances_angle_loader+0x138>
 8029196:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8029228 <SAK_distances_angle_loader+0x130>
 802919a:	ec44 3b10 	vmov	d0, r3, r4
 802919e:	f001 f82f 	bl	802a200 <tos_Ratio>
 80291a2:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(SAK_distancesArc, 180-distanceTemp ,180);
 80291a6:	f04f 0200 	mov.w	r2, #0
 80291aa:	4b29      	ldr	r3, [pc, #164]	; (8029250 <SAK_distances_angle_loader+0x158>)
 80291ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80291b0:	f7d7 fca4 	bl	8000afc <__aeabi_dcmplt>
 80291b4:	4603      	mov	r3, r0
 80291b6:	2b00      	cmp	r3, #0
 80291b8:	d016      	beq.n	80291e8 <SAK_distances_angle_loader+0xf0>
 80291ba:	4b26      	ldr	r3, [pc, #152]	; (8029254 <SAK_distances_angle_loader+0x15c>)
 80291bc:	681c      	ldr	r4, [r3, #0]
 80291be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80291c2:	f04f 0000 	mov.w	r0, #0
 80291c6:	4922      	ldr	r1, [pc, #136]	; (8029250 <SAK_distances_angle_loader+0x158>)
 80291c8:	f7d7 f86e 	bl	80002a8 <__aeabi_dsub>
 80291cc:	4602      	mov	r2, r0
 80291ce:	460b      	mov	r3, r1
 80291d0:	4610      	mov	r0, r2
 80291d2:	4619      	mov	r1, r3
 80291d4:	f7d7 fcd0 	bl	8000b78 <__aeabi_d2uiz>
 80291d8:	4603      	mov	r3, r0
 80291da:	b29b      	uxth	r3, r3
 80291dc:	22b4      	movs	r2, #180	; 0xb4
 80291de:	4619      	mov	r1, r3
 80291e0:	4620      	mov	r0, r4
 80291e2:	f7ee feaf 	bl	8017f44 <lv_arc_set_angles>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
}
 80291e6:	e015      	b.n	8029214 <SAK_distances_angle_loader+0x11c>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
 80291e8:	4b1a      	ldr	r3, [pc, #104]	; (8029254 <SAK_distances_angle_loader+0x15c>)
 80291ea:	681c      	ldr	r4, [r3, #0]
 80291ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80291f0:	f04f 0000 	mov.w	r0, #0
 80291f4:	4918      	ldr	r1, [pc, #96]	; (8029258 <SAK_distances_angle_loader+0x160>)
 80291f6:	f7d7 f857 	bl	80002a8 <__aeabi_dsub>
 80291fa:	4602      	mov	r2, r0
 80291fc:	460b      	mov	r3, r1
 80291fe:	4610      	mov	r0, r2
 8029200:	4619      	mov	r1, r3
 8029202:	f7d7 fcb9 	bl	8000b78 <__aeabi_d2uiz>
 8029206:	4603      	mov	r3, r0
 8029208:	b29b      	uxth	r3, r3
 802920a:	22b4      	movs	r2, #180	; 0xb4
 802920c:	4619      	mov	r1, r3
 802920e:	4620      	mov	r0, r4
 8029210:	f7ee fe98 	bl	8017f44 <lv_arc_set_angles>
}
 8029214:	bf00      	nop
 8029216:	371c      	adds	r7, #28
 8029218:	46bd      	mov	sp, r7
 802921a:	bd90      	pop	{r4, r7, pc}
 802921c:	f3af 8000 	nop.w
 8029220:	00000000 	.word	0x00000000
 8029224:	40767000 	.word	0x40767000
	...
 8029234:	408f4000 	.word	0x408f4000
 8029238:	2001bf28 	.word	0x2001bf28
 802923c:	2001bf22 	.word	0x2001bf22
 8029240:	447a0000 	.word	0x447a0000
 8029244:	0802db68 	.word	0x0802db68
 8029248:	2001bf2c 	.word	0x2001bf2c
 802924c:	2001bf04 	.word	0x2001bf04
 8029250:	40668000 	.word	0x40668000
 8029254:	2001bf18 	.word	0x2001bf18
 8029258:	4080e000 	.word	0x4080e000

0802925c <StepAndKcal_SetStepsAndKcals>:
//Setter Getter Functions
void StepAndKcal_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
 802925c:	b480      	push	{r7}
 802925e:	b083      	sub	sp, #12
 8029260:	af00      	add	r7, sp, #0
 8029262:	4603      	mov	r3, r0
 8029264:	460a      	mov	r2, r1
 8029266:	80fb      	strh	r3, [r7, #6]
 8029268:	4613      	mov	r3, r2
 802926a:	80bb      	strh	r3, [r7, #4]
	SAK_steps =getSteps;
 802926c:	4a05      	ldr	r2, [pc, #20]	; (8029284 <StepAndKcal_SetStepsAndKcals+0x28>)
 802926e:	88fb      	ldrh	r3, [r7, #6]
 8029270:	8013      	strh	r3, [r2, #0]
	SAK_kCals =getKcals;
 8029272:	4a05      	ldr	r2, [pc, #20]	; (8029288 <StepAndKcal_SetStepsAndKcals+0x2c>)
 8029274:	88bb      	ldrh	r3, [r7, #4]
 8029276:	8013      	strh	r3, [r2, #0]
}
 8029278:	bf00      	nop
 802927a:	370c      	adds	r7, #12
 802927c:	46bd      	mov	sp, r7
 802927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029282:	4770      	bx	lr
 8029284:	2001bf22 	.word	0x2001bf22
 8029288:	2001bf08 	.word	0x2001bf08

0802928c <StepAndKcal_TaskControllerSet>:
void StepAndKcal_TaskControllerSet(bool active){
 802928c:	b480      	push	{r7}
 802928e:	b083      	sub	sp, #12
 8029290:	af00      	add	r7, sp, #0
 8029292:	4603      	mov	r3, r0
 8029294:	71fb      	strb	r3, [r7, #7]
	SAk_taskController = active;
 8029296:	4a04      	ldr	r2, [pc, #16]	; (80292a8 <StepAndKcal_TaskControllerSet+0x1c>)
 8029298:	79fb      	ldrb	r3, [r7, #7]
 802929a:	7013      	strb	r3, [r2, #0]
}
 802929c:	bf00      	nop
 802929e:	370c      	adds	r7, #12
 80292a0:	46bd      	mov	sp, r7
 80292a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292a6:	4770      	bx	lr
 80292a8:	2001bf20 	.word	0x2001bf20

080292ac <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80292ac:	b580      	push	{r7, lr}
 80292ae:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80292b0:	f7ec fc18 	bl	8015ae4 <lv_disp_get_default>
 80292b4:	4603      	mov	r3, r0
 80292b6:	4618      	mov	r0, r3
 80292b8:	f7df f8e0 	bl	800847c <lv_disp_get_scr_act>
 80292bc:	4603      	mov	r3, r0
}
 80292be:	4618      	mov	r0, r3
 80292c0:	bd80      	pop	{r7, pc}

080292c2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80292c2:	b580      	push	{r7, lr}
 80292c4:	b084      	sub	sp, #16
 80292c6:	af00      	add	r7, sp, #0
 80292c8:	60f8      	str	r0, [r7, #12]
 80292ca:	460b      	mov	r3, r1
 80292cc:	607a      	str	r2, [r7, #4]
 80292ce:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80292d0:	6879      	ldr	r1, [r7, #4]
 80292d2:	68f8      	ldr	r0, [r7, #12]
 80292d4:	f7e0 ff49 	bl	800a16a <lv_obj_set_style>
}
 80292d8:	bf00      	nop
 80292da:	3710      	adds	r7, #16
 80292dc:	46bd      	mov	sp, r7
 80292de:	bd80      	pop	{r7, pc}

080292e0 <tos_StopWatchScreen_Init>:
void StopWatch_Update_Lbl(void);
void StopWatch_Update_saveLbl(void);
void StopWatch_Update_StatuImg(uint8_t statu);

/*This function using for initialization StopWatch screen*/
void tos_StopWatchScreen_Init(bool theme){
 80292e0:	b580      	push	{r7, lr}
 80292e2:	b082      	sub	sp, #8
 80292e4:	af00      	add	r7, sp, #0
 80292e6:	4603      	mov	r3, r0
 80292e8:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 80292ea:	f7ff ffdf 	bl	80292ac <lv_scr_act>
 80292ee:	4603      	mov	r3, r0
 80292f0:	4618      	mov	r0, r3
 80292f2:	f7e0 f823 	bl	800933c <lv_obj_clean>

	lv_style_copy(&style_screen, &lv_style_plain);
 80292f6:	4919      	ldr	r1, [pc, #100]	; (802935c <tos_StopWatchScreen_Init+0x7c>)
 80292f8:	4819      	ldr	r0, [pc, #100]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 80292fa:	f7e2 fcd5 	bl	800bca8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 80292fe:	4a18      	ldr	r2, [pc, #96]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 8029300:	4b18      	ldr	r3, [pc, #96]	; (8029364 <tos_StopWatchScreen_Init+0x84>)
 8029302:	881b      	ldrh	r3, [r3, #0]
 8029304:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 8029306:	4a16      	ldr	r2, [pc, #88]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 8029308:	4b16      	ldr	r3, [pc, #88]	; (8029364 <tos_StopWatchScreen_Init+0x84>)
 802930a:	881b      	ldrh	r3, [r3, #0]
 802930c:	8093      	strh	r3, [r2, #4]
	if(theme){
 802930e:	79fb      	ldrb	r3, [r7, #7]
 8029310:	2b00      	cmp	r3, #0
 8029312:	d005      	beq.n	8029320 <tos_StopWatchScreen_Init+0x40>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8029314:	4b12      	ldr	r3, [pc, #72]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 8029316:	2200      	movs	r2, #0
 8029318:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 802931a:	4b11      	ldr	r3, [pc, #68]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 802931c:	2200      	movs	r2, #0
 802931e:	809a      	strh	r2, [r3, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8029320:	f7ff ffc4 	bl	80292ac <lv_scr_act>
 8029324:	4603      	mov	r3, r0
 8029326:	490e      	ldr	r1, [pc, #56]	; (8029360 <tos_StopWatchScreen_Init+0x80>)
 8029328:	4618      	mov	r0, r3
 802932a:	f7e0 ff1e 	bl	800a16a <lv_obj_set_style>
 	isStartCount=false;
 802932e:	4b0e      	ldr	r3, [pc, #56]	; (8029368 <tos_StopWatchScreen_Init+0x88>)
 8029330:	2200      	movs	r2, #0
 8029332:	701a      	strb	r2, [r3, #0]
 	SWtheme=theme;
 8029334:	4a0d      	ldr	r2, [pc, #52]	; (802936c <tos_StopWatchScreen_Init+0x8c>)
 8029336:	79fb      	ldrb	r3, [r7, #7]
 8029338:	7013      	strb	r3, [r2, #0]

	StopWatch_Obj_Init();
 802933a:	f000 f81d 	bl	8029378 <StopWatch_Obj_Init>
 	SW_taskController=true;
 802933e:	4b0c      	ldr	r3, [pc, #48]	; (8029370 <tos_StopWatchScreen_Init+0x90>)
 8029340:	2201      	movs	r2, #1
 8029342:	701a      	strb	r2, [r3, #0]
	lv_task_create(StopWatch_Stopwatch_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8029344:	2300      	movs	r3, #0
 8029346:	2201      	movs	r2, #1
 8029348:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802934c:	4809      	ldr	r0, [pc, #36]	; (8029374 <tos_StopWatchScreen_Init+0x94>)
 802934e:	f7ee f80d 	bl	801736c <lv_task_create>

}
 8029352:	bf00      	nop
 8029354:	3708      	adds	r7, #8
 8029356:	46bd      	mov	sp, r7
 8029358:	bd80      	pop	{r7, pc}
 802935a:	bf00      	nop
 802935c:	2001ba40 	.word	0x2001ba40
 8029360:	2001b4e8 	.word	0x2001b4e8
 8029364:	0802db74 	.word	0x0802db74
 8029368:	2001bf8a 	.word	0x2001bf8a
 802936c:	2001bf34 	.word	0x2001bf34
 8029370:	2001bf8d 	.word	0x2001bf8d
 8029374:	08029531 	.word	0x08029531

08029378 <StopWatch_Obj_Init>:

/*This function using for create and set objects on screen*/
void StopWatch_Obj_Init(void){
 8029378:	b580      	push	{r7, lr}
 802937a:	b084      	sub	sp, #16
 802937c:	af04      	add	r7, sp, #16

	SW_Statu_Img = lv_img_create(lv_scr_act(), NULL);
 802937e:	f7ff ff95 	bl	80292ac <lv_scr_act>
 8029382:	4603      	mov	r3, r0
 8029384:	2100      	movs	r1, #0
 8029386:	4618      	mov	r0, r3
 8029388:	f7f2 ffd6 	bl	801c338 <lv_img_create>
 802938c:	4602      	mov	r2, r0
 802938e:	4b57      	ldr	r3, [pc, #348]	; (80294ec <StopWatch_Obj_Init+0x174>)
 8029390:	601a      	str	r2, [r3, #0]
	if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8029392:	4b57      	ldr	r3, [pc, #348]	; (80294f0 <StopWatch_Obj_Init+0x178>)
 8029394:	781b      	ldrb	r3, [r3, #0]
 8029396:	2b00      	cmp	r3, #0
 8029398:	d006      	beq.n	80293a8 <StopWatch_Obj_Init+0x30>
 802939a:	4b54      	ldr	r3, [pc, #336]	; (80294ec <StopWatch_Obj_Init+0x174>)
 802939c:	681b      	ldr	r3, [r3, #0]
 802939e:	4955      	ldr	r1, [pc, #340]	; (80294f4 <StopWatch_Obj_Init+0x17c>)
 80293a0:	4618      	mov	r0, r3
 80293a2:	f7f3 f867 	bl	801c474 <lv_img_set_src>
 80293a6:	e005      	b.n	80293b4 <StopWatch_Obj_Init+0x3c>
	else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 80293a8:	4b50      	ldr	r3, [pc, #320]	; (80294ec <StopWatch_Obj_Init+0x174>)
 80293aa:	681b      	ldr	r3, [r3, #0]
 80293ac:	4952      	ldr	r1, [pc, #328]	; (80294f8 <StopWatch_Obj_Init+0x180>)
 80293ae:	4618      	mov	r0, r3
 80293b0:	f7f3 f860 	bl	801c474 <lv_img_set_src>
	lv_obj_align(SW_Statu_Img, NULL, LV_ALIGN_CENTER, 0, 0);
 80293b4:	4b4d      	ldr	r3, [pc, #308]	; (80294ec <StopWatch_Obj_Init+0x174>)
 80293b6:	6818      	ldr	r0, [r3, #0]
 80293b8:	2300      	movs	r3, #0
 80293ba:	9300      	str	r3, [sp, #0]
 80293bc:	2300      	movs	r3, #0
 80293be:	2200      	movs	r2, #0
 80293c0:	2100      	movs	r1, #0
 80293c2:	f7e0 fa2d 	bl	8009820 <lv_obj_align>

    static lv_style_t text_Style,save_text_Style;
    lv_style_copy(&text_Style, &lv_style_plain);
 80293c6:	494d      	ldr	r1, [pc, #308]	; (80294fc <StopWatch_Obj_Init+0x184>)
 80293c8:	484d      	ldr	r0, [pc, #308]	; (8029500 <StopWatch_Obj_Init+0x188>)
 80293ca:	f7e2 fc6d 	bl	800bca8 <lv_style_copy>
    text_Style.text.color = LV_COLOR_BLACK;
 80293ce:	4b4c      	ldr	r3, [pc, #304]	; (8029500 <StopWatch_Obj_Init+0x188>)
 80293d0:	2200      	movs	r2, #0
 80293d2:	841a      	strh	r2, [r3, #32]
    if(SWtheme) text_Style.text.color = LV_COLOR_SILVER;
 80293d4:	4b46      	ldr	r3, [pc, #280]	; (80294f0 <StopWatch_Obj_Init+0x178>)
 80293d6:	781b      	ldrb	r3, [r3, #0]
 80293d8:	2b00      	cmp	r3, #0
 80293da:	d003      	beq.n	80293e4 <StopWatch_Obj_Init+0x6c>
 80293dc:	4a48      	ldr	r2, [pc, #288]	; (8029500 <StopWatch_Obj_Init+0x188>)
 80293de:	4b49      	ldr	r3, [pc, #292]	; (8029504 <StopWatch_Obj_Init+0x18c>)
 80293e0:	881b      	ldrh	r3, [r3, #0]
 80293e2:	8413      	strh	r3, [r2, #32]
    text_Style.text.font = &digital_font_for_number_30;
 80293e4:	4b46      	ldr	r3, [pc, #280]	; (8029500 <StopWatch_Obj_Init+0x188>)
 80293e6:	4a48      	ldr	r2, [pc, #288]	; (8029508 <StopWatch_Obj_Init+0x190>)
 80293e8:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_copy(&save_text_Style, &text_Style);
 80293ea:	4945      	ldr	r1, [pc, #276]	; (8029500 <StopWatch_Obj_Init+0x188>)
 80293ec:	4847      	ldr	r0, [pc, #284]	; (802950c <StopWatch_Obj_Init+0x194>)
 80293ee:	f7e2 fc5b 	bl	800bca8 <lv_style_copy>
    save_text_Style.text.opa=200;
 80293f2:	4b46      	ldr	r3, [pc, #280]	; (802950c <StopWatch_Obj_Init+0x194>)
 80293f4:	22c8      	movs	r2, #200	; 0xc8
 80293f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    	   //MAGENTA -> FF00FF
   	       //AQUA -> 00FFFF
	       //ORANGE -> FFA500

    SW_Lbl = lv_label_create(lv_scr_act(), NULL);
 80293fa:	f7ff ff57 	bl	80292ac <lv_scr_act>
 80293fe:	4603      	mov	r3, r0
 8029400:	2100      	movs	r1, #0
 8029402:	4618      	mov	r0, r3
 8029404:	f7f3 fb24 	bl	801ca50 <lv_label_create>
 8029408:	4602      	mov	r2, r0
 802940a:	4b41      	ldr	r3, [pc, #260]	; (8029510 <StopWatch_Obj_Init+0x198>)
 802940c:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_Lbl, true);
 802940e:	4b40      	ldr	r3, [pc, #256]	; (8029510 <StopWatch_Obj_Init+0x198>)
 8029410:	681b      	ldr	r3, [r3, #0]
 8029412:	2101      	movs	r1, #1
 8029414:	4618      	mov	r0, r3
 8029416:	f7f3 fd69 	bl	801ceec <lv_label_set_recolor>
 	lv_label_set_style(SW_Lbl, LV_LABEL_STYLE_MAIN, &text_Style);
 802941a:	4b3d      	ldr	r3, [pc, #244]	; (8029510 <StopWatch_Obj_Init+0x198>)
 802941c:	681b      	ldr	r3, [r3, #0]
 802941e:	4a38      	ldr	r2, [pc, #224]	; (8029500 <StopWatch_Obj_Init+0x188>)
 8029420:	2100      	movs	r1, #0
 8029422:	4618      	mov	r0, r3
 8029424:	f7ff ff4d 	bl	80292c2 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8029428:	4b3a      	ldr	r3, [pc, #232]	; (8029514 <StopWatch_Obj_Init+0x19c>)
 802942a:	781b      	ldrb	r3, [r3, #0]
 802942c:	4618      	mov	r0, r3
 802942e:	4b3a      	ldr	r3, [pc, #232]	; (8029518 <StopWatch_Obj_Init+0x1a0>)
 8029430:	781b      	ldrb	r3, [r3, #0]
 8029432:	461a      	mov	r2, r3
 8029434:	4b39      	ldr	r3, [pc, #228]	; (802951c <StopWatch_Obj_Init+0x1a4>)
 8029436:	781b      	ldrb	r3, [r3, #0]
 8029438:	4619      	mov	r1, r3
 802943a:	4b39      	ldr	r3, [pc, #228]	; (8029520 <StopWatch_Obj_Init+0x1a8>)
 802943c:	881b      	ldrh	r3, [r3, #0]
 802943e:	9302      	str	r3, [sp, #8]
 8029440:	9101      	str	r1, [sp, #4]
 8029442:	9200      	str	r2, [sp, #0]
 8029444:	4603      	mov	r3, r0
 8029446:	4a37      	ldr	r2, [pc, #220]	; (8029524 <StopWatch_Obj_Init+0x1ac>)
 8029448:	2140      	movs	r1, #64	; 0x40
 802944a:	4837      	ldr	r0, [pc, #220]	; (8029528 <StopWatch_Obj_Init+0x1b0>)
 802944c:	f001 feac 	bl	802b1a8 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8029450:	4b2f      	ldr	r3, [pc, #188]	; (8029510 <StopWatch_Obj_Init+0x198>)
 8029452:	681b      	ldr	r3, [r3, #0]
 8029454:	4934      	ldr	r1, [pc, #208]	; (8029528 <StopWatch_Obj_Init+0x1b0>)
 8029456:	4618      	mov	r0, r3
 8029458:	f7f3 fc2c 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(SW_Lbl, NULL, LV_ALIGN_CENTER, 0, -70);
 802945c:	4b2c      	ldr	r3, [pc, #176]	; (8029510 <StopWatch_Obj_Init+0x198>)
 802945e:	6818      	ldr	r0, [r3, #0]
 8029460:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8029464:	9300      	str	r3, [sp, #0]
 8029466:	2300      	movs	r3, #0
 8029468:	2200      	movs	r2, #0
 802946a:	2100      	movs	r1, #0
 802946c:	f7e0 f9d8 	bl	8009820 <lv_obj_align>


 	SW_saveLbl= lv_label_create(lv_scr_act(), NULL);
 8029470:	f7ff ff1c 	bl	80292ac <lv_scr_act>
 8029474:	4603      	mov	r3, r0
 8029476:	2100      	movs	r1, #0
 8029478:	4618      	mov	r0, r3
 802947a:	f7f3 fae9 	bl	801ca50 <lv_label_create>
 802947e:	4602      	mov	r2, r0
 8029480:	4b2a      	ldr	r3, [pc, #168]	; (802952c <StopWatch_Obj_Init+0x1b4>)
 8029482:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_saveLbl, true);
 8029484:	4b29      	ldr	r3, [pc, #164]	; (802952c <StopWatch_Obj_Init+0x1b4>)
 8029486:	681b      	ldr	r3, [r3, #0]
 8029488:	2101      	movs	r1, #1
 802948a:	4618      	mov	r0, r3
 802948c:	f7f3 fd2e 	bl	801ceec <lv_label_set_recolor>
 	lv_label_set_style(SW_saveLbl, LV_LABEL_STYLE_MAIN, &save_text_Style);
 8029490:	4b26      	ldr	r3, [pc, #152]	; (802952c <StopWatch_Obj_Init+0x1b4>)
 8029492:	681b      	ldr	r3, [r3, #0]
 8029494:	4a1d      	ldr	r2, [pc, #116]	; (802950c <StopWatch_Obj_Init+0x194>)
 8029496:	2100      	movs	r1, #0
 8029498:	4618      	mov	r0, r3
 802949a:	f7ff ff12 	bl	80292c2 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802949e:	4b1d      	ldr	r3, [pc, #116]	; (8029514 <StopWatch_Obj_Init+0x19c>)
 80294a0:	781b      	ldrb	r3, [r3, #0]
 80294a2:	4618      	mov	r0, r3
 80294a4:	4b1c      	ldr	r3, [pc, #112]	; (8029518 <StopWatch_Obj_Init+0x1a0>)
 80294a6:	781b      	ldrb	r3, [r3, #0]
 80294a8:	461a      	mov	r2, r3
 80294aa:	4b1c      	ldr	r3, [pc, #112]	; (802951c <StopWatch_Obj_Init+0x1a4>)
 80294ac:	781b      	ldrb	r3, [r3, #0]
 80294ae:	4619      	mov	r1, r3
 80294b0:	4b1b      	ldr	r3, [pc, #108]	; (8029520 <StopWatch_Obj_Init+0x1a8>)
 80294b2:	881b      	ldrh	r3, [r3, #0]
 80294b4:	9302      	str	r3, [sp, #8]
 80294b6:	9101      	str	r1, [sp, #4]
 80294b8:	9200      	str	r2, [sp, #0]
 80294ba:	4603      	mov	r3, r0
 80294bc:	4a19      	ldr	r2, [pc, #100]	; (8029524 <StopWatch_Obj_Init+0x1ac>)
 80294be:	2140      	movs	r1, #64	; 0x40
 80294c0:	4819      	ldr	r0, [pc, #100]	; (8029528 <StopWatch_Obj_Init+0x1b0>)
 80294c2:	f001 fe71 	bl	802b1a8 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 80294c6:	4b19      	ldr	r3, [pc, #100]	; (802952c <StopWatch_Obj_Init+0x1b4>)
 80294c8:	681b      	ldr	r3, [r3, #0]
 80294ca:	4917      	ldr	r1, [pc, #92]	; (8029528 <StopWatch_Obj_Init+0x1b0>)
 80294cc:	4618      	mov	r0, r3
 80294ce:	f7f3 fbf1 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 80294d2:	4b16      	ldr	r3, [pc, #88]	; (802952c <StopWatch_Obj_Init+0x1b4>)
 80294d4:	6818      	ldr	r0, [r3, #0]
 80294d6:	2346      	movs	r3, #70	; 0x46
 80294d8:	9300      	str	r3, [sp, #0]
 80294da:	2300      	movs	r3, #0
 80294dc:	2200      	movs	r2, #0
 80294de:	2100      	movs	r1, #0
 80294e0:	f7e0 f99e 	bl	8009820 <lv_obj_align>
}
 80294e4:	bf00      	nop
 80294e6:	46bd      	mov	sp, r7
 80294e8:	bd80      	pop	{r7, pc}
 80294ea:	bf00      	nop
 80294ec:	2001bf84 	.word	0x2001bf84
 80294f0:	2001bf34 	.word	0x2001bf34
 80294f4:	08044850 	.word	0x08044850
 80294f8:	08045be4 	.word	0x08045be4
 80294fc:	2001ba40 	.word	0x2001ba40
 8029500:	2001b524 	.word	0x2001b524
 8029504:	0802dba8 	.word	0x0802dba8
 8029508:	200027ec 	.word	0x200027ec
 802950c:	2001b560 	.word	0x2001b560
 8029510:	2001bf38 	.word	0x2001bf38
 8029514:	2001bf8c 	.word	0x2001bf8c
 8029518:	2001bf40 	.word	0x2001bf40
 802951c:	2001bf8b 	.word	0x2001bf8b
 8029520:	2001bf88 	.word	0x2001bf88
 8029524:	0802db78 	.word	0x0802db78
 8029528:	2001bf44 	.word	0x2001bf44
 802952c:	2001bf3c 	.word	0x2001bf3c

08029530 <StopWatch_Stopwatch_Updater>:

/*This function using for update to current label*/
void StopWatch_Stopwatch_Updater(lv_task_t *t){
 8029530:	b580      	push	{r7, lr}
 8029532:	b082      	sub	sp, #8
 8029534:	af00      	add	r7, sp, #0
 8029536:	6078      	str	r0, [r7, #4]
	if(SW_taskController){
 8029538:	4b06      	ldr	r3, [pc, #24]	; (8029554 <StopWatch_Stopwatch_Updater+0x24>)
 802953a:	781b      	ldrb	r3, [r3, #0]
 802953c:	2b00      	cmp	r3, #0
 802953e:	d002      	beq.n	8029546 <StopWatch_Stopwatch_Updater+0x16>
		StopWatch_Update_Lbl();
 8029540:	f000 f8a2 	bl	8029688 <StopWatch_Update_Lbl>
		}else lv_task_del(t);
}
 8029544:	e002      	b.n	802954c <StopWatch_Stopwatch_Updater+0x1c>
		}else lv_task_del(t);
 8029546:	6878      	ldr	r0, [r7, #4]
 8029548:	f7ed ff48 	bl	80173dc <lv_task_del>
}
 802954c:	bf00      	nop
 802954e:	3708      	adds	r7, #8
 8029550:	46bd      	mov	sp, r7
 8029552:	bd80      	pop	{r7, pc}
 8029554:	2001bf8d 	.word	0x2001bf8d

08029558 <StopWatch_ButtonController>:

/*This function using for control to buttons*/
void StopWatch_ButtonController(void){
 8029558:	b580      	push	{r7, lr}
 802955a:	b082      	sub	sp, #8
 802955c:	af00      	add	r7, sp, #0
	uint8_t rightBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 802955e:	f000 fdbf 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 8029562:	4603      	mov	r3, r0
 8029564:	71fb      	strb	r3, [r7, #7]
	  if(2==rightBtnListen){
 8029566:	79fb      	ldrb	r3, [r7, #7]
 8029568:	2b02      	cmp	r3, #2
 802956a:	d114      	bne.n	8029596 <StopWatch_ButtonController+0x3e>
		  //Clear and stop
		  SWseconds=0; SWminutes=0; SWhours=0; SWmilisecs=0; isStartCount=false;
 802956c:	4b1e      	ldr	r3, [pc, #120]	; (80295e8 <StopWatch_ButtonController+0x90>)
 802956e:	2200      	movs	r2, #0
 8029570:	701a      	strb	r2, [r3, #0]
 8029572:	4b1e      	ldr	r3, [pc, #120]	; (80295ec <StopWatch_ButtonController+0x94>)
 8029574:	2200      	movs	r2, #0
 8029576:	701a      	strb	r2, [r3, #0]
 8029578:	4b1d      	ldr	r3, [pc, #116]	; (80295f0 <StopWatch_ButtonController+0x98>)
 802957a:	2200      	movs	r2, #0
 802957c:	701a      	strb	r2, [r3, #0]
 802957e:	4b1d      	ldr	r3, [pc, #116]	; (80295f4 <StopWatch_ButtonController+0x9c>)
 8029580:	2200      	movs	r2, #0
 8029582:	801a      	strh	r2, [r3, #0]
 8029584:	4b1c      	ldr	r3, [pc, #112]	; (80295f8 <StopWatch_ButtonController+0xa0>)
 8029586:	2200      	movs	r2, #0
 8029588:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);
 802958a:	481c      	ldr	r0, [pc, #112]	; (80295fc <StopWatch_ButtonController+0xa4>)
 802958c:	f7db f899 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
		  StopWatch_Update_StatuImg(0);}
 8029590:	2000      	movs	r0, #0
 8029592:	f000 f8df 	bl	8029754 <StopWatch_Update_StatuImg>
	  if(1==rightBtnListen){
 8029596:	79fb      	ldrb	r3, [r7, #7]
 8029598:	2b01      	cmp	r3, #1
 802959a:	d119      	bne.n	80295d0 <StopWatch_ButtonController+0x78>
		  //Start Stop
		  if(!isStartCount){HAL_TIM_Base_Start_IT(&TOS_STOPWATCH_TIMER); isStartCount=true;
 802959c:	4b16      	ldr	r3, [pc, #88]	; (80295f8 <StopWatch_ButtonController+0xa0>)
 802959e:	781b      	ldrb	r3, [r3, #0]
 80295a0:	f083 0301 	eor.w	r3, r3, #1
 80295a4:	b2db      	uxtb	r3, r3
 80295a6:	2b00      	cmp	r3, #0
 80295a8:	d009      	beq.n	80295be <StopWatch_ButtonController+0x66>
 80295aa:	4814      	ldr	r0, [pc, #80]	; (80295fc <StopWatch_ButtonController+0xa4>)
 80295ac:	f7db f865 	bl	800467a <HAL_TIM_Base_Start_IT>
 80295b0:	4b11      	ldr	r3, [pc, #68]	; (80295f8 <StopWatch_ButtonController+0xa0>)
 80295b2:	2201      	movs	r2, #1
 80295b4:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(2);}
 80295b6:	2002      	movs	r0, #2
 80295b8:	f000 f8cc 	bl	8029754 <StopWatch_Update_StatuImg>
 80295bc:	e008      	b.n	80295d0 <StopWatch_ButtonController+0x78>
		  else { HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);  isStartCount=false;
 80295be:	480f      	ldr	r0, [pc, #60]	; (80295fc <StopWatch_ButtonController+0xa4>)
 80295c0:	f7db f87f 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
 80295c4:	4b0c      	ldr	r3, [pc, #48]	; (80295f8 <StopWatch_ButtonController+0xa0>)
 80295c6:	2200      	movs	r2, #0
 80295c8:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(1);}}
 80295ca:	2001      	movs	r0, #1
 80295cc:	f000 f8c2 	bl	8029754 <StopWatch_Update_StatuImg>
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 80295d0:	f000 fd5e 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 80295d4:	4603      	mov	r3, r0
 80295d6:	2b01      	cmp	r3, #1
 80295d8:	d101      	bne.n	80295de <StopWatch_ButtonController+0x86>
				  //Save
				  StopWatch_Update_saveLbl();
 80295da:	f000 f883 	bl	80296e4 <StopWatch_Update_saveLbl>
		  }




}
 80295de:	bf00      	nop
 80295e0:	3708      	adds	r7, #8
 80295e2:	46bd      	mov	sp, r7
 80295e4:	bd80      	pop	{r7, pc}
 80295e6:	bf00      	nop
 80295e8:	2001bf8b 	.word	0x2001bf8b
 80295ec:	2001bf40 	.word	0x2001bf40
 80295f0:	2001bf8c 	.word	0x2001bf8c
 80295f4:	2001bf88 	.word	0x2001bf88
 80295f8:	2001bf8a 	.word	0x2001bf8a
 80295fc:	2001b764 	.word	0x2001b764

08029600 <StopWatch_Update_Time>:

/*This function using for update time
 * this function must be called in timer interupt function*/
void StopWatch_Update_Time(void){
 8029600:	b480      	push	{r7}
 8029602:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(SW_taskController){
 8029604:	4b1b      	ldr	r3, [pc, #108]	; (8029674 <StopWatch_Update_Time+0x74>)
 8029606:	781b      	ldrb	r3, [r3, #0]
 8029608:	2b00      	cmp	r3, #0
 802960a:	d02d      	beq.n	8029668 <StopWatch_Update_Time+0x68>
		SWmilisecs++;
 802960c:	4b1a      	ldr	r3, [pc, #104]	; (8029678 <StopWatch_Update_Time+0x78>)
 802960e:	881b      	ldrh	r3, [r3, #0]
 8029610:	3301      	adds	r3, #1
 8029612:	b29a      	uxth	r2, r3
 8029614:	4b18      	ldr	r3, [pc, #96]	; (8029678 <StopWatch_Update_Time+0x78>)
 8029616:	801a      	strh	r2, [r3, #0]
			if(SWmilisecs==1000){
 8029618:	4b17      	ldr	r3, [pc, #92]	; (8029678 <StopWatch_Update_Time+0x78>)
 802961a:	881b      	ldrh	r3, [r3, #0]
 802961c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029620:	d122      	bne.n	8029668 <StopWatch_Update_Time+0x68>
				SWmilisecs=0;
 8029622:	4b15      	ldr	r3, [pc, #84]	; (8029678 <StopWatch_Update_Time+0x78>)
 8029624:	2200      	movs	r2, #0
 8029626:	801a      	strh	r2, [r3, #0]
				SWseconds++;
 8029628:	4b14      	ldr	r3, [pc, #80]	; (802967c <StopWatch_Update_Time+0x7c>)
 802962a:	781b      	ldrb	r3, [r3, #0]
 802962c:	3301      	adds	r3, #1
 802962e:	b2da      	uxtb	r2, r3
 8029630:	4b12      	ldr	r3, [pc, #72]	; (802967c <StopWatch_Update_Time+0x7c>)
 8029632:	701a      	strb	r2, [r3, #0]
				if(SWseconds==60){
 8029634:	4b11      	ldr	r3, [pc, #68]	; (802967c <StopWatch_Update_Time+0x7c>)
 8029636:	781b      	ldrb	r3, [r3, #0]
 8029638:	2b3c      	cmp	r3, #60	; 0x3c
 802963a:	d115      	bne.n	8029668 <StopWatch_Update_Time+0x68>
					SWseconds=0;
 802963c:	4b0f      	ldr	r3, [pc, #60]	; (802967c <StopWatch_Update_Time+0x7c>)
 802963e:	2200      	movs	r2, #0
 8029640:	701a      	strb	r2, [r3, #0]
					SWminutes++;
 8029642:	4b0f      	ldr	r3, [pc, #60]	; (8029680 <StopWatch_Update_Time+0x80>)
 8029644:	781b      	ldrb	r3, [r3, #0]
 8029646:	3301      	adds	r3, #1
 8029648:	b2da      	uxtb	r2, r3
 802964a:	4b0d      	ldr	r3, [pc, #52]	; (8029680 <StopWatch_Update_Time+0x80>)
 802964c:	701a      	strb	r2, [r3, #0]
					if(SWminutes==60){
 802964e:	4b0c      	ldr	r3, [pc, #48]	; (8029680 <StopWatch_Update_Time+0x80>)
 8029650:	781b      	ldrb	r3, [r3, #0]
 8029652:	2b3c      	cmp	r3, #60	; 0x3c
 8029654:	d108      	bne.n	8029668 <StopWatch_Update_Time+0x68>
						SWminutes=0;
 8029656:	4b0a      	ldr	r3, [pc, #40]	; (8029680 <StopWatch_Update_Time+0x80>)
 8029658:	2200      	movs	r2, #0
 802965a:	701a      	strb	r2, [r3, #0]
						SWhours++;
 802965c:	4b09      	ldr	r3, [pc, #36]	; (8029684 <StopWatch_Update_Time+0x84>)
 802965e:	781b      	ldrb	r3, [r3, #0]
 8029660:	3301      	adds	r3, #1
 8029662:	b2da      	uxtb	r2, r3
 8029664:	4b07      	ldr	r3, [pc, #28]	; (8029684 <StopWatch_Update_Time+0x84>)
 8029666:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}
}
 8029668:	bf00      	nop
 802966a:	46bd      	mov	sp, r7
 802966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029670:	4770      	bx	lr
 8029672:	bf00      	nop
 8029674:	2001bf8d 	.word	0x2001bf8d
 8029678:	2001bf88 	.word	0x2001bf88
 802967c:	2001bf8b 	.word	0x2001bf8b
 8029680:	2001bf40 	.word	0x2001bf40
 8029684:	2001bf8c 	.word	0x2001bf8c

08029688 <StopWatch_Update_Lbl>:

/*This function using for set current value to label*/
void StopWatch_Update_Lbl(void){
 8029688:	b580      	push	{r7, lr}
 802968a:	b084      	sub	sp, #16
 802968c:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802968e:	4b0e      	ldr	r3, [pc, #56]	; (80296c8 <StopWatch_Update_Lbl+0x40>)
 8029690:	781b      	ldrb	r3, [r3, #0]
 8029692:	4618      	mov	r0, r3
 8029694:	4b0d      	ldr	r3, [pc, #52]	; (80296cc <StopWatch_Update_Lbl+0x44>)
 8029696:	781b      	ldrb	r3, [r3, #0]
 8029698:	461a      	mov	r2, r3
 802969a:	4b0d      	ldr	r3, [pc, #52]	; (80296d0 <StopWatch_Update_Lbl+0x48>)
 802969c:	781b      	ldrb	r3, [r3, #0]
 802969e:	4619      	mov	r1, r3
 80296a0:	4b0c      	ldr	r3, [pc, #48]	; (80296d4 <StopWatch_Update_Lbl+0x4c>)
 80296a2:	881b      	ldrh	r3, [r3, #0]
 80296a4:	9302      	str	r3, [sp, #8]
 80296a6:	9101      	str	r1, [sp, #4]
 80296a8:	9200      	str	r2, [sp, #0]
 80296aa:	4603      	mov	r3, r0
 80296ac:	4a0a      	ldr	r2, [pc, #40]	; (80296d8 <StopWatch_Update_Lbl+0x50>)
 80296ae:	2140      	movs	r1, #64	; 0x40
 80296b0:	480a      	ldr	r0, [pc, #40]	; (80296dc <StopWatch_Update_Lbl+0x54>)
 80296b2:	f001 fd79 	bl	802b1a8 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 80296b6:	4b0a      	ldr	r3, [pc, #40]	; (80296e0 <StopWatch_Update_Lbl+0x58>)
 80296b8:	681b      	ldr	r3, [r3, #0]
 80296ba:	4908      	ldr	r1, [pc, #32]	; (80296dc <StopWatch_Update_Lbl+0x54>)
 80296bc:	4618      	mov	r0, r3
 80296be:	f7f3 faf9 	bl	801ccb4 <lv_label_set_text>
}
 80296c2:	bf00      	nop
 80296c4:	46bd      	mov	sp, r7
 80296c6:	bd80      	pop	{r7, pc}
 80296c8:	2001bf8c 	.word	0x2001bf8c
 80296cc:	2001bf40 	.word	0x2001bf40
 80296d0:	2001bf8b 	.word	0x2001bf8b
 80296d4:	2001bf88 	.word	0x2001bf88
 80296d8:	0802db78 	.word	0x0802db78
 80296dc:	2001bf44 	.word	0x2001bf44
 80296e0:	2001bf38 	.word	0x2001bf38

080296e4 <StopWatch_Update_saveLbl>:
/*This function using for set saved value to label*/
void StopWatch_Update_saveLbl(void){
 80296e4:	b580      	push	{r7, lr}
 80296e6:	b084      	sub	sp, #16
 80296e8:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80296ea:	4b13      	ldr	r3, [pc, #76]	; (8029738 <StopWatch_Update_saveLbl+0x54>)
 80296ec:	781b      	ldrb	r3, [r3, #0]
 80296ee:	4618      	mov	r0, r3
 80296f0:	4b12      	ldr	r3, [pc, #72]	; (802973c <StopWatch_Update_saveLbl+0x58>)
 80296f2:	781b      	ldrb	r3, [r3, #0]
 80296f4:	461a      	mov	r2, r3
 80296f6:	4b12      	ldr	r3, [pc, #72]	; (8029740 <StopWatch_Update_saveLbl+0x5c>)
 80296f8:	781b      	ldrb	r3, [r3, #0]
 80296fa:	4619      	mov	r1, r3
 80296fc:	4b11      	ldr	r3, [pc, #68]	; (8029744 <StopWatch_Update_saveLbl+0x60>)
 80296fe:	881b      	ldrh	r3, [r3, #0]
 8029700:	9302      	str	r3, [sp, #8]
 8029702:	9101      	str	r1, [sp, #4]
 8029704:	9200      	str	r2, [sp, #0]
 8029706:	4603      	mov	r3, r0
 8029708:	4a0f      	ldr	r2, [pc, #60]	; (8029748 <StopWatch_Update_saveLbl+0x64>)
 802970a:	2140      	movs	r1, #64	; 0x40
 802970c:	480f      	ldr	r0, [pc, #60]	; (802974c <StopWatch_Update_saveLbl+0x68>)
 802970e:	f001 fd4b 	bl	802b1a8 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8029712:	4b0f      	ldr	r3, [pc, #60]	; (8029750 <StopWatch_Update_saveLbl+0x6c>)
 8029714:	681b      	ldr	r3, [r3, #0]
 8029716:	490d      	ldr	r1, [pc, #52]	; (802974c <StopWatch_Update_saveLbl+0x68>)
 8029718:	4618      	mov	r0, r3
 802971a:	f7f3 facb 	bl	801ccb4 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 802971e:	4b0c      	ldr	r3, [pc, #48]	; (8029750 <StopWatch_Update_saveLbl+0x6c>)
 8029720:	6818      	ldr	r0, [r3, #0]
 8029722:	2346      	movs	r3, #70	; 0x46
 8029724:	9300      	str	r3, [sp, #0]
 8029726:	2300      	movs	r3, #0
 8029728:	2200      	movs	r2, #0
 802972a:	2100      	movs	r1, #0
 802972c:	f7e0 f878 	bl	8009820 <lv_obj_align>
}
 8029730:	bf00      	nop
 8029732:	46bd      	mov	sp, r7
 8029734:	bd80      	pop	{r7, pc}
 8029736:	bf00      	nop
 8029738:	2001bf8c 	.word	0x2001bf8c
 802973c:	2001bf40 	.word	0x2001bf40
 8029740:	2001bf8b 	.word	0x2001bf8b
 8029744:	2001bf88 	.word	0x2001bf88
 8029748:	0802db78 	.word	0x0802db78
 802974c:	2001bf44 	.word	0x2001bf44
 8029750:	2001bf3c 	.word	0x2001bf3c

08029754 <StopWatch_Update_StatuImg>:
/*This function using for set statu image
 * @param statu using for select count statu
 * 0 -> stop statu
 * 1 -> pause statu
 * 2 -> play statu*/
void StopWatch_Update_StatuImg(uint8_t statu){
 8029754:	b580      	push	{r7, lr}
 8029756:	b082      	sub	sp, #8
 8029758:	af00      	add	r7, sp, #0
 802975a:	4603      	mov	r3, r0
 802975c:	71fb      	strb	r3, [r7, #7]
	if(0==statu){
 802975e:	79fb      	ldrb	r3, [r7, #7]
 8029760:	2b00      	cmp	r3, #0
 8029762:	d111      	bne.n	8029788 <StopWatch_Update_StatuImg+0x34>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8029764:	4b1f      	ldr	r3, [pc, #124]	; (80297e4 <StopWatch_Update_StatuImg+0x90>)
 8029766:	781b      	ldrb	r3, [r3, #0]
 8029768:	2b00      	cmp	r3, #0
 802976a:	d006      	beq.n	802977a <StopWatch_Update_StatuImg+0x26>
 802976c:	4b1e      	ldr	r3, [pc, #120]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 802976e:	681b      	ldr	r3, [r3, #0]
 8029770:	491e      	ldr	r1, [pc, #120]	; (80297ec <StopWatch_Update_StatuImg+0x98>)
 8029772:	4618      	mov	r0, r3
 8029774:	f7f2 fe7e 	bl	801c474 <lv_img_set_src>
	}
	else if(2==statu){
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
	}
}
 8029778:	e02f      	b.n	80297da <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 802977a:	4b1b      	ldr	r3, [pc, #108]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	491c      	ldr	r1, [pc, #112]	; (80297f0 <StopWatch_Update_StatuImg+0x9c>)
 8029780:	4618      	mov	r0, r3
 8029782:	f7f2 fe77 	bl	801c474 <lv_img_set_src>
}
 8029786:	e028      	b.n	80297da <StopWatch_Update_StatuImg+0x86>
	else if(1==statu){
 8029788:	79fb      	ldrb	r3, [r7, #7]
 802978a:	2b01      	cmp	r3, #1
 802978c:	d111      	bne.n	80297b2 <StopWatch_Update_StatuImg+0x5e>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &pauseBlack50x50);
 802978e:	4b15      	ldr	r3, [pc, #84]	; (80297e4 <StopWatch_Update_StatuImg+0x90>)
 8029790:	781b      	ldrb	r3, [r3, #0]
 8029792:	2b00      	cmp	r3, #0
 8029794:	d006      	beq.n	80297a4 <StopWatch_Update_StatuImg+0x50>
 8029796:	4b14      	ldr	r3, [pc, #80]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	4916      	ldr	r1, [pc, #88]	; (80297f4 <StopWatch_Update_StatuImg+0xa0>)
 802979c:	4618      	mov	r0, r3
 802979e:	f7f2 fe69 	bl	801c474 <lv_img_set_src>
}
 80297a2:	e01a      	b.n	80297da <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &pauseWhite50x50);
 80297a4:	4b10      	ldr	r3, [pc, #64]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 80297a6:	681b      	ldr	r3, [r3, #0]
 80297a8:	4913      	ldr	r1, [pc, #76]	; (80297f8 <StopWatch_Update_StatuImg+0xa4>)
 80297aa:	4618      	mov	r0, r3
 80297ac:	f7f2 fe62 	bl	801c474 <lv_img_set_src>
}
 80297b0:	e013      	b.n	80297da <StopWatch_Update_StatuImg+0x86>
	else if(2==statu){
 80297b2:	79fb      	ldrb	r3, [r7, #7]
 80297b4:	2b02      	cmp	r3, #2
 80297b6:	d110      	bne.n	80297da <StopWatch_Update_StatuImg+0x86>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
 80297b8:	4b0a      	ldr	r3, [pc, #40]	; (80297e4 <StopWatch_Update_StatuImg+0x90>)
 80297ba:	781b      	ldrb	r3, [r3, #0]
 80297bc:	2b00      	cmp	r3, #0
 80297be:	d006      	beq.n	80297ce <StopWatch_Update_StatuImg+0x7a>
 80297c0:	4b09      	ldr	r3, [pc, #36]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 80297c2:	681b      	ldr	r3, [r3, #0]
 80297c4:	490d      	ldr	r1, [pc, #52]	; (80297fc <StopWatch_Update_StatuImg+0xa8>)
 80297c6:	4618      	mov	r0, r3
 80297c8:	f7f2 fe54 	bl	801c474 <lv_img_set_src>
}
 80297cc:	e005      	b.n	80297da <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
 80297ce:	4b06      	ldr	r3, [pc, #24]	; (80297e8 <StopWatch_Update_StatuImg+0x94>)
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	490b      	ldr	r1, [pc, #44]	; (8029800 <StopWatch_Update_StatuImg+0xac>)
 80297d4:	4618      	mov	r0, r3
 80297d6:	f7f2 fe4d 	bl	801c474 <lv_img_set_src>
}
 80297da:	bf00      	nop
 80297dc:	3708      	adds	r7, #8
 80297de:	46bd      	mov	sp, r7
 80297e0:	bd80      	pop	{r7, pc}
 80297e2:	bf00      	nop
 80297e4:	2001bf34 	.word	0x2001bf34
 80297e8:	2001bf84 	.word	0x2001bf84
 80297ec:	08044850 	.word	0x08044850
 80297f0:	08045be4 	.word	0x08045be4
 80297f4:	0803e788 	.word	0x0803e788
 80297f8:	0803fb1c 	.word	0x0803fb1c
 80297fc:	08040eb0 	.word	0x08040eb0
 8029800:	08042244 	.word	0x08042244

08029804 <StopWatch_TaskControllerSet>:



//Setter Getter Functions

void StopWatch_TaskControllerSet(bool active){
 8029804:	b480      	push	{r7}
 8029806:	b083      	sub	sp, #12
 8029808:	af00      	add	r7, sp, #0
 802980a:	4603      	mov	r3, r0
 802980c:	71fb      	strb	r3, [r7, #7]
	SW_taskController = active;
 802980e:	4a04      	ldr	r2, [pc, #16]	; (8029820 <StopWatch_TaskControllerSet+0x1c>)
 8029810:	79fb      	ldrb	r3, [r7, #7]
 8029812:	7013      	strb	r3, [r2, #0]
}
 8029814:	bf00      	nop
 8029816:	370c      	adds	r7, #12
 8029818:	46bd      	mov	sp, r7
 802981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802981e:	4770      	bx	lr
 8029820:	2001bf8d 	.word	0x2001bf8d

08029824 <StopWatch_TaskControllerGet>:
bool StopWatch_TaskControllerGet(void){
 8029824:	b480      	push	{r7}
 8029826:	af00      	add	r7, sp, #0
	return SW_taskController;
 8029828:	4b03      	ldr	r3, [pc, #12]	; (8029838 <StopWatch_TaskControllerGet+0x14>)
 802982a:	781b      	ldrb	r3, [r3, #0]
}
 802982c:	4618      	mov	r0, r3
 802982e:	46bd      	mov	sp, r7
 8029830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029834:	4770      	bx	lr
 8029836:	bf00      	nop
 8029838:	2001bf8d 	.word	0x2001bf8d

0802983c <tos_getBatteryVAl>:
#include "../../lvgl/lvgl.h"

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp);
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal);

void tos_getBatteryVAl(uint8_t batteryVal,uint8_t Screen){
 802983c:	b580      	push	{r7, lr}
 802983e:	b084      	sub	sp, #16
 8029840:	af00      	add	r7, sp, #0
 8029842:	4603      	mov	r3, r0
 8029844:	460a      	mov	r2, r1
 8029846:	71fb      	strb	r3, [r7, #7]
 8029848:	4613      	mov	r3, r2
 802984a:	71bb      	strb	r3, [r7, #6]
	static uint8_t batteryValueTemp = 255;
	if (batteryVal != batteryValueTemp){
 802984c:	4b12      	ldr	r3, [pc, #72]	; (8029898 <tos_getBatteryVAl+0x5c>)
 802984e:	781b      	ldrb	r3, [r3, #0]
 8029850:	79fa      	ldrb	r2, [r7, #7]
 8029852:	429a      	cmp	r2, r3
 8029854:	d01d      	beq.n	8029892 <tos_getBatteryVAl+0x56>
	char * batterySym= tos_BatteryVal_Sym_Helper(batteryVal,batteryValueTemp);
 8029856:	4b10      	ldr	r3, [pc, #64]	; (8029898 <tos_getBatteryVAl+0x5c>)
 8029858:	781a      	ldrb	r2, [r3, #0]
 802985a:	79fb      	ldrb	r3, [r7, #7]
 802985c:	4611      	mov	r1, r2
 802985e:	4618      	mov	r0, r3
 8029860:	f000 f81c 	bl	802989c <tos_BatteryVal_Sym_Helper>
 8029864:	60f8      	str	r0, [r7, #12]
	lv_color_t batteryClr = tos_BatteryVal_SymColor_Helper(batteryVal);
 8029866:	79fb      	ldrb	r3, [r7, #7]
 8029868:	4618      	mov	r0, r3
 802986a:	f000 f889 	bl	8029980 <tos_BatteryVal_SymColor_Helper>
 802986e:	4603      	mov	r3, r0
 8029870:	813b      	strh	r3, [r7, #8]
	switch(Screen){
 8029872:	79bb      	ldrb	r3, [r7, #6]
 8029874:	2b00      	cmp	r3, #0
 8029876:	d002      	beq.n	802987e <tos_getBatteryVAl+0x42>
 8029878:	2b01      	cmp	r3, #1
 802987a:	d005      	beq.n	8029888 <tos_getBatteryVAl+0x4c>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
	/*case TOS_SCREEN_STOPWATCH_: tos_MainScreen_Init(1,1);break;
	case TOS_SCREEN_NOTIFICATIONS_: break;*/
	default: return;
 802987c:	e009      	b.n	8029892 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
 802987e:	8939      	ldrh	r1, [r7, #8]
 8029880:	68f8      	ldr	r0, [r7, #12]
 8029882:	f7fb f80d 	bl	80248a0 <MainScreen_SetBatteryVal>
 8029886:	e004      	b.n	8029892 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
 8029888:	8939      	ldrh	r1, [r7, #8]
 802988a:	68f8      	ldr	r0, [r7, #12]
 802988c:	f7fe ff22 	bl	80286d4 <SleepModeScreen_SetBatteryVal>
 8029890:	bf00      	nop
	}

	}
}
 8029892:	3710      	adds	r7, #16
 8029894:	46bd      	mov	sp, r7
 8029896:	bd80      	pop	{r7, pc}
 8029898:	2000284c 	.word	0x2000284c

0802989c <tos_BatteryVal_Sym_Helper>:

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp){
 802989c:	b480      	push	{r7}
 802989e:	b083      	sub	sp, #12
 80298a0:	af00      	add	r7, sp, #0
 80298a2:	4603      	mov	r3, r0
 80298a4:	460a      	mov	r2, r1
 80298a6:	71fb      	strb	r3, [r7, #7]
 80298a8:	4613      	mov	r3, r2
 80298aa:	71bb      	strb	r3, [r7, #6]
		if(batteryVal <= batteryValueTemp){
 80298ac:	79fa      	ldrb	r2, [r7, #7]
 80298ae:	79bb      	ldrb	r3, [r7, #6]
 80298b0:	429a      	cmp	r2, r3
 80298b2:	d824      	bhi.n	80298fe <tos_BatteryVal_Sym_Helper+0x62>
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 80298b4:	79fb      	ldrb	r3, [r7, #7]
 80298b6:	2b09      	cmp	r3, #9
 80298b8:	d801      	bhi.n	80298be <tos_BatteryVal_Sym_Helper+0x22>
 80298ba:	4b27      	ldr	r3, [pc, #156]	; (8029958 <tos_BatteryVal_Sym_Helper+0xbc>)
 80298bc:	e045      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_BATTERY_1;
 80298be:	79fb      	ldrb	r3, [r7, #7]
 80298c0:	2b09      	cmp	r3, #9
 80298c2:	d904      	bls.n	80298ce <tos_BatteryVal_Sym_Helper+0x32>
 80298c4:	79fb      	ldrb	r3, [r7, #7]
 80298c6:	2b18      	cmp	r3, #24
 80298c8:	d801      	bhi.n	80298ce <tos_BatteryVal_Sym_Helper+0x32>
 80298ca:	4b24      	ldr	r3, [pc, #144]	; (802995c <tos_BatteryVal_Sym_Helper+0xc0>)
 80298cc:	e03d      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_BATTERY_2;
 80298ce:	79fb      	ldrb	r3, [r7, #7]
 80298d0:	2b18      	cmp	r3, #24
 80298d2:	d904      	bls.n	80298de <tos_BatteryVal_Sym_Helper+0x42>
 80298d4:	79fb      	ldrb	r3, [r7, #7]
 80298d6:	2b31      	cmp	r3, #49	; 0x31
 80298d8:	d801      	bhi.n	80298de <tos_BatteryVal_Sym_Helper+0x42>
 80298da:	4b21      	ldr	r3, [pc, #132]	; (8029960 <tos_BatteryVal_Sym_Helper+0xc4>)
 80298dc:	e035      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_BATTERY_3;
 80298de:	79fb      	ldrb	r3, [r7, #7]
 80298e0:	2b31      	cmp	r3, #49	; 0x31
 80298e2:	d904      	bls.n	80298ee <tos_BatteryVal_Sym_Helper+0x52>
 80298e4:	79fb      	ldrb	r3, [r7, #7]
 80298e6:	2b4f      	cmp	r3, #79	; 0x4f
 80298e8:	d801      	bhi.n	80298ee <tos_BatteryVal_Sym_Helper+0x52>
 80298ea:	4b1e      	ldr	r3, [pc, #120]	; (8029964 <tos_BatteryVal_Sym_Helper+0xc8>)
 80298ec:	e02d      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_BATTERY_FULL;
 80298ee:	79fb      	ldrb	r3, [r7, #7]
 80298f0:	2b4f      	cmp	r3, #79	; 0x4f
 80298f2:	d929      	bls.n	8029948 <tos_BatteryVal_Sym_Helper+0xac>
 80298f4:	79fb      	ldrb	r3, [r7, #7]
 80298f6:	2b64      	cmp	r3, #100	; 0x64
 80298f8:	d826      	bhi.n	8029948 <tos_BatteryVal_Sym_Helper+0xac>
 80298fa:	4b1b      	ldr	r3, [pc, #108]	; (8029968 <tos_BatteryVal_Sym_Helper+0xcc>)
 80298fc:	e025      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
	}else{
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 80298fe:	79fb      	ldrb	r3, [r7, #7]
 8029900:	2b09      	cmp	r3, #9
 8029902:	d801      	bhi.n	8029908 <tos_BatteryVal_Sym_Helper+0x6c>
 8029904:	4b14      	ldr	r3, [pc, #80]	; (8029958 <tos_BatteryVal_Sym_Helper+0xbc>)
 8029906:	e020      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_1;
 8029908:	79fb      	ldrb	r3, [r7, #7]
 802990a:	2b09      	cmp	r3, #9
 802990c:	d904      	bls.n	8029918 <tos_BatteryVal_Sym_Helper+0x7c>
 802990e:	79fb      	ldrb	r3, [r7, #7]
 8029910:	2b18      	cmp	r3, #24
 8029912:	d801      	bhi.n	8029918 <tos_BatteryVal_Sym_Helper+0x7c>
 8029914:	4b15      	ldr	r3, [pc, #84]	; (802996c <tos_BatteryVal_Sym_Helper+0xd0>)
 8029916:	e018      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_2;
 8029918:	79fb      	ldrb	r3, [r7, #7]
 802991a:	2b18      	cmp	r3, #24
 802991c:	d904      	bls.n	8029928 <tos_BatteryVal_Sym_Helper+0x8c>
 802991e:	79fb      	ldrb	r3, [r7, #7]
 8029920:	2b31      	cmp	r3, #49	; 0x31
 8029922:	d801      	bhi.n	8029928 <tos_BatteryVal_Sym_Helper+0x8c>
 8029924:	4b12      	ldr	r3, [pc, #72]	; (8029970 <tos_BatteryVal_Sym_Helper+0xd4>)
 8029926:	e010      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_3;
 8029928:	79fb      	ldrb	r3, [r7, #7]
 802992a:	2b31      	cmp	r3, #49	; 0x31
 802992c:	d904      	bls.n	8029938 <tos_BatteryVal_Sym_Helper+0x9c>
 802992e:	79fb      	ldrb	r3, [r7, #7]
 8029930:	2b4f      	cmp	r3, #79	; 0x4f
 8029932:	d801      	bhi.n	8029938 <tos_BatteryVal_Sym_Helper+0x9c>
 8029934:	4b0f      	ldr	r3, [pc, #60]	; (8029974 <tos_BatteryVal_Sym_Helper+0xd8>)
 8029936:	e008      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_FULL;
 8029938:	79fb      	ldrb	r3, [r7, #7]
 802993a:	2b4f      	cmp	r3, #79	; 0x4f
 802993c:	d904      	bls.n	8029948 <tos_BatteryVal_Sym_Helper+0xac>
 802993e:	79fb      	ldrb	r3, [r7, #7]
 8029940:	2b64      	cmp	r3, #100	; 0x64
 8029942:	d801      	bhi.n	8029948 <tos_BatteryVal_Sym_Helper+0xac>
 8029944:	4b0c      	ldr	r3, [pc, #48]	; (8029978 <tos_BatteryVal_Sym_Helper+0xdc>)
 8029946:	e000      	b.n	802994a <tos_BatteryVal_Sym_Helper+0xae>
			}
		return "err";
 8029948:	4b0c      	ldr	r3, [pc, #48]	; (802997c <tos_BatteryVal_Sym_Helper+0xe0>)
}
 802994a:	4618      	mov	r0, r3
 802994c:	370c      	adds	r7, #12
 802994e:	46bd      	mov	sp, r7
 8029950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029954:	4770      	bx	lr
 8029956:	bf00      	nop
 8029958:	0802dbac 	.word	0x0802dbac
 802995c:	0802dbb0 	.word	0x0802dbb0
 8029960:	0802dbb4 	.word	0x0802dbb4
 8029964:	0802dbb8 	.word	0x0802dbb8
 8029968:	0802dbbc 	.word	0x0802dbbc
 802996c:	0802dbc0 	.word	0x0802dbc0
 8029970:	0802dbc8 	.word	0x0802dbc8
 8029974:	0802dbd0 	.word	0x0802dbd0
 8029978:	0802dbd8 	.word	0x0802dbd8
 802997c:	0802dbe0 	.word	0x0802dbe0

08029980 <tos_BatteryVal_SymColor_Helper>:
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal){
 8029980:	b480      	push	{r7}
 8029982:	b083      	sub	sp, #12
 8029984:	af00      	add	r7, sp, #0
 8029986:	4602      	mov	r2, r0
 8029988:	71fa      	strb	r2, [r7, #7]
			if (batteryVal < 10 && batteryVal >= 0) return LV_COLOR_RED;
 802998a:	79fa      	ldrb	r2, [r7, #7]
 802998c:	2a09      	cmp	r2, #9
 802998e:	d808      	bhi.n	80299a2 <tos_BatteryVal_SymColor_Helper+0x22>
 8029990:	f36f 0302 	bfc	r3, #0, #3
 8029994:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8029998:	f36f 230c 	bfc	r3, #8, #5
 802999c:	f36f 334f 	bfc	r3, #13, #3
 80299a0:	e038      	b.n	8029a14 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_COLOR_RED;
 80299a2:	79fa      	ldrb	r2, [r7, #7]
 80299a4:	2a09      	cmp	r2, #9
 80299a6:	d90b      	bls.n	80299c0 <tos_BatteryVal_SymColor_Helper+0x40>
 80299a8:	79fa      	ldrb	r2, [r7, #7]
 80299aa:	2a18      	cmp	r2, #24
 80299ac:	d808      	bhi.n	80299c0 <tos_BatteryVal_SymColor_Helper+0x40>
 80299ae:	f36f 0302 	bfc	r3, #0, #3
 80299b2:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80299b6:	f36f 230c 	bfc	r3, #8, #5
 80299ba:	f36f 334f 	bfc	r3, #13, #3
 80299be:	e029      	b.n	8029a14 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_COLOR_ORANGE;
 80299c0:	79fa      	ldrb	r2, [r7, #7]
 80299c2:	2a18      	cmp	r2, #24
 80299c4:	d905      	bls.n	80299d2 <tos_BatteryVal_SymColor_Helper+0x52>
 80299c6:	79fa      	ldrb	r2, [r7, #7]
 80299c8:	2a31      	cmp	r2, #49	; 0x31
 80299ca:	d802      	bhi.n	80299d2 <tos_BatteryVal_SymColor_Helper+0x52>
 80299cc:	4b14      	ldr	r3, [pc, #80]	; (8029a20 <tos_BatteryVal_SymColor_Helper+0xa0>)
 80299ce:	881b      	ldrh	r3, [r3, #0]
 80299d0:	e020      	b.n	8029a14 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_COLOR_ORANGE;
 80299d2:	79fa      	ldrb	r2, [r7, #7]
 80299d4:	2a31      	cmp	r2, #49	; 0x31
 80299d6:	d905      	bls.n	80299e4 <tos_BatteryVal_SymColor_Helper+0x64>
 80299d8:	79fa      	ldrb	r2, [r7, #7]
 80299da:	2a4f      	cmp	r2, #79	; 0x4f
 80299dc:	d802      	bhi.n	80299e4 <tos_BatteryVal_SymColor_Helper+0x64>
 80299de:	4b10      	ldr	r3, [pc, #64]	; (8029a20 <tos_BatteryVal_SymColor_Helper+0xa0>)
 80299e0:	881b      	ldrh	r3, [r3, #0]
 80299e2:	e017      	b.n	8029a14 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_COLOR_GREEN;
 80299e4:	79fa      	ldrb	r2, [r7, #7]
 80299e6:	2a4f      	cmp	r2, #79	; 0x4f
 80299e8:	d90c      	bls.n	8029a04 <tos_BatteryVal_SymColor_Helper+0x84>
 80299ea:	79fa      	ldrb	r2, [r7, #7]
 80299ec:	2a64      	cmp	r2, #100	; 0x64
 80299ee:	d809      	bhi.n	8029a04 <tos_BatteryVal_SymColor_Helper+0x84>
 80299f0:	2204      	movs	r2, #4
 80299f2:	f362 0302 	bfi	r3, r2, #0, #3
 80299f6:	f36f 03c7 	bfc	r3, #3, #5
 80299fa:	f36f 230c 	bfc	r3, #8, #5
 80299fe:	f36f 334f 	bfc	r3, #13, #3
 8029a02:	e007      	b.n	8029a14 <tos_BatteryVal_SymColor_Helper+0x94>

			return LV_COLOR_BLUE;
 8029a04:	f36f 0302 	bfc	r3, #0, #3
 8029a08:	f36f 03c7 	bfc	r3, #3, #5
 8029a0c:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8029a10:	f36f 334f 	bfc	r3, #13, #3
}
 8029a14:	4618      	mov	r0, r3
 8029a16:	370c      	adds	r7, #12
 8029a18:	46bd      	mov	sp, r7
 8029a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a1e:	4770      	bx	lr
 8029a20:	0802dbe4 	.word	0x0802dbe4

08029a24 <tos_Bluetooth_NotificationItemInit>:
void tos_Bluetooth_SetBatteryVal(uint8_t batteryVal);
void tos_Bluetooth_SetStepsVal(uint8_t stepsVal);
void tos_Bluetooth_GetTimeAndDate(RTC_HandleTypeDef *hrtc);
void tos_Bluetooth_StartListening(void);

void tos_Bluetooth_NotificationItemInit(void){
 8029a24:	b580      	push	{r7, lr}
 8029a26:	af00      	add	r7, sp, #0
	blNotroot=tos_Notification_CreateRoot(blNotroot);
 8029a28:	4b11      	ldr	r3, [pc, #68]	; (8029a70 <tos_Bluetooth_NotificationItemInit+0x4c>)
 8029a2a:	681b      	ldr	r3, [r3, #0]
 8029a2c:	4618      	mov	r0, r3
 8029a2e:	f000 fed1 	bl	802a7d4 <tos_Notification_CreateRoot>
 8029a32:	4602      	mov	r2, r0
 8029a34:	4b0e      	ldr	r3, [pc, #56]	; (8029a70 <tos_Bluetooth_NotificationItemInit+0x4c>)
 8029a36:	601a      	str	r2, [r3, #0]
	blNotnode=tos_Notification_SetFirstNode(blNotroot,blNotnode);
 8029a38:	4b0d      	ldr	r3, [pc, #52]	; (8029a70 <tos_Bluetooth_NotificationItemInit+0x4c>)
 8029a3a:	681a      	ldr	r2, [r3, #0]
 8029a3c:	4b0d      	ldr	r3, [pc, #52]	; (8029a74 <tos_Bluetooth_NotificationItemInit+0x50>)
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	4619      	mov	r1, r3
 8029a42:	4610      	mov	r0, r2
 8029a44:	f000 fed5 	bl	802a7f2 <tos_Notification_SetFirstNode>
 8029a48:	4602      	mov	r2, r0
 8029a4a:	4b0a      	ldr	r3, [pc, #40]	; (8029a74 <tos_Bluetooth_NotificationItemInit+0x50>)
 8029a4c:	601a      	str	r2, [r3, #0]
	NotificationScreen_SetNotrootAndnode(blNotroot,blNotnode);
 8029a4e:	4b08      	ldr	r3, [pc, #32]	; (8029a70 <tos_Bluetooth_NotificationItemInit+0x4c>)
 8029a50:	681a      	ldr	r2, [r3, #0]
 8029a52:	4b08      	ldr	r3, [pc, #32]	; (8029a74 <tos_Bluetooth_NotificationItemInit+0x50>)
 8029a54:	681b      	ldr	r3, [r3, #0]
 8029a56:	4619      	mov	r1, r3
 8029a58:	4610      	mov	r0, r2
 8029a5a:	f7fc f95d 	bl	8025d18 <NotificationScreen_SetNotrootAndnode>
	bluetooth_Disable();
 8029a5e:	2200      	movs	r2, #0
 8029a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8029a64:	4804      	ldr	r0, [pc, #16]	; (8029a78 <tos_Bluetooth_NotificationItemInit+0x54>)
 8029a66:	f7d8 fb23 	bl	80020b0 <HAL_GPIO_WritePin>
}
 8029a6a:	bf00      	nop
 8029a6c:	bd80      	pop	{r7, pc}
 8029a6e:	bf00      	nop
 8029a70:	2001c1d0 	.word	0x2001c1d0
 8029a74:	2001c064 	.word	0x2001c064
 8029a78:	40020800 	.word	0x40020800

08029a7c <tos_BluetoothReceiverAndTransmitter>:
void tos_BluetoothReceiverAndTransmitter(RTC_HandleTypeDef *hrtc){
 8029a7c:	b580      	push	{r7, lr}
 8029a7e:	b082      	sub	sp, #8
 8029a80:	af00      	add	r7, sp, #0
 8029a82:	6078      	str	r0, [r7, #4]
	tos_BluetoothEnableController();
 8029a84:	f000 fac2 	bl	802a00c <tos_BluetoothEnableController>
	if(bluetoothEnable){
 8029a88:	4b12      	ldr	r3, [pc, #72]	; (8029ad4 <tos_BluetoothReceiverAndTransmitter+0x58>)
 8029a8a:	781b      	ldrb	r3, [r3, #0]
 8029a8c:	2b00      	cmp	r3, #0
 8029a8e:	d017      	beq.n	8029ac0 <tos_BluetoothReceiverAndTransmitter+0x44>
		tos_Bluetooth_isConnected();
 8029a90:	f000 f826 	bl	8029ae0 <tos_Bluetooth_isConnected>
		tos_Bluetooth_StartListening();
 8029a94:	f000 f854 	bl	8029b40 <tos_Bluetooth_StartListening>
		tos_Bluetooth_GetTimeAndDate(hrtc);
 8029a98:	6878      	ldr	r0, [r7, #4]
 8029a9a:	f000 f865 	bl	8029b68 <tos_Bluetooth_GetTimeAndDate>
		tos_Bluetooth_GetAndPushNotification();
 8029a9e:	f000 f8f3 	bl	8029c88 <tos_Bluetooth_GetAndPushNotification>
		tos_Bluetooth_GetAndPushMusic();
 8029aa2:	f000 f949 	bl	8029d38 <tos_Bluetooth_GetAndPushMusic>
		tos_Bluetooth_SetMusicVAls();
 8029aa6:	f000 f9a7 	bl	8029df8 <tos_Bluetooth_SetMusicVAls>
		tos_Bluetooth_SetBatteryVal(BluetoothBatteryVal);
 8029aaa:	4b0b      	ldr	r3, [pc, #44]	; (8029ad8 <tos_BluetoothReceiverAndTransmitter+0x5c>)
 8029aac:	781b      	ldrb	r3, [r3, #0]
 8029aae:	4618      	mov	r0, r3
 8029ab0:	f000 f9f0 	bl	8029e94 <tos_Bluetooth_SetBatteryVal>
		tos_Bluetooth_SetStepsVal(BluetoothStepsVal);
 8029ab4:	4b09      	ldr	r3, [pc, #36]	; (8029adc <tos_BluetoothReceiverAndTransmitter+0x60>)
 8029ab6:	881b      	ldrh	r3, [r3, #0]
 8029ab8:	b2db      	uxtb	r3, r3
 8029aba:	4618      	mov	r0, r3
 8029abc:	f000 fa16 	bl	8029eec <tos_Bluetooth_SetStepsVal>

	}
	bluetoothEnable =tos_Gui_GetWorkingSystemVal();
 8029ac0:	f000 fe7c 	bl	802a7bc <tos_Gui_GetWorkingSystemVal>
 8029ac4:	4603      	mov	r3, r0
 8029ac6:	461a      	mov	r2, r3
 8029ac8:	4b02      	ldr	r3, [pc, #8]	; (8029ad4 <tos_BluetoothReceiverAndTransmitter+0x58>)
 8029aca:	701a      	strb	r2, [r3, #0]
}
 8029acc:	bf00      	nop
 8029ace:	3708      	adds	r7, #8
 8029ad0:	46bd      	mov	sp, r7
 8029ad2:	bd80      	pop	{r7, pc}
 8029ad4:	2000284d 	.word	0x2000284d
 8029ad8:	2001c1dc 	.word	0x2001c1dc
 8029adc:	2001c1de 	.word	0x2001c1de

08029ae0 <tos_Bluetooth_isConnected>:
/*This function using for first connect send connected message*/
void tos_Bluetooth_isConnected(void){
 8029ae0:	b580      	push	{r7, lr}
 8029ae2:	af00      	add	r7, sp, #0
	  isConnected=BLUETOOTH_IS_CONNECT;
 8029ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8029ae8:	4810      	ldr	r0, [pc, #64]	; (8029b2c <tos_Bluetooth_isConnected+0x4c>)
 8029aea:	f7d8 fac9 	bl	8002080 <HAL_GPIO_ReadPin>
 8029aee:	4603      	mov	r3, r0
 8029af0:	2b00      	cmp	r3, #0
 8029af2:	bf14      	ite	ne
 8029af4:	2301      	movne	r3, #1
 8029af6:	2300      	moveq	r3, #0
 8029af8:	b2da      	uxtb	r2, r3
 8029afa:	4b0d      	ldr	r3, [pc, #52]	; (8029b30 <tos_Bluetooth_isConnected+0x50>)
 8029afc:	701a      	strb	r2, [r3, #0]
	  if(befConnectVal!=isConnected){
 8029afe:	4b0d      	ldr	r3, [pc, #52]	; (8029b34 <tos_Bluetooth_isConnected+0x54>)
 8029b00:	781a      	ldrb	r2, [r3, #0]
 8029b02:	4b0b      	ldr	r3, [pc, #44]	; (8029b30 <tos_Bluetooth_isConnected+0x50>)
 8029b04:	781b      	ldrb	r3, [r3, #0]
 8029b06:	429a      	cmp	r2, r3
 8029b08:	d00d      	beq.n	8029b26 <tos_Bluetooth_isConnected+0x46>
	  if(isConnected) HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "connected", 9,50);
 8029b0a:	4b09      	ldr	r3, [pc, #36]	; (8029b30 <tos_Bluetooth_isConnected+0x50>)
 8029b0c:	781b      	ldrb	r3, [r3, #0]
 8029b0e:	2b00      	cmp	r3, #0
 8029b10:	d005      	beq.n	8029b1e <tos_Bluetooth_isConnected+0x3e>
 8029b12:	2332      	movs	r3, #50	; 0x32
 8029b14:	2209      	movs	r2, #9
 8029b16:	4908      	ldr	r1, [pc, #32]	; (8029b38 <tos_Bluetooth_isConnected+0x58>)
 8029b18:	4808      	ldr	r0, [pc, #32]	; (8029b3c <tos_Bluetooth_isConnected+0x5c>)
 8029b1a:	f7db f9fc 	bl	8004f16 <HAL_UART_Transmit>
	  befConnectVal=isConnected;
 8029b1e:	4b04      	ldr	r3, [pc, #16]	; (8029b30 <tos_Bluetooth_isConnected+0x50>)
 8029b20:	781a      	ldrb	r2, [r3, #0]
 8029b22:	4b04      	ldr	r3, [pc, #16]	; (8029b34 <tos_Bluetooth_isConnected+0x54>)
 8029b24:	701a      	strb	r2, [r3, #0]
	  }
}
 8029b26:	bf00      	nop
 8029b28:	bd80      	pop	{r7, pc}
 8029b2a:	bf00      	nop
 8029b2c:	40020800 	.word	0x40020800
 8029b30:	2001c090 	.word	0x2001c090
 8029b34:	2001c1d4 	.word	0x2001c1d4
 8029b38:	0802dbe8 	.word	0x0802dbe8
 8029b3c:	2001b6cc 	.word	0x2001b6cc

08029b40 <tos_Bluetooth_StartListening>:
/*This function using for start listening sender device*/
void tos_Bluetooth_StartListening(void){
 8029b40:	b580      	push	{r7, lr}
 8029b42:	af00      	add	r7, sp, #0
	if(isConnected)HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 250, 250);
 8029b44:	4b05      	ldr	r3, [pc, #20]	; (8029b5c <tos_Bluetooth_StartListening+0x1c>)
 8029b46:	781b      	ldrb	r3, [r3, #0]
 8029b48:	2b00      	cmp	r3, #0
 8029b4a:	d005      	beq.n	8029b58 <tos_Bluetooth_StartListening+0x18>
 8029b4c:	23fa      	movs	r3, #250	; 0xfa
 8029b4e:	22fa      	movs	r2, #250	; 0xfa
 8029b50:	4903      	ldr	r1, [pc, #12]	; (8029b60 <tos_Bluetooth_StartListening+0x20>)
 8029b52:	4804      	ldr	r0, [pc, #16]	; (8029b64 <tos_Bluetooth_StartListening+0x24>)
 8029b54:	f7db fa78 	bl	8005048 <HAL_UART_Receive>
}
 8029b58:	bf00      	nop
 8029b5a:	bd80      	pop	{r7, pc}
 8029b5c:	2001c090 	.word	0x2001c090
 8029b60:	2001c094 	.word	0x2001c094
 8029b64:	2001b6cc 	.word	0x2001b6cc

08029b68 <tos_Bluetooth_GetTimeAndDate>:
/*This function using for set time and date values and set Rtc
 * @param hrtc using for get rtc module*/
void tos_Bluetooth_GetTimeAndDate(RTC_HandleTypeDef *hrtc){
 8029b68:	b580      	push	{r7, lr}
 8029b6a:	b084      	sub	sp, #16
 8029b6c:	af02      	add	r7, sp, #8
 8029b6e:	6078      	str	r0, [r7, #4]
	 if(isConnected){
 8029b70:	4b36      	ldr	r3, [pc, #216]	; (8029c4c <tos_Bluetooth_GetTimeAndDate+0xe4>)
 8029b72:	781b      	ldrb	r3, [r3, #0]
 8029b74:	2b00      	cmp	r3, #0
 8029b76:	d064      	beq.n	8029c42 <tos_Bluetooth_GetTimeAndDate+0xda>
		 tmp=&rx_buffer[0];
 8029b78:	4b35      	ldr	r3, [pc, #212]	; (8029c50 <tos_Bluetooth_GetTimeAndDate+0xe8>)
 8029b7a:	4a36      	ldr	r2, [pc, #216]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029b7c:	601a      	str	r2, [r3, #0]
		 if(rx_buffer[0]=='d' && rx_buffer[1]=='a' && rx_buffer[2]=='t' && rx_buffer[3]=='e'){
 8029b7e:	4b35      	ldr	r3, [pc, #212]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029b80:	781b      	ldrb	r3, [r3, #0]
 8029b82:	2b64      	cmp	r3, #100	; 0x64
 8029b84:	d12c      	bne.n	8029be0 <tos_Bluetooth_GetTimeAndDate+0x78>
 8029b86:	4b33      	ldr	r3, [pc, #204]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029b88:	785b      	ldrb	r3, [r3, #1]
 8029b8a:	2b61      	cmp	r3, #97	; 0x61
 8029b8c:	d128      	bne.n	8029be0 <tos_Bluetooth_GetTimeAndDate+0x78>
 8029b8e:	4b31      	ldr	r3, [pc, #196]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029b90:	789b      	ldrb	r3, [r3, #2]
 8029b92:	2b74      	cmp	r3, #116	; 0x74
 8029b94:	d124      	bne.n	8029be0 <tos_Bluetooth_GetTimeAndDate+0x78>
 8029b96:	4b2f      	ldr	r3, [pc, #188]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029b98:	78db      	ldrb	r3, [r3, #3]
 8029b9a:	2b65      	cmp	r3, #101	; 0x65
 8029b9c:	d120      	bne.n	8029be0 <tos_Bluetooth_GetTimeAndDate+0x78>
			 sscanf(tmp,"date: %d %d %d", &time[0],&time[1],&time[2]);
 8029b9e:	4b2c      	ldr	r3, [pc, #176]	; (8029c50 <tos_Bluetooth_GetTimeAndDate+0xe8>)
 8029ba0:	6818      	ldr	r0, [r3, #0]
 8029ba2:	4b2d      	ldr	r3, [pc, #180]	; (8029c58 <tos_Bluetooth_GetTimeAndDate+0xf0>)
 8029ba4:	9300      	str	r3, [sp, #0]
 8029ba6:	4b2d      	ldr	r3, [pc, #180]	; (8029c5c <tos_Bluetooth_GetTimeAndDate+0xf4>)
 8029ba8:	4a2d      	ldr	r2, [pc, #180]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029baa:	492e      	ldr	r1, [pc, #184]	; (8029c64 <tos_Bluetooth_GetTimeAndDate+0xfc>)
 8029bac:	f001 fb50 	bl	802b250 <siscanf>
			 HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetDate", 10,100);
 8029bb0:	2364      	movs	r3, #100	; 0x64
 8029bb2:	220a      	movs	r2, #10
 8029bb4:	492c      	ldr	r1, [pc, #176]	; (8029c68 <tos_Bluetooth_GetTimeAndDate+0x100>)
 8029bb6:	482d      	ldr	r0, [pc, #180]	; (8029c6c <tos_Bluetooth_GetTimeAndDate+0x104>)
 8029bb8:	f7db f9ad 	bl	8004f16 <HAL_UART_Transmit>
			 tos_RTC_SetDate(hrtc,time[2],time[1],time[0]);
 8029bbc:	4b28      	ldr	r3, [pc, #160]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029bbe:	889b      	ldrh	r3, [r3, #4]
 8029bc0:	b2d9      	uxtb	r1, r3
 8029bc2:	4b27      	ldr	r3, [pc, #156]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029bc4:	885b      	ldrh	r3, [r3, #2]
 8029bc6:	b2da      	uxtb	r2, r3
 8029bc8:	4b25      	ldr	r3, [pc, #148]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029bca:	881b      	ldrh	r3, [r3, #0]
 8029bcc:	b2db      	uxtb	r3, r3
 8029bce:	6878      	ldr	r0, [r7, #4]
 8029bd0:	f000 ffa2 	bl	802ab18 <tos_RTC_SetDate>
			 sprintf(rx_buffer, "OK");
 8029bd4:	4b1f      	ldr	r3, [pc, #124]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029bd6:	4a26      	ldr	r2, [pc, #152]	; (8029c70 <tos_Bluetooth_GetTimeAndDate+0x108>)
 8029bd8:	8811      	ldrh	r1, [r2, #0]
 8029bda:	7892      	ldrb	r2, [r2, #2]
 8029bdc:	8019      	strh	r1, [r3, #0]
 8029bde:	709a      	strb	r2, [r3, #2]
		 }
		 if(rx_buffer[0]=='t' && rx_buffer[1]=='i' && rx_buffer[2]=='m' && rx_buffer[3]=='e'){
 8029be0:	4b1c      	ldr	r3, [pc, #112]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029be2:	781b      	ldrb	r3, [r3, #0]
 8029be4:	2b74      	cmp	r3, #116	; 0x74
 8029be6:	d12c      	bne.n	8029c42 <tos_Bluetooth_GetTimeAndDate+0xda>
 8029be8:	4b1a      	ldr	r3, [pc, #104]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029bea:	785b      	ldrb	r3, [r3, #1]
 8029bec:	2b69      	cmp	r3, #105	; 0x69
 8029bee:	d128      	bne.n	8029c42 <tos_Bluetooth_GetTimeAndDate+0xda>
 8029bf0:	4b18      	ldr	r3, [pc, #96]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029bf2:	789b      	ldrb	r3, [r3, #2]
 8029bf4:	2b6d      	cmp	r3, #109	; 0x6d
 8029bf6:	d124      	bne.n	8029c42 <tos_Bluetooth_GetTimeAndDate+0xda>
 8029bf8:	4b16      	ldr	r3, [pc, #88]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029bfa:	78db      	ldrb	r3, [r3, #3]
 8029bfc:	2b65      	cmp	r3, #101	; 0x65
 8029bfe:	d120      	bne.n	8029c42 <tos_Bluetooth_GetTimeAndDate+0xda>
			 sscanf(tmp,"time: %d %d %d",&time[3],&time[4],&time[5]);
 8029c00:	4b13      	ldr	r3, [pc, #76]	; (8029c50 <tos_Bluetooth_GetTimeAndDate+0xe8>)
 8029c02:	6818      	ldr	r0, [r3, #0]
 8029c04:	4b1b      	ldr	r3, [pc, #108]	; (8029c74 <tos_Bluetooth_GetTimeAndDate+0x10c>)
 8029c06:	9300      	str	r3, [sp, #0]
 8029c08:	4b1b      	ldr	r3, [pc, #108]	; (8029c78 <tos_Bluetooth_GetTimeAndDate+0x110>)
 8029c0a:	4a1c      	ldr	r2, [pc, #112]	; (8029c7c <tos_Bluetooth_GetTimeAndDate+0x114>)
 8029c0c:	491c      	ldr	r1, [pc, #112]	; (8029c80 <tos_Bluetooth_GetTimeAndDate+0x118>)
 8029c0e:	f001 fb1f 	bl	802b250 <siscanf>
			 HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetTime", 10,100);
 8029c12:	2364      	movs	r3, #100	; 0x64
 8029c14:	220a      	movs	r2, #10
 8029c16:	491b      	ldr	r1, [pc, #108]	; (8029c84 <tos_Bluetooth_GetTimeAndDate+0x11c>)
 8029c18:	4814      	ldr	r0, [pc, #80]	; (8029c6c <tos_Bluetooth_GetTimeAndDate+0x104>)
 8029c1a:	f7db f97c 	bl	8004f16 <HAL_UART_Transmit>
			 tos_RTC_SetTime(hrtc,time[3],time[4],time[5]);
 8029c1e:	4b10      	ldr	r3, [pc, #64]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029c20:	88db      	ldrh	r3, [r3, #6]
 8029c22:	b2d9      	uxtb	r1, r3
 8029c24:	4b0e      	ldr	r3, [pc, #56]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029c26:	891b      	ldrh	r3, [r3, #8]
 8029c28:	b2da      	uxtb	r2, r3
 8029c2a:	4b0d      	ldr	r3, [pc, #52]	; (8029c60 <tos_Bluetooth_GetTimeAndDate+0xf8>)
 8029c2c:	895b      	ldrh	r3, [r3, #10]
 8029c2e:	b2db      	uxtb	r3, r3
 8029c30:	6878      	ldr	r0, [r7, #4]
 8029c32:	f000 ff41 	bl	802aab8 <tos_RTC_SetTime>
			 sprintf(rx_buffer, "OK");
 8029c36:	4b07      	ldr	r3, [pc, #28]	; (8029c54 <tos_Bluetooth_GetTimeAndDate+0xec>)
 8029c38:	4a0d      	ldr	r2, [pc, #52]	; (8029c70 <tos_Bluetooth_GetTimeAndDate+0x108>)
 8029c3a:	8811      	ldrh	r1, [r2, #0]
 8029c3c:	7892      	ldrb	r2, [r2, #2]
 8029c3e:	8019      	strh	r1, [r3, #0]
 8029c40:	709a      	strb	r2, [r3, #2]
		 }
	  }
}
 8029c42:	bf00      	nop
 8029c44:	3708      	adds	r7, #8
 8029c46:	46bd      	mov	sp, r7
 8029c48:	bd80      	pop	{r7, pc}
 8029c4a:	bf00      	nop
 8029c4c:	2001c090 	.word	0x2001c090
 8029c50:	2001bf90 	.word	0x2001bf90
 8029c54:	2001c094 	.word	0x2001c094
 8029c58:	2001c1c4 	.word	0x2001c1c4
 8029c5c:	2001c1c2 	.word	0x2001c1c2
 8029c60:	2001c1c0 	.word	0x2001c1c0
 8029c64:	0802dbf4 	.word	0x0802dbf4
 8029c68:	0802dc04 	.word	0x0802dc04
 8029c6c:	2001b6cc 	.word	0x2001b6cc
 8029c70:	0802dc10 	.word	0x0802dc10
 8029c74:	2001c1ca 	.word	0x2001c1ca
 8029c78:	2001c1c8 	.word	0x2001c1c8
 8029c7c:	2001c1c6 	.word	0x2001c1c6
 8029c80:	0802dc14 	.word	0x0802dc14
 8029c84:	0802dc24 	.word	0x0802dc24

08029c88 <tos_Bluetooth_GetAndPushNotification>:

/*This function using for get notifications and push notification list*/
void tos_Bluetooth_GetAndPushNotification(void){
 8029c88:	b580      	push	{r7, lr}
 8029c8a:	af00      	add	r7, sp, #0
	if(isConnected){
 8029c8c:	4b1e      	ldr	r3, [pc, #120]	; (8029d08 <tos_Bluetooth_GetAndPushNotification+0x80>)
 8029c8e:	781b      	ldrb	r3, [r3, #0]
 8029c90:	2b00      	cmp	r3, #0
 8029c92:	d037      	beq.n	8029d04 <tos_Bluetooth_GetAndPushNotification+0x7c>
		  if(rx_buffer[0]=='n' && rx_buffer[1]=='o' && rx_buffer[2]=='t' && rx_buffer[3]=='f'){
 8029c94:	4b1d      	ldr	r3, [pc, #116]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029c96:	781b      	ldrb	r3, [r3, #0]
 8029c98:	2b6e      	cmp	r3, #110	; 0x6e
 8029c9a:	d133      	bne.n	8029d04 <tos_Bluetooth_GetAndPushNotification+0x7c>
 8029c9c:	4b1b      	ldr	r3, [pc, #108]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029c9e:	785b      	ldrb	r3, [r3, #1]
 8029ca0:	2b6f      	cmp	r3, #111	; 0x6f
 8029ca2:	d12f      	bne.n	8029d04 <tos_Bluetooth_GetAndPushNotification+0x7c>
 8029ca4:	4b19      	ldr	r3, [pc, #100]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029ca6:	789b      	ldrb	r3, [r3, #2]
 8029ca8:	2b74      	cmp	r3, #116	; 0x74
 8029caa:	d12b      	bne.n	8029d04 <tos_Bluetooth_GetAndPushNotification+0x7c>
 8029cac:	4b17      	ldr	r3, [pc, #92]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029cae:	78db      	ldrb	r3, [r3, #3]
 8029cb0:	2b66      	cmp	r3, #102	; 0x66
 8029cb2:	d127      	bne.n	8029d04 <tos_Bluetooth_GetAndPushNotification+0x7c>
			  tmp=&rx_buffer[0];
 8029cb4:	4b16      	ldr	r3, [pc, #88]	; (8029d10 <tos_Bluetooth_GetAndPushNotification+0x88>)
 8029cb6:	4a15      	ldr	r2, [pc, #84]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029cb8:	601a      	str	r2, [r3, #0]
			  sscanf(tmp,"notf: appName %s appNotf %s",BluetoothAppName,BluetoothNotf);
 8029cba:	4b15      	ldr	r3, [pc, #84]	; (8029d10 <tos_Bluetooth_GetAndPushNotification+0x88>)
 8029cbc:	6818      	ldr	r0, [r3, #0]
 8029cbe:	4b15      	ldr	r3, [pc, #84]	; (8029d14 <tos_Bluetooth_GetAndPushNotification+0x8c>)
 8029cc0:	4a15      	ldr	r2, [pc, #84]	; (8029d18 <tos_Bluetooth_GetAndPushNotification+0x90>)
 8029cc2:	4916      	ldr	r1, [pc, #88]	; (8029d1c <tos_Bluetooth_GetAndPushNotification+0x94>)
 8029cc4:	f001 fac4 	bl	802b250 <siscanf>
			  BluetoothAppNameP=&BluetoothAppName[0];
 8029cc8:	4b15      	ldr	r3, [pc, #84]	; (8029d20 <tos_Bluetooth_GetAndPushNotification+0x98>)
 8029cca:	4a13      	ldr	r2, [pc, #76]	; (8029d18 <tos_Bluetooth_GetAndPushNotification+0x90>)
 8029ccc:	601a      	str	r2, [r3, #0]
			  BluetoothNotfP=&BluetoothNotf[0];
 8029cce:	4b15      	ldr	r3, [pc, #84]	; (8029d24 <tos_Bluetooth_GetAndPushNotification+0x9c>)
 8029cd0:	4a10      	ldr	r2, [pc, #64]	; (8029d14 <tos_Bluetooth_GetAndPushNotification+0x8c>)
 8029cd2:	601a      	str	r2, [r3, #0]
			  if(BluetoothAppName!=NULL && BluetoothNotf!=NULL)
			 blNotnode=tos_NotificationPushItem(blNotnode,BluetoothAppNameP,BluetoothNotfP);
 8029cd4:	4b14      	ldr	r3, [pc, #80]	; (8029d28 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8029cd6:	6818      	ldr	r0, [r3, #0]
 8029cd8:	4b11      	ldr	r3, [pc, #68]	; (8029d20 <tos_Bluetooth_GetAndPushNotification+0x98>)
 8029cda:	6819      	ldr	r1, [r3, #0]
 8029cdc:	4b11      	ldr	r3, [pc, #68]	; (8029d24 <tos_Bluetooth_GetAndPushNotification+0x9c>)
 8029cde:	681b      	ldr	r3, [r3, #0]
 8029ce0:	461a      	mov	r2, r3
 8029ce2:	f000 fe0f 	bl	802a904 <tos_NotificationPushItem>
 8029ce6:	4602      	mov	r2, r0
 8029ce8:	4b0f      	ldr	r3, [pc, #60]	; (8029d28 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8029cea:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasPushNotf",11,50);
 8029cec:	2332      	movs	r3, #50	; 0x32
 8029cee:	220b      	movs	r2, #11
 8029cf0:	490e      	ldr	r1, [pc, #56]	; (8029d2c <tos_Bluetooth_GetAndPushNotification+0xa4>)
 8029cf2:	480f      	ldr	r0, [pc, #60]	; (8029d30 <tos_Bluetooth_GetAndPushNotification+0xa8>)
 8029cf4:	f7db f90f 	bl	8004f16 <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8029cf8:	4b04      	ldr	r3, [pc, #16]	; (8029d0c <tos_Bluetooth_GetAndPushNotification+0x84>)
 8029cfa:	4a0e      	ldr	r2, [pc, #56]	; (8029d34 <tos_Bluetooth_GetAndPushNotification+0xac>)
 8029cfc:	8811      	ldrh	r1, [r2, #0]
 8029cfe:	7892      	ldrb	r2, [r2, #2]
 8029d00:	8019      	strh	r1, [r3, #0]
 8029d02:	709a      	strb	r2, [r3, #2]
		  }
	}

}
 8029d04:	bf00      	nop
 8029d06:	bd80      	pop	{r7, pc}
 8029d08:	2001c090 	.word	0x2001c090
 8029d0c:	2001c094 	.word	0x2001c094
 8029d10:	2001bf90 	.word	0x2001bf90
 8029d14:	2001bf94 	.word	0x2001bf94
 8029d18:	2001c068 	.word	0x2001c068
 8029d1c:	0802dc30 	.word	0x0802dc30
 8029d20:	2001c05c 	.word	0x2001c05c
 8029d24:	2001c1d8 	.word	0x2001c1d8
 8029d28:	2001c064 	.word	0x2001c064
 8029d2c:	0802dc4c 	.word	0x0802dc4c
 8029d30:	2001b6cc 	.word	0x2001b6cc
 8029d34:	0802dc10 	.word	0x0802dc10

08029d38 <tos_Bluetooth_GetAndPushMusic>:
/*This function using for get music playing val and song name and song artist*/
void tos_Bluetooth_GetAndPushMusic(void){
 8029d38:	b580      	push	{r7, lr}
 8029d3a:	b082      	sub	sp, #8
 8029d3c:	af02      	add	r7, sp, #8
	if(isConnected){
 8029d3e:	4b23      	ldr	r3, [pc, #140]	; (8029dcc <tos_Bluetooth_GetAndPushMusic+0x94>)
 8029d40:	781b      	ldrb	r3, [r3, #0]
 8029d42:	2b00      	cmp	r3, #0
 8029d44:	d03f      	beq.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
		  if(rx_buffer[0]=='m' && rx_buffer[1]=='u' && rx_buffer[2]=='s' && rx_buffer[3]=='i' && rx_buffer[4]=='c'){
 8029d46:	4b22      	ldr	r3, [pc, #136]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d48:	781b      	ldrb	r3, [r3, #0]
 8029d4a:	2b6d      	cmp	r3, #109	; 0x6d
 8029d4c:	d13b      	bne.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
 8029d4e:	4b20      	ldr	r3, [pc, #128]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d50:	785b      	ldrb	r3, [r3, #1]
 8029d52:	2b75      	cmp	r3, #117	; 0x75
 8029d54:	d137      	bne.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
 8029d56:	4b1e      	ldr	r3, [pc, #120]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d58:	789b      	ldrb	r3, [r3, #2]
 8029d5a:	2b73      	cmp	r3, #115	; 0x73
 8029d5c:	d133      	bne.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
 8029d5e:	4b1c      	ldr	r3, [pc, #112]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d60:	78db      	ldrb	r3, [r3, #3]
 8029d62:	2b69      	cmp	r3, #105	; 0x69
 8029d64:	d12f      	bne.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
 8029d66:	4b1a      	ldr	r3, [pc, #104]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d68:	791b      	ldrb	r3, [r3, #4]
 8029d6a:	2b63      	cmp	r3, #99	; 0x63
 8029d6c:	d12b      	bne.n	8029dc6 <tos_Bluetooth_GetAndPushMusic+0x8e>
			  tmp=&rx_buffer[0];
 8029d6e:	4b19      	ldr	r3, [pc, #100]	; (8029dd4 <tos_Bluetooth_GetAndPushMusic+0x9c>)
 8029d70:	4a17      	ldr	r2, [pc, #92]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029d72:	601a      	str	r2, [r3, #0]
			  sscanf(tmp,"music: musicName %s musicArtist %s musicVal %d soundVal %03d"
 8029d74:	4b17      	ldr	r3, [pc, #92]	; (8029dd4 <tos_Bluetooth_GetAndPushMusic+0x9c>)
 8029d76:	6818      	ldr	r0, [r3, #0]
 8029d78:	4b17      	ldr	r3, [pc, #92]	; (8029dd8 <tos_Bluetooth_GetAndPushMusic+0xa0>)
 8029d7a:	9301      	str	r3, [sp, #4]
 8029d7c:	4b17      	ldr	r3, [pc, #92]	; (8029ddc <tos_Bluetooth_GetAndPushMusic+0xa4>)
 8029d7e:	9300      	str	r3, [sp, #0]
 8029d80:	4b17      	ldr	r3, [pc, #92]	; (8029de0 <tos_Bluetooth_GetAndPushMusic+0xa8>)
 8029d82:	4a18      	ldr	r2, [pc, #96]	; (8029de4 <tos_Bluetooth_GetAndPushMusic+0xac>)
 8029d84:	4918      	ldr	r1, [pc, #96]	; (8029de8 <tos_Bluetooth_GetAndPushMusic+0xb0>)
 8029d86:	f001 fa63 	bl	802b250 <siscanf>
					  ,musicName,musicArtist,&blmusicStatu,&blSoundVAl);
			  if(&musicName[0]!=NULL && &musicArtist[0]!=NULL){
				  MusicPlayer_SongActristSet(&musicArtist[0]);
 8029d8a:	4815      	ldr	r0, [pc, #84]	; (8029de0 <tos_Bluetooth_GetAndPushMusic+0xa8>)
 8029d8c:	f7fb fbb2 	bl	80254f4 <MusicPlayer_SongActristSet>
				  MusicPlayer_MP_SongNameSet(&musicName[0]);
 8029d90:	4814      	ldr	r0, [pc, #80]	; (8029de4 <tos_Bluetooth_GetAndPushMusic+0xac>)
 8029d92:	f7fb fbbf 	bl	8025514 <MusicPlayer_MP_SongNameSet>
				  MusicPlayer_PlayingStatuSet(blmusicStatu);
 8029d96:	4b11      	ldr	r3, [pc, #68]	; (8029ddc <tos_Bluetooth_GetAndPushMusic+0xa4>)
 8029d98:	881b      	ldrh	r3, [r3, #0]
 8029d9a:	b2db      	uxtb	r3, r3
 8029d9c:	4618      	mov	r0, r3
 8029d9e:	f7fb fbe5 	bl	802556c <MusicPlayer_PlayingStatuSet>
				  MusicPlayer_MP_SoundVAlSet(blSoundVAl);
 8029da2:	4b0d      	ldr	r3, [pc, #52]	; (8029dd8 <tos_Bluetooth_GetAndPushMusic+0xa0>)
 8029da4:	881b      	ldrh	r3, [r3, #0]
 8029da6:	b2db      	uxtb	r3, r3
 8029da8:	4618      	mov	r0, r3
 8029daa:	f7fb fbc3 	bl	8025534 <MusicPlayer_MP_SoundVAlSet>
			  }
				  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasPushMusic",12,50);
 8029dae:	2332      	movs	r3, #50	; 0x32
 8029db0:	220c      	movs	r2, #12
 8029db2:	490e      	ldr	r1, [pc, #56]	; (8029dec <tos_Bluetooth_GetAndPushMusic+0xb4>)
 8029db4:	480e      	ldr	r0, [pc, #56]	; (8029df0 <tos_Bluetooth_GetAndPushMusic+0xb8>)
 8029db6:	f7db f8ae 	bl	8004f16 <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8029dba:	4b05      	ldr	r3, [pc, #20]	; (8029dd0 <tos_Bluetooth_GetAndPushMusic+0x98>)
 8029dbc:	4a0d      	ldr	r2, [pc, #52]	; (8029df4 <tos_Bluetooth_GetAndPushMusic+0xbc>)
 8029dbe:	8811      	ldrh	r1, [r2, #0]
 8029dc0:	7892      	ldrb	r2, [r2, #2]
 8029dc2:	8019      	strh	r1, [r3, #0]
 8029dc4:	709a      	strb	r2, [r3, #2]
		  }
	}

}
 8029dc6:	bf00      	nop
 8029dc8:	46bd      	mov	sp, r7
 8029dca:	bd80      	pop	{r7, pc}
 8029dcc:	2001c090 	.word	0x2001c090
 8029dd0:	2001c094 	.word	0x2001c094
 8029dd4:	2001bf90 	.word	0x2001bf90
 8029dd8:	2001c1cc 	.word	0x2001c1cc
 8029ddc:	2001c1d6 	.word	0x2001c1d6
 8029de0:	2001c1ac 	.word	0x2001c1ac
 8029de4:	2001c07c 	.word	0x2001c07c
 8029de8:	0802dc58 	.word	0x0802dc58
 8029dec:	0802dc98 	.word	0x0802dc98
 8029df0:	2001b6cc 	.word	0x2001b6cc
 8029df4:	0802dc10 	.word	0x0802dc10

08029df8 <tos_Bluetooth_SetMusicVAls>:
/*This function using for music playing val and song name and song artist*/
void tos_Bluetooth_SetMusicVAls(void){
 8029df8:	b580      	push	{r7, lr}
 8029dfa:	af00      	add	r7, sp, #0
	if(isConnected){ //blmusicStatu,blSoundVAl
 8029dfc:	4b1c      	ldr	r3, [pc, #112]	; (8029e70 <tos_Bluetooth_SetMusicVAls+0x78>)
 8029dfe:	781b      	ldrb	r3, [r3, #0]
 8029e00:	2b00      	cmp	r3, #0
 8029e02:	d032      	beq.n	8029e6a <tos_Bluetooth_SetMusicVAls+0x72>
		static uint8_t musicSoundBef,musicVAlBef;
		blmusicStatu=MusicPlayer_PlayingStatuGet();
 8029e04:	f7fb fbc2 	bl	802558c <MusicPlayer_PlayingStatuGet>
 8029e08:	4603      	mov	r3, r0
 8029e0a:	b29a      	uxth	r2, r3
 8029e0c:	4b19      	ldr	r3, [pc, #100]	; (8029e74 <tos_Bluetooth_SetMusicVAls+0x7c>)
 8029e0e:	801a      	strh	r2, [r3, #0]
		blSoundVAl=MusicPlayer_MP_SoundVAlGet();
 8029e10:	f7fb fbc8 	bl	80255a4 <MusicPlayer_MP_SoundVAlGet>
 8029e14:	4603      	mov	r3, r0
 8029e16:	b29a      	uxth	r2, r3
 8029e18:	4b17      	ldr	r3, [pc, #92]	; (8029e78 <tos_Bluetooth_SetMusicVAls+0x80>)
 8029e1a:	801a      	strh	r2, [r3, #0]
		if(musicSoundBef !=time[6] && musicVAlBef !=time[7]){
 8029e1c:	4b17      	ldr	r3, [pc, #92]	; (8029e7c <tos_Bluetooth_SetMusicVAls+0x84>)
 8029e1e:	781b      	ldrb	r3, [r3, #0]
 8029e20:	b29a      	uxth	r2, r3
 8029e22:	4b17      	ldr	r3, [pc, #92]	; (8029e80 <tos_Bluetooth_SetMusicVAls+0x88>)
 8029e24:	899b      	ldrh	r3, [r3, #12]
 8029e26:	429a      	cmp	r2, r3
 8029e28:	d01f      	beq.n	8029e6a <tos_Bluetooth_SetMusicVAls+0x72>
 8029e2a:	4b16      	ldr	r3, [pc, #88]	; (8029e84 <tos_Bluetooth_SetMusicVAls+0x8c>)
 8029e2c:	781b      	ldrb	r3, [r3, #0]
 8029e2e:	b29a      	uxth	r2, r3
 8029e30:	4b13      	ldr	r3, [pc, #76]	; (8029e80 <tos_Bluetooth_SetMusicVAls+0x88>)
 8029e32:	89db      	ldrh	r3, [r3, #14]
 8029e34:	429a      	cmp	r2, r3
 8029e36:	d018      	beq.n	8029e6a <tos_Bluetooth_SetMusicVAls+0x72>
			sprintf(tx_buffer, "musicSet: val %d sound %03d",blmusicStatu,blSoundVAl);
 8029e38:	4b0e      	ldr	r3, [pc, #56]	; (8029e74 <tos_Bluetooth_SetMusicVAls+0x7c>)
 8029e3a:	881b      	ldrh	r3, [r3, #0]
 8029e3c:	461a      	mov	r2, r3
 8029e3e:	4b0e      	ldr	r3, [pc, #56]	; (8029e78 <tos_Bluetooth_SetMusicVAls+0x80>)
 8029e40:	881b      	ldrh	r3, [r3, #0]
 8029e42:	4911      	ldr	r1, [pc, #68]	; (8029e88 <tos_Bluetooth_SetMusicVAls+0x90>)
 8029e44:	4811      	ldr	r0, [pc, #68]	; (8029e8c <tos_Bluetooth_SetMusicVAls+0x94>)
 8029e46:	f001 f9e3 	bl	802b210 <siprintf>
			HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 25,250);
 8029e4a:	23fa      	movs	r3, #250	; 0xfa
 8029e4c:	2219      	movs	r2, #25
 8029e4e:	490f      	ldr	r1, [pc, #60]	; (8029e8c <tos_Bluetooth_SetMusicVAls+0x94>)
 8029e50:	480f      	ldr	r0, [pc, #60]	; (8029e90 <tos_Bluetooth_SetMusicVAls+0x98>)
 8029e52:	f7db f860 	bl	8004f16 <HAL_UART_Transmit>
			musicSoundBef=blSoundVAl;
 8029e56:	4b08      	ldr	r3, [pc, #32]	; (8029e78 <tos_Bluetooth_SetMusicVAls+0x80>)
 8029e58:	881b      	ldrh	r3, [r3, #0]
 8029e5a:	b2da      	uxtb	r2, r3
 8029e5c:	4b07      	ldr	r3, [pc, #28]	; (8029e7c <tos_Bluetooth_SetMusicVAls+0x84>)
 8029e5e:	701a      	strb	r2, [r3, #0]
			musicVAlBef=blmusicStatu;
 8029e60:	4b04      	ldr	r3, [pc, #16]	; (8029e74 <tos_Bluetooth_SetMusicVAls+0x7c>)
 8029e62:	881b      	ldrh	r3, [r3, #0]
 8029e64:	b2da      	uxtb	r2, r3
 8029e66:	4b07      	ldr	r3, [pc, #28]	; (8029e84 <tos_Bluetooth_SetMusicVAls+0x8c>)
 8029e68:	701a      	strb	r2, [r3, #0]
		}
		}
}
 8029e6a:	bf00      	nop
 8029e6c:	bd80      	pop	{r7, pc}
 8029e6e:	bf00      	nop
 8029e70:	2001c090 	.word	0x2001c090
 8029e74:	2001c1d6 	.word	0x2001c1d6
 8029e78:	2001c1cc 	.word	0x2001c1cc
 8029e7c:	2001b59c 	.word	0x2001b59c
 8029e80:	2001c1c0 	.word	0x2001c1c0
 8029e84:	2001b59d 	.word	0x2001b59d
 8029e88:	0802dca8 	.word	0x0802dca8
 8029e8c:	2001c190 	.word	0x2001c190
 8029e90:	2001b6cc 	.word	0x2001b6cc

08029e94 <tos_Bluetooth_SetBatteryVal>:
/*This function using for set battery value*/
void tos_Bluetooth_SetBatteryVal(uint8_t batteryVal){
 8029e94:	b580      	push	{r7, lr}
 8029e96:	b082      	sub	sp, #8
 8029e98:	af00      	add	r7, sp, #0
 8029e9a:	4603      	mov	r3, r0
 8029e9c:	71fb      	strb	r3, [r7, #7]
	if(isConnected){
 8029e9e:	4b0e      	ldr	r3, [pc, #56]	; (8029ed8 <tos_Bluetooth_SetBatteryVal+0x44>)
 8029ea0:	781b      	ldrb	r3, [r3, #0]
 8029ea2:	2b00      	cmp	r3, #0
 8029ea4:	d013      	beq.n	8029ece <tos_Bluetooth_SetBatteryVal+0x3a>
		static uint8_t batteryValBef;
		if(batteryVal !=batteryValBef){
 8029ea6:	4b0d      	ldr	r3, [pc, #52]	; (8029edc <tos_Bluetooth_SetBatteryVal+0x48>)
 8029ea8:	781b      	ldrb	r3, [r3, #0]
 8029eaa:	79fa      	ldrb	r2, [r7, #7]
 8029eac:	429a      	cmp	r2, r3
 8029eae:	d00e      	beq.n	8029ece <tos_Bluetooth_SetBatteryVal+0x3a>
			sprintf(tx_buffer, "chargetVal: %03d",batteryVal);
 8029eb0:	79fb      	ldrb	r3, [r7, #7]
 8029eb2:	461a      	mov	r2, r3
 8029eb4:	490a      	ldr	r1, [pc, #40]	; (8029ee0 <tos_Bluetooth_SetBatteryVal+0x4c>)
 8029eb6:	480b      	ldr	r0, [pc, #44]	; (8029ee4 <tos_Bluetooth_SetBatteryVal+0x50>)
 8029eb8:	f001 f9aa 	bl	802b210 <siprintf>
			HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 15,250);
 8029ebc:	23fa      	movs	r3, #250	; 0xfa
 8029ebe:	220f      	movs	r2, #15
 8029ec0:	4908      	ldr	r1, [pc, #32]	; (8029ee4 <tos_Bluetooth_SetBatteryVal+0x50>)
 8029ec2:	4809      	ldr	r0, [pc, #36]	; (8029ee8 <tos_Bluetooth_SetBatteryVal+0x54>)
 8029ec4:	f7db f827 	bl	8004f16 <HAL_UART_Transmit>
			batteryValBef=batteryVal;
 8029ec8:	4a04      	ldr	r2, [pc, #16]	; (8029edc <tos_Bluetooth_SetBatteryVal+0x48>)
 8029eca:	79fb      	ldrb	r3, [r7, #7]
 8029ecc:	7013      	strb	r3, [r2, #0]
		}
		}
}
 8029ece:	bf00      	nop
 8029ed0:	3708      	adds	r7, #8
 8029ed2:	46bd      	mov	sp, r7
 8029ed4:	bd80      	pop	{r7, pc}
 8029ed6:	bf00      	nop
 8029ed8:	2001c090 	.word	0x2001c090
 8029edc:	2001b59e 	.word	0x2001b59e
 8029ee0:	0802dcc4 	.word	0x0802dcc4
 8029ee4:	2001c190 	.word	0x2001c190
 8029ee8:	2001b6cc 	.word	0x2001b6cc

08029eec <tos_Bluetooth_SetStepsVal>:
/*This function using for set steps value*/
void tos_Bluetooth_SetStepsVal(uint8_t stepsVal){
 8029eec:	b580      	push	{r7, lr}
 8029eee:	b082      	sub	sp, #8
 8029ef0:	af00      	add	r7, sp, #0
 8029ef2:	4603      	mov	r3, r0
 8029ef4:	71fb      	strb	r3, [r7, #7]
	if(isConnected){
 8029ef6:	4b0e      	ldr	r3, [pc, #56]	; (8029f30 <tos_Bluetooth_SetStepsVal+0x44>)
 8029ef8:	781b      	ldrb	r3, [r3, #0]
 8029efa:	2b00      	cmp	r3, #0
 8029efc:	d013      	beq.n	8029f26 <tos_Bluetooth_SetStepsVal+0x3a>
		static uint8_t stepsValBef;
		if(stepsVal !=stepsValBef){
 8029efe:	4b0d      	ldr	r3, [pc, #52]	; (8029f34 <tos_Bluetooth_SetStepsVal+0x48>)
 8029f00:	781b      	ldrb	r3, [r3, #0]
 8029f02:	79fa      	ldrb	r2, [r7, #7]
 8029f04:	429a      	cmp	r2, r3
 8029f06:	d00e      	beq.n	8029f26 <tos_Bluetooth_SetStepsVal+0x3a>
			sprintf(tx_buffer, "stepsVal: %05d",stepsVal);
 8029f08:	79fb      	ldrb	r3, [r7, #7]
 8029f0a:	461a      	mov	r2, r3
 8029f0c:	490a      	ldr	r1, [pc, #40]	; (8029f38 <tos_Bluetooth_SetStepsVal+0x4c>)
 8029f0e:	480b      	ldr	r0, [pc, #44]	; (8029f3c <tos_Bluetooth_SetStepsVal+0x50>)
 8029f10:	f001 f97e 	bl	802b210 <siprintf>
			HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 15,250);
 8029f14:	23fa      	movs	r3, #250	; 0xfa
 8029f16:	220f      	movs	r2, #15
 8029f18:	4908      	ldr	r1, [pc, #32]	; (8029f3c <tos_Bluetooth_SetStepsVal+0x50>)
 8029f1a:	4809      	ldr	r0, [pc, #36]	; (8029f40 <tos_Bluetooth_SetStepsVal+0x54>)
 8029f1c:	f7da fffb 	bl	8004f16 <HAL_UART_Transmit>
			stepsValBef=stepsVal;
 8029f20:	4a04      	ldr	r2, [pc, #16]	; (8029f34 <tos_Bluetooth_SetStepsVal+0x48>)
 8029f22:	79fb      	ldrb	r3, [r7, #7]
 8029f24:	7013      	strb	r3, [r2, #0]
		}
		}
}
 8029f26:	bf00      	nop
 8029f28:	3708      	adds	r7, #8
 8029f2a:	46bd      	mov	sp, r7
 8029f2c:	bd80      	pop	{r7, pc}
 8029f2e:	bf00      	nop
 8029f30:	2001c090 	.word	0x2001c090
 8029f34:	2001b59f 	.word	0x2001b59f
 8029f38:	0802dcd8 	.word	0x0802dcd8
 8029f3c:	2001c190 	.word	0x2001c190
 8029f40:	2001b6cc 	.word	0x2001b6cc

08029f44 <tos_BluetoothGetStatusVAl>:
void tos_BluetoothGetStatusVAl(bool bluetoothStatus,uint8_t Screen){
 8029f44:	b580      	push	{r7, lr}
 8029f46:	b084      	sub	sp, #16
 8029f48:	af00      	add	r7, sp, #0
 8029f4a:	4603      	mov	r3, r0
 8029f4c:	460a      	mov	r2, r1
 8029f4e:	71fb      	strb	r3, [r7, #7]
 8029f50:	4613      	mov	r3, r2
 8029f52:	71bb      	strb	r3, [r7, #6]
	if(bluetoothStatus){
 8029f54:	79fb      	ldrb	r3, [r7, #7]
 8029f56:	2b00      	cmp	r3, #0
 8029f58:	d01a      	beq.n	8029f90 <tos_BluetoothGetStatusVAl+0x4c>
			lv_color_t bluetoothClr = tos_BluetoothStatus_SymColor_Helper(isConnected);
 8029f5a:	4b1b      	ldr	r3, [pc, #108]	; (8029fc8 <tos_BluetoothGetStatusVAl+0x84>)
 8029f5c:	781b      	ldrb	r3, [r3, #0]
 8029f5e:	4618      	mov	r0, r3
 8029f60:	f000 f838 	bl	8029fd4 <tos_BluetoothStatus_SymColor_Helper>
 8029f64:	4603      	mov	r3, r0
 8029f66:	81bb      	strh	r3, [r7, #12]
			switch(Screen){
 8029f68:	79bb      	ldrb	r3, [r7, #6]
 8029f6a:	2b00      	cmp	r3, #0
 8029f6c:	d002      	beq.n	8029f74 <tos_BluetoothGetStatusVAl+0x30>
 8029f6e:	2b01      	cmp	r3, #1
 8029f70:	d007      	beq.n	8029f82 <tos_BluetoothGetStatusVAl+0x3e>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothEnable, bluetoothClr); break;
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothEnable, bluetoothClr); break;
				default: return;
 8029f72:	e025      	b.n	8029fc0 <tos_BluetoothGetStatusVAl+0x7c>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothEnable, bluetoothClr); break;
 8029f74:	4b15      	ldr	r3, [pc, #84]	; (8029fcc <tos_BluetoothGetStatusVAl+0x88>)
 8029f76:	781b      	ldrb	r3, [r3, #0]
 8029f78:	89b9      	ldrh	r1, [r7, #12]
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	f7fa fca6 	bl	80248cc <MainScreen_SetBluetoothStatusVal>
 8029f80:	e01e      	b.n	8029fc0 <tos_BluetoothGetStatusVAl+0x7c>
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothEnable, bluetoothClr); break;
 8029f82:	4b12      	ldr	r3, [pc, #72]	; (8029fcc <tos_BluetoothGetStatusVAl+0x88>)
 8029f84:	781b      	ldrb	r3, [r3, #0]
 8029f86:	89b9      	ldrh	r1, [r7, #12]
 8029f88:	4618      	mov	r0, r3
 8029f8a:	f7fe fbb9 	bl	8028700 <SleepModeScreen_SetBluetoothStatusVal>
 8029f8e:	e017      	b.n	8029fc0 <tos_BluetoothGetStatusVAl+0x7c>
				}
	}else switch(Screen){
 8029f90:	79bb      	ldrb	r3, [r7, #6]
 8029f92:	2b00      	cmp	r3, #0
 8029f94:	d002      	beq.n	8029f9c <tos_BluetoothGetStatusVAl+0x58>
 8029f96:	2b01      	cmp	r3, #1
 8029f98:	d009      	beq.n	8029fae <tos_BluetoothGetStatusVAl+0x6a>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothEnable, LV_COLOR_WHITE); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothEnable, LV_COLOR_WHITE); break;
	default: return;
 8029f9a:	e011      	b.n	8029fc0 <tos_BluetoothGetStatusVAl+0x7c>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothEnable, LV_COLOR_WHITE); break;
 8029f9c:	4b0b      	ldr	r3, [pc, #44]	; (8029fcc <tos_BluetoothGetStatusVAl+0x88>)
 8029f9e:	781a      	ldrb	r2, [r3, #0]
 8029fa0:	4b0b      	ldr	r3, [pc, #44]	; (8029fd0 <tos_BluetoothGetStatusVAl+0x8c>)
 8029fa2:	881b      	ldrh	r3, [r3, #0]
 8029fa4:	4619      	mov	r1, r3
 8029fa6:	4610      	mov	r0, r2
 8029fa8:	f7fa fc90 	bl	80248cc <MainScreen_SetBluetoothStatusVal>
 8029fac:	e008      	b.n	8029fc0 <tos_BluetoothGetStatusVAl+0x7c>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothEnable, LV_COLOR_WHITE); break;
 8029fae:	4b07      	ldr	r3, [pc, #28]	; (8029fcc <tos_BluetoothGetStatusVAl+0x88>)
 8029fb0:	781a      	ldrb	r2, [r3, #0]
 8029fb2:	4b07      	ldr	r3, [pc, #28]	; (8029fd0 <tos_BluetoothGetStatusVAl+0x8c>)
 8029fb4:	881b      	ldrh	r3, [r3, #0]
 8029fb6:	4619      	mov	r1, r3
 8029fb8:	4610      	mov	r0, r2
 8029fba:	f7fe fba1 	bl	8028700 <SleepModeScreen_SetBluetoothStatusVal>
 8029fbe:	bf00      	nop
	}
}
 8029fc0:	3710      	adds	r7, #16
 8029fc2:	46bd      	mov	sp, r7
 8029fc4:	bd80      	pop	{r7, pc}
 8029fc6:	bf00      	nop
 8029fc8:	2001c090 	.word	0x2001c090
 8029fcc:	2000284d 	.word	0x2000284d
 8029fd0:	0802dce8 	.word	0x0802dce8

08029fd4 <tos_BluetoothStatus_SymColor_Helper>:
lv_color_t tos_BluetoothStatus_SymColor_Helper(bool bluetoothConnected){
 8029fd4:	b480      	push	{r7}
 8029fd6:	b083      	sub	sp, #12
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	4602      	mov	r2, r0
 8029fdc:	71fa      	strb	r2, [r7, #7]
			if (bluetoothConnected) return LV_COLOR_BLUE;
 8029fde:	79fa      	ldrb	r2, [r7, #7]
 8029fe0:	2a00      	cmp	r2, #0
 8029fe2:	d008      	beq.n	8029ff6 <tos_BluetoothStatus_SymColor_Helper+0x22>
 8029fe4:	f36f 0302 	bfc	r3, #0, #3
 8029fe8:	f36f 03c7 	bfc	r3, #3, #5
 8029fec:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8029ff0:	f36f 334f 	bfc	r3, #13, #3
 8029ff4:	e001      	b.n	8029ffa <tos_BluetoothStatus_SymColor_Helper+0x26>
			else return LV_COLOR_GRAY;
 8029ff6:	4b04      	ldr	r3, [pc, #16]	; (802a008 <tos_BluetoothStatus_SymColor_Helper+0x34>)
 8029ff8:	881b      	ldrh	r3, [r3, #0]
}
 8029ffa:	4618      	mov	r0, r3
 8029ffc:	370c      	adds	r7, #12
 8029ffe:	46bd      	mov	sp, r7
 802a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a004:	4770      	bx	lr
 802a006:	bf00      	nop
 802a008:	0802dcec 	.word	0x0802dcec

0802a00c <tos_BluetoothEnableController>:
void tos_BluetoothEnableController(void){
 802a00c:	b580      	push	{r7, lr}
 802a00e:	af00      	add	r7, sp, #0
	static bool enableBef=false;
	if(enableBef!=bluetoothEnable){
 802a010:	4b0e      	ldr	r3, [pc, #56]	; (802a04c <tos_BluetoothEnableController+0x40>)
 802a012:	781a      	ldrb	r2, [r3, #0]
 802a014:	4b0e      	ldr	r3, [pc, #56]	; (802a050 <tos_BluetoothEnableController+0x44>)
 802a016:	781b      	ldrb	r3, [r3, #0]
 802a018:	429a      	cmp	r2, r3
 802a01a:	d014      	beq.n	802a046 <tos_BluetoothEnableController+0x3a>
		if(bluetoothEnable) bluetooth_Enable();
 802a01c:	4b0c      	ldr	r3, [pc, #48]	; (802a050 <tos_BluetoothEnableController+0x44>)
 802a01e:	781b      	ldrb	r3, [r3, #0]
 802a020:	2b00      	cmp	r3, #0
 802a022:	d006      	beq.n	802a032 <tos_BluetoothEnableController+0x26>
 802a024:	2201      	movs	r2, #1
 802a026:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a02a:	480a      	ldr	r0, [pc, #40]	; (802a054 <tos_BluetoothEnableController+0x48>)
 802a02c:	f7d8 f840 	bl	80020b0 <HAL_GPIO_WritePin>
 802a030:	e005      	b.n	802a03e <tos_BluetoothEnableController+0x32>
		else bluetooth_Disable();
 802a032:	2200      	movs	r2, #0
 802a034:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a038:	4806      	ldr	r0, [pc, #24]	; (802a054 <tos_BluetoothEnableController+0x48>)
 802a03a:	f7d8 f839 	bl	80020b0 <HAL_GPIO_WritePin>
		enableBef=bluetoothEnable;
 802a03e:	4b04      	ldr	r3, [pc, #16]	; (802a050 <tos_BluetoothEnableController+0x44>)
 802a040:	781a      	ldrb	r2, [r3, #0]
 802a042:	4b02      	ldr	r3, [pc, #8]	; (802a04c <tos_BluetoothEnableController+0x40>)
 802a044:	701a      	strb	r2, [r3, #0]
	}


}
 802a046:	bf00      	nop
 802a048:	bd80      	pop	{r7, pc}
 802a04a:	bf00      	nop
 802a04c:	2001b5a0 	.word	0x2001b5a0
 802a050:	2000284d 	.word	0x2000284d
 802a054:	40020800 	.word	0x40020800

0802a058 <tos_BluetoothGetEnableVal>:
bool tos_BluetoothGetEnableVal(void){
 802a058:	b480      	push	{r7}
 802a05a:	af00      	add	r7, sp, #0
	return bluetoothEnable;
 802a05c:	4b03      	ldr	r3, [pc, #12]	; (802a06c <tos_BluetoothGetEnableVal+0x14>)
 802a05e:	781b      	ldrb	r3, [r3, #0]
}
 802a060:	4618      	mov	r0, r3
 802a062:	46bd      	mov	sp, r7
 802a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a068:	4770      	bx	lr
 802a06a:	bf00      	nop
 802a06c:	2000284d 	.word	0x2000284d

0802a070 <tos_BluetoothSetEnableVal>:
void tos_BluetoothSetEnableVal(bool enable){
 802a070:	b480      	push	{r7}
 802a072:	b083      	sub	sp, #12
 802a074:	af00      	add	r7, sp, #0
 802a076:	4603      	mov	r3, r0
 802a078:	71fb      	strb	r3, [r7, #7]
	bluetoothEnable=enable;
 802a07a:	4a04      	ldr	r2, [pc, #16]	; (802a08c <tos_BluetoothSetEnableVal+0x1c>)
 802a07c:	79fb      	ldrb	r3, [r7, #7]
 802a07e:	7013      	strb	r3, [r2, #0]
}
 802a080:	bf00      	nop
 802a082:	370c      	adds	r7, #12
 802a084:	46bd      	mov	sp, r7
 802a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a08a:	4770      	bx	lr
 802a08c:	2000284d 	.word	0x2000284d

0802a090 <tos_RightButton_Listenner_For_MenuControl>:
 *      Author: neset
 */

#include "tos_Button_Helper.h"
static uint16_t enterbtncounter=0,rightbtncounter=0,leftbtncounter=0;
uint8_t tos_RightButton_Listenner_For_MenuControl(void) {
 802a090:	b580      	push	{r7, lr}
 802a092:	af00      	add	r7, sp, #0
	if(READ_RIGHT_BTN){
 802a094:	2140      	movs	r1, #64	; 0x40
 802a096:	4810      	ldr	r0, [pc, #64]	; (802a0d8 <tos_RightButton_Listenner_For_MenuControl+0x48>)
 802a098:	f7d7 fff2 	bl	8002080 <HAL_GPIO_ReadPin>
 802a09c:	4603      	mov	r3, r0
 802a09e:	2b00      	cmp	r3, #0
 802a0a0:	d016      	beq.n	802a0d0 <tos_RightButton_Listenner_For_MenuControl+0x40>
		if(rightbtncounter>=BTN_LONG_PRESS_TIME){ rightbtncounter=0;return 2;}
 802a0a2:	4b0e      	ldr	r3, [pc, #56]	; (802a0dc <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802a0a4:	881b      	ldrh	r3, [r3, #0]
 802a0a6:	f240 2225 	movw	r2, #549	; 0x225
 802a0aa:	4293      	cmp	r3, r2
 802a0ac:	d904      	bls.n	802a0b8 <tos_RightButton_Listenner_For_MenuControl+0x28>
 802a0ae:	4b0b      	ldr	r3, [pc, #44]	; (802a0dc <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802a0b0:	2200      	movs	r2, #0
 802a0b2:	801a      	strh	r2, [r3, #0]
 802a0b4:	2302      	movs	r3, #2
 802a0b6:	e00c      	b.n	802a0d2 <tos_RightButton_Listenner_For_MenuControl+0x42>
		if(rightbtncounter>=BTN_SHORT_PRESS_TIME){ rightbtncounter=0;return 1;}
 802a0b8:	4b08      	ldr	r3, [pc, #32]	; (802a0dc <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802a0ba:	881b      	ldrh	r3, [r3, #0]
 802a0bc:	2b04      	cmp	r3, #4
 802a0be:	d904      	bls.n	802a0ca <tos_RightButton_Listenner_For_MenuControl+0x3a>
 802a0c0:	4b06      	ldr	r3, [pc, #24]	; (802a0dc <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802a0c2:	2200      	movs	r2, #0
 802a0c4:	801a      	strh	r2, [r3, #0]
 802a0c6:	2301      	movs	r3, #1
 802a0c8:	e003      	b.n	802a0d2 <tos_RightButton_Listenner_For_MenuControl+0x42>
		 rightbtncounter=0;
 802a0ca:	4b04      	ldr	r3, [pc, #16]	; (802a0dc <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802a0cc:	2200      	movs	r2, #0
 802a0ce:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 802a0d0:	2300      	movs	r3, #0
}
 802a0d2:	4618      	mov	r0, r3
 802a0d4:	bd80      	pop	{r7, pc}
 802a0d6:	bf00      	nop
 802a0d8:	40021000 	.word	0x40021000
 802a0dc:	2001b5a4 	.word	0x2001b5a4

0802a0e0 <tos_LeftButton_Listenner_For_MenuControl>:
uint8_t tos_LeftButton_Listenner_For_MenuControl(void) {
 802a0e0:	b580      	push	{r7, lr}
 802a0e2:	af00      	add	r7, sp, #0

			if(READ_LEFT_BTN){
 802a0e4:	2110      	movs	r1, #16
 802a0e6:	4810      	ldr	r0, [pc, #64]	; (802a128 <tos_LeftButton_Listenner_For_MenuControl+0x48>)
 802a0e8:	f7d7 ffca 	bl	8002080 <HAL_GPIO_ReadPin>
 802a0ec:	4603      	mov	r3, r0
 802a0ee:	2b00      	cmp	r3, #0
 802a0f0:	d016      	beq.n	802a120 <tos_LeftButton_Listenner_For_MenuControl+0x40>
				if(leftbtncounter>=BTN_LONG_PRESS_TIME){ leftbtncounter=0;return 2;}
 802a0f2:	4b0e      	ldr	r3, [pc, #56]	; (802a12c <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802a0f4:	881b      	ldrh	r3, [r3, #0]
 802a0f6:	f240 2225 	movw	r2, #549	; 0x225
 802a0fa:	4293      	cmp	r3, r2
 802a0fc:	d904      	bls.n	802a108 <tos_LeftButton_Listenner_For_MenuControl+0x28>
 802a0fe:	4b0b      	ldr	r3, [pc, #44]	; (802a12c <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802a100:	2200      	movs	r2, #0
 802a102:	801a      	strh	r2, [r3, #0]
 802a104:	2302      	movs	r3, #2
 802a106:	e00c      	b.n	802a122 <tos_LeftButton_Listenner_For_MenuControl+0x42>
				if(leftbtncounter>=BTN_SHORT_PRESS_TIME){ leftbtncounter=0;return 1;}
 802a108:	4b08      	ldr	r3, [pc, #32]	; (802a12c <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802a10a:	881b      	ldrh	r3, [r3, #0]
 802a10c:	2b04      	cmp	r3, #4
 802a10e:	d904      	bls.n	802a11a <tos_LeftButton_Listenner_For_MenuControl+0x3a>
 802a110:	4b06      	ldr	r3, [pc, #24]	; (802a12c <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802a112:	2200      	movs	r2, #0
 802a114:	801a      	strh	r2, [r3, #0]
 802a116:	2301      	movs	r3, #1
 802a118:	e003      	b.n	802a122 <tos_LeftButton_Listenner_For_MenuControl+0x42>
				 leftbtncounter=0;
 802a11a:	4b04      	ldr	r3, [pc, #16]	; (802a12c <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802a11c:	2200      	movs	r2, #0
 802a11e:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 802a120:	2300      	movs	r3, #0
}
 802a122:	4618      	mov	r0, r3
 802a124:	bd80      	pop	{r7, pc}
 802a126:	bf00      	nop
 802a128:	40021000 	.word	0x40021000
 802a12c:	2001b5a6 	.word	0x2001b5a6

0802a130 <tos_EnterButton_Listenner_For_MenuControl>:

uint8_t tos_EnterButton_Listenner_For_MenuControl(void) {
 802a130:	b580      	push	{r7, lr}
 802a132:	af00      	add	r7, sp, #0
			if(READ_ENTER_BTN){
 802a134:	2120      	movs	r1, #32
 802a136:	4815      	ldr	r0, [pc, #84]	; (802a18c <tos_EnterButton_Listenner_For_MenuControl+0x5c>)
 802a138:	f7d7 ffa2 	bl	8002080 <HAL_GPIO_ReadPin>
 802a13c:	4603      	mov	r3, r0
 802a13e:	2b00      	cmp	r3, #0
 802a140:	d020      	beq.n	802a184 <tos_EnterButton_Listenner_For_MenuControl+0x54>
				if(enterbtncounter>=BTN_ULTRA_LONG_PRESS_TIME){ enterbtncounter=0;return 3;}
 802a142:	4b13      	ldr	r3, [pc, #76]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a144:	881b      	ldrh	r3, [r3, #0]
 802a146:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 802a14a:	d304      	bcc.n	802a156 <tos_EnterButton_Listenner_For_MenuControl+0x26>
 802a14c:	4b10      	ldr	r3, [pc, #64]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a14e:	2200      	movs	r2, #0
 802a150:	801a      	strh	r2, [r3, #0]
 802a152:	2303      	movs	r3, #3
 802a154:	e017      	b.n	802a186 <tos_EnterButton_Listenner_For_MenuControl+0x56>
				if(enterbtncounter>=BTN_LONG_PRESS_TIME){ enterbtncounter=0;return 2;}
 802a156:	4b0e      	ldr	r3, [pc, #56]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a158:	881b      	ldrh	r3, [r3, #0]
 802a15a:	f240 2225 	movw	r2, #549	; 0x225
 802a15e:	4293      	cmp	r3, r2
 802a160:	d904      	bls.n	802a16c <tos_EnterButton_Listenner_For_MenuControl+0x3c>
 802a162:	4b0b      	ldr	r3, [pc, #44]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a164:	2200      	movs	r2, #0
 802a166:	801a      	strh	r2, [r3, #0]
 802a168:	2302      	movs	r3, #2
 802a16a:	e00c      	b.n	802a186 <tos_EnterButton_Listenner_For_MenuControl+0x56>
				if(enterbtncounter>=BTN_SHORT_PRESS_TIME){ enterbtncounter=0;return 1;}
 802a16c:	4b08      	ldr	r3, [pc, #32]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a16e:	881b      	ldrh	r3, [r3, #0]
 802a170:	2b04      	cmp	r3, #4
 802a172:	d904      	bls.n	802a17e <tos_EnterButton_Listenner_For_MenuControl+0x4e>
 802a174:	4b06      	ldr	r3, [pc, #24]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a176:	2200      	movs	r2, #0
 802a178:	801a      	strh	r2, [r3, #0]
 802a17a:	2301      	movs	r3, #1
 802a17c:	e003      	b.n	802a186 <tos_EnterButton_Listenner_For_MenuControl+0x56>
				 enterbtncounter=0;
 802a17e:	4b04      	ldr	r3, [pc, #16]	; (802a190 <tos_EnterButton_Listenner_For_MenuControl+0x60>)
 802a180:	2200      	movs	r2, #0
 802a182:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 802a184:	2300      	movs	r3, #0
}
 802a186:	4618      	mov	r0, r3
 802a188:	bd80      	pop	{r7, pc}
 802a18a:	bf00      	nop
 802a18c:	40021000 	.word	0x40021000
 802a190:	2001b5a2 	.word	0x2001b5a2

0802a194 <tos_ButtonCounterIncrease>:
void tos_ButtonCounterIncrease(void){
 802a194:	b580      	push	{r7, lr}
 802a196:	af00      	add	r7, sp, #0
	if(!READ_ENTER_BTN)enterbtncounter++;
 802a198:	2120      	movs	r1, #32
 802a19a:	4815      	ldr	r0, [pc, #84]	; (802a1f0 <tos_ButtonCounterIncrease+0x5c>)
 802a19c:	f7d7 ff70 	bl	8002080 <HAL_GPIO_ReadPin>
 802a1a0:	4603      	mov	r3, r0
 802a1a2:	2b00      	cmp	r3, #0
 802a1a4:	d106      	bne.n	802a1b4 <tos_ButtonCounterIncrease+0x20>
 802a1a6:	4b13      	ldr	r3, [pc, #76]	; (802a1f4 <tos_ButtonCounterIncrease+0x60>)
 802a1a8:	881b      	ldrh	r3, [r3, #0]
 802a1aa:	3301      	adds	r3, #1
 802a1ac:	b29a      	uxth	r2, r3
 802a1ae:	4b11      	ldr	r3, [pc, #68]	; (802a1f4 <tos_ButtonCounterIncrease+0x60>)
 802a1b0:	801a      	strh	r2, [r3, #0]
	else if(!READ_LEFT_BTN)leftbtncounter++;
	else if(!READ_RIGHT_BTN)rightbtncounter++;
}
 802a1b2:	e01a      	b.n	802a1ea <tos_ButtonCounterIncrease+0x56>
	else if(!READ_LEFT_BTN)leftbtncounter++;
 802a1b4:	2110      	movs	r1, #16
 802a1b6:	480e      	ldr	r0, [pc, #56]	; (802a1f0 <tos_ButtonCounterIncrease+0x5c>)
 802a1b8:	f7d7 ff62 	bl	8002080 <HAL_GPIO_ReadPin>
 802a1bc:	4603      	mov	r3, r0
 802a1be:	2b00      	cmp	r3, #0
 802a1c0:	d106      	bne.n	802a1d0 <tos_ButtonCounterIncrease+0x3c>
 802a1c2:	4b0d      	ldr	r3, [pc, #52]	; (802a1f8 <tos_ButtonCounterIncrease+0x64>)
 802a1c4:	881b      	ldrh	r3, [r3, #0]
 802a1c6:	3301      	adds	r3, #1
 802a1c8:	b29a      	uxth	r2, r3
 802a1ca:	4b0b      	ldr	r3, [pc, #44]	; (802a1f8 <tos_ButtonCounterIncrease+0x64>)
 802a1cc:	801a      	strh	r2, [r3, #0]
}
 802a1ce:	e00c      	b.n	802a1ea <tos_ButtonCounterIncrease+0x56>
	else if(!READ_RIGHT_BTN)rightbtncounter++;
 802a1d0:	2140      	movs	r1, #64	; 0x40
 802a1d2:	4807      	ldr	r0, [pc, #28]	; (802a1f0 <tos_ButtonCounterIncrease+0x5c>)
 802a1d4:	f7d7 ff54 	bl	8002080 <HAL_GPIO_ReadPin>
 802a1d8:	4603      	mov	r3, r0
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d105      	bne.n	802a1ea <tos_ButtonCounterIncrease+0x56>
 802a1de:	4b07      	ldr	r3, [pc, #28]	; (802a1fc <tos_ButtonCounterIncrease+0x68>)
 802a1e0:	881b      	ldrh	r3, [r3, #0]
 802a1e2:	3301      	adds	r3, #1
 802a1e4:	b29a      	uxth	r2, r3
 802a1e6:	4b05      	ldr	r3, [pc, #20]	; (802a1fc <tos_ButtonCounterIncrease+0x68>)
 802a1e8:	801a      	strh	r2, [r3, #0]
}
 802a1ea:	bf00      	nop
 802a1ec:	bd80      	pop	{r7, pc}
 802a1ee:	bf00      	nop
 802a1f0:	40021000 	.word	0x40021000
 802a1f4:	2001b5a2 	.word	0x2001b5a2
 802a1f8:	2001b5a6 	.word	0x2001b5a6
 802a1fc:	2001b5a4 	.word	0x2001b5a4

0802a200 <tos_Ratio>:
*inMin input minumun
*inMax input maximun
*outMin output minumun
*outMax output maximun
*/
double tos_Ratio(double inValue, double inMin, double inMax, double outMin, double outMax) {
 802a200:	b5b0      	push	{r4, r5, r7, lr}
 802a202:	b08a      	sub	sp, #40	; 0x28
 802a204:	af00      	add	r7, sp, #0
 802a206:	ed87 0b08 	vstr	d0, [r7, #32]
 802a20a:	ed87 1b06 	vstr	d1, [r7, #24]
 802a20e:	ed87 2b04 	vstr	d2, [r7, #16]
 802a212:	ed87 3b02 	vstr	d3, [r7, #8]
 802a216:	ed87 4b00 	vstr	d4, [r7]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 802a21a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a21e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802a222:	f7d6 f841 	bl	80002a8 <__aeabi_dsub>
 802a226:	4603      	mov	r3, r0
 802a228:	460c      	mov	r4, r1
 802a22a:	4625      	mov	r5, r4
 802a22c:	461c      	mov	r4, r3
 802a22e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a232:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a236:	f7d6 f837 	bl	80002a8 <__aeabi_dsub>
 802a23a:	4602      	mov	r2, r0
 802a23c:	460b      	mov	r3, r1
 802a23e:	4620      	mov	r0, r4
 802a240:	4629      	mov	r1, r5
 802a242:	f7d6 f9e9 	bl	8000618 <__aeabi_dmul>
 802a246:	4603      	mov	r3, r0
 802a248:	460c      	mov	r4, r1
 802a24a:	4625      	mov	r5, r4
 802a24c:	461c      	mov	r4, r3
 802a24e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a252:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802a256:	f7d6 f827 	bl	80002a8 <__aeabi_dsub>
 802a25a:	4602      	mov	r2, r0
 802a25c:	460b      	mov	r3, r1
 802a25e:	4620      	mov	r0, r4
 802a260:	4629      	mov	r1, r5
 802a262:	f7d6 fb03 	bl	800086c <__aeabi_ddiv>
 802a266:	4603      	mov	r3, r0
 802a268:	460c      	mov	r4, r1
 802a26a:	4618      	mov	r0, r3
 802a26c:	4621      	mov	r1, r4
 802a26e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a272:	f7d6 f81b 	bl	80002ac <__adddf3>
 802a276:	4603      	mov	r3, r0
 802a278:	460c      	mov	r4, r1
 802a27a:	ec44 3b17 	vmov	d7, r3, r4
}
 802a27e:	eeb0 0a47 	vmov.f32	s0, s14
 802a282:	eef0 0a67 	vmov.f32	s1, s15
 802a286:	3728      	adds	r7, #40	; 0x28
 802a288:	46bd      	mov	sp, r7
 802a28a:	bdb0      	pop	{r4, r5, r7, pc}

0802a28c <tos_Rounding>:
/*This function using for Rounding a floating value to int
*getValue input value
*/
uint8_t tos_Rounding(double getValue){
 802a28c:	b590      	push	{r4, r7, lr}
 802a28e:	b083      	sub	sp, #12
 802a290:	af00      	add	r7, sp, #0
 802a292:	ed87 0b00 	vstr	d0, [r7]
	if(getValue<(((uint8_t)getValue)+0.5f)) return (uint8_t)getValue;
 802a296:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a29a:	f7d6 fc6d 	bl	8000b78 <__aeabi_d2uiz>
 802a29e:	4603      	mov	r3, r0
 802a2a0:	b2db      	uxtb	r3, r3
 802a2a2:	ee07 3a90 	vmov	s15, r3
 802a2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802a2aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802a2ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a2b2:	ee17 0a90 	vmov	r0, s15
 802a2b6:	f7d6 f957 	bl	8000568 <__aeabi_f2d>
 802a2ba:	4603      	mov	r3, r0
 802a2bc:	460c      	mov	r4, r1
 802a2be:	461a      	mov	r2, r3
 802a2c0:	4623      	mov	r3, r4
 802a2c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a2c6:	f7d6 fc19 	bl	8000afc <__aeabi_dcmplt>
 802a2ca:	4603      	mov	r3, r0
 802a2cc:	2b00      	cmp	r3, #0
 802a2ce:	d006      	beq.n	802a2de <tos_Rounding+0x52>
 802a2d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a2d4:	f7d6 fc50 	bl	8000b78 <__aeabi_d2uiz>
 802a2d8:	4603      	mov	r3, r0
 802a2da:	b2db      	uxtb	r3, r3
 802a2dc:	e007      	b.n	802a2ee <tos_Rounding+0x62>
	else return (uint8_t)getValue+1;
 802a2de:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a2e2:	f7d6 fc49 	bl	8000b78 <__aeabi_d2uiz>
 802a2e6:	4603      	mov	r3, r0
 802a2e8:	b2db      	uxtb	r3, r3
 802a2ea:	3301      	adds	r3, #1
 802a2ec:	b2db      	uxtb	r3, r3
}
 802a2ee:	4618      	mov	r0, r3
 802a2f0:	370c      	adds	r7, #12
 802a2f2:	46bd      	mov	sp, r7
 802a2f4:	bd90      	pop	{r4, r7, pc}
	...

0802a2f8 <tos_distance_Calc>:
/*This function using for calculate how much was go distance (kilometers or miles)
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param steps using for get steps value
*/
float tos_distance_Calc(bool unitType,uint16_t steps){
 802a2f8:	b590      	push	{r4, r7, lr}
 802a2fa:	b085      	sub	sp, #20
 802a2fc:	af00      	add	r7, sp, #0
 802a2fe:	4603      	mov	r3, r0
 802a300:	460a      	mov	r2, r1
 802a302:	71fb      	strb	r3, [r7, #7]
 802a304:	4613      	mov	r3, r2
 802a306:	80bb      	strh	r3, [r7, #4]
	float meterTmp=(float)steps*0.707;
 802a308:	88bb      	ldrh	r3, [r7, #4]
 802a30a:	ee07 3a90 	vmov	s15, r3
 802a30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a312:	ee17 0a90 	vmov	r0, s15
 802a316:	f7d6 f927 	bl	8000568 <__aeabi_f2d>
 802a31a:	a310      	add	r3, pc, #64	; (adr r3, 802a35c <tos_distance_Calc+0x64>)
 802a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a320:	f7d6 f97a 	bl	8000618 <__aeabi_dmul>
 802a324:	4603      	mov	r3, r0
 802a326:	460c      	mov	r4, r1
 802a328:	4618      	mov	r0, r3
 802a32a:	4621      	mov	r1, r4
 802a32c:	f7d6 fc44 	bl	8000bb8 <__aeabi_d2f>
 802a330:	4603      	mov	r3, r0
 802a332:	60fb      	str	r3, [r7, #12]
	meterTmp/=1000;
 802a334:	ed97 7a03 	vldr	s14, [r7, #12]
 802a338:	eddf 6a07 	vldr	s13, [pc, #28]	; 802a358 <tos_distance_Calc+0x60>
 802a33c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802a340:	edc7 7a03 	vstr	s15, [r7, #12]
	//if(!unitType) return meterTmp*0.621371192;
	return meterTmp;
 802a344:	68fb      	ldr	r3, [r7, #12]
 802a346:	ee07 3a90 	vmov	s15, r3
}
 802a34a:	eeb0 0a67 	vmov.f32	s0, s15
 802a34e:	3714      	adds	r7, #20
 802a350:	46bd      	mov	sp, r7
 802a352:	bd90      	pop	{r4, r7, pc}
 802a354:	f3af 8000 	nop.w
 802a358:	447a0000 	.word	0x447a0000
 802a35c:	76c8b439 	.word	0x76c8b439
 802a360:	3fe69fbe 	.word	0x3fe69fbe

0802a364 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 802a364:	b580      	push	{r7, lr}
 802a366:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802a368:	f7eb fbbc 	bl	8015ae4 <lv_disp_get_default>
 802a36c:	4603      	mov	r3, r0
 802a36e:	4618      	mov	r0, r3
 802a370:	f7de f884 	bl	800847c <lv_disp_get_scr_act>
 802a374:	4603      	mov	r3, r0
}
 802a376:	4618      	mov	r0, r3
 802a378:	bd80      	pop	{r7, pc}
	...

0802a37c <tos_Screen_Init>:
void tos_Gui_Init(void);
void tos_Screen_Create(void);



void tos_Screen_Init(void){
 802a37c:	b580      	push	{r7, lr}
 802a37e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&TOS_GUI_TIMER);
 802a380:	4806      	ldr	r0, [pc, #24]	; (802a39c <tos_Screen_Init+0x20>)
 802a382:	f7da f97a 	bl	800467a <HAL_TIM_Base_Start_IT>
	TGEnterBtnListenner=0,TGRightBtnListenner=0,TGLeftBtnListenner=0;
 802a386:	4b06      	ldr	r3, [pc, #24]	; (802a3a0 <tos_Screen_Init+0x24>)
 802a388:	2200      	movs	r2, #0
 802a38a:	701a      	strb	r2, [r3, #0]
 802a38c:	4b05      	ldr	r3, [pc, #20]	; (802a3a4 <tos_Screen_Init+0x28>)
 802a38e:	2200      	movs	r2, #0
 802a390:	701a      	strb	r2, [r3, #0]
 802a392:	4b05      	ldr	r3, [pc, #20]	; (802a3a8 <tos_Screen_Init+0x2c>)
 802a394:	2200      	movs	r2, #0
 802a396:	701a      	strb	r2, [r3, #0]

}
 802a398:	bf00      	nop
 802a39a:	bd80      	pop	{r7, pc}
 802a39c:	2001b5d8 	.word	0x2001b5d8
 802a3a0:	2001c1e5 	.word	0x2001c1e5
 802a3a4:	2001c1ea 	.word	0x2001c1ea
 802a3a8:	2001c1e3 	.word	0x2001c1e3

0802a3ac <tos_Screen_Create>:
void tos_Screen_Create(void){
 802a3ac:	b580      	push	{r7, lr}
 802a3ae:	af00      	add	r7, sp, #0
	isScreenCounterEnable=true;
 802a3b0:	4b10      	ldr	r3, [pc, #64]	; (802a3f4 <tos_Screen_Create+0x48>)
 802a3b2:	2201      	movs	r2, #1
 802a3b4:	701a      	strb	r2, [r3, #0]
	screenStatu=true;
 802a3b6:	4b10      	ldr	r3, [pc, #64]	; (802a3f8 <tos_Screen_Create+0x4c>)
 802a3b8:	2201      	movs	r2, #1
 802a3ba:	701a      	strb	r2, [r3, #0]
	GuiHelperOpen=true;
 802a3bc:	4b0f      	ldr	r3, [pc, #60]	; (802a3fc <tos_Screen_Create+0x50>)
 802a3be:	2201      	movs	r2, #1
 802a3c0:	701a      	strb	r2, [r3, #0]
	screenType=1;
 802a3c2:	4b0f      	ldr	r3, [pc, #60]	; (802a400 <tos_Screen_Create+0x54>)
 802a3c4:	2201      	movs	r2, #1
 802a3c6:	701a      	strb	r2, [r3, #0]
	screenTheme=true;
 802a3c8:	4b0e      	ldr	r3, [pc, #56]	; (802a404 <tos_Screen_Create+0x58>)
 802a3ca:	2201      	movs	r2, #1
 802a3cc:	701a      	strb	r2, [r3, #0]
	currentScreen=1;
 802a3ce:	4b0e      	ldr	r3, [pc, #56]	; (802a408 <tos_Screen_Create+0x5c>)
 802a3d0:	2201      	movs	r2, #1
 802a3d2:	701a      	strb	r2, [r3, #0]
	screenCounter=0;
 802a3d4:	4b0d      	ldr	r3, [pc, #52]	; (802a40c <tos_Screen_Create+0x60>)
 802a3d6:	2200      	movs	r2, #0
 802a3d8:	801a      	strh	r2, [r3, #0]
	isWorkingSystem=true;
 802a3da:	4b0d      	ldr	r3, [pc, #52]	; (802a410 <tos_Screen_Create+0x64>)
 802a3dc:	2201      	movs	r2, #1
 802a3de:	701a      	strb	r2, [r3, #0]
	ST7789_UnSelect();
 802a3e0:	2201      	movs	r2, #1
 802a3e2:	2108      	movs	r1, #8
 802a3e4:	480b      	ldr	r0, [pc, #44]	; (802a414 <tos_Screen_Create+0x68>)
 802a3e6:	f7d7 fe63 	bl	80020b0 <HAL_GPIO_WritePin>
	tos_StartScreen_Init();
 802a3ea:	f7fe fa01 	bl	80287f0 <tos_StartScreen_Init>

}
 802a3ee:	bf00      	nop
 802a3f0:	bd80      	pop	{r7, pc}
 802a3f2:	bf00      	nop
 802a3f4:	2001c1e4 	.word	0x2001c1e4
 802a3f8:	2001c1e9 	.word	0x2001c1e9
 802a3fc:	2001c1e1 	.word	0x2001c1e1
 802a400:	2001c1e8 	.word	0x2001c1e8
 802a404:	2001c1e0 	.word	0x2001c1e0
 802a408:	2001c1e2 	.word	0x2001c1e2
 802a40c:	2001c1e6 	.word	0x2001c1e6
 802a410:	2001b5a8 	.word	0x2001b5a8
 802a414:	40020000 	.word	0x40020000

0802a418 <tos_firstScreen_Update>:
void tos_firstScreen_Update(void){
 802a418:	b580      	push	{r7, lr}
 802a41a:	af00      	add	r7, sp, #0
	if(isScreenCounterEnable){
 802a41c:	4b09      	ldr	r3, [pc, #36]	; (802a444 <tos_firstScreen_Update+0x2c>)
 802a41e:	781b      	ldrb	r3, [r3, #0]
 802a420:	2b00      	cmp	r3, #0
 802a422:	d00d      	beq.n	802a440 <tos_firstScreen_Update+0x28>
		screenCounter++;
 802a424:	4b08      	ldr	r3, [pc, #32]	; (802a448 <tos_firstScreen_Update+0x30>)
 802a426:	881b      	ldrh	r3, [r3, #0]
 802a428:	3301      	adds	r3, #1
 802a42a:	b29a      	uxth	r2, r3
 802a42c:	4b06      	ldr	r3, [pc, #24]	; (802a448 <tos_firstScreen_Update+0x30>)
 802a42e:	801a      	strh	r2, [r3, #0]
		if(screenCounter>=5000){
 802a430:	4b05      	ldr	r3, [pc, #20]	; (802a448 <tos_firstScreen_Update+0x30>)
 802a432:	881b      	ldrh	r3, [r3, #0]
 802a434:	f241 3287 	movw	r2, #4999	; 0x1387
 802a438:	4293      	cmp	r3, r2
 802a43a:	d901      	bls.n	802a440 <tos_firstScreen_Update+0x28>
			tos_Gui_Init();
 802a43c:	f000 f806 	bl	802a44c <tos_Gui_Init>
		}
	}

}
 802a440:	bf00      	nop
 802a442:	bd80      	pop	{r7, pc}
 802a444:	2001c1e4 	.word	0x2001c1e4
 802a448:	2001c1e6 	.word	0x2001c1e6

0802a44c <tos_Gui_Init>:

void tos_Gui_Init(void){
 802a44c:	b580      	push	{r7, lr}
 802a44e:	af00      	add	r7, sp, #0
	screenCounter=0;
 802a450:	4b0a      	ldr	r3, [pc, #40]	; (802a47c <tos_Gui_Init+0x30>)
 802a452:	2200      	movs	r2, #0
 802a454:	801a      	strh	r2, [r3, #0]
	currentScreen=0;
 802a456:	4b0a      	ldr	r3, [pc, #40]	; (802a480 <tos_Gui_Init+0x34>)
 802a458:	2200      	movs	r2, #0
 802a45a:	701a      	strb	r2, [r3, #0]
	isScreenCounterEnable=false;
 802a45c:	4b09      	ldr	r3, [pc, #36]	; (802a484 <tos_Gui_Init+0x38>)
 802a45e:	2200      	movs	r2, #0
 802a460:	701a      	strb	r2, [r3, #0]
	lv_obj_clean(lv_scr_act());
 802a462:	f7ff ff7f 	bl	802a364 <lv_scr_act>
 802a466:	4603      	mov	r3, r0
 802a468:	4618      	mov	r0, r3
 802a46a:	f7de ff67 	bl	800933c <lv_obj_clean>
	tos_Screen_Chooser(currentScreen);
 802a46e:	4b04      	ldr	r3, [pc, #16]	; (802a480 <tos_Gui_Init+0x34>)
 802a470:	781b      	ldrb	r3, [r3, #0]
 802a472:	4618      	mov	r0, r3
 802a474:	f000 f8a4 	bl	802a5c0 <tos_Screen_Chooser>
}
 802a478:	bf00      	nop
 802a47a:	bd80      	pop	{r7, pc}
 802a47c:	2001c1e6 	.word	0x2001c1e6
 802a480:	2001c1e2 	.word	0x2001c1e2
 802a484:	2001c1e4 	.word	0x2001c1e4

0802a488 <tos_ScreenController>:


void tos_ScreenController(void){
 802a488:	b580      	push	{r7, lr}
 802a48a:	af00      	add	r7, sp, #0
	if(3==TGEnterBtnListenner){
 802a48c:	4b43      	ldr	r3, [pc, #268]	; (802a59c <tos_ScreenController+0x114>)
 802a48e:	781b      	ldrb	r3, [r3, #0]
 802a490:	2b03      	cmp	r3, #3
 802a492:	d101      	bne.n	802a498 <tos_ScreenController+0x10>
		tos_Gui_ShutdownController();
 802a494:	f000 f962 	bl	802a75c <tos_Gui_ShutdownController>
	}
	tos_Menu_Controller();
 802a498:	f7fa fae2 	bl	8024a60 <tos_Menu_Controller>
	if(screenCounter==0 && GuiHelperOpen){
 802a49c:	4b40      	ldr	r3, [pc, #256]	; (802a5a0 <tos_ScreenController+0x118>)
 802a49e:	881b      	ldrh	r3, [r3, #0]
 802a4a0:	2b00      	cmp	r3, #0
 802a4a2:	d167      	bne.n	802a574 <tos_ScreenController+0xec>
 802a4a4:	4b3f      	ldr	r3, [pc, #252]	; (802a5a4 <tos_ScreenController+0x11c>)
 802a4a6:	781b      	ldrb	r3, [r3, #0]
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	d063      	beq.n	802a574 <tos_ScreenController+0xec>
		if(2==TGEnterBtnListenner){
 802a4ac:	4b3b      	ldr	r3, [pc, #236]	; (802a59c <tos_ScreenController+0x114>)
 802a4ae:	781b      	ldrb	r3, [r3, #0]
 802a4b0:	2b02      	cmp	r3, #2
 802a4b2:	d10f      	bne.n	802a4d4 <tos_ScreenController+0x4c>
				if(screenStatu){screenStatu=false; currentScreen=1;tos_Screen_Chooser(currentScreen); return;}
 802a4b4:	4b3c      	ldr	r3, [pc, #240]	; (802a5a8 <tos_ScreenController+0x120>)
 802a4b6:	781b      	ldrb	r3, [r3, #0]
 802a4b8:	2b00      	cmp	r3, #0
 802a4ba:	d02f      	beq.n	802a51c <tos_ScreenController+0x94>
 802a4bc:	4b3a      	ldr	r3, [pc, #232]	; (802a5a8 <tos_ScreenController+0x120>)
 802a4be:	2200      	movs	r2, #0
 802a4c0:	701a      	strb	r2, [r3, #0]
 802a4c2:	4b3a      	ldr	r3, [pc, #232]	; (802a5ac <tos_ScreenController+0x124>)
 802a4c4:	2201      	movs	r2, #1
 802a4c6:	701a      	strb	r2, [r3, #0]
 802a4c8:	4b38      	ldr	r3, [pc, #224]	; (802a5ac <tos_ScreenController+0x124>)
 802a4ca:	781b      	ldrb	r3, [r3, #0]
 802a4cc:	4618      	mov	r0, r3
 802a4ce:	f000 f877 	bl	802a5c0 <tos_Screen_Chooser>
 802a4d2:	e061      	b.n	802a598 <tos_ScreenController+0x110>
		}
		else if(1==TGEnterBtnListenner){ sleepCounter=0;
 802a4d4:	4b31      	ldr	r3, [pc, #196]	; (802a59c <tos_ScreenController+0x114>)
 802a4d6:	781b      	ldrb	r3, [r3, #0]
 802a4d8:	2b01      	cmp	r3, #1
 802a4da:	d11f      	bne.n	802a51c <tos_ScreenController+0x94>
 802a4dc:	4b34      	ldr	r3, [pc, #208]	; (802a5b0 <tos_ScreenController+0x128>)
 802a4de:	2200      	movs	r2, #0
 802a4e0:	801a      	strh	r2, [r3, #0]
			if(!screenStatu){screenStatu=true;	ST7789_UnSelect(); return;}
 802a4e2:	4b31      	ldr	r3, [pc, #196]	; (802a5a8 <tos_ScreenController+0x120>)
 802a4e4:	781b      	ldrb	r3, [r3, #0]
 802a4e6:	f083 0301 	eor.w	r3, r3, #1
 802a4ea:	b2db      	uxtb	r3, r3
 802a4ec:	2b00      	cmp	r3, #0
 802a4ee:	d008      	beq.n	802a502 <tos_ScreenController+0x7a>
 802a4f0:	4b2d      	ldr	r3, [pc, #180]	; (802a5a8 <tos_ScreenController+0x120>)
 802a4f2:	2201      	movs	r2, #1
 802a4f4:	701a      	strb	r2, [r3, #0]
 802a4f6:	2201      	movs	r2, #1
 802a4f8:	2108      	movs	r1, #8
 802a4fa:	482e      	ldr	r0, [pc, #184]	; (802a5b4 <tos_ScreenController+0x12c>)
 802a4fc:	f7d7 fdd8 	bl	80020b0 <HAL_GPIO_WritePin>
 802a500:	e04a      	b.n	802a598 <tos_ScreenController+0x110>
			else if(1==currentScreen){currentScreen=0; tos_Screen_Chooser(currentScreen);	return;}
 802a502:	4b2a      	ldr	r3, [pc, #168]	; (802a5ac <tos_ScreenController+0x124>)
 802a504:	781b      	ldrb	r3, [r3, #0]
 802a506:	2b01      	cmp	r3, #1
 802a508:	d108      	bne.n	802a51c <tos_ScreenController+0x94>
 802a50a:	4b28      	ldr	r3, [pc, #160]	; (802a5ac <tos_ScreenController+0x124>)
 802a50c:	2200      	movs	r2, #0
 802a50e:	701a      	strb	r2, [r3, #0]
 802a510:	4b26      	ldr	r3, [pc, #152]	; (802a5ac <tos_ScreenController+0x124>)
 802a512:	781b      	ldrb	r3, [r3, #0]
 802a514:	4618      	mov	r0, r3
 802a516:	f000 f853 	bl	802a5c0 <tos_Screen_Chooser>
 802a51a:	e03d      	b.n	802a598 <tos_ScreenController+0x110>
		}

		if(1==TGLeftBtnListenner){ sleepCounter=0;
 802a51c:	4b26      	ldr	r3, [pc, #152]	; (802a5b8 <tos_ScreenController+0x130>)
 802a51e:	781b      	ldrb	r3, [r3, #0]
 802a520:	2b01      	cmp	r3, #1
 802a522:	d111      	bne.n	802a548 <tos_ScreenController+0xc0>
 802a524:	4b22      	ldr	r3, [pc, #136]	; (802a5b0 <tos_ScreenController+0x128>)
 802a526:	2200      	movs	r2, #0
 802a528:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(5); currentScreen=2; tos_Screen_Chooser(currentScreen);
 802a52a:	2005      	movs	r0, #5
 802a52c:	f7fa fc34 	bl	8024d98 <MenuScreen_SetItem>
 802a530:	4b1e      	ldr	r3, [pc, #120]	; (802a5ac <tos_ScreenController+0x124>)
 802a532:	2202      	movs	r2, #2
 802a534:	701a      	strb	r2, [r3, #0]
 802a536:	4b1d      	ldr	r3, [pc, #116]	; (802a5ac <tos_ScreenController+0x124>)
 802a538:	781b      	ldrb	r3, [r3, #0]
 802a53a:	4618      	mov	r0, r3
 802a53c:	f000 f840 	bl	802a5c0 <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 802a540:	4b18      	ldr	r3, [pc, #96]	; (802a5a4 <tos_ScreenController+0x11c>)
 802a542:	2200      	movs	r2, #0
 802a544:	701a      	strb	r2, [r3, #0]
 802a546:	e027      	b.n	802a598 <tos_ScreenController+0x110>
			}
		if(1==TGRightBtnListenner){ sleepCounter=0;
 802a548:	4b1c      	ldr	r3, [pc, #112]	; (802a5bc <tos_ScreenController+0x134>)
 802a54a:	781b      	ldrb	r3, [r3, #0]
 802a54c:	2b01      	cmp	r3, #1
 802a54e:	d111      	bne.n	802a574 <tos_ScreenController+0xec>
 802a550:	4b17      	ldr	r3, [pc, #92]	; (802a5b0 <tos_ScreenController+0x128>)
 802a552:	2200      	movs	r2, #0
 802a554:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(0); currentScreen=2; tos_Screen_Chooser(currentScreen);
 802a556:	2000      	movs	r0, #0
 802a558:	f7fa fc1e 	bl	8024d98 <MenuScreen_SetItem>
 802a55c:	4b13      	ldr	r3, [pc, #76]	; (802a5ac <tos_ScreenController+0x124>)
 802a55e:	2202      	movs	r2, #2
 802a560:	701a      	strb	r2, [r3, #0]
 802a562:	4b12      	ldr	r3, [pc, #72]	; (802a5ac <tos_ScreenController+0x124>)
 802a564:	781b      	ldrb	r3, [r3, #0]
 802a566:	4618      	mov	r0, r3
 802a568:	f000 f82a 	bl	802a5c0 <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 802a56c:	4b0d      	ldr	r3, [pc, #52]	; (802a5a4 <tos_ScreenController+0x11c>)
 802a56e:	2200      	movs	r2, #0
 802a570:	701a      	strb	r2, [r3, #0]
 802a572:	e011      	b.n	802a598 <tos_ScreenController+0x110>
		}


	}
	TGEnterBtnListenner=tos_EnterButton_Listenner_For_MenuControl();
 802a574:	f7ff fddc 	bl	802a130 <tos_EnterButton_Listenner_For_MenuControl>
 802a578:	4603      	mov	r3, r0
 802a57a:	461a      	mov	r2, r3
 802a57c:	4b07      	ldr	r3, [pc, #28]	; (802a59c <tos_ScreenController+0x114>)
 802a57e:	701a      	strb	r2, [r3, #0]
	TGRightBtnListenner=tos_RightButton_Listenner_For_MenuControl();
 802a580:	f7ff fd86 	bl	802a090 <tos_RightButton_Listenner_For_MenuControl>
 802a584:	4603      	mov	r3, r0
 802a586:	461a      	mov	r2, r3
 802a588:	4b0c      	ldr	r3, [pc, #48]	; (802a5bc <tos_ScreenController+0x134>)
 802a58a:	701a      	strb	r2, [r3, #0]
	TGLeftBtnListenner=tos_LeftButton_Listenner_For_MenuControl();
 802a58c:	f7ff fda8 	bl	802a0e0 <tos_LeftButton_Listenner_For_MenuControl>
 802a590:	4603      	mov	r3, r0
 802a592:	461a      	mov	r2, r3
 802a594:	4b08      	ldr	r3, [pc, #32]	; (802a5b8 <tos_ScreenController+0x130>)
 802a596:	701a      	strb	r2, [r3, #0]
}
 802a598:	bd80      	pop	{r7, pc}
 802a59a:	bf00      	nop
 802a59c:	2001c1e5 	.word	0x2001c1e5
 802a5a0:	2001c1e6 	.word	0x2001c1e6
 802a5a4:	2001c1e1 	.word	0x2001c1e1
 802a5a8:	2001c1e9 	.word	0x2001c1e9
 802a5ac:	2001c1e2 	.word	0x2001c1e2
 802a5b0:	2001b5aa 	.word	0x2001b5aa
 802a5b4:	40020000 	.word	0x40020000
 802a5b8:	2001c1e3 	.word	0x2001c1e3
 802a5bc:	2001c1ea 	.word	0x2001c1ea

0802a5c0 <tos_Screen_Chooser>:
/*This function using for set new screen*/
void tos_Screen_Chooser(uint8_t currentScreen){
 802a5c0:	b580      	push	{r7, lr}
 802a5c2:	b082      	sub	sp, #8
 802a5c4:	af00      	add	r7, sp, #0
 802a5c6:	4603      	mov	r3, r0
 802a5c8:	71fb      	strb	r3, [r7, #7]
	SleepModeScreen_TaskControllerSet(false);
 802a5ca:	2000      	movs	r0, #0
 802a5cc:	f7fe f8ae 	bl	802872c <SleepModeScreen_TaskControllerSet>
	MainScreen_TaskControllerSet(false);
 802a5d0:	2000      	movs	r0, #0
 802a5d2:	f7fa f991 	bl	80248f8 <MainScreen_TaskControllerSet>
	MenuScreen_TaskControllerSet(false);
 802a5d6:	2000      	movs	r0, #0
 802a5d8:	f7fa fbce 	bl	8024d78 <MenuScreen_TaskControllerSet>
	lv_obj_clean(lv_scr_act());
 802a5dc:	f7ff fec2 	bl	802a364 <lv_scr_act>
 802a5e0:	4603      	mov	r3, r0
 802a5e2:	4618      	mov	r0, r3
 802a5e4:	f7de feaa 	bl	800933c <lv_obj_clean>
	switch(currentScreen){
 802a5e8:	79fb      	ldrb	r3, [r7, #7]
 802a5ea:	2b01      	cmp	r3, #1
 802a5ec:	d013      	beq.n	802a616 <tos_Screen_Chooser+0x56>
 802a5ee:	2b02      	cmp	r3, #2
 802a5f0:	d017      	beq.n	802a622 <tos_Screen_Chooser+0x62>
 802a5f2:	2b00      	cmp	r3, #0
 802a5f4:	d000      	beq.n	802a5f8 <tos_Screen_Chooser+0x38>
	case TOS_SCREEN_MENU:
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
		MenuScreen_TaskControllerSet(true);
		tos_MenuScreen_Init(screenTheme,ScreenRtc);
		break;
	default: return;
 802a5f6:	e023      	b.n	802a640 <tos_Screen_Chooser+0x80>
		HAL_TIM_Base_Start_IT(&TOS_SCREENUPDATE_TIMER);
 802a5f8:	4813      	ldr	r0, [pc, #76]	; (802a648 <tos_Screen_Chooser+0x88>)
 802a5fa:	f7da f83e 	bl	800467a <HAL_TIM_Base_Start_IT>
		MainScreen_TaskControllerSet(true);
 802a5fe:	2001      	movs	r0, #1
 802a600:	f7fa f97a 	bl	80248f8 <MainScreen_TaskControllerSet>
		tos_MainScreen_Init(screenType,screenTheme);break;
 802a604:	4b11      	ldr	r3, [pc, #68]	; (802a64c <tos_Screen_Chooser+0x8c>)
 802a606:	781a      	ldrb	r2, [r3, #0]
 802a608:	4b11      	ldr	r3, [pc, #68]	; (802a650 <tos_Screen_Chooser+0x90>)
 802a60a:	781b      	ldrb	r3, [r3, #0]
 802a60c:	4619      	mov	r1, r3
 802a60e:	4610      	mov	r0, r2
 802a610:	f7f8 f9ea 	bl	80229e8 <tos_MainScreen_Init>
 802a614:	e014      	b.n	802a640 <tos_Screen_Chooser+0x80>
		SleepModeScreen_TaskControllerSet(true);
 802a616:	2001      	movs	r0, #1
 802a618:	f7fe f888 	bl	802872c <SleepModeScreen_TaskControllerSet>
		tos_SleepModeScreen_Init();break;
 802a61c:	f7fd fda4 	bl	8028168 <tos_SleepModeScreen_Init>
 802a620:	e00e      	b.n	802a640 <tos_Screen_Chooser+0x80>
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
 802a622:	4809      	ldr	r0, [pc, #36]	; (802a648 <tos_Screen_Chooser+0x88>)
 802a624:	f7da f84d 	bl	80046c2 <HAL_TIM_Base_Stop_IT>
		MenuScreen_TaskControllerSet(true);
 802a628:	2001      	movs	r0, #1
 802a62a:	f7fa fba5 	bl	8024d78 <MenuScreen_TaskControllerSet>
		tos_MenuScreen_Init(screenTheme,ScreenRtc);
 802a62e:	4b08      	ldr	r3, [pc, #32]	; (802a650 <tos_Screen_Chooser+0x90>)
 802a630:	781a      	ldrb	r2, [r3, #0]
 802a632:	4b08      	ldr	r3, [pc, #32]	; (802a654 <tos_Screen_Chooser+0x94>)
 802a634:	681b      	ldr	r3, [r3, #0]
 802a636:	4619      	mov	r1, r3
 802a638:	4610      	mov	r0, r2
 802a63a:	f7fa f9bf 	bl	80249bc <tos_MenuScreen_Init>
		break;
 802a63e:	bf00      	nop
	}
}
 802a640:	3708      	adds	r7, #8
 802a642:	46bd      	mov	sp, r7
 802a644:	bd80      	pop	{r7, pc}
 802a646:	bf00      	nop
 802a648:	2001b66c 	.word	0x2001b66c
 802a64c:	2001c1e8 	.word	0x2001c1e8
 802a650:	2001c1e0 	.word	0x2001c1e0
 802a654:	2001c1ec 	.word	0x2001c1ec

0802a658 <tos_Screen_Variables_Getter>:
void tos_Screen_Variables_Getter(uint8_t Screen){
 802a658:	b580      	push	{r7, lr}
 802a65a:	b082      	sub	sp, #8
 802a65c:	af00      	add	r7, sp, #0
 802a65e:	4603      	mov	r3, r0
 802a660:	71fb      	strb	r3, [r7, #7]

	  tos_RTC_GetTime(ScreenRtc,Screen);
 802a662:	4b09      	ldr	r3, [pc, #36]	; (802a688 <tos_Screen_Variables_Getter+0x30>)
 802a664:	681b      	ldr	r3, [r3, #0]
 802a666:	79fa      	ldrb	r2, [r7, #7]
 802a668:	4611      	mov	r1, r2
 802a66a:	4618      	mov	r0, r3
 802a66c:	f000 f9a8 	bl	802a9c0 <tos_RTC_GetTime>
	  tos_getBatteryVAl(50,Screen);
 802a670:	79fb      	ldrb	r3, [r7, #7]
 802a672:	4619      	mov	r1, r3
 802a674:	2032      	movs	r0, #50	; 0x32
 802a676:	f7ff f8e1 	bl	802983c <tos_getBatteryVAl>
	  tos_StepsAndKcalsSetVal();
 802a67a:	f000 fb93 	bl	802ada4 <tos_StepsAndKcalsSetVal>

}
 802a67e:	bf00      	nop
 802a680:	3708      	adds	r7, #8
 802a682:	46bd      	mov	sp, r7
 802a684:	bd80      	pop	{r7, pc}
 802a686:	bf00      	nop
 802a688:	2001c1ec 	.word	0x2001c1ec

0802a68c <tos_Get_Rtc>:
void tos_Get_Rtc(RTC_HandleTypeDef *hrtc){
 802a68c:	b480      	push	{r7}
 802a68e:	b083      	sub	sp, #12
 802a690:	af00      	add	r7, sp, #0
 802a692:	6078      	str	r0, [r7, #4]
	ScreenRtc=hrtc;
 802a694:	4a04      	ldr	r2, [pc, #16]	; (802a6a8 <tos_Get_Rtc+0x1c>)
 802a696:	687b      	ldr	r3, [r7, #4]
 802a698:	6013      	str	r3, [r2, #0]
}
 802a69a:	bf00      	nop
 802a69c:	370c      	adds	r7, #12
 802a69e:	46bd      	mov	sp, r7
 802a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6a4:	4770      	bx	lr
 802a6a6:	bf00      	nop
 802a6a8:	2001c1ec 	.word	0x2001c1ec

0802a6ac <tos_Get_Current_Screen>:
uint8_t tos_Get_Current_Screen(void){
 802a6ac:	b480      	push	{r7}
 802a6ae:	af00      	add	r7, sp, #0
	return currentScreen;
 802a6b0:	4b03      	ldr	r3, [pc, #12]	; (802a6c0 <tos_Get_Current_Screen+0x14>)
 802a6b2:	781b      	ldrb	r3, [r3, #0]
}
 802a6b4:	4618      	mov	r0, r3
 802a6b6:	46bd      	mov	sp, r7
 802a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6bc:	4770      	bx	lr
 802a6be:	bf00      	nop
 802a6c0:	2001c1e2 	.word	0x2001c1e2

0802a6c4 <tos_Set_Current_Screen>:
void tos_Set_Current_Screen(void){
 802a6c4:	b580      	push	{r7, lr}
 802a6c6:	af00      	add	r7, sp, #0
	currentScreen=0; tos_Screen_Chooser(currentScreen);
 802a6c8:	4b06      	ldr	r3, [pc, #24]	; (802a6e4 <tos_Set_Current_Screen+0x20>)
 802a6ca:	2200      	movs	r2, #0
 802a6cc:	701a      	strb	r2, [r3, #0]
 802a6ce:	4b05      	ldr	r3, [pc, #20]	; (802a6e4 <tos_Set_Current_Screen+0x20>)
 802a6d0:	781b      	ldrb	r3, [r3, #0]
 802a6d2:	4618      	mov	r0, r3
 802a6d4:	f7ff ff74 	bl	802a5c0 <tos_Screen_Chooser>
	GuiHelperOpen=true;
 802a6d8:	4b03      	ldr	r3, [pc, #12]	; (802a6e8 <tos_Set_Current_Screen+0x24>)
 802a6da:	2201      	movs	r2, #1
 802a6dc:	701a      	strb	r2, [r3, #0]
}
 802a6de:	bf00      	nop
 802a6e0:	bd80      	pop	{r7, pc}
 802a6e2:	bf00      	nop
 802a6e4:	2001c1e2 	.word	0x2001c1e2
 802a6e8:	2001c1e1 	.word	0x2001c1e1

0802a6ec <tos_SleepScreen_Counter>:
void tos_SleepScreen_Counter(void){
 802a6ec:	b580      	push	{r7, lr}
 802a6ee:	af00      	add	r7, sp, #0
	if(isWorkingSystem && screenStatu)sleepCounter++;
 802a6f0:	4b15      	ldr	r3, [pc, #84]	; (802a748 <tos_SleepScreen_Counter+0x5c>)
 802a6f2:	781b      	ldrb	r3, [r3, #0]
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	d009      	beq.n	802a70c <tos_SleepScreen_Counter+0x20>
 802a6f8:	4b14      	ldr	r3, [pc, #80]	; (802a74c <tos_SleepScreen_Counter+0x60>)
 802a6fa:	781b      	ldrb	r3, [r3, #0]
 802a6fc:	2b00      	cmp	r3, #0
 802a6fe:	d005      	beq.n	802a70c <tos_SleepScreen_Counter+0x20>
 802a700:	4b13      	ldr	r3, [pc, #76]	; (802a750 <tos_SleepScreen_Counter+0x64>)
 802a702:	881b      	ldrh	r3, [r3, #0]
 802a704:	3301      	adds	r3, #1
 802a706:	b29a      	uxth	r2, r3
 802a708:	4b11      	ldr	r3, [pc, #68]	; (802a750 <tos_SleepScreen_Counter+0x64>)
 802a70a:	801a      	strh	r2, [r3, #0]
	if(sleepCounter>=450){
 802a70c:	4b10      	ldr	r3, [pc, #64]	; (802a750 <tos_SleepScreen_Counter+0x64>)
 802a70e:	881b      	ldrh	r3, [r3, #0]
 802a710:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 802a714:	d316      	bcc.n	802a744 <tos_SleepScreen_Counter+0x58>
		if(1==currentScreen) { screenStatu=false; ST7789_Select(); }
 802a716:	4b0f      	ldr	r3, [pc, #60]	; (802a754 <tos_SleepScreen_Counter+0x68>)
 802a718:	781b      	ldrb	r3, [r3, #0]
 802a71a:	2b01      	cmp	r3, #1
 802a71c:	d107      	bne.n	802a72e <tos_SleepScreen_Counter+0x42>
 802a71e:	4b0b      	ldr	r3, [pc, #44]	; (802a74c <tos_SleepScreen_Counter+0x60>)
 802a720:	2200      	movs	r2, #0
 802a722:	701a      	strb	r2, [r3, #0]
 802a724:	2200      	movs	r2, #0
 802a726:	2108      	movs	r1, #8
 802a728:	480b      	ldr	r0, [pc, #44]	; (802a758 <tos_SleepScreen_Counter+0x6c>)
 802a72a:	f7d7 fcc1 	bl	80020b0 <HAL_GPIO_WritePin>
		currentScreen=1; tos_Screen_Chooser(currentScreen);
 802a72e:	4b09      	ldr	r3, [pc, #36]	; (802a754 <tos_SleepScreen_Counter+0x68>)
 802a730:	2201      	movs	r2, #1
 802a732:	701a      	strb	r2, [r3, #0]
 802a734:	4b07      	ldr	r3, [pc, #28]	; (802a754 <tos_SleepScreen_Counter+0x68>)
 802a736:	781b      	ldrb	r3, [r3, #0]
 802a738:	4618      	mov	r0, r3
 802a73a:	f7ff ff41 	bl	802a5c0 <tos_Screen_Chooser>
		sleepCounter=0;
 802a73e:	4b04      	ldr	r3, [pc, #16]	; (802a750 <tos_SleepScreen_Counter+0x64>)
 802a740:	2200      	movs	r2, #0
 802a742:	801a      	strh	r2, [r3, #0]
	}
}
 802a744:	bf00      	nop
 802a746:	bd80      	pop	{r7, pc}
 802a748:	2001b5a8 	.word	0x2001b5a8
 802a74c:	2001c1e9 	.word	0x2001c1e9
 802a750:	2001b5aa 	.word	0x2001b5aa
 802a754:	2001c1e2 	.word	0x2001c1e2
 802a758:	40020000 	.word	0x40020000

0802a75c <tos_Gui_ShutdownController>:
void tos_Gui_ShutdownController(void){
 802a75c:	b580      	push	{r7, lr}
 802a75e:	af00      	add	r7, sp, #0
	if(isWorkingSystem){
 802a760:	4b13      	ldr	r3, [pc, #76]	; (802a7b0 <tos_Gui_ShutdownController+0x54>)
 802a762:	781b      	ldrb	r3, [r3, #0]
 802a764:	2b00      	cmp	r3, #0
 802a766:	d01c      	beq.n	802a7a2 <tos_Gui_ShutdownController+0x46>
		GuiHelperOpen=false;
 802a768:	4b12      	ldr	r3, [pc, #72]	; (802a7b4 <tos_Gui_ShutdownController+0x58>)
 802a76a:	2200      	movs	r2, #0
 802a76c:	701a      	strb	r2, [r3, #0]
		isWorkingSystem=false;
 802a76e:	4b10      	ldr	r3, [pc, #64]	; (802a7b0 <tos_Gui_ShutdownController+0x54>)
 802a770:	2200      	movs	r2, #0
 802a772:	701a      	strb	r2, [r3, #0]
		tos_StartScreen_Init();
 802a774:	f7fe f83c 	bl	80287f0 <tos_StartScreen_Init>
		lv_obj_clean(lv_scr_act());
 802a778:	f7ff fdf4 	bl	802a364 <lv_scr_act>
 802a77c:	4603      	mov	r3, r0
 802a77e:	4618      	mov	r0, r3
 802a780:	f7de fddc 	bl	800933c <lv_obj_clean>
		SleepModeScreen_TaskControllerSet(false);
 802a784:	2000      	movs	r0, #0
 802a786:	f7fd ffd1 	bl	802872c <SleepModeScreen_TaskControllerSet>
		MainScreen_TaskControllerSet(false);
 802a78a:	2000      	movs	r0, #0
 802a78c:	f7fa f8b4 	bl	80248f8 <MainScreen_TaskControllerSet>
		MenuScreen_TaskControllerSet(false);
 802a790:	2000      	movs	r0, #0
 802a792:	f7fa faf1 	bl	8024d78 <MenuScreen_TaskControllerSet>
		ST7789_Select();
 802a796:	2200      	movs	r2, #0
 802a798:	2108      	movs	r1, #8
 802a79a:	4807      	ldr	r0, [pc, #28]	; (802a7b8 <tos_Gui_ShutdownController+0x5c>)
 802a79c:	f7d7 fc88 	bl	80020b0 <HAL_GPIO_WritePin>
	}else {
		isWorkingSystem=true;
		tos_Screen_Create();
	}

}
 802a7a0:	e004      	b.n	802a7ac <tos_Gui_ShutdownController+0x50>
		isWorkingSystem=true;
 802a7a2:	4b03      	ldr	r3, [pc, #12]	; (802a7b0 <tos_Gui_ShutdownController+0x54>)
 802a7a4:	2201      	movs	r2, #1
 802a7a6:	701a      	strb	r2, [r3, #0]
		tos_Screen_Create();
 802a7a8:	f7ff fe00 	bl	802a3ac <tos_Screen_Create>
}
 802a7ac:	bf00      	nop
 802a7ae:	bd80      	pop	{r7, pc}
 802a7b0:	2001b5a8 	.word	0x2001b5a8
 802a7b4:	2001c1e1 	.word	0x2001c1e1
 802a7b8:	40020000 	.word	0x40020000

0802a7bc <tos_Gui_GetWorkingSystemVal>:
bool tos_Gui_GetWorkingSystemVal(void){
 802a7bc:	b480      	push	{r7}
 802a7be:	af00      	add	r7, sp, #0
	return isWorkingSystem;
 802a7c0:	4b03      	ldr	r3, [pc, #12]	; (802a7d0 <tos_Gui_GetWorkingSystemVal+0x14>)
 802a7c2:	781b      	ldrb	r3, [r3, #0]
}
 802a7c4:	4618      	mov	r0, r3
 802a7c6:	46bd      	mov	sp, r7
 802a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7cc:	4770      	bx	lr
 802a7ce:	bf00      	nop
 802a7d0:	2001b5a8 	.word	0x2001b5a8

0802a7d4 <tos_Notification_CreateRoot>:
#include "tos_Notification_Helper.h"



tos_Notification *  tos_Notification_CreateRoot(tos_Notification * root){
 802a7d4:	b580      	push	{r7, lr}
 802a7d6:	b082      	sub	sp, #8
 802a7d8:	af00      	add	r7, sp, #0
 802a7da:	6078      	str	r0, [r7, #4]
	root=NULL;
 802a7dc:	2300      	movs	r3, #0
 802a7de:	607b      	str	r3, [r7, #4]
	root=tos_Notification_CreateNode(0);
 802a7e0:	2000      	movs	r0, #0
 802a7e2:	f000 f816 	bl	802a812 <tos_Notification_CreateNode>
 802a7e6:	6078      	str	r0, [r7, #4]
    return root;
 802a7e8:	687b      	ldr	r3, [r7, #4]
}
 802a7ea:	4618      	mov	r0, r3
 802a7ec:	3708      	adds	r7, #8
 802a7ee:	46bd      	mov	sp, r7
 802a7f0:	bd80      	pop	{r7, pc}

0802a7f2 <tos_Notification_SetFirstNode>:
tos_Notification *  tos_Notification_SetFirstNode(tos_Notification * root,tos_Notification * node){
 802a7f2:	b480      	push	{r7}
 802a7f4:	b083      	sub	sp, #12
 802a7f6:	af00      	add	r7, sp, #0
 802a7f8:	6078      	str	r0, [r7, #4]
 802a7fa:	6039      	str	r1, [r7, #0]
    node=NULL;
 802a7fc:	2300      	movs	r3, #0
 802a7fe:	603b      	str	r3, [r7, #0]
    node=root;
 802a800:	687b      	ldr	r3, [r7, #4]
 802a802:	603b      	str	r3, [r7, #0]
    return node;
 802a804:	683b      	ldr	r3, [r7, #0]
}
 802a806:	4618      	mov	r0, r3
 802a808:	370c      	adds	r7, #12
 802a80a:	46bd      	mov	sp, r7
 802a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a810:	4770      	bx	lr

0802a812 <tos_Notification_CreateNode>:

tos_Notification * tos_Notification_CreateNode(uint16_t index){
 802a812:	b580      	push	{r7, lr}
 802a814:	b084      	sub	sp, #16
 802a816:	af00      	add	r7, sp, #0
 802a818:	4603      	mov	r3, r0
 802a81a:	80fb      	strh	r3, [r7, #6]
	tos_Notification * node;
	node=(tos_Notification *)malloc(sizeof(tos_Notification));
 802a81c:	20e4      	movs	r0, #228	; 0xe4
 802a81e:	f000 fbe7 	bl	802aff0 <malloc>
 802a822:	4603      	mov	r3, r0
 802a824:	60fb      	str	r3, [r7, #12]
	if(node){
 802a826:	68fb      	ldr	r3, [r7, #12]
 802a828:	2b00      	cmp	r3, #0
 802a82a:	d007      	beq.n	802a83c <tos_Notification_CreateNode+0x2a>
		node->index=index;
 802a82c:	68fb      	ldr	r3, [r7, #12]
 802a82e:	88fa      	ldrh	r2, [r7, #6]
 802a830:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		node->next=NULL;
 802a834:	68fb      	ldr	r3, [r7, #12]
 802a836:	2200      	movs	r2, #0
 802a838:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	}
	return node;
 802a83c:	68fb      	ldr	r3, [r7, #12]
}
 802a83e:	4618      	mov	r0, r3
 802a840:	3710      	adds	r7, #16
 802a842:	46bd      	mov	sp, r7
 802a844:	bd80      	pop	{r7, pc}

0802a846 <tos_Notification_RemoveNode>:

void tos_Notification_RemoveNode(tos_Notification *previous,tos_Notification *node){
 802a846:	b580      	push	{r7, lr}
 802a848:	b082      	sub	sp, #8
 802a84a:	af00      	add	r7, sp, #0
 802a84c:	6078      	str	r0, [r7, #4]
 802a84e:	6039      	str	r1, [r7, #0]

	if(!node){
 802a850:	683b      	ldr	r3, [r7, #0]
 802a852:	2b00      	cmp	r3, #0
 802a854:	d00d      	beq.n	802a872 <tos_Notification_RemoveNode+0x2c>
		return;
	}
	if(previous){
 802a856:	687b      	ldr	r3, [r7, #4]
 802a858:	2b00      	cmp	r3, #0
 802a85a:	d005      	beq.n	802a868 <tos_Notification_RemoveNode+0x22>
		previous->next=node->next;
 802a85c:	683b      	ldr	r3, [r7, #0]
 802a85e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 802a862:	687b      	ldr	r3, [r7, #4]
 802a864:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	}
	free(node);
 802a868:	6838      	ldr	r0, [r7, #0]
 802a86a:	f000 fbc9 	bl	802b000 <free>
	return;
 802a86e:	bf00      	nop
 802a870:	e000      	b.n	802a874 <tos_Notification_RemoveNode+0x2e>
		return;
 802a872:	bf00      	nop
}
 802a874:	3708      	adds	r7, #8
 802a876:	46bd      	mov	sp, r7
 802a878:	bd80      	pop	{r7, pc}

0802a87a <tos_NotificationGetSize>:
		tmp=tmp->next;
	}
	return;
}

uint8_t tos_NotificationGetSize(tos_Notification * root){
 802a87a:	b480      	push	{r7}
 802a87c:	b085      	sub	sp, #20
 802a87e:	af00      	add	r7, sp, #0
 802a880:	6078      	str	r0, [r7, #4]
	tos_Notification * tmp=root;
 802a882:	687b      	ldr	r3, [r7, #4]
 802a884:	60fb      	str	r3, [r7, #12]
	while(tmp){
 802a886:	e00f      	b.n	802a8a8 <tos_NotificationGetSize+0x2e>
    if(tmp->next==NULL)	return (tmp->index+1);
 802a888:	68fb      	ldr	r3, [r7, #12]
 802a88a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a88e:	2b00      	cmp	r3, #0
 802a890:	d106      	bne.n	802a8a0 <tos_NotificationGetSize+0x26>
 802a892:	68fb      	ldr	r3, [r7, #12]
 802a894:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 802a898:	b2db      	uxtb	r3, r3
 802a89a:	3301      	adds	r3, #1
 802a89c:	b2db      	uxtb	r3, r3
 802a89e:	e006      	b.n	802a8ae <tos_NotificationGetSize+0x34>
	tmp=tmp->next;
 802a8a0:	68fb      	ldr	r3, [r7, #12]
 802a8a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8a6:	60fb      	str	r3, [r7, #12]
	while(tmp){
 802a8a8:	68fb      	ldr	r3, [r7, #12]
 802a8aa:	2b00      	cmp	r3, #0
 802a8ac:	d1ec      	bne.n	802a888 <tos_NotificationGetSize+0xe>
	}

}
 802a8ae:	4618      	mov	r0, r3
 802a8b0:	3714      	adds	r7, #20
 802a8b2:	46bd      	mov	sp, r7
 802a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8b8:	4770      	bx	lr

0802a8ba <tos_NotificationGetItem>:


tos_Notification *tos_NotificationGetItem(tos_Notification * root,uint16_t itemIndex){
 802a8ba:	b580      	push	{r7, lr}
 802a8bc:	b084      	sub	sp, #16
 802a8be:	af00      	add	r7, sp, #0
 802a8c0:	6078      	str	r0, [r7, #4]
 802a8c2:	460b      	mov	r3, r1
 802a8c4:	807b      	strh	r3, [r7, #2]
		tos_Notification * tmp=root;
 802a8c6:	687b      	ldr	r3, [r7, #4]
 802a8c8:	60fb      	str	r3, [r7, #12]
	if( itemIndex<tos_NotificationGetSize(root)){
 802a8ca:	6878      	ldr	r0, [r7, #4]
 802a8cc:	f7ff ffd5 	bl	802a87a <tos_NotificationGetSize>
 802a8d0:	4603      	mov	r3, r0
 802a8d2:	b29b      	uxth	r3, r3
 802a8d4:	887a      	ldrh	r2, [r7, #2]
 802a8d6:	429a      	cmp	r2, r3
 802a8d8:	d20f      	bcs.n	802a8fa <tos_NotificationGetItem+0x40>
		while(tmp){
 802a8da:	e00b      	b.n	802a8f4 <tos_NotificationGetItem+0x3a>
	if(tmp->index==itemIndex){
 802a8dc:	68fb      	ldr	r3, [r7, #12]
 802a8de:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 802a8e2:	887a      	ldrh	r2, [r7, #2]
 802a8e4:	429a      	cmp	r2, r3
 802a8e6:	d101      	bne.n	802a8ec <tos_NotificationGetItem+0x32>
		return tmp;
 802a8e8:	68fb      	ldr	r3, [r7, #12]
 802a8ea:	e007      	b.n	802a8fc <tos_NotificationGetItem+0x42>
	}tmp=tmp->next;
 802a8ec:	68fb      	ldr	r3, [r7, #12]
 802a8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8f2:	60fb      	str	r3, [r7, #12]
		while(tmp){
 802a8f4:	68fb      	ldr	r3, [r7, #12]
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	d1f0      	bne.n	802a8dc <tos_NotificationGetItem+0x22>
	}}
        return NULL;
 802a8fa:	2300      	movs	r3, #0
}
 802a8fc:	4618      	mov	r0, r3
 802a8fe:	3710      	adds	r7, #16
 802a900:	46bd      	mov	sp, r7
 802a902:	bd80      	pop	{r7, pc}

0802a904 <tos_NotificationPushItem>:


tos_Notification * tos_NotificationPushItem(tos_Notification * node,char *appName,char *notification){
 802a904:	b580      	push	{r7, lr}
 802a906:	b086      	sub	sp, #24
 802a908:	af00      	add	r7, sp, #0
 802a90a:	60f8      	str	r0, [r7, #12]
 802a90c:	60b9      	str	r1, [r7, #8]
 802a90e:	607a      	str	r2, [r7, #4]
		tos_Notification * tmp;
		tmp=tos_Notification_CreateNode(tos_NotificationGetSize(node));
 802a910:	68f8      	ldr	r0, [r7, #12]
 802a912:	f7ff ffb2 	bl	802a87a <tos_NotificationGetSize>
 802a916:	4603      	mov	r3, r0
 802a918:	b29b      	uxth	r3, r3
 802a91a:	4618      	mov	r0, r3
 802a91c:	f7ff ff79 	bl	802a812 <tos_Notification_CreateNode>
 802a920:	6178      	str	r0, [r7, #20]
		if(appName!=NULL)sscanf(appName,"%s",tmp->appName);
 802a922:	68bb      	ldr	r3, [r7, #8]
 802a924:	2b00      	cmp	r3, #0
 802a926:	d005      	beq.n	802a934 <tos_NotificationPushItem+0x30>
 802a928:	697b      	ldr	r3, [r7, #20]
 802a92a:	461a      	mov	r2, r3
 802a92c:	490d      	ldr	r1, [pc, #52]	; (802a964 <tos_NotificationPushItem+0x60>)
 802a92e:	68b8      	ldr	r0, [r7, #8]
 802a930:	f000 fc8e 	bl	802b250 <siscanf>
		if(notification!=NULL)sscanf(notification,"%s",tmp->appNot);
 802a934:	687b      	ldr	r3, [r7, #4]
 802a936:	2b00      	cmp	r3, #0
 802a938:	d006      	beq.n	802a948 <tos_NotificationPushItem+0x44>
 802a93a:	697b      	ldr	r3, [r7, #20]
 802a93c:	3314      	adds	r3, #20
 802a93e:	461a      	mov	r2, r3
 802a940:	4908      	ldr	r1, [pc, #32]	; (802a964 <tos_NotificationPushItem+0x60>)
 802a942:	6878      	ldr	r0, [r7, #4]
 802a944:	f000 fc84 	bl	802b250 <siscanf>
        node->next=tmp;
 802a948:	68fb      	ldr	r3, [r7, #12]
 802a94a:	697a      	ldr	r2, [r7, #20]
 802a94c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        node=node->next;
 802a950:	68fb      	ldr	r3, [r7, #12]
 802a952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a956:	60fb      	str	r3, [r7, #12]
        return node;
 802a958:	68fb      	ldr	r3, [r7, #12]

}
 802a95a:	4618      	mov	r0, r3
 802a95c:	3718      	adds	r7, #24
 802a95e:	46bd      	mov	sp, r7
 802a960:	bd80      	pop	{r7, pc}
 802a962:	bf00      	nop
 802a964:	0802dcf4 	.word	0x0802dcf4

0802a968 <tos_NotificationDelItem>:

void tos_NotificationDelItem(tos_Notification *root,tos_Notification *node,uint16_t index){
 802a968:	b580      	push	{r7, lr}
 802a96a:	b086      	sub	sp, #24
 802a96c:	af00      	add	r7, sp, #0
 802a96e:	60f8      	str	r0, [r7, #12]
 802a970:	60b9      	str	r1, [r7, #8]
 802a972:	4613      	mov	r3, r2
 802a974:	80fb      	strh	r3, [r7, #6]
		node=root;
 802a976:	68fb      	ldr	r3, [r7, #12]
 802a978:	60bb      	str	r3, [r7, #8]
		tos_Notification * tmp=NULL;
 802a97a:	2300      	movs	r3, #0
 802a97c:	617b      	str	r3, [r7, #20]
		while(node){
 802a97e:	e017      	b.n	802a9b0 <tos_NotificationDelItem+0x48>
			if(node->index==index){
 802a980:	68bb      	ldr	r3, [r7, #8]
 802a982:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 802a986:	88fa      	ldrh	r2, [r7, #6]
 802a988:	429a      	cmp	r2, r3
 802a98a:	d10b      	bne.n	802a9a4 <tos_NotificationDelItem+0x3c>
				if(tmp==NULL){
 802a98c:	697b      	ldr	r3, [r7, #20]
 802a98e:	2b00      	cmp	r3, #0
 802a990:	d103      	bne.n	802a99a <tos_NotificationDelItem+0x32>
					root=node->next;
 802a992:	68bb      	ldr	r3, [r7, #8]
 802a994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a998:	60fb      	str	r3, [r7, #12]
				}
				tos_Notification_RemoveNode(tmp,node);
 802a99a:	68b9      	ldr	r1, [r7, #8]
 802a99c:	6978      	ldr	r0, [r7, #20]
 802a99e:	f7ff ff52 	bl	802a846 <tos_Notification_RemoveNode>
				break;
 802a9a2:	e008      	b.n	802a9b6 <tos_NotificationDelItem+0x4e>
			}
			tmp=node;
 802a9a4:	68bb      	ldr	r3, [r7, #8]
 802a9a6:	617b      	str	r3, [r7, #20]
			node=node->next;
 802a9a8:	68bb      	ldr	r3, [r7, #8]
 802a9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9ae:	60bb      	str	r3, [r7, #8]
		while(node){
 802a9b0:	68bb      	ldr	r3, [r7, #8]
 802a9b2:	2b00      	cmp	r3, #0
 802a9b4:	d1e4      	bne.n	802a980 <tos_NotificationDelItem+0x18>
		}
}
 802a9b6:	bf00      	nop
 802a9b8:	3718      	adds	r7, #24
 802a9ba:	46bd      	mov	sp, r7
 802a9bc:	bd80      	pop	{r7, pc}
	...

0802a9c0 <tos_RTC_GetTime>:
	tos_RTC_SetDate(hrtc,tos_Flash_GetYear(),tos_Flash_GetMonth(),tos_Flash_GetDate());
	tos_RTC_SetTime(hrtc,tos_Flash_GetHours(),tos_Flash_GetMinutes(),tos_Flash_GetSeconds());

}

  void tos_RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t Screen){
 802a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a9c2:	b083      	sub	sp, #12
 802a9c4:	af00      	add	r7, sp, #0
 802a9c6:	6078      	str	r0, [r7, #4]
 802a9c8:	460b      	mov	r3, r1
 802a9ca:	70fb      	strb	r3, [r7, #3]
	  	  	  static uint8_t befDate;
			  HAL_RTC_GetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 802a9cc:	2200      	movs	r2, #0
 802a9ce:	4937      	ldr	r1, [pc, #220]	; (802aaac <tos_RTC_GetTime+0xec>)
 802a9d0:	6878      	ldr	r0, [r7, #4]
 802a9d2:	f7d9 f9ff 	bl	8003dd4 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 802a9d6:	2200      	movs	r2, #0
 802a9d8:	4935      	ldr	r1, [pc, #212]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802a9da:	6878      	ldr	r0, [r7, #4]
 802a9dc:	f7d9 faff 	bl	8003fde <HAL_RTC_GetDate>
			  if(befDate!=myDate.Date)tos_StepsAndKcalsSetSteps(0);
 802a9e0:	4b33      	ldr	r3, [pc, #204]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802a9e2:	789a      	ldrb	r2, [r3, #2]
 802a9e4:	4b33      	ldr	r3, [pc, #204]	; (802aab4 <tos_RTC_GetTime+0xf4>)
 802a9e6:	781b      	ldrb	r3, [r3, #0]
 802a9e8:	429a      	cmp	r2, r3
 802a9ea:	d002      	beq.n	802a9f2 <tos_RTC_GetTime+0x32>
 802a9ec:	2000      	movs	r0, #0
 802a9ee:	f000 fa25 	bl	802ae3c <tos_StepsAndKcalsSetSteps>
			  switch(Screen){
 802a9f2:	78fb      	ldrb	r3, [r7, #3]
 802a9f4:	2b00      	cmp	r3, #0
 802a9f6:	d002      	beq.n	802a9fe <tos_RTC_GetTime+0x3e>
 802a9f8:	2b01      	cmp	r3, #1
 802a9fa:	d020      	beq.n	802aa3e <tos_RTC_GetTime+0x7e>
 802a9fc:	e03f      	b.n	802aa7e <tos_RTC_GetTime+0xbe>
				befDate=myDate.Date;
				case TOS_SCREEN_MAIN_: MainScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 802a9fe:	4b2b      	ldr	r3, [pc, #172]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa00:	7818      	ldrb	r0, [r3, #0]
 802aa02:	4b2a      	ldr	r3, [pc, #168]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa04:	7859      	ldrb	r1, [r3, #1]
 802aa06:	4b29      	ldr	r3, [pc, #164]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa08:	789b      	ldrb	r3, [r3, #2]
 802aa0a:	461a      	mov	r2, r3
 802aa0c:	f7f9 feea 	bl	80247e4 <MainScreen_SetTime>
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 802aa10:	4b27      	ldr	r3, [pc, #156]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa12:	78dc      	ldrb	r4, [r3, #3]
 802aa14:	4b26      	ldr	r3, [pc, #152]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa16:	785d      	ldrb	r5, [r3, #1]
 802aa18:	4b25      	ldr	r3, [pc, #148]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa1a:	789e      	ldrb	r6, [r3, #2]
 802aa1c:	4b24      	ldr	r3, [pc, #144]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa1e:	78d8      	ldrb	r0, [r3, #3]
 802aa20:	4b23      	ldr	r3, [pc, #140]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa22:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));
 802aa24:	4b22      	ldr	r3, [pc, #136]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa26:	789b      	ldrb	r3, [r3, #2]
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 802aa28:	b29b      	uxth	r3, r3
 802aa2a:	461a      	mov	r2, r3
 802aa2c:	f000 f89c 	bl	802ab68 <weekDayFinder>
 802aa30:	4603      	mov	r3, r0
 802aa32:	4632      	mov	r2, r6
 802aa34:	4629      	mov	r1, r5
 802aa36:	4620      	mov	r0, r4
 802aa38:	f7f9 fef2 	bl	8024820 <MainScreen_SetDate>
				  break;
 802aa3c:	e032      	b.n	802aaa4 <tos_RTC_GetTime+0xe4>
				case TOS_SCREEN_SLEEPMODE_: SleepModeScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 802aa3e:	4b1b      	ldr	r3, [pc, #108]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa40:	7818      	ldrb	r0, [r3, #0]
 802aa42:	4b1a      	ldr	r3, [pc, #104]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa44:	7859      	ldrb	r1, [r3, #1]
 802aa46:	4b19      	ldr	r3, [pc, #100]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa48:	789b      	ldrb	r3, [r3, #2]
 802aa4a:	461a      	mov	r2, r3
 802aa4c:	f7fd fdfc 	bl	8028648 <SleepModeScreen_SetTime>
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 802aa50:	4b17      	ldr	r3, [pc, #92]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa52:	78dc      	ldrb	r4, [r3, #3]
 802aa54:	4b16      	ldr	r3, [pc, #88]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa56:	785d      	ldrb	r5, [r3, #1]
 802aa58:	4b15      	ldr	r3, [pc, #84]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa5a:	789e      	ldrb	r6, [r3, #2]
 802aa5c:	4b14      	ldr	r3, [pc, #80]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa5e:	78d8      	ldrb	r0, [r3, #3]
 802aa60:	4b13      	ldr	r3, [pc, #76]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa62:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 802aa64:	4b12      	ldr	r3, [pc, #72]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa66:	789b      	ldrb	r3, [r3, #2]
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 802aa68:	b29b      	uxth	r3, r3
 802aa6a:	461a      	mov	r2, r3
 802aa6c:	f000 f87c 	bl	802ab68 <weekDayFinder>
 802aa70:	4603      	mov	r3, r0
 802aa72:	4632      	mov	r2, r6
 802aa74:	4629      	mov	r1, r5
 802aa76:	4620      	mov	r0, r4
 802aa78:	f7fd fe04 	bl	8028684 <SleepModeScreen_SetDate>
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 802aa7c:	e012      	b.n	802aaa4 <tos_RTC_GetTime+0xe4>
				default:
					  SettingsScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 802aa7e:	4b0b      	ldr	r3, [pc, #44]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa80:	7818      	ldrb	r0, [r3, #0]
 802aa82:	4b0a      	ldr	r3, [pc, #40]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa84:	7859      	ldrb	r1, [r3, #1]
 802aa86:	4b09      	ldr	r3, [pc, #36]	; (802aaac <tos_RTC_GetTime+0xec>)
 802aa88:	789b      	ldrb	r3, [r3, #2]
 802aa8a:	461a      	mov	r2, r3
 802aa8c:	f7fd faf2 	bl	8028074 <SettingsScreen_SetTime>
					  SettingsScreen_SetDate(myDate.Year,myDate.Month,myDate.Date);
 802aa90:	4b07      	ldr	r3, [pc, #28]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa92:	78d8      	ldrb	r0, [r3, #3]
 802aa94:	4b06      	ldr	r3, [pc, #24]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa96:	7859      	ldrb	r1, [r3, #1]
 802aa98:	4b05      	ldr	r3, [pc, #20]	; (802aab0 <tos_RTC_GetTime+0xf0>)
 802aa9a:	789b      	ldrb	r3, [r3, #2]
 802aa9c:	461a      	mov	r2, r3
 802aa9e:	f7fd fb11 	bl	80280c4 <SettingsScreen_SetDate>
					  return;
 802aaa2:	bf00      	nop
				}

			/*  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
					  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));*/
  }
 802aaa4:	370c      	adds	r7, #12
 802aaa6:	46bd      	mov	sp, r7
 802aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802aaaa:	bf00      	nop
 802aaac:	2001b5ac 	.word	0x2001b5ac
 802aab0:	2001b5c0 	.word	0x2001b5c0
 802aab4:	2001b5c4 	.word	0x2001b5c4

0802aab8 <tos_RTC_SetTime>:

  void tos_RTC_SetTime(RTC_HandleTypeDef *hrtc,uint8_t setHours,uint8_t setMins,uint8_t setSecs){
 802aab8:	b580      	push	{r7, lr}
 802aaba:	b088      	sub	sp, #32
 802aabc:	af00      	add	r7, sp, #0
 802aabe:	6078      	str	r0, [r7, #4]
 802aac0:	4608      	mov	r0, r1
 802aac2:	4611      	mov	r1, r2
 802aac4:	461a      	mov	r2, r3
 802aac6:	4603      	mov	r3, r0
 802aac8:	70fb      	strb	r3, [r7, #3]
 802aaca:	460b      	mov	r3, r1
 802aacc:	70bb      	strb	r3, [r7, #2]
 802aace:	4613      	mov	r3, r2
 802aad0:	707b      	strb	r3, [r7, #1]
	  if(setSecs>60 || setMins>60 || setHours>24) return;
 802aad2:	787b      	ldrb	r3, [r7, #1]
 802aad4:	2b3c      	cmp	r3, #60	; 0x3c
 802aad6:	d81b      	bhi.n	802ab10 <tos_RTC_SetTime+0x58>
 802aad8:	78bb      	ldrb	r3, [r7, #2]
 802aada:	2b3c      	cmp	r3, #60	; 0x3c
 802aadc:	d818      	bhi.n	802ab10 <tos_RTC_SetTime+0x58>
 802aade:	78fb      	ldrb	r3, [r7, #3]
 802aae0:	2b18      	cmp	r3, #24
 802aae2:	d815      	bhi.n	802ab10 <tos_RTC_SetTime+0x58>
	  RTC_TimeTypeDef tmp = {0};
 802aae4:	f107 030c 	add.w	r3, r7, #12
 802aae8:	2200      	movs	r2, #0
 802aaea:	601a      	str	r2, [r3, #0]
 802aaec:	605a      	str	r2, [r3, #4]
 802aaee:	609a      	str	r2, [r3, #8]
 802aaf0:	60da      	str	r2, [r3, #12]
 802aaf2:	611a      	str	r2, [r3, #16]
	  tmp.Hours = setHours;
 802aaf4:	78fb      	ldrb	r3, [r7, #3]
 802aaf6:	733b      	strb	r3, [r7, #12]
	  tmp.Minutes = setMins;
 802aaf8:	78bb      	ldrb	r3, [r7, #2]
 802aafa:	737b      	strb	r3, [r7, #13]
	  tmp.Seconds = setSecs;
 802aafc:	787b      	ldrb	r3, [r7, #1]
 802aafe:	73bb      	strb	r3, [r7, #14]
	  HAL_RTC_SetTime(hrtc,&tmp,RTC_FORMAT_BIN);
 802ab00:	f107 030c 	add.w	r3, r7, #12
 802ab04:	2200      	movs	r2, #0
 802ab06:	4619      	mov	r1, r3
 802ab08:	6878      	ldr	r0, [r7, #4]
 802ab0a:	f7d9 f8a6 	bl	8003c5a <HAL_RTC_SetTime>
 802ab0e:	e000      	b.n	802ab12 <tos_RTC_SetTime+0x5a>
	  if(setSecs>60 || setMins>60 || setHours>24) return;
 802ab10:	bf00      	nop
  }
 802ab12:	3720      	adds	r7, #32
 802ab14:	46bd      	mov	sp, r7
 802ab16:	bd80      	pop	{r7, pc}

0802ab18 <tos_RTC_SetDate>:

  void tos_RTC_SetDate(RTC_HandleTypeDef *hrtc,uint8_t setYear,uint8_t setMonth,uint8_t setDate){
 802ab18:	b580      	push	{r7, lr}
 802ab1a:	b084      	sub	sp, #16
 802ab1c:	af00      	add	r7, sp, #0
 802ab1e:	6078      	str	r0, [r7, #4]
 802ab20:	4608      	mov	r0, r1
 802ab22:	4611      	mov	r1, r2
 802ab24:	461a      	mov	r2, r3
 802ab26:	4603      	mov	r3, r0
 802ab28:	70fb      	strb	r3, [r7, #3]
 802ab2a:	460b      	mov	r3, r1
 802ab2c:	70bb      	strb	r3, [r7, #2]
 802ab2e:	4613      	mov	r3, r2
 802ab30:	707b      	strb	r3, [r7, #1]
	  if(setDate>31 || setMonth>12) return;
 802ab32:	787b      	ldrb	r3, [r7, #1]
 802ab34:	2b1f      	cmp	r3, #31
 802ab36:	d812      	bhi.n	802ab5e <tos_RTC_SetDate+0x46>
 802ab38:	78bb      	ldrb	r3, [r7, #2]
 802ab3a:	2b0c      	cmp	r3, #12
 802ab3c:	d80f      	bhi.n	802ab5e <tos_RTC_SetDate+0x46>
	  RTC_DateTypeDef tmp = {0};
 802ab3e:	2300      	movs	r3, #0
 802ab40:	60fb      	str	r3, [r7, #12]
	  tmp.Year = setYear;
 802ab42:	78fb      	ldrb	r3, [r7, #3]
 802ab44:	73fb      	strb	r3, [r7, #15]
	  tmp.Month = setMonth;
 802ab46:	78bb      	ldrb	r3, [r7, #2]
 802ab48:	737b      	strb	r3, [r7, #13]
	  tmp.Date = setDate;
 802ab4a:	787b      	ldrb	r3, [r7, #1]
 802ab4c:	73bb      	strb	r3, [r7, #14]
	  HAL_RTC_SetDate(hrtc,&tmp,RTC_FORMAT_BIN);
 802ab4e:	f107 030c 	add.w	r3, r7, #12
 802ab52:	2200      	movs	r2, #0
 802ab54:	4619      	mov	r1, r3
 802ab56:	6878      	ldr	r0, [r7, #4]
 802ab58:	f7d9 f99a 	bl	8003e90 <HAL_RTC_SetDate>
 802ab5c:	e000      	b.n	802ab60 <tos_RTC_SetDate+0x48>
	  if(setDate>31 || setMonth>12) return;
 802ab5e:	bf00      	nop
  }
 802ab60:	3710      	adds	r7, #16
 802ab62:	46bd      	mov	sp, r7
 802ab64:	bd80      	pop	{r7, pc}
	...

0802ab68 <weekDayFinder>:



char * weekDayFinder(uint8_t getYear,uint8_t getMonth,uint16_t getDate){
 802ab68:	b590      	push	{r4, r7, lr}
 802ab6a:	b087      	sub	sp, #28
 802ab6c:	af00      	add	r7, sp, #0
 802ab6e:	4603      	mov	r3, r0
 802ab70:	71fb      	strb	r3, [r7, #7]
 802ab72:	460b      	mov	r3, r1
 802ab74:	71bb      	strb	r3, [r7, #6]
 802ab76:	4613      	mov	r3, r2
 802ab78:	80bb      	strh	r3, [r7, #4]
	getYear=getYear+2000;
 802ab7a:	79fb      	ldrb	r3, [r7, #7]
 802ab7c:	3b30      	subs	r3, #48	; 0x30
 802ab7e:	71fb      	strb	r3, [r7, #7]
	static uint8_t t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	getYear-= getMonth < 3;
 802ab80:	79bb      	ldrb	r3, [r7, #6]
 802ab82:	2b02      	cmp	r3, #2
 802ab84:	bf94      	ite	ls
 802ab86:	2301      	movls	r3, #1
 802ab88:	2300      	movhi	r3, #0
 802ab8a:	b2db      	uxtb	r3, r3
 802ab8c:	461a      	mov	r2, r3
 802ab8e:	79fb      	ldrb	r3, [r7, #7]
 802ab90:	1a9b      	subs	r3, r3, r2
 802ab92:	71fb      	strb	r3, [r7, #7]
	double weekDayTmp =(double)((getYear + (getYear/4) - (getYear/100) + (getYear/400) + t[getMonth-1] + getDate) % 7);
 802ab94:	79fb      	ldrb	r3, [r7, #7]
 802ab96:	79fa      	ldrb	r2, [r7, #7]
 802ab98:	0892      	lsrs	r2, r2, #2
 802ab9a:	b2d2      	uxtb	r2, r2
 802ab9c:	4413      	add	r3, r2
 802ab9e:	79fa      	ldrb	r2, [r7, #7]
 802aba0:	492a      	ldr	r1, [pc, #168]	; (802ac4c <weekDayFinder+0xe4>)
 802aba2:	fba1 1202 	umull	r1, r2, r1, r2
 802aba6:	0952      	lsrs	r2, r2, #5
 802aba8:	b2d2      	uxtb	r2, r2
 802abaa:	1a9a      	subs	r2, r3, r2
 802abac:	79fb      	ldrb	r3, [r7, #7]
 802abae:	4927      	ldr	r1, [pc, #156]	; (802ac4c <weekDayFinder+0xe4>)
 802abb0:	fb81 0103 	smull	r0, r1, r1, r3
 802abb4:	11c9      	asrs	r1, r1, #7
 802abb6:	17db      	asrs	r3, r3, #31
 802abb8:	1acb      	subs	r3, r1, r3
 802abba:	4413      	add	r3, r2
 802abbc:	79ba      	ldrb	r2, [r7, #6]
 802abbe:	3a01      	subs	r2, #1
 802abc0:	4923      	ldr	r1, [pc, #140]	; (802ac50 <weekDayFinder+0xe8>)
 802abc2:	5c8a      	ldrb	r2, [r1, r2]
 802abc4:	441a      	add	r2, r3
 802abc6:	88bb      	ldrh	r3, [r7, #4]
 802abc8:	441a      	add	r2, r3
 802abca:	4b22      	ldr	r3, [pc, #136]	; (802ac54 <weekDayFinder+0xec>)
 802abcc:	fb83 1302 	smull	r1, r3, r3, r2
 802abd0:	4413      	add	r3, r2
 802abd2:	1099      	asrs	r1, r3, #2
 802abd4:	17d3      	asrs	r3, r2, #31
 802abd6:	1ac9      	subs	r1, r1, r3
 802abd8:	460b      	mov	r3, r1
 802abda:	00db      	lsls	r3, r3, #3
 802abdc:	1a5b      	subs	r3, r3, r1
 802abde:	1ad1      	subs	r1, r2, r3
 802abe0:	4608      	mov	r0, r1
 802abe2:	f7d5 fcaf 	bl	8000544 <__aeabi_i2d>
 802abe6:	4603      	mov	r3, r0
 802abe8:	460c      	mov	r4, r1
 802abea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t weekDay =tos_Rounding(weekDayTmp);
 802abee:	ed97 0b04 	vldr	d0, [r7, #16]
 802abf2:	f7ff fb4b 	bl	802a28c <tos_Rounding>
 802abf6:	4603      	mov	r3, r0
 802abf8:	73fb      	strb	r3, [r7, #15]


	switch(weekDay){
 802abfa:	7bfb      	ldrb	r3, [r7, #15]
 802abfc:	2b06      	cmp	r3, #6
 802abfe:	d81f      	bhi.n	802ac40 <weekDayFinder+0xd8>
 802ac00:	a201      	add	r2, pc, #4	; (adr r2, 802ac08 <weekDayFinder+0xa0>)
 802ac02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ac06:	bf00      	nop
 802ac08:	0802ac25 	.word	0x0802ac25
 802ac0c:	0802ac29 	.word	0x0802ac29
 802ac10:	0802ac2d 	.word	0x0802ac2d
 802ac14:	0802ac31 	.word	0x0802ac31
 802ac18:	0802ac35 	.word	0x0802ac35
 802ac1c:	0802ac39 	.word	0x0802ac39
 802ac20:	0802ac3d 	.word	0x0802ac3d
	case 0: return "Pazartesi"; break;
 802ac24:	4b0c      	ldr	r3, [pc, #48]	; (802ac58 <weekDayFinder+0xf0>)
 802ac26:	e00c      	b.n	802ac42 <weekDayFinder+0xda>
	case 1: return "Sali"; break;
 802ac28:	4b0c      	ldr	r3, [pc, #48]	; (802ac5c <weekDayFinder+0xf4>)
 802ac2a:	e00a      	b.n	802ac42 <weekDayFinder+0xda>
	case 2: return "Carsamba"; break;
 802ac2c:	4b0c      	ldr	r3, [pc, #48]	; (802ac60 <weekDayFinder+0xf8>)
 802ac2e:	e008      	b.n	802ac42 <weekDayFinder+0xda>
	case 3: return "Persembe"; break;
 802ac30:	4b0c      	ldr	r3, [pc, #48]	; (802ac64 <weekDayFinder+0xfc>)
 802ac32:	e006      	b.n	802ac42 <weekDayFinder+0xda>
	case 4: return "Cuma"; break;
 802ac34:	4b0c      	ldr	r3, [pc, #48]	; (802ac68 <weekDayFinder+0x100>)
 802ac36:	e004      	b.n	802ac42 <weekDayFinder+0xda>
	case 5: return "Cumartesi"; break;
 802ac38:	4b0c      	ldr	r3, [pc, #48]	; (802ac6c <weekDayFinder+0x104>)
 802ac3a:	e002      	b.n	802ac42 <weekDayFinder+0xda>
	case 6: return "Pazar"; break;
 802ac3c:	4b0c      	ldr	r3, [pc, #48]	; (802ac70 <weekDayFinder+0x108>)
 802ac3e:	e000      	b.n	802ac42 <weekDayFinder+0xda>
	default: return " ";
 802ac40:	4b0c      	ldr	r3, [pc, #48]	; (802ac74 <weekDayFinder+0x10c>)
	}

}
 802ac42:	4618      	mov	r0, r3
 802ac44:	371c      	adds	r7, #28
 802ac46:	46bd      	mov	sp, r7
 802ac48:	bd90      	pop	{r4, r7, pc}
 802ac4a:	bf00      	nop
 802ac4c:	51eb851f 	.word	0x51eb851f
 802ac50:	20002850 	.word	0x20002850
 802ac54:	92492493 	.word	0x92492493
 802ac58:	0802dcf8 	.word	0x0802dcf8
 802ac5c:	0802dd04 	.word	0x0802dd04
 802ac60:	0802dd0c 	.word	0x0802dd0c
 802ac64:	0802dd18 	.word	0x0802dd18
 802ac68:	0802dd24 	.word	0x0802dd24
 802ac6c:	0802dd2c 	.word	0x0802dd2c
 802ac70:	0802dd38 	.word	0x0802dd38
 802ac74:	0802dd40 	.word	0x0802dd40

0802ac78 <tos_StepsAndKcalsInit>:
#include "../tOSbaga.h"
#include "math.h"
MPUScaledData_Def getAccVal;
float totalVec=0.0f;
uint16_t steps=0;
void tos_StepsAndKcalsInit(void){
 802ac78:	b580      	push	{r7, lr}
 802ac7a:	af00      	add	r7, sp, #0
	MPU6050_Init();
 802ac7c:	f7da fe50 	bl	8005920 <MPU6050_Init>
//	MPU6050_Do_Calibration();
	//MPU6050_Set_Acc_Calibration(2147031,);
	MPU6050_Set_Gyro_Calibration(13500,8,-9985);
 802ac80:	f46f 521c 	mvn.w	r2, #9984	; 0x2700
 802ac84:	2108      	movs	r1, #8
 802ac86:	f243 40bc 	movw	r0, #13500	; 0x34bc
 802ac8a:	f7da ffbf 	bl	8005c0c <MPU6050_Set_Gyro_Calibration>
}
 802ac8e:	bf00      	nop
 802ac90:	bd80      	pop	{r7, pc}

0802ac92 <tos_StepsAndKcalsRead>:



void tos_StepsAndKcalsRead(void){
 802ac92:	b580      	push	{r7, lr}
 802ac94:	af00      	add	r7, sp, #0
	MPU6050_Read_ScaledAcc_Val();
 802ac96:	f7da fecd 	bl	8005a34 <MPU6050_Read_ScaledAcc_Val>
	HAL_Delay(5);
 802ac9a:	2005      	movs	r0, #5
 802ac9c:	f7d6 ff52 	bl	8001b44 <HAL_Delay>
	MPU6050_Read_ScaledGyro_Val();
 802aca0:	f7da ff56 	bl	8005b50 <MPU6050_Read_ScaledGyro_Val>
	HAL_Delay(5);
 802aca4:	2005      	movs	r0, #5
 802aca6:	f7d6 ff4d 	bl	8001b44 <HAL_Delay>
}
 802acaa:	bf00      	nop
 802acac:	bd80      	pop	{r7, pc}
	...

0802acb0 <tos_StepsAndKcalsCalcSteps>:

void tos_StepsAndKcalsCalcSteps(void){
 802acb0:	b5b0      	push	{r4, r5, r7, lr}
 802acb2:	af00      	add	r7, sp, #0
	getAccVal=MPU6050_getAccScaleVals();
 802acb4:	f7da ffc4 	bl	8005c40 <MPU6050_getAccScaleVals>
 802acb8:	eef0 6a40 	vmov.f32	s13, s0
 802acbc:	eeb0 7a60 	vmov.f32	s14, s1
 802acc0:	eef0 7a41 	vmov.f32	s15, s2
 802acc4:	4b34      	ldr	r3, [pc, #208]	; (802ad98 <tos_StepsAndKcalsCalcSteps+0xe8>)
 802acc6:	edc3 6a00 	vstr	s13, [r3]
 802acca:	ed83 7a01 	vstr	s14, [r3, #4]
 802acce:	edc3 7a02 	vstr	s15, [r3, #8]
	totalVec=(float)sqrt(pow(getAccVal.x,2)+pow(getAccVal.y,2)+pow(getAccVal.z,2));
 802acd2:	4b31      	ldr	r3, [pc, #196]	; (802ad98 <tos_StepsAndKcalsCalcSteps+0xe8>)
 802acd4:	681b      	ldr	r3, [r3, #0]
 802acd6:	4618      	mov	r0, r3
 802acd8:	f7d5 fc46 	bl	8000568 <__aeabi_f2d>
 802acdc:	4603      	mov	r3, r0
 802acde:	460c      	mov	r4, r1
 802ace0:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 802ad90 <tos_StepsAndKcalsCalcSteps+0xe0>
 802ace4:	ec44 3b10 	vmov	d0, r3, r4
 802ace8:	f001 fac2 	bl	802c270 <pow>
 802acec:	ec55 4b10 	vmov	r4, r5, d0
 802acf0:	4b29      	ldr	r3, [pc, #164]	; (802ad98 <tos_StepsAndKcalsCalcSteps+0xe8>)
 802acf2:	685b      	ldr	r3, [r3, #4]
 802acf4:	4618      	mov	r0, r3
 802acf6:	f7d5 fc37 	bl	8000568 <__aeabi_f2d>
 802acfa:	4602      	mov	r2, r0
 802acfc:	460b      	mov	r3, r1
 802acfe:	ed9f 1b24 	vldr	d1, [pc, #144]	; 802ad90 <tos_StepsAndKcalsCalcSteps+0xe0>
 802ad02:	ec43 2b10 	vmov	d0, r2, r3
 802ad06:	f001 fab3 	bl	802c270 <pow>
 802ad0a:	ec53 2b10 	vmov	r2, r3, d0
 802ad0e:	4620      	mov	r0, r4
 802ad10:	4629      	mov	r1, r5
 802ad12:	f7d5 facb 	bl	80002ac <__adddf3>
 802ad16:	4603      	mov	r3, r0
 802ad18:	460c      	mov	r4, r1
 802ad1a:	4625      	mov	r5, r4
 802ad1c:	461c      	mov	r4, r3
 802ad1e:	4b1e      	ldr	r3, [pc, #120]	; (802ad98 <tos_StepsAndKcalsCalcSteps+0xe8>)
 802ad20:	689b      	ldr	r3, [r3, #8]
 802ad22:	4618      	mov	r0, r3
 802ad24:	f7d5 fc20 	bl	8000568 <__aeabi_f2d>
 802ad28:	4602      	mov	r2, r0
 802ad2a:	460b      	mov	r3, r1
 802ad2c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 802ad90 <tos_StepsAndKcalsCalcSteps+0xe0>
 802ad30:	ec43 2b10 	vmov	d0, r2, r3
 802ad34:	f001 fa9c 	bl	802c270 <pow>
 802ad38:	ec53 2b10 	vmov	r2, r3, d0
 802ad3c:	4620      	mov	r0, r4
 802ad3e:	4629      	mov	r1, r5
 802ad40:	f7d5 fab4 	bl	80002ac <__adddf3>
 802ad44:	4603      	mov	r3, r0
 802ad46:	460c      	mov	r4, r1
 802ad48:	ec44 3b17 	vmov	d7, r3, r4
 802ad4c:	eeb0 0a47 	vmov.f32	s0, s14
 802ad50:	eef0 0a67 	vmov.f32	s1, s15
 802ad54:	f001 fbfc 	bl	802c550 <sqrt>
 802ad58:	ec54 3b10 	vmov	r3, r4, d0
 802ad5c:	4618      	mov	r0, r3
 802ad5e:	4621      	mov	r1, r4
 802ad60:	f7d5 ff2a 	bl	8000bb8 <__aeabi_d2f>
 802ad64:	4602      	mov	r2, r0
 802ad66:	4b0d      	ldr	r3, [pc, #52]	; (802ad9c <tos_StepsAndKcalsCalcSteps+0xec>)
 802ad68:	601a      	str	r2, [r3, #0]
	if(totalVec>2.5f)steps++;
 802ad6a:	4b0c      	ldr	r3, [pc, #48]	; (802ad9c <tos_StepsAndKcalsCalcSteps+0xec>)
 802ad6c:	edd3 7a00 	vldr	s15, [r3]
 802ad70:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 802ad74:	eef4 7ac7 	vcmpe.f32	s15, s14
 802ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ad7c:	dc00      	bgt.n	802ad80 <tos_StepsAndKcalsCalcSteps+0xd0>
}
 802ad7e:	e005      	b.n	802ad8c <tos_StepsAndKcalsCalcSteps+0xdc>
	if(totalVec>2.5f)steps++;
 802ad80:	4b07      	ldr	r3, [pc, #28]	; (802ada0 <tos_StepsAndKcalsCalcSteps+0xf0>)
 802ad82:	881b      	ldrh	r3, [r3, #0]
 802ad84:	3301      	adds	r3, #1
 802ad86:	b29a      	uxth	r2, r3
 802ad88:	4b05      	ldr	r3, [pc, #20]	; (802ada0 <tos_StepsAndKcalsCalcSteps+0xf0>)
 802ad8a:	801a      	strh	r2, [r3, #0]
}
 802ad8c:	bf00      	nop
 802ad8e:	bdb0      	pop	{r4, r5, r7, pc}
 802ad90:	00000000 	.word	0x00000000
 802ad94:	40000000 	.word	0x40000000
 802ad98:	2001c1f0 	.word	0x2001c1f0
 802ad9c:	2001b5c8 	.word	0x2001b5c8
 802ada0:	2001b5cc 	.word	0x2001b5cc

0802ada4 <tos_StepsAndKcalsSetVal>:
void tos_StepsAndKcalsSetVal(void){
 802ada4:	b598      	push	{r3, r4, r7, lr}
 802ada6:	af00      	add	r7, sp, #0

	MainScreen_SetStepsAndKcals(steps,tos_StepsAndKcalsGetDistance_KiloCal());
 802ada8:	4b0e      	ldr	r3, [pc, #56]	; (802ade4 <tos_StepsAndKcalsSetVal+0x40>)
 802adaa:	881c      	ldrh	r4, [r3, #0]
 802adac:	f000 f81c 	bl	802ade8 <tos_StepsAndKcalsGetDistance_KiloCal>
 802adb0:	4603      	mov	r3, r0
 802adb2:	4619      	mov	r1, r3
 802adb4:	4620      	mov	r0, r4
 802adb6:	f7f9 fd5b 	bl	8024870 <MainScreen_SetStepsAndKcals>
	RunMode_SetStepsAndKcals(steps,tos_StepsAndKcalsGetDistance_KiloCal());
 802adba:	4b0a      	ldr	r3, [pc, #40]	; (802ade4 <tos_StepsAndKcalsSetVal+0x40>)
 802adbc:	881c      	ldrh	r4, [r3, #0]
 802adbe:	f000 f813 	bl	802ade8 <tos_StepsAndKcalsGetDistance_KiloCal>
 802adc2:	4603      	mov	r3, r0
 802adc4:	4619      	mov	r1, r3
 802adc6:	4620      	mov	r0, r4
 802adc8:	f7fc f894 	bl	8026ef4 <RunMode_SetStepsAndKcals>
	StepAndKcal_SetStepsAndKcals(steps,tos_StepsAndKcalsGetDistance_KiloCal());
 802adcc:	4b05      	ldr	r3, [pc, #20]	; (802ade4 <tos_StepsAndKcalsSetVal+0x40>)
 802adce:	881c      	ldrh	r4, [r3, #0]
 802add0:	f000 f80a 	bl	802ade8 <tos_StepsAndKcalsGetDistance_KiloCal>
 802add4:	4603      	mov	r3, r0
 802add6:	4619      	mov	r1, r3
 802add8:	4620      	mov	r0, r4
 802adda:	f7fe fa3f 	bl	802925c <StepAndKcal_SetStepsAndKcals>

}
 802adde:	bf00      	nop
 802ade0:	bd98      	pop	{r3, r4, r7, pc}
 802ade2:	bf00      	nop
 802ade4:	2001b5cc 	.word	0x2001b5cc

0802ade8 <tos_StepsAndKcalsGetDistance_KiloCal>:
uint16_t tos_StepsAndKcalsGetSteps(void){return steps;}
float tos_StepsAndKcalsGetDistance_KiloMeter(void){return (steps*0.707*0.001);}
float tos_StepsAndKcalsGetDistance_Mile(void){return (steps*0.707*0.001*KMTOMILE);}
uint16_t tos_StepsAndKcalsGetDistance_KiloCal(void){return (uint16_t)(steps*0.04*0.001);}
 802ade8:	b598      	push	{r3, r4, r7, lr}
 802adea:	af00      	add	r7, sp, #0
 802adec:	4b12      	ldr	r3, [pc, #72]	; (802ae38 <tos_StepsAndKcalsGetDistance_KiloCal+0x50>)
 802adee:	881b      	ldrh	r3, [r3, #0]
 802adf0:	4618      	mov	r0, r3
 802adf2:	f7d5 fba7 	bl	8000544 <__aeabi_i2d>
 802adf6:	a30c      	add	r3, pc, #48	; (adr r3, 802ae28 <tos_StepsAndKcalsGetDistance_KiloCal+0x40>)
 802adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802adfc:	f7d5 fc0c 	bl	8000618 <__aeabi_dmul>
 802ae00:	4603      	mov	r3, r0
 802ae02:	460c      	mov	r4, r1
 802ae04:	4618      	mov	r0, r3
 802ae06:	4621      	mov	r1, r4
 802ae08:	a309      	add	r3, pc, #36	; (adr r3, 802ae30 <tos_StepsAndKcalsGetDistance_KiloCal+0x48>)
 802ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ae0e:	f7d5 fc03 	bl	8000618 <__aeabi_dmul>
 802ae12:	4603      	mov	r3, r0
 802ae14:	460c      	mov	r4, r1
 802ae16:	4618      	mov	r0, r3
 802ae18:	4621      	mov	r1, r4
 802ae1a:	f7d5 fead 	bl	8000b78 <__aeabi_d2uiz>
 802ae1e:	4603      	mov	r3, r0
 802ae20:	b29b      	uxth	r3, r3
 802ae22:	4618      	mov	r0, r3
 802ae24:	bd98      	pop	{r3, r4, r7, pc}
 802ae26:	bf00      	nop
 802ae28:	47ae147b 	.word	0x47ae147b
 802ae2c:	3fa47ae1 	.word	0x3fa47ae1
 802ae30:	d2f1a9fc 	.word	0xd2f1a9fc
 802ae34:	3f50624d 	.word	0x3f50624d
 802ae38:	2001b5cc 	.word	0x2001b5cc

0802ae3c <tos_StepsAndKcalsSetSteps>:
uint16_t tos_StepsAndKcalsGetDistance_Cal(void){return (uint16_t)(steps*0.04);}
void tos_StepsAndKcalsSetSteps(uint16_t step){
 802ae3c:	b480      	push	{r7}
 802ae3e:	b083      	sub	sp, #12
 802ae40:	af00      	add	r7, sp, #0
 802ae42:	4603      	mov	r3, r0
 802ae44:	80fb      	strh	r3, [r7, #6]
	steps=step;
 802ae46:	4a04      	ldr	r2, [pc, #16]	; (802ae58 <tos_StepsAndKcalsSetSteps+0x1c>)
 802ae48:	88fb      	ldrh	r3, [r7, #6]
 802ae4a:	8013      	strh	r3, [r2, #0]

}
 802ae4c:	bf00      	nop
 802ae4e:	370c      	adds	r7, #12
 802ae50:	46bd      	mov	sp, r7
 802ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae56:	4770      	bx	lr
 802ae58:	2001b5cc 	.word	0x2001b5cc

0802ae5c <tos_tasks_init>:
void tos_mpu6050readTask(void *params);
void tos_stepAndkCalsCalcTask(void *params);
void tos_Bluetooth_Task(void *params);


void tos_tasks_init(void){
 802ae5c:	b580      	push	{r7, lr}
 802ae5e:	b082      	sub	sp, #8
 802ae60:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	  tos_Tft_init();
 802ae62:	f7f7 fd37 	bl	80228d4 <tos_Tft_init>
	  tos_Screen_Init();
 802ae66:	f7ff fa89 	bl	802a37c <tos_Screen_Init>
	  tos_Get_Rtc(&hrtc);
 802ae6a:	4823      	ldr	r0, [pc, #140]	; (802aef8 <tos_tasks_init+0x9c>)
 802ae6c:	f7ff fc0e 	bl	802a68c <tos_Get_Rtc>
	  tos_StepsAndKcalsInit();
 802ae70:	f7ff ff02 	bl	802ac78 <tos_StepsAndKcalsInit>
	  tos_Bluetooth_NotificationItemInit();
 802ae74:	f7fe fdd6 	bl	8029a24 <tos_Bluetooth_NotificationItemInit>
	  vTaskDelay(500);
 802ae78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802ae7c:	f7db fe5a 	bl	8006b34 <vTaskDelay>


	xTaskCreate(tos_tftTickUpdaterTask, "tftTickUpdate", 1024*4, NULL,  55 , NULL);
 802ae80:	2300      	movs	r3, #0
 802ae82:	9301      	str	r3, [sp, #4]
 802ae84:	2337      	movs	r3, #55	; 0x37
 802ae86:	9300      	str	r3, [sp, #0]
 802ae88:	2300      	movs	r3, #0
 802ae8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802ae8e:	491b      	ldr	r1, [pc, #108]	; (802aefc <tos_tasks_init+0xa0>)
 802ae90:	481b      	ldr	r0, [pc, #108]	; (802af00 <tos_tasks_init+0xa4>)
 802ae92:	f7db fd0b 	bl	80068ac <xTaskCreate>
	xTaskCreate(tos_controllerTask, "controller", 1024*4, NULL,  45 , NULL);
 802ae96:	2300      	movs	r3, #0
 802ae98:	9301      	str	r3, [sp, #4]
 802ae9a:	232d      	movs	r3, #45	; 0x2d
 802ae9c:	9300      	str	r3, [sp, #0]
 802ae9e:	2300      	movs	r3, #0
 802aea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802aea4:	4917      	ldr	r1, [pc, #92]	; (802af04 <tos_tasks_init+0xa8>)
 802aea6:	4818      	ldr	r0, [pc, #96]	; (802af08 <tos_tasks_init+0xac>)
 802aea8:	f7db fd00 	bl	80068ac <xTaskCreate>
	xTaskCreate(tos_mpu6050readTask, "mpu6050", 128*4, NULL,  45 , NULL);
 802aeac:	2300      	movs	r3, #0
 802aeae:	9301      	str	r3, [sp, #4]
 802aeb0:	232d      	movs	r3, #45	; 0x2d
 802aeb2:	9300      	str	r3, [sp, #0]
 802aeb4:	2300      	movs	r3, #0
 802aeb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 802aeba:	4914      	ldr	r1, [pc, #80]	; (802af0c <tos_tasks_init+0xb0>)
 802aebc:	4814      	ldr	r0, [pc, #80]	; (802af10 <tos_tasks_init+0xb4>)
 802aebe:	f7db fcf5 	bl	80068ac <xTaskCreate>
	xTaskCreate(tos_stepAndkCalsCalcTask, "stepAndkCals", 128*4, NULL,  45 , NULL);
 802aec2:	2300      	movs	r3, #0
 802aec4:	9301      	str	r3, [sp, #4]
 802aec6:	232d      	movs	r3, #45	; 0x2d
 802aec8:	9300      	str	r3, [sp, #0]
 802aeca:	2300      	movs	r3, #0
 802aecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 802aed0:	4910      	ldr	r1, [pc, #64]	; (802af14 <tos_tasks_init+0xb8>)
 802aed2:	4811      	ldr	r0, [pc, #68]	; (802af18 <tos_tasks_init+0xbc>)
 802aed4:	f7db fcea 	bl	80068ac <xTaskCreate>
	xTaskCreate(tos_Bluetooth_Task, "stepAndkCals", 128*4, NULL,  45 , NULL);
 802aed8:	2300      	movs	r3, #0
 802aeda:	9301      	str	r3, [sp, #4]
 802aedc:	232d      	movs	r3, #45	; 0x2d
 802aede:	9300      	str	r3, [sp, #0]
 802aee0:	2300      	movs	r3, #0
 802aee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 802aee6:	490b      	ldr	r1, [pc, #44]	; (802af14 <tos_tasks_init+0xb8>)
 802aee8:	480c      	ldr	r0, [pc, #48]	; (802af1c <tos_tasks_init+0xc0>)
 802aeea:	f7db fcdf 	bl	80068ac <xTaskCreate>

	vTaskStartScheduler();
 802aeee:	f7db fe55 	bl	8006b9c <vTaskStartScheduler>
}
 802aef2:	bf00      	nop
 802aef4:	46bd      	mov	sp, r7
 802aef6:	bd80      	pop	{r7, pc}
 802aef8:	2001b6ac 	.word	0x2001b6ac
 802aefc:	0802dd44 	.word	0x0802dd44
 802af00:	0802af21 	.word	0x0802af21
 802af04:	0802dd54 	.word	0x0802dd54
 802af08:	0802af3b 	.word	0x0802af3b
 802af0c:	0802dd60 	.word	0x0802dd60
 802af10:	0802af55 	.word	0x0802af55
 802af14:	0802dd68 	.word	0x0802dd68
 802af18:	0802af63 	.word	0x0802af63
 802af1c:	0802af71 	.word	0x0802af71

0802af20 <tos_tftTickUpdaterTask>:


void tos_tftTickUpdaterTask(void *params){
 802af20:	b580      	push	{r7, lr}
 802af22:	b082      	sub	sp, #8
 802af24:	af00      	add	r7, sp, #0
 802af26:	6078      	str	r0, [r7, #4]


	while(1){
		  vTaskDelay(1);
 802af28:	2001      	movs	r0, #1
 802af2a:	f7db fe03 	bl	8006b34 <vTaskDelay>
		  lv_tick_inc(1);
 802af2e:	2001      	movs	r0, #1
 802af30:	f7ea feae 	bl	8015c90 <lv_tick_inc>
		lv_task_handler();
 802af34:	f7ec f8bc 	bl	80170b0 <lv_task_handler>
		  vTaskDelay(1);
 802af38:	e7f6      	b.n	802af28 <tos_tftTickUpdaterTask+0x8>

0802af3a <tos_controllerTask>:
	}
}

void tos_controllerTask(void *params){
 802af3a:	b580      	push	{r7, lr}
 802af3c:	b082      	sub	sp, #8
 802af3e:	af00      	add	r7, sp, #0
 802af40:	6078      	str	r0, [r7, #4]
	while(1){
		tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 802af42:	f7ff fbb3 	bl	802a6ac <tos_Get_Current_Screen>
 802af46:	4603      	mov	r3, r0
 802af48:	4618      	mov	r0, r3
 802af4a:	f7ff fb85 	bl	802a658 <tos_Screen_Variables_Getter>
		  tos_ScreenController();
 802af4e:	f7ff fa9b 	bl	802a488 <tos_ScreenController>
		tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 802af52:	e7f6      	b.n	802af42 <tos_controllerTask+0x8>

0802af54 <tos_mpu6050readTask>:
	}
}

//Mpu6050
void tos_mpu6050readTask(void *params){
 802af54:	b580      	push	{r7, lr}
 802af56:	b082      	sub	sp, #8
 802af58:	af00      	add	r7, sp, #0
 802af5a:	6078      	str	r0, [r7, #4]
	while(1){

		  tos_StepsAndKcalsRead();
 802af5c:	f7ff fe99 	bl	802ac92 <tos_StepsAndKcalsRead>
 802af60:	e7fc      	b.n	802af5c <tos_mpu6050readTask+0x8>

0802af62 <tos_stepAndkCalsCalcTask>:
	}
}
void tos_stepAndkCalsCalcTask(void *params){
 802af62:	b580      	push	{r7, lr}
 802af64:	b082      	sub	sp, #8
 802af66:	af00      	add	r7, sp, #0
 802af68:	6078      	str	r0, [r7, #4]

	while(1){
		  tos_StepsAndKcalsCalcSteps();
 802af6a:	f7ff fea1 	bl	802acb0 <tos_StepsAndKcalsCalcSteps>
 802af6e:	e7fc      	b.n	802af6a <tos_stepAndkCalsCalcTask+0x8>

0802af70 <tos_Bluetooth_Task>:
	}
}
//Bluetooth
void tos_Bluetooth_Task(void *params){
 802af70:	b590      	push	{r4, r7, lr}
 802af72:	b083      	sub	sp, #12
 802af74:	af00      	add	r7, sp, #0
 802af76:	6078      	str	r0, [r7, #4]

	while(1){
		tos_BluetoothGetStatusVAl(tos_BluetoothGetEnableVal(),tos_Get_Current_Screen());
 802af78:	f7ff f86e 	bl	802a058 <tos_BluetoothGetEnableVal>
 802af7c:	4603      	mov	r3, r0
 802af7e:	461c      	mov	r4, r3
 802af80:	f7ff fb94 	bl	802a6ac <tos_Get_Current_Screen>
 802af84:	4603      	mov	r3, r0
 802af86:	4619      	mov	r1, r3
 802af88:	4620      	mov	r0, r4
 802af8a:	f7fe ffdb 	bl	8029f44 <tos_BluetoothGetStatusVAl>
		 tos_BluetoothReceiverAndTransmitter(&hrtc);
 802af8e:	4802      	ldr	r0, [pc, #8]	; (802af98 <tos_Bluetooth_Task+0x28>)
 802af90:	f7fe fd74 	bl	8029a7c <tos_BluetoothReceiverAndTransmitter>
		tos_BluetoothGetStatusVAl(tos_BluetoothGetEnableVal(),tos_Get_Current_Screen());
 802af94:	e7f0      	b.n	802af78 <tos_Bluetooth_Task+0x8>
 802af96:	bf00      	nop
 802af98:	2001b6ac 	.word	0x2001b6ac

0802af9c <__errno>:
 802af9c:	4b01      	ldr	r3, [pc, #4]	; (802afa4 <__errno+0x8>)
 802af9e:	6818      	ldr	r0, [r3, #0]
 802afa0:	4770      	bx	lr
 802afa2:	bf00      	nop
 802afa4:	2000285c 	.word	0x2000285c

0802afa8 <__libc_init_array>:
 802afa8:	b570      	push	{r4, r5, r6, lr}
 802afaa:	4e0d      	ldr	r6, [pc, #52]	; (802afe0 <__libc_init_array+0x38>)
 802afac:	4c0d      	ldr	r4, [pc, #52]	; (802afe4 <__libc_init_array+0x3c>)
 802afae:	1ba4      	subs	r4, r4, r6
 802afb0:	10a4      	asrs	r4, r4, #2
 802afb2:	2500      	movs	r5, #0
 802afb4:	42a5      	cmp	r5, r4
 802afb6:	d109      	bne.n	802afcc <__libc_init_array+0x24>
 802afb8:	4e0b      	ldr	r6, [pc, #44]	; (802afe8 <__libc_init_array+0x40>)
 802afba:	4c0c      	ldr	r4, [pc, #48]	; (802afec <__libc_init_array+0x44>)
 802afbc:	f002 fa0a 	bl	802d3d4 <_init>
 802afc0:	1ba4      	subs	r4, r4, r6
 802afc2:	10a4      	asrs	r4, r4, #2
 802afc4:	2500      	movs	r5, #0
 802afc6:	42a5      	cmp	r5, r4
 802afc8:	d105      	bne.n	802afd6 <__libc_init_array+0x2e>
 802afca:	bd70      	pop	{r4, r5, r6, pc}
 802afcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802afd0:	4798      	blx	r3
 802afd2:	3501      	adds	r5, #1
 802afd4:	e7ee      	b.n	802afb4 <__libc_init_array+0xc>
 802afd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802afda:	4798      	blx	r3
 802afdc:	3501      	adds	r5, #1
 802afde:	e7f2      	b.n	802afc6 <__libc_init_array+0x1e>
 802afe0:	08048a00 	.word	0x08048a00
 802afe4:	08048a00 	.word	0x08048a00
 802afe8:	08048a00 	.word	0x08048a00
 802afec:	08048a04 	.word	0x08048a04

0802aff0 <malloc>:
 802aff0:	4b02      	ldr	r3, [pc, #8]	; (802affc <malloc+0xc>)
 802aff2:	4601      	mov	r1, r0
 802aff4:	6818      	ldr	r0, [r3, #0]
 802aff6:	f000 b86d 	b.w	802b0d4 <_malloc_r>
 802affa:	bf00      	nop
 802affc:	2000285c 	.word	0x2000285c

0802b000 <free>:
 802b000:	4b02      	ldr	r3, [pc, #8]	; (802b00c <free+0xc>)
 802b002:	4601      	mov	r1, r0
 802b004:	6818      	ldr	r0, [r3, #0]
 802b006:	f000 b817 	b.w	802b038 <_free_r>
 802b00a:	bf00      	nop
 802b00c:	2000285c 	.word	0x2000285c

0802b010 <memcpy>:
 802b010:	b510      	push	{r4, lr}
 802b012:	1e43      	subs	r3, r0, #1
 802b014:	440a      	add	r2, r1
 802b016:	4291      	cmp	r1, r2
 802b018:	d100      	bne.n	802b01c <memcpy+0xc>
 802b01a:	bd10      	pop	{r4, pc}
 802b01c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b020:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b024:	e7f7      	b.n	802b016 <memcpy+0x6>

0802b026 <memset>:
 802b026:	4402      	add	r2, r0
 802b028:	4603      	mov	r3, r0
 802b02a:	4293      	cmp	r3, r2
 802b02c:	d100      	bne.n	802b030 <memset+0xa>
 802b02e:	4770      	bx	lr
 802b030:	f803 1b01 	strb.w	r1, [r3], #1
 802b034:	e7f9      	b.n	802b02a <memset+0x4>
	...

0802b038 <_free_r>:
 802b038:	b538      	push	{r3, r4, r5, lr}
 802b03a:	4605      	mov	r5, r0
 802b03c:	2900      	cmp	r1, #0
 802b03e:	d045      	beq.n	802b0cc <_free_r+0x94>
 802b040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b044:	1f0c      	subs	r4, r1, #4
 802b046:	2b00      	cmp	r3, #0
 802b048:	bfb8      	it	lt
 802b04a:	18e4      	addlt	r4, r4, r3
 802b04c:	f000 f934 	bl	802b2b8 <__malloc_lock>
 802b050:	4a1f      	ldr	r2, [pc, #124]	; (802b0d0 <_free_r+0x98>)
 802b052:	6813      	ldr	r3, [r2, #0]
 802b054:	4610      	mov	r0, r2
 802b056:	b933      	cbnz	r3, 802b066 <_free_r+0x2e>
 802b058:	6063      	str	r3, [r4, #4]
 802b05a:	6014      	str	r4, [r2, #0]
 802b05c:	4628      	mov	r0, r5
 802b05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b062:	f000 b92a 	b.w	802b2ba <__malloc_unlock>
 802b066:	42a3      	cmp	r3, r4
 802b068:	d90c      	bls.n	802b084 <_free_r+0x4c>
 802b06a:	6821      	ldr	r1, [r4, #0]
 802b06c:	1862      	adds	r2, r4, r1
 802b06e:	4293      	cmp	r3, r2
 802b070:	bf04      	itt	eq
 802b072:	681a      	ldreq	r2, [r3, #0]
 802b074:	685b      	ldreq	r3, [r3, #4]
 802b076:	6063      	str	r3, [r4, #4]
 802b078:	bf04      	itt	eq
 802b07a:	1852      	addeq	r2, r2, r1
 802b07c:	6022      	streq	r2, [r4, #0]
 802b07e:	6004      	str	r4, [r0, #0]
 802b080:	e7ec      	b.n	802b05c <_free_r+0x24>
 802b082:	4613      	mov	r3, r2
 802b084:	685a      	ldr	r2, [r3, #4]
 802b086:	b10a      	cbz	r2, 802b08c <_free_r+0x54>
 802b088:	42a2      	cmp	r2, r4
 802b08a:	d9fa      	bls.n	802b082 <_free_r+0x4a>
 802b08c:	6819      	ldr	r1, [r3, #0]
 802b08e:	1858      	adds	r0, r3, r1
 802b090:	42a0      	cmp	r0, r4
 802b092:	d10b      	bne.n	802b0ac <_free_r+0x74>
 802b094:	6820      	ldr	r0, [r4, #0]
 802b096:	4401      	add	r1, r0
 802b098:	1858      	adds	r0, r3, r1
 802b09a:	4282      	cmp	r2, r0
 802b09c:	6019      	str	r1, [r3, #0]
 802b09e:	d1dd      	bne.n	802b05c <_free_r+0x24>
 802b0a0:	6810      	ldr	r0, [r2, #0]
 802b0a2:	6852      	ldr	r2, [r2, #4]
 802b0a4:	605a      	str	r2, [r3, #4]
 802b0a6:	4401      	add	r1, r0
 802b0a8:	6019      	str	r1, [r3, #0]
 802b0aa:	e7d7      	b.n	802b05c <_free_r+0x24>
 802b0ac:	d902      	bls.n	802b0b4 <_free_r+0x7c>
 802b0ae:	230c      	movs	r3, #12
 802b0b0:	602b      	str	r3, [r5, #0]
 802b0b2:	e7d3      	b.n	802b05c <_free_r+0x24>
 802b0b4:	6820      	ldr	r0, [r4, #0]
 802b0b6:	1821      	adds	r1, r4, r0
 802b0b8:	428a      	cmp	r2, r1
 802b0ba:	bf04      	itt	eq
 802b0bc:	6811      	ldreq	r1, [r2, #0]
 802b0be:	6852      	ldreq	r2, [r2, #4]
 802b0c0:	6062      	str	r2, [r4, #4]
 802b0c2:	bf04      	itt	eq
 802b0c4:	1809      	addeq	r1, r1, r0
 802b0c6:	6021      	streq	r1, [r4, #0]
 802b0c8:	605c      	str	r4, [r3, #4]
 802b0ca:	e7c7      	b.n	802b05c <_free_r+0x24>
 802b0cc:	bd38      	pop	{r3, r4, r5, pc}
 802b0ce:	bf00      	nop
 802b0d0:	2001b5d0 	.word	0x2001b5d0

0802b0d4 <_malloc_r>:
 802b0d4:	b570      	push	{r4, r5, r6, lr}
 802b0d6:	1ccd      	adds	r5, r1, #3
 802b0d8:	f025 0503 	bic.w	r5, r5, #3
 802b0dc:	3508      	adds	r5, #8
 802b0de:	2d0c      	cmp	r5, #12
 802b0e0:	bf38      	it	cc
 802b0e2:	250c      	movcc	r5, #12
 802b0e4:	2d00      	cmp	r5, #0
 802b0e6:	4606      	mov	r6, r0
 802b0e8:	db01      	blt.n	802b0ee <_malloc_r+0x1a>
 802b0ea:	42a9      	cmp	r1, r5
 802b0ec:	d903      	bls.n	802b0f6 <_malloc_r+0x22>
 802b0ee:	230c      	movs	r3, #12
 802b0f0:	6033      	str	r3, [r6, #0]
 802b0f2:	2000      	movs	r0, #0
 802b0f4:	bd70      	pop	{r4, r5, r6, pc}
 802b0f6:	f000 f8df 	bl	802b2b8 <__malloc_lock>
 802b0fa:	4a21      	ldr	r2, [pc, #132]	; (802b180 <_malloc_r+0xac>)
 802b0fc:	6814      	ldr	r4, [r2, #0]
 802b0fe:	4621      	mov	r1, r4
 802b100:	b991      	cbnz	r1, 802b128 <_malloc_r+0x54>
 802b102:	4c20      	ldr	r4, [pc, #128]	; (802b184 <_malloc_r+0xb0>)
 802b104:	6823      	ldr	r3, [r4, #0]
 802b106:	b91b      	cbnz	r3, 802b110 <_malloc_r+0x3c>
 802b108:	4630      	mov	r0, r6
 802b10a:	f000 f83d 	bl	802b188 <_sbrk_r>
 802b10e:	6020      	str	r0, [r4, #0]
 802b110:	4629      	mov	r1, r5
 802b112:	4630      	mov	r0, r6
 802b114:	f000 f838 	bl	802b188 <_sbrk_r>
 802b118:	1c43      	adds	r3, r0, #1
 802b11a:	d124      	bne.n	802b166 <_malloc_r+0x92>
 802b11c:	230c      	movs	r3, #12
 802b11e:	6033      	str	r3, [r6, #0]
 802b120:	4630      	mov	r0, r6
 802b122:	f000 f8ca 	bl	802b2ba <__malloc_unlock>
 802b126:	e7e4      	b.n	802b0f2 <_malloc_r+0x1e>
 802b128:	680b      	ldr	r3, [r1, #0]
 802b12a:	1b5b      	subs	r3, r3, r5
 802b12c:	d418      	bmi.n	802b160 <_malloc_r+0x8c>
 802b12e:	2b0b      	cmp	r3, #11
 802b130:	d90f      	bls.n	802b152 <_malloc_r+0x7e>
 802b132:	600b      	str	r3, [r1, #0]
 802b134:	50cd      	str	r5, [r1, r3]
 802b136:	18cc      	adds	r4, r1, r3
 802b138:	4630      	mov	r0, r6
 802b13a:	f000 f8be 	bl	802b2ba <__malloc_unlock>
 802b13e:	f104 000b 	add.w	r0, r4, #11
 802b142:	1d23      	adds	r3, r4, #4
 802b144:	f020 0007 	bic.w	r0, r0, #7
 802b148:	1ac3      	subs	r3, r0, r3
 802b14a:	d0d3      	beq.n	802b0f4 <_malloc_r+0x20>
 802b14c:	425a      	negs	r2, r3
 802b14e:	50e2      	str	r2, [r4, r3]
 802b150:	e7d0      	b.n	802b0f4 <_malloc_r+0x20>
 802b152:	428c      	cmp	r4, r1
 802b154:	684b      	ldr	r3, [r1, #4]
 802b156:	bf16      	itet	ne
 802b158:	6063      	strne	r3, [r4, #4]
 802b15a:	6013      	streq	r3, [r2, #0]
 802b15c:	460c      	movne	r4, r1
 802b15e:	e7eb      	b.n	802b138 <_malloc_r+0x64>
 802b160:	460c      	mov	r4, r1
 802b162:	6849      	ldr	r1, [r1, #4]
 802b164:	e7cc      	b.n	802b100 <_malloc_r+0x2c>
 802b166:	1cc4      	adds	r4, r0, #3
 802b168:	f024 0403 	bic.w	r4, r4, #3
 802b16c:	42a0      	cmp	r0, r4
 802b16e:	d005      	beq.n	802b17c <_malloc_r+0xa8>
 802b170:	1a21      	subs	r1, r4, r0
 802b172:	4630      	mov	r0, r6
 802b174:	f000 f808 	bl	802b188 <_sbrk_r>
 802b178:	3001      	adds	r0, #1
 802b17a:	d0cf      	beq.n	802b11c <_malloc_r+0x48>
 802b17c:	6025      	str	r5, [r4, #0]
 802b17e:	e7db      	b.n	802b138 <_malloc_r+0x64>
 802b180:	2001b5d0 	.word	0x2001b5d0
 802b184:	2001b5d4 	.word	0x2001b5d4

0802b188 <_sbrk_r>:
 802b188:	b538      	push	{r3, r4, r5, lr}
 802b18a:	4c06      	ldr	r4, [pc, #24]	; (802b1a4 <_sbrk_r+0x1c>)
 802b18c:	2300      	movs	r3, #0
 802b18e:	4605      	mov	r5, r0
 802b190:	4608      	mov	r0, r1
 802b192:	6023      	str	r3, [r4, #0]
 802b194:	f7d6 fc1e 	bl	80019d4 <_sbrk>
 802b198:	1c43      	adds	r3, r0, #1
 802b19a:	d102      	bne.n	802b1a2 <_sbrk_r+0x1a>
 802b19c:	6823      	ldr	r3, [r4, #0]
 802b19e:	b103      	cbz	r3, 802b1a2 <_sbrk_r+0x1a>
 802b1a0:	602b      	str	r3, [r5, #0]
 802b1a2:	bd38      	pop	{r3, r4, r5, pc}
 802b1a4:	2001c1fc 	.word	0x2001c1fc

0802b1a8 <sniprintf>:
 802b1a8:	b40c      	push	{r2, r3}
 802b1aa:	b530      	push	{r4, r5, lr}
 802b1ac:	4b17      	ldr	r3, [pc, #92]	; (802b20c <sniprintf+0x64>)
 802b1ae:	1e0c      	subs	r4, r1, #0
 802b1b0:	b09d      	sub	sp, #116	; 0x74
 802b1b2:	681d      	ldr	r5, [r3, #0]
 802b1b4:	da08      	bge.n	802b1c8 <sniprintf+0x20>
 802b1b6:	238b      	movs	r3, #139	; 0x8b
 802b1b8:	602b      	str	r3, [r5, #0]
 802b1ba:	f04f 30ff 	mov.w	r0, #4294967295
 802b1be:	b01d      	add	sp, #116	; 0x74
 802b1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b1c4:	b002      	add	sp, #8
 802b1c6:	4770      	bx	lr
 802b1c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 802b1cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 802b1d0:	bf14      	ite	ne
 802b1d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 802b1d6:	4623      	moveq	r3, r4
 802b1d8:	9304      	str	r3, [sp, #16]
 802b1da:	9307      	str	r3, [sp, #28]
 802b1dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b1e0:	9002      	str	r0, [sp, #8]
 802b1e2:	9006      	str	r0, [sp, #24]
 802b1e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b1e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802b1ea:	ab21      	add	r3, sp, #132	; 0x84
 802b1ec:	a902      	add	r1, sp, #8
 802b1ee:	4628      	mov	r0, r5
 802b1f0:	9301      	str	r3, [sp, #4]
 802b1f2:	f000 f8bd 	bl	802b370 <_svfiprintf_r>
 802b1f6:	1c43      	adds	r3, r0, #1
 802b1f8:	bfbc      	itt	lt
 802b1fa:	238b      	movlt	r3, #139	; 0x8b
 802b1fc:	602b      	strlt	r3, [r5, #0]
 802b1fe:	2c00      	cmp	r4, #0
 802b200:	d0dd      	beq.n	802b1be <sniprintf+0x16>
 802b202:	9b02      	ldr	r3, [sp, #8]
 802b204:	2200      	movs	r2, #0
 802b206:	701a      	strb	r2, [r3, #0]
 802b208:	e7d9      	b.n	802b1be <sniprintf+0x16>
 802b20a:	bf00      	nop
 802b20c:	2000285c 	.word	0x2000285c

0802b210 <siprintf>:
 802b210:	b40e      	push	{r1, r2, r3}
 802b212:	b500      	push	{lr}
 802b214:	b09c      	sub	sp, #112	; 0x70
 802b216:	ab1d      	add	r3, sp, #116	; 0x74
 802b218:	9002      	str	r0, [sp, #8]
 802b21a:	9006      	str	r0, [sp, #24]
 802b21c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802b220:	4809      	ldr	r0, [pc, #36]	; (802b248 <siprintf+0x38>)
 802b222:	9107      	str	r1, [sp, #28]
 802b224:	9104      	str	r1, [sp, #16]
 802b226:	4909      	ldr	r1, [pc, #36]	; (802b24c <siprintf+0x3c>)
 802b228:	f853 2b04 	ldr.w	r2, [r3], #4
 802b22c:	9105      	str	r1, [sp, #20]
 802b22e:	6800      	ldr	r0, [r0, #0]
 802b230:	9301      	str	r3, [sp, #4]
 802b232:	a902      	add	r1, sp, #8
 802b234:	f000 f89c 	bl	802b370 <_svfiprintf_r>
 802b238:	9b02      	ldr	r3, [sp, #8]
 802b23a:	2200      	movs	r2, #0
 802b23c:	701a      	strb	r2, [r3, #0]
 802b23e:	b01c      	add	sp, #112	; 0x70
 802b240:	f85d eb04 	ldr.w	lr, [sp], #4
 802b244:	b003      	add	sp, #12
 802b246:	4770      	bx	lr
 802b248:	2000285c 	.word	0x2000285c
 802b24c:	ffff0208 	.word	0xffff0208

0802b250 <siscanf>:
 802b250:	b40e      	push	{r1, r2, r3}
 802b252:	b530      	push	{r4, r5, lr}
 802b254:	b09c      	sub	sp, #112	; 0x70
 802b256:	ac1f      	add	r4, sp, #124	; 0x7c
 802b258:	f44f 7201 	mov.w	r2, #516	; 0x204
 802b25c:	f854 5b04 	ldr.w	r5, [r4], #4
 802b260:	f8ad 2014 	strh.w	r2, [sp, #20]
 802b264:	9002      	str	r0, [sp, #8]
 802b266:	9006      	str	r0, [sp, #24]
 802b268:	f7d4 ffbc 	bl	80001e4 <strlen>
 802b26c:	4b0b      	ldr	r3, [pc, #44]	; (802b29c <siscanf+0x4c>)
 802b26e:	9003      	str	r0, [sp, #12]
 802b270:	9007      	str	r0, [sp, #28]
 802b272:	930b      	str	r3, [sp, #44]	; 0x2c
 802b274:	480a      	ldr	r0, [pc, #40]	; (802b2a0 <siscanf+0x50>)
 802b276:	9401      	str	r4, [sp, #4]
 802b278:	2300      	movs	r3, #0
 802b27a:	930f      	str	r3, [sp, #60]	; 0x3c
 802b27c:	9314      	str	r3, [sp, #80]	; 0x50
 802b27e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b282:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b286:	462a      	mov	r2, r5
 802b288:	4623      	mov	r3, r4
 802b28a:	a902      	add	r1, sp, #8
 802b28c:	6800      	ldr	r0, [r0, #0]
 802b28e:	f000 f9c1 	bl	802b614 <__ssvfiscanf_r>
 802b292:	b01c      	add	sp, #112	; 0x70
 802b294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b298:	b003      	add	sp, #12
 802b29a:	4770      	bx	lr
 802b29c:	0802b2a5 	.word	0x0802b2a5
 802b2a0:	2000285c 	.word	0x2000285c

0802b2a4 <__seofread>:
 802b2a4:	2000      	movs	r0, #0
 802b2a6:	4770      	bx	lr

0802b2a8 <strcpy>:
 802b2a8:	4603      	mov	r3, r0
 802b2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b2ae:	f803 2b01 	strb.w	r2, [r3], #1
 802b2b2:	2a00      	cmp	r2, #0
 802b2b4:	d1f9      	bne.n	802b2aa <strcpy+0x2>
 802b2b6:	4770      	bx	lr

0802b2b8 <__malloc_lock>:
 802b2b8:	4770      	bx	lr

0802b2ba <__malloc_unlock>:
 802b2ba:	4770      	bx	lr

0802b2bc <__ssputs_r>:
 802b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b2c0:	688e      	ldr	r6, [r1, #8]
 802b2c2:	429e      	cmp	r6, r3
 802b2c4:	4682      	mov	sl, r0
 802b2c6:	460c      	mov	r4, r1
 802b2c8:	4690      	mov	r8, r2
 802b2ca:	4699      	mov	r9, r3
 802b2cc:	d837      	bhi.n	802b33e <__ssputs_r+0x82>
 802b2ce:	898a      	ldrh	r2, [r1, #12]
 802b2d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802b2d4:	d031      	beq.n	802b33a <__ssputs_r+0x7e>
 802b2d6:	6825      	ldr	r5, [r4, #0]
 802b2d8:	6909      	ldr	r1, [r1, #16]
 802b2da:	1a6f      	subs	r7, r5, r1
 802b2dc:	6965      	ldr	r5, [r4, #20]
 802b2de:	2302      	movs	r3, #2
 802b2e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b2e4:	fb95 f5f3 	sdiv	r5, r5, r3
 802b2e8:	f109 0301 	add.w	r3, r9, #1
 802b2ec:	443b      	add	r3, r7
 802b2ee:	429d      	cmp	r5, r3
 802b2f0:	bf38      	it	cc
 802b2f2:	461d      	movcc	r5, r3
 802b2f4:	0553      	lsls	r3, r2, #21
 802b2f6:	d530      	bpl.n	802b35a <__ssputs_r+0x9e>
 802b2f8:	4629      	mov	r1, r5
 802b2fa:	f7ff feeb 	bl	802b0d4 <_malloc_r>
 802b2fe:	4606      	mov	r6, r0
 802b300:	b950      	cbnz	r0, 802b318 <__ssputs_r+0x5c>
 802b302:	230c      	movs	r3, #12
 802b304:	f8ca 3000 	str.w	r3, [sl]
 802b308:	89a3      	ldrh	r3, [r4, #12]
 802b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b30e:	81a3      	strh	r3, [r4, #12]
 802b310:	f04f 30ff 	mov.w	r0, #4294967295
 802b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b318:	463a      	mov	r2, r7
 802b31a:	6921      	ldr	r1, [r4, #16]
 802b31c:	f7ff fe78 	bl	802b010 <memcpy>
 802b320:	89a3      	ldrh	r3, [r4, #12]
 802b322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802b326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b32a:	81a3      	strh	r3, [r4, #12]
 802b32c:	6126      	str	r6, [r4, #16]
 802b32e:	6165      	str	r5, [r4, #20]
 802b330:	443e      	add	r6, r7
 802b332:	1bed      	subs	r5, r5, r7
 802b334:	6026      	str	r6, [r4, #0]
 802b336:	60a5      	str	r5, [r4, #8]
 802b338:	464e      	mov	r6, r9
 802b33a:	454e      	cmp	r6, r9
 802b33c:	d900      	bls.n	802b340 <__ssputs_r+0x84>
 802b33e:	464e      	mov	r6, r9
 802b340:	4632      	mov	r2, r6
 802b342:	4641      	mov	r1, r8
 802b344:	6820      	ldr	r0, [r4, #0]
 802b346:	f000 ff3f 	bl	802c1c8 <memmove>
 802b34a:	68a3      	ldr	r3, [r4, #8]
 802b34c:	1b9b      	subs	r3, r3, r6
 802b34e:	60a3      	str	r3, [r4, #8]
 802b350:	6823      	ldr	r3, [r4, #0]
 802b352:	441e      	add	r6, r3
 802b354:	6026      	str	r6, [r4, #0]
 802b356:	2000      	movs	r0, #0
 802b358:	e7dc      	b.n	802b314 <__ssputs_r+0x58>
 802b35a:	462a      	mov	r2, r5
 802b35c:	f000 ff4d 	bl	802c1fa <_realloc_r>
 802b360:	4606      	mov	r6, r0
 802b362:	2800      	cmp	r0, #0
 802b364:	d1e2      	bne.n	802b32c <__ssputs_r+0x70>
 802b366:	6921      	ldr	r1, [r4, #16]
 802b368:	4650      	mov	r0, sl
 802b36a:	f7ff fe65 	bl	802b038 <_free_r>
 802b36e:	e7c8      	b.n	802b302 <__ssputs_r+0x46>

0802b370 <_svfiprintf_r>:
 802b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b374:	461d      	mov	r5, r3
 802b376:	898b      	ldrh	r3, [r1, #12]
 802b378:	061f      	lsls	r7, r3, #24
 802b37a:	b09d      	sub	sp, #116	; 0x74
 802b37c:	4680      	mov	r8, r0
 802b37e:	460c      	mov	r4, r1
 802b380:	4616      	mov	r6, r2
 802b382:	d50f      	bpl.n	802b3a4 <_svfiprintf_r+0x34>
 802b384:	690b      	ldr	r3, [r1, #16]
 802b386:	b96b      	cbnz	r3, 802b3a4 <_svfiprintf_r+0x34>
 802b388:	2140      	movs	r1, #64	; 0x40
 802b38a:	f7ff fea3 	bl	802b0d4 <_malloc_r>
 802b38e:	6020      	str	r0, [r4, #0]
 802b390:	6120      	str	r0, [r4, #16]
 802b392:	b928      	cbnz	r0, 802b3a0 <_svfiprintf_r+0x30>
 802b394:	230c      	movs	r3, #12
 802b396:	f8c8 3000 	str.w	r3, [r8]
 802b39a:	f04f 30ff 	mov.w	r0, #4294967295
 802b39e:	e0c8      	b.n	802b532 <_svfiprintf_r+0x1c2>
 802b3a0:	2340      	movs	r3, #64	; 0x40
 802b3a2:	6163      	str	r3, [r4, #20]
 802b3a4:	2300      	movs	r3, #0
 802b3a6:	9309      	str	r3, [sp, #36]	; 0x24
 802b3a8:	2320      	movs	r3, #32
 802b3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b3ae:	2330      	movs	r3, #48	; 0x30
 802b3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b3b4:	9503      	str	r5, [sp, #12]
 802b3b6:	f04f 0b01 	mov.w	fp, #1
 802b3ba:	4637      	mov	r7, r6
 802b3bc:	463d      	mov	r5, r7
 802b3be:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b3c2:	b10b      	cbz	r3, 802b3c8 <_svfiprintf_r+0x58>
 802b3c4:	2b25      	cmp	r3, #37	; 0x25
 802b3c6:	d13e      	bne.n	802b446 <_svfiprintf_r+0xd6>
 802b3c8:	ebb7 0a06 	subs.w	sl, r7, r6
 802b3cc:	d00b      	beq.n	802b3e6 <_svfiprintf_r+0x76>
 802b3ce:	4653      	mov	r3, sl
 802b3d0:	4632      	mov	r2, r6
 802b3d2:	4621      	mov	r1, r4
 802b3d4:	4640      	mov	r0, r8
 802b3d6:	f7ff ff71 	bl	802b2bc <__ssputs_r>
 802b3da:	3001      	adds	r0, #1
 802b3dc:	f000 80a4 	beq.w	802b528 <_svfiprintf_r+0x1b8>
 802b3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b3e2:	4453      	add	r3, sl
 802b3e4:	9309      	str	r3, [sp, #36]	; 0x24
 802b3e6:	783b      	ldrb	r3, [r7, #0]
 802b3e8:	2b00      	cmp	r3, #0
 802b3ea:	f000 809d 	beq.w	802b528 <_svfiprintf_r+0x1b8>
 802b3ee:	2300      	movs	r3, #0
 802b3f0:	f04f 32ff 	mov.w	r2, #4294967295
 802b3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b3f8:	9304      	str	r3, [sp, #16]
 802b3fa:	9307      	str	r3, [sp, #28]
 802b3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b400:	931a      	str	r3, [sp, #104]	; 0x68
 802b402:	462f      	mov	r7, r5
 802b404:	2205      	movs	r2, #5
 802b406:	f817 1b01 	ldrb.w	r1, [r7], #1
 802b40a:	4850      	ldr	r0, [pc, #320]	; (802b54c <_svfiprintf_r+0x1dc>)
 802b40c:	f7d4 fef8 	bl	8000200 <memchr>
 802b410:	9b04      	ldr	r3, [sp, #16]
 802b412:	b9d0      	cbnz	r0, 802b44a <_svfiprintf_r+0xda>
 802b414:	06d9      	lsls	r1, r3, #27
 802b416:	bf44      	itt	mi
 802b418:	2220      	movmi	r2, #32
 802b41a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b41e:	071a      	lsls	r2, r3, #28
 802b420:	bf44      	itt	mi
 802b422:	222b      	movmi	r2, #43	; 0x2b
 802b424:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b428:	782a      	ldrb	r2, [r5, #0]
 802b42a:	2a2a      	cmp	r2, #42	; 0x2a
 802b42c:	d015      	beq.n	802b45a <_svfiprintf_r+0xea>
 802b42e:	9a07      	ldr	r2, [sp, #28]
 802b430:	462f      	mov	r7, r5
 802b432:	2000      	movs	r0, #0
 802b434:	250a      	movs	r5, #10
 802b436:	4639      	mov	r1, r7
 802b438:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b43c:	3b30      	subs	r3, #48	; 0x30
 802b43e:	2b09      	cmp	r3, #9
 802b440:	d94d      	bls.n	802b4de <_svfiprintf_r+0x16e>
 802b442:	b1b8      	cbz	r0, 802b474 <_svfiprintf_r+0x104>
 802b444:	e00f      	b.n	802b466 <_svfiprintf_r+0xf6>
 802b446:	462f      	mov	r7, r5
 802b448:	e7b8      	b.n	802b3bc <_svfiprintf_r+0x4c>
 802b44a:	4a40      	ldr	r2, [pc, #256]	; (802b54c <_svfiprintf_r+0x1dc>)
 802b44c:	1a80      	subs	r0, r0, r2
 802b44e:	fa0b f000 	lsl.w	r0, fp, r0
 802b452:	4318      	orrs	r0, r3
 802b454:	9004      	str	r0, [sp, #16]
 802b456:	463d      	mov	r5, r7
 802b458:	e7d3      	b.n	802b402 <_svfiprintf_r+0x92>
 802b45a:	9a03      	ldr	r2, [sp, #12]
 802b45c:	1d11      	adds	r1, r2, #4
 802b45e:	6812      	ldr	r2, [r2, #0]
 802b460:	9103      	str	r1, [sp, #12]
 802b462:	2a00      	cmp	r2, #0
 802b464:	db01      	blt.n	802b46a <_svfiprintf_r+0xfa>
 802b466:	9207      	str	r2, [sp, #28]
 802b468:	e004      	b.n	802b474 <_svfiprintf_r+0x104>
 802b46a:	4252      	negs	r2, r2
 802b46c:	f043 0302 	orr.w	r3, r3, #2
 802b470:	9207      	str	r2, [sp, #28]
 802b472:	9304      	str	r3, [sp, #16]
 802b474:	783b      	ldrb	r3, [r7, #0]
 802b476:	2b2e      	cmp	r3, #46	; 0x2e
 802b478:	d10c      	bne.n	802b494 <_svfiprintf_r+0x124>
 802b47a:	787b      	ldrb	r3, [r7, #1]
 802b47c:	2b2a      	cmp	r3, #42	; 0x2a
 802b47e:	d133      	bne.n	802b4e8 <_svfiprintf_r+0x178>
 802b480:	9b03      	ldr	r3, [sp, #12]
 802b482:	1d1a      	adds	r2, r3, #4
 802b484:	681b      	ldr	r3, [r3, #0]
 802b486:	9203      	str	r2, [sp, #12]
 802b488:	2b00      	cmp	r3, #0
 802b48a:	bfb8      	it	lt
 802b48c:	f04f 33ff 	movlt.w	r3, #4294967295
 802b490:	3702      	adds	r7, #2
 802b492:	9305      	str	r3, [sp, #20]
 802b494:	4d2e      	ldr	r5, [pc, #184]	; (802b550 <_svfiprintf_r+0x1e0>)
 802b496:	7839      	ldrb	r1, [r7, #0]
 802b498:	2203      	movs	r2, #3
 802b49a:	4628      	mov	r0, r5
 802b49c:	f7d4 feb0 	bl	8000200 <memchr>
 802b4a0:	b138      	cbz	r0, 802b4b2 <_svfiprintf_r+0x142>
 802b4a2:	2340      	movs	r3, #64	; 0x40
 802b4a4:	1b40      	subs	r0, r0, r5
 802b4a6:	fa03 f000 	lsl.w	r0, r3, r0
 802b4aa:	9b04      	ldr	r3, [sp, #16]
 802b4ac:	4303      	orrs	r3, r0
 802b4ae:	3701      	adds	r7, #1
 802b4b0:	9304      	str	r3, [sp, #16]
 802b4b2:	7839      	ldrb	r1, [r7, #0]
 802b4b4:	4827      	ldr	r0, [pc, #156]	; (802b554 <_svfiprintf_r+0x1e4>)
 802b4b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b4ba:	2206      	movs	r2, #6
 802b4bc:	1c7e      	adds	r6, r7, #1
 802b4be:	f7d4 fe9f 	bl	8000200 <memchr>
 802b4c2:	2800      	cmp	r0, #0
 802b4c4:	d038      	beq.n	802b538 <_svfiprintf_r+0x1c8>
 802b4c6:	4b24      	ldr	r3, [pc, #144]	; (802b558 <_svfiprintf_r+0x1e8>)
 802b4c8:	bb13      	cbnz	r3, 802b510 <_svfiprintf_r+0x1a0>
 802b4ca:	9b03      	ldr	r3, [sp, #12]
 802b4cc:	3307      	adds	r3, #7
 802b4ce:	f023 0307 	bic.w	r3, r3, #7
 802b4d2:	3308      	adds	r3, #8
 802b4d4:	9303      	str	r3, [sp, #12]
 802b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b4d8:	444b      	add	r3, r9
 802b4da:	9309      	str	r3, [sp, #36]	; 0x24
 802b4dc:	e76d      	b.n	802b3ba <_svfiprintf_r+0x4a>
 802b4de:	fb05 3202 	mla	r2, r5, r2, r3
 802b4e2:	2001      	movs	r0, #1
 802b4e4:	460f      	mov	r7, r1
 802b4e6:	e7a6      	b.n	802b436 <_svfiprintf_r+0xc6>
 802b4e8:	2300      	movs	r3, #0
 802b4ea:	3701      	adds	r7, #1
 802b4ec:	9305      	str	r3, [sp, #20]
 802b4ee:	4619      	mov	r1, r3
 802b4f0:	250a      	movs	r5, #10
 802b4f2:	4638      	mov	r0, r7
 802b4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b4f8:	3a30      	subs	r2, #48	; 0x30
 802b4fa:	2a09      	cmp	r2, #9
 802b4fc:	d903      	bls.n	802b506 <_svfiprintf_r+0x196>
 802b4fe:	2b00      	cmp	r3, #0
 802b500:	d0c8      	beq.n	802b494 <_svfiprintf_r+0x124>
 802b502:	9105      	str	r1, [sp, #20]
 802b504:	e7c6      	b.n	802b494 <_svfiprintf_r+0x124>
 802b506:	fb05 2101 	mla	r1, r5, r1, r2
 802b50a:	2301      	movs	r3, #1
 802b50c:	4607      	mov	r7, r0
 802b50e:	e7f0      	b.n	802b4f2 <_svfiprintf_r+0x182>
 802b510:	ab03      	add	r3, sp, #12
 802b512:	9300      	str	r3, [sp, #0]
 802b514:	4622      	mov	r2, r4
 802b516:	4b11      	ldr	r3, [pc, #68]	; (802b55c <_svfiprintf_r+0x1ec>)
 802b518:	a904      	add	r1, sp, #16
 802b51a:	4640      	mov	r0, r8
 802b51c:	f3af 8000 	nop.w
 802b520:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b524:	4681      	mov	r9, r0
 802b526:	d1d6      	bne.n	802b4d6 <_svfiprintf_r+0x166>
 802b528:	89a3      	ldrh	r3, [r4, #12]
 802b52a:	065b      	lsls	r3, r3, #25
 802b52c:	f53f af35 	bmi.w	802b39a <_svfiprintf_r+0x2a>
 802b530:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b532:	b01d      	add	sp, #116	; 0x74
 802b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b538:	ab03      	add	r3, sp, #12
 802b53a:	9300      	str	r3, [sp, #0]
 802b53c:	4622      	mov	r2, r4
 802b53e:	4b07      	ldr	r3, [pc, #28]	; (802b55c <_svfiprintf_r+0x1ec>)
 802b540:	a904      	add	r1, sp, #16
 802b542:	4640      	mov	r0, r8
 802b544:	f000 fa2c 	bl	802b9a0 <_printf_i>
 802b548:	e7ea      	b.n	802b520 <_svfiprintf_r+0x1b0>
 802b54a:	bf00      	nop
 802b54c:	08048850 	.word	0x08048850
 802b550:	08048856 	.word	0x08048856
 802b554:	0804885a 	.word	0x0804885a
 802b558:	00000000 	.word	0x00000000
 802b55c:	0802b2bd 	.word	0x0802b2bd

0802b560 <_sungetc_r>:
 802b560:	b538      	push	{r3, r4, r5, lr}
 802b562:	1c4b      	adds	r3, r1, #1
 802b564:	4614      	mov	r4, r2
 802b566:	d103      	bne.n	802b570 <_sungetc_r+0x10>
 802b568:	f04f 35ff 	mov.w	r5, #4294967295
 802b56c:	4628      	mov	r0, r5
 802b56e:	bd38      	pop	{r3, r4, r5, pc}
 802b570:	8993      	ldrh	r3, [r2, #12]
 802b572:	f023 0320 	bic.w	r3, r3, #32
 802b576:	8193      	strh	r3, [r2, #12]
 802b578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b57a:	6852      	ldr	r2, [r2, #4]
 802b57c:	b2cd      	uxtb	r5, r1
 802b57e:	b18b      	cbz	r3, 802b5a4 <_sungetc_r+0x44>
 802b580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b582:	4293      	cmp	r3, r2
 802b584:	dd08      	ble.n	802b598 <_sungetc_r+0x38>
 802b586:	6823      	ldr	r3, [r4, #0]
 802b588:	1e5a      	subs	r2, r3, #1
 802b58a:	6022      	str	r2, [r4, #0]
 802b58c:	f803 5c01 	strb.w	r5, [r3, #-1]
 802b590:	6863      	ldr	r3, [r4, #4]
 802b592:	3301      	adds	r3, #1
 802b594:	6063      	str	r3, [r4, #4]
 802b596:	e7e9      	b.n	802b56c <_sungetc_r+0xc>
 802b598:	4621      	mov	r1, r4
 802b59a:	f000 fdb7 	bl	802c10c <__submore>
 802b59e:	2800      	cmp	r0, #0
 802b5a0:	d0f1      	beq.n	802b586 <_sungetc_r+0x26>
 802b5a2:	e7e1      	b.n	802b568 <_sungetc_r+0x8>
 802b5a4:	6921      	ldr	r1, [r4, #16]
 802b5a6:	6823      	ldr	r3, [r4, #0]
 802b5a8:	b151      	cbz	r1, 802b5c0 <_sungetc_r+0x60>
 802b5aa:	4299      	cmp	r1, r3
 802b5ac:	d208      	bcs.n	802b5c0 <_sungetc_r+0x60>
 802b5ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802b5b2:	42a9      	cmp	r1, r5
 802b5b4:	d104      	bne.n	802b5c0 <_sungetc_r+0x60>
 802b5b6:	3b01      	subs	r3, #1
 802b5b8:	3201      	adds	r2, #1
 802b5ba:	6023      	str	r3, [r4, #0]
 802b5bc:	6062      	str	r2, [r4, #4]
 802b5be:	e7d5      	b.n	802b56c <_sungetc_r+0xc>
 802b5c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802b5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b5c8:	6363      	str	r3, [r4, #52]	; 0x34
 802b5ca:	2303      	movs	r3, #3
 802b5cc:	63a3      	str	r3, [r4, #56]	; 0x38
 802b5ce:	4623      	mov	r3, r4
 802b5d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 802b5d4:	6023      	str	r3, [r4, #0]
 802b5d6:	2301      	movs	r3, #1
 802b5d8:	e7dc      	b.n	802b594 <_sungetc_r+0x34>

0802b5da <__ssrefill_r>:
 802b5da:	b510      	push	{r4, lr}
 802b5dc:	460c      	mov	r4, r1
 802b5de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802b5e0:	b169      	cbz	r1, 802b5fe <__ssrefill_r+0x24>
 802b5e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b5e6:	4299      	cmp	r1, r3
 802b5e8:	d001      	beq.n	802b5ee <__ssrefill_r+0x14>
 802b5ea:	f7ff fd25 	bl	802b038 <_free_r>
 802b5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b5f0:	6063      	str	r3, [r4, #4]
 802b5f2:	2000      	movs	r0, #0
 802b5f4:	6360      	str	r0, [r4, #52]	; 0x34
 802b5f6:	b113      	cbz	r3, 802b5fe <__ssrefill_r+0x24>
 802b5f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b5fa:	6023      	str	r3, [r4, #0]
 802b5fc:	bd10      	pop	{r4, pc}
 802b5fe:	6923      	ldr	r3, [r4, #16]
 802b600:	6023      	str	r3, [r4, #0]
 802b602:	2300      	movs	r3, #0
 802b604:	6063      	str	r3, [r4, #4]
 802b606:	89a3      	ldrh	r3, [r4, #12]
 802b608:	f043 0320 	orr.w	r3, r3, #32
 802b60c:	81a3      	strh	r3, [r4, #12]
 802b60e:	f04f 30ff 	mov.w	r0, #4294967295
 802b612:	e7f3      	b.n	802b5fc <__ssrefill_r+0x22>

0802b614 <__ssvfiscanf_r>:
 802b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b618:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802b61c:	460c      	mov	r4, r1
 802b61e:	2100      	movs	r1, #0
 802b620:	9144      	str	r1, [sp, #272]	; 0x110
 802b622:	9145      	str	r1, [sp, #276]	; 0x114
 802b624:	499f      	ldr	r1, [pc, #636]	; (802b8a4 <__ssvfiscanf_r+0x290>)
 802b626:	91a0      	str	r1, [sp, #640]	; 0x280
 802b628:	f10d 0804 	add.w	r8, sp, #4
 802b62c:	499e      	ldr	r1, [pc, #632]	; (802b8a8 <__ssvfiscanf_r+0x294>)
 802b62e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 802b8ac <__ssvfiscanf_r+0x298>
 802b632:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802b636:	4606      	mov	r6, r0
 802b638:	4692      	mov	sl, r2
 802b63a:	91a1      	str	r1, [sp, #644]	; 0x284
 802b63c:	9300      	str	r3, [sp, #0]
 802b63e:	270a      	movs	r7, #10
 802b640:	f89a 3000 	ldrb.w	r3, [sl]
 802b644:	2b00      	cmp	r3, #0
 802b646:	f000 812a 	beq.w	802b89e <__ssvfiscanf_r+0x28a>
 802b64a:	4655      	mov	r5, sl
 802b64c:	f000 fd9c 	bl	802c188 <__locale_ctype_ptr>
 802b650:	f815 bb01 	ldrb.w	fp, [r5], #1
 802b654:	4458      	add	r0, fp
 802b656:	7843      	ldrb	r3, [r0, #1]
 802b658:	f013 0308 	ands.w	r3, r3, #8
 802b65c:	d01c      	beq.n	802b698 <__ssvfiscanf_r+0x84>
 802b65e:	6863      	ldr	r3, [r4, #4]
 802b660:	2b00      	cmp	r3, #0
 802b662:	dd12      	ble.n	802b68a <__ssvfiscanf_r+0x76>
 802b664:	f000 fd90 	bl	802c188 <__locale_ctype_ptr>
 802b668:	6823      	ldr	r3, [r4, #0]
 802b66a:	781a      	ldrb	r2, [r3, #0]
 802b66c:	4410      	add	r0, r2
 802b66e:	7842      	ldrb	r2, [r0, #1]
 802b670:	0712      	lsls	r2, r2, #28
 802b672:	d401      	bmi.n	802b678 <__ssvfiscanf_r+0x64>
 802b674:	46aa      	mov	sl, r5
 802b676:	e7e3      	b.n	802b640 <__ssvfiscanf_r+0x2c>
 802b678:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b67a:	3201      	adds	r2, #1
 802b67c:	9245      	str	r2, [sp, #276]	; 0x114
 802b67e:	6862      	ldr	r2, [r4, #4]
 802b680:	3301      	adds	r3, #1
 802b682:	3a01      	subs	r2, #1
 802b684:	6062      	str	r2, [r4, #4]
 802b686:	6023      	str	r3, [r4, #0]
 802b688:	e7e9      	b.n	802b65e <__ssvfiscanf_r+0x4a>
 802b68a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b68c:	4621      	mov	r1, r4
 802b68e:	4630      	mov	r0, r6
 802b690:	4798      	blx	r3
 802b692:	2800      	cmp	r0, #0
 802b694:	d0e6      	beq.n	802b664 <__ssvfiscanf_r+0x50>
 802b696:	e7ed      	b.n	802b674 <__ssvfiscanf_r+0x60>
 802b698:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 802b69c:	f040 8082 	bne.w	802b7a4 <__ssvfiscanf_r+0x190>
 802b6a0:	9343      	str	r3, [sp, #268]	; 0x10c
 802b6a2:	9341      	str	r3, [sp, #260]	; 0x104
 802b6a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802b6a8:	2b2a      	cmp	r3, #42	; 0x2a
 802b6aa:	d103      	bne.n	802b6b4 <__ssvfiscanf_r+0xa0>
 802b6ac:	2310      	movs	r3, #16
 802b6ae:	9341      	str	r3, [sp, #260]	; 0x104
 802b6b0:	f10a 0502 	add.w	r5, sl, #2
 802b6b4:	46aa      	mov	sl, r5
 802b6b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 802b6ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802b6be:	2a09      	cmp	r2, #9
 802b6c0:	d922      	bls.n	802b708 <__ssvfiscanf_r+0xf4>
 802b6c2:	2203      	movs	r2, #3
 802b6c4:	4879      	ldr	r0, [pc, #484]	; (802b8ac <__ssvfiscanf_r+0x298>)
 802b6c6:	f7d4 fd9b 	bl	8000200 <memchr>
 802b6ca:	b138      	cbz	r0, 802b6dc <__ssvfiscanf_r+0xc8>
 802b6cc:	eba0 0309 	sub.w	r3, r0, r9
 802b6d0:	2001      	movs	r0, #1
 802b6d2:	4098      	lsls	r0, r3
 802b6d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b6d6:	4318      	orrs	r0, r3
 802b6d8:	9041      	str	r0, [sp, #260]	; 0x104
 802b6da:	46aa      	mov	sl, r5
 802b6dc:	f89a 3000 	ldrb.w	r3, [sl]
 802b6e0:	2b67      	cmp	r3, #103	; 0x67
 802b6e2:	f10a 0501 	add.w	r5, sl, #1
 802b6e6:	d82b      	bhi.n	802b740 <__ssvfiscanf_r+0x12c>
 802b6e8:	2b65      	cmp	r3, #101	; 0x65
 802b6ea:	f080 809f 	bcs.w	802b82c <__ssvfiscanf_r+0x218>
 802b6ee:	2b47      	cmp	r3, #71	; 0x47
 802b6f0:	d810      	bhi.n	802b714 <__ssvfiscanf_r+0x100>
 802b6f2:	2b45      	cmp	r3, #69	; 0x45
 802b6f4:	f080 809a 	bcs.w	802b82c <__ssvfiscanf_r+0x218>
 802b6f8:	2b00      	cmp	r3, #0
 802b6fa:	d06c      	beq.n	802b7d6 <__ssvfiscanf_r+0x1c2>
 802b6fc:	2b25      	cmp	r3, #37	; 0x25
 802b6fe:	d051      	beq.n	802b7a4 <__ssvfiscanf_r+0x190>
 802b700:	2303      	movs	r3, #3
 802b702:	9347      	str	r3, [sp, #284]	; 0x11c
 802b704:	9742      	str	r7, [sp, #264]	; 0x108
 802b706:	e027      	b.n	802b758 <__ssvfiscanf_r+0x144>
 802b708:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802b70a:	fb07 1303 	mla	r3, r7, r3, r1
 802b70e:	3b30      	subs	r3, #48	; 0x30
 802b710:	9343      	str	r3, [sp, #268]	; 0x10c
 802b712:	e7cf      	b.n	802b6b4 <__ssvfiscanf_r+0xa0>
 802b714:	2b5b      	cmp	r3, #91	; 0x5b
 802b716:	d06a      	beq.n	802b7ee <__ssvfiscanf_r+0x1da>
 802b718:	d80c      	bhi.n	802b734 <__ssvfiscanf_r+0x120>
 802b71a:	2b58      	cmp	r3, #88	; 0x58
 802b71c:	d1f0      	bne.n	802b700 <__ssvfiscanf_r+0xec>
 802b71e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b724:	9241      	str	r2, [sp, #260]	; 0x104
 802b726:	2210      	movs	r2, #16
 802b728:	9242      	str	r2, [sp, #264]	; 0x108
 802b72a:	2b6e      	cmp	r3, #110	; 0x6e
 802b72c:	bf8c      	ite	hi
 802b72e:	2304      	movhi	r3, #4
 802b730:	2303      	movls	r3, #3
 802b732:	e010      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b734:	2b63      	cmp	r3, #99	; 0x63
 802b736:	d065      	beq.n	802b804 <__ssvfiscanf_r+0x1f0>
 802b738:	2b64      	cmp	r3, #100	; 0x64
 802b73a:	d1e1      	bne.n	802b700 <__ssvfiscanf_r+0xec>
 802b73c:	9742      	str	r7, [sp, #264]	; 0x108
 802b73e:	e7f4      	b.n	802b72a <__ssvfiscanf_r+0x116>
 802b740:	2b70      	cmp	r3, #112	; 0x70
 802b742:	d04b      	beq.n	802b7dc <__ssvfiscanf_r+0x1c8>
 802b744:	d826      	bhi.n	802b794 <__ssvfiscanf_r+0x180>
 802b746:	2b6e      	cmp	r3, #110	; 0x6e
 802b748:	d062      	beq.n	802b810 <__ssvfiscanf_r+0x1fc>
 802b74a:	d84c      	bhi.n	802b7e6 <__ssvfiscanf_r+0x1d2>
 802b74c:	2b69      	cmp	r3, #105	; 0x69
 802b74e:	d1d7      	bne.n	802b700 <__ssvfiscanf_r+0xec>
 802b750:	2300      	movs	r3, #0
 802b752:	9342      	str	r3, [sp, #264]	; 0x108
 802b754:	2303      	movs	r3, #3
 802b756:	9347      	str	r3, [sp, #284]	; 0x11c
 802b758:	6863      	ldr	r3, [r4, #4]
 802b75a:	2b00      	cmp	r3, #0
 802b75c:	dd68      	ble.n	802b830 <__ssvfiscanf_r+0x21c>
 802b75e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b760:	0659      	lsls	r1, r3, #25
 802b762:	d407      	bmi.n	802b774 <__ssvfiscanf_r+0x160>
 802b764:	f000 fd10 	bl	802c188 <__locale_ctype_ptr>
 802b768:	6823      	ldr	r3, [r4, #0]
 802b76a:	781a      	ldrb	r2, [r3, #0]
 802b76c:	4410      	add	r0, r2
 802b76e:	7842      	ldrb	r2, [r0, #1]
 802b770:	0712      	lsls	r2, r2, #28
 802b772:	d464      	bmi.n	802b83e <__ssvfiscanf_r+0x22a>
 802b774:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802b776:	2b02      	cmp	r3, #2
 802b778:	dc73      	bgt.n	802b862 <__ssvfiscanf_r+0x24e>
 802b77a:	466b      	mov	r3, sp
 802b77c:	4622      	mov	r2, r4
 802b77e:	a941      	add	r1, sp, #260	; 0x104
 802b780:	4630      	mov	r0, r6
 802b782:	f000 fa1f 	bl	802bbc4 <_scanf_chars>
 802b786:	2801      	cmp	r0, #1
 802b788:	f000 8089 	beq.w	802b89e <__ssvfiscanf_r+0x28a>
 802b78c:	2802      	cmp	r0, #2
 802b78e:	f47f af71 	bne.w	802b674 <__ssvfiscanf_r+0x60>
 802b792:	e01d      	b.n	802b7d0 <__ssvfiscanf_r+0x1bc>
 802b794:	2b75      	cmp	r3, #117	; 0x75
 802b796:	d0d1      	beq.n	802b73c <__ssvfiscanf_r+0x128>
 802b798:	2b78      	cmp	r3, #120	; 0x78
 802b79a:	d0c0      	beq.n	802b71e <__ssvfiscanf_r+0x10a>
 802b79c:	2b73      	cmp	r3, #115	; 0x73
 802b79e:	d1af      	bne.n	802b700 <__ssvfiscanf_r+0xec>
 802b7a0:	2302      	movs	r3, #2
 802b7a2:	e7d8      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b7a4:	6863      	ldr	r3, [r4, #4]
 802b7a6:	2b00      	cmp	r3, #0
 802b7a8:	dd0c      	ble.n	802b7c4 <__ssvfiscanf_r+0x1b0>
 802b7aa:	6823      	ldr	r3, [r4, #0]
 802b7ac:	781a      	ldrb	r2, [r3, #0]
 802b7ae:	455a      	cmp	r2, fp
 802b7b0:	d175      	bne.n	802b89e <__ssvfiscanf_r+0x28a>
 802b7b2:	3301      	adds	r3, #1
 802b7b4:	6862      	ldr	r2, [r4, #4]
 802b7b6:	6023      	str	r3, [r4, #0]
 802b7b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802b7ba:	3a01      	subs	r2, #1
 802b7bc:	3301      	adds	r3, #1
 802b7be:	6062      	str	r2, [r4, #4]
 802b7c0:	9345      	str	r3, [sp, #276]	; 0x114
 802b7c2:	e757      	b.n	802b674 <__ssvfiscanf_r+0x60>
 802b7c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b7c6:	4621      	mov	r1, r4
 802b7c8:	4630      	mov	r0, r6
 802b7ca:	4798      	blx	r3
 802b7cc:	2800      	cmp	r0, #0
 802b7ce:	d0ec      	beq.n	802b7aa <__ssvfiscanf_r+0x196>
 802b7d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b7d2:	2800      	cmp	r0, #0
 802b7d4:	d159      	bne.n	802b88a <__ssvfiscanf_r+0x276>
 802b7d6:	f04f 30ff 	mov.w	r0, #4294967295
 802b7da:	e05c      	b.n	802b896 <__ssvfiscanf_r+0x282>
 802b7dc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b7de:	f042 0220 	orr.w	r2, r2, #32
 802b7e2:	9241      	str	r2, [sp, #260]	; 0x104
 802b7e4:	e79b      	b.n	802b71e <__ssvfiscanf_r+0x10a>
 802b7e6:	2308      	movs	r3, #8
 802b7e8:	9342      	str	r3, [sp, #264]	; 0x108
 802b7ea:	2304      	movs	r3, #4
 802b7ec:	e7b3      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b7ee:	4629      	mov	r1, r5
 802b7f0:	4640      	mov	r0, r8
 802b7f2:	f000 fb3f 	bl	802be74 <__sccl>
 802b7f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b7fc:	9341      	str	r3, [sp, #260]	; 0x104
 802b7fe:	4605      	mov	r5, r0
 802b800:	2301      	movs	r3, #1
 802b802:	e7a8      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b804:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b80a:	9341      	str	r3, [sp, #260]	; 0x104
 802b80c:	2300      	movs	r3, #0
 802b80e:	e7a2      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b810:	9841      	ldr	r0, [sp, #260]	; 0x104
 802b812:	06c3      	lsls	r3, r0, #27
 802b814:	f53f af2e 	bmi.w	802b674 <__ssvfiscanf_r+0x60>
 802b818:	9b00      	ldr	r3, [sp, #0]
 802b81a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b81c:	1d19      	adds	r1, r3, #4
 802b81e:	9100      	str	r1, [sp, #0]
 802b820:	681b      	ldr	r3, [r3, #0]
 802b822:	07c0      	lsls	r0, r0, #31
 802b824:	bf4c      	ite	mi
 802b826:	801a      	strhmi	r2, [r3, #0]
 802b828:	601a      	strpl	r2, [r3, #0]
 802b82a:	e723      	b.n	802b674 <__ssvfiscanf_r+0x60>
 802b82c:	2305      	movs	r3, #5
 802b82e:	e792      	b.n	802b756 <__ssvfiscanf_r+0x142>
 802b830:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b832:	4621      	mov	r1, r4
 802b834:	4630      	mov	r0, r6
 802b836:	4798      	blx	r3
 802b838:	2800      	cmp	r0, #0
 802b83a:	d090      	beq.n	802b75e <__ssvfiscanf_r+0x14a>
 802b83c:	e7c8      	b.n	802b7d0 <__ssvfiscanf_r+0x1bc>
 802b83e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b840:	3201      	adds	r2, #1
 802b842:	9245      	str	r2, [sp, #276]	; 0x114
 802b844:	6862      	ldr	r2, [r4, #4]
 802b846:	3a01      	subs	r2, #1
 802b848:	2a00      	cmp	r2, #0
 802b84a:	6062      	str	r2, [r4, #4]
 802b84c:	dd02      	ble.n	802b854 <__ssvfiscanf_r+0x240>
 802b84e:	3301      	adds	r3, #1
 802b850:	6023      	str	r3, [r4, #0]
 802b852:	e787      	b.n	802b764 <__ssvfiscanf_r+0x150>
 802b854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b856:	4621      	mov	r1, r4
 802b858:	4630      	mov	r0, r6
 802b85a:	4798      	blx	r3
 802b85c:	2800      	cmp	r0, #0
 802b85e:	d081      	beq.n	802b764 <__ssvfiscanf_r+0x150>
 802b860:	e7b6      	b.n	802b7d0 <__ssvfiscanf_r+0x1bc>
 802b862:	2b04      	cmp	r3, #4
 802b864:	dc06      	bgt.n	802b874 <__ssvfiscanf_r+0x260>
 802b866:	466b      	mov	r3, sp
 802b868:	4622      	mov	r2, r4
 802b86a:	a941      	add	r1, sp, #260	; 0x104
 802b86c:	4630      	mov	r0, r6
 802b86e:	f000 fa0d 	bl	802bc8c <_scanf_i>
 802b872:	e788      	b.n	802b786 <__ssvfiscanf_r+0x172>
 802b874:	4b0e      	ldr	r3, [pc, #56]	; (802b8b0 <__ssvfiscanf_r+0x29c>)
 802b876:	2b00      	cmp	r3, #0
 802b878:	f43f aefc 	beq.w	802b674 <__ssvfiscanf_r+0x60>
 802b87c:	466b      	mov	r3, sp
 802b87e:	4622      	mov	r2, r4
 802b880:	a941      	add	r1, sp, #260	; 0x104
 802b882:	4630      	mov	r0, r6
 802b884:	f3af 8000 	nop.w
 802b888:	e77d      	b.n	802b786 <__ssvfiscanf_r+0x172>
 802b88a:	89a3      	ldrh	r3, [r4, #12]
 802b88c:	f013 0f40 	tst.w	r3, #64	; 0x40
 802b890:	bf18      	it	ne
 802b892:	f04f 30ff 	movne.w	r0, #4294967295
 802b896:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b89e:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b8a0:	e7f9      	b.n	802b896 <__ssvfiscanf_r+0x282>
 802b8a2:	bf00      	nop
 802b8a4:	0802b561 	.word	0x0802b561
 802b8a8:	0802b5db 	.word	0x0802b5db
 802b8ac:	08048856 	.word	0x08048856
 802b8b0:	00000000 	.word	0x00000000

0802b8b4 <_printf_common>:
 802b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b8b8:	4691      	mov	r9, r2
 802b8ba:	461f      	mov	r7, r3
 802b8bc:	688a      	ldr	r2, [r1, #8]
 802b8be:	690b      	ldr	r3, [r1, #16]
 802b8c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b8c4:	4293      	cmp	r3, r2
 802b8c6:	bfb8      	it	lt
 802b8c8:	4613      	movlt	r3, r2
 802b8ca:	f8c9 3000 	str.w	r3, [r9]
 802b8ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b8d2:	4606      	mov	r6, r0
 802b8d4:	460c      	mov	r4, r1
 802b8d6:	b112      	cbz	r2, 802b8de <_printf_common+0x2a>
 802b8d8:	3301      	adds	r3, #1
 802b8da:	f8c9 3000 	str.w	r3, [r9]
 802b8de:	6823      	ldr	r3, [r4, #0]
 802b8e0:	0699      	lsls	r1, r3, #26
 802b8e2:	bf42      	ittt	mi
 802b8e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b8e8:	3302      	addmi	r3, #2
 802b8ea:	f8c9 3000 	strmi.w	r3, [r9]
 802b8ee:	6825      	ldr	r5, [r4, #0]
 802b8f0:	f015 0506 	ands.w	r5, r5, #6
 802b8f4:	d107      	bne.n	802b906 <_printf_common+0x52>
 802b8f6:	f104 0a19 	add.w	sl, r4, #25
 802b8fa:	68e3      	ldr	r3, [r4, #12]
 802b8fc:	f8d9 2000 	ldr.w	r2, [r9]
 802b900:	1a9b      	subs	r3, r3, r2
 802b902:	42ab      	cmp	r3, r5
 802b904:	dc28      	bgt.n	802b958 <_printf_common+0xa4>
 802b906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b90a:	6822      	ldr	r2, [r4, #0]
 802b90c:	3300      	adds	r3, #0
 802b90e:	bf18      	it	ne
 802b910:	2301      	movne	r3, #1
 802b912:	0692      	lsls	r2, r2, #26
 802b914:	d42d      	bmi.n	802b972 <_printf_common+0xbe>
 802b916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b91a:	4639      	mov	r1, r7
 802b91c:	4630      	mov	r0, r6
 802b91e:	47c0      	blx	r8
 802b920:	3001      	adds	r0, #1
 802b922:	d020      	beq.n	802b966 <_printf_common+0xb2>
 802b924:	6823      	ldr	r3, [r4, #0]
 802b926:	68e5      	ldr	r5, [r4, #12]
 802b928:	f8d9 2000 	ldr.w	r2, [r9]
 802b92c:	f003 0306 	and.w	r3, r3, #6
 802b930:	2b04      	cmp	r3, #4
 802b932:	bf08      	it	eq
 802b934:	1aad      	subeq	r5, r5, r2
 802b936:	68a3      	ldr	r3, [r4, #8]
 802b938:	6922      	ldr	r2, [r4, #16]
 802b93a:	bf0c      	ite	eq
 802b93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b940:	2500      	movne	r5, #0
 802b942:	4293      	cmp	r3, r2
 802b944:	bfc4      	itt	gt
 802b946:	1a9b      	subgt	r3, r3, r2
 802b948:	18ed      	addgt	r5, r5, r3
 802b94a:	f04f 0900 	mov.w	r9, #0
 802b94e:	341a      	adds	r4, #26
 802b950:	454d      	cmp	r5, r9
 802b952:	d11a      	bne.n	802b98a <_printf_common+0xd6>
 802b954:	2000      	movs	r0, #0
 802b956:	e008      	b.n	802b96a <_printf_common+0xb6>
 802b958:	2301      	movs	r3, #1
 802b95a:	4652      	mov	r2, sl
 802b95c:	4639      	mov	r1, r7
 802b95e:	4630      	mov	r0, r6
 802b960:	47c0      	blx	r8
 802b962:	3001      	adds	r0, #1
 802b964:	d103      	bne.n	802b96e <_printf_common+0xba>
 802b966:	f04f 30ff 	mov.w	r0, #4294967295
 802b96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b96e:	3501      	adds	r5, #1
 802b970:	e7c3      	b.n	802b8fa <_printf_common+0x46>
 802b972:	18e1      	adds	r1, r4, r3
 802b974:	1c5a      	adds	r2, r3, #1
 802b976:	2030      	movs	r0, #48	; 0x30
 802b978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b97c:	4422      	add	r2, r4
 802b97e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b982:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b986:	3302      	adds	r3, #2
 802b988:	e7c5      	b.n	802b916 <_printf_common+0x62>
 802b98a:	2301      	movs	r3, #1
 802b98c:	4622      	mov	r2, r4
 802b98e:	4639      	mov	r1, r7
 802b990:	4630      	mov	r0, r6
 802b992:	47c0      	blx	r8
 802b994:	3001      	adds	r0, #1
 802b996:	d0e6      	beq.n	802b966 <_printf_common+0xb2>
 802b998:	f109 0901 	add.w	r9, r9, #1
 802b99c:	e7d8      	b.n	802b950 <_printf_common+0x9c>
	...

0802b9a0 <_printf_i>:
 802b9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b9a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802b9a8:	460c      	mov	r4, r1
 802b9aa:	7e09      	ldrb	r1, [r1, #24]
 802b9ac:	b085      	sub	sp, #20
 802b9ae:	296e      	cmp	r1, #110	; 0x6e
 802b9b0:	4617      	mov	r7, r2
 802b9b2:	4606      	mov	r6, r0
 802b9b4:	4698      	mov	r8, r3
 802b9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b9b8:	f000 80b3 	beq.w	802bb22 <_printf_i+0x182>
 802b9bc:	d822      	bhi.n	802ba04 <_printf_i+0x64>
 802b9be:	2963      	cmp	r1, #99	; 0x63
 802b9c0:	d036      	beq.n	802ba30 <_printf_i+0x90>
 802b9c2:	d80a      	bhi.n	802b9da <_printf_i+0x3a>
 802b9c4:	2900      	cmp	r1, #0
 802b9c6:	f000 80b9 	beq.w	802bb3c <_printf_i+0x19c>
 802b9ca:	2958      	cmp	r1, #88	; 0x58
 802b9cc:	f000 8083 	beq.w	802bad6 <_printf_i+0x136>
 802b9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b9d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802b9d8:	e032      	b.n	802ba40 <_printf_i+0xa0>
 802b9da:	2964      	cmp	r1, #100	; 0x64
 802b9dc:	d001      	beq.n	802b9e2 <_printf_i+0x42>
 802b9de:	2969      	cmp	r1, #105	; 0x69
 802b9e0:	d1f6      	bne.n	802b9d0 <_printf_i+0x30>
 802b9e2:	6820      	ldr	r0, [r4, #0]
 802b9e4:	6813      	ldr	r3, [r2, #0]
 802b9e6:	0605      	lsls	r5, r0, #24
 802b9e8:	f103 0104 	add.w	r1, r3, #4
 802b9ec:	d52a      	bpl.n	802ba44 <_printf_i+0xa4>
 802b9ee:	681b      	ldr	r3, [r3, #0]
 802b9f0:	6011      	str	r1, [r2, #0]
 802b9f2:	2b00      	cmp	r3, #0
 802b9f4:	da03      	bge.n	802b9fe <_printf_i+0x5e>
 802b9f6:	222d      	movs	r2, #45	; 0x2d
 802b9f8:	425b      	negs	r3, r3
 802b9fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802b9fe:	486f      	ldr	r0, [pc, #444]	; (802bbbc <_printf_i+0x21c>)
 802ba00:	220a      	movs	r2, #10
 802ba02:	e039      	b.n	802ba78 <_printf_i+0xd8>
 802ba04:	2973      	cmp	r1, #115	; 0x73
 802ba06:	f000 809d 	beq.w	802bb44 <_printf_i+0x1a4>
 802ba0a:	d808      	bhi.n	802ba1e <_printf_i+0x7e>
 802ba0c:	296f      	cmp	r1, #111	; 0x6f
 802ba0e:	d020      	beq.n	802ba52 <_printf_i+0xb2>
 802ba10:	2970      	cmp	r1, #112	; 0x70
 802ba12:	d1dd      	bne.n	802b9d0 <_printf_i+0x30>
 802ba14:	6823      	ldr	r3, [r4, #0]
 802ba16:	f043 0320 	orr.w	r3, r3, #32
 802ba1a:	6023      	str	r3, [r4, #0]
 802ba1c:	e003      	b.n	802ba26 <_printf_i+0x86>
 802ba1e:	2975      	cmp	r1, #117	; 0x75
 802ba20:	d017      	beq.n	802ba52 <_printf_i+0xb2>
 802ba22:	2978      	cmp	r1, #120	; 0x78
 802ba24:	d1d4      	bne.n	802b9d0 <_printf_i+0x30>
 802ba26:	2378      	movs	r3, #120	; 0x78
 802ba28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ba2c:	4864      	ldr	r0, [pc, #400]	; (802bbc0 <_printf_i+0x220>)
 802ba2e:	e055      	b.n	802badc <_printf_i+0x13c>
 802ba30:	6813      	ldr	r3, [r2, #0]
 802ba32:	1d19      	adds	r1, r3, #4
 802ba34:	681b      	ldr	r3, [r3, #0]
 802ba36:	6011      	str	r1, [r2, #0]
 802ba38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ba40:	2301      	movs	r3, #1
 802ba42:	e08c      	b.n	802bb5e <_printf_i+0x1be>
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	6011      	str	r1, [r2, #0]
 802ba48:	f010 0f40 	tst.w	r0, #64	; 0x40
 802ba4c:	bf18      	it	ne
 802ba4e:	b21b      	sxthne	r3, r3
 802ba50:	e7cf      	b.n	802b9f2 <_printf_i+0x52>
 802ba52:	6813      	ldr	r3, [r2, #0]
 802ba54:	6825      	ldr	r5, [r4, #0]
 802ba56:	1d18      	adds	r0, r3, #4
 802ba58:	6010      	str	r0, [r2, #0]
 802ba5a:	0628      	lsls	r0, r5, #24
 802ba5c:	d501      	bpl.n	802ba62 <_printf_i+0xc2>
 802ba5e:	681b      	ldr	r3, [r3, #0]
 802ba60:	e002      	b.n	802ba68 <_printf_i+0xc8>
 802ba62:	0668      	lsls	r0, r5, #25
 802ba64:	d5fb      	bpl.n	802ba5e <_printf_i+0xbe>
 802ba66:	881b      	ldrh	r3, [r3, #0]
 802ba68:	4854      	ldr	r0, [pc, #336]	; (802bbbc <_printf_i+0x21c>)
 802ba6a:	296f      	cmp	r1, #111	; 0x6f
 802ba6c:	bf14      	ite	ne
 802ba6e:	220a      	movne	r2, #10
 802ba70:	2208      	moveq	r2, #8
 802ba72:	2100      	movs	r1, #0
 802ba74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ba78:	6865      	ldr	r5, [r4, #4]
 802ba7a:	60a5      	str	r5, [r4, #8]
 802ba7c:	2d00      	cmp	r5, #0
 802ba7e:	f2c0 8095 	blt.w	802bbac <_printf_i+0x20c>
 802ba82:	6821      	ldr	r1, [r4, #0]
 802ba84:	f021 0104 	bic.w	r1, r1, #4
 802ba88:	6021      	str	r1, [r4, #0]
 802ba8a:	2b00      	cmp	r3, #0
 802ba8c:	d13d      	bne.n	802bb0a <_printf_i+0x16a>
 802ba8e:	2d00      	cmp	r5, #0
 802ba90:	f040 808e 	bne.w	802bbb0 <_printf_i+0x210>
 802ba94:	4665      	mov	r5, ip
 802ba96:	2a08      	cmp	r2, #8
 802ba98:	d10b      	bne.n	802bab2 <_printf_i+0x112>
 802ba9a:	6823      	ldr	r3, [r4, #0]
 802ba9c:	07db      	lsls	r3, r3, #31
 802ba9e:	d508      	bpl.n	802bab2 <_printf_i+0x112>
 802baa0:	6923      	ldr	r3, [r4, #16]
 802baa2:	6862      	ldr	r2, [r4, #4]
 802baa4:	429a      	cmp	r2, r3
 802baa6:	bfde      	ittt	le
 802baa8:	2330      	movle	r3, #48	; 0x30
 802baaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 802baae:	f105 35ff 	addle.w	r5, r5, #4294967295
 802bab2:	ebac 0305 	sub.w	r3, ip, r5
 802bab6:	6123      	str	r3, [r4, #16]
 802bab8:	f8cd 8000 	str.w	r8, [sp]
 802babc:	463b      	mov	r3, r7
 802babe:	aa03      	add	r2, sp, #12
 802bac0:	4621      	mov	r1, r4
 802bac2:	4630      	mov	r0, r6
 802bac4:	f7ff fef6 	bl	802b8b4 <_printf_common>
 802bac8:	3001      	adds	r0, #1
 802baca:	d14d      	bne.n	802bb68 <_printf_i+0x1c8>
 802bacc:	f04f 30ff 	mov.w	r0, #4294967295
 802bad0:	b005      	add	sp, #20
 802bad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bad6:	4839      	ldr	r0, [pc, #228]	; (802bbbc <_printf_i+0x21c>)
 802bad8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802badc:	6813      	ldr	r3, [r2, #0]
 802bade:	6821      	ldr	r1, [r4, #0]
 802bae0:	1d1d      	adds	r5, r3, #4
 802bae2:	681b      	ldr	r3, [r3, #0]
 802bae4:	6015      	str	r5, [r2, #0]
 802bae6:	060a      	lsls	r2, r1, #24
 802bae8:	d50b      	bpl.n	802bb02 <_printf_i+0x162>
 802baea:	07ca      	lsls	r2, r1, #31
 802baec:	bf44      	itt	mi
 802baee:	f041 0120 	orrmi.w	r1, r1, #32
 802baf2:	6021      	strmi	r1, [r4, #0]
 802baf4:	b91b      	cbnz	r3, 802bafe <_printf_i+0x15e>
 802baf6:	6822      	ldr	r2, [r4, #0]
 802baf8:	f022 0220 	bic.w	r2, r2, #32
 802bafc:	6022      	str	r2, [r4, #0]
 802bafe:	2210      	movs	r2, #16
 802bb00:	e7b7      	b.n	802ba72 <_printf_i+0xd2>
 802bb02:	064d      	lsls	r5, r1, #25
 802bb04:	bf48      	it	mi
 802bb06:	b29b      	uxthmi	r3, r3
 802bb08:	e7ef      	b.n	802baea <_printf_i+0x14a>
 802bb0a:	4665      	mov	r5, ip
 802bb0c:	fbb3 f1f2 	udiv	r1, r3, r2
 802bb10:	fb02 3311 	mls	r3, r2, r1, r3
 802bb14:	5cc3      	ldrb	r3, [r0, r3]
 802bb16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802bb1a:	460b      	mov	r3, r1
 802bb1c:	2900      	cmp	r1, #0
 802bb1e:	d1f5      	bne.n	802bb0c <_printf_i+0x16c>
 802bb20:	e7b9      	b.n	802ba96 <_printf_i+0xf6>
 802bb22:	6813      	ldr	r3, [r2, #0]
 802bb24:	6825      	ldr	r5, [r4, #0]
 802bb26:	6961      	ldr	r1, [r4, #20]
 802bb28:	1d18      	adds	r0, r3, #4
 802bb2a:	6010      	str	r0, [r2, #0]
 802bb2c:	0628      	lsls	r0, r5, #24
 802bb2e:	681b      	ldr	r3, [r3, #0]
 802bb30:	d501      	bpl.n	802bb36 <_printf_i+0x196>
 802bb32:	6019      	str	r1, [r3, #0]
 802bb34:	e002      	b.n	802bb3c <_printf_i+0x19c>
 802bb36:	066a      	lsls	r2, r5, #25
 802bb38:	d5fb      	bpl.n	802bb32 <_printf_i+0x192>
 802bb3a:	8019      	strh	r1, [r3, #0]
 802bb3c:	2300      	movs	r3, #0
 802bb3e:	6123      	str	r3, [r4, #16]
 802bb40:	4665      	mov	r5, ip
 802bb42:	e7b9      	b.n	802bab8 <_printf_i+0x118>
 802bb44:	6813      	ldr	r3, [r2, #0]
 802bb46:	1d19      	adds	r1, r3, #4
 802bb48:	6011      	str	r1, [r2, #0]
 802bb4a:	681d      	ldr	r5, [r3, #0]
 802bb4c:	6862      	ldr	r2, [r4, #4]
 802bb4e:	2100      	movs	r1, #0
 802bb50:	4628      	mov	r0, r5
 802bb52:	f7d4 fb55 	bl	8000200 <memchr>
 802bb56:	b108      	cbz	r0, 802bb5c <_printf_i+0x1bc>
 802bb58:	1b40      	subs	r0, r0, r5
 802bb5a:	6060      	str	r0, [r4, #4]
 802bb5c:	6863      	ldr	r3, [r4, #4]
 802bb5e:	6123      	str	r3, [r4, #16]
 802bb60:	2300      	movs	r3, #0
 802bb62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bb66:	e7a7      	b.n	802bab8 <_printf_i+0x118>
 802bb68:	6923      	ldr	r3, [r4, #16]
 802bb6a:	462a      	mov	r2, r5
 802bb6c:	4639      	mov	r1, r7
 802bb6e:	4630      	mov	r0, r6
 802bb70:	47c0      	blx	r8
 802bb72:	3001      	adds	r0, #1
 802bb74:	d0aa      	beq.n	802bacc <_printf_i+0x12c>
 802bb76:	6823      	ldr	r3, [r4, #0]
 802bb78:	079b      	lsls	r3, r3, #30
 802bb7a:	d413      	bmi.n	802bba4 <_printf_i+0x204>
 802bb7c:	68e0      	ldr	r0, [r4, #12]
 802bb7e:	9b03      	ldr	r3, [sp, #12]
 802bb80:	4298      	cmp	r0, r3
 802bb82:	bfb8      	it	lt
 802bb84:	4618      	movlt	r0, r3
 802bb86:	e7a3      	b.n	802bad0 <_printf_i+0x130>
 802bb88:	2301      	movs	r3, #1
 802bb8a:	464a      	mov	r2, r9
 802bb8c:	4639      	mov	r1, r7
 802bb8e:	4630      	mov	r0, r6
 802bb90:	47c0      	blx	r8
 802bb92:	3001      	adds	r0, #1
 802bb94:	d09a      	beq.n	802bacc <_printf_i+0x12c>
 802bb96:	3501      	adds	r5, #1
 802bb98:	68e3      	ldr	r3, [r4, #12]
 802bb9a:	9a03      	ldr	r2, [sp, #12]
 802bb9c:	1a9b      	subs	r3, r3, r2
 802bb9e:	42ab      	cmp	r3, r5
 802bba0:	dcf2      	bgt.n	802bb88 <_printf_i+0x1e8>
 802bba2:	e7eb      	b.n	802bb7c <_printf_i+0x1dc>
 802bba4:	2500      	movs	r5, #0
 802bba6:	f104 0919 	add.w	r9, r4, #25
 802bbaa:	e7f5      	b.n	802bb98 <_printf_i+0x1f8>
 802bbac:	2b00      	cmp	r3, #0
 802bbae:	d1ac      	bne.n	802bb0a <_printf_i+0x16a>
 802bbb0:	7803      	ldrb	r3, [r0, #0]
 802bbb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bbb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bbba:	e76c      	b.n	802ba96 <_printf_i+0xf6>
 802bbbc:	08048861 	.word	0x08048861
 802bbc0:	08048872 	.word	0x08048872

0802bbc4 <_scanf_chars>:
 802bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bbc8:	4615      	mov	r5, r2
 802bbca:	688a      	ldr	r2, [r1, #8]
 802bbcc:	4680      	mov	r8, r0
 802bbce:	460c      	mov	r4, r1
 802bbd0:	b932      	cbnz	r2, 802bbe0 <_scanf_chars+0x1c>
 802bbd2:	698a      	ldr	r2, [r1, #24]
 802bbd4:	2a00      	cmp	r2, #0
 802bbd6:	bf14      	ite	ne
 802bbd8:	f04f 32ff 	movne.w	r2, #4294967295
 802bbdc:	2201      	moveq	r2, #1
 802bbde:	608a      	str	r2, [r1, #8]
 802bbe0:	6822      	ldr	r2, [r4, #0]
 802bbe2:	06d1      	lsls	r1, r2, #27
 802bbe4:	bf5f      	itttt	pl
 802bbe6:	681a      	ldrpl	r2, [r3, #0]
 802bbe8:	1d11      	addpl	r1, r2, #4
 802bbea:	6019      	strpl	r1, [r3, #0]
 802bbec:	6817      	ldrpl	r7, [r2, #0]
 802bbee:	2600      	movs	r6, #0
 802bbf0:	69a3      	ldr	r3, [r4, #24]
 802bbf2:	b1db      	cbz	r3, 802bc2c <_scanf_chars+0x68>
 802bbf4:	2b01      	cmp	r3, #1
 802bbf6:	d107      	bne.n	802bc08 <_scanf_chars+0x44>
 802bbf8:	682b      	ldr	r3, [r5, #0]
 802bbfa:	6962      	ldr	r2, [r4, #20]
 802bbfc:	781b      	ldrb	r3, [r3, #0]
 802bbfe:	5cd3      	ldrb	r3, [r2, r3]
 802bc00:	b9a3      	cbnz	r3, 802bc2c <_scanf_chars+0x68>
 802bc02:	2e00      	cmp	r6, #0
 802bc04:	d132      	bne.n	802bc6c <_scanf_chars+0xa8>
 802bc06:	e006      	b.n	802bc16 <_scanf_chars+0x52>
 802bc08:	2b02      	cmp	r3, #2
 802bc0a:	d007      	beq.n	802bc1c <_scanf_chars+0x58>
 802bc0c:	2e00      	cmp	r6, #0
 802bc0e:	d12d      	bne.n	802bc6c <_scanf_chars+0xa8>
 802bc10:	69a3      	ldr	r3, [r4, #24]
 802bc12:	2b01      	cmp	r3, #1
 802bc14:	d12a      	bne.n	802bc6c <_scanf_chars+0xa8>
 802bc16:	2001      	movs	r0, #1
 802bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc1c:	f000 fab4 	bl	802c188 <__locale_ctype_ptr>
 802bc20:	682b      	ldr	r3, [r5, #0]
 802bc22:	781b      	ldrb	r3, [r3, #0]
 802bc24:	4418      	add	r0, r3
 802bc26:	7843      	ldrb	r3, [r0, #1]
 802bc28:	071b      	lsls	r3, r3, #28
 802bc2a:	d4ef      	bmi.n	802bc0c <_scanf_chars+0x48>
 802bc2c:	6823      	ldr	r3, [r4, #0]
 802bc2e:	06da      	lsls	r2, r3, #27
 802bc30:	bf5e      	ittt	pl
 802bc32:	682b      	ldrpl	r3, [r5, #0]
 802bc34:	781b      	ldrbpl	r3, [r3, #0]
 802bc36:	703b      	strbpl	r3, [r7, #0]
 802bc38:	682a      	ldr	r2, [r5, #0]
 802bc3a:	686b      	ldr	r3, [r5, #4]
 802bc3c:	f102 0201 	add.w	r2, r2, #1
 802bc40:	602a      	str	r2, [r5, #0]
 802bc42:	68a2      	ldr	r2, [r4, #8]
 802bc44:	f103 33ff 	add.w	r3, r3, #4294967295
 802bc48:	f102 32ff 	add.w	r2, r2, #4294967295
 802bc4c:	606b      	str	r3, [r5, #4]
 802bc4e:	f106 0601 	add.w	r6, r6, #1
 802bc52:	bf58      	it	pl
 802bc54:	3701      	addpl	r7, #1
 802bc56:	60a2      	str	r2, [r4, #8]
 802bc58:	b142      	cbz	r2, 802bc6c <_scanf_chars+0xa8>
 802bc5a:	2b00      	cmp	r3, #0
 802bc5c:	dcc8      	bgt.n	802bbf0 <_scanf_chars+0x2c>
 802bc5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802bc62:	4629      	mov	r1, r5
 802bc64:	4640      	mov	r0, r8
 802bc66:	4798      	blx	r3
 802bc68:	2800      	cmp	r0, #0
 802bc6a:	d0c1      	beq.n	802bbf0 <_scanf_chars+0x2c>
 802bc6c:	6823      	ldr	r3, [r4, #0]
 802bc6e:	f013 0310 	ands.w	r3, r3, #16
 802bc72:	d105      	bne.n	802bc80 <_scanf_chars+0xbc>
 802bc74:	68e2      	ldr	r2, [r4, #12]
 802bc76:	3201      	adds	r2, #1
 802bc78:	60e2      	str	r2, [r4, #12]
 802bc7a:	69a2      	ldr	r2, [r4, #24]
 802bc7c:	b102      	cbz	r2, 802bc80 <_scanf_chars+0xbc>
 802bc7e:	703b      	strb	r3, [r7, #0]
 802bc80:	6923      	ldr	r3, [r4, #16]
 802bc82:	441e      	add	r6, r3
 802bc84:	6126      	str	r6, [r4, #16]
 802bc86:	2000      	movs	r0, #0
 802bc88:	e7c6      	b.n	802bc18 <_scanf_chars+0x54>
	...

0802bc8c <_scanf_i>:
 802bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc90:	469a      	mov	sl, r3
 802bc92:	4b74      	ldr	r3, [pc, #464]	; (802be64 <_scanf_i+0x1d8>)
 802bc94:	460c      	mov	r4, r1
 802bc96:	4683      	mov	fp, r0
 802bc98:	4616      	mov	r6, r2
 802bc9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802bc9e:	b087      	sub	sp, #28
 802bca0:	ab03      	add	r3, sp, #12
 802bca2:	68a7      	ldr	r7, [r4, #8]
 802bca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bca8:	4b6f      	ldr	r3, [pc, #444]	; (802be68 <_scanf_i+0x1dc>)
 802bcaa:	69a1      	ldr	r1, [r4, #24]
 802bcac:	4a6f      	ldr	r2, [pc, #444]	; (802be6c <_scanf_i+0x1e0>)
 802bcae:	2903      	cmp	r1, #3
 802bcb0:	bf08      	it	eq
 802bcb2:	461a      	moveq	r2, r3
 802bcb4:	1e7b      	subs	r3, r7, #1
 802bcb6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 802bcba:	bf84      	itt	hi
 802bcbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 802bcc0:	60a3      	strhi	r3, [r4, #8]
 802bcc2:	6823      	ldr	r3, [r4, #0]
 802bcc4:	9200      	str	r2, [sp, #0]
 802bcc6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802bcca:	bf88      	it	hi
 802bccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802bcd0:	f104 091c 	add.w	r9, r4, #28
 802bcd4:	6023      	str	r3, [r4, #0]
 802bcd6:	bf8c      	ite	hi
 802bcd8:	197f      	addhi	r7, r7, r5
 802bcda:	2700      	movls	r7, #0
 802bcdc:	464b      	mov	r3, r9
 802bcde:	f04f 0800 	mov.w	r8, #0
 802bce2:	9301      	str	r3, [sp, #4]
 802bce4:	6831      	ldr	r1, [r6, #0]
 802bce6:	ab03      	add	r3, sp, #12
 802bce8:	2202      	movs	r2, #2
 802bcea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802bcee:	7809      	ldrb	r1, [r1, #0]
 802bcf0:	f7d4 fa86 	bl	8000200 <memchr>
 802bcf4:	9b01      	ldr	r3, [sp, #4]
 802bcf6:	b330      	cbz	r0, 802bd46 <_scanf_i+0xba>
 802bcf8:	f1b8 0f01 	cmp.w	r8, #1
 802bcfc:	d15a      	bne.n	802bdb4 <_scanf_i+0x128>
 802bcfe:	6862      	ldr	r2, [r4, #4]
 802bd00:	b92a      	cbnz	r2, 802bd0e <_scanf_i+0x82>
 802bd02:	6822      	ldr	r2, [r4, #0]
 802bd04:	2108      	movs	r1, #8
 802bd06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802bd0a:	6061      	str	r1, [r4, #4]
 802bd0c:	6022      	str	r2, [r4, #0]
 802bd0e:	6822      	ldr	r2, [r4, #0]
 802bd10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802bd14:	6022      	str	r2, [r4, #0]
 802bd16:	68a2      	ldr	r2, [r4, #8]
 802bd18:	1e51      	subs	r1, r2, #1
 802bd1a:	60a1      	str	r1, [r4, #8]
 802bd1c:	b19a      	cbz	r2, 802bd46 <_scanf_i+0xba>
 802bd1e:	6832      	ldr	r2, [r6, #0]
 802bd20:	1c51      	adds	r1, r2, #1
 802bd22:	6031      	str	r1, [r6, #0]
 802bd24:	7812      	ldrb	r2, [r2, #0]
 802bd26:	701a      	strb	r2, [r3, #0]
 802bd28:	1c5d      	adds	r5, r3, #1
 802bd2a:	6873      	ldr	r3, [r6, #4]
 802bd2c:	3b01      	subs	r3, #1
 802bd2e:	2b00      	cmp	r3, #0
 802bd30:	6073      	str	r3, [r6, #4]
 802bd32:	dc07      	bgt.n	802bd44 <_scanf_i+0xb8>
 802bd34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802bd38:	4631      	mov	r1, r6
 802bd3a:	4658      	mov	r0, fp
 802bd3c:	4798      	blx	r3
 802bd3e:	2800      	cmp	r0, #0
 802bd40:	f040 8086 	bne.w	802be50 <_scanf_i+0x1c4>
 802bd44:	462b      	mov	r3, r5
 802bd46:	f108 0801 	add.w	r8, r8, #1
 802bd4a:	f1b8 0f03 	cmp.w	r8, #3
 802bd4e:	d1c8      	bne.n	802bce2 <_scanf_i+0x56>
 802bd50:	6862      	ldr	r2, [r4, #4]
 802bd52:	b90a      	cbnz	r2, 802bd58 <_scanf_i+0xcc>
 802bd54:	220a      	movs	r2, #10
 802bd56:	6062      	str	r2, [r4, #4]
 802bd58:	6862      	ldr	r2, [r4, #4]
 802bd5a:	4945      	ldr	r1, [pc, #276]	; (802be70 <_scanf_i+0x1e4>)
 802bd5c:	6960      	ldr	r0, [r4, #20]
 802bd5e:	9301      	str	r3, [sp, #4]
 802bd60:	1a89      	subs	r1, r1, r2
 802bd62:	f000 f887 	bl	802be74 <__sccl>
 802bd66:	9b01      	ldr	r3, [sp, #4]
 802bd68:	f04f 0800 	mov.w	r8, #0
 802bd6c:	461d      	mov	r5, r3
 802bd6e:	68a3      	ldr	r3, [r4, #8]
 802bd70:	6822      	ldr	r2, [r4, #0]
 802bd72:	2b00      	cmp	r3, #0
 802bd74:	d03a      	beq.n	802bdec <_scanf_i+0x160>
 802bd76:	6831      	ldr	r1, [r6, #0]
 802bd78:	6960      	ldr	r0, [r4, #20]
 802bd7a:	f891 c000 	ldrb.w	ip, [r1]
 802bd7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 802bd82:	2800      	cmp	r0, #0
 802bd84:	d032      	beq.n	802bdec <_scanf_i+0x160>
 802bd86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802bd8a:	d121      	bne.n	802bdd0 <_scanf_i+0x144>
 802bd8c:	0510      	lsls	r0, r2, #20
 802bd8e:	d51f      	bpl.n	802bdd0 <_scanf_i+0x144>
 802bd90:	f108 0801 	add.w	r8, r8, #1
 802bd94:	b117      	cbz	r7, 802bd9c <_scanf_i+0x110>
 802bd96:	3301      	adds	r3, #1
 802bd98:	3f01      	subs	r7, #1
 802bd9a:	60a3      	str	r3, [r4, #8]
 802bd9c:	6873      	ldr	r3, [r6, #4]
 802bd9e:	3b01      	subs	r3, #1
 802bda0:	2b00      	cmp	r3, #0
 802bda2:	6073      	str	r3, [r6, #4]
 802bda4:	dd1b      	ble.n	802bdde <_scanf_i+0x152>
 802bda6:	6833      	ldr	r3, [r6, #0]
 802bda8:	3301      	adds	r3, #1
 802bdaa:	6033      	str	r3, [r6, #0]
 802bdac:	68a3      	ldr	r3, [r4, #8]
 802bdae:	3b01      	subs	r3, #1
 802bdb0:	60a3      	str	r3, [r4, #8]
 802bdb2:	e7dc      	b.n	802bd6e <_scanf_i+0xe2>
 802bdb4:	f1b8 0f02 	cmp.w	r8, #2
 802bdb8:	d1ad      	bne.n	802bd16 <_scanf_i+0x8a>
 802bdba:	6822      	ldr	r2, [r4, #0]
 802bdbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802bdc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802bdc4:	d1bf      	bne.n	802bd46 <_scanf_i+0xba>
 802bdc6:	2110      	movs	r1, #16
 802bdc8:	6061      	str	r1, [r4, #4]
 802bdca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bdce:	e7a1      	b.n	802bd14 <_scanf_i+0x88>
 802bdd0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802bdd4:	6022      	str	r2, [r4, #0]
 802bdd6:	780b      	ldrb	r3, [r1, #0]
 802bdd8:	702b      	strb	r3, [r5, #0]
 802bdda:	3501      	adds	r5, #1
 802bddc:	e7de      	b.n	802bd9c <_scanf_i+0x110>
 802bdde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802bde2:	4631      	mov	r1, r6
 802bde4:	4658      	mov	r0, fp
 802bde6:	4798      	blx	r3
 802bde8:	2800      	cmp	r0, #0
 802bdea:	d0df      	beq.n	802bdac <_scanf_i+0x120>
 802bdec:	6823      	ldr	r3, [r4, #0]
 802bdee:	05d9      	lsls	r1, r3, #23
 802bdf0:	d50c      	bpl.n	802be0c <_scanf_i+0x180>
 802bdf2:	454d      	cmp	r5, r9
 802bdf4:	d908      	bls.n	802be08 <_scanf_i+0x17c>
 802bdf6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802bdfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802bdfe:	4632      	mov	r2, r6
 802be00:	4658      	mov	r0, fp
 802be02:	4798      	blx	r3
 802be04:	1e6f      	subs	r7, r5, #1
 802be06:	463d      	mov	r5, r7
 802be08:	454d      	cmp	r5, r9
 802be0a:	d029      	beq.n	802be60 <_scanf_i+0x1d4>
 802be0c:	6822      	ldr	r2, [r4, #0]
 802be0e:	f012 0210 	ands.w	r2, r2, #16
 802be12:	d113      	bne.n	802be3c <_scanf_i+0x1b0>
 802be14:	702a      	strb	r2, [r5, #0]
 802be16:	6863      	ldr	r3, [r4, #4]
 802be18:	9e00      	ldr	r6, [sp, #0]
 802be1a:	4649      	mov	r1, r9
 802be1c:	4658      	mov	r0, fp
 802be1e:	47b0      	blx	r6
 802be20:	f8da 3000 	ldr.w	r3, [sl]
 802be24:	6821      	ldr	r1, [r4, #0]
 802be26:	1d1a      	adds	r2, r3, #4
 802be28:	f8ca 2000 	str.w	r2, [sl]
 802be2c:	f011 0f20 	tst.w	r1, #32
 802be30:	681b      	ldr	r3, [r3, #0]
 802be32:	d010      	beq.n	802be56 <_scanf_i+0x1ca>
 802be34:	6018      	str	r0, [r3, #0]
 802be36:	68e3      	ldr	r3, [r4, #12]
 802be38:	3301      	adds	r3, #1
 802be3a:	60e3      	str	r3, [r4, #12]
 802be3c:	eba5 0509 	sub.w	r5, r5, r9
 802be40:	44a8      	add	r8, r5
 802be42:	6925      	ldr	r5, [r4, #16]
 802be44:	4445      	add	r5, r8
 802be46:	6125      	str	r5, [r4, #16]
 802be48:	2000      	movs	r0, #0
 802be4a:	b007      	add	sp, #28
 802be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be50:	f04f 0800 	mov.w	r8, #0
 802be54:	e7ca      	b.n	802bdec <_scanf_i+0x160>
 802be56:	07ca      	lsls	r2, r1, #31
 802be58:	bf4c      	ite	mi
 802be5a:	8018      	strhmi	r0, [r3, #0]
 802be5c:	6018      	strpl	r0, [r3, #0]
 802be5e:	e7ea      	b.n	802be36 <_scanf_i+0x1aa>
 802be60:	2001      	movs	r0, #1
 802be62:	e7f2      	b.n	802be4a <_scanf_i+0x1be>
 802be64:	0802dd78 	.word	0x0802dd78
 802be68:	0802bfd1 	.word	0x0802bfd1
 802be6c:	0802c0e9 	.word	0x0802c0e9
 802be70:	08048893 	.word	0x08048893

0802be74 <__sccl>:
 802be74:	b570      	push	{r4, r5, r6, lr}
 802be76:	780b      	ldrb	r3, [r1, #0]
 802be78:	2b5e      	cmp	r3, #94	; 0x5e
 802be7a:	bf13      	iteet	ne
 802be7c:	1c4a      	addne	r2, r1, #1
 802be7e:	1c8a      	addeq	r2, r1, #2
 802be80:	784b      	ldrbeq	r3, [r1, #1]
 802be82:	2100      	movne	r1, #0
 802be84:	bf08      	it	eq
 802be86:	2101      	moveq	r1, #1
 802be88:	1e44      	subs	r4, r0, #1
 802be8a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 802be8e:	f804 1f01 	strb.w	r1, [r4, #1]!
 802be92:	42ac      	cmp	r4, r5
 802be94:	d1fb      	bne.n	802be8e <__sccl+0x1a>
 802be96:	b913      	cbnz	r3, 802be9e <__sccl+0x2a>
 802be98:	3a01      	subs	r2, #1
 802be9a:	4610      	mov	r0, r2
 802be9c:	bd70      	pop	{r4, r5, r6, pc}
 802be9e:	f081 0401 	eor.w	r4, r1, #1
 802bea2:	54c4      	strb	r4, [r0, r3]
 802bea4:	1c51      	adds	r1, r2, #1
 802bea6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 802beaa:	2d2d      	cmp	r5, #45	; 0x2d
 802beac:	f101 36ff 	add.w	r6, r1, #4294967295
 802beb0:	460a      	mov	r2, r1
 802beb2:	d006      	beq.n	802bec2 <__sccl+0x4e>
 802beb4:	2d5d      	cmp	r5, #93	; 0x5d
 802beb6:	d0f0      	beq.n	802be9a <__sccl+0x26>
 802beb8:	b90d      	cbnz	r5, 802bebe <__sccl+0x4a>
 802beba:	4632      	mov	r2, r6
 802bebc:	e7ed      	b.n	802be9a <__sccl+0x26>
 802bebe:	462b      	mov	r3, r5
 802bec0:	e7ef      	b.n	802bea2 <__sccl+0x2e>
 802bec2:	780e      	ldrb	r6, [r1, #0]
 802bec4:	2e5d      	cmp	r6, #93	; 0x5d
 802bec6:	d0fa      	beq.n	802bebe <__sccl+0x4a>
 802bec8:	42b3      	cmp	r3, r6
 802beca:	dcf8      	bgt.n	802bebe <__sccl+0x4a>
 802becc:	3301      	adds	r3, #1
 802bece:	429e      	cmp	r6, r3
 802bed0:	54c4      	strb	r4, [r0, r3]
 802bed2:	dcfb      	bgt.n	802becc <__sccl+0x58>
 802bed4:	3102      	adds	r1, #2
 802bed6:	e7e6      	b.n	802bea6 <__sccl+0x32>

0802bed8 <_strtol_l.isra.0>:
 802bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bedc:	4680      	mov	r8, r0
 802bede:	4689      	mov	r9, r1
 802bee0:	4692      	mov	sl, r2
 802bee2:	461e      	mov	r6, r3
 802bee4:	460f      	mov	r7, r1
 802bee6:	463d      	mov	r5, r7
 802bee8:	9808      	ldr	r0, [sp, #32]
 802beea:	f815 4b01 	ldrb.w	r4, [r5], #1
 802beee:	f000 f947 	bl	802c180 <__locale_ctype_ptr_l>
 802bef2:	4420      	add	r0, r4
 802bef4:	7843      	ldrb	r3, [r0, #1]
 802bef6:	f013 0308 	ands.w	r3, r3, #8
 802befa:	d132      	bne.n	802bf62 <_strtol_l.isra.0+0x8a>
 802befc:	2c2d      	cmp	r4, #45	; 0x2d
 802befe:	d132      	bne.n	802bf66 <_strtol_l.isra.0+0x8e>
 802bf00:	787c      	ldrb	r4, [r7, #1]
 802bf02:	1cbd      	adds	r5, r7, #2
 802bf04:	2201      	movs	r2, #1
 802bf06:	2e00      	cmp	r6, #0
 802bf08:	d05d      	beq.n	802bfc6 <_strtol_l.isra.0+0xee>
 802bf0a:	2e10      	cmp	r6, #16
 802bf0c:	d109      	bne.n	802bf22 <_strtol_l.isra.0+0x4a>
 802bf0e:	2c30      	cmp	r4, #48	; 0x30
 802bf10:	d107      	bne.n	802bf22 <_strtol_l.isra.0+0x4a>
 802bf12:	782b      	ldrb	r3, [r5, #0]
 802bf14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802bf18:	2b58      	cmp	r3, #88	; 0x58
 802bf1a:	d14f      	bne.n	802bfbc <_strtol_l.isra.0+0xe4>
 802bf1c:	786c      	ldrb	r4, [r5, #1]
 802bf1e:	2610      	movs	r6, #16
 802bf20:	3502      	adds	r5, #2
 802bf22:	2a00      	cmp	r2, #0
 802bf24:	bf14      	ite	ne
 802bf26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802bf2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802bf2e:	2700      	movs	r7, #0
 802bf30:	fbb1 fcf6 	udiv	ip, r1, r6
 802bf34:	4638      	mov	r0, r7
 802bf36:	fb06 1e1c 	mls	lr, r6, ip, r1
 802bf3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802bf3e:	2b09      	cmp	r3, #9
 802bf40:	d817      	bhi.n	802bf72 <_strtol_l.isra.0+0x9a>
 802bf42:	461c      	mov	r4, r3
 802bf44:	42a6      	cmp	r6, r4
 802bf46:	dd23      	ble.n	802bf90 <_strtol_l.isra.0+0xb8>
 802bf48:	1c7b      	adds	r3, r7, #1
 802bf4a:	d007      	beq.n	802bf5c <_strtol_l.isra.0+0x84>
 802bf4c:	4584      	cmp	ip, r0
 802bf4e:	d31c      	bcc.n	802bf8a <_strtol_l.isra.0+0xb2>
 802bf50:	d101      	bne.n	802bf56 <_strtol_l.isra.0+0x7e>
 802bf52:	45a6      	cmp	lr, r4
 802bf54:	db19      	blt.n	802bf8a <_strtol_l.isra.0+0xb2>
 802bf56:	fb00 4006 	mla	r0, r0, r6, r4
 802bf5a:	2701      	movs	r7, #1
 802bf5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bf60:	e7eb      	b.n	802bf3a <_strtol_l.isra.0+0x62>
 802bf62:	462f      	mov	r7, r5
 802bf64:	e7bf      	b.n	802bee6 <_strtol_l.isra.0+0xe>
 802bf66:	2c2b      	cmp	r4, #43	; 0x2b
 802bf68:	bf04      	itt	eq
 802bf6a:	1cbd      	addeq	r5, r7, #2
 802bf6c:	787c      	ldrbeq	r4, [r7, #1]
 802bf6e:	461a      	mov	r2, r3
 802bf70:	e7c9      	b.n	802bf06 <_strtol_l.isra.0+0x2e>
 802bf72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802bf76:	2b19      	cmp	r3, #25
 802bf78:	d801      	bhi.n	802bf7e <_strtol_l.isra.0+0xa6>
 802bf7a:	3c37      	subs	r4, #55	; 0x37
 802bf7c:	e7e2      	b.n	802bf44 <_strtol_l.isra.0+0x6c>
 802bf7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802bf82:	2b19      	cmp	r3, #25
 802bf84:	d804      	bhi.n	802bf90 <_strtol_l.isra.0+0xb8>
 802bf86:	3c57      	subs	r4, #87	; 0x57
 802bf88:	e7dc      	b.n	802bf44 <_strtol_l.isra.0+0x6c>
 802bf8a:	f04f 37ff 	mov.w	r7, #4294967295
 802bf8e:	e7e5      	b.n	802bf5c <_strtol_l.isra.0+0x84>
 802bf90:	1c7b      	adds	r3, r7, #1
 802bf92:	d108      	bne.n	802bfa6 <_strtol_l.isra.0+0xce>
 802bf94:	2322      	movs	r3, #34	; 0x22
 802bf96:	f8c8 3000 	str.w	r3, [r8]
 802bf9a:	4608      	mov	r0, r1
 802bf9c:	f1ba 0f00 	cmp.w	sl, #0
 802bfa0:	d107      	bne.n	802bfb2 <_strtol_l.isra.0+0xda>
 802bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bfa6:	b102      	cbz	r2, 802bfaa <_strtol_l.isra.0+0xd2>
 802bfa8:	4240      	negs	r0, r0
 802bfaa:	f1ba 0f00 	cmp.w	sl, #0
 802bfae:	d0f8      	beq.n	802bfa2 <_strtol_l.isra.0+0xca>
 802bfb0:	b10f      	cbz	r7, 802bfb6 <_strtol_l.isra.0+0xde>
 802bfb2:	f105 39ff 	add.w	r9, r5, #4294967295
 802bfb6:	f8ca 9000 	str.w	r9, [sl]
 802bfba:	e7f2      	b.n	802bfa2 <_strtol_l.isra.0+0xca>
 802bfbc:	2430      	movs	r4, #48	; 0x30
 802bfbe:	2e00      	cmp	r6, #0
 802bfc0:	d1af      	bne.n	802bf22 <_strtol_l.isra.0+0x4a>
 802bfc2:	2608      	movs	r6, #8
 802bfc4:	e7ad      	b.n	802bf22 <_strtol_l.isra.0+0x4a>
 802bfc6:	2c30      	cmp	r4, #48	; 0x30
 802bfc8:	d0a3      	beq.n	802bf12 <_strtol_l.isra.0+0x3a>
 802bfca:	260a      	movs	r6, #10
 802bfcc:	e7a9      	b.n	802bf22 <_strtol_l.isra.0+0x4a>
	...

0802bfd0 <_strtol_r>:
 802bfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bfd2:	4c06      	ldr	r4, [pc, #24]	; (802bfec <_strtol_r+0x1c>)
 802bfd4:	4d06      	ldr	r5, [pc, #24]	; (802bff0 <_strtol_r+0x20>)
 802bfd6:	6824      	ldr	r4, [r4, #0]
 802bfd8:	6a24      	ldr	r4, [r4, #32]
 802bfda:	2c00      	cmp	r4, #0
 802bfdc:	bf08      	it	eq
 802bfde:	462c      	moveq	r4, r5
 802bfe0:	9400      	str	r4, [sp, #0]
 802bfe2:	f7ff ff79 	bl	802bed8 <_strtol_l.isra.0>
 802bfe6:	b003      	add	sp, #12
 802bfe8:	bd30      	pop	{r4, r5, pc}
 802bfea:	bf00      	nop
 802bfec:	2000285c 	.word	0x2000285c
 802bff0:	200028c0 	.word	0x200028c0

0802bff4 <_strtoul_l.isra.0>:
 802bff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bff8:	4680      	mov	r8, r0
 802bffa:	4689      	mov	r9, r1
 802bffc:	4692      	mov	sl, r2
 802bffe:	461e      	mov	r6, r3
 802c000:	460f      	mov	r7, r1
 802c002:	463d      	mov	r5, r7
 802c004:	9808      	ldr	r0, [sp, #32]
 802c006:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c00a:	f000 f8b9 	bl	802c180 <__locale_ctype_ptr_l>
 802c00e:	4420      	add	r0, r4
 802c010:	7843      	ldrb	r3, [r0, #1]
 802c012:	f013 0308 	ands.w	r3, r3, #8
 802c016:	d130      	bne.n	802c07a <_strtoul_l.isra.0+0x86>
 802c018:	2c2d      	cmp	r4, #45	; 0x2d
 802c01a:	d130      	bne.n	802c07e <_strtoul_l.isra.0+0x8a>
 802c01c:	787c      	ldrb	r4, [r7, #1]
 802c01e:	1cbd      	adds	r5, r7, #2
 802c020:	2101      	movs	r1, #1
 802c022:	2e00      	cmp	r6, #0
 802c024:	d05c      	beq.n	802c0e0 <_strtoul_l.isra.0+0xec>
 802c026:	2e10      	cmp	r6, #16
 802c028:	d109      	bne.n	802c03e <_strtoul_l.isra.0+0x4a>
 802c02a:	2c30      	cmp	r4, #48	; 0x30
 802c02c:	d107      	bne.n	802c03e <_strtoul_l.isra.0+0x4a>
 802c02e:	782b      	ldrb	r3, [r5, #0]
 802c030:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802c034:	2b58      	cmp	r3, #88	; 0x58
 802c036:	d14e      	bne.n	802c0d6 <_strtoul_l.isra.0+0xe2>
 802c038:	786c      	ldrb	r4, [r5, #1]
 802c03a:	2610      	movs	r6, #16
 802c03c:	3502      	adds	r5, #2
 802c03e:	f04f 32ff 	mov.w	r2, #4294967295
 802c042:	2300      	movs	r3, #0
 802c044:	fbb2 f2f6 	udiv	r2, r2, r6
 802c048:	fb06 fc02 	mul.w	ip, r6, r2
 802c04c:	ea6f 0c0c 	mvn.w	ip, ip
 802c050:	4618      	mov	r0, r3
 802c052:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802c056:	2f09      	cmp	r7, #9
 802c058:	d817      	bhi.n	802c08a <_strtoul_l.isra.0+0x96>
 802c05a:	463c      	mov	r4, r7
 802c05c:	42a6      	cmp	r6, r4
 802c05e:	dd23      	ble.n	802c0a8 <_strtoul_l.isra.0+0xb4>
 802c060:	2b00      	cmp	r3, #0
 802c062:	db1e      	blt.n	802c0a2 <_strtoul_l.isra.0+0xae>
 802c064:	4282      	cmp	r2, r0
 802c066:	d31c      	bcc.n	802c0a2 <_strtoul_l.isra.0+0xae>
 802c068:	d101      	bne.n	802c06e <_strtoul_l.isra.0+0x7a>
 802c06a:	45a4      	cmp	ip, r4
 802c06c:	db19      	blt.n	802c0a2 <_strtoul_l.isra.0+0xae>
 802c06e:	fb00 4006 	mla	r0, r0, r6, r4
 802c072:	2301      	movs	r3, #1
 802c074:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c078:	e7eb      	b.n	802c052 <_strtoul_l.isra.0+0x5e>
 802c07a:	462f      	mov	r7, r5
 802c07c:	e7c1      	b.n	802c002 <_strtoul_l.isra.0+0xe>
 802c07e:	2c2b      	cmp	r4, #43	; 0x2b
 802c080:	bf04      	itt	eq
 802c082:	1cbd      	addeq	r5, r7, #2
 802c084:	787c      	ldrbeq	r4, [r7, #1]
 802c086:	4619      	mov	r1, r3
 802c088:	e7cb      	b.n	802c022 <_strtoul_l.isra.0+0x2e>
 802c08a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802c08e:	2f19      	cmp	r7, #25
 802c090:	d801      	bhi.n	802c096 <_strtoul_l.isra.0+0xa2>
 802c092:	3c37      	subs	r4, #55	; 0x37
 802c094:	e7e2      	b.n	802c05c <_strtoul_l.isra.0+0x68>
 802c096:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802c09a:	2f19      	cmp	r7, #25
 802c09c:	d804      	bhi.n	802c0a8 <_strtoul_l.isra.0+0xb4>
 802c09e:	3c57      	subs	r4, #87	; 0x57
 802c0a0:	e7dc      	b.n	802c05c <_strtoul_l.isra.0+0x68>
 802c0a2:	f04f 33ff 	mov.w	r3, #4294967295
 802c0a6:	e7e5      	b.n	802c074 <_strtoul_l.isra.0+0x80>
 802c0a8:	2b00      	cmp	r3, #0
 802c0aa:	da09      	bge.n	802c0c0 <_strtoul_l.isra.0+0xcc>
 802c0ac:	2322      	movs	r3, #34	; 0x22
 802c0ae:	f8c8 3000 	str.w	r3, [r8]
 802c0b2:	f04f 30ff 	mov.w	r0, #4294967295
 802c0b6:	f1ba 0f00 	cmp.w	sl, #0
 802c0ba:	d107      	bne.n	802c0cc <_strtoul_l.isra.0+0xd8>
 802c0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c0c0:	b101      	cbz	r1, 802c0c4 <_strtoul_l.isra.0+0xd0>
 802c0c2:	4240      	negs	r0, r0
 802c0c4:	f1ba 0f00 	cmp.w	sl, #0
 802c0c8:	d0f8      	beq.n	802c0bc <_strtoul_l.isra.0+0xc8>
 802c0ca:	b10b      	cbz	r3, 802c0d0 <_strtoul_l.isra.0+0xdc>
 802c0cc:	f105 39ff 	add.w	r9, r5, #4294967295
 802c0d0:	f8ca 9000 	str.w	r9, [sl]
 802c0d4:	e7f2      	b.n	802c0bc <_strtoul_l.isra.0+0xc8>
 802c0d6:	2430      	movs	r4, #48	; 0x30
 802c0d8:	2e00      	cmp	r6, #0
 802c0da:	d1b0      	bne.n	802c03e <_strtoul_l.isra.0+0x4a>
 802c0dc:	2608      	movs	r6, #8
 802c0de:	e7ae      	b.n	802c03e <_strtoul_l.isra.0+0x4a>
 802c0e0:	2c30      	cmp	r4, #48	; 0x30
 802c0e2:	d0a4      	beq.n	802c02e <_strtoul_l.isra.0+0x3a>
 802c0e4:	260a      	movs	r6, #10
 802c0e6:	e7aa      	b.n	802c03e <_strtoul_l.isra.0+0x4a>

0802c0e8 <_strtoul_r>:
 802c0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c0ea:	4c06      	ldr	r4, [pc, #24]	; (802c104 <_strtoul_r+0x1c>)
 802c0ec:	4d06      	ldr	r5, [pc, #24]	; (802c108 <_strtoul_r+0x20>)
 802c0ee:	6824      	ldr	r4, [r4, #0]
 802c0f0:	6a24      	ldr	r4, [r4, #32]
 802c0f2:	2c00      	cmp	r4, #0
 802c0f4:	bf08      	it	eq
 802c0f6:	462c      	moveq	r4, r5
 802c0f8:	9400      	str	r4, [sp, #0]
 802c0fa:	f7ff ff7b 	bl	802bff4 <_strtoul_l.isra.0>
 802c0fe:	b003      	add	sp, #12
 802c100:	bd30      	pop	{r4, r5, pc}
 802c102:	bf00      	nop
 802c104:	2000285c 	.word	0x2000285c
 802c108:	200028c0 	.word	0x200028c0

0802c10c <__submore>:
 802c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c110:	460c      	mov	r4, r1
 802c112:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c118:	4299      	cmp	r1, r3
 802c11a:	d11d      	bne.n	802c158 <__submore+0x4c>
 802c11c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802c120:	f7fe ffd8 	bl	802b0d4 <_malloc_r>
 802c124:	b918      	cbnz	r0, 802c12e <__submore+0x22>
 802c126:	f04f 30ff 	mov.w	r0, #4294967295
 802c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c132:	63a3      	str	r3, [r4, #56]	; 0x38
 802c134:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802c138:	6360      	str	r0, [r4, #52]	; 0x34
 802c13a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802c13e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802c142:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802c146:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802c14a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802c14e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802c152:	6020      	str	r0, [r4, #0]
 802c154:	2000      	movs	r0, #0
 802c156:	e7e8      	b.n	802c12a <__submore+0x1e>
 802c158:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802c15a:	0077      	lsls	r7, r6, #1
 802c15c:	463a      	mov	r2, r7
 802c15e:	f000 f84c 	bl	802c1fa <_realloc_r>
 802c162:	4605      	mov	r5, r0
 802c164:	2800      	cmp	r0, #0
 802c166:	d0de      	beq.n	802c126 <__submore+0x1a>
 802c168:	eb00 0806 	add.w	r8, r0, r6
 802c16c:	4601      	mov	r1, r0
 802c16e:	4632      	mov	r2, r6
 802c170:	4640      	mov	r0, r8
 802c172:	f7fe ff4d 	bl	802b010 <memcpy>
 802c176:	f8c4 8000 	str.w	r8, [r4]
 802c17a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802c17e:	e7e9      	b.n	802c154 <__submore+0x48>

0802c180 <__locale_ctype_ptr_l>:
 802c180:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802c184:	4770      	bx	lr
	...

0802c188 <__locale_ctype_ptr>:
 802c188:	4b04      	ldr	r3, [pc, #16]	; (802c19c <__locale_ctype_ptr+0x14>)
 802c18a:	4a05      	ldr	r2, [pc, #20]	; (802c1a0 <__locale_ctype_ptr+0x18>)
 802c18c:	681b      	ldr	r3, [r3, #0]
 802c18e:	6a1b      	ldr	r3, [r3, #32]
 802c190:	2b00      	cmp	r3, #0
 802c192:	bf08      	it	eq
 802c194:	4613      	moveq	r3, r2
 802c196:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 802c19a:	4770      	bx	lr
 802c19c:	2000285c 	.word	0x2000285c
 802c1a0:	200028c0 	.word	0x200028c0

0802c1a4 <__ascii_mbtowc>:
 802c1a4:	b082      	sub	sp, #8
 802c1a6:	b901      	cbnz	r1, 802c1aa <__ascii_mbtowc+0x6>
 802c1a8:	a901      	add	r1, sp, #4
 802c1aa:	b142      	cbz	r2, 802c1be <__ascii_mbtowc+0x1a>
 802c1ac:	b14b      	cbz	r3, 802c1c2 <__ascii_mbtowc+0x1e>
 802c1ae:	7813      	ldrb	r3, [r2, #0]
 802c1b0:	600b      	str	r3, [r1, #0]
 802c1b2:	7812      	ldrb	r2, [r2, #0]
 802c1b4:	1c10      	adds	r0, r2, #0
 802c1b6:	bf18      	it	ne
 802c1b8:	2001      	movne	r0, #1
 802c1ba:	b002      	add	sp, #8
 802c1bc:	4770      	bx	lr
 802c1be:	4610      	mov	r0, r2
 802c1c0:	e7fb      	b.n	802c1ba <__ascii_mbtowc+0x16>
 802c1c2:	f06f 0001 	mvn.w	r0, #1
 802c1c6:	e7f8      	b.n	802c1ba <__ascii_mbtowc+0x16>

0802c1c8 <memmove>:
 802c1c8:	4288      	cmp	r0, r1
 802c1ca:	b510      	push	{r4, lr}
 802c1cc:	eb01 0302 	add.w	r3, r1, r2
 802c1d0:	d807      	bhi.n	802c1e2 <memmove+0x1a>
 802c1d2:	1e42      	subs	r2, r0, #1
 802c1d4:	4299      	cmp	r1, r3
 802c1d6:	d00a      	beq.n	802c1ee <memmove+0x26>
 802c1d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c1dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 802c1e0:	e7f8      	b.n	802c1d4 <memmove+0xc>
 802c1e2:	4283      	cmp	r3, r0
 802c1e4:	d9f5      	bls.n	802c1d2 <memmove+0xa>
 802c1e6:	1881      	adds	r1, r0, r2
 802c1e8:	1ad2      	subs	r2, r2, r3
 802c1ea:	42d3      	cmn	r3, r2
 802c1ec:	d100      	bne.n	802c1f0 <memmove+0x28>
 802c1ee:	bd10      	pop	{r4, pc}
 802c1f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c1f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802c1f8:	e7f7      	b.n	802c1ea <memmove+0x22>

0802c1fa <_realloc_r>:
 802c1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1fc:	4607      	mov	r7, r0
 802c1fe:	4614      	mov	r4, r2
 802c200:	460e      	mov	r6, r1
 802c202:	b921      	cbnz	r1, 802c20e <_realloc_r+0x14>
 802c204:	4611      	mov	r1, r2
 802c206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802c20a:	f7fe bf63 	b.w	802b0d4 <_malloc_r>
 802c20e:	b922      	cbnz	r2, 802c21a <_realloc_r+0x20>
 802c210:	f7fe ff12 	bl	802b038 <_free_r>
 802c214:	4625      	mov	r5, r4
 802c216:	4628      	mov	r0, r5
 802c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c21a:	f000 f821 	bl	802c260 <_malloc_usable_size_r>
 802c21e:	42a0      	cmp	r0, r4
 802c220:	d20f      	bcs.n	802c242 <_realloc_r+0x48>
 802c222:	4621      	mov	r1, r4
 802c224:	4638      	mov	r0, r7
 802c226:	f7fe ff55 	bl	802b0d4 <_malloc_r>
 802c22a:	4605      	mov	r5, r0
 802c22c:	2800      	cmp	r0, #0
 802c22e:	d0f2      	beq.n	802c216 <_realloc_r+0x1c>
 802c230:	4631      	mov	r1, r6
 802c232:	4622      	mov	r2, r4
 802c234:	f7fe feec 	bl	802b010 <memcpy>
 802c238:	4631      	mov	r1, r6
 802c23a:	4638      	mov	r0, r7
 802c23c:	f7fe fefc 	bl	802b038 <_free_r>
 802c240:	e7e9      	b.n	802c216 <_realloc_r+0x1c>
 802c242:	4635      	mov	r5, r6
 802c244:	e7e7      	b.n	802c216 <_realloc_r+0x1c>

0802c246 <__ascii_wctomb>:
 802c246:	b149      	cbz	r1, 802c25c <__ascii_wctomb+0x16>
 802c248:	2aff      	cmp	r2, #255	; 0xff
 802c24a:	bf85      	ittet	hi
 802c24c:	238a      	movhi	r3, #138	; 0x8a
 802c24e:	6003      	strhi	r3, [r0, #0]
 802c250:	700a      	strbls	r2, [r1, #0]
 802c252:	f04f 30ff 	movhi.w	r0, #4294967295
 802c256:	bf98      	it	ls
 802c258:	2001      	movls	r0, #1
 802c25a:	4770      	bx	lr
 802c25c:	4608      	mov	r0, r1
 802c25e:	4770      	bx	lr

0802c260 <_malloc_usable_size_r>:
 802c260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c264:	1f18      	subs	r0, r3, #4
 802c266:	2b00      	cmp	r3, #0
 802c268:	bfbc      	itt	lt
 802c26a:	580b      	ldrlt	r3, [r1, r0]
 802c26c:	18c0      	addlt	r0, r0, r3
 802c26e:	4770      	bx	lr

0802c270 <pow>:
 802c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c274:	ed2d 8b04 	vpush	{d8-d9}
 802c278:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 802c54c <pow+0x2dc>
 802c27c:	b08d      	sub	sp, #52	; 0x34
 802c27e:	ec57 6b10 	vmov	r6, r7, d0
 802c282:	ec55 4b11 	vmov	r4, r5, d1
 802c286:	f000 f9bf 	bl	802c608 <__ieee754_pow>
 802c28a:	f999 3000 	ldrsb.w	r3, [r9]
 802c28e:	9300      	str	r3, [sp, #0]
 802c290:	3301      	adds	r3, #1
 802c292:	eeb0 8a40 	vmov.f32	s16, s0
 802c296:	eef0 8a60 	vmov.f32	s17, s1
 802c29a:	46c8      	mov	r8, r9
 802c29c:	d05f      	beq.n	802c35e <pow+0xee>
 802c29e:	4622      	mov	r2, r4
 802c2a0:	462b      	mov	r3, r5
 802c2a2:	4620      	mov	r0, r4
 802c2a4:	4629      	mov	r1, r5
 802c2a6:	f7d4 fc51 	bl	8000b4c <__aeabi_dcmpun>
 802c2aa:	4683      	mov	fp, r0
 802c2ac:	2800      	cmp	r0, #0
 802c2ae:	d156      	bne.n	802c35e <pow+0xee>
 802c2b0:	4632      	mov	r2, r6
 802c2b2:	463b      	mov	r3, r7
 802c2b4:	4630      	mov	r0, r6
 802c2b6:	4639      	mov	r1, r7
 802c2b8:	f7d4 fc48 	bl	8000b4c <__aeabi_dcmpun>
 802c2bc:	9001      	str	r0, [sp, #4]
 802c2be:	b1e8      	cbz	r0, 802c2fc <pow+0x8c>
 802c2c0:	2200      	movs	r2, #0
 802c2c2:	2300      	movs	r3, #0
 802c2c4:	4620      	mov	r0, r4
 802c2c6:	4629      	mov	r1, r5
 802c2c8:	f7d4 fc0e 	bl	8000ae8 <__aeabi_dcmpeq>
 802c2cc:	2800      	cmp	r0, #0
 802c2ce:	d046      	beq.n	802c35e <pow+0xee>
 802c2d0:	2301      	movs	r3, #1
 802c2d2:	9302      	str	r3, [sp, #8]
 802c2d4:	4b96      	ldr	r3, [pc, #600]	; (802c530 <pow+0x2c0>)
 802c2d6:	9303      	str	r3, [sp, #12]
 802c2d8:	4b96      	ldr	r3, [pc, #600]	; (802c534 <pow+0x2c4>)
 802c2da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802c2de:	2200      	movs	r2, #0
 802c2e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802c2e4:	9b00      	ldr	r3, [sp, #0]
 802c2e6:	2b02      	cmp	r3, #2
 802c2e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c2ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c2f0:	d033      	beq.n	802c35a <pow+0xea>
 802c2f2:	a802      	add	r0, sp, #8
 802c2f4:	f000 ff57 	bl	802d1a6 <matherr>
 802c2f8:	bb48      	cbnz	r0, 802c34e <pow+0xde>
 802c2fa:	e05d      	b.n	802c3b8 <pow+0x148>
 802c2fc:	f04f 0a00 	mov.w	sl, #0
 802c300:	f04f 0b00 	mov.w	fp, #0
 802c304:	4652      	mov	r2, sl
 802c306:	465b      	mov	r3, fp
 802c308:	4630      	mov	r0, r6
 802c30a:	4639      	mov	r1, r7
 802c30c:	f7d4 fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 802c310:	ec4b ab19 	vmov	d9, sl, fp
 802c314:	2800      	cmp	r0, #0
 802c316:	d054      	beq.n	802c3c2 <pow+0x152>
 802c318:	4652      	mov	r2, sl
 802c31a:	465b      	mov	r3, fp
 802c31c:	4620      	mov	r0, r4
 802c31e:	4629      	mov	r1, r5
 802c320:	f7d4 fbe2 	bl	8000ae8 <__aeabi_dcmpeq>
 802c324:	4680      	mov	r8, r0
 802c326:	b318      	cbz	r0, 802c370 <pow+0x100>
 802c328:	2301      	movs	r3, #1
 802c32a:	9302      	str	r3, [sp, #8]
 802c32c:	4b80      	ldr	r3, [pc, #512]	; (802c530 <pow+0x2c0>)
 802c32e:	9303      	str	r3, [sp, #12]
 802c330:	9b01      	ldr	r3, [sp, #4]
 802c332:	930a      	str	r3, [sp, #40]	; 0x28
 802c334:	9b00      	ldr	r3, [sp, #0]
 802c336:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c33a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c33e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 802c342:	2b00      	cmp	r3, #0
 802c344:	d0d5      	beq.n	802c2f2 <pow+0x82>
 802c346:	4b7b      	ldr	r3, [pc, #492]	; (802c534 <pow+0x2c4>)
 802c348:	2200      	movs	r2, #0
 802c34a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802c34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c350:	b11b      	cbz	r3, 802c35a <pow+0xea>
 802c352:	f7fe fe23 	bl	802af9c <__errno>
 802c356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c358:	6003      	str	r3, [r0, #0]
 802c35a:	ed9d 8b08 	vldr	d8, [sp, #32]
 802c35e:	eeb0 0a48 	vmov.f32	s0, s16
 802c362:	eef0 0a68 	vmov.f32	s1, s17
 802c366:	b00d      	add	sp, #52	; 0x34
 802c368:	ecbd 8b04 	vpop	{d8-d9}
 802c36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c370:	ec45 4b10 	vmov	d0, r4, r5
 802c374:	f000 ff0f 	bl	802d196 <finite>
 802c378:	2800      	cmp	r0, #0
 802c37a:	d0f0      	beq.n	802c35e <pow+0xee>
 802c37c:	4652      	mov	r2, sl
 802c37e:	465b      	mov	r3, fp
 802c380:	4620      	mov	r0, r4
 802c382:	4629      	mov	r1, r5
 802c384:	f7d4 fbba 	bl	8000afc <__aeabi_dcmplt>
 802c388:	2800      	cmp	r0, #0
 802c38a:	d0e8      	beq.n	802c35e <pow+0xee>
 802c38c:	2301      	movs	r3, #1
 802c38e:	9302      	str	r3, [sp, #8]
 802c390:	4b67      	ldr	r3, [pc, #412]	; (802c530 <pow+0x2c0>)
 802c392:	9303      	str	r3, [sp, #12]
 802c394:	f999 3000 	ldrsb.w	r3, [r9]
 802c398:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 802c39c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c3a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c3a4:	b913      	cbnz	r3, 802c3ac <pow+0x13c>
 802c3a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 802c3aa:	e7a2      	b.n	802c2f2 <pow+0x82>
 802c3ac:	4962      	ldr	r1, [pc, #392]	; (802c538 <pow+0x2c8>)
 802c3ae:	2000      	movs	r0, #0
 802c3b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802c3b4:	2b02      	cmp	r3, #2
 802c3b6:	d19c      	bne.n	802c2f2 <pow+0x82>
 802c3b8:	f7fe fdf0 	bl	802af9c <__errno>
 802c3bc:	2321      	movs	r3, #33	; 0x21
 802c3be:	6003      	str	r3, [r0, #0]
 802c3c0:	e7c5      	b.n	802c34e <pow+0xde>
 802c3c2:	eeb0 0a48 	vmov.f32	s0, s16
 802c3c6:	eef0 0a68 	vmov.f32	s1, s17
 802c3ca:	f000 fee4 	bl	802d196 <finite>
 802c3ce:	9000      	str	r0, [sp, #0]
 802c3d0:	2800      	cmp	r0, #0
 802c3d2:	f040 8081 	bne.w	802c4d8 <pow+0x268>
 802c3d6:	ec47 6b10 	vmov	d0, r6, r7
 802c3da:	f000 fedc 	bl	802d196 <finite>
 802c3de:	2800      	cmp	r0, #0
 802c3e0:	d07a      	beq.n	802c4d8 <pow+0x268>
 802c3e2:	ec45 4b10 	vmov	d0, r4, r5
 802c3e6:	f000 fed6 	bl	802d196 <finite>
 802c3ea:	2800      	cmp	r0, #0
 802c3ec:	d074      	beq.n	802c4d8 <pow+0x268>
 802c3ee:	ec53 2b18 	vmov	r2, r3, d8
 802c3f2:	ee18 0a10 	vmov	r0, s16
 802c3f6:	4619      	mov	r1, r3
 802c3f8:	f7d4 fba8 	bl	8000b4c <__aeabi_dcmpun>
 802c3fc:	f999 9000 	ldrsb.w	r9, [r9]
 802c400:	4b4b      	ldr	r3, [pc, #300]	; (802c530 <pow+0x2c0>)
 802c402:	b1b0      	cbz	r0, 802c432 <pow+0x1c2>
 802c404:	2201      	movs	r2, #1
 802c406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802c40a:	9b00      	ldr	r3, [sp, #0]
 802c40c:	930a      	str	r3, [sp, #40]	; 0x28
 802c40e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c412:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c416:	f1b9 0f00 	cmp.w	r9, #0
 802c41a:	d0c4      	beq.n	802c3a6 <pow+0x136>
 802c41c:	4652      	mov	r2, sl
 802c41e:	465b      	mov	r3, fp
 802c420:	4650      	mov	r0, sl
 802c422:	4659      	mov	r1, fp
 802c424:	f7d4 fa22 	bl	800086c <__aeabi_ddiv>
 802c428:	f1b9 0f02 	cmp.w	r9, #2
 802c42c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802c430:	e7c1      	b.n	802c3b6 <pow+0x146>
 802c432:	2203      	movs	r2, #3
 802c434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802c438:	900a      	str	r0, [sp, #40]	; 0x28
 802c43a:	4629      	mov	r1, r5
 802c43c:	4620      	mov	r0, r4
 802c43e:	2200      	movs	r2, #0
 802c440:	4b3e      	ldr	r3, [pc, #248]	; (802c53c <pow+0x2cc>)
 802c442:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c446:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c44a:	f7d4 f8e5 	bl	8000618 <__aeabi_dmul>
 802c44e:	4604      	mov	r4, r0
 802c450:	460d      	mov	r5, r1
 802c452:	f1b9 0f00 	cmp.w	r9, #0
 802c456:	d124      	bne.n	802c4a2 <pow+0x232>
 802c458:	4b39      	ldr	r3, [pc, #228]	; (802c540 <pow+0x2d0>)
 802c45a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802c45e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802c462:	4630      	mov	r0, r6
 802c464:	4652      	mov	r2, sl
 802c466:	465b      	mov	r3, fp
 802c468:	4639      	mov	r1, r7
 802c46a:	f7d4 fb47 	bl	8000afc <__aeabi_dcmplt>
 802c46e:	2800      	cmp	r0, #0
 802c470:	d056      	beq.n	802c520 <pow+0x2b0>
 802c472:	ec45 4b10 	vmov	d0, r4, r5
 802c476:	f000 fea3 	bl	802d1c0 <rint>
 802c47a:	4622      	mov	r2, r4
 802c47c:	462b      	mov	r3, r5
 802c47e:	ec51 0b10 	vmov	r0, r1, d0
 802c482:	f7d4 fb31 	bl	8000ae8 <__aeabi_dcmpeq>
 802c486:	b920      	cbnz	r0, 802c492 <pow+0x222>
 802c488:	4b2e      	ldr	r3, [pc, #184]	; (802c544 <pow+0x2d4>)
 802c48a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802c48e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802c492:	f998 3000 	ldrsb.w	r3, [r8]
 802c496:	2b02      	cmp	r3, #2
 802c498:	d142      	bne.n	802c520 <pow+0x2b0>
 802c49a:	f7fe fd7f 	bl	802af9c <__errno>
 802c49e:	2322      	movs	r3, #34	; 0x22
 802c4a0:	e78d      	b.n	802c3be <pow+0x14e>
 802c4a2:	4b29      	ldr	r3, [pc, #164]	; (802c548 <pow+0x2d8>)
 802c4a4:	2200      	movs	r2, #0
 802c4a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802c4aa:	4630      	mov	r0, r6
 802c4ac:	4652      	mov	r2, sl
 802c4ae:	465b      	mov	r3, fp
 802c4b0:	4639      	mov	r1, r7
 802c4b2:	f7d4 fb23 	bl	8000afc <__aeabi_dcmplt>
 802c4b6:	2800      	cmp	r0, #0
 802c4b8:	d0eb      	beq.n	802c492 <pow+0x222>
 802c4ba:	ec45 4b10 	vmov	d0, r4, r5
 802c4be:	f000 fe7f 	bl	802d1c0 <rint>
 802c4c2:	4622      	mov	r2, r4
 802c4c4:	462b      	mov	r3, r5
 802c4c6:	ec51 0b10 	vmov	r0, r1, d0
 802c4ca:	f7d4 fb0d 	bl	8000ae8 <__aeabi_dcmpeq>
 802c4ce:	2800      	cmp	r0, #0
 802c4d0:	d1df      	bne.n	802c492 <pow+0x222>
 802c4d2:	2200      	movs	r2, #0
 802c4d4:	4b18      	ldr	r3, [pc, #96]	; (802c538 <pow+0x2c8>)
 802c4d6:	e7da      	b.n	802c48e <pow+0x21e>
 802c4d8:	2200      	movs	r2, #0
 802c4da:	2300      	movs	r3, #0
 802c4dc:	ec51 0b18 	vmov	r0, r1, d8
 802c4e0:	f7d4 fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 802c4e4:	2800      	cmp	r0, #0
 802c4e6:	f43f af3a 	beq.w	802c35e <pow+0xee>
 802c4ea:	ec47 6b10 	vmov	d0, r6, r7
 802c4ee:	f000 fe52 	bl	802d196 <finite>
 802c4f2:	2800      	cmp	r0, #0
 802c4f4:	f43f af33 	beq.w	802c35e <pow+0xee>
 802c4f8:	ec45 4b10 	vmov	d0, r4, r5
 802c4fc:	f000 fe4b 	bl	802d196 <finite>
 802c500:	2800      	cmp	r0, #0
 802c502:	f43f af2c 	beq.w	802c35e <pow+0xee>
 802c506:	2304      	movs	r3, #4
 802c508:	9302      	str	r3, [sp, #8]
 802c50a:	4b09      	ldr	r3, [pc, #36]	; (802c530 <pow+0x2c0>)
 802c50c:	9303      	str	r3, [sp, #12]
 802c50e:	2300      	movs	r3, #0
 802c510:	930a      	str	r3, [sp, #40]	; 0x28
 802c512:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802c516:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802c51a:	ed8d 9b08 	vstr	d9, [sp, #32]
 802c51e:	e7b8      	b.n	802c492 <pow+0x222>
 802c520:	a802      	add	r0, sp, #8
 802c522:	f000 fe40 	bl	802d1a6 <matherr>
 802c526:	2800      	cmp	r0, #0
 802c528:	f47f af11 	bne.w	802c34e <pow+0xde>
 802c52c:	e7b5      	b.n	802c49a <pow+0x22a>
 802c52e:	bf00      	nop
 802c530:	080489a9 	.word	0x080489a9
 802c534:	3ff00000 	.word	0x3ff00000
 802c538:	fff00000 	.word	0xfff00000
 802c53c:	3fe00000 	.word	0x3fe00000
 802c540:	47efffff 	.word	0x47efffff
 802c544:	c7efffff 	.word	0xc7efffff
 802c548:	7ff00000 	.word	0x7ff00000
 802c54c:	20002a2c 	.word	0x20002a2c

0802c550 <sqrt>:
 802c550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802c554:	ed2d 8b02 	vpush	{d8}
 802c558:	b08b      	sub	sp, #44	; 0x2c
 802c55a:	ec55 4b10 	vmov	r4, r5, d0
 802c55e:	f000 fd61 	bl	802d024 <__ieee754_sqrt>
 802c562:	4b26      	ldr	r3, [pc, #152]	; (802c5fc <sqrt+0xac>)
 802c564:	eeb0 8a40 	vmov.f32	s16, s0
 802c568:	eef0 8a60 	vmov.f32	s17, s1
 802c56c:	f993 6000 	ldrsb.w	r6, [r3]
 802c570:	1c73      	adds	r3, r6, #1
 802c572:	d02a      	beq.n	802c5ca <sqrt+0x7a>
 802c574:	4622      	mov	r2, r4
 802c576:	462b      	mov	r3, r5
 802c578:	4620      	mov	r0, r4
 802c57a:	4629      	mov	r1, r5
 802c57c:	f7d4 fae6 	bl	8000b4c <__aeabi_dcmpun>
 802c580:	4607      	mov	r7, r0
 802c582:	bb10      	cbnz	r0, 802c5ca <sqrt+0x7a>
 802c584:	f04f 0800 	mov.w	r8, #0
 802c588:	f04f 0900 	mov.w	r9, #0
 802c58c:	4642      	mov	r2, r8
 802c58e:	464b      	mov	r3, r9
 802c590:	4620      	mov	r0, r4
 802c592:	4629      	mov	r1, r5
 802c594:	f7d4 fab2 	bl	8000afc <__aeabi_dcmplt>
 802c598:	b1b8      	cbz	r0, 802c5ca <sqrt+0x7a>
 802c59a:	2301      	movs	r3, #1
 802c59c:	9300      	str	r3, [sp, #0]
 802c59e:	4b18      	ldr	r3, [pc, #96]	; (802c600 <sqrt+0xb0>)
 802c5a0:	9301      	str	r3, [sp, #4]
 802c5a2:	9708      	str	r7, [sp, #32]
 802c5a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802c5a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802c5ac:	b9b6      	cbnz	r6, 802c5dc <sqrt+0x8c>
 802c5ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 802c5b2:	4668      	mov	r0, sp
 802c5b4:	f000 fdf7 	bl	802d1a6 <matherr>
 802c5b8:	b1d0      	cbz	r0, 802c5f0 <sqrt+0xa0>
 802c5ba:	9b08      	ldr	r3, [sp, #32]
 802c5bc:	b11b      	cbz	r3, 802c5c6 <sqrt+0x76>
 802c5be:	f7fe fced 	bl	802af9c <__errno>
 802c5c2:	9b08      	ldr	r3, [sp, #32]
 802c5c4:	6003      	str	r3, [r0, #0]
 802c5c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 802c5ca:	eeb0 0a48 	vmov.f32	s0, s16
 802c5ce:	eef0 0a68 	vmov.f32	s1, s17
 802c5d2:	b00b      	add	sp, #44	; 0x2c
 802c5d4:	ecbd 8b02 	vpop	{d8}
 802c5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c5dc:	4642      	mov	r2, r8
 802c5de:	464b      	mov	r3, r9
 802c5e0:	4640      	mov	r0, r8
 802c5e2:	4649      	mov	r1, r9
 802c5e4:	f7d4 f942 	bl	800086c <__aeabi_ddiv>
 802c5e8:	2e02      	cmp	r6, #2
 802c5ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802c5ee:	d1e0      	bne.n	802c5b2 <sqrt+0x62>
 802c5f0:	f7fe fcd4 	bl	802af9c <__errno>
 802c5f4:	2321      	movs	r3, #33	; 0x21
 802c5f6:	6003      	str	r3, [r0, #0]
 802c5f8:	e7df      	b.n	802c5ba <sqrt+0x6a>
 802c5fa:	bf00      	nop
 802c5fc:	20002a2c 	.word	0x20002a2c
 802c600:	080489ad 	.word	0x080489ad
 802c604:	00000000 	.word	0x00000000

0802c608 <__ieee754_pow>:
 802c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c60c:	b091      	sub	sp, #68	; 0x44
 802c60e:	ed8d 1b00 	vstr	d1, [sp]
 802c612:	e9dd 2900 	ldrd	r2, r9, [sp]
 802c616:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802c61a:	ea58 0302 	orrs.w	r3, r8, r2
 802c61e:	ec57 6b10 	vmov	r6, r7, d0
 802c622:	f000 84be 	beq.w	802cfa2 <__ieee754_pow+0x99a>
 802c626:	4b7a      	ldr	r3, [pc, #488]	; (802c810 <__ieee754_pow+0x208>)
 802c628:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802c62c:	429c      	cmp	r4, r3
 802c62e:	463d      	mov	r5, r7
 802c630:	ee10 aa10 	vmov	sl, s0
 802c634:	dc09      	bgt.n	802c64a <__ieee754_pow+0x42>
 802c636:	d103      	bne.n	802c640 <__ieee754_pow+0x38>
 802c638:	b93e      	cbnz	r6, 802c64a <__ieee754_pow+0x42>
 802c63a:	45a0      	cmp	r8, r4
 802c63c:	dc0d      	bgt.n	802c65a <__ieee754_pow+0x52>
 802c63e:	e001      	b.n	802c644 <__ieee754_pow+0x3c>
 802c640:	4598      	cmp	r8, r3
 802c642:	dc02      	bgt.n	802c64a <__ieee754_pow+0x42>
 802c644:	4598      	cmp	r8, r3
 802c646:	d10e      	bne.n	802c666 <__ieee754_pow+0x5e>
 802c648:	b16a      	cbz	r2, 802c666 <__ieee754_pow+0x5e>
 802c64a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802c64e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802c652:	ea54 030a 	orrs.w	r3, r4, sl
 802c656:	f000 84a4 	beq.w	802cfa2 <__ieee754_pow+0x99a>
 802c65a:	486e      	ldr	r0, [pc, #440]	; (802c814 <__ieee754_pow+0x20c>)
 802c65c:	b011      	add	sp, #68	; 0x44
 802c65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c662:	f000 bda5 	b.w	802d1b0 <nan>
 802c666:	2d00      	cmp	r5, #0
 802c668:	da53      	bge.n	802c712 <__ieee754_pow+0x10a>
 802c66a:	4b6b      	ldr	r3, [pc, #428]	; (802c818 <__ieee754_pow+0x210>)
 802c66c:	4598      	cmp	r8, r3
 802c66e:	dc4d      	bgt.n	802c70c <__ieee754_pow+0x104>
 802c670:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802c674:	4598      	cmp	r8, r3
 802c676:	dd4c      	ble.n	802c712 <__ieee754_pow+0x10a>
 802c678:	ea4f 5328 	mov.w	r3, r8, asr #20
 802c67c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c680:	2b14      	cmp	r3, #20
 802c682:	dd26      	ble.n	802c6d2 <__ieee754_pow+0xca>
 802c684:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802c688:	fa22 f103 	lsr.w	r1, r2, r3
 802c68c:	fa01 f303 	lsl.w	r3, r1, r3
 802c690:	4293      	cmp	r3, r2
 802c692:	d13e      	bne.n	802c712 <__ieee754_pow+0x10a>
 802c694:	f001 0101 	and.w	r1, r1, #1
 802c698:	f1c1 0b02 	rsb	fp, r1, #2
 802c69c:	2a00      	cmp	r2, #0
 802c69e:	d15b      	bne.n	802c758 <__ieee754_pow+0x150>
 802c6a0:	4b5b      	ldr	r3, [pc, #364]	; (802c810 <__ieee754_pow+0x208>)
 802c6a2:	4598      	cmp	r8, r3
 802c6a4:	d124      	bne.n	802c6f0 <__ieee754_pow+0xe8>
 802c6a6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802c6aa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802c6ae:	ea53 030a 	orrs.w	r3, r3, sl
 802c6b2:	f000 8476 	beq.w	802cfa2 <__ieee754_pow+0x99a>
 802c6b6:	4b59      	ldr	r3, [pc, #356]	; (802c81c <__ieee754_pow+0x214>)
 802c6b8:	429c      	cmp	r4, r3
 802c6ba:	dd2d      	ble.n	802c718 <__ieee754_pow+0x110>
 802c6bc:	f1b9 0f00 	cmp.w	r9, #0
 802c6c0:	f280 8473 	bge.w	802cfaa <__ieee754_pow+0x9a2>
 802c6c4:	2000      	movs	r0, #0
 802c6c6:	2100      	movs	r1, #0
 802c6c8:	ec41 0b10 	vmov	d0, r0, r1
 802c6cc:	b011      	add	sp, #68	; 0x44
 802c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c6d2:	2a00      	cmp	r2, #0
 802c6d4:	d13e      	bne.n	802c754 <__ieee754_pow+0x14c>
 802c6d6:	f1c3 0314 	rsb	r3, r3, #20
 802c6da:	fa48 f103 	asr.w	r1, r8, r3
 802c6de:	fa01 f303 	lsl.w	r3, r1, r3
 802c6e2:	4543      	cmp	r3, r8
 802c6e4:	f040 8469 	bne.w	802cfba <__ieee754_pow+0x9b2>
 802c6e8:	f001 0101 	and.w	r1, r1, #1
 802c6ec:	f1c1 0b02 	rsb	fp, r1, #2
 802c6f0:	4b4b      	ldr	r3, [pc, #300]	; (802c820 <__ieee754_pow+0x218>)
 802c6f2:	4598      	cmp	r8, r3
 802c6f4:	d118      	bne.n	802c728 <__ieee754_pow+0x120>
 802c6f6:	f1b9 0f00 	cmp.w	r9, #0
 802c6fa:	f280 845a 	bge.w	802cfb2 <__ieee754_pow+0x9aa>
 802c6fe:	4948      	ldr	r1, [pc, #288]	; (802c820 <__ieee754_pow+0x218>)
 802c700:	4632      	mov	r2, r6
 802c702:	463b      	mov	r3, r7
 802c704:	2000      	movs	r0, #0
 802c706:	f7d4 f8b1 	bl	800086c <__aeabi_ddiv>
 802c70a:	e7dd      	b.n	802c6c8 <__ieee754_pow+0xc0>
 802c70c:	f04f 0b02 	mov.w	fp, #2
 802c710:	e7c4      	b.n	802c69c <__ieee754_pow+0x94>
 802c712:	f04f 0b00 	mov.w	fp, #0
 802c716:	e7c1      	b.n	802c69c <__ieee754_pow+0x94>
 802c718:	f1b9 0f00 	cmp.w	r9, #0
 802c71c:	dad2      	bge.n	802c6c4 <__ieee754_pow+0xbc>
 802c71e:	e9dd 0300 	ldrd	r0, r3, [sp]
 802c722:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802c726:	e7cf      	b.n	802c6c8 <__ieee754_pow+0xc0>
 802c728:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802c72c:	d106      	bne.n	802c73c <__ieee754_pow+0x134>
 802c72e:	4632      	mov	r2, r6
 802c730:	463b      	mov	r3, r7
 802c732:	4610      	mov	r0, r2
 802c734:	4619      	mov	r1, r3
 802c736:	f7d3 ff6f 	bl	8000618 <__aeabi_dmul>
 802c73a:	e7c5      	b.n	802c6c8 <__ieee754_pow+0xc0>
 802c73c:	4b39      	ldr	r3, [pc, #228]	; (802c824 <__ieee754_pow+0x21c>)
 802c73e:	4599      	cmp	r9, r3
 802c740:	d10a      	bne.n	802c758 <__ieee754_pow+0x150>
 802c742:	2d00      	cmp	r5, #0
 802c744:	db08      	blt.n	802c758 <__ieee754_pow+0x150>
 802c746:	ec47 6b10 	vmov	d0, r6, r7
 802c74a:	b011      	add	sp, #68	; 0x44
 802c74c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c750:	f000 bc68 	b.w	802d024 <__ieee754_sqrt>
 802c754:	f04f 0b00 	mov.w	fp, #0
 802c758:	ec47 6b10 	vmov	d0, r6, r7
 802c75c:	f000 fd12 	bl	802d184 <fabs>
 802c760:	ec51 0b10 	vmov	r0, r1, d0
 802c764:	f1ba 0f00 	cmp.w	sl, #0
 802c768:	d127      	bne.n	802c7ba <__ieee754_pow+0x1b2>
 802c76a:	b124      	cbz	r4, 802c776 <__ieee754_pow+0x16e>
 802c76c:	4b2c      	ldr	r3, [pc, #176]	; (802c820 <__ieee754_pow+0x218>)
 802c76e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802c772:	429a      	cmp	r2, r3
 802c774:	d121      	bne.n	802c7ba <__ieee754_pow+0x1b2>
 802c776:	f1b9 0f00 	cmp.w	r9, #0
 802c77a:	da05      	bge.n	802c788 <__ieee754_pow+0x180>
 802c77c:	4602      	mov	r2, r0
 802c77e:	460b      	mov	r3, r1
 802c780:	2000      	movs	r0, #0
 802c782:	4927      	ldr	r1, [pc, #156]	; (802c820 <__ieee754_pow+0x218>)
 802c784:	f7d4 f872 	bl	800086c <__aeabi_ddiv>
 802c788:	2d00      	cmp	r5, #0
 802c78a:	da9d      	bge.n	802c6c8 <__ieee754_pow+0xc0>
 802c78c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802c790:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802c794:	ea54 030b 	orrs.w	r3, r4, fp
 802c798:	d108      	bne.n	802c7ac <__ieee754_pow+0x1a4>
 802c79a:	4602      	mov	r2, r0
 802c79c:	460b      	mov	r3, r1
 802c79e:	4610      	mov	r0, r2
 802c7a0:	4619      	mov	r1, r3
 802c7a2:	f7d3 fd81 	bl	80002a8 <__aeabi_dsub>
 802c7a6:	4602      	mov	r2, r0
 802c7a8:	460b      	mov	r3, r1
 802c7aa:	e7ac      	b.n	802c706 <__ieee754_pow+0xfe>
 802c7ac:	f1bb 0f01 	cmp.w	fp, #1
 802c7b0:	d18a      	bne.n	802c6c8 <__ieee754_pow+0xc0>
 802c7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c7b6:	4619      	mov	r1, r3
 802c7b8:	e786      	b.n	802c6c8 <__ieee754_pow+0xc0>
 802c7ba:	0fed      	lsrs	r5, r5, #31
 802c7bc:	1e6b      	subs	r3, r5, #1
 802c7be:	930d      	str	r3, [sp, #52]	; 0x34
 802c7c0:	ea5b 0303 	orrs.w	r3, fp, r3
 802c7c4:	d102      	bne.n	802c7cc <__ieee754_pow+0x1c4>
 802c7c6:	4632      	mov	r2, r6
 802c7c8:	463b      	mov	r3, r7
 802c7ca:	e7e8      	b.n	802c79e <__ieee754_pow+0x196>
 802c7cc:	4b16      	ldr	r3, [pc, #88]	; (802c828 <__ieee754_pow+0x220>)
 802c7ce:	4598      	cmp	r8, r3
 802c7d0:	f340 80fe 	ble.w	802c9d0 <__ieee754_pow+0x3c8>
 802c7d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802c7d8:	4598      	cmp	r8, r3
 802c7da:	dd0a      	ble.n	802c7f2 <__ieee754_pow+0x1ea>
 802c7dc:	4b0f      	ldr	r3, [pc, #60]	; (802c81c <__ieee754_pow+0x214>)
 802c7de:	429c      	cmp	r4, r3
 802c7e0:	dc0d      	bgt.n	802c7fe <__ieee754_pow+0x1f6>
 802c7e2:	f1b9 0f00 	cmp.w	r9, #0
 802c7e6:	f6bf af6d 	bge.w	802c6c4 <__ieee754_pow+0xbc>
 802c7ea:	a307      	add	r3, pc, #28	; (adr r3, 802c808 <__ieee754_pow+0x200>)
 802c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7f0:	e79f      	b.n	802c732 <__ieee754_pow+0x12a>
 802c7f2:	4b0e      	ldr	r3, [pc, #56]	; (802c82c <__ieee754_pow+0x224>)
 802c7f4:	429c      	cmp	r4, r3
 802c7f6:	ddf4      	ble.n	802c7e2 <__ieee754_pow+0x1da>
 802c7f8:	4b09      	ldr	r3, [pc, #36]	; (802c820 <__ieee754_pow+0x218>)
 802c7fa:	429c      	cmp	r4, r3
 802c7fc:	dd18      	ble.n	802c830 <__ieee754_pow+0x228>
 802c7fe:	f1b9 0f00 	cmp.w	r9, #0
 802c802:	dcf2      	bgt.n	802c7ea <__ieee754_pow+0x1e2>
 802c804:	e75e      	b.n	802c6c4 <__ieee754_pow+0xbc>
 802c806:	bf00      	nop
 802c808:	8800759c 	.word	0x8800759c
 802c80c:	7e37e43c 	.word	0x7e37e43c
 802c810:	7ff00000 	.word	0x7ff00000
 802c814:	08048855 	.word	0x08048855
 802c818:	433fffff 	.word	0x433fffff
 802c81c:	3fefffff 	.word	0x3fefffff
 802c820:	3ff00000 	.word	0x3ff00000
 802c824:	3fe00000 	.word	0x3fe00000
 802c828:	41e00000 	.word	0x41e00000
 802c82c:	3feffffe 	.word	0x3feffffe
 802c830:	2200      	movs	r2, #0
 802c832:	4b63      	ldr	r3, [pc, #396]	; (802c9c0 <__ieee754_pow+0x3b8>)
 802c834:	f7d3 fd38 	bl	80002a8 <__aeabi_dsub>
 802c838:	a355      	add	r3, pc, #340	; (adr r3, 802c990 <__ieee754_pow+0x388>)
 802c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c83e:	4604      	mov	r4, r0
 802c840:	460d      	mov	r5, r1
 802c842:	f7d3 fee9 	bl	8000618 <__aeabi_dmul>
 802c846:	a354      	add	r3, pc, #336	; (adr r3, 802c998 <__ieee754_pow+0x390>)
 802c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c84c:	4606      	mov	r6, r0
 802c84e:	460f      	mov	r7, r1
 802c850:	4620      	mov	r0, r4
 802c852:	4629      	mov	r1, r5
 802c854:	f7d3 fee0 	bl	8000618 <__aeabi_dmul>
 802c858:	2200      	movs	r2, #0
 802c85a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802c85e:	4b59      	ldr	r3, [pc, #356]	; (802c9c4 <__ieee754_pow+0x3bc>)
 802c860:	4620      	mov	r0, r4
 802c862:	4629      	mov	r1, r5
 802c864:	f7d3 fed8 	bl	8000618 <__aeabi_dmul>
 802c868:	4602      	mov	r2, r0
 802c86a:	460b      	mov	r3, r1
 802c86c:	a14c      	add	r1, pc, #304	; (adr r1, 802c9a0 <__ieee754_pow+0x398>)
 802c86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c872:	f7d3 fd19 	bl	80002a8 <__aeabi_dsub>
 802c876:	4622      	mov	r2, r4
 802c878:	462b      	mov	r3, r5
 802c87a:	f7d3 fecd 	bl	8000618 <__aeabi_dmul>
 802c87e:	4602      	mov	r2, r0
 802c880:	460b      	mov	r3, r1
 802c882:	2000      	movs	r0, #0
 802c884:	4950      	ldr	r1, [pc, #320]	; (802c9c8 <__ieee754_pow+0x3c0>)
 802c886:	f7d3 fd0f 	bl	80002a8 <__aeabi_dsub>
 802c88a:	4622      	mov	r2, r4
 802c88c:	462b      	mov	r3, r5
 802c88e:	4680      	mov	r8, r0
 802c890:	4689      	mov	r9, r1
 802c892:	4620      	mov	r0, r4
 802c894:	4629      	mov	r1, r5
 802c896:	f7d3 febf 	bl	8000618 <__aeabi_dmul>
 802c89a:	4602      	mov	r2, r0
 802c89c:	460b      	mov	r3, r1
 802c89e:	4640      	mov	r0, r8
 802c8a0:	4649      	mov	r1, r9
 802c8a2:	f7d3 feb9 	bl	8000618 <__aeabi_dmul>
 802c8a6:	a340      	add	r3, pc, #256	; (adr r3, 802c9a8 <__ieee754_pow+0x3a0>)
 802c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8ac:	f7d3 feb4 	bl	8000618 <__aeabi_dmul>
 802c8b0:	4602      	mov	r2, r0
 802c8b2:	460b      	mov	r3, r1
 802c8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802c8b8:	f7d3 fcf6 	bl	80002a8 <__aeabi_dsub>
 802c8bc:	4602      	mov	r2, r0
 802c8be:	460b      	mov	r3, r1
 802c8c0:	4604      	mov	r4, r0
 802c8c2:	460d      	mov	r5, r1
 802c8c4:	4630      	mov	r0, r6
 802c8c6:	4639      	mov	r1, r7
 802c8c8:	f7d3 fcf0 	bl	80002ac <__adddf3>
 802c8cc:	2000      	movs	r0, #0
 802c8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c8d2:	4632      	mov	r2, r6
 802c8d4:	463b      	mov	r3, r7
 802c8d6:	f7d3 fce7 	bl	80002a8 <__aeabi_dsub>
 802c8da:	4602      	mov	r2, r0
 802c8dc:	460b      	mov	r3, r1
 802c8de:	4620      	mov	r0, r4
 802c8e0:	4629      	mov	r1, r5
 802c8e2:	f7d3 fce1 	bl	80002a8 <__aeabi_dsub>
 802c8e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802c8e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 802c8ec:	4313      	orrs	r3, r2
 802c8ee:	4606      	mov	r6, r0
 802c8f0:	460f      	mov	r7, r1
 802c8f2:	f040 81eb 	bne.w	802cccc <__ieee754_pow+0x6c4>
 802c8f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 802c9b0 <__ieee754_pow+0x3a8>
 802c8fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 802c8fe:	2400      	movs	r4, #0
 802c900:	4622      	mov	r2, r4
 802c902:	462b      	mov	r3, r5
 802c904:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c908:	ed8d 7b02 	vstr	d7, [sp, #8]
 802c90c:	f7d3 fccc 	bl	80002a8 <__aeabi_dsub>
 802c910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c914:	f7d3 fe80 	bl	8000618 <__aeabi_dmul>
 802c918:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c91c:	4680      	mov	r8, r0
 802c91e:	4689      	mov	r9, r1
 802c920:	4630      	mov	r0, r6
 802c922:	4639      	mov	r1, r7
 802c924:	f7d3 fe78 	bl	8000618 <__aeabi_dmul>
 802c928:	4602      	mov	r2, r0
 802c92a:	460b      	mov	r3, r1
 802c92c:	4640      	mov	r0, r8
 802c92e:	4649      	mov	r1, r9
 802c930:	f7d3 fcbc 	bl	80002ac <__adddf3>
 802c934:	4622      	mov	r2, r4
 802c936:	462b      	mov	r3, r5
 802c938:	4680      	mov	r8, r0
 802c93a:	4689      	mov	r9, r1
 802c93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c940:	f7d3 fe6a 	bl	8000618 <__aeabi_dmul>
 802c944:	460b      	mov	r3, r1
 802c946:	4604      	mov	r4, r0
 802c948:	460d      	mov	r5, r1
 802c94a:	4602      	mov	r2, r0
 802c94c:	4649      	mov	r1, r9
 802c94e:	4640      	mov	r0, r8
 802c950:	e9cd 4500 	strd	r4, r5, [sp]
 802c954:	f7d3 fcaa 	bl	80002ac <__adddf3>
 802c958:	4b1c      	ldr	r3, [pc, #112]	; (802c9cc <__ieee754_pow+0x3c4>)
 802c95a:	4299      	cmp	r1, r3
 802c95c:	4606      	mov	r6, r0
 802c95e:	460f      	mov	r7, r1
 802c960:	468b      	mov	fp, r1
 802c962:	f340 82f7 	ble.w	802cf54 <__ieee754_pow+0x94c>
 802c966:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802c96a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802c96e:	4303      	orrs	r3, r0
 802c970:	f000 81ea 	beq.w	802cd48 <__ieee754_pow+0x740>
 802c974:	a310      	add	r3, pc, #64	; (adr r3, 802c9b8 <__ieee754_pow+0x3b0>)
 802c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c97a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802c97e:	f7d3 fe4b 	bl	8000618 <__aeabi_dmul>
 802c982:	a30d      	add	r3, pc, #52	; (adr r3, 802c9b8 <__ieee754_pow+0x3b0>)
 802c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c988:	e6d5      	b.n	802c736 <__ieee754_pow+0x12e>
 802c98a:	bf00      	nop
 802c98c:	f3af 8000 	nop.w
 802c990:	60000000 	.word	0x60000000
 802c994:	3ff71547 	.word	0x3ff71547
 802c998:	f85ddf44 	.word	0xf85ddf44
 802c99c:	3e54ae0b 	.word	0x3e54ae0b
 802c9a0:	55555555 	.word	0x55555555
 802c9a4:	3fd55555 	.word	0x3fd55555
 802c9a8:	652b82fe 	.word	0x652b82fe
 802c9ac:	3ff71547 	.word	0x3ff71547
 802c9b0:	00000000 	.word	0x00000000
 802c9b4:	bff00000 	.word	0xbff00000
 802c9b8:	8800759c 	.word	0x8800759c
 802c9bc:	7e37e43c 	.word	0x7e37e43c
 802c9c0:	3ff00000 	.word	0x3ff00000
 802c9c4:	3fd00000 	.word	0x3fd00000
 802c9c8:	3fe00000 	.word	0x3fe00000
 802c9cc:	408fffff 	.word	0x408fffff
 802c9d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 802c9d4:	f04f 0200 	mov.w	r2, #0
 802c9d8:	da05      	bge.n	802c9e6 <__ieee754_pow+0x3de>
 802c9da:	4bd3      	ldr	r3, [pc, #844]	; (802cd28 <__ieee754_pow+0x720>)
 802c9dc:	f7d3 fe1c 	bl	8000618 <__aeabi_dmul>
 802c9e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802c9e4:	460c      	mov	r4, r1
 802c9e6:	1523      	asrs	r3, r4, #20
 802c9e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c9ec:	4413      	add	r3, r2
 802c9ee:	9309      	str	r3, [sp, #36]	; 0x24
 802c9f0:	4bce      	ldr	r3, [pc, #824]	; (802cd2c <__ieee754_pow+0x724>)
 802c9f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802c9f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802c9fa:	429c      	cmp	r4, r3
 802c9fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802ca00:	dd08      	ble.n	802ca14 <__ieee754_pow+0x40c>
 802ca02:	4bcb      	ldr	r3, [pc, #812]	; (802cd30 <__ieee754_pow+0x728>)
 802ca04:	429c      	cmp	r4, r3
 802ca06:	f340 815e 	ble.w	802ccc6 <__ieee754_pow+0x6be>
 802ca0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ca0c:	3301      	adds	r3, #1
 802ca0e:	9309      	str	r3, [sp, #36]	; 0x24
 802ca10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802ca14:	f04f 0a00 	mov.w	sl, #0
 802ca18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802ca1c:	930c      	str	r3, [sp, #48]	; 0x30
 802ca1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ca20:	4bc4      	ldr	r3, [pc, #784]	; (802cd34 <__ieee754_pow+0x72c>)
 802ca22:	4413      	add	r3, r2
 802ca24:	ed93 7b00 	vldr	d7, [r3]
 802ca28:	4629      	mov	r1, r5
 802ca2a:	ec53 2b17 	vmov	r2, r3, d7
 802ca2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 802ca32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802ca36:	f7d3 fc37 	bl	80002a8 <__aeabi_dsub>
 802ca3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802ca3e:	4606      	mov	r6, r0
 802ca40:	460f      	mov	r7, r1
 802ca42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802ca46:	f7d3 fc31 	bl	80002ac <__adddf3>
 802ca4a:	4602      	mov	r2, r0
 802ca4c:	460b      	mov	r3, r1
 802ca4e:	2000      	movs	r0, #0
 802ca50:	49b9      	ldr	r1, [pc, #740]	; (802cd38 <__ieee754_pow+0x730>)
 802ca52:	f7d3 ff0b 	bl	800086c <__aeabi_ddiv>
 802ca56:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802ca5a:	4602      	mov	r2, r0
 802ca5c:	460b      	mov	r3, r1
 802ca5e:	4630      	mov	r0, r6
 802ca60:	4639      	mov	r1, r7
 802ca62:	f7d3 fdd9 	bl	8000618 <__aeabi_dmul>
 802ca66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ca6a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 802ca6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802ca72:	2300      	movs	r3, #0
 802ca74:	9302      	str	r3, [sp, #8]
 802ca76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802ca7a:	106d      	asrs	r5, r5, #1
 802ca7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802ca80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802ca84:	2200      	movs	r2, #0
 802ca86:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802ca8a:	4640      	mov	r0, r8
 802ca8c:	4649      	mov	r1, r9
 802ca8e:	4614      	mov	r4, r2
 802ca90:	461d      	mov	r5, r3
 802ca92:	f7d3 fdc1 	bl	8000618 <__aeabi_dmul>
 802ca96:	4602      	mov	r2, r0
 802ca98:	460b      	mov	r3, r1
 802ca9a:	4630      	mov	r0, r6
 802ca9c:	4639      	mov	r1, r7
 802ca9e:	f7d3 fc03 	bl	80002a8 <__aeabi_dsub>
 802caa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802caa6:	4606      	mov	r6, r0
 802caa8:	460f      	mov	r7, r1
 802caaa:	4620      	mov	r0, r4
 802caac:	4629      	mov	r1, r5
 802caae:	f7d3 fbfb 	bl	80002a8 <__aeabi_dsub>
 802cab2:	4602      	mov	r2, r0
 802cab4:	460b      	mov	r3, r1
 802cab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802caba:	f7d3 fbf5 	bl	80002a8 <__aeabi_dsub>
 802cabe:	4642      	mov	r2, r8
 802cac0:	464b      	mov	r3, r9
 802cac2:	f7d3 fda9 	bl	8000618 <__aeabi_dmul>
 802cac6:	4602      	mov	r2, r0
 802cac8:	460b      	mov	r3, r1
 802caca:	4630      	mov	r0, r6
 802cacc:	4639      	mov	r1, r7
 802cace:	f7d3 fbeb 	bl	80002a8 <__aeabi_dsub>
 802cad2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802cad6:	f7d3 fd9f 	bl	8000618 <__aeabi_dmul>
 802cada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802cade:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802cae2:	4610      	mov	r0, r2
 802cae4:	4619      	mov	r1, r3
 802cae6:	f7d3 fd97 	bl	8000618 <__aeabi_dmul>
 802caea:	a37b      	add	r3, pc, #492	; (adr r3, 802ccd8 <__ieee754_pow+0x6d0>)
 802caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802caf0:	4604      	mov	r4, r0
 802caf2:	460d      	mov	r5, r1
 802caf4:	f7d3 fd90 	bl	8000618 <__aeabi_dmul>
 802caf8:	a379      	add	r3, pc, #484	; (adr r3, 802cce0 <__ieee754_pow+0x6d8>)
 802cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cafe:	f7d3 fbd5 	bl	80002ac <__adddf3>
 802cb02:	4622      	mov	r2, r4
 802cb04:	462b      	mov	r3, r5
 802cb06:	f7d3 fd87 	bl	8000618 <__aeabi_dmul>
 802cb0a:	a377      	add	r3, pc, #476	; (adr r3, 802cce8 <__ieee754_pow+0x6e0>)
 802cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb10:	f7d3 fbcc 	bl	80002ac <__adddf3>
 802cb14:	4622      	mov	r2, r4
 802cb16:	462b      	mov	r3, r5
 802cb18:	f7d3 fd7e 	bl	8000618 <__aeabi_dmul>
 802cb1c:	a374      	add	r3, pc, #464	; (adr r3, 802ccf0 <__ieee754_pow+0x6e8>)
 802cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb22:	f7d3 fbc3 	bl	80002ac <__adddf3>
 802cb26:	4622      	mov	r2, r4
 802cb28:	462b      	mov	r3, r5
 802cb2a:	f7d3 fd75 	bl	8000618 <__aeabi_dmul>
 802cb2e:	a372      	add	r3, pc, #456	; (adr r3, 802ccf8 <__ieee754_pow+0x6f0>)
 802cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb34:	f7d3 fbba 	bl	80002ac <__adddf3>
 802cb38:	4622      	mov	r2, r4
 802cb3a:	462b      	mov	r3, r5
 802cb3c:	f7d3 fd6c 	bl	8000618 <__aeabi_dmul>
 802cb40:	a36f      	add	r3, pc, #444	; (adr r3, 802cd00 <__ieee754_pow+0x6f8>)
 802cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb46:	f7d3 fbb1 	bl	80002ac <__adddf3>
 802cb4a:	4622      	mov	r2, r4
 802cb4c:	4606      	mov	r6, r0
 802cb4e:	460f      	mov	r7, r1
 802cb50:	462b      	mov	r3, r5
 802cb52:	4620      	mov	r0, r4
 802cb54:	4629      	mov	r1, r5
 802cb56:	f7d3 fd5f 	bl	8000618 <__aeabi_dmul>
 802cb5a:	4602      	mov	r2, r0
 802cb5c:	460b      	mov	r3, r1
 802cb5e:	4630      	mov	r0, r6
 802cb60:	4639      	mov	r1, r7
 802cb62:	f7d3 fd59 	bl	8000618 <__aeabi_dmul>
 802cb66:	4642      	mov	r2, r8
 802cb68:	4604      	mov	r4, r0
 802cb6a:	460d      	mov	r5, r1
 802cb6c:	464b      	mov	r3, r9
 802cb6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802cb72:	f7d3 fb9b 	bl	80002ac <__adddf3>
 802cb76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802cb7a:	f7d3 fd4d 	bl	8000618 <__aeabi_dmul>
 802cb7e:	4622      	mov	r2, r4
 802cb80:	462b      	mov	r3, r5
 802cb82:	f7d3 fb93 	bl	80002ac <__adddf3>
 802cb86:	4642      	mov	r2, r8
 802cb88:	4606      	mov	r6, r0
 802cb8a:	460f      	mov	r7, r1
 802cb8c:	464b      	mov	r3, r9
 802cb8e:	4640      	mov	r0, r8
 802cb90:	4649      	mov	r1, r9
 802cb92:	f7d3 fd41 	bl	8000618 <__aeabi_dmul>
 802cb96:	2200      	movs	r2, #0
 802cb98:	4b68      	ldr	r3, [pc, #416]	; (802cd3c <__ieee754_pow+0x734>)
 802cb9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802cb9e:	f7d3 fb85 	bl	80002ac <__adddf3>
 802cba2:	4632      	mov	r2, r6
 802cba4:	463b      	mov	r3, r7
 802cba6:	f7d3 fb81 	bl	80002ac <__adddf3>
 802cbaa:	9802      	ldr	r0, [sp, #8]
 802cbac:	460d      	mov	r5, r1
 802cbae:	4604      	mov	r4, r0
 802cbb0:	4602      	mov	r2, r0
 802cbb2:	460b      	mov	r3, r1
 802cbb4:	4640      	mov	r0, r8
 802cbb6:	4649      	mov	r1, r9
 802cbb8:	f7d3 fd2e 	bl	8000618 <__aeabi_dmul>
 802cbbc:	2200      	movs	r2, #0
 802cbbe:	4680      	mov	r8, r0
 802cbc0:	4689      	mov	r9, r1
 802cbc2:	4b5e      	ldr	r3, [pc, #376]	; (802cd3c <__ieee754_pow+0x734>)
 802cbc4:	4620      	mov	r0, r4
 802cbc6:	4629      	mov	r1, r5
 802cbc8:	f7d3 fb6e 	bl	80002a8 <__aeabi_dsub>
 802cbcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802cbd0:	f7d3 fb6a 	bl	80002a8 <__aeabi_dsub>
 802cbd4:	4602      	mov	r2, r0
 802cbd6:	460b      	mov	r3, r1
 802cbd8:	4630      	mov	r0, r6
 802cbda:	4639      	mov	r1, r7
 802cbdc:	f7d3 fb64 	bl	80002a8 <__aeabi_dsub>
 802cbe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802cbe4:	f7d3 fd18 	bl	8000618 <__aeabi_dmul>
 802cbe8:	4622      	mov	r2, r4
 802cbea:	4606      	mov	r6, r0
 802cbec:	460f      	mov	r7, r1
 802cbee:	462b      	mov	r3, r5
 802cbf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cbf4:	f7d3 fd10 	bl	8000618 <__aeabi_dmul>
 802cbf8:	4602      	mov	r2, r0
 802cbfa:	460b      	mov	r3, r1
 802cbfc:	4630      	mov	r0, r6
 802cbfe:	4639      	mov	r1, r7
 802cc00:	f7d3 fb54 	bl	80002ac <__adddf3>
 802cc04:	4606      	mov	r6, r0
 802cc06:	460f      	mov	r7, r1
 802cc08:	4602      	mov	r2, r0
 802cc0a:	460b      	mov	r3, r1
 802cc0c:	4640      	mov	r0, r8
 802cc0e:	4649      	mov	r1, r9
 802cc10:	f7d3 fb4c 	bl	80002ac <__adddf3>
 802cc14:	9802      	ldr	r0, [sp, #8]
 802cc16:	a33c      	add	r3, pc, #240	; (adr r3, 802cd08 <__ieee754_pow+0x700>)
 802cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc1c:	4604      	mov	r4, r0
 802cc1e:	460d      	mov	r5, r1
 802cc20:	f7d3 fcfa 	bl	8000618 <__aeabi_dmul>
 802cc24:	4642      	mov	r2, r8
 802cc26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802cc2a:	464b      	mov	r3, r9
 802cc2c:	4620      	mov	r0, r4
 802cc2e:	4629      	mov	r1, r5
 802cc30:	f7d3 fb3a 	bl	80002a8 <__aeabi_dsub>
 802cc34:	4602      	mov	r2, r0
 802cc36:	460b      	mov	r3, r1
 802cc38:	4630      	mov	r0, r6
 802cc3a:	4639      	mov	r1, r7
 802cc3c:	f7d3 fb34 	bl	80002a8 <__aeabi_dsub>
 802cc40:	a333      	add	r3, pc, #204	; (adr r3, 802cd10 <__ieee754_pow+0x708>)
 802cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc46:	f7d3 fce7 	bl	8000618 <__aeabi_dmul>
 802cc4a:	a333      	add	r3, pc, #204	; (adr r3, 802cd18 <__ieee754_pow+0x710>)
 802cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc50:	4606      	mov	r6, r0
 802cc52:	460f      	mov	r7, r1
 802cc54:	4620      	mov	r0, r4
 802cc56:	4629      	mov	r1, r5
 802cc58:	f7d3 fcde 	bl	8000618 <__aeabi_dmul>
 802cc5c:	4602      	mov	r2, r0
 802cc5e:	460b      	mov	r3, r1
 802cc60:	4630      	mov	r0, r6
 802cc62:	4639      	mov	r1, r7
 802cc64:	f7d3 fb22 	bl	80002ac <__adddf3>
 802cc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802cc6a:	4b35      	ldr	r3, [pc, #212]	; (802cd40 <__ieee754_pow+0x738>)
 802cc6c:	4413      	add	r3, r2
 802cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc72:	f7d3 fb1b 	bl	80002ac <__adddf3>
 802cc76:	4604      	mov	r4, r0
 802cc78:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cc7a:	460d      	mov	r5, r1
 802cc7c:	f7d3 fc62 	bl	8000544 <__aeabi_i2d>
 802cc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802cc82:	4b30      	ldr	r3, [pc, #192]	; (802cd44 <__ieee754_pow+0x73c>)
 802cc84:	4413      	add	r3, r2
 802cc86:	e9d3 8900 	ldrd	r8, r9, [r3]
 802cc8a:	4606      	mov	r6, r0
 802cc8c:	460f      	mov	r7, r1
 802cc8e:	4622      	mov	r2, r4
 802cc90:	462b      	mov	r3, r5
 802cc92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cc96:	f7d3 fb09 	bl	80002ac <__adddf3>
 802cc9a:	4642      	mov	r2, r8
 802cc9c:	464b      	mov	r3, r9
 802cc9e:	f7d3 fb05 	bl	80002ac <__adddf3>
 802cca2:	4632      	mov	r2, r6
 802cca4:	463b      	mov	r3, r7
 802cca6:	f7d3 fb01 	bl	80002ac <__adddf3>
 802ccaa:	9802      	ldr	r0, [sp, #8]
 802ccac:	4632      	mov	r2, r6
 802ccae:	463b      	mov	r3, r7
 802ccb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ccb4:	f7d3 faf8 	bl	80002a8 <__aeabi_dsub>
 802ccb8:	4642      	mov	r2, r8
 802ccba:	464b      	mov	r3, r9
 802ccbc:	f7d3 faf4 	bl	80002a8 <__aeabi_dsub>
 802ccc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ccc4:	e607      	b.n	802c8d6 <__ieee754_pow+0x2ce>
 802ccc6:	f04f 0a01 	mov.w	sl, #1
 802ccca:	e6a5      	b.n	802ca18 <__ieee754_pow+0x410>
 802cccc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 802cd20 <__ieee754_pow+0x718>
 802ccd0:	e613      	b.n	802c8fa <__ieee754_pow+0x2f2>
 802ccd2:	bf00      	nop
 802ccd4:	f3af 8000 	nop.w
 802ccd8:	4a454eef 	.word	0x4a454eef
 802ccdc:	3fca7e28 	.word	0x3fca7e28
 802cce0:	93c9db65 	.word	0x93c9db65
 802cce4:	3fcd864a 	.word	0x3fcd864a
 802cce8:	a91d4101 	.word	0xa91d4101
 802ccec:	3fd17460 	.word	0x3fd17460
 802ccf0:	518f264d 	.word	0x518f264d
 802ccf4:	3fd55555 	.word	0x3fd55555
 802ccf8:	db6fabff 	.word	0xdb6fabff
 802ccfc:	3fdb6db6 	.word	0x3fdb6db6
 802cd00:	33333303 	.word	0x33333303
 802cd04:	3fe33333 	.word	0x3fe33333
 802cd08:	e0000000 	.word	0xe0000000
 802cd0c:	3feec709 	.word	0x3feec709
 802cd10:	dc3a03fd 	.word	0xdc3a03fd
 802cd14:	3feec709 	.word	0x3feec709
 802cd18:	145b01f5 	.word	0x145b01f5
 802cd1c:	be3e2fe0 	.word	0xbe3e2fe0
 802cd20:	00000000 	.word	0x00000000
 802cd24:	3ff00000 	.word	0x3ff00000
 802cd28:	43400000 	.word	0x43400000
 802cd2c:	0003988e 	.word	0x0003988e
 802cd30:	000bb679 	.word	0x000bb679
 802cd34:	080489b8 	.word	0x080489b8
 802cd38:	3ff00000 	.word	0x3ff00000
 802cd3c:	40080000 	.word	0x40080000
 802cd40:	080489d8 	.word	0x080489d8
 802cd44:	080489c8 	.word	0x080489c8
 802cd48:	a3b4      	add	r3, pc, #720	; (adr r3, 802d01c <__ieee754_pow+0xa14>)
 802cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd4e:	4640      	mov	r0, r8
 802cd50:	4649      	mov	r1, r9
 802cd52:	f7d3 faab 	bl	80002ac <__adddf3>
 802cd56:	4622      	mov	r2, r4
 802cd58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802cd5c:	462b      	mov	r3, r5
 802cd5e:	4630      	mov	r0, r6
 802cd60:	4639      	mov	r1, r7
 802cd62:	f7d3 faa1 	bl	80002a8 <__aeabi_dsub>
 802cd66:	4602      	mov	r2, r0
 802cd68:	460b      	mov	r3, r1
 802cd6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802cd6e:	f7d3 fee3 	bl	8000b38 <__aeabi_dcmpgt>
 802cd72:	2800      	cmp	r0, #0
 802cd74:	f47f adfe 	bne.w	802c974 <__ieee754_pow+0x36c>
 802cd78:	4aa3      	ldr	r2, [pc, #652]	; (802d008 <__ieee754_pow+0xa00>)
 802cd7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802cd7e:	4293      	cmp	r3, r2
 802cd80:	f340 810a 	ble.w	802cf98 <__ieee754_pow+0x990>
 802cd84:	151b      	asrs	r3, r3, #20
 802cd86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802cd8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802cd8e:	fa4a f303 	asr.w	r3, sl, r3
 802cd92:	445b      	add	r3, fp
 802cd94:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802cd98:	4e9c      	ldr	r6, [pc, #624]	; (802d00c <__ieee754_pow+0xa04>)
 802cd9a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802cd9e:	4116      	asrs	r6, r2
 802cda0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802cda4:	2000      	movs	r0, #0
 802cda6:	ea23 0106 	bic.w	r1, r3, r6
 802cdaa:	f1c2 0214 	rsb	r2, r2, #20
 802cdae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802cdb2:	fa4a fa02 	asr.w	sl, sl, r2
 802cdb6:	f1bb 0f00 	cmp.w	fp, #0
 802cdba:	4602      	mov	r2, r0
 802cdbc:	460b      	mov	r3, r1
 802cdbe:	4620      	mov	r0, r4
 802cdc0:	4629      	mov	r1, r5
 802cdc2:	bfb8      	it	lt
 802cdc4:	f1ca 0a00 	rsblt	sl, sl, #0
 802cdc8:	f7d3 fa6e 	bl	80002a8 <__aeabi_dsub>
 802cdcc:	e9cd 0100 	strd	r0, r1, [sp]
 802cdd0:	4642      	mov	r2, r8
 802cdd2:	464b      	mov	r3, r9
 802cdd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802cdd8:	f7d3 fa68 	bl	80002ac <__adddf3>
 802cddc:	2000      	movs	r0, #0
 802cdde:	a378      	add	r3, pc, #480	; (adr r3, 802cfc0 <__ieee754_pow+0x9b8>)
 802cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cde4:	4604      	mov	r4, r0
 802cde6:	460d      	mov	r5, r1
 802cde8:	f7d3 fc16 	bl	8000618 <__aeabi_dmul>
 802cdec:	e9dd 2300 	ldrd	r2, r3, [sp]
 802cdf0:	4606      	mov	r6, r0
 802cdf2:	460f      	mov	r7, r1
 802cdf4:	4620      	mov	r0, r4
 802cdf6:	4629      	mov	r1, r5
 802cdf8:	f7d3 fa56 	bl	80002a8 <__aeabi_dsub>
 802cdfc:	4602      	mov	r2, r0
 802cdfe:	460b      	mov	r3, r1
 802ce00:	4640      	mov	r0, r8
 802ce02:	4649      	mov	r1, r9
 802ce04:	f7d3 fa50 	bl	80002a8 <__aeabi_dsub>
 802ce08:	a36f      	add	r3, pc, #444	; (adr r3, 802cfc8 <__ieee754_pow+0x9c0>)
 802ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce0e:	f7d3 fc03 	bl	8000618 <__aeabi_dmul>
 802ce12:	a36f      	add	r3, pc, #444	; (adr r3, 802cfd0 <__ieee754_pow+0x9c8>)
 802ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce18:	4680      	mov	r8, r0
 802ce1a:	4689      	mov	r9, r1
 802ce1c:	4620      	mov	r0, r4
 802ce1e:	4629      	mov	r1, r5
 802ce20:	f7d3 fbfa 	bl	8000618 <__aeabi_dmul>
 802ce24:	4602      	mov	r2, r0
 802ce26:	460b      	mov	r3, r1
 802ce28:	4640      	mov	r0, r8
 802ce2a:	4649      	mov	r1, r9
 802ce2c:	f7d3 fa3e 	bl	80002ac <__adddf3>
 802ce30:	4604      	mov	r4, r0
 802ce32:	460d      	mov	r5, r1
 802ce34:	4602      	mov	r2, r0
 802ce36:	460b      	mov	r3, r1
 802ce38:	4630      	mov	r0, r6
 802ce3a:	4639      	mov	r1, r7
 802ce3c:	f7d3 fa36 	bl	80002ac <__adddf3>
 802ce40:	4632      	mov	r2, r6
 802ce42:	463b      	mov	r3, r7
 802ce44:	4680      	mov	r8, r0
 802ce46:	4689      	mov	r9, r1
 802ce48:	f7d3 fa2e 	bl	80002a8 <__aeabi_dsub>
 802ce4c:	4602      	mov	r2, r0
 802ce4e:	460b      	mov	r3, r1
 802ce50:	4620      	mov	r0, r4
 802ce52:	4629      	mov	r1, r5
 802ce54:	f7d3 fa28 	bl	80002a8 <__aeabi_dsub>
 802ce58:	4642      	mov	r2, r8
 802ce5a:	4606      	mov	r6, r0
 802ce5c:	460f      	mov	r7, r1
 802ce5e:	464b      	mov	r3, r9
 802ce60:	4640      	mov	r0, r8
 802ce62:	4649      	mov	r1, r9
 802ce64:	f7d3 fbd8 	bl	8000618 <__aeabi_dmul>
 802ce68:	a35b      	add	r3, pc, #364	; (adr r3, 802cfd8 <__ieee754_pow+0x9d0>)
 802ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce6e:	4604      	mov	r4, r0
 802ce70:	460d      	mov	r5, r1
 802ce72:	f7d3 fbd1 	bl	8000618 <__aeabi_dmul>
 802ce76:	a35a      	add	r3, pc, #360	; (adr r3, 802cfe0 <__ieee754_pow+0x9d8>)
 802ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce7c:	f7d3 fa14 	bl	80002a8 <__aeabi_dsub>
 802ce80:	4622      	mov	r2, r4
 802ce82:	462b      	mov	r3, r5
 802ce84:	f7d3 fbc8 	bl	8000618 <__aeabi_dmul>
 802ce88:	a357      	add	r3, pc, #348	; (adr r3, 802cfe8 <__ieee754_pow+0x9e0>)
 802ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce8e:	f7d3 fa0d 	bl	80002ac <__adddf3>
 802ce92:	4622      	mov	r2, r4
 802ce94:	462b      	mov	r3, r5
 802ce96:	f7d3 fbbf 	bl	8000618 <__aeabi_dmul>
 802ce9a:	a355      	add	r3, pc, #340	; (adr r3, 802cff0 <__ieee754_pow+0x9e8>)
 802ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cea0:	f7d3 fa02 	bl	80002a8 <__aeabi_dsub>
 802cea4:	4622      	mov	r2, r4
 802cea6:	462b      	mov	r3, r5
 802cea8:	f7d3 fbb6 	bl	8000618 <__aeabi_dmul>
 802ceac:	a352      	add	r3, pc, #328	; (adr r3, 802cff8 <__ieee754_pow+0x9f0>)
 802ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ceb2:	f7d3 f9fb 	bl	80002ac <__adddf3>
 802ceb6:	4622      	mov	r2, r4
 802ceb8:	462b      	mov	r3, r5
 802ceba:	f7d3 fbad 	bl	8000618 <__aeabi_dmul>
 802cebe:	4602      	mov	r2, r0
 802cec0:	460b      	mov	r3, r1
 802cec2:	4640      	mov	r0, r8
 802cec4:	4649      	mov	r1, r9
 802cec6:	f7d3 f9ef 	bl	80002a8 <__aeabi_dsub>
 802ceca:	4604      	mov	r4, r0
 802cecc:	460d      	mov	r5, r1
 802cece:	4602      	mov	r2, r0
 802ced0:	460b      	mov	r3, r1
 802ced2:	4640      	mov	r0, r8
 802ced4:	4649      	mov	r1, r9
 802ced6:	f7d3 fb9f 	bl	8000618 <__aeabi_dmul>
 802ceda:	2200      	movs	r2, #0
 802cedc:	e9cd 0100 	strd	r0, r1, [sp]
 802cee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802cee4:	4620      	mov	r0, r4
 802cee6:	4629      	mov	r1, r5
 802cee8:	f7d3 f9de 	bl	80002a8 <__aeabi_dsub>
 802ceec:	4602      	mov	r2, r0
 802ceee:	460b      	mov	r3, r1
 802cef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802cef4:	f7d3 fcba 	bl	800086c <__aeabi_ddiv>
 802cef8:	4632      	mov	r2, r6
 802cefa:	4604      	mov	r4, r0
 802cefc:	460d      	mov	r5, r1
 802cefe:	463b      	mov	r3, r7
 802cf00:	4640      	mov	r0, r8
 802cf02:	4649      	mov	r1, r9
 802cf04:	f7d3 fb88 	bl	8000618 <__aeabi_dmul>
 802cf08:	4632      	mov	r2, r6
 802cf0a:	463b      	mov	r3, r7
 802cf0c:	f7d3 f9ce 	bl	80002ac <__adddf3>
 802cf10:	4602      	mov	r2, r0
 802cf12:	460b      	mov	r3, r1
 802cf14:	4620      	mov	r0, r4
 802cf16:	4629      	mov	r1, r5
 802cf18:	f7d3 f9c6 	bl	80002a8 <__aeabi_dsub>
 802cf1c:	4642      	mov	r2, r8
 802cf1e:	464b      	mov	r3, r9
 802cf20:	f7d3 f9c2 	bl	80002a8 <__aeabi_dsub>
 802cf24:	4602      	mov	r2, r0
 802cf26:	460b      	mov	r3, r1
 802cf28:	2000      	movs	r0, #0
 802cf2a:	4939      	ldr	r1, [pc, #228]	; (802d010 <__ieee754_pow+0xa08>)
 802cf2c:	f7d3 f9bc 	bl	80002a8 <__aeabi_dsub>
 802cf30:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 802cf34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 802cf38:	4602      	mov	r2, r0
 802cf3a:	460b      	mov	r3, r1
 802cf3c:	da2f      	bge.n	802cf9e <__ieee754_pow+0x996>
 802cf3e:	4650      	mov	r0, sl
 802cf40:	ec43 2b10 	vmov	d0, r2, r3
 802cf44:	f000 f9c0 	bl	802d2c8 <scalbn>
 802cf48:	ec51 0b10 	vmov	r0, r1, d0
 802cf4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802cf50:	f7ff bbf1 	b.w	802c736 <__ieee754_pow+0x12e>
 802cf54:	4b2f      	ldr	r3, [pc, #188]	; (802d014 <__ieee754_pow+0xa0c>)
 802cf56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802cf5a:	429e      	cmp	r6, r3
 802cf5c:	f77f af0c 	ble.w	802cd78 <__ieee754_pow+0x770>
 802cf60:	4b2d      	ldr	r3, [pc, #180]	; (802d018 <__ieee754_pow+0xa10>)
 802cf62:	440b      	add	r3, r1
 802cf64:	4303      	orrs	r3, r0
 802cf66:	d00b      	beq.n	802cf80 <__ieee754_pow+0x978>
 802cf68:	a325      	add	r3, pc, #148	; (adr r3, 802d000 <__ieee754_pow+0x9f8>)
 802cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802cf72:	f7d3 fb51 	bl	8000618 <__aeabi_dmul>
 802cf76:	a322      	add	r3, pc, #136	; (adr r3, 802d000 <__ieee754_pow+0x9f8>)
 802cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf7c:	f7ff bbdb 	b.w	802c736 <__ieee754_pow+0x12e>
 802cf80:	4622      	mov	r2, r4
 802cf82:	462b      	mov	r3, r5
 802cf84:	f7d3 f990 	bl	80002a8 <__aeabi_dsub>
 802cf88:	4642      	mov	r2, r8
 802cf8a:	464b      	mov	r3, r9
 802cf8c:	f7d3 fdca 	bl	8000b24 <__aeabi_dcmpge>
 802cf90:	2800      	cmp	r0, #0
 802cf92:	f43f aef1 	beq.w	802cd78 <__ieee754_pow+0x770>
 802cf96:	e7e7      	b.n	802cf68 <__ieee754_pow+0x960>
 802cf98:	f04f 0a00 	mov.w	sl, #0
 802cf9c:	e718      	b.n	802cdd0 <__ieee754_pow+0x7c8>
 802cf9e:	4621      	mov	r1, r4
 802cfa0:	e7d4      	b.n	802cf4c <__ieee754_pow+0x944>
 802cfa2:	2000      	movs	r0, #0
 802cfa4:	491a      	ldr	r1, [pc, #104]	; (802d010 <__ieee754_pow+0xa08>)
 802cfa6:	f7ff bb8f 	b.w	802c6c8 <__ieee754_pow+0xc0>
 802cfaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 802cfae:	f7ff bb8b 	b.w	802c6c8 <__ieee754_pow+0xc0>
 802cfb2:	4630      	mov	r0, r6
 802cfb4:	4639      	mov	r1, r7
 802cfb6:	f7ff bb87 	b.w	802c6c8 <__ieee754_pow+0xc0>
 802cfba:	4693      	mov	fp, r2
 802cfbc:	f7ff bb98 	b.w	802c6f0 <__ieee754_pow+0xe8>
 802cfc0:	00000000 	.word	0x00000000
 802cfc4:	3fe62e43 	.word	0x3fe62e43
 802cfc8:	fefa39ef 	.word	0xfefa39ef
 802cfcc:	3fe62e42 	.word	0x3fe62e42
 802cfd0:	0ca86c39 	.word	0x0ca86c39
 802cfd4:	be205c61 	.word	0xbe205c61
 802cfd8:	72bea4d0 	.word	0x72bea4d0
 802cfdc:	3e663769 	.word	0x3e663769
 802cfe0:	c5d26bf1 	.word	0xc5d26bf1
 802cfe4:	3ebbbd41 	.word	0x3ebbbd41
 802cfe8:	af25de2c 	.word	0xaf25de2c
 802cfec:	3f11566a 	.word	0x3f11566a
 802cff0:	16bebd93 	.word	0x16bebd93
 802cff4:	3f66c16c 	.word	0x3f66c16c
 802cff8:	5555553e 	.word	0x5555553e
 802cffc:	3fc55555 	.word	0x3fc55555
 802d000:	c2f8f359 	.word	0xc2f8f359
 802d004:	01a56e1f 	.word	0x01a56e1f
 802d008:	3fe00000 	.word	0x3fe00000
 802d00c:	000fffff 	.word	0x000fffff
 802d010:	3ff00000 	.word	0x3ff00000
 802d014:	4090cbff 	.word	0x4090cbff
 802d018:	3f6f3400 	.word	0x3f6f3400
 802d01c:	652b82fe 	.word	0x652b82fe
 802d020:	3c971547 	.word	0x3c971547

0802d024 <__ieee754_sqrt>:
 802d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d028:	4955      	ldr	r1, [pc, #340]	; (802d180 <__ieee754_sqrt+0x15c>)
 802d02a:	ec55 4b10 	vmov	r4, r5, d0
 802d02e:	43a9      	bics	r1, r5
 802d030:	462b      	mov	r3, r5
 802d032:	462a      	mov	r2, r5
 802d034:	d112      	bne.n	802d05c <__ieee754_sqrt+0x38>
 802d036:	ee10 2a10 	vmov	r2, s0
 802d03a:	ee10 0a10 	vmov	r0, s0
 802d03e:	4629      	mov	r1, r5
 802d040:	f7d3 faea 	bl	8000618 <__aeabi_dmul>
 802d044:	4602      	mov	r2, r0
 802d046:	460b      	mov	r3, r1
 802d048:	4620      	mov	r0, r4
 802d04a:	4629      	mov	r1, r5
 802d04c:	f7d3 f92e 	bl	80002ac <__adddf3>
 802d050:	4604      	mov	r4, r0
 802d052:	460d      	mov	r5, r1
 802d054:	ec45 4b10 	vmov	d0, r4, r5
 802d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d05c:	2d00      	cmp	r5, #0
 802d05e:	ee10 0a10 	vmov	r0, s0
 802d062:	4621      	mov	r1, r4
 802d064:	dc0f      	bgt.n	802d086 <__ieee754_sqrt+0x62>
 802d066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802d06a:	4330      	orrs	r0, r6
 802d06c:	d0f2      	beq.n	802d054 <__ieee754_sqrt+0x30>
 802d06e:	b155      	cbz	r5, 802d086 <__ieee754_sqrt+0x62>
 802d070:	ee10 2a10 	vmov	r2, s0
 802d074:	4620      	mov	r0, r4
 802d076:	4629      	mov	r1, r5
 802d078:	f7d3 f916 	bl	80002a8 <__aeabi_dsub>
 802d07c:	4602      	mov	r2, r0
 802d07e:	460b      	mov	r3, r1
 802d080:	f7d3 fbf4 	bl	800086c <__aeabi_ddiv>
 802d084:	e7e4      	b.n	802d050 <__ieee754_sqrt+0x2c>
 802d086:	151b      	asrs	r3, r3, #20
 802d088:	d073      	beq.n	802d172 <__ieee754_sqrt+0x14e>
 802d08a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802d08e:	07dd      	lsls	r5, r3, #31
 802d090:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802d094:	bf48      	it	mi
 802d096:	0fc8      	lsrmi	r0, r1, #31
 802d098:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 802d09c:	bf44      	itt	mi
 802d09e:	0049      	lslmi	r1, r1, #1
 802d0a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802d0a4:	2500      	movs	r5, #0
 802d0a6:	1058      	asrs	r0, r3, #1
 802d0a8:	0fcb      	lsrs	r3, r1, #31
 802d0aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 802d0ae:	0049      	lsls	r1, r1, #1
 802d0b0:	2316      	movs	r3, #22
 802d0b2:	462c      	mov	r4, r5
 802d0b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 802d0b8:	19a7      	adds	r7, r4, r6
 802d0ba:	4297      	cmp	r7, r2
 802d0bc:	bfde      	ittt	le
 802d0be:	19bc      	addle	r4, r7, r6
 802d0c0:	1bd2      	suble	r2, r2, r7
 802d0c2:	19ad      	addle	r5, r5, r6
 802d0c4:	0fcf      	lsrs	r7, r1, #31
 802d0c6:	3b01      	subs	r3, #1
 802d0c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 802d0cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802d0d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802d0d4:	d1f0      	bne.n	802d0b8 <__ieee754_sqrt+0x94>
 802d0d6:	f04f 0c20 	mov.w	ip, #32
 802d0da:	469e      	mov	lr, r3
 802d0dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802d0e0:	42a2      	cmp	r2, r4
 802d0e2:	eb06 070e 	add.w	r7, r6, lr
 802d0e6:	dc02      	bgt.n	802d0ee <__ieee754_sqrt+0xca>
 802d0e8:	d112      	bne.n	802d110 <__ieee754_sqrt+0xec>
 802d0ea:	428f      	cmp	r7, r1
 802d0ec:	d810      	bhi.n	802d110 <__ieee754_sqrt+0xec>
 802d0ee:	2f00      	cmp	r7, #0
 802d0f0:	eb07 0e06 	add.w	lr, r7, r6
 802d0f4:	da42      	bge.n	802d17c <__ieee754_sqrt+0x158>
 802d0f6:	f1be 0f00 	cmp.w	lr, #0
 802d0fa:	db3f      	blt.n	802d17c <__ieee754_sqrt+0x158>
 802d0fc:	f104 0801 	add.w	r8, r4, #1
 802d100:	1b12      	subs	r2, r2, r4
 802d102:	428f      	cmp	r7, r1
 802d104:	bf88      	it	hi
 802d106:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802d10a:	1bc9      	subs	r1, r1, r7
 802d10c:	4433      	add	r3, r6
 802d10e:	4644      	mov	r4, r8
 802d110:	0052      	lsls	r2, r2, #1
 802d112:	f1bc 0c01 	subs.w	ip, ip, #1
 802d116:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 802d11a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802d11e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802d122:	d1dd      	bne.n	802d0e0 <__ieee754_sqrt+0xbc>
 802d124:	430a      	orrs	r2, r1
 802d126:	d006      	beq.n	802d136 <__ieee754_sqrt+0x112>
 802d128:	1c5c      	adds	r4, r3, #1
 802d12a:	bf13      	iteet	ne
 802d12c:	3301      	addne	r3, #1
 802d12e:	3501      	addeq	r5, #1
 802d130:	4663      	moveq	r3, ip
 802d132:	f023 0301 	bicne.w	r3, r3, #1
 802d136:	106a      	asrs	r2, r5, #1
 802d138:	085b      	lsrs	r3, r3, #1
 802d13a:	07e9      	lsls	r1, r5, #31
 802d13c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802d140:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802d144:	bf48      	it	mi
 802d146:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802d14a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 802d14e:	461c      	mov	r4, r3
 802d150:	e780      	b.n	802d054 <__ieee754_sqrt+0x30>
 802d152:	0aca      	lsrs	r2, r1, #11
 802d154:	3815      	subs	r0, #21
 802d156:	0549      	lsls	r1, r1, #21
 802d158:	2a00      	cmp	r2, #0
 802d15a:	d0fa      	beq.n	802d152 <__ieee754_sqrt+0x12e>
 802d15c:	02d6      	lsls	r6, r2, #11
 802d15e:	d50a      	bpl.n	802d176 <__ieee754_sqrt+0x152>
 802d160:	f1c3 0420 	rsb	r4, r3, #32
 802d164:	fa21 f404 	lsr.w	r4, r1, r4
 802d168:	1e5d      	subs	r5, r3, #1
 802d16a:	4099      	lsls	r1, r3
 802d16c:	4322      	orrs	r2, r4
 802d16e:	1b43      	subs	r3, r0, r5
 802d170:	e78b      	b.n	802d08a <__ieee754_sqrt+0x66>
 802d172:	4618      	mov	r0, r3
 802d174:	e7f0      	b.n	802d158 <__ieee754_sqrt+0x134>
 802d176:	0052      	lsls	r2, r2, #1
 802d178:	3301      	adds	r3, #1
 802d17a:	e7ef      	b.n	802d15c <__ieee754_sqrt+0x138>
 802d17c:	46a0      	mov	r8, r4
 802d17e:	e7bf      	b.n	802d100 <__ieee754_sqrt+0xdc>
 802d180:	7ff00000 	.word	0x7ff00000

0802d184 <fabs>:
 802d184:	ec51 0b10 	vmov	r0, r1, d0
 802d188:	ee10 2a10 	vmov	r2, s0
 802d18c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802d190:	ec43 2b10 	vmov	d0, r2, r3
 802d194:	4770      	bx	lr

0802d196 <finite>:
 802d196:	ee10 3a90 	vmov	r3, s1
 802d19a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802d19e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802d1a2:	0fc0      	lsrs	r0, r0, #31
 802d1a4:	4770      	bx	lr

0802d1a6 <matherr>:
 802d1a6:	2000      	movs	r0, #0
 802d1a8:	4770      	bx	lr
 802d1aa:	0000      	movs	r0, r0
 802d1ac:	0000      	movs	r0, r0
	...

0802d1b0 <nan>:
 802d1b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802d1b8 <nan+0x8>
 802d1b4:	4770      	bx	lr
 802d1b6:	bf00      	nop
 802d1b8:	00000000 	.word	0x00000000
 802d1bc:	7ff80000 	.word	0x7ff80000

0802d1c0 <rint>:
 802d1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802d1c2:	ec51 0b10 	vmov	r0, r1, d0
 802d1c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802d1ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802d1ce:	2e13      	cmp	r6, #19
 802d1d0:	460b      	mov	r3, r1
 802d1d2:	ee10 4a10 	vmov	r4, s0
 802d1d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802d1da:	dc56      	bgt.n	802d28a <rint+0xca>
 802d1dc:	2e00      	cmp	r6, #0
 802d1de:	da2b      	bge.n	802d238 <rint+0x78>
 802d1e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802d1e4:	4302      	orrs	r2, r0
 802d1e6:	d023      	beq.n	802d230 <rint+0x70>
 802d1e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802d1ec:	4302      	orrs	r2, r0
 802d1ee:	4254      	negs	r4, r2
 802d1f0:	4314      	orrs	r4, r2
 802d1f2:	0c4b      	lsrs	r3, r1, #17
 802d1f4:	0b24      	lsrs	r4, r4, #12
 802d1f6:	045b      	lsls	r3, r3, #17
 802d1f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802d1fc:	ea44 0103 	orr.w	r1, r4, r3
 802d200:	460b      	mov	r3, r1
 802d202:	492f      	ldr	r1, [pc, #188]	; (802d2c0 <rint+0x100>)
 802d204:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 802d208:	e9d1 6700 	ldrd	r6, r7, [r1]
 802d20c:	4602      	mov	r2, r0
 802d20e:	4639      	mov	r1, r7
 802d210:	4630      	mov	r0, r6
 802d212:	f7d3 f84b 	bl	80002ac <__adddf3>
 802d216:	e9cd 0100 	strd	r0, r1, [sp]
 802d21a:	463b      	mov	r3, r7
 802d21c:	4632      	mov	r2, r6
 802d21e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d222:	f7d3 f841 	bl	80002a8 <__aeabi_dsub>
 802d226:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802d22a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802d22e:	4639      	mov	r1, r7
 802d230:	ec41 0b10 	vmov	d0, r0, r1
 802d234:	b003      	add	sp, #12
 802d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d238:	4a22      	ldr	r2, [pc, #136]	; (802d2c4 <rint+0x104>)
 802d23a:	4132      	asrs	r2, r6
 802d23c:	ea01 0702 	and.w	r7, r1, r2
 802d240:	4307      	orrs	r7, r0
 802d242:	d0f5      	beq.n	802d230 <rint+0x70>
 802d244:	0852      	lsrs	r2, r2, #1
 802d246:	4011      	ands	r1, r2
 802d248:	430c      	orrs	r4, r1
 802d24a:	d00b      	beq.n	802d264 <rint+0xa4>
 802d24c:	ea23 0202 	bic.w	r2, r3, r2
 802d250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802d254:	2e13      	cmp	r6, #19
 802d256:	fa43 f306 	asr.w	r3, r3, r6
 802d25a:	bf0c      	ite	eq
 802d25c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802d260:	2400      	movne	r4, #0
 802d262:	4313      	orrs	r3, r2
 802d264:	4916      	ldr	r1, [pc, #88]	; (802d2c0 <rint+0x100>)
 802d266:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802d26a:	4622      	mov	r2, r4
 802d26c:	e9d5 4500 	ldrd	r4, r5, [r5]
 802d270:	4620      	mov	r0, r4
 802d272:	4629      	mov	r1, r5
 802d274:	f7d3 f81a 	bl	80002ac <__adddf3>
 802d278:	e9cd 0100 	strd	r0, r1, [sp]
 802d27c:	4622      	mov	r2, r4
 802d27e:	462b      	mov	r3, r5
 802d280:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d284:	f7d3 f810 	bl	80002a8 <__aeabi_dsub>
 802d288:	e7d2      	b.n	802d230 <rint+0x70>
 802d28a:	2e33      	cmp	r6, #51	; 0x33
 802d28c:	dd07      	ble.n	802d29e <rint+0xde>
 802d28e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802d292:	d1cd      	bne.n	802d230 <rint+0x70>
 802d294:	ee10 2a10 	vmov	r2, s0
 802d298:	f7d3 f808 	bl	80002ac <__adddf3>
 802d29c:	e7c8      	b.n	802d230 <rint+0x70>
 802d29e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802d2a2:	f04f 32ff 	mov.w	r2, #4294967295
 802d2a6:	40f2      	lsrs	r2, r6
 802d2a8:	4210      	tst	r0, r2
 802d2aa:	d0c1      	beq.n	802d230 <rint+0x70>
 802d2ac:	0852      	lsrs	r2, r2, #1
 802d2ae:	4210      	tst	r0, r2
 802d2b0:	bf1f      	itttt	ne
 802d2b2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802d2b6:	ea20 0202 	bicne.w	r2, r0, r2
 802d2ba:	4134      	asrne	r4, r6
 802d2bc:	4314      	orrne	r4, r2
 802d2be:	e7d1      	b.n	802d264 <rint+0xa4>
 802d2c0:	080489e8 	.word	0x080489e8
 802d2c4:	000fffff 	.word	0x000fffff

0802d2c8 <scalbn>:
 802d2c8:	b570      	push	{r4, r5, r6, lr}
 802d2ca:	ec55 4b10 	vmov	r4, r5, d0
 802d2ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802d2d2:	4606      	mov	r6, r0
 802d2d4:	462b      	mov	r3, r5
 802d2d6:	b9aa      	cbnz	r2, 802d304 <scalbn+0x3c>
 802d2d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802d2dc:	4323      	orrs	r3, r4
 802d2de:	d03b      	beq.n	802d358 <scalbn+0x90>
 802d2e0:	4b31      	ldr	r3, [pc, #196]	; (802d3a8 <scalbn+0xe0>)
 802d2e2:	4629      	mov	r1, r5
 802d2e4:	2200      	movs	r2, #0
 802d2e6:	ee10 0a10 	vmov	r0, s0
 802d2ea:	f7d3 f995 	bl	8000618 <__aeabi_dmul>
 802d2ee:	4b2f      	ldr	r3, [pc, #188]	; (802d3ac <scalbn+0xe4>)
 802d2f0:	429e      	cmp	r6, r3
 802d2f2:	4604      	mov	r4, r0
 802d2f4:	460d      	mov	r5, r1
 802d2f6:	da12      	bge.n	802d31e <scalbn+0x56>
 802d2f8:	a327      	add	r3, pc, #156	; (adr r3, 802d398 <scalbn+0xd0>)
 802d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2fe:	f7d3 f98b 	bl	8000618 <__aeabi_dmul>
 802d302:	e009      	b.n	802d318 <scalbn+0x50>
 802d304:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802d308:	428a      	cmp	r2, r1
 802d30a:	d10c      	bne.n	802d326 <scalbn+0x5e>
 802d30c:	ee10 2a10 	vmov	r2, s0
 802d310:	4620      	mov	r0, r4
 802d312:	4629      	mov	r1, r5
 802d314:	f7d2 ffca 	bl	80002ac <__adddf3>
 802d318:	4604      	mov	r4, r0
 802d31a:	460d      	mov	r5, r1
 802d31c:	e01c      	b.n	802d358 <scalbn+0x90>
 802d31e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802d322:	460b      	mov	r3, r1
 802d324:	3a36      	subs	r2, #54	; 0x36
 802d326:	4432      	add	r2, r6
 802d328:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802d32c:	428a      	cmp	r2, r1
 802d32e:	dd0b      	ble.n	802d348 <scalbn+0x80>
 802d330:	ec45 4b11 	vmov	d1, r4, r5
 802d334:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 802d3a0 <scalbn+0xd8>
 802d338:	f000 f83c 	bl	802d3b4 <copysign>
 802d33c:	a318      	add	r3, pc, #96	; (adr r3, 802d3a0 <scalbn+0xd8>)
 802d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d342:	ec51 0b10 	vmov	r0, r1, d0
 802d346:	e7da      	b.n	802d2fe <scalbn+0x36>
 802d348:	2a00      	cmp	r2, #0
 802d34a:	dd08      	ble.n	802d35e <scalbn+0x96>
 802d34c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802d350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802d354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802d358:	ec45 4b10 	vmov	d0, r4, r5
 802d35c:	bd70      	pop	{r4, r5, r6, pc}
 802d35e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802d362:	da0d      	bge.n	802d380 <scalbn+0xb8>
 802d364:	f24c 3350 	movw	r3, #50000	; 0xc350
 802d368:	429e      	cmp	r6, r3
 802d36a:	ec45 4b11 	vmov	d1, r4, r5
 802d36e:	dce1      	bgt.n	802d334 <scalbn+0x6c>
 802d370:	ed9f 0b09 	vldr	d0, [pc, #36]	; 802d398 <scalbn+0xd0>
 802d374:	f000 f81e 	bl	802d3b4 <copysign>
 802d378:	a307      	add	r3, pc, #28	; (adr r3, 802d398 <scalbn+0xd0>)
 802d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d37e:	e7e0      	b.n	802d342 <scalbn+0x7a>
 802d380:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802d384:	3236      	adds	r2, #54	; 0x36
 802d386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802d38a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802d38e:	4620      	mov	r0, r4
 802d390:	4629      	mov	r1, r5
 802d392:	2200      	movs	r2, #0
 802d394:	4b06      	ldr	r3, [pc, #24]	; (802d3b0 <scalbn+0xe8>)
 802d396:	e7b2      	b.n	802d2fe <scalbn+0x36>
 802d398:	c2f8f359 	.word	0xc2f8f359
 802d39c:	01a56e1f 	.word	0x01a56e1f
 802d3a0:	8800759c 	.word	0x8800759c
 802d3a4:	7e37e43c 	.word	0x7e37e43c
 802d3a8:	43500000 	.word	0x43500000
 802d3ac:	ffff3cb0 	.word	0xffff3cb0
 802d3b0:	3c900000 	.word	0x3c900000

0802d3b4 <copysign>:
 802d3b4:	ec51 0b10 	vmov	r0, r1, d0
 802d3b8:	ee11 0a90 	vmov	r0, s3
 802d3bc:	ee10 2a10 	vmov	r2, s0
 802d3c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802d3c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802d3c8:	ea41 0300 	orr.w	r3, r1, r0
 802d3cc:	ec43 2b10 	vmov	d0, r2, r3
 802d3d0:	4770      	bx	lr
	...

0802d3d4 <_init>:
 802d3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d3d6:	bf00      	nop
 802d3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d3da:	bc08      	pop	{r3}
 802d3dc:	469e      	mov	lr, r3
 802d3de:	4770      	bx	lr

0802d3e0 <_fini>:
 802d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d3e2:	bf00      	nop
 802d3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d3e6:	bc08      	pop	{r3}
 802d3e8:	469e      	mov	lr, r3
 802d3ea:	4770      	bx	lr
